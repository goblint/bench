/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s16 int16_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/attach.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_105 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_105 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_117 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_117 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_118 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_118 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_130 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_128 {
   struct __anonstruct_129 __anonCompField___anonunion_128_28 ;
   struct __anonstruct_130 __anonCompField___anonunion_128_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_128 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_131 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_131 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_136 {
   struct list_head slab_list ;
   struct __anonstruct_137 __anonCompField___anonunion_136_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_138 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_139 __anonCompField___anonunion_138_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_135 {
   union __anonunion_136 __anonCompField___anonstruct_135_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_138 __anonCompField___anonstruct_135_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_143 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_142 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_143 __anonCompField___anonstruct_142_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_144 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_132 {
   struct __anonstruct_133 __anonCompField___anonunion_132_31 ;
   struct __anonstruct_134 __anonCompField___anonunion_132_32 ;
   struct __anonstruct_135 __anonCompField___anonunion_132_37 ;
   struct __anonstruct_140 __anonCompField___anonunion_132_38 ;
   struct __anonstruct_141 __anonCompField___anonunion_132_39 ;
   struct __anonstruct_142 __anonCompField___anonunion_132_41 ;
   struct __anonstruct_144 __anonCompField___anonunion_132_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_145 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_132 __anonCompField_page_43 ;
   union __anonunion_145 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_146 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_147 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_147 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_251 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_251 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_252 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_252 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_253 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_253 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_294 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_294 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_296 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_297 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_298 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_301 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_302 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_300 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_301 _addr_bnd ;
   struct __anonstruct__addr_pkey_302 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_299 {
   void *_addr ;
   union __anonunion_300 __anonCompField___anonstruct__sigfault_299_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_303 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_304 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_295 _kill ;
   struct __anonstruct__timer_296 _timer ;
   struct __anonstruct__rt_297 _rt ;
   struct __anonstruct__sigchld_298 _sigchld ;
   struct __anonstruct__sigfault_299 _sigfault ;
   struct __anonstruct__sigpoll_303 _sigpoll ;
   struct __anonstruct__sigsys_304 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_309 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_309 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_314 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_314 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_316 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_316 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_394 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_394 __anonCompField_pci_dev_56 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_408 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_407 {
   struct __anonstruct_408 __anonCompField___anonunion_407_57 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_407 __anonCompField_lockref_58 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_410 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_59 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_409 __anonCompField_qstr_60 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_412 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_411 __anonCompField_dentry_61 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_412 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_419 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_420 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_419 __anonCompField_io_cq_62 ;
   union __anonunion_420 __anonCompField_io_cq_63 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_421 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_421 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_422 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_422 __anonCompField_kqid_64 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_424 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_423 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_424 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_423 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_429 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_430 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_427 __anonCompField_inode_65 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_428 __anonCompField_inode_66 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_429 __anonCompField_inode_67 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_430 __anonCompField_inode_68 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_431 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_431 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_433 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_432 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_433 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_432 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
struct led_pattern;
#line 123 
enum led_brightness {
    LED_OFF = 0,
    LED_ON = 1,
    LED_HALF = 127,
    LED_FULL = 255
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_trigger;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_classdev {
   char *name ;
   enum led_brightness brightness ;
   enum led_brightness max_brightness ;
   int flags ;
   unsigned long work_flags ;
   void (*brightness_set)(struct led_classdev *, enum led_brightness ) ;
   int (*brightness_set_blocking)(struct led_classdev *, enum led_brightness ) ;
   enum led_brightness (*brightness_get)(struct led_classdev *) ;
   int (*blink_set)(struct led_classdev *, unsigned long *, unsigned long *) ;
   int (*pattern_set)(struct led_classdev *, struct led_pattern *, u32 , int ) ;
   int (*pattern_clear)(struct led_classdev *) ;
   struct device *dev ;
   struct attribute_group **groups ;
   struct list_head node ;
   char *default_trigger ;
   unsigned long blink_delay_on ;
   unsigned long blink_delay_off ;
   struct timer_list blink_timer ;
   int blink_brightness ;
   int new_blink_brightness ;
   void (*flash_resume)(struct led_classdev *) ;
   struct work_struct set_brightness_work ;
   int delayed_set_value ;
   struct rw_semaphore trigger_lock ;
   struct led_trigger *trigger ;
   struct list_head trig_list ;
   void *trigger_data ;
   bool activated ;
   int brightness_hw_changed ;
   struct kernfs_node *brightness_hw_changed_kn ;
   struct mutex led_access ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_trigger {
   char *name ;
   int (*activate)(struct led_classdev *) ;
   void (*deactivate)(struct led_classdev *) ;
   rwlock_t leddev_list_lock ;
   struct list_head led_cdevs ;
   struct list_head next_trig ;
   struct attribute_group **groups ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_pattern {
   u32 delta_t ;
   int brightness ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_447 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_449 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_448 {
   unsigned long nr_segs ;
   struct __anonstruct_449 __anonCompField___anonunion_448_70 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_447 __anonCompField_iov_iter_69 ;
   union __anonunion_448 __anonCompField_iov_iter_71 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_10675 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_10675 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_468 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_468 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_469 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_469 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_480 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_481 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_482 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_483 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_480 ports ;
   struct __anonstruct_icmpt_481 icmpt ;
   struct __anonstruct_dnports_482 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_483 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_484 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_484 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_490 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_491 __anonCompField___anonstruct_490_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct __anonstruct_490 __anonCompField___anonunion_489_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_493 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   struct __anonstruct_495 __anonCompField___anonunion_494_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_497 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   __wsum csum ;
   struct __anonstruct_497 __anonCompField___anonunion_496_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_499 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_500 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_489 __anonCompField_sk_buff_88 ;
   union __anonunion_492 __anonCompField_sk_buff_89 ;
   union __anonunion_493 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_494 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_498 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_499 __anonCompField_sk_buff_96 ;
   union __anonunion_500 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_530 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_530 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_531 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_531 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_532 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_532 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_533 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_533 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_534 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_534 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_535 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_535 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_536 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_536 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_537 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_537 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_538 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_539 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_538 ifr_ifrn ;
   union __anonunion_ifr_ifru_539 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_558 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_558 __anonCompField_ethtool_rxnfc_100 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_561 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_561 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_563 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_562 {
   struct __anonstruct_563 __anonCompField___anonunion_562_101 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_562 __anonCompField_ctl_table_header_102 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_564 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_564 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_565 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_565 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_566 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_566 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_567 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_567 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_569 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_569 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_582 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct __anonstruct_582 __anonCompField___anonunion_581_103 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_581 __anonCompField_keyring_index_key_104 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_584 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   struct keyring_index_key index_key ;
   struct __anonstruct_586 __anonCompField___anonunion_585_107 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_588 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_587 {
   union key_payload payload ;
   struct __anonstruct_588 __anonCompField___anonunion_587_109 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_583 __anonCompField_key_105 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_584 __anonCompField_key_106 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_585 __anonCompField_key_108 ;
   union __anonunion_587 __anonCompField_key_110 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_591 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_591 __anonCompField_cred_111 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_592 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_592 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_594 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_593 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_594 __anonCompField___anonunion_593_112 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_593 __anonCompField_uid_gid_map_113 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_596 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_598 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_598 __anonCompField___anonstruct_597_116 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_600 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_602 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_604 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_603 {
   union __anonunion_604 __anonCompField___anonstruct_603_121 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_605 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_606 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_607 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_608 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_609 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_596 __anonCompField_bpf_attr_115 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_600 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_601 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_test_602 test ;
   struct __anonstruct_603 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_info_605 info ;
   struct __anonstruct_query_606 query ;
   struct __anonstruct_raw_tracepoint_607 raw_tracepoint ;
   struct __anonstruct_608 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_task_fd_query_609 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_642 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_642 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_644 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct __anonstruct_tail_call_644 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_643 __anonCompField_bpf_jit_poke_descriptor_148 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_645 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_645 __anonCompField_bpf_prog_aux_149 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_647 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_647 __anonCompField_bpf_cgroup_storage_151 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_649 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_648 {
   struct __anonstruct_649 __anonCompField___anonunion_648_152 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_648 __anonCompField_sock_cgroup_data_153 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_672 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_672 __anonCompField_netlink_callback_154 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_678 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_680 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_676 {
   struct __anonstruct_677 __anonCompField___anonunion_676_156 ;
   struct __anonstruct_678 __anonCompField___anonunion_676_157 ;
   struct __anonstruct_679 __anonCompField___anonunion_676_158 ;
   struct __anonstruct_xsk_680 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_676 __anonCompField_netdev_bpf_159 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15108 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15109 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_681 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_682 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_681 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15108 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15109 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_682 __anonCompField_net_device_160 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct survey_info {
   struct ieee80211_channel *channel ;
   u64 time ;
   u64 time_busy ;
   u64 time_ext_busy ;
   u64 time_rx ;
   u64 time_tx ;
   u64 time_scan ;
   u64 time_bss_rx ;
   u32 filled ;
   s8 noise ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_735 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_735 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_737 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_737 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_738 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_738 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_746 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_745 {
   void *validation_data ;
   struct __anonstruct_746 __anonCompField___anonunion_745_163 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_745 __anonCompField_nla_policy_164 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_820 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_821 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_819 {
   struct __anonstruct_820 __anonCompField___anonunion_819_166 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_821 __anonCompField___anonunion_819_167 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_819 __anonCompField_tcf_result_168 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_823 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_823 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_836 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_836 __anonCompField_bdi_writeback_170 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_837 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_837 __anonCompField_bio_171 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_840 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_841 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_843 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_844 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_842 {
   struct __anonstruct_elv_843 elv ;
   struct __anonstruct_flush_844 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_845 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_840 __anonCompField_request_172 ;
   union __anonunion_841 __anonCompField_request_173 ;
   union __anonunion_842 __anonCompField_request_174 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_845 __anonCompField_request_175 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_864 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_864 __anonCompField_kernel_param_176 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_865 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_865 __anonCompField_bpf_prog_177 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_887 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_887 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_889 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_888 {
   __addrpair skc_addrpair ;
   struct __anonstruct_889 __anonCompField___anonunion_888_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_890 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_892 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   __portpair skc_portpair ;
   struct __anonstruct_892 __anonCompField___anonunion_891_182 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_893 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_896 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_888 __anonCompField_sock_common_180 ;
   union __anonunion_890 __anonCompField_sock_common_181 ;
   union __anonunion_891 __anonCompField_sock_common_183 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_893 __anonCompField_sock_common_184 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_894 __anonCompField_sock_common_185 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_895 __anonCompField_sock_common_186 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_896 __anonCompField_sock_common_187 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_897 __anonCompField_sock_common_188 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_898 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_899 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_900 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_898 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_899 __anonCompField_sock_189 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_900 __anonCompField_sock_190 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_935 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_935 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 1430 
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_1022 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_1022 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1023 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1023 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_rx_ctl {
   u32 rx_control_0 ;
   u32 rx_control_1 ;
} __attribute__((__packed__, __aligned__(4)));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_rx_status {
   u32 rx_status_0 ;
   u32 rx_status_1 ;
} __attribute__((__packed__, __aligned__(4)));
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_2w_tx_ctl {
   u32 tx_control_0 ;
   u32 tx_control_1 ;
} __attribute__((__packed__, __aligned__(4)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_4w_tx_ctl {
   u32 tx_control_0 ;
   u32 tx_control_1 ;
   u32 tx_control_2 ;
   u32 tx_control_3 ;
} __attribute__((__packed__, __aligned__(4)));
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_tx_status {
   u32 tx_status_0 ;
   u32 tx_status_1 ;
} __attribute__((__packed__, __aligned__(4)));
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_5210_tx_desc {
   struct ath5k_hw_2w_tx_ctl tx_ctl ;
   struct ath5k_hw_tx_status tx_stat ;
} __attribute__((__packed__, __aligned__(4)));
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_5212_tx_desc {
   struct ath5k_hw_4w_tx_ctl tx_ctl ;
   struct ath5k_hw_tx_status tx_stat ;
} __attribute__((__packed__, __aligned__(4)));
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_hw_all_rx_desc {
   struct ath5k_hw_rx_ctl rx_ctl ;
   struct ath5k_hw_rx_status rx_stat ;
} __attribute__((__packed__, __aligned__(4)));
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
union __anonunion_ud_1025 {
   struct ath5k_hw_5210_tx_desc ds_tx5210 ;
   struct ath5k_hw_5212_tx_desc ds_tx5212 ;
   struct ath5k_hw_all_rx_desc ds_rx ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
struct ath5k_desc {
   u32 ds_link ;
   u32 ds_data ;
   union __anonunion_ud_1025 ud ;
} __attribute__((__packed__, __aligned__(4)));
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_chan_pcal_info_rf5111 {
   u8 pwr[11U] ;
   u8 pcdac[11U] ;
   u8 pcdac_min ;
   u8 pcdac_max ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_chan_pcal_info_rf5112 {
   s8 pwr_x0[4U] ;
   s8 pwr_x3[3U] ;
   u8 pcdac_x0[4U] ;
   u8 pcdac_x3[3U] ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_chan_pcal_info_rf2413 {
   s8 pwr_i[4U] ;
   u8 pddac_i[4U] ;
   s8 pwr[4U][5U] ;
   u8 pddac[4U][5U] ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_pdgain_info {
   u8 pd_points ;
   u8 *pd_step ;
   s16 *pd_pwr ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
union __anonunion_1026 {
   struct ath5k_chan_pcal_info_rf5111 rf5111_info ;
   struct ath5k_chan_pcal_info_rf5112 rf5112_info ;
   struct ath5k_chan_pcal_info_rf2413 rf2413_info ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_chan_pcal_info {
   u16 freq ;
   s16 max_pwr ;
   s16 min_pwr ;
   union __anonunion_1026 __anonCompField_ath5k_chan_pcal_info_198 ;
   struct ath5k_pdgain_info *pd_curves ;
};
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_rate_pcal_info {
   u16 freq ;
   u16 target_power_6to24 ;
   u16 target_power_36 ;
   u16 target_power_48 ;
   u16 target_power_54 ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_edge_power {
   u16 freq ;
   u16 edge ;
   bool flag ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.h"
struct ath5k_eeprom_info {
   u16 ee_magic ;
   u16 ee_protect ;
   u16 ee_regdomain ;
   u16 ee_version ;
   u16 ee_header ;
   u16 ee_ant_gain ;
   u8 ee_rfkill_pin ;
   bool ee_rfkill_pol ;
   bool ee_is_hb63 ;
   bool ee_serdes ;
   u16 ee_misc0 ;
   u16 ee_misc1 ;
   u16 ee_misc2 ;
   u16 ee_misc3 ;
   u16 ee_misc4 ;
   u16 ee_misc5 ;
   u16 ee_misc6 ;
   u16 ee_cck_ofdm_gain_delta ;
   u16 ee_cck_ofdm_power_delta ;
   u16 ee_scaled_cck_delta ;
   u16 ee_i_cal[3U] ;
   u16 ee_q_cal[3U] ;
   u16 ee_fixed_bias[3U] ;
   u16 ee_turbo_max_power[3U] ;
   u16 ee_xr_power[3U] ;
   u16 ee_switch_settling[3U] ;
   u16 ee_atn_tx_rx[3U] ;
   u16 ee_ant_control[3U][11U] ;
   u16 ee_ob[3U][4U] ;
   u16 ee_db[3U][4U] ;
   u16 ee_tx_end2xlna_enable[3U] ;
   u16 ee_tx_end2xpa_disable[3U] ;
   u16 ee_tx_frm2xpa_enable[3U] ;
   u16 ee_thr_62[3U] ;
   u16 ee_xlna_gain[3U] ;
   u16 ee_xpd[3U] ;
   u16 ee_x_gain[3U] ;
   u16 ee_i_gain[3U] ;
   u16 ee_margin_tx_rx[3U] ;
   u16 ee_switch_settling_turbo[3U] ;
   u16 ee_margin_tx_rx_turbo[3U] ;
   u16 ee_atn_tx_rx_turbo[3U] ;
   u16 ee_false_detect[3U] ;
   u8 ee_pd_gains[3U] ;
   u8 ee_pdc_to_idx[3U][4U] ;
   u8 ee_n_piers[3U] ;
   struct ath5k_chan_pcal_info ee_pwr_cal_a[10U] ;
   struct ath5k_chan_pcal_info ee_pwr_cal_b[4U] ;
   struct ath5k_chan_pcal_info ee_pwr_cal_g[4U] ;
   u8 ee_rate_target_pwr_num[3U] ;
   struct ath5k_rate_pcal_info ee_rate_tpwr_a[10U] ;
   struct ath5k_rate_pcal_info ee_rate_tpwr_b[4U] ;
   struct ath5k_rate_pcal_info ee_rate_tpwr_g[4U] ;
   u8 ee_ctls ;
   u8 ee_ctl[32U] ;
   struct ath5k_edge_power ee_ctl_pwr[256U] ;
   s16 ee_noise_floor_thr[3U] ;
   s8 ee_adc_desired_size[3U] ;
   s8 ee_pga_desired_size[3U] ;
   s8 ee_adc_desired_size_turbo[3U] ;
   s8 ee_pga_desired_size_turbo[3U] ;
   s8 ee_pd_gain_overlap ;
   u16 ee_spur_chans[5U][2U] ;
   u32 ee_antenna[3U][3U] ;
};
#line 496 
struct ath5k_hw;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.h"
struct ath5k_dbg_info {
   unsigned int level ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_ani {
   bool caldone ;
   unsigned int longcal_timer ;
   unsigned int shortcal_timer ;
   unsigned int resetcal_timer ;
   unsigned int checkani_timer ;
   struct timer_list timer ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_cycle_counters {
   u32 cycles ;
   u32 rx_busy ;
   u32 rx_frame ;
   u32 tx_frame ;
};
#line 51 
enum ath_device_state {
    ATH_HW_UNAVAILABLE = 0,
    ATH_HW_INITIALIZED = 1
};
#line 67 
enum ath_bus_type {
    ATH_PCI = 0,
    ATH_AHB = 1,
    ATH_USB = 2
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct reg_dmn_pair_mapping {
   u16 reg_domain ;
   u16 reg_5ghz_ctl ;
   u16 reg_2ghz_ctl ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_regulatory {
   char alpha2[2U] ;
   enum nl80211_dfs_regions region ;
   u16 country_code ;
   u16 max_power_level ;
   u16 current_rd ;
   int16_t power_limit ;
   struct reg_dmn_pair_mapping *regpair ;
};
#line 89 
enum ath_crypt_caps {
    ATH_CRYPT_CAP_CIPHER_AESCCM = 1,
    ATH_CRYPT_CAP_MIC_COMBINED = 2
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_ops {
   unsigned int (*read)(void *, u32 ) ;
   void (*multi_read)(void *, u32 *, u32 *, u16 ) ;
   void (*write)(void *, u32 , u32 ) ;
   void (*enable_write_buffer)(void *) ;
   void (*write_flush)(void *) ;
   u32 (*rmw)(void *, u32 , u32 , u32 ) ;
   void (*enable_rmw_buffer)(void *) ;
   void (*rmw_flush)(void *) ;
};
#line 135 
struct ath_common;
#line 136 
struct ath_bus_ops;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_ps_ops {
   void (*wakeup)(struct ath_common *) ;
   void (*restore)(struct ath_common *) ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
struct ath_common {
   void *ah ;
   void *priv ;
   struct ieee80211_hw *hw ;
   int debug_mask ;
   enum ath_device_state state ;
   unsigned long op_flags ;
   struct ath_ani ani ;
   u16 cachelsz ;
   u16 curaid ;
   u8 macaddr[6U] ;
   u8 curbssid[6U] ;
   u8 bssidmask[6U] ;
   u32 rx_bufsize ;
   u32 keymax ;
   unsigned long keymap[2U] ;
   unsigned long tkip_keymap[2U] ;
   unsigned long ccmp_keymap[2U] ;
   enum ath_crypt_caps crypt_caps ;
   unsigned int clockrate ;
   spinlock_t cc_lock ;
   struct ath_cycle_counters cc_ani ;
   struct ath_cycle_counters cc_survey ;
   struct ath_regulatory regulatory ;
   struct ath_regulatory reg_world_copy ;
   struct ath_ops *ops ;
   struct ath_bus_ops *bus_ops ;
   struct ath_ps_ops *ps_ops ;
   bool btcoex_enabled ;
   bool disable_ani ;
   bool bt_ant_diversity ;
   int last_rssi ;
   struct ieee80211_supported_band sbands[4U] ;
};
#line 333 
enum ath5k_ani_mode {
    ATH5K_ANI_MODE_OFF = 0,
    ATH5K_ANI_MODE_MANUAL_LOW = 1,
    ATH5K_ANI_MODE_MANUAL_HIGH = 2,
    ATH5K_ANI_MODE_AUTO = 3
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.h"
struct ath5k_ani_state {
   enum ath5k_ani_mode ani_mode ;
   int noise_imm_level ;
   int spur_level ;
   int firstep_level ;
   bool ofdm_weak_sig ;
   bool cck_weak_sig ;
   int max_spur_level ;
   unsigned int listen_time ;
   unsigned int ofdm_errors ;
   unsigned int cck_errors ;
   struct ath_cycle_counters last_cc ;
   unsigned int last_listen ;
   unsigned int last_ofdm_errors ;
   unsigned int last_cck_errors ;
   unsigned int sum_ofdm_errors ;
   unsigned int sum_cck_errors ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
enum ath5k_version {
    AR5K_AR5210 = 0,
    AR5K_AR5211 = 1,
    AR5K_AR5212 = 2
};
#line 91 
enum ath5k_radio {
    AR5K_RF5110 = 0,
    AR5K_RF5111 = 1,
    AR5K_RF5112 = 2,
    AR5K_RF2413 = 3,
    AR5K_RF5413 = 4,
    AR5K_RF2316 = 5,
    AR5K_RF2317 = 6,
    AR5K_RF2425 = 7
};
#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_tx_status {
   u16 ts_seqnum ;
   u16 ts_tstamp ;
   u8 ts_status ;
   u8 ts_final_idx ;
   u8 ts_final_retry ;
   s8 ts_rssi ;
   u8 ts_shortretry ;
   u8 ts_virtcol ;
   u8 ts_antenna ;
};
#line 525 
enum ath5k_tx_queue {
    AR5K_TX_QUEUE_INACTIVE = 0,
    AR5K_TX_QUEUE_DATA = 1,
    AR5K_TX_QUEUE_BEACON = 2,
    AR5K_TX_QUEUE_CAB = 3,
    AR5K_TX_QUEUE_UAPSD = 4
};
#line 533 
enum ath5k_tx_queue_subtype {
    AR5K_WME_AC_BK = 0,
    AR5K_WME_AC_BE = 1,
    AR5K_WME_AC_VI = 2,
    AR5K_WME_AC_VO = 3
};
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_txq {
   unsigned int qnum ;
   u32 *link ;
   struct list_head q ;
   spinlock_t lock ;
   bool setup ;
   int txq_len ;
   int txq_max ;
   bool txq_poll_mark ;
   unsigned int txq_stuck ;
};
#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_txq_info {
   enum ath5k_tx_queue tqi_type ;
   enum ath5k_tx_queue_subtype tqi_subtype ;
   u16 tqi_flags ;
   u8 tqi_aifs ;
   u16 tqi_cw_min ;
   u16 tqi_cw_max ;
   u32 tqi_cbr_period ;
   u32 tqi_cbr_overflow_limit ;
   u32 tqi_burst_time ;
   u32 tqi_ready_time ;
};
#line 664 
enum ath5k_pkt_type {
    AR5K_PKT_TYPE_NORMAL = 0,
    AR5K_PKT_TYPE_ATIM = 1,
    AR5K_PKT_TYPE_PSPOLL = 2,
    AR5K_PKT_TYPE_BEACON = 3,
    AR5K_PKT_TYPE_PROBE_RESP = 4,
    AR5K_PKT_TYPE_PIFS = 5
};
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_rx_status {
   u16 rs_datalen ;
   u16 rs_tstamp ;
   u8 rs_status ;
   u8 rs_phyerr ;
   s8 rs_rssi ;
   u8 rs_keyix ;
   u8 rs_rate ;
   u8 rs_antenna ;
   u8 rs_more ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_gain {
   u8 g_step_idx ;
   u8 g_current ;
   u8 g_target ;
   u8 g_low ;
   u8 g_high ;
   u8 g_f_corr ;
   u8 g_state ;
};
#line 922 
enum ath5k_int {
    AR5K_INT_RXOK = 1,
    AR5K_INT_RXDESC = 2,
    AR5K_INT_RXERR = 4,
    AR5K_INT_RXNOFRM = 8,
    AR5K_INT_RXEOL = 16,
    AR5K_INT_RXORN = 32,
    AR5K_INT_TXOK = 64,
    AR5K_INT_TXDESC = 128,
    AR5K_INT_TXERR = 256,
    AR5K_INT_TXNOFRM = 512,
    AR5K_INT_TXEOL = 1024,
    AR5K_INT_TXURN = 2048,
    AR5K_INT_MIB = 4096,
    AR5K_INT_SWI = 8192,
    AR5K_INT_RXPHY = 16384,
    AR5K_INT_RXKCM = 32768,
    AR5K_INT_SWBA = 65536,
    AR5K_INT_BRSSI = 131072,
    AR5K_INT_BMISS = 262144,
    AR5K_INT_FATAL = 524288,
    AR5K_INT_BNR = 1048576,
    AR5K_INT_TIM = 2097152,
    AR5K_INT_DTIM = 4194304,
    AR5K_INT_DTIM_SYNC = 8388608,
    AR5K_INT_GPIO = 16777216,
    AR5K_INT_BCN_TIMEOUT = 33554432,
    AR5K_INT_CAB_TIMEOUT = 67108864,
    AR5K_INT_QCBRORN = 134217728,
    AR5K_INT_QCBRURN = 268435456,
    AR5K_INT_QTRIG = 536870912,
    AR5K_INT_GLOBAL = 2147483648,
    AR5K_INT_TX_ALL = 4032,
    AR5K_INT_RX_ALL = 63,
    AR5K_INT_COMMON = 2164785151,
    AR5K_INT_NOCARD = 4294967295
};
#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct __anonstruct_cap_range_1027 {
   u16 range_2ghz_min ;
   u16 range_2ghz_max ;
   u16 range_5ghz_min ;
   u16 range_5ghz_max ;
};
#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct __anonstruct_cap_queues_1028 {
   u8 q_tx_num ;
};
#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_capabilities {
   unsigned long cap_mode[1U] ;
   struct __anonstruct_cap_range_1027 cap_range ;
   struct ath5k_eeprom_info cap_eeprom ;
   struct __anonstruct_cap_queues_1028 cap_queues ;
   bool cap_has_phyerr_counters ;
   bool cap_has_mrr_support ;
   bool cap_needs_2GHz_ovr ;
};
#line 1170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_nfcal_hist {
   s16 index ;
   s16 nfval[8U] ;
};
#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_led {
   char name[32U] ;
   struct ath5k_hw *ah ;
   struct led_classdev led_dev ;
};
#line 1187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_rfkill {
   u16 gpio ;
   bool polarity ;
   struct tasklet_struct toggleq ;
};
#line 1197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_statistics {
   unsigned int antenna_rx[5U] ;
   unsigned int antenna_tx[5U] ;
   unsigned int rx_all_count ;
   unsigned int tx_all_count ;
   unsigned int rx_bytes_count ;
   unsigned int tx_bytes_count ;
   unsigned int rxerr_crc ;
   unsigned int rxerr_phy ;
   unsigned int rxerr_phy_code[32U] ;
   unsigned int rxerr_fifo ;
   unsigned int rxerr_decrypt ;
   unsigned int rxerr_mic ;
   unsigned int rxerr_proc ;
   unsigned int rxerr_jumbo ;
   unsigned int txerr_retry ;
   unsigned int txerr_fifo ;
   unsigned int txerr_filt ;
   unsigned int ack_fail ;
   unsigned int rts_fail ;
   unsigned int rts_ok ;
   unsigned int fcs_error ;
   unsigned int beacons ;
   unsigned int mib_intr ;
   unsigned int rxorn_intr ;
   unsigned int rxeol_intr ;
};
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ewma_beacon_rssi {
   unsigned long internal ;
};
#line 1258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct __anonstruct_ah_txpower_1033 {
   u8 tmpL[4U][64U] ;
   u8 tmpR[4U][64U] ;
   u8 txp_pd_table[128U] ;
   u16 txp_rates_power_table[32U] ;
   u8 txp_min_idx ;
   bool txp_tpc ;
   s16 txp_min_pwr ;
   s16 txp_max_pwr ;
   s16 txp_cur_pwr ;
   s16 txp_offset ;
   s16 txp_ofdm ;
   s16 txp_cck_ofdm_gainf_delta ;
   s16 txp_cck_ofdm_pwr_delta ;
   bool txp_setup ;
   int txp_requested ;
};
#line 1258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_hw {
   struct ath_common common ;
   struct pci_dev *pdev ;
   struct device *dev ;
   int irq ;
   u16 devid ;
   void *iobase ;
   struct mutex lock ;
   struct ieee80211_hw *hw ;
   struct ieee80211_supported_band sbands[4U] ;
   struct ieee80211_channel channels[314U] ;
   struct ieee80211_rate rates[4U][32U] ;
   s8 rate_idx[4U][32U] ;
   enum nl80211_iftype opmode ;
   struct ath5k_dbg_info debug ;
   struct ath5k_buf *bufptr ;
   struct ath5k_desc *desc ;
   dma_addr_t desc_daddr ;
   size_t desc_len ;
   unsigned long status[1U] ;
   unsigned int filter_flags ;
   unsigned int fif_filter_flags ;
   struct ieee80211_channel *curchan ;
   u16 nvifs ;
   enum ath5k_int imask ;
   spinlock_t irqlock ;
   bool rx_pending ;
   bool tx_pending ;
   u8 bssidmask[6U] ;
   unsigned int led_pin ;
   unsigned int led_on ;
   struct work_struct reset_work ;
   struct work_struct calib_work ;
   struct list_head rxbuf ;
   spinlock_t rxbuflock ;
   u32 *rxlink ;
   struct tasklet_struct rxtq ;
   struct ath5k_led rx_led ;
   struct list_head txbuf ;
   spinlock_t txbuflock ;
   unsigned int txbuf_len ;
   struct ath5k_txq txqs[10U] ;
   struct tasklet_struct txtq ;
   struct ath5k_led tx_led ;
   struct ath5k_rfkill rf_kill ;
   spinlock_t block ;
   struct tasklet_struct beacontq ;
   struct list_head bcbuf ;
   struct ieee80211_vif *bslot[4U] ;
   u16 num_ap_vifs ;
   u16 num_adhoc_vifs ;
   u16 num_mesh_vifs ;
   unsigned int bhalq ;
   unsigned int bmisscount ;
   unsigned int bintval ;
   unsigned int bsent ;
   unsigned int nexttbtt ;
   struct ath5k_txq *cabq ;
   bool assoc ;
   bool enable_beacon ;
   struct ath5k_statistics stats ;
   struct ath5k_ani_state ani_state ;
   struct tasklet_struct ani_tasklet ;
   struct delayed_work tx_complete_work ;
   struct survey_info survey ;
   enum ath5k_int ah_imr ;
   struct ieee80211_channel *ah_current_channel ;
   bool ah_iq_cal_needed ;
   bool ah_single_chip ;
   enum ath5k_version ah_version ;
   enum ath5k_radio ah_radio ;
   u32 ah_mac_srev ;
   u16 ah_mac_version ;
   u16 ah_phy_revision ;
   u16 ah_radio_5ghz_revision ;
   u16 ah_radio_2ghz_revision ;
   u8 ah_retry_long ;
   u8 ah_retry_short ;
   bool ah_use_32khz_clock ;
   u8 ah_coverage_class ;
   bool ah_ack_bitrate_high ;
   u8 ah_bwmode ;
   bool ah_short_slot ;
   u32 ah_ant_ctl[3U][3U] ;
   u8 ah_ant_mode ;
   u8 ah_tx_ant ;
   u8 ah_def_ant ;
   struct ath5k_capabilities ah_capabilities ;
   struct ath5k_txq_info ah_txq[10U] ;
   u32 ah_txq_status ;
   u32 ah_txq_imr_txok ;
   u32 ah_txq_imr_txerr ;
   u32 ah_txq_imr_txurn ;
   u32 ah_txq_imr_txdesc ;
   u32 ah_txq_imr_txeol ;
   u32 ah_txq_imr_cbrorn ;
   u32 ah_txq_imr_cbrurn ;
   u32 ah_txq_imr_qtrig ;
   u32 ah_txq_imr_nofrm ;
   u32 ah_txq_isr_txok_all ;
   u32 ah_txq_isr_txurn ;
   u32 ah_txq_isr_qcborn ;
   u32 ah_txq_isr_qcburn ;
   u32 ah_txq_isr_qtrig ;
   u32 *ah_rf_banks ;
   size_t ah_rf_banks_size ;
   size_t ah_rf_regs_count ;
   struct ath5k_gain ah_gain ;
   u8 ah_offset[8U] ;
   struct __anonstruct_ah_txpower_1033 ah_txpower ;
   struct ath5k_nfcal_hist ah_nfcal_hist ;
   struct ewma_beacon_rssi ah_beacon_rssi_avg ;
   s32 ah_noise_floor ;
   unsigned long ah_cal_next_full ;
   unsigned long ah_cal_next_short ;
   unsigned long ah_cal_next_ani ;
   u8 ah_cal_mask ;
   int (*ah_setup_tx_desc)(struct ath5k_hw *, struct ath5k_desc *, unsigned int , unsigned int , int , enum ath5k_pkt_type , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int ) ;
   int (*ah_proc_tx_desc)(struct ath5k_hw *, struct ath5k_desc *, struct ath5k_tx_status *) ;
   int (*ah_proc_rx_desc)(struct ath5k_hw *, struct ath5k_desc *, struct ath5k_rx_status *) ;
};
#line 1463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath_bus_ops {
   enum ath_bus_type ath_bus_type ;
   void (*read_cachesize)(struct ath_common *, int *) ;
   bool (*eeprom_read)(struct ath_common *, u32 , u16 *) ;
   int (*eeprom_read_mac)(struct ath5k_hw *, u8 *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
enum ath5k_rfgain {
    AR5K_RFGAIN_INACTIVE = 0,
    AR5K_RFGAIN_ACTIVE = 1,
    AR5K_RFGAIN_READ_REQUESTED = 2,
    AR5K_RFGAIN_NEED_CHANGE = 3
};
#line 813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
struct ath5k_athchan_2ghz {
   u32 a2_flags ;
   u16 a2_athchan ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
struct ath5k_ini_rfbuffer {
   u8 rfb_bank ;
   u16 rfb_ctrl_register ;
   u32 rfb_mode_data[3U] ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
struct ath5k_rfb_field {
   u8 len ;
   u16 pos ;
   u8 col ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
struct ath5k_rf_reg {
   u8 bank ;
   u8 index ;
   struct ath5k_rfb_field field ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
struct ath5k_ini_rfgain {
   u16 rfg_register ;
   u32 rfg_value[2U] ;
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
struct ath5k_gain_opt_step {
   s8 gos_param[7U] ;
   s8 gos_gain ;
};
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
struct ath5k_gain_opt {
   u8 go_default ;
   u8 go_steps_count ;
   struct ath5k_gain_opt_step go_step[10U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int u_int;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u16 u_int16_t;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
typedef __builtin_va_list __gnuc_va_list;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct va_format {
   char *fmt ;
   va_list *va ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3134 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3136 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3138 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct napi_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 1865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct perf_event_attr;
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 5133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_ext_feature_index {
    NL80211_EXT_FEATURE_VHT_IBSS = 0,
    NL80211_EXT_FEATURE_RRM = 1,
    NL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER = 2,
    NL80211_EXT_FEATURE_SCAN_START_TIME = 3,
    NL80211_EXT_FEATURE_BSS_PARENT_TSF = 4,
    NL80211_EXT_FEATURE_SET_SCAN_DWELL = 5,
    NL80211_EXT_FEATURE_BEACON_RATE_LEGACY = 6,
    NL80211_EXT_FEATURE_BEACON_RATE_HT = 7,
    NL80211_EXT_FEATURE_BEACON_RATE_VHT = 8,
    NL80211_EXT_FEATURE_FILS_STA = 9,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA = 10,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED = 11,
    NL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI = 12,
    NL80211_EXT_FEATURE_CQM_RSSI_LIST = 13,
    NL80211_EXT_FEATURE_FILS_SK_OFFLOAD = 14,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK = 15,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X = 16,
    NL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME = 17,
    NL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP = 18,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE = 19,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION = 20,
    NL80211_EXT_FEATURE_MFP_OPTIONAL = 21,
    NL80211_EXT_FEATURE_LOW_SPAN_SCAN = 22,
    NL80211_EXT_FEATURE_LOW_POWER_SCAN = 23,
    NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN = 24,
    NL80211_EXT_FEATURE_DFS_OFFLOAD = 25,
    NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211 = 26,
    NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_TXQS = 28,
    NL80211_EXT_FEATURE_SCAN_RANDOM_SN = 29,
    NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT = 30,
    NL80211_EXT_FEATURE_CAN_REPLACE_PTK0 = 31,
    NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER = 32,
    NL80211_EXT_FEATURE_AIRTIME_FAIRNESS = 33,
    NL80211_EXT_FEATURE_AP_PMKSA_CACHING = 34,
    NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD = 35,
    NL80211_EXT_FEATURE_EXT_KEY_ID = 36,
    NL80211_EXT_FEATURE_STA_TX_PWR = 37,
    NL80211_EXT_FEATURE_SAE_OFFLOAD = 38,
    NL80211_EXT_FEATURE_VLAN_OFFLOAD = 39,
    NL80211_EXT_FEATURE_AQL = 40,
    NUM_NL80211_EXT_FEATURES = 41,
    MAX_NL80211_EXT_FEATURES = 40
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_msrment_ie {
   u8 token ;
   u8 mode ;
   u8 type ;
   u8 request[0U] ;
} __attribute__((__packed__));
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ext_chansw_ie {
   u8 mode ;
   u8 new_operating_class ;
   u8 new_ch_num ;
   u8 count ;
} __attribute__((__packed__));
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_tpc_report_ie {
   u8 tx_power ;
   u8 link_margin ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_auth_3817 {
   __le16 auth_alg ;
   __le16 auth_transaction ;
   __le16 status_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_deauth_3818 {
   __le16 reason_code ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_assoc_req_3819 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_assoc_resp_3820 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_reassoc_resp_3821 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_reassoc_req_3822 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 current_ap[6U] ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_disassoc_3823 {
   __le16 reason_code ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_beacon_3824 {
   __le64 timestamp ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_probe_req_3825 {
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_probe_resp_3826 {
   __le64 timestamp ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_wme_action_3829 {
   u8 action_code ;
   u8 dialog_token ;
   u8 status_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_chan_switch_3830 {
   u8 action_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ext_chan_switch_3831 {
   u8 action_code ;
   struct ieee80211_ext_chansw_ie data ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_measurement_3832 {
   u8 action_code ;
   u8 dialog_token ;
   u8 element_id ;
   u8 length ;
   struct ieee80211_msrment_ie msr_elem ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_addba_req_3833 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 capab ;
   __le16 timeout ;
   __le16 start_seq_num ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_addba_resp_3834 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 status ;
   __le16 capab ;
   __le16 timeout ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_delba_3835 {
   u8 action_code ;
   __le16 params ;
   __le16 reason_code ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_self_prot_3836 {
   u8 action_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_mesh_action_3837 {
   u8 action_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_sa_query_3838 {
   u8 action ;
   u8 trans_id[2U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ht_smps_3839 {
   u8 action ;
   u8 smps_control ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ht_notify_cw_3840 {
   u8 action_code ;
   u8 chanwidth ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_tdls_discover_resp_3841 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 capability ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_vht_opmode_notif_3842 {
   u8 action_code ;
   u8 operating_mode ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_vht_group_notif_3843 {
   u8 action_code ;
   u8 membership[8U] ;
   u8 position[16U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_tpc_report_3844 {
   u8 action_code ;
   u8 dialog_token ;
   u8 tpc_elem_id ;
   u8 tpc_elem_length ;
   struct ieee80211_tpc_report_ie tpc ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_ftm_3845 {
   u8 action_code ;
   u8 dialog_token ;
   u8 follow_up ;
   u8 tod[6U] ;
   u8 toa[6U] ;
   __le16 tod_error ;
   __le16 toa_error ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
union __anonunion_u_3828 {
   struct __anonstruct_wme_action_3829 wme_action ;
   struct __anonstruct_chan_switch_3830 chan_switch ;
   struct __anonstruct_ext_chan_switch_3831 ext_chan_switch ;
   struct __anonstruct_measurement_3832 measurement ;
   struct __anonstruct_addba_req_3833 addba_req ;
   struct __anonstruct_addba_resp_3834 addba_resp ;
   struct __anonstruct_delba_3835 delba ;
   struct __anonstruct_self_prot_3836 self_prot ;
   struct __anonstruct_mesh_action_3837 mesh_action ;
   struct __anonstruct_sa_query_3838 sa_query ;
   struct __anonstruct_ht_smps_3839 ht_smps ;
   struct __anonstruct_ht_notify_cw_3840 ht_notify_cw ;
   struct __anonstruct_tdls_discover_resp_3841 tdls_discover_resp ;
   struct __anonstruct_vht_opmode_notif_3842 vht_opmode_notif ;
   struct __anonstruct_vht_group_notif_3843 vht_group_notif ;
   struct __anonstruct_tpc_report_3844 tpc_report ;
   struct __anonstruct_ftm_3845 ftm ;
};
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct __anonstruct_action_3827 {
   u8 category ;
   union __anonunion_u_3828 u ;
} __attribute__((__packed__));
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
union __anonunion_u_3816 {
   struct __anonstruct_auth_3817 auth ;
   struct __anonstruct_deauth_3818 deauth ;
   struct __anonstruct_assoc_req_3819 assoc_req ;
   struct __anonstruct_assoc_resp_3820 assoc_resp ;
   struct __anonstruct_reassoc_resp_3821 reassoc_resp ;
   struct __anonstruct_reassoc_req_3822 reassoc_req ;
   struct __anonstruct_disassoc_3823 disassoc ;
   struct __anonstruct_beacon_3824 beacon ;
   struct __anonstruct_probe_req_3825 probe_req ;
   struct __anonstruct_probe_resp_3826 probe_resp ;
   struct __anonstruct_action_3827 action ;
};
#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mgmt {
   __le16 frame_control ;
   __le16 duration ;
   u8 da[6U] ;
   u8 sa[6U] ;
   u8 bssid[6U] ;
   __le16 seq_ctrl ;
   union __anonunion_u_3816 u ;
} __attribute__((__packed__, __aligned__(2)));
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_4130 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_4129 {
   struct __anonstruct_4130 __anonCompField___anonunion_4129_192 ;
   unsigned long jiffies ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_4128 {
   union __anonunion_4129 __anonCompField___anonstruct_control_4128_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_4131 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_4132 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_4133 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_4127 {
   struct __anonstruct_control_4128 control ;
   struct __anonstruct_ack_4131 ack ;
   struct __anonstruct_status_4132 status ;
   struct __anonstruct_4133 __anonCompField___anonunion_4127_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_4127 __anonCompField_ieee80211_tx_info_195 ;
};
#line 1119 
struct ieee80211_rx_status;
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status {
   u64 mactime ;
   u64 boottime_ns ;
   u32 device_timestamp ;
   u32 ampdu_reference ;
   u32 flag ;
   u16 freq ;
   u8 enc_flags ;
   u8 encoding : 2 ;
   u8 bw : 3 ;
   u8 he_ru : 3 ;
   u8 he_gi : 2 ;
   u8 he_dcm : 1 ;
   u8 rate_idx ;
   u8 nss ;
   u8 rx_flags ;
   u8 band ;
   u8 antenna ;
   s8 signal ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 ampdu_delimiter_crc ;
   u8 zero_length_psdu_type ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_control {
   struct ieee80211_sta *sta ;
};
#line 2083 
enum ieee80211_hw_flags {
    IEEE80211_HW_HAS_RATE_CONTROL = 0,
    IEEE80211_HW_RX_INCLUDES_FCS = 1,
    IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING = 2,
    IEEE80211_HW_SIGNAL_UNSPEC = 3,
    IEEE80211_HW_SIGNAL_DBM = 4,
    IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC = 5,
    IEEE80211_HW_SPECTRUM_MGMT = 6,
    IEEE80211_HW_AMPDU_AGGREGATION = 7,
    IEEE80211_HW_SUPPORTS_PS = 8,
    IEEE80211_HW_PS_NULLFUNC_STACK = 9,
    IEEE80211_HW_SUPPORTS_DYNAMIC_PS = 10,
    IEEE80211_HW_MFP_CAPABLE = 11,
    IEEE80211_HW_WANT_MONITOR_VIF = 12,
    IEEE80211_HW_NO_AUTO_VIF = 13,
    IEEE80211_HW_SW_CRYPTO_CONTROL = 14,
    IEEE80211_HW_SUPPORT_FAST_XMIT = 15,
    IEEE80211_HW_REPORTS_TX_ACK_STATUS = 16,
    IEEE80211_HW_CONNECTION_MONITOR = 17,
    IEEE80211_HW_QUEUE_CONTROL = 18,
    IEEE80211_HW_SUPPORTS_PER_STA_GTK = 19,
    IEEE80211_HW_AP_LINK_PS = 20,
    IEEE80211_HW_TX_AMPDU_SETUP_IN_HW = 21,
    IEEE80211_HW_SUPPORTS_RC_TABLE = 22,
    IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF = 23,
    IEEE80211_HW_TIMING_BEACON_ONLY = 24,
    IEEE80211_HW_SUPPORTS_HT_CCK_RATES = 25,
    IEEE80211_HW_CHANCTX_STA_CSA = 26,
    IEEE80211_HW_SUPPORTS_CLONED_SKBS = 27,
    IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS = 28,
    IEEE80211_HW_TDLS_WIDER_BW = 29,
    IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU = 30,
    IEEE80211_HW_BEACON_TX_STATUS = 31,
    IEEE80211_HW_NEEDS_UNIQUE_STA_ADDR = 32,
    IEEE80211_HW_SUPPORTS_REORDERING_BUFFER = 33,
    IEEE80211_HW_USES_RSS = 34,
    IEEE80211_HW_TX_AMSDU = 35,
    IEEE80211_HW_TX_FRAG_LIST = 36,
    IEEE80211_HW_REPORTS_LOW_ACK = 37,
    IEEE80211_HW_SUPPORTS_TX_FRAG = 38,
    IEEE80211_HW_SUPPORTS_TDLS_BUFFER_STA = 39,
    IEEE80211_HW_DEAUTH_NEED_MGD_TX_PREP = 40,
    IEEE80211_HW_DOESNT_SUPPORT_QOS_NDP = 41,
    IEEE80211_HW_BUFF_MMPDU_TXQ = 42,
    IEEE80211_HW_SUPPORTS_VHT_EXT_NSS_BW = 43,
    IEEE80211_HW_STA_MMPDU_TXQ = 44,
    IEEE80211_HW_TX_STATUS_NO_AMPDU_LEN = 45,
    IEEE80211_HW_SUPPORTS_MULTI_BSSID = 46,
    IEEE80211_HW_SUPPORTS_ONLY_HE_MULTI_BSSID = 47,
    IEEE80211_HW_AMPDU_KEYBORDER_SUPPORT = 48,
    NUM_IEEE80211_HW_FLAGS = 49
};
#line 6484 
enum ath5k_srev_type {
    AR5K_VERSION_MAC = 0,
    AR5K_VERSION_RAD = 1
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
struct ath5k_srev_name {
   char *sr_name ;
   enum ath5k_srev_type sr_type ;
   u_int sr_val ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
struct ath5k_buf {
   struct list_head list ;
   struct ath5k_desc *desc ;
   dma_addr_t daddr ;
   struct sk_buff *skb ;
   dma_addr_t skbaddr ;
   struct ieee80211_tx_rate rates[4U] ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
struct ath5k_vif {
   bool assoc ;
   enum nl80211_iftype opmode ;
   int bslot ;
   struct ath5k_buf *bbuf ;
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
struct ath5k_vif_iter_data {
   u8 *hw_macaddr ;
   u8 mask[6U] ;
   u8 active_mac[6U] ;
   bool need_set_hw_addr ;
   bool found_active ;
   bool any_assoc ;
   enum nl80211_iftype opmode ;
   int n_stas ;
};
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
union __anonunion___u_4149 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
union __anonunion___u_4151 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint.h"
struct trace_eval_map {
   char *system ;
   char *eval_string ;
   unsigned long eval_value ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
union __anonunion___u_4154 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
union __anonunion___u_4156 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
union __anonunion___u_4158 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
union __anonunion___u_4160 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
union __anonunion___u_4162 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
union __anonunion___u_4164 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 66 
struct ring_buffer;
#line 67 
struct ring_buffer_iter;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ring_buffer.h"
struct trace_seq;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_buf.h"
struct seq_buf {
   char *buffer ;
   size_t size ;
   size_t len ;
   loff_t readpos ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_seq.h"
struct trace_seq {
   unsigned char buffer[4096U] ;
   struct seq_buf seq ;
   int full ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_4165 {
   __u64 sample_period ;
   __u64 sample_freq ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_4166 {
   __u32 wakeup_events ;
   __u32 wakeup_watermark ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_4167 {
   __u64 bp_addr ;
   __u64 kprobe_func ;
   __u64 uprobe_path ;
   __u64 config1 ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union __anonunion_4168 {
   __u64 bp_len ;
   __u64 kprobe_addr ;
   __u64 probe_offset ;
   __u64 config2 ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
struct perf_event_attr {
   __u32 type ;
   __u32 size ;
   __u64 config ;
   union __anonunion_4165 __anonCompField_perf_event_attr_198 ;
   __u64 sample_type ;
   __u64 read_format ;
   __u64 disabled : 1 ;
   __u64 inherit : 1 ;
   __u64 pinned : 1 ;
   __u64 exclusive : 1 ;
   __u64 exclude_user : 1 ;
   __u64 exclude_kernel : 1 ;
   __u64 exclude_hv : 1 ;
   __u64 exclude_idle : 1 ;
   __u64 mmap : 1 ;
   __u64 comm : 1 ;
   __u64 freq : 1 ;
   __u64 inherit_stat : 1 ;
   __u64 enable_on_exec : 1 ;
   __u64 task : 1 ;
   __u64 watermark : 1 ;
   __u64 precise_ip : 2 ;
   __u64 mmap_data : 1 ;
   __u64 sample_id_all : 1 ;
   __u64 exclude_host : 1 ;
   __u64 exclude_guest : 1 ;
   __u64 exclude_callchain_kernel : 1 ;
   __u64 exclude_callchain_user : 1 ;
   __u64 mmap2 : 1 ;
   __u64 comm_exec : 1 ;
   __u64 use_clockid : 1 ;
   __u64 context_switch : 1 ;
   __u64 write_backward : 1 ;
   __u64 namespaces : 1 ;
   __u64 ksymbol : 1 ;
   __u64 bpf_event : 1 ;
   __u64 aux_output : 1 ;
   __u64 __reserved_1 : 32 ;
   union __anonunion_4166 __anonCompField_perf_event_attr_199 ;
   __u32 bp_type ;
   union __anonunion_4167 __anonCompField_perf_event_attr_200 ;
   union __anonunion_4168 __anonCompField_perf_event_attr_201 ;
   __u64 branch_sample_type ;
   __u64 sample_regs_user ;
   __u32 sample_stack_user ;
   __s32 clockid ;
   __u64 sample_regs_intr ;
   __u32 aux_watermark ;
   __u16 sample_max_stack ;
   __u16 __reserved_2 ;
   __u32 aux_sample_size ;
   __u32 __reserved_3 ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
struct __anonstruct_4171 {
   __u64 mem_op : 5 ;
   __u64 mem_lvl : 14 ;
   __u64 mem_snoop : 5 ;
   __u64 mem_lock : 2 ;
   __u64 mem_dtlb : 7 ;
   __u64 mem_lvl_num : 4 ;
   __u64 mem_remote : 1 ;
   __u64 mem_snoopx : 2 ;
   __u64 mem_rsvd : 24 ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
union perf_mem_data_src {
   __u64 val ;
   struct __anonstruct_4171 __anonCompField_perf_mem_data_src_204 ;
};
#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/perf_event.h"
struct perf_branch_entry {
   __u64 from ;
   __u64 to ;
   __u64 mispred : 1 ;
   __u64 predicted : 1 ;
   __u64 in_tx : 1 ;
   __u64 abort : 1 ;
   __u64 cycles : 16 ;
   __u64 type : 4 ;
   __u64 reserved : 40 ;
};
#line 1187 
struct fs_pin;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct idr idr ;
   struct callback_head rcu ;
   unsigned int pid_allocated ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct dentry *proc_thread_self ;
   struct fs_pin *bacct ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/hw_breakpoint.h"
struct arch_hw_breakpoint {
   unsigned long address ;
   unsigned long mask ;
   u8 len ;
   u8 type ;
};
#line 51 
struct pmu;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_hash;
#line 85 
struct ftrace_ops;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_ops_hash {
   struct ftrace_hash *notrace_hash ;
   struct ftrace_hash *filter_hash ;
   struct mutex regex_lock ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_ops {
   void (*func)(unsigned long , unsigned long , struct ftrace_ops *, struct pt_regs *) ;
   struct ftrace_ops *next ;
   unsigned long flags ;
   void *private ;
   void (*saved_func)(unsigned long , unsigned long , struct ftrace_ops *, struct pt_regs *) ;
   struct ftrace_ops_hash local_hash ;
   struct ftrace_ops_hash *func_hash ;
   struct ftrace_ops_hash old_hash ;
   unsigned long trampoline ;
   unsigned long trampoline_size ;
};
#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ftrace.h"
struct ftrace_ret_stack {
   unsigned long ret ;
   unsigned long func ;
   unsigned long long calltime ;
   unsigned long long subtime ;
   unsigned long *retp ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq_work.h"
struct irq_work {
   atomic_t flags ;
   struct llist_node llnode ;
   void (*func)(struct irq_work *) ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_regs.h"
struct perf_regs {
   __u64 abi ;
   struct pt_regs *regs ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_callchain_entry {
   __u64 nr ;
   __u64 ip[0U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
union __anonunion_4191 {
   struct perf_raw_frag *next ;
   unsigned long pad ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_raw_frag {
   union __anonunion_4191 __anonCompField_perf_raw_frag_206 ;
   unsigned long (*copy)(void *, void *, unsigned long , unsigned long ) ;
   void *data ;
   u32 size ;
} __attribute__((__packed__));
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_raw_record {
   struct perf_raw_frag frag ;
   u32 size ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_branch_stack {
   __u64 nr ;
   struct perf_branch_entry entries[0U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct hw_perf_event_extra {
   u64 config ;
   unsigned int reg ;
   int alloc ;
   int idx ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_4193 {
   u64 config ;
   u64 last_tag ;
   unsigned long config_base ;
   unsigned long event_base ;
   int event_base_rdpmc ;
   int idx ;
   int last_cpu ;
   int flags ;
   struct hw_perf_event_extra extra_reg ;
   struct hw_perf_event_extra branch_reg ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_4194 {
   struct hrtimer hrtimer ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_4195 {
   struct list_head tp_list ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_4196 {
   u64 pwr_acc ;
   u64 ptsc ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_4197 {
   struct arch_hw_breakpoint info ;
   struct list_head bp_list ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_4198 {
   u8 iommu_bank ;
   u8 iommu_cntr ;
   u16 padding ;
   u64 conf ;
   u64 conf1 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
union __anonunion_4192 {
   struct __anonstruct_4193 __anonCompField___anonunion_4192_207 ;
   struct __anonstruct_4194 __anonCompField___anonunion_4192_208 ;
   struct __anonstruct_4195 __anonCompField___anonunion_4192_209 ;
   struct __anonstruct_4196 __anonCompField___anonunion_4192_210 ;
   struct __anonstruct_4197 __anonCompField___anonunion_4192_211 ;
   struct __anonstruct_4198 __anonCompField___anonunion_4192_212 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct hw_perf_event {
   union __anonunion_4192 __anonCompField_hw_perf_event_213 ;
   struct task_struct *target ;
   void *addr_filters ;
   unsigned long addr_filters_gen ;
   int state ;
   local64_t prev_count ;
   u64 sample_period ;
   u64 last_period ;
   local64_t period_left ;
   u64 interrupts_seq ;
   u64 interrupts ;
   u64 freq_time_stamp ;
   u64 freq_count_stamp ;
};
#line 229 
struct perf_output_handle;
#line 257 
struct perf_cpu_context;
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct pmu {
   struct list_head entry ;
   struct module *module ;
   struct device *dev ;
   struct attribute_group **attr_groups ;
   struct attribute_group **attr_update ;
   char *name ;
   int type ;
   int capabilities ;
   int *pmu_disable_count ;
   struct perf_cpu_context *pmu_cpu_context ;
   atomic_t exclusive_cnt ;
   int task_ctx_nr ;
   int hrtimer_interval_ms ;
   unsigned int nr_addr_filters ;
   void (*pmu_enable)(struct pmu *) ;
   void (*pmu_disable)(struct pmu *) ;
   int (*event_init)(struct perf_event *) ;
   void (*event_mapped)(struct perf_event *, struct mm_struct *) ;
   void (*event_unmapped)(struct perf_event *, struct mm_struct *) ;
   int (*add)(struct perf_event *, int ) ;
   void (*del)(struct perf_event *, int ) ;
   void (*start)(struct perf_event *, int ) ;
   void (*stop)(struct perf_event *, int ) ;
   void (*read)(struct perf_event *) ;
   void (*start_txn)(struct pmu *, unsigned int ) ;
   int (*commit_txn)(struct pmu *) ;
   void (*cancel_txn)(struct pmu *) ;
   int (*event_idx)(struct perf_event *) ;
   void (*sched_task)(struct perf_event_context *, bool ) ;
   size_t task_ctx_size ;
   void (*swap_task_ctx)(struct perf_event_context *, struct perf_event_context *) ;
   void *(*setup_aux)(struct perf_event *, void **, int , bool ) ;
   void (*free_aux)(void *) ;
   long (*snapshot_aux)(struct perf_event *, struct perf_output_handle *, unsigned long ) ;
   int (*addr_filters_validate)(struct list_head *) ;
   void (*addr_filters_sync)(struct perf_event *) ;
   int (*aux_output_match)(struct perf_event *) ;
   int (*filter_match)(struct perf_event *) ;
   int (*check_period)(struct perf_event *, u64 ) ;
};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_addr_filters_head {
   struct list_head list ;
   raw_spinlock_t lock ;
   unsigned int nr_file_filters ;
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_addr_filter_range {
   unsigned long start ;
   unsigned long size ;
};
#line 540 
enum perf_event_state {
    PERF_EVENT_STATE_DEAD = -4,
    PERF_EVENT_STATE_EXIT = -3,
    PERF_EVENT_STATE_ERROR = -2,
    PERF_EVENT_STATE_OFF = -1,
    PERF_EVENT_STATE_INACTIVE = 0,
    PERF_EVENT_STATE_ACTIVE = 1
};
#line 549 
struct perf_sample_data;
#line 577 
struct perf_cgroup;
#line 599 
struct event_filter;
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_event {
   struct list_head event_entry ;
   struct list_head sibling_list ;
   struct list_head active_list ;
   struct rb_node group_node ;
   u64 group_index ;
   struct list_head migrate_entry ;
   struct hlist_node hlist_entry ;
   struct list_head active_entry ;
   int nr_siblings ;
   int event_caps ;
   int group_caps ;
   struct perf_event *group_leader ;
   struct pmu *pmu ;
   void *pmu_private ;
   enum perf_event_state state ;
   unsigned int attach_state ;
   local64_t count ;
   atomic64_t child_count ;
   u64 total_time_enabled ;
   u64 total_time_running ;
   u64 tstamp ;
   u64 shadow_ctx_time ;
   struct perf_event_attr attr ;
   u16 header_size ;
   u16 id_header_size ;
   u16 read_size ;
   struct hw_perf_event hw ;
   struct perf_event_context *ctx ;
   atomic_long_t refcount ;
   atomic64_t child_total_time_enabled ;
   atomic64_t child_total_time_running ;
   struct mutex child_mutex ;
   struct list_head child_list ;
   struct perf_event *parent ;
   int oncpu ;
   int cpu ;
   struct list_head owner_entry ;
   struct task_struct *owner ;
   struct mutex mmap_mutex ;
   atomic_t mmap_count ;
   struct ring_buffer *rb ;
   struct list_head rb_entry ;
   unsigned long rcu_batches ;
   int rcu_pending ;
   wait_queue_head_t waitq ;
   struct fasync_struct *fasync ;
   int pending_wakeup ;
   int pending_kill ;
   int pending_disable ;
   struct irq_work pending ;
   atomic_t event_limit ;
   struct perf_addr_filters_head addr_filters ;
   struct perf_addr_filter_range *addr_filter_ranges ;
   unsigned long addr_filters_gen ;
   struct perf_event *aux_event ;
   void (*destroy)(struct perf_event *) ;
   struct callback_head callback_head ;
   struct pid_namespace *ns ;
   u64 id ;
   u64 (*clock)(void) ;
   void (*overflow_handler)(struct perf_event *, struct perf_sample_data *, struct pt_regs *) ;
   void *overflow_handler_context ;
   void (*orig_overflow_handler)(struct perf_event *, struct perf_sample_data *, struct pt_regs *) ;
   struct bpf_prog *prog ;
   struct trace_event_call *tp_event ;
   struct event_filter *filter ;
   struct ftrace_ops ftrace_ops ;
   struct perf_cgroup *cgrp ;
   void *security ;
   struct list_head sb_list ;
};
#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_event_groups {
   struct rb_root tree ;
   u64 index ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_event_context {
   struct pmu *pmu ;
   raw_spinlock_t lock ;
   struct mutex mutex ;
   struct list_head active_ctx_list ;
   struct perf_event_groups pinned_groups ;
   struct perf_event_groups flexible_groups ;
   struct list_head event_list ;
   struct list_head pinned_active ;
   struct list_head flexible_active ;
   int nr_events ;
   int nr_active ;
   int is_active ;
   int nr_stat ;
   int nr_freq ;
   int rotate_disable ;
   int rotate_necessary ;
   refcount_t refcount ;
   struct task_struct *task ;
   u64 time ;
   u64 timestamp ;
   struct perf_event_context *parent_ctx ;
   u64 parent_gen ;
   u64 generation ;
   int pin_count ;
   int nr_cgroups ;
   void *task_ctx_data ;
   struct callback_head callback_head ;
};
#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_cpu_context {
   struct perf_event_context ctx ;
   struct perf_event_context *task_ctx ;
   int active_oncpu ;
   int exclusive ;
   raw_spinlock_t hrtimer_lock ;
   struct hrtimer hrtimer ;
   ktime_t hrtimer_interval ;
   unsigned int hrtimer_active ;
   struct perf_cgroup *cgrp ;
   struct list_head cgrp_cpuctx_entry ;
   struct list_head sched_cb_entry ;
   int sched_cb_usage ;
   int online ;
};
#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
union __anonunion_4199 {
   void *addr ;
   unsigned long head ;
};
#line 855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_output_handle {
   struct perf_event *event ;
   struct ring_buffer *rb ;
   unsigned long wakeup ;
   unsigned long size ;
   u64 aux_flags ;
   union __anonunion_4199 __anonCompField_perf_output_handle_214 ;
   int page ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_cgroup_info {
   u64 time ;
   u64 timestamp ;
};
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_cgroup {
   struct cgroup_subsys_state css ;
   struct perf_cgroup_info *info ;
};
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_tid_entry_4202 {
   u32 pid ;
   u32 tid ;
};
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct __anonstruct_cpu_entry_4203 {
   u32 cpu ;
   u32 reserved ;
};
#line 960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/perf_event.h"
struct perf_sample_data {
   u64 addr ;
   struct perf_raw_record *raw ;
   struct perf_branch_stack *br_stack ;
   u64 period ;
   u64 weight ;
   u64 txn ;
   union perf_mem_data_src data_src ;
   u64 type ;
   u64 ip ;
   struct __anonstruct_tid_entry_4202 tid_entry ;
   u64 time ;
   u64 id ;
   u64 stream_id ;
   struct __anonstruct_cpu_entry_4203 cpu_entry ;
   struct perf_callchain_entry *callchain ;
   u64 aux_size ;
   struct perf_regs regs_user ;
   struct pt_regs regs_user_copy ;
   struct perf_regs regs_intr ;
   u64 stack_user_size ;
   u64 phys_addr ;
} __attribute__((__aligned__(64)));
#line 1542 
struct trace_array;
#line 1543 
struct trace_buffer;
#line 1544 
struct tracer;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_iterator;
#line 51 
struct trace_event;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_entry {
   unsigned short type ;
   unsigned char flags ;
   unsigned char preempt_count ;
   int pid ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_iterator {
   struct trace_array *tr ;
   struct tracer *trace ;
   struct trace_buffer *trace_buffer ;
   void *private ;
   int cpu_file ;
   struct mutex mutex ;
   struct ring_buffer_iter **buffer_iter ;
   unsigned long iter_flags ;
   struct trace_seq tmp_seq ;
   cpumask_var_t started ;
   bool snapshot ;
   struct trace_seq seq ;
   struct trace_entry *ent ;
   unsigned long lost_events ;
   int leftover ;
   int ent_size ;
   int cpu ;
   u64 ts ;
   loff_t pos ;
   long idx ;
};
#line 115 
enum print_line_t;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event_functions {
   enum print_line_t (*trace)(struct trace_iterator *, int , struct trace_event *) ;
   enum print_line_t (*raw)(struct trace_iterator *, int , struct trace_event *) ;
   enum print_line_t (*hex)(struct trace_iterator *, int , struct trace_event *) ;
   enum print_line_t (*binary)(struct trace_iterator *, int , struct trace_event *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event {
   struct hlist_node node ;
   struct list_head list ;
   int type ;
   struct trace_event_functions *funcs ;
};
#line 138 
enum print_line_t {
    TRACE_TYPE_PARTIAL_LINE = 0,
    TRACE_TYPE_HANDLED = 1,
    TRACE_TYPE_UNHANDLED = 2,
    TRACE_TYPE_NO_CONSUME = 3
};
#line 172 
enum trace_reg {
    TRACE_REG_REGISTER = 0,
    TRACE_REG_UNREGISTER = 1,
    TRACE_REG_PERF_REGISTER = 2,
    TRACE_REG_PERF_UNREGISTER = 3,
    TRACE_REG_PERF_OPEN = 4,
    TRACE_REG_PERF_CLOSE = 5,
    TRACE_REG_PERF_ADD = 6,
    TRACE_REG_PERF_DEL = 7
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event_class {
   char *system ;
   void *probe ;
   void *perf_probe ;
   int (*reg)(struct trace_event_call *, enum trace_reg , void *) ;
   int (*define_fields)(struct trace_event_call *) ;
   struct list_head *(*get_fields)(struct trace_event_call *) ;
   struct list_head fields ;
   int (*raw_init)(struct trace_event_call *) ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
union __anonunion_4204 {
   char *name ;
   struct tracepoint *tp ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/trace_events.h"
struct trace_event_call {
   struct list_head list ;
   struct trace_event_class *class ;
   union __anonunion_4204 __anonCompField_trace_event_call_215 ;
   struct trace_event event ;
   char *print_fmt ;
   struct event_filter *filter ;
   void *mod ;
   void *data ;
   int flags ;
   int perf_refcount ;
   struct hlist_head *perf_events ;
   struct bpf_prog_array *prog_array ;
   int (*perf_perm)(struct trace_event_call *, struct perf_event *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 3039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_sta_flag_update {
   __u32 mask ;
   __u32 set ;
} __attribute__((__packed__));
#line 3362 
enum nl80211_mesh_power_mode {
    NL80211_MESH_POWER_UNKNOWN = 0,
    NL80211_MESH_POWER_ACTIVE = 1,
    NL80211_MESH_POWER_LIGHT_SLEEP = 2,
    NL80211_MESH_POWER_DEEP_SLEEP = 3,
    __NL80211_MESH_POWER_AFTER_LAST = 4,
    NL80211_MESH_POWER_MAX = 3
};
#line 4593 
enum nl80211_txrate_gi {
    NL80211_TXRATE_DEFAULT_GI = 0,
    NL80211_TXRATE_FORCE_SGI = 1,
    NL80211_TXRATE_FORCE_LGI = 2
};
#line 5912 
enum nl80211_nan_function_type {
    NL80211_NAN_FUNC_PUBLISH = 0,
    NL80211_NAN_FUNC_SUBSCRIBE = 1,
    NL80211_NAN_FUNC_FOLLOW_UP = 2,
    __NL80211_NAN_FUNC_TYPE_AFTER_LAST = 3,
    NL80211_NAN_FUNC_MAX_TYPE = 2
};
#line 6001 
enum nl80211_preamble {
    NL80211_PREAMBLE_LEGACY = 0,
    NL80211_PREAMBLE_HT = 1,
    NL80211_PREAMBLE_VHT = 2,
    NL80211_PREAMBLE_DMG = 3
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mu_edca_param_ac_rec {
   u8 aifsn ;
   u8 ecw_min_max ;
   u8 mu_edca_timer ;
} __attribute__((__packed__));
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_control_7016 {
   u32 legacy ;
   u8 ht_mcs[10U] ;
   u16 vht_mcs[8U] ;
   enum nl80211_txrate_gi gi ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bitrate_mask {
   struct __anonstruct_control_7016 control[4U] ;
};
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct rate_info {
   u8 flags ;
   u8 mcs ;
   u16 legacy ;
   u8 nss ;
   u8 bw ;
   u8 he_gi ;
   u8 he_dcm ;
   u8 he_ru_alloc ;
   u8 n_bonded_ch ;
};
#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct sta_bss_parameters {
   u8 flags ;
   u8 dtim_period ;
   u16 beacon_interval ;
};
#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_txq_stats {
   u32 filled ;
   u32 backlog_bytes ;
   u32 backlog_packets ;
   u32 flows ;
   u32 drops ;
   u32 ecn_marks ;
   u32 overlimit ;
   u32 overmemory ;
   u32 collisions ;
   u32 tx_bytes ;
   u32 tx_packets ;
   u32 max_flows ;
};
#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_tid_stats {
   u32 filled ;
   u64 rx_msdu ;
   u64 tx_msdu ;
   u64 tx_msdu_retries ;
   u64 tx_msdu_failed ;
   struct cfg80211_txq_stats txq_stats ;
};
#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_info {
   u64 filled ;
   u32 connected_time ;
   u32 inactive_time ;
   u64 assoc_at ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u16 llid ;
   u16 plid ;
   u8 plink_state ;
   s8 signal ;
   s8 signal_avg ;
   u8 chains ;
   s8 chain_signal[4U] ;
   s8 chain_signal_avg[4U] ;
   struct rate_info txrate ;
   struct rate_info rxrate ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_retries ;
   u32 tx_failed ;
   u32 rx_dropped_misc ;
   struct sta_bss_parameters bss_param ;
   struct nl80211_sta_flag_update sta_flags ;
   int generation ;
   u8 *assoc_req_ies ;
   size_t assoc_req_ies_len ;
   u32 beacon_loss_count ;
   s64 t_offset ;
   enum nl80211_mesh_power_mode local_pm ;
   enum nl80211_mesh_power_mode peer_pm ;
   enum nl80211_mesh_power_mode nonpeer_pm ;
   u32 expected_throughput ;
   u64 tx_duration ;
   u64 rx_duration ;
   u64 rx_beacon ;
   u8 rx_beacon_signal_avg ;
   u8 connected_to_gate ;
   struct cfg80211_tid_stats *pertid ;
   s8 ack_signal ;
   s8 avg_ack_signal ;
   u16 airtime_weight ;
   u32 rx_mpdu_count ;
   u32 fcs_err_count ;
   u32 airtime_link_metric ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_gtk_rekey_data {
   u8 *kek ;
   u8 *kck ;
   u8 *replay_ctr ;
};
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_conf {
   u8 master_pref ;
   u8 bands ;
};
#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func_filter {
   u8 *filter ;
   u8 len ;
};
#line 2978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func {
   enum nl80211_nan_function_type type ;
   u8 service_id[6U] ;
   u8 publish_type ;
   bool close_range ;
   bool publish_bcast ;
   bool subscribe_active ;
   u8 followup_id ;
   u8 followup_reqid ;
   struct mac_address followup_dest ;
   u32 ttl ;
   u8 *serv_spec_info ;
   u8 serv_spec_info_len ;
   bool srf_include ;
   u8 *srf_bf ;
   u8 srf_bf_len ;
   u8 srf_bf_idx ;
   struct mac_address *srf_macs ;
   int srf_num_macs ;
   struct cfg80211_nan_func_filter *rx_filters ;
   struct cfg80211_nan_func_filter *tx_filters ;
   u8 num_tx_filters ;
   u8 num_rx_filters ;
   u8 instance_id ;
   u64 cookie ;
};
#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ftm_responder_stats {
   u32 filled ;
   u32 success_num ;
   u32 partial_num ;
   u32 failed_num ;
   u32 asap_num ;
   u32 non_asap_num ;
   u64 total_duration_ms ;
   u32 unknown_triggers_num ;
   u32 reschedule_requests_num ;
   u32 out_of_window_triggers_num ;
};
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_ftm_request_peer {
   enum nl80211_preamble preamble ;
   u16 burst_period ;
   u8 requested : 1 ;
   u8 asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
   u8 num_bursts_exp ;
   u8 burst_duration ;
   u8 ftms_per_burst ;
   u8 ftmr_retries ;
};
#line 3230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request_peer {
   u8 addr[6U] ;
   struct cfg80211_chan_def chandef ;
   u8 report_ap_tsf : 1 ;
   struct cfg80211_pmsr_ftm_request_peer ftm ;
};
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request {
   u64 cookie ;
   void *drv_data ;
   u32 n_peers ;
   u32 nl_portid ;
   u32 timeout ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct list_head list ;
   struct cfg80211_pmsr_request_peer peers[] ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_queue_params {
   u16 txop ;
   u16 cw_min ;
   u16 cw_max ;
   u8 aifs ;
   bool acm ;
   bool uapsd ;
   bool mu_edca ;
   struct ieee80211_he_mu_edca_param_ac_rec mu_edca_param_rec ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_low_level_stats {
   unsigned int dot11ACKFailureCount ;
   unsigned int dot11RTSFailureCount ;
   unsigned int dot11FCSErrorCount ;
   unsigned int dot11RTSSuccessCount ;
};
#line 235 
enum ieee80211_chanctx_switch_mode {
    CHANCTX_SWMODE_REASSIGN_VIF = 0,
    CHANCTX_SWMODE_SWAP_CONTEXTS = 1
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif_chanctx_switch {
   struct ieee80211_vif *vif ;
   struct ieee80211_chanctx_conf *old_ctx ;
   struct ieee80211_chanctx_conf *new_ctx ;
};
#line 304 
enum ieee80211_event_type {
    RSSI_EVENT = 0,
    MLME_EVENT = 1,
    BAR_RX_EVENT = 2,
    BA_FRAME_TIMEOUT = 3
};
#line 311 
enum ieee80211_rssi_event_data {
    RSSI_EVENT_HIGH = 0,
    RSSI_EVENT_LOW = 1
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rssi_event {
   enum ieee80211_rssi_event_data data ;
};
#line 395 
enum ieee80211_mlme_event_data {
    AUTH_EVENT = 0,
    ASSOC_EVENT = 1,
    DEAUTH_RX_EVENT = 2,
    DEAUTH_TX_EVENT = 3
};
#line 402 
enum ieee80211_mlme_event_status {
    MLME_SUCCESS = 0,
    MLME_DENIED = 1,
    MLME_TIMEOUT = 2
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mlme_event {
   enum ieee80211_mlme_event_data data ;
   enum ieee80211_mlme_event_status status ;
   u16 reason ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ba_event {
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_u_7285 {
   struct ieee80211_rssi_event rssi ;
   struct ieee80211_mlme_event mlme ;
   struct ieee80211_ba_event ba ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_event {
   enum ieee80211_event_type type ;
   union __anonunion_u_7285 u ;
};
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_ies {
   u8 *ies[4U] ;
   size_t len[4U] ;
   u8 *common_ies ;
   size_t common_ie_len ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_channel_switch {
   u64 timestamp ;
   u32 device_timestamp ;
   bool block_tx ;
   struct cfg80211_chan_def chandef ;
   u8 count ;
   u32 delay ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_tkip_7294 {
   u32 iv32 ;
   u16 iv16 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ccmp_7295 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_cmac_7296 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_gmac_7297 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_gcmp_7298 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_hw_7299 {
   u8 seq[16U] ;
   u8 seq_len ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_7293 {
   struct __anonstruct_tkip_7294 tkip ;
   struct __anonstruct_ccmp_7295 ccmp ;
   struct __anonstruct_aes_cmac_7296 aes_cmac ;
   struct __anonstruct_aes_gmac_7297 aes_gmac ;
   struct __anonstruct_gcmp_7298 gcmp ;
   struct __anonstruct_hw_7299 hw ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_seq {
   union __anonunion_7293 __anonCompField_ieee80211_key_seq_197 ;
};
#line 1857 
enum set_key_cmd {
    SET_KEY = 0,
    DISABLE_KEY = 1
};
#line 1862 
enum ieee80211_sta_state {
    IEEE80211_STA_NOTEXIST = 0,
    IEEE80211_STA_NONE = 1,
    IEEE80211_STA_AUTH = 2,
    IEEE80211_STA_ASSOC = 3,
    IEEE80211_STA_AUTHORIZED = 4
};
#line 2037 
enum sta_notify_cmd {
    STA_NOTIFY_SLEEP = 0,
    STA_NOTIFY_AWAKE = 1
};
#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_request {
   struct ieee80211_scan_ies ies ;
   struct cfg80211_scan_request req ;
};
#line 2566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tdls_ch_sw_params {
   struct ieee80211_sta *sta ;
   struct cfg80211_chan_def *chandef ;
   u8 action_code ;
   u32 status ;
   u32 timestamp ;
   u16 switch_time ;
   u16 switch_timeout ;
   struct sk_buff *tmpl_skb ;
   u32 ch_sw_tm_ie ;
};
#line 2662 
enum ieee80211_ampdu_mlme_action {
    IEEE80211_AMPDU_RX_START = 0,
    IEEE80211_AMPDU_RX_STOP = 1,
    IEEE80211_AMPDU_TX_START = 2,
    IEEE80211_AMPDU_TX_STOP_CONT = 3,
    IEEE80211_AMPDU_TX_STOP_FLUSH = 4,
    IEEE80211_AMPDU_TX_STOP_FLUSH_CONT = 5,
    IEEE80211_AMPDU_TX_OPERATIONAL = 6
};
#line 3161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ampdu_params {
   enum ieee80211_ampdu_mlme_action action ;
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
   u16 buf_size ;
   bool amsdu ;
   u16 timeout ;
};
#line 3170 
enum ieee80211_frame_release_type {
    IEEE80211_FRAME_RELEASE_PSPOLL = 0,
    IEEE80211_FRAME_RELEASE_UAPSD = 1
};
#line 3182 
enum ieee80211_roc_type {
    IEEE80211_ROC_TYPE_NORMAL = 0,
    IEEE80211_ROC_TYPE_MGMT_TX = 1
};
#line 3187 
enum ieee80211_reconfig_type {
    IEEE80211_RECONFIG_TYPE_RESTART = 0,
    IEEE80211_RECONFIG_TYPE_SUSPEND = 1
};
#line 3778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ops {
   void (*tx)(struct ieee80211_hw *, struct ieee80211_tx_control *, struct sk_buff *) ;
   int (*start)(struct ieee80211_hw *) ;
   void (*stop)(struct ieee80211_hw *) ;
   int (*suspend)(struct ieee80211_hw *, struct cfg80211_wowlan *) ;
   int (*resume)(struct ieee80211_hw *) ;
   void (*set_wakeup)(struct ieee80211_hw *, bool ) ;
   int (*add_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*change_interface)(struct ieee80211_hw *, struct ieee80211_vif *, enum nl80211_iftype , bool ) ;
   void (*remove_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*config)(struct ieee80211_hw *, u32 ) ;
   void (*bss_info_changed)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_bss_conf *, u32 ) ;
   int (*start_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*stop_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u64 (*prepare_multicast)(struct ieee80211_hw *, struct netdev_hw_addr_list *) ;
   void (*configure_filter)(struct ieee80211_hw *, unsigned int , unsigned int *, u64 ) ;
   void (*config_iface_filter)(struct ieee80211_hw *, struct ieee80211_vif *, unsigned int , unsigned int ) ;
   int (*set_tim)(struct ieee80211_hw *, struct ieee80211_sta *, bool ) ;
   int (*set_key)(struct ieee80211_hw *, enum set_key_cmd , struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *) ;
   void (*update_tkip_key)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_key_conf *, struct ieee80211_sta *, u32 , u16 *) ;
   void (*set_rekey_data)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_gtk_rekey_data *) ;
   void (*set_default_unicast_key)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   int (*hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_scan_request *) ;
   void (*cancel_hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*sched_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_sched_scan_request *, struct ieee80211_scan_ies *) ;
   int (*sched_scan_stop)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*sw_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, u8 *) ;
   void (*sw_scan_complete)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*get_stats)(struct ieee80211_hw *, struct ieee80211_low_level_stats *) ;
   void (*get_key_seq)(struct ieee80211_hw *, struct ieee80211_key_conf *, struct ieee80211_key_seq *) ;
   int (*set_frag_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*set_rts_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*sta_add)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_add_debugfs)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct dentry *) ;
   void (*sta_notify)(struct ieee80211_hw *, struct ieee80211_vif *, enum sta_notify_cmd , struct ieee80211_sta *) ;
   int (*sta_set_txpwr)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_state)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, enum ieee80211_sta_state , enum ieee80211_sta_state ) ;
   void (*sta_pre_rcu_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_rc_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u32 ) ;
   void (*sta_rate_tbl_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_statistics)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct station_info *) ;
   int (*conf_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 , struct ieee80211_tx_queue_params *) ;
   u64 (*get_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*set_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, u64 ) ;
   void (*offset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, s64 ) ;
   void (*reset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*tx_last_beacon)(struct ieee80211_hw *) ;
   int (*ampdu_action)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_ampdu_params *) ;
   int (*get_survey)(struct ieee80211_hw *, int , struct survey_info *) ;
   void (*rfkill_poll)(struct ieee80211_hw *) ;
   void (*set_coverage_class)(struct ieee80211_hw *, s16 ) ;
   int (*testmode_cmd)(struct ieee80211_hw *, struct ieee80211_vif *, void *, int ) ;
   int (*testmode_dump)(struct ieee80211_hw *, struct sk_buff *, struct netlink_callback *, void *, int ) ;
   void (*flush)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , bool ) ;
   void (*channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*set_antenna)(struct ieee80211_hw *, u32 , u32 ) ;
   int (*get_antenna)(struct ieee80211_hw *, u32 *, u32 *) ;
   int (*remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel *, int , enum ieee80211_roc_type ) ;
   int (*cancel_remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*set_ringparam)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*get_ringparam)(struct ieee80211_hw *, u32 *, u32 *, u32 *, u32 *) ;
   bool (*tx_frames_pending)(struct ieee80211_hw *) ;
   int (*set_bitrate_mask)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_bitrate_mask *) ;
   void (*event_callback)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_event *) ;
   void (*allow_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   void (*release_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   int (*get_et_sset_count)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   void (*get_et_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct ethtool_stats *, u64 *) ;
   void (*get_et_strings)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , u8 *) ;
   void (*mgd_prepare_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 ) ;
   void (*mgd_protect_tdls_discover)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*add_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*remove_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*change_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, u32 ) ;
   int (*assign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   void (*unassign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   int (*switch_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif_chanctx_switch *, int , enum ieee80211_chanctx_switch_mode ) ;
   void (*reconfig_complete)(struct ieee80211_hw *, enum ieee80211_reconfig_type ) ;
   void (*ipv6_addr_change)(struct ieee80211_hw *, struct ieee80211_vif *, struct inet6_dev *) ;
   void (*channel_switch_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_chan_def *) ;
   int (*pre_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*post_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*abort_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*channel_switch_rx_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*join_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*leave_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u32 (*get_expected_throughput)(struct ieee80211_hw *, struct ieee80211_sta *) ;
   int (*get_txpower)(struct ieee80211_hw *, struct ieee80211_vif *, int *) ;
   int (*tdls_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u8 , struct cfg80211_chan_def *, struct sk_buff *, u32 ) ;
   void (*tdls_cancel_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*tdls_recv_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_tdls_ch_sw_params *) ;
   void (*wake_tx_queue)(struct ieee80211_hw *, struct ieee80211_txq *) ;
   void (*sync_rx_queues)(struct ieee80211_hw *) ;
   int (*start_nan)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *) ;
   int (*stop_nan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*nan_change_conf)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *, u32 ) ;
   int (*add_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_func *) ;
   void (*del_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, u8 ) ;
   bool (*can_aggregate_in_amsdu)(struct ieee80211_hw *, struct sk_buff *, struct sk_buff *) ;
   int (*get_ftm_responder_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_ftm_responder_stats *) ;
   int (*start_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
   void (*abort_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.h"
enum ath5k_phy_error_code {
    AR5K_RX_PHY_ERROR_UNDERRUN = 0,
    AR5K_RX_PHY_ERROR_TIMING = 1,
    AR5K_RX_PHY_ERROR_PARITY = 2,
    AR5K_RX_PHY_ERROR_RATE = 3,
    AR5K_RX_PHY_ERROR_LENGTH = 4,
    AR5K_RX_PHY_ERROR_RADAR = 5,
    AR5K_RX_PHY_ERROR_SERVICE = 6,
    AR5K_RX_PHY_ERROR_TOR = 7,
    AR5K_RX_PHY_ERROR_OFDM_TIMING = 17,
    AR5K_RX_PHY_ERROR_OFDM_SIGNAL_PARITY = 18,
    AR5K_RX_PHY_ERROR_OFDM_RATE_ILLEGAL = 19,
    AR5K_RX_PHY_ERROR_OFDM_LENGTH_ILLEGAL = 20,
    AR5K_RX_PHY_ERROR_OFDM_POWER_DROP = 21,
    AR5K_RX_PHY_ERROR_OFDM_SERVICE = 22,
    AR5K_RX_PHY_ERROR_OFDM_RESTART = 23,
    AR5K_RX_PHY_ERROR_CCK_TIMING = 25,
    AR5K_RX_PHY_ERROR_CCK_HEADER_CRC = 26,
    AR5K_RX_PHY_ERROR_CCK_RATE_ILLEGAL = 27,
    AR5K_RX_PHY_ERROR_CCK_SERVICE = 30,
    AR5K_RX_PHY_ERROR_CCK_RESTART = 31
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct idt_bits {
   u16 ist : 3 ;
   u16 zero : 5 ;
   u16 type : 5 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
} __attribute__((__packed__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct gate_struct {
   u16 offset_low ;
   u16 segment ;
   struct idt_bits bits ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 reserved ;
} __attribute__((__packed__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct gate_desc;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__));
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long p4dval_t;
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_p4d_t_9431 {
   p4dval_t p4d ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_p4d_t_9431 p4d_t;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct flush_tlb_info;
#line 364 
struct mmu_gather;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_init_ops {
   unsigned int (*patch)(u8 , void *, unsigned long , unsigned int ) ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
   void (*flush)(void) ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_time_ops {
   unsigned long long (*sched_clock)(void) ;
   unsigned long long (*steal_clock)(int ) ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_cpu_ops {
   void (*io_delay)(void) ;
   unsigned long (*get_debugreg)(int ) ;
   void (*set_debugreg)(int , unsigned long ) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long ) ;
   void (*write_cr4)(unsigned long ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr *) ;
   void (*load_idt)(struct desc_ptr *) ;
   void (*set_ldt)(void *, unsigned int ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *, unsigned int ) ;
   void (*load_gs_index)(unsigned int ) ;
   void (*write_ldt_entry)(struct desc_struct *, int , void *) ;
   void (*write_gdt_entry)(struct desc_struct *, int , void *, int ) ;
   void (*write_idt_entry)(gate_desc *, int , gate_desc *) ;
   void (*alloc_ldt)(struct desc_struct *, unsigned int ) ;
   void (*free_ldt)(struct desc_struct *, unsigned int ) ;
   void (*load_sp0)(unsigned long ) ;
   void (*wbinvd)(void) ;
   void (*cpuid)(unsigned int *, unsigned int *, unsigned int *, unsigned int *) ;
   u64 (*read_msr)(unsigned int ) ;
   void (*write_msr)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_msr_safe)(unsigned int , int *) ;
   int (*write_msr_safe)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_pmc)(int ) ;
   void (*usergs_sysret64)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct *) ;
   void (*end_context_switch)(struct task_struct *) ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_mmu_ops {
   void (*flush_tlb_user)(void) ;
   void (*flush_tlb_kernel)(void) ;
   void (*flush_tlb_one_user)(unsigned long ) ;
   void (*flush_tlb_others)(struct cpumask *, struct flush_tlb_info *) ;
   void (*tlb_remove_table)(struct mmu_gather *, void *) ;
   void (*exit_mmap)(struct mm_struct *) ;
   struct paravirt_callee_save read_cr2 ;
   void (*write_cr2)(unsigned long ) ;
   unsigned long (*read_cr3)(void) ;
   void (*write_cr3)(unsigned long ) ;
   void (*activate_mm)(struct mm_struct *, struct mm_struct *) ;
   void (*dup_mmap)(struct mm_struct *, struct mm_struct *) ;
   int (*pgd_alloc)(struct mm_struct *) ;
   void (*pgd_free)(struct mm_struct *, pgd_t *) ;
   void (*alloc_pte)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pmd)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pud)(struct mm_struct *, unsigned long ) ;
   void (*alloc_p4d)(struct mm_struct *, unsigned long ) ;
   void (*release_pte)(unsigned long ) ;
   void (*release_pmd)(unsigned long ) ;
   void (*release_pud)(unsigned long ) ;
   void (*release_p4d)(unsigned long ) ;
   void (*set_pte)(pte_t *, pte_t ) ;
   void (*set_pte_at)(struct mm_struct *, unsigned long , pte_t *, pte_t ) ;
   void (*set_pmd)(pmd_t *, pmd_t ) ;
   pte_t (*ptep_modify_prot_start)(struct vm_area_struct *, unsigned long , pte_t *) ;
   void (*ptep_modify_prot_commit)(struct vm_area_struct *, unsigned long , pte_t *, pte_t ) ;
   struct paravirt_callee_save pte_val ;
   struct paravirt_callee_save make_pte ;
   struct paravirt_callee_save pgd_val ;
   struct paravirt_callee_save make_pgd ;
   void (*set_pud)(pud_t *, pud_t ) ;
   struct paravirt_callee_save pmd_val ;
   struct paravirt_callee_save make_pmd ;
   struct paravirt_callee_save pud_val ;
   struct paravirt_callee_save make_pud ;
   void (*set_p4d)(p4d_t *, p4d_t ) ;
   struct paravirt_callee_save p4d_val ;
   struct paravirt_callee_save make_p4d ;
   void (*set_pgd)(pgd_t *, pgd_t ) ;
   struct pv_lazy_ops lazy_mode ;
   void (*set_fixmap)(unsigned int , phys_addr_t , pgprot_t ) ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lock_ops {
   void (*queued_spin_lock_slowpath)(struct qspinlock *, u32 ) ;
   struct paravirt_callee_save queued_spin_unlock ;
   void (*wait)(u8 *, u8 ) ;
   void (*kick)(int ) ;
   struct paravirt_callee_save vcpu_is_preempted ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_patch_template {
   struct pv_init_ops init ;
   struct pv_time_ops time ;
   struct pv_cpu_ops cpu ;
   struct pv_irq_ops irq ;
   struct pv_mmu_ops mmu ;
   struct pv_lock_ops lock ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_10420 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_10422 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_10424 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
struct led_init_data {
   struct fwnode_handle *fwnode ;
   char *default_label ;
   char *devicename ;
   bool devname_mandatory ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
union __anonunion___u_13505 {
   u32 __val ;
   char __c[1U] ;
};
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
union __anonunion___u_13507 {
   u32 __val ;
   char __c[1U] ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
union __anonunion___u_13509 {
   u32 __val ;
   char __c[1U] ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
union __anonunion___u_13511 {
   u32 __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.h"
enum ath5k_debug_level {
    ATH5K_DEBUG_RESET = 1,
    ATH5K_DEBUG_INTR = 2,
    ATH5K_DEBUG_MODE = 4,
    ATH5K_DEBUG_XMIT = 8,
    ATH5K_DEBUG_BEACON = 16,
    ATH5K_DEBUG_CALIBRATE = 32,
    ATH5K_DEBUG_TXPOWER = 64,
    ATH5K_DEBUG_LED = 128,
    ATH5K_DEBUG_DUMPBANDS = 1024,
    ATH5K_DEBUG_DMA = 2048,
    ATH5K_DEBUG_ANI = 8192,
    ATH5K_DEBUG_DESC = 16384,
    ATH5K_DEBUG_ANY = 4294967295
};
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
struct reg {
   char *name ;
   int addr ;
};
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
struct __anonstruct_dbg_info_15577 {
   enum ath5k_debug_level level ;
   char *name ;
   char *desc ;
};
#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
struct eeprom_private {
   u16 *buf ;
   int len ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
enum ldv_20940 {
    AR5K_INI_WRITE = 0,
    AR5K_INI_READ = 1
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
struct ath5k_ini {
   u16 ini_register ;
   u32 ini_value ;
   enum ldv_20940 ini_mode ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
struct ath5k_ini_mode {
   u16 mode_register ;
   u32 mode_value[3U] ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
struct mfd_cell;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
enum ath5k_power_mode {
    AR5K_PM_UNDEFINED = 0,
    AR5K_PM_AUTO = 1,
    AR5K_PM_AWAKE = 2,
    AR5K_PM_FULL_SLEEP = 3,
    AR5K_PM_NETWORK_SLEEP = 4
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21511 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_21511 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21512 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_21512 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_21528 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_21528 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_21532 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_21532 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_21533 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_21534 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_21533 __anonCompField_media_link_90 ;
   union __anonunion_21534 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_21536 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_21535 {
   struct __anonstruct_dev_21536 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_21535 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_21550 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_21551 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_21549 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_21550 i2c ;
   struct __anonstruct_custom_21551 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_21549 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_22452 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_22452 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_ath5k_intr_25 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_fops_ani_14 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 {
   struct ieee80211_hw *arg0 ;
   int signal_pending ;
};
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ath5k_pci_driver_26 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_traverse_kernel_items_scenario_register_seq_ops_28 {
   struct seq_file *arg0 ;
   struct seq_operations *arg1 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_write(void *p, unsigned int size)
{
  #line 40 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 32 
unsigned int ioread32(void *);
#line 53 
#line 53 
void iowrite32(u32, void *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 84 
void _ath5k_printk(struct ath5k_hw *ah, char *level, char *fmt , ...);
#line 1476 
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/attach.c"
int ath5k_hw_init(struct ath5k_hw *ah);
#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/attach.c"
void ath5k_hw_deinit(struct ath5k_hw *ah);
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1483 
int ath5k_hw_read_srev(struct ath5k_hw *ah);
#line 1493 
#line 1493 
int ath5k_hw_nic_wakeup(struct ath5k_hw *ah, struct ieee80211_channel *channel);
#line 1528 
#line 1528 
int ath5k_eeprom_init(struct ath5k_hw *ah);
#line 1529 
#line 1529 
void ath5k_eeprom_detach(struct ath5k_hw *ah);
#line 1539 
#line 1539 
int ath5k_hw_set_opmode(struct ath5k_hw *ah, enum nl80211_iftype op_mode);
#line 1542 
#line 1542 
int ath5k_hw_set_lladdr(struct ath5k_hw *ah, u8 *mac);
#line 1543 
#line 1543 
void ath5k_hw_set_bssid(struct ath5k_hw *ah);
#line 1579 
#line 1579 
int ath5k_hw_init_desc_functions(struct ath5k_hw *ah);
#line 1588 
#line 1588 
void ath5k_hw_set_ledstate(struct ath5k_hw *ah, unsigned int state);
#line 1603 
#line 1603 
int ath5k_hw_set_capabilities(struct ath5k_hw *ah);
#line 1614 
#line 1614 
u16 ath5k_hw_radio_revision(struct ath5k_hw *ah, enum nl80211_band band);
#line 1618 
#line 1618 
int ath5k_hw_rfgain_opt_init(struct ath5k_hw *ah);
#line 1622 
#line 1622 
void ath5k_hw_init_nfcal_hist(struct ath5k_hw *ah);
#line 1642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static struct ath_common *ath5k_hw_common(struct ath5k_hw *ah)
{
  #line 1644 
  return & ah->common;
}

#line 1678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static u32 ath5k_hw_reg_read(struct ath5k_hw *ah, u16 reg)
{
  #line 1680 
  return ioread32(ah->iobase + (unsigned long)reg);
}

#line 1683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static void ath5k_hw_reg_write(struct ath5k_hw *ah, u32 val, u16 reg)
{
  #line 1685 
  iowrite32(val,ah->iobase + (unsigned long)reg);
  #line 1686 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/attach.c"
static int ath5k_hw_post(struct ath5k_hw *ah)
{
  #line 43 
  int i;
  #line 43 
  int c;
  #line 44 
  u16 cur_reg;
  #line 45 
  u32 var_pattern;
  #line 46 
  u32 init_val;
  #line 47 
  u32 cur_val;
  #line 38 
  u32 static_pattern[4U] = {1431655765U, 2863311530U, 1717986918U, 2576980377U};
  #line 42 
  u16 regs_0[2U] = {(unsigned short)32768U, (unsigned short)38944U};
  #line 49 
  c = 0;
  #line 49 
  while (c <= 1) {
    #line 51 
    cur_reg = regs_0[c];
    #line 54 
    init_val = ath5k_hw_reg_read(ah,(unsigned short)((int)cur_reg));
    #line 56 
    i = 0;
    #line 56 
    while (i <= 255) {
      #line 57 
      var_pattern = (unsigned int)((i << 16) | i);
      #line 58 
      ath5k_hw_reg_write(ah,var_pattern,(unsigned short)((int)cur_reg));
      #line 59 
      cur_val = ath5k_hw_reg_read(ah,(unsigned short)((int)cur_reg));
      #line 61 
      if (cur_val != var_pattern) {
        #line 62 
        if (net_ratelimit() != 0) 
                                  #line 62 
                                  _ath5k_printk(ah,(char *)"\001",(char *)"POST Failed !!!\n");
        #line 63 
        return -11;
      }
      #line 67 
      var_pattern = 3737615U;
      #line 68 
      ath5k_hw_reg_write(ah,var_pattern,(unsigned short)((int)cur_reg));
      #line 56 
      i ++;
    }
    #line 71 
    i = 0;
    #line 71 
    while (i <= 3) {
      #line 72 
      var_pattern = static_pattern[i];
      #line 73 
      ath5k_hw_reg_write(ah,var_pattern,(unsigned short)((int)cur_reg));
      #line 74 
      cur_val = ath5k_hw_reg_read(ah,(unsigned short)((int)cur_reg));
      #line 76 
      if (cur_val != var_pattern) {
        #line 77 
        if (net_ratelimit() != 0) 
                                  #line 77 
                                  _ath5k_printk(ah,(char *)"\001",(char *)"POST Failed !!!\n");
        #line 78 
        return -11;
      }
      #line 82 
      var_pattern = 3868687U;
      #line 83 
      ath5k_hw_reg_write(ah,var_pattern,(unsigned short)((int)cur_reg));
      #line 71 
      i ++;
    }
    #line 87 
    ath5k_hw_reg_write(ah,init_val,(unsigned short)((int)cur_reg));
    #line 49 
    c ++;
  }
  #line 91 
  return 0;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/attach.c"
int ath5k_hw_init(struct ath5k_hw *ah)
{
  #line 109 
  struct ath5k_eeprom_info *ee;
  #line 110 
  int ret;
  #line 111 
  u32 srev;
  #line 106 
  u8 zero_mac[6U] = {};
  #line 107 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 108 
  struct pci_dev *pdev = ah->pdev;
  #line 116 
  ah->ah_bwmode = (unsigned char)0U;
  #line 117 
  ah->ah_txpower.txp_tpc = (_Bool)0;
  #line 118 
  ah->ah_imr = (enum ath5k_int)0;
  #line 119 
  ah->ah_retry_short = (unsigned char)7U;
  #line 120 
  ah->ah_retry_long = (unsigned char)4U;
  #line 121 
  ah->ah_ant_mode = (unsigned char)0U;
  #line 122 
  ah->ah_noise_floor = -95;
  #line 123 
  ah->ani_state.ani_mode = ATH5K_ANI_MODE_AUTO;
  #line 124 
  ah->ah_current_channel = & ah->channels[0];
  #line 129 
  ath5k_hw_read_srev(ah);
  #line 130 
  srev = ah->ah_mac_srev;
  #line 131 
  if (srev <= 15U) 
                   #line 132 
                   ah->ah_version = AR5K_AR5210;
  else 
    #line 133 
    if (srev <= 79U) 
                     #line 134 
                     ah->ah_version = AR5K_AR5211; else 
                                                        #line 136 
                                                        ah->ah_version = AR5K_AR5212;
  #line 139 
  ah->ah_mac_version = (unsigned short)((unsigned int)((unsigned short)(srev >> 4)) & 15U);
  #line 142 
  ret = ath5k_hw_init_desc_functions(ah);
  #line 143 
  if (ret != 0) 
                #line 144 
                goto err;
  #line 147 
  ret = ath5k_hw_nic_wakeup(ah,(struct ieee80211_channel *)0);
  #line 148 
  if (ret != 0) 
                #line 149 
                goto err;
  #line 152 
  ah->ah_phy_revision = (unsigned short)ath5k_hw_reg_read(ah,(unsigned short)38936);
  #line 154 
  ah->ah_radio_5ghz_revision = ath5k_hw_radio_revision(ah,(enum nl80211_band)NL80211_BAND_5GHZ);
  #line 158 
  switch ((int)ah->ah_radio_5ghz_revision & 240) {
    #line 159 
    case 16: 
             #line 159 
    ;
    #line 160 
    ah->ah_radio = AR5K_RF5111;
    #line 161 
    ah->ah_single_chip = (_Bool)0;
    #line 162 
    ah->ah_radio_2ghz_revision = ath5k_hw_radio_revision(ah,(enum nl80211_band)NL80211_BAND_2GHZ);
    #line 164 
    break;
    #line 165 
    case 48: 
             #line 165 
    ;
    #line 166 
    case 64: 
             #line 166 
    ;
    #line 167 
    ah->ah_radio = AR5K_RF5112;
    #line 168 
    ah->ah_single_chip = (_Bool)0;
    #line 169 
    ah->ah_radio_2ghz_revision = ath5k_hw_radio_revision(ah,(enum nl80211_band)NL80211_BAND_2GHZ);
    #line 171 
    break;
    #line 172 
    case 80: 
             #line 172 
    ;
    #line 173 
    ah->ah_radio = AR5K_RF2413;
    #line 174 
    ah->ah_single_chip = (_Bool)1;
    #line 175 
    break;
    #line 176 
    case 96: 
             #line 176 
    ;
    #line 177 
    ah->ah_radio = AR5K_RF5413;
    #line 178 
    ah->ah_single_chip = (_Bool)1;
    #line 179 
    break;
    #line 180 
    case 112: 
              #line 180 
    ;
    #line 181 
    ah->ah_radio = AR5K_RF2316;
    #line 182 
    ah->ah_single_chip = (_Bool)1;
    #line 183 
    break;
    #line 184 
    case 128: 
              #line 184 
    ;
    #line 185 
    ah->ah_radio = AR5K_RF2317;
    #line 186 
    ah->ah_single_chip = (_Bool)1;
    #line 187 
    break;
    #line 188 
    case 160: 
              #line 188 
    ;
    #line 189 
    if ((unsigned int)ah->ah_mac_version == 224U || (unsigned int)ah->ah_mac_version == 240U) {
      #line 191 
      ah->ah_radio = AR5K_RF2425;
      #line 192 
      ah->ah_single_chip = (_Bool)1;
    }
    else {
      #line 194 
      ah->ah_radio = AR5K_RF5413;
      #line 195 
      ah->ah_single_chip = (_Bool)1;
    }
    #line 197 
    break;
    #line 198 
    default: 
             #line 198 
    ;
    #line 200 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) {
      #line 201 
      ah->ah_radio = AR5K_RF5110;
      #line 202 
      ah->ah_single_chip = (_Bool)0;
    }
    else 
      #line 203 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) {
        #line 204 
        ah->ah_radio = AR5K_RF5111;
        #line 205 
        ah->ah_single_chip = (_Bool)0;
        #line 206 
        ah->ah_radio_2ghz_revision = ath5k_hw_radio_revision(ah,(enum nl80211_band)NL80211_BAND_2GHZ);
      }
      else 
        #line 208 
        if ((unsigned int)ah->ah_mac_version + 65522U <= 1U || (unsigned int)ah->ah_phy_revision == 112U) {
          #line 211 
          ah->ah_radio = AR5K_RF2425;
          #line 212 
          ah->ah_single_chip = (_Bool)1;
          #line 213 
          ah->ah_radio_5ghz_revision = (unsigned short)162U;
        }
        else 
          #line 214 
          if (srev == 89U && (unsigned int)ah->ah_phy_revision == 67U) {
            #line 216 
            ah->ah_radio = AR5K_RF5112;
            #line 217 
            ah->ah_single_chip = (_Bool)0;
            #line 218 
            ah->ah_radio_5ghz_revision = (unsigned short)54U;
          }
          else 
            #line 219 
            if ((unsigned int)ah->ah_mac_version == 11U || (unsigned int)ah->ah_mac_version == 8U) {
              #line 221 
              ah->ah_radio = AR5K_RF2316;
              #line 222 
              ah->ah_single_chip = (_Bool)1;
              #line 223 
              ah->ah_radio_5ghz_revision = (unsigned short)112U;
            }
            else 
              #line 224 
              if ((unsigned int)ah->ah_mac_version == 10U || (unsigned int)ah->ah_phy_revision == 97U) {
                #line 226 
                ah->ah_radio = AR5K_RF5413;
                #line 227 
                ah->ah_single_chip = (_Bool)1;
                #line 228 
                ah->ah_radio_5ghz_revision = (unsigned short)96U;
              }
              else 
                #line 229 
                if ((unsigned int)ah->ah_mac_version == 7U || (unsigned int)ah->ah_phy_revision == 69U) {
                  #line 231 
                  ah->ah_radio = AR5K_RF2413;
                  #line 232 
                  ah->ah_single_chip = (_Bool)1;
                  #line 233 
                  ah->ah_radio_5ghz_revision = (unsigned short)80U;
                }
                else {
                  #line 235 
                  if (net_ratelimit() != 0) 
                                            #line 235 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"Couldn\'t identify radio revision.\n");
                  #line 236 
                  ret = -19;
                  #line 237 
                  goto err;
                }
  }
  #line 243 
  if (srev + 4294967104U <= 31U) {
    #line 244 
    if (net_ratelimit() != 0) 
                              #line 244 
                              _ath5k_printk(ah,(char *)"\001",(char *)"Device not yet supported.\n");
    #line 245 
    ret = -19;
    #line 246 
    goto err;
  }
  #line 252 
  ret = ath5k_hw_post(ah);
  #line 253 
  if (ret != 0) 
                #line 254 
                goto err;
  #line 257 
  if (srev > 88U) {
    #line 258 
    ;
    #line 258 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | 4096U,(unsigned short)16400);
  }
  #line 264 
  ret = ath5k_eeprom_init(ah);
  #line 265 
  if (ret != 0) {
    #line 266 
    if (net_ratelimit() != 0) 
                              #line 266 
                              _ath5k_printk(ah,(char *)"\001",(char *)"unable to init EEPROM\n");
    #line 267 
    goto err;
  }
  #line 270 
  ee = & ah->ah_capabilities.cap_eeprom;
  #line 275 
  if (ah->ah_version == (unsigned int)AR5K_AR5212 && pdev != (struct pci_dev *)0) {
    #line 275 
    if ((int)pci_is_pcie(pdev) != 0) {
      #line 276 
      ath5k_hw_reg_write(ah,2454256640U,(unsigned short)16512);
      #line 277 
      ath5k_hw_reg_write(ah,613566756U,(unsigned short)16512);
      #line 280 
      ath5k_hw_reg_write(ah,671088697U,(unsigned short)16512);
      #line 281 
      ath5k_hw_reg_write(ah,1393952804U,(unsigned short)16512);
      #line 286 
      if ((int)ee->ee_serdes != 0) 
                                   #line 287 
                                   ath5k_hw_reg_write(ah,3851945337U,(unsigned short)16512); else 
                                                                    #line 289 
                                                                    ath5k_hw_reg_write(ah,4135585145U,(unsigned short)16512);
      #line 292 
      ath5k_hw_reg_write(ah,1961983U,(unsigned short)16512);
      #line 295 
      ath5k_hw_reg_write(ah,447397440U,(unsigned short)16512);
      #line 296 
      ath5k_hw_reg_write(ah,3188741460U,(unsigned short)16512);
      #line 297 
      ath5k_hw_reg_write(ah,929799U,(unsigned short)16512);
      #line 300 
      ath5k_hw_reg_write(ah,0U,(unsigned short)16516);
      #line 301 
      usleep_range(1000UL,1500UL);
    }
  }
  #line 305 
  ret = ath5k_hw_set_capabilities(ah);
  #line 306 
  if (ret != 0) {
    #line 307 
    if (net_ratelimit() != 0) 
                              #line 307 
                              _ath5k_printk(ah,(char *)"\001",(char *)"unable to get device capabilities\n");
    #line 308 
    goto err;
  }
  #line 312 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 312 
                                                   common->keymax = 64U; else 
                                                                    #line 312 
                                                                    common->keymax = 128U;
  #line 315 
  if (srev > 83U && ((unsigned int)ee->ee_version <= 20479U || (((int)ee->ee_misc5 >> 1) & 1) == 0)) 
    #line 318 
    common->crypt_caps = (enum ath_crypt_caps)((unsigned int)common->crypt_caps | 1U);
  #line 320 
  if (srev > 111U) {
    #line 321 
    common->crypt_caps = (enum ath_crypt_caps)((unsigned int)common->crypt_caps | 2U);
    #line 322 
    ;
    #line 322 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)33056) | 4U,(unsigned short)33056);
  }
  #line 327 
  ath5k_hw_set_lladdr(ah,(u8 *)(& zero_mac));
  #line 330 
  eth_broadcast_addr((u8 *)(& common->curbssid));
  #line 331 
  ath5k_hw_set_bssid(ah);
  #line 332 
  ath5k_hw_set_opmode(ah,ah->opmode);
  #line 334 
  ath5k_hw_rfgain_opt_init(ah);
  #line 336 
  ath5k_hw_init_nfcal_hist(ah);
  #line 339 
  ath5k_hw_set_ledstate(ah,0U);
  #line 341 
  return 0;
  #line 342 
  err: 
       #line 342 
  ;
  #line 343 
  return ret;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/attach.c"
void ath5k_hw_deinit(struct ath5k_hw *ah)
{
  #line 352 
  __set_bit(0L,(unsigned long *)(& ah->status));
  #line 354 
  kfree((void *)ah->ah_rf_banks);
  #line 356 
  ath5k_eeprom_detach(ah);
  #line 357 
  return;
}

#line 1604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/caps.c"
int ath5k_hw_enable_pspoll(struct ath5k_hw *ah, u8 *bssid, u16 assoc_id);
#line 1605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/caps.c"
int ath5k_hw_disable_pspoll(struct ath5k_hw *ah);
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/regd.h"
#line 261 
bool ath_is_49ghz_allowed(u16);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/caps.c"
int ath5k_hw_set_capabilities(struct ath5k_hw *ah)
{
  #line 36 
  u16 ee_header;
  #line 35 
  struct ath5k_capabilities *caps = & ah->ah_capabilities;
  #line 39 
  ee_header = caps->cap_eeprom.ee_header;
  #line 41 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 46 
    caps->cap_range.range_5ghz_min = (unsigned short)5120U;
    #line 47 
    caps->cap_range.range_5ghz_max = (unsigned short)5430U;
    #line 48 
    caps->cap_range.range_2ghz_min = (unsigned short)0U;
    #line 49 
    caps->cap_range.range_2ghz_max = (unsigned short)0U;
    #line 52 
    __set_bit(0L,(unsigned long *)(& caps->cap_mode));
  }
  else {
    #line 68 
    if (((int)ee_header & 1) != 0) {
      #line 69 
      if ((int)ath_is_49ghz_allowed((unsigned short)((int)caps->cap_eeprom.ee_regdomain)) != 0) 
        #line 70 
        caps->cap_range.range_5ghz_min = (unsigned short)4920U; else 
                                                                  #line 72 
                                                                  caps->cap_range.range_5ghz_min = (unsigned short)5005U;
      #line 73 
      caps->cap_range.range_5ghz_max = (unsigned short)6100U;
      #line 76 
      __set_bit(0L,(unsigned long *)(& caps->cap_mode));
    }
    #line 81 
    if ((((int)ee_header >> 1) & 1) != 0 || (((int)ee_header >> 2) & 1) != 0 && ah->ah_version != (unsigned int)AR5K_AR5211) {
      #line 85 
      caps->cap_range.range_2ghz_min = (unsigned short)2412U;
      #line 86 
      caps->cap_range.range_2ghz_max = (unsigned short)2732U;
      #line 91 
      if (! caps->cap_needs_2GHz_ovr) {
        #line 92 
        if ((((int)ee_header >> 1) & 1) != 0) 
                                              #line 93 
                                              __set_bit(1L,(unsigned long *)(& caps->cap_mode));
        #line 96 
        if ((((int)ee_header >> 2) & 1) != 0 && ah->ah_version != (unsigned int)AR5K_AR5211) 
          #line 98 
          __set_bit(2L,(unsigned long *)(& caps->cap_mode));
      }
    }
  }
  #line 104 
  if (((int)ah->ah_radio_5ghz_revision & 240) == 64) 
                                                     #line 105 
                                                     __set_bit(0L,(unsigned long *)(& caps->cap_mode));
  #line 108 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 109 
                                                   caps->cap_queues.q_tx_num = (unsigned char)2U; else 
                                                                    #line 111 
                                                                    caps->cap_queues.q_tx_num = (unsigned char)10U;
  #line 114 
  if (ah->ah_mac_srev > 88U) 
                             #line 115 
                             caps->cap_has_phyerr_counters = (_Bool)1; else 
                                                                    #line 117 
                                                                    caps->cap_has_phyerr_counters = (_Bool)0;
  #line 120 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 121 
                                                   caps->cap_has_mrr_support = (_Bool)1; else 
                                                                    #line 123 
                                                                    caps->cap_has_mrr_support = (_Bool)0;
  #line 125 
  return 0;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/caps.c"
int ath5k_hw_enable_pspoll(struct ath5k_hw *ah, u8 *bssid, u16 assoc_id)
{
  #line 136 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 137 
    ;
    #line 137 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) & 4291821567U,(unsigned short)32772);
    #line 139 
    return 0;
  }
  #line 142 
  return -5;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/caps.c"
int ath5k_hw_disable_pspoll(struct ath5k_hw *ah)
{
  #line 147 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 148 
    ;
    #line 148 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) | 3145728U,(unsigned short)32772);
    #line 150 
    return 0;
  }
  #line 153 
  return -5;
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 *p)
{
  #line 58 
  return *p;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static __s32 sign_extend32(__u32 value, int index)
{
  #line 164 
  __u8 shift = (unsigned char)(31U - (unsigned int)((unsigned char)index));
  #line 165 
  return (int)(value << (int)shift) >> (int)shift;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void *p)
{
  #line 15 
  return __le32_to_cpup((__le32 *)p);
}

#line 5034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5034 
int ieee80211_frequency_to_channel(int);
#line 1497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1497 
int ath5k_hw_register_timeout(struct ath5k_hw *ah, u32 reg, u32 flag, u32 val, bool is_set);
#line 1530 
#line 1530 
int ath5k_eeprom_mode_from_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel);
#line 1615 
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_phy_disable(struct ath5k_hw *ah);
#line 1617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
enum ath5k_rfgain ath5k_hw_gainf_calibrate(struct ath5k_hw *ah);
#line 1620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
bool ath5k_channel_ok(struct ath5k_hw *ah, struct ieee80211_channel *channel);
#line 1623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_phy_calibrate(struct ath5k_hw *ah, struct ieee80211_channel *channel);
#line 1625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_update_noise_floor(struct ath5k_hw *ah);
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
bool ath5k_hw_chan_has_spur_noise(struct ath5k_hw *ah, struct ieee80211_channel *channel);
#line 1630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 2294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_set_antenna_mode(struct ath5k_hw *ah, u8 ant_mode);
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_set_antenna_switch(struct ath5k_hw *ah, u8 ee_mode);
#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 3724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_set_txpower_limit(struct ath5k_hw *ah, u8 txpower);
#line 1635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 3751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_phy_init(struct ath5k_hw *ah, struct ieee80211_channel *channel, u8 mode, bool fast);
#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static struct ath_regulatory *ath5k_hw_regulatory(struct ath5k_hw *ah)
{
  #line 1649 
  return & ath5k_hw_common(ah)->regulatory;
}

#line 1706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static u32 ath5k_hw_bitswap(u32 val, unsigned int bits)
{
  #line 1708 
  u32 bit;
  #line 1708 
  u32 i;
  #line 1708 
  u32 retval = 0U;
  #line 1710 
  i = 0U;
  #line 1710 
  while (i < bits) {
    #line 1711 
    bit = (val >> i) & 1U;
    #line 1712 
    retval = (retval << 1) | bit;
    #line 1710 
    i ++;
  }
  #line 1715 
  return retval;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_5111[16U] = {{.bank = (unsigned char)2U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)119U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)122U}}, {.bank = (unsigned char)6U, .index = (unsigned char)2U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)104U}}, {.bank = (unsigned char)6U, .index = (unsigned char)4U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)107U}}, {.bank = (unsigned char)6U, .index = (unsigned char)7U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)95U}}, {.bank = (unsigned char)6U, .index = (unsigned char)9U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)96U}}, {.bank = (unsigned char)6U, .index = (unsigned char)20U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)51U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)21U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)45U, .col = (unsigned char)3U}}, {.bank = (unsigned char)7U, .index = (unsigned char)31U, .field = {.len = (unsigned char)6U, .pos = (unsigned short)29U}}, {.bank = (unsigned char)7U, .index = (unsigned char)32U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)4U}}, {.bank = (unsigned char)7U, .index = (unsigned char)33U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)36U}}, {.bank = (unsigned char)7U, .index = (unsigned char)34U, .field = {.len = (unsigned char)6U, .pos = (unsigned short)37U}}, {.bank = (unsigned char)7U, .index = (unsigned char)35U, .field = {.len = (unsigned char)5U, .pos = (unsigned short)19U}}, {.bank = (unsigned char)7U, .index = (unsigned char)36U, .field = {.len = (unsigned char)5U, .pos = (unsigned short)24U}}, {.bank = (unsigned char)7U, .index = (unsigned char)37U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)49U}}};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_5111[45U] = {{.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3670016U, 3670016U, 3670016U}}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U}, {.rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {[1] = 192U, 128U}}, {.rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {262393U, 262399U, 262397U}}, {.rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {[1] = 4U, 4U}}, {.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {16U, 16U, 16U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39128U, .rfb_mode_data = {6295656U, 6295656U, 6295656U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {268435456U, 268435456U, 268435456U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {67108864U, 67108864U, 67108864U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {[1] = 167772160U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3670208U, 37224640U, 3670208U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {131078U, 6U, 131078U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {137U, 137U, 137U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {160U, 160U, 160U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {262151U, 262151U, 262151U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {26U, 26U, 26U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {64U, 64U, 64U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16U, 16U, 16U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8U, 8U, 8U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {79U, 79U, 79U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {241U, 97U, 241U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {36943U, 36940U, 36943U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4698U, 4762U, 4698U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 15U, 14U}}};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_5112[25U] = {{.bank = (unsigned char)2U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)1U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)269U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)272U}}, {.bank = (unsigned char)6U, .index = (unsigned char)2U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)261U}}, {.bank = (unsigned char)6U, .index = (unsigned char)4U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)264U}}, {.bank = (unsigned char)6U, .index = (unsigned char)5U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)260U}}, {.bank = (unsigned char)6U, .index = (unsigned char)6U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)259U}}, {.bank = (unsigned char)6U, .index = (unsigned char)8U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)284U}}, {.bank = (unsigned char)6U, .index = (unsigned char)9U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)252U}}, {.bank = (unsigned char)6U, .index = (unsigned char)22U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)172U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)23U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)171U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)24U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)170U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)25U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)166U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)26U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)165U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)27U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)164U, .col = (unsigned char)3U}}, {.bank = (unsigned char)7U, .index = (unsigned char)31U, .field = {.len = (unsigned char)6U, .pos = (unsigned short)14U}}, {.bank = (unsigned char)7U, .index = (unsigned char)38U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)36U}}, {.bank = (unsigned char)7U, .index = (unsigned char)39U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)37U}}, {.bank = (unsigned char)7U, .index = (unsigned char)40U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)32U}}, {.bank = (unsigned char)7U, .index = (unsigned char)41U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)58U}}, {.bank = (unsigned char)7U, .index = (unsigned char)42U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)62U}}, {.bank = (unsigned char)7U, .index = (unsigned char)43U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)66U}}, {.bank = (unsigned char)7U, .index = (unsigned char)44U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)70U}}, {.bank = (unsigned char)7U, .index = (unsigned char)45U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)74U}}, {.bank = (unsigned char)7U, .index = (unsigned char)46U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)78U}}};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_5112[54U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {50725896U, 50725896U, 50725896U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10535104U, 14729408U, 14729408U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {10485760U, 10485760U, 10485760U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {655360U, 655360U, 655360U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {6684672U, 6684672U, 6684672U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {14352384U, 14352384U, 14352384U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {15794176U, 15794176U, 15794176U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1179648U, 1179648U, 1179648U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1179648U, 1179648U, 1179648U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7536640U, 7536640U, 7536640U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {786432U, 786432U, 786432U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9109504U, 9109504U, 9109504U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {6291456U, 6291456U, 6291456U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {786432U, 786432U, 786432U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8650752U, 8650752U, 8650752U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {6553600U, 6553600U, 6553600U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2097152U, 2097152U, 2097152U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2359296U, 2359296U, 2359296U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2424832U, 2424832U, 2424832U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1114112U, 1114112U, 1114112U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1114112U, 1114112U, 1114112U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5308416U, 5308416U, 5308416U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {470024192U, 470024192U, 470024192U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {655360U, 655360U, 655360U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {10551296U, 10551296U, 10551296U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4194304U, 4194304U, 4194304U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {50921472U, 50921472U, 50921472U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {100663296U, 100663296U, 100663296U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {176U, 168U, 168U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {46U, 46U, 46U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7096897U, 7097073U, 7096929U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5277994U, 5277995U, 5277995U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8659968U, 8659968U, 8659968U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {13013504U, 13013504U, 13013504U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {131084U, 131084U, 131084U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {148U, 148U, 148U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {145U, 145U, 145U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {10U, 18U, 18U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {128U, 128U, 128U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {193U, 193U, 193U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {96U, 96U, 96U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {240U, 240U, 240U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {34U, 34U, 34U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {146U, 146U, 146U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {212U, 212U, 212U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5324U, 5324U, 5324U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1164U, 1164U, 1164U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39108U, .rfb_mode_data = {3U, 3U, 3U}}};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_5112a[35U] = {{.bank = (unsigned char)2U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)1U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)287U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)290U}}, {.bank = (unsigned char)6U, .index = (unsigned char)2U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)279U}}, {.bank = (unsigned char)6U, .index = (unsigned char)4U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)282U}}, {.bank = (unsigned char)6U, .index = (unsigned char)5U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)278U}}, {.bank = (unsigned char)6U, .index = (unsigned char)6U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)277U}}, {.bank = (unsigned char)6U, .index = (unsigned char)8U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)302U}}, {.bank = (unsigned char)6U, .index = (unsigned char)10U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)270U}}, {.bank = (unsigned char)6U, .index = (unsigned char)11U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)257U}}, {.bank = (unsigned char)6U, .index = (unsigned char)22U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)176U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)23U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)175U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)24U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)174U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)25U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)170U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)26U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)169U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)27U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)168U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)28U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)140U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)29U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)139U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)12U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)90U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)13U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)92U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)14U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)94U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)15U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)254U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)16U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)281U, .col = (unsigned char)1U}}, {.bank = (unsigned char)6U, .index = (unsigned char)17U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)1U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)18U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)3U, .col = (unsigned char)3U}}, {.bank = (unsigned char)7U, .index = (unsigned char)31U, .field = {.len = (unsigned char)6U, .pos = (unsigned short)14U}}, {.bank = (unsigned char)7U, .index = (unsigned char)38U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)36U}}, {.bank = (unsigned char)7U, .index = (unsigned char)39U, .field = {.len = (unsigned char)2U, .pos = (unsigned short)37U}}, {.bank = (unsigned char)7U, .index = (unsigned char)40U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)32U}}, {.bank = (unsigned char)7U, .index = (unsigned char)41U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)58U}}, {.bank = (unsigned char)7U, .index = (unsigned char)42U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)62U}}, {.bank = (unsigned char)7U, .index = (unsigned char)43U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)66U}}, {.bank = (unsigned char)7U, .index = (unsigned char)44U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)70U}}, {.bank = (unsigned char)7U, .index = (unsigned char)45U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)74U}}, {.bank = (unsigned char)7U, .index = (unsigned char)46U, .field = {.len = (unsigned char)4U, .pos = (unsigned short)78U}}};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_5112a[56U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {50725896U, 50725896U, 50725896U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10494144U, 14688448U, 14688448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {251658240U, 251658240U, 251658240U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8388608U, 8388608U, 8388608U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2752512U, 2752512U, 2752512U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {65536U, 65536U, 65536U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1572864U, 1572864U, 1572864U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {6291456U, 7208960U, 7208960U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {13041664U, 13041664U, 13041664U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4915200U, 4915200U, 4915200U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {71827456U, 71827456U, 71827456U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4980736U, 4980736U, 4980736U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {14942208U, 14942208U, 14942208U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16515072U, 16515072U, 16515072U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {71237632U, 71237632U, 71237632U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {786432U, 786432U, 786432U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {35192832U, 35192832U, 35192832U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2359296U, 2359296U, 2359296U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {11796480U, 11796480U, 11796480U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {10027008U, 10027008U, 10027008U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5242880U, 5242880U, 5242880U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2752512U, 2752512U, 2752512U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1179648U, 1179648U, 1179648U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3224502272U, 3224502272U, 3224502272U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {24379392U, 24379392U, 24379392U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1114112U, 1114112U, 1114112U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2250768384U, 2250768384U, 2250768384U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {830734336U, 830734336U, 830734336U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {15859840U, 15859840U, 15859840U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2555929U, 2555929U, 2555929U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3U, 3U, 3U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {178U, 178U, 178U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {11542660U, 11542660U, 11542660U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4269476U, 4269476U, 4269476U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1151520U, 1151520U, 1151520U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1722368U, 1722368U, 1722368U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39128U, .rfb_mode_data = {721456U, 721456U, 721456U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {148U, 148U, 148U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {145U, 145U, 145U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {18U, 18U, 18U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {128U, 128U, 128U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {217U, 217U, 217U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {96U, 96U, 96U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {240U, 240U, 240U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {162U, 162U, 162U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {82U, 82U, 82U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {212U, 212U, 212U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5324U, 5324U, 5324U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1164U, 1164U, 1164U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39108U, .rfb_mode_data = {3U, 3U, 3U}}};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_2413[3U] = {{.bank = (unsigned char)2U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)1U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)168U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)165U}}};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_2413[33U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {33559560U, 33559560U, 33559560U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10494144U, 14688448U, 14688448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4026531840U, 4026531840U, 4026531840U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {50331648U, 50331648U, 50331648U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1077936128U, 1077936128U, 1077936128U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1694826496U, 1694826496U, 1694826496U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4325376U, 4325376U, 4325376U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {11862016U, 11862016U, 11862016U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {196608U, 196608U, 196608U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16187392U, 16187392U, 16187392U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {10289152U, 10289152U, 10289152U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2228224U, 2228224U, 2228224U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {69337088U, 69337088U, 69337088U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2293784U, 2293784U, 2293784U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2621440U, 2621536U, 2621536U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5243072U, 5243075U, 5243075U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {262271U, 262271U, 262271U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1112U, 1112U, 1112U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {49152U, 49152U, 49152U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39128U, .rfb_mode_data = {4194864U, 4194864U, 4194864U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {25600U, 25600U, 25600U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2048U, 2048U, 2048U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 14U, 14U}}};
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_2316[3U] = {{.bank = (unsigned char)2U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)1U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)178U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)175U}}};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_2316[35U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {33559560U, 33559560U, 33559560U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10494144U, 14688448U, 14688448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3221225472U, 3221225472U, 3221225472U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {251658240U, 251658240U, 251658240U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {33554432U, 33554432U, 33554432U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4160749568U, 4160749568U, 4160749568U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2501181440U, 2501181440U, 2501181440U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3238002688U, 3238002688U, 3238002688U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {524288U, 524288U, 524288U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {13959168U, 13959168U, 13959168U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {917504U, 917504U, 917504U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {14417920U, 14417920U, 14417920U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7798784U, 7798784U, 7798784U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9043968U, 9043968U, 9043968U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {277348352U, 277348352U, 277348352U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9175136U, 9175136U, 9175136U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {10485760U, 10485888U, 10485888U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4194304U, 4194317U, 4194317U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1115136U, 1115136U, 1115136U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {96U, 96U, 96U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1U, 1U, 1U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2816U, 2816U, 2816U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3048U, 3048U, 3048U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39104U, .rfb_mode_data = {65536U, 65536U, 65536U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {25600U, 25600U, 25600U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2048U, 2048U, 2048U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 14U, 14U}}};
#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_5413[6U] = {{.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)241U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)238U}}, {.bank = (unsigned char)6U, .index = (unsigned char)2U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)247U}}, {.bank = (unsigned char)6U, .index = (unsigned char)4U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)244U}}, {.bank = (unsigned char)6U, .index = (unsigned char)19U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)131U, .col = (unsigned char)3U}}, {.bank = (unsigned char)6U, .index = (unsigned char)30U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)291U, .col = (unsigned char)2U}}};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_5413[43U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {8U, 8U, 8U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10485952U, 14680256U, 14680256U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {855638016U, 855638016U, 855638016U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16777216U, 16777216U, 16777216U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {520093696U, 520093696U, 520093696U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {12058624U, 12058624U, 12058624U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {11993088U, 11993088U, 11993088U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8650752U, 8650752U, 8650752U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9961472U, 9961472U, 9961472U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {12582912U, 12582912U, 12582912U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16711680U, 16711680U, 16711680U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {14090240U, 14090240U, 14090240U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {6356992U, 6356992U, 6356992U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16646144U, 16646144U, 16646144U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {14548992U, 14548992U, 14548992U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8323072U, 8323072U, 8323072U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {71106560U, 71106560U, 71106560U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7798784U, 7798784U, 7798784U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4456448U, 4456448U, 4456448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9961472U, 9961472U, 9961472U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1048704U, 1048704U, 1048704U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {376884U, 376884U, 376884U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {3211504U, 3211504U, 3211504U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {786719U, 786719U, 786719U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5308480U, 5308480U, 5308480U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5243098U, 5243098U, 5243098U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16452U, 16452U, 16452U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {24768U, 24768U, 24768U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {11264U, 13824U, 13824U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39112U, .rfb_mode_data = {1027U, 263171U, 263171U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {25600U, 25600U, 25600U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2048U, 2048U, 2048U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 14U, 14U}}};
#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_rf_reg rf_regs_2425[3U] = {{.bank = (unsigned char)2U, .field = {.len = (unsigned char)1U, .pos = (unsigned short)1U, .col = (unsigned char)2U}}, {.bank = (unsigned char)6U, .index = (unsigned char)1U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)193U}}, {.bank = (unsigned char)6U, .index = (unsigned char)3U, .field = {.len = (unsigned char)3U, .pos = (unsigned short)190U}}};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_2425[36U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {33559560U, 33559560U, 33559560U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10494144U, 14688448U, 14688448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {268435456U, 268435456U, 268435456U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2752512U, 2752512U, 2752512U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1048576U, 1048576U, 1048576U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {131072U, 131072U, 131072U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7536640U, 7536640U, 7536640U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16252928U, 16252928U, 16252928U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {15138816U, 15138816U, 15138816U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1310720U, 1310720U, 1310720U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9502784U, 9502784U, 9502784U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {458778U, 458778U, 458778U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4259840U, 4259840U, 4259840U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8454144U, 8454240U, 8454240U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {133120U, 133123U, 133123U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5728U, 5728U, 5728U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5768U, 5768U, 5768U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39108U, .rfb_mode_data = {1U, 1U, 1U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {25600U, 25600U, 25600U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2048U, 2048U, 2048U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 14U, 14U}}};
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_2317[36U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {33559560U, 33559560U, 33559560U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10494144U, 14688448U, 14688448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {268435456U, 268435456U, 268435456U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2752512U, 2752512U, 2752512U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1048576U, 1048576U, 1048576U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {131072U, 131072U, 131072U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7536640U, 7536640U, 7536640U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16252928U, 16252928U, 16252928U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {15138816U, 15138816U, 15138816U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1310976U, 1310976U, 1310976U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9502784U, 9502784U, 9502784U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {458778U, 458778U, 458778U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4259840U, 4259840U, 4259840U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8454144U, 8454240U, 8454240U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {133120U, 133123U, 133123U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5728U, 5728U, 5728U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {38536U, 38536U, 38536U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39108U, .rfb_mode_data = {1U, 1U, 1U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {25600U, 25600U, 25600U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2048U, 2048U, 2048U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 14U, 14U}}};
#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfbuffer.h"
static struct ath5k_ini_rfbuffer rfb_2417[36U] = {{.rfb_bank = (unsigned char)1U, .rfb_ctrl_register = (unsigned short)39124U, .rfb_mode_data = {32U, 32U, 32U}}, {.rfb_bank = (unsigned char)2U, .rfb_ctrl_register = (unsigned short)39120U, .rfb_mode_data = {33559560U, 33559560U, 33559560U}}, {.rfb_bank = (unsigned char)3U, .rfb_ctrl_register = (unsigned short)39132U, .rfb_mode_data = {10494144U, 14688448U, 14688448U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {268435456U, 268435456U, 268435456U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2752512U, 2752512U, 2752512U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1048576U, 1048576U, 1048576U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {131072U, 131072U, 131072U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {7536640U, 7536640U, 7536640U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {16252928U, 16252928U, 16252928U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {15138816U, 2162622464U, 2162622464U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {1310720U, 1310720U, 1310720U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {9502784U, 9502784U, 9502784U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {458778U, 34013210U, 34013210U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {4259840U, 4259840U, 4259840U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {8454144U, 8454240U, 8454240U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {133120U, 133123U, 133123U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5728U, 5728U, 5728U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {5768U, 5768U, 5768U}}, {.rfb_bank = (unsigned char)6U, .rfb_ctrl_register = (unsigned short)39108U, .rfb_mode_data = {1U, 1U, 1U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {25600U, 25600U, 25600U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39068U, .rfb_mode_data = {2048U, 2048U, 2048U}}, {.rfb_bank = (unsigned char)7U, .rfb_ctrl_register = (unsigned short)39116U, .rfb_mode_data = {14U, 14U, 14U}}};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_ini_rfgain rfgain_5111[64U] = {{.rfg_register = (unsigned short)39424U, .rfg_value = {425U}}, {.rfg_register = (unsigned short)39428U, .rfg_value = {489U, 64U}}, {.rfg_register = (unsigned short)39432U, .rfg_value = {41U, 128U}}, {.rfg_register = (unsigned short)39436U, .rfg_value = {105U, 336U}}, {.rfg_register = (unsigned short)39440U, .rfg_value = {409U, 400U}}, {.rfg_register = (unsigned short)39444U, .rfg_value = {473U, 464U}}, {.rfg_register = (unsigned short)39448U, .rfg_value = {25U, 16U}}, {.rfg_register = (unsigned short)39452U, .rfg_value = {89U, 68U}}, {.rfg_register = (unsigned short)39456U, .rfg_value = {153U, 132U}}, {.rfg_register = (unsigned short)39460U, .rfg_value = {421U, 328U}}, {.rfg_register = (unsigned short)39464U, .rfg_value = {485U, 392U}}, {.rfg_register = (unsigned short)39468U, .rfg_value = {37U, 456U}}, {.rfg_register = (unsigned short)39472U, .rfg_value = {456U, 20U}}, {.rfg_register = (unsigned short)39476U, .rfg_value = {8U, 66U}}, {.rfg_register = (unsigned short)39480U, .rfg_value = {72U, 130U}}, {.rfg_register = (unsigned short)39484U, .rfg_value = {136U, 376U}}, {.rfg_register = (unsigned short)39488U, .rfg_value = {408U, 440U}}, {.rfg_register = (unsigned short)39492U, .rfg_value = {472U, 504U}}, {.rfg_register = (unsigned short)39496U, .rfg_value = {24U, 18U}}, {.rfg_register = (unsigned short)39500U, .rfg_value = {88U, 82U}}, {.rfg_register = (unsigned short)39504U, .rfg_value = {152U, 146U}}, {.rfg_register = (unsigned short)39508U, .rfg_value = {420U, 380U}}, {.rfg_register = (unsigned short)39512U, .rfg_value = {484U, 444U}}, {.rfg_register = (unsigned short)39516U, .rfg_value = {36U, 508U}}, {.rfg_register = (unsigned short)39520U, .rfg_value = {100U, 10U}}, {.rfg_register = (unsigned short)39524U, .rfg_value = {164U, 74U}}, {.rfg_register = (unsigned short)39528U, .rfg_value = {228U, 138U}}, {.rfg_register = (unsigned short)39532U, .rfg_value = {266U, 346U}}, {.rfg_register = (unsigned short)39536U, .rfg_value = {330U, 410U}}, {.rfg_register = (unsigned short)39540U, .rfg_value = {394U, 474U}}, {.rfg_register = (unsigned short)39544U, .rfg_value = {458U, 14U}}, {.rfg_register = (unsigned short)39548U, .rfg_value = {10U, 78U}}, {.rfg_register = (unsigned short)39552U, .rfg_value = {74U, 142U}}, {.rfg_register = (unsigned short)39556U, .rfg_value = {138U, 350U}}, {.rfg_register = (unsigned short)39560U, .rfg_value = {442U, 414U}}, {.rfg_register = (unsigned short)39564U, .rfg_value = {506U, 478U}}, {.rfg_register = (unsigned short)39568U, .rfg_value = {58U, 9U}}, {.rfg_register = (unsigned short)39572U, .rfg_value = {122U, 73U}}, {.rfg_register = (unsigned short)39576U, .rfg_value = {390U, 137U}}, {.rfg_register = (unsigned short)39580U, .rfg_value = {454U, 377U}}, {.rfg_register = (unsigned short)39584U, .rfg_value = {6U, 441U}}, {.rfg_register = (unsigned short)39588U, .rfg_value = {70U, 505U}}, {.rfg_register = (unsigned short)39592U, .rfg_value = {134U, 57U}}, {.rfg_register = (unsigned short)39596U, .rfg_value = {198U, 121U}}, {.rfg_register = (unsigned short)39600U, .rfg_value = {198U, 185U}}, {.rfg_register = (unsigned short)39604U, .rfg_value = {198U, 445U}}, {.rfg_register = (unsigned short)39608U, .rfg_value = {198U, 509U}}, {.rfg_register = (unsigned short)39612U, .rfg_value = {198U, 61U}}, {.rfg_register = (unsigned short)39616U, .rfg_value = {198U, 125U}}, {.rfg_register = (unsigned short)39620U, .rfg_value = {198U, 189U}}, {.rfg_register = (unsigned short)39624U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39628U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39632U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39636U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39640U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39644U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39648U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39652U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39656U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39660U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39664U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39668U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39672U, .rfg_value = {198U, 253U}}, {.rfg_register = (unsigned short)39676U, .rfg_value = {198U, 253U}}};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_ini_rfgain rfgain_5112[64U] = {{.rfg_register = (unsigned short)39424U, .rfg_value = {7U, 7U}}, {.rfg_register = (unsigned short)39428U, .rfg_value = {71U, 71U}}, {.rfg_register = (unsigned short)39432U, .rfg_value = {135U, 135U}}, {.rfg_register = (unsigned short)39436U, .rfg_value = {416U, 416U}}, {.rfg_register = (unsigned short)39440U, .rfg_value = {480U, 480U}}, {.rfg_register = (unsigned short)39444U, .rfg_value = {32U, 32U}}, {.rfg_register = (unsigned short)39448U, .rfg_value = {96U, 96U}}, {.rfg_register = (unsigned short)39452U, .rfg_value = {417U, 417U}}, {.rfg_register = (unsigned short)39456U, .rfg_value = {481U, 481U}}, {.rfg_register = (unsigned short)39460U, .rfg_value = {33U, 33U}}, {.rfg_register = (unsigned short)39464U, .rfg_value = {97U, 97U}}, {.rfg_register = (unsigned short)39468U, .rfg_value = {354U, 354U}}, {.rfg_register = (unsigned short)39472U, .rfg_value = {418U, 418U}}, {.rfg_register = (unsigned short)39476U, .rfg_value = {482U, 482U}}, {.rfg_register = (unsigned short)39480U, .rfg_value = {34U, 34U}}, {.rfg_register = (unsigned short)39484U, .rfg_value = {98U, 98U}}, {.rfg_register = (unsigned short)39488U, .rfg_value = {355U, 355U}}, {.rfg_register = (unsigned short)39492U, .rfg_value = {419U, 419U}}, {.rfg_register = (unsigned short)39496U, .rfg_value = {483U, 483U}}, {.rfg_register = (unsigned short)39500U, .rfg_value = {35U, 35U}}, {.rfg_register = (unsigned short)39504U, .rfg_value = {99U, 99U}}, {.rfg_register = (unsigned short)39508U, .rfg_value = {388U, 388U}}, {.rfg_register = (unsigned short)39512U, .rfg_value = {452U, 452U}}, {.rfg_register = (unsigned short)39516U, .rfg_value = {4U, 4U}}, {.rfg_register = (unsigned short)39520U, .rfg_value = {490U, 11U}}, {.rfg_register = (unsigned short)39524U, .rfg_value = {42U, 75U}}, {.rfg_register = (unsigned short)39528U, .rfg_value = {106U, 139U}}, {.rfg_register = (unsigned short)39532U, .rfg_value = {170U, 428U}}, {.rfg_register = (unsigned short)39536U, .rfg_value = {427U, 492U}}, {.rfg_register = (unsigned short)39540U, .rfg_value = {491U, 44U}}, {.rfg_register = (unsigned short)39544U, .rfg_value = {43U, 18U}}, {.rfg_register = (unsigned short)39548U, .rfg_value = {107U, 82U}}, {.rfg_register = (unsigned short)39552U, .rfg_value = {171U, 146U}}, {.rfg_register = (unsigned short)39556U, .rfg_value = {428U, 403U}}, {.rfg_register = (unsigned short)39560U, .rfg_value = {492U, 467U}}, {.rfg_register = (unsigned short)39564U, .rfg_value = {44U, 19U}}, {.rfg_register = (unsigned short)39568U, .rfg_value = {58U, 83U}}, {.rfg_register = (unsigned short)39572U, .rfg_value = {122U, 147U}}, {.rfg_register = (unsigned short)39576U, .rfg_value = {186U, 404U}}, {.rfg_register = (unsigned short)39580U, .rfg_value = {443U, 468U}}, {.rfg_register = (unsigned short)39584U, .rfg_value = {507U, 20U}}, {.rfg_register = (unsigned short)39588U, .rfg_value = {59U, 58U}}, {.rfg_register = (unsigned short)39592U, .rfg_value = {123U, 122U}}, {.rfg_register = (unsigned short)39596U, .rfg_value = {187U, 186U}}, {.rfg_register = (unsigned short)39600U, .rfg_value = {444U, 443U}}, {.rfg_register = (unsigned short)39604U, .rfg_value = {508U, 507U}}, {.rfg_register = (unsigned short)39608U, .rfg_value = {60U, 59U}}, {.rfg_register = (unsigned short)39612U, .rfg_value = {124U, 123U}}, {.rfg_register = (unsigned short)39616U, .rfg_value = {188U, 187U}}, {.rfg_register = (unsigned short)39620U, .rfg_value = {252U, 444U}}, {.rfg_register = (unsigned short)39624U, .rfg_value = {252U, 508U}}, {.rfg_register = (unsigned short)39628U, .rfg_value = {252U, 60U}}, {.rfg_register = (unsigned short)39632U, .rfg_value = {252U, 124U}}, {.rfg_register = (unsigned short)39636U, .rfg_value = {252U, 188U}}, {.rfg_register = (unsigned short)39640U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39644U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39648U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39652U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39656U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39660U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39664U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39668U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39672U, .rfg_value = {252U, 252U}}, {.rfg_register = (unsigned short)39676U, .rfg_value = {252U, 252U}}};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_ini_rfgain rfgain_2413[64U] = {{.rfg_register = (unsigned short)39424U}, {.rfg_register = (unsigned short)39428U, .rfg_value = {[1] = 64U}}, {.rfg_register = (unsigned short)39432U, .rfg_value = {[1] = 128U}}, {.rfg_register = (unsigned short)39436U, .rfg_value = {[1] = 385U}}, {.rfg_register = (unsigned short)39440U, .rfg_value = {[1] = 449U}}, {.rfg_register = (unsigned short)39444U, .rfg_value = {[1] = 1U}}, {.rfg_register = (unsigned short)39448U, .rfg_value = {[1] = 65U}}, {.rfg_register = (unsigned short)39452U, .rfg_value = {[1] = 129U}}, {.rfg_register = (unsigned short)39456U, .rfg_value = {[1] = 360U}}, {.rfg_register = (unsigned short)39460U, .rfg_value = {[1] = 424U}}, {.rfg_register = (unsigned short)39464U, .rfg_value = {[1] = 488U}}, {.rfg_register = (unsigned short)39468U, .rfg_value = {[1] = 40U}}, {.rfg_register = (unsigned short)39472U, .rfg_value = {[1] = 104U}}, {.rfg_register = (unsigned short)39476U, .rfg_value = {[1] = 393U}}, {.rfg_register = (unsigned short)39480U, .rfg_value = {[1] = 457U}}, {.rfg_register = (unsigned short)39484U, .rfg_value = {[1] = 9U}}, {.rfg_register = (unsigned short)39488U, .rfg_value = {[1] = 73U}}, {.rfg_register = (unsigned short)39492U, .rfg_value = {[1] = 137U}}, {.rfg_register = (unsigned short)39496U, .rfg_value = {[1] = 400U}}, {.rfg_register = (unsigned short)39500U, .rfg_value = {[1] = 464U}}, {.rfg_register = (unsigned short)39504U, .rfg_value = {[1] = 16U}}, {.rfg_register = (unsigned short)39508U, .rfg_value = {[1] = 80U}}, {.rfg_register = (unsigned short)39512U, .rfg_value = {[1] = 144U}}, {.rfg_register = (unsigned short)39516U, .rfg_value = {[1] = 401U}}, {.rfg_register = (unsigned short)39520U, .rfg_value = {[1] = 465U}}, {.rfg_register = (unsigned short)39524U, .rfg_value = {[1] = 17U}}, {.rfg_register = (unsigned short)39528U, .rfg_value = {[1] = 81U}}, {.rfg_register = (unsigned short)39532U, .rfg_value = {[1] = 145U}}, {.rfg_register = (unsigned short)39536U, .rfg_value = {[1] = 376U}}, {.rfg_register = (unsigned short)39540U, .rfg_value = {[1] = 440U}}, {.rfg_register = (unsigned short)39544U, .rfg_value = {[1] = 504U}}, {.rfg_register = (unsigned short)39548U, .rfg_value = {[1] = 56U}}, {.rfg_register = (unsigned short)39552U, .rfg_value = {[1] = 120U}}, {.rfg_register = (unsigned short)39556U, .rfg_value = {[1] = 409U}}, {.rfg_register = (unsigned short)39560U, .rfg_value = {[1] = 473U}}, {.rfg_register = (unsigned short)39564U, .rfg_value = {[1] = 25U}}, {.rfg_register = (unsigned short)39568U, .rfg_value = {[1] = 89U}}, {.rfg_register = (unsigned short)39572U, .rfg_value = {[1] = 153U}}, {.rfg_register = (unsigned short)39576U, .rfg_value = {[1] = 217U}}, {.rfg_register = (unsigned short)39580U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39584U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39588U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39592U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39596U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39600U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39604U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39608U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39612U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39616U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39620U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39624U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39628U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39632U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39636U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39640U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39644U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39648U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39652U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39656U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39660U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39664U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39668U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39672U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39676U, .rfg_value = {[1] = 249U}}};
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_ini_rfgain rfgain_2316[64U] = {{.rfg_register = (unsigned short)39424U}, {.rfg_register = (unsigned short)39428U, .rfg_value = {[1] = 64U}}, {.rfg_register = (unsigned short)39432U, .rfg_value = {[1] = 128U}}, {.rfg_register = (unsigned short)39436U, .rfg_value = {[1] = 192U}}, {.rfg_register = (unsigned short)39440U, .rfg_value = {[1] = 224U}}, {.rfg_register = (unsigned short)39444U, .rfg_value = {[1] = 224U}}, {.rfg_register = (unsigned short)39448U, .rfg_value = {[1] = 296U}}, {.rfg_register = (unsigned short)39452U, .rfg_value = {[1] = 296U}}, {.rfg_register = (unsigned short)39456U, .rfg_value = {[1] = 296U}}, {.rfg_register = (unsigned short)39460U, .rfg_value = {[1] = 360U}}, {.rfg_register = (unsigned short)39464U, .rfg_value = {[1] = 424U}}, {.rfg_register = (unsigned short)39468U, .rfg_value = {[1] = 488U}}, {.rfg_register = (unsigned short)39472U, .rfg_value = {[1] = 40U}}, {.rfg_register = (unsigned short)39476U, .rfg_value = {[1] = 104U}}, {.rfg_register = (unsigned short)39480U, .rfg_value = {[1] = 168U}}, {.rfg_register = (unsigned short)39484U, .rfg_value = {[1] = 232U}}, {.rfg_register = (unsigned short)39488U, .rfg_value = {[1] = 232U}}, {.rfg_register = (unsigned short)39492U, .rfg_value = {[1] = 304U}}, {.rfg_register = (unsigned short)39496U, .rfg_value = {[1] = 304U}}, {.rfg_register = (unsigned short)39500U, .rfg_value = {[1] = 368U}}, {.rfg_register = (unsigned short)39504U, .rfg_value = {[1] = 432U}}, {.rfg_register = (unsigned short)39508U, .rfg_value = {[1] = 496U}}, {.rfg_register = (unsigned short)39512U, .rfg_value = {[1] = 48U}}, {.rfg_register = (unsigned short)39516U, .rfg_value = {[1] = 112U}}, {.rfg_register = (unsigned short)39520U, .rfg_value = {[1] = 176U}}, {.rfg_register = (unsigned short)39524U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39528U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39532U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39536U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39540U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39544U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39548U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39552U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39556U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39560U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39564U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39568U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39572U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39576U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39580U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39584U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39588U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39592U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39596U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39600U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39604U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39608U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39612U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39616U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39620U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39624U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39628U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39632U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39636U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39640U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39644U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39648U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39652U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39656U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39660U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39664U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39668U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39672U, .rfg_value = {[1] = 240U}}, {.rfg_register = (unsigned short)39676U, .rfg_value = {[1] = 240U}}};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_ini_rfgain rfgain_5413[64U] = {{.rfg_register = (unsigned short)39424U}, {.rfg_register = (unsigned short)39428U, .rfg_value = {64U, 64U}}, {.rfg_register = (unsigned short)39432U, .rfg_value = {128U, 128U}}, {.rfg_register = (unsigned short)39436U, .rfg_value = {417U, 353U}}, {.rfg_register = (unsigned short)39440U, .rfg_value = {481U, 417U}}, {.rfg_register = (unsigned short)39444U, .rfg_value = {33U, 481U}}, {.rfg_register = (unsigned short)39448U, .rfg_value = {97U, 33U}}, {.rfg_register = (unsigned short)39452U, .rfg_value = {392U, 97U}}, {.rfg_register = (unsigned short)39456U, .rfg_value = {456U, 392U}}, {.rfg_register = (unsigned short)39460U, .rfg_value = {8U, 456U}}, {.rfg_register = (unsigned short)39464U, .rfg_value = {72U, 8U}}, {.rfg_register = (unsigned short)39468U, .rfg_value = {136U, 72U}}, {.rfg_register = (unsigned short)39472U, .rfg_value = {425U, 136U}}, {.rfg_register = (unsigned short)39476U, .rfg_value = {489U, 361U}}, {.rfg_register = (unsigned short)39480U, .rfg_value = {41U, 425U}}, {.rfg_register = (unsigned short)39484U, .rfg_value = {105U, 489U}}, {.rfg_register = (unsigned short)39488U, .rfg_value = {464U, 41U}}, {.rfg_register = (unsigned short)39492U, .rfg_value = {16U, 105U}}, {.rfg_register = (unsigned short)39496U, .rfg_value = {80U, 400U}}, {.rfg_register = (unsigned short)39500U, .rfg_value = {144U, 464U}}, {.rfg_register = (unsigned short)39504U, .rfg_value = {433U, 16U}}, {.rfg_register = (unsigned short)39508U, .rfg_value = {497U, 80U}}, {.rfg_register = (unsigned short)39512U, .rfg_value = {49U, 144U}}, {.rfg_register = (unsigned short)39516U, .rfg_value = {113U, 369U}}, {.rfg_register = (unsigned short)39520U, .rfg_value = {440U, 433U}}, {.rfg_register = (unsigned short)39524U, .rfg_value = {504U, 497U}}, {.rfg_register = (unsigned short)39528U, .rfg_value = {56U, 49U}}, {.rfg_register = (unsigned short)39532U, .rfg_value = {120U, 113U}}, {.rfg_register = (unsigned short)39536U, .rfg_value = {409U, 408U}}, {.rfg_register = (unsigned short)39540U, .rfg_value = {473U, 472U}}, {.rfg_register = (unsigned short)39544U, .rfg_value = {25U, 24U}}, {.rfg_register = (unsigned short)39548U, .rfg_value = {89U, 88U}}, {.rfg_register = (unsigned short)39552U, .rfg_value = {153U, 152U}}, {.rfg_register = (unsigned short)39556U, .rfg_value = {217U, 377U}}, {.rfg_register = (unsigned short)39560U, .rfg_value = {249U, 441U}}, {.rfg_register = (unsigned short)39564U, .rfg_value = {249U, 505U}}, {.rfg_register = (unsigned short)39568U, .rfg_value = {249U, 57U}}, {.rfg_register = (unsigned short)39572U, .rfg_value = {249U, 121U}}, {.rfg_register = (unsigned short)39576U, .rfg_value = {249U, 185U}}, {.rfg_register = (unsigned short)39580U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39584U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39588U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39592U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39596U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39600U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39604U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39608U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39612U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39616U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39620U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39624U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39628U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39632U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39636U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39640U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39644U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39648U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39652U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39656U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39660U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39664U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39668U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39672U, .rfg_value = {249U, 249U}}, {.rfg_register = (unsigned short)39676U, .rfg_value = {249U, 249U}}};
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_ini_rfgain rfgain_2425[64U] = {{.rfg_register = (unsigned short)39424U}, {.rfg_register = (unsigned short)39428U, .rfg_value = {[1] = 64U}}, {.rfg_register = (unsigned short)39432U, .rfg_value = {[1] = 128U}}, {.rfg_register = (unsigned short)39436U, .rfg_value = {[1] = 385U}}, {.rfg_register = (unsigned short)39440U, .rfg_value = {[1] = 449U}}, {.rfg_register = (unsigned short)39444U, .rfg_value = {[1] = 1U}}, {.rfg_register = (unsigned short)39448U, .rfg_value = {[1] = 65U}}, {.rfg_register = (unsigned short)39452U, .rfg_value = {[1] = 129U}}, {.rfg_register = (unsigned short)39456U, .rfg_value = {[1] = 392U}}, {.rfg_register = (unsigned short)39460U, .rfg_value = {[1] = 456U}}, {.rfg_register = (unsigned short)39464U, .rfg_value = {[1] = 8U}}, {.rfg_register = (unsigned short)39468U, .rfg_value = {[1] = 72U}}, {.rfg_register = (unsigned short)39472U, .rfg_value = {[1] = 136U}}, {.rfg_register = (unsigned short)39476U, .rfg_value = {[1] = 393U}}, {.rfg_register = (unsigned short)39480U, .rfg_value = {[1] = 457U}}, {.rfg_register = (unsigned short)39484U, .rfg_value = {[1] = 9U}}, {.rfg_register = (unsigned short)39488U, .rfg_value = {[1] = 73U}}, {.rfg_register = (unsigned short)39492U, .rfg_value = {[1] = 137U}}, {.rfg_register = (unsigned short)39496U, .rfg_value = {[1] = 432U}}, {.rfg_register = (unsigned short)39500U, .rfg_value = {[1] = 496U}}, {.rfg_register = (unsigned short)39504U, .rfg_value = {[1] = 48U}}, {.rfg_register = (unsigned short)39508U, .rfg_value = {[1] = 112U}}, {.rfg_register = (unsigned short)39512U, .rfg_value = {[1] = 369U}}, {.rfg_register = (unsigned short)39516U, .rfg_value = {[1] = 433U}}, {.rfg_register = (unsigned short)39520U, .rfg_value = {[1] = 497U}}, {.rfg_register = (unsigned short)39524U, .rfg_value = {[1] = 49U}}, {.rfg_register = (unsigned short)39528U, .rfg_value = {[1] = 113U}}, {.rfg_register = (unsigned short)39532U, .rfg_value = {[1] = 440U}}, {.rfg_register = (unsigned short)39536U, .rfg_value = {[1] = 504U}}, {.rfg_register = (unsigned short)39540U, .rfg_value = {[1] = 56U}}, {.rfg_register = (unsigned short)39544U, .rfg_value = {[1] = 120U}}, {.rfg_register = (unsigned short)39548U, .rfg_value = {[1] = 184U}}, {.rfg_register = (unsigned short)39552U, .rfg_value = {[1] = 441U}}, {.rfg_register = (unsigned short)39556U, .rfg_value = {[1] = 505U}}, {.rfg_register = (unsigned short)39560U, .rfg_value = {[1] = 57U}}, {.rfg_register = (unsigned short)39564U, .rfg_value = {[1] = 121U}}, {.rfg_register = (unsigned short)39568U, .rfg_value = {[1] = 185U}}, {.rfg_register = (unsigned short)39572U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39576U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39580U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39584U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39588U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39592U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39596U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39600U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39604U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39608U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39612U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39616U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39620U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39624U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39628U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39632U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39636U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39640U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39644U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39648U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39652U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39656U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39660U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39664U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39668U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39672U, .rfg_value = {[1] = 249U}}, {.rfg_register = (unsigned short)39676U, .rfg_value = {[1] = 249U}}};
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_gain_opt rfgain_opt_5111 = {.go_default = (unsigned char)4U, .go_steps_count = (unsigned char)9U, .go_step = {{.gos_param = {(signed char)4, (signed char)1, (signed char)1, (signed char)1}, .gos_gain = (signed char)6}, {.gos_param = {(signed char)4, [2] = (signed char)1, (signed char)1}, .gos_gain = (signed char)4}, {.gos_param = {(signed char)3, (signed char)1, (signed char)1, (signed char)1}, .gos_gain = (signed char)3}, {.gos_param = {(signed char)4, [3] = (signed char)1}, .gos_gain = (signed char)1}, {.gos_param = {(signed char)4, (signed char)1, (signed char)1}}, {.gos_param = {(signed char)4, [2] = (signed char)1}, .gos_gain = (signed char)(-2)}, {.gos_param = {(signed char)3, (signed char)1, (signed char)1}, .gos_gain = (signed char)(-3)}, {.gos_param = {(signed char)4}, .gos_gain = (signed char)(-4)}, {.gos_param = {(signed char)2, (signed char)1, (signed char)1}, .gos_gain = (signed char)(-6)}}};
#line 520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfgain.h"
static struct ath5k_gain_opt rfgain_opt_5112 = {.go_default = (unsigned char)1U, .go_steps_count = (unsigned char)8U, .go_step = {{.gos_param = {(signed char)3}, .gos_gain = (signed char)6}, {.gos_param = {(signed char)2}}, {.gos_param = {(signed char)1}, .gos_gain = (signed char)(-3)}, {.gos_gain = (signed char)(-6)}, {.gos_param = {[1] = (signed char)1, (signed char)1}, .gos_gain = (signed char)(-8)}, {.gos_param = {[1] = (signed char)1, (signed char)1, [4] = (signed char)1, (signed char)1}, .gos_gain = (signed char)(-10)}, {.gos_param = {[1] = (signed char)1, [3] = (signed char)1, (signed char)1, (signed char)1}, .gos_gain = (signed char)(-13)}, {.gos_param = {[1] = (signed char)1, [3] = (signed char)1, (signed char)1, [6] = (signed char)1}, .gos_gain = (signed char)(-16)}}};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/regd.h"
#line 266 
u32 ath_regd_get_band_ctl(struct ath_regulatory *, enum nl80211_band);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
u16 ath5k_hw_radio_revision(struct ath5k_hw *ah, enum nl80211_band band)
{
  #line 86 
  unsigned int i;
  #line 87 
  u32 srev;
  #line 88 
  u16 ret;
  #line 93 
  switch ((unsigned int)band) {
    #line 94 
    case (unsigned int)0: 
                          #line 94 
    ;
    #line 95 
    ath5k_hw_reg_write(ah,16391U,(unsigned short)38912);
    #line 96 
    break;
    #line 97 
    case (unsigned int)1: 
                          #line 97 
    ;
    #line 98 
    ath5k_hw_reg_write(ah,7U,(unsigned short)38912);
    #line 99 
    break;
    #line 100 
    default: 
             #line 100 
    ;
    #line 101 
    return (unsigned short)0U;
  }
  #line 104 
  usleep_range(2000UL,2500UL);
  #line 107 
  ath5k_hw_reg_write(ah,7190U,(unsigned short)39120);
  #line 109 
  i = 0U;
  #line 109 
  while (i <= 7U) {
    #line 110 
    ath5k_hw_reg_write(ah,65536U,(unsigned short)39040);
    #line 109 
    i ++;
  }
  #line 112 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 113 
    srev = (ath5k_hw_reg_read(ah,(unsigned short)39936) >> 28) & 15U;
    #line 114 
    ret = (unsigned short)((unsigned int)((unsigned short)ath5k_hw_bitswap(srev,4U)) + 1U);
  }
  else {
    #line 116 
    srev = (ath5k_hw_reg_read(ah,(unsigned short)39936) >> 24) & 255U;
    #line 117 
    ret = (unsigned short)ath5k_hw_bitswap(((srev >> 4) & 15U) | ((srev << 4) & 255U),8U);
  }
  #line 122 
  ath5k_hw_reg_write(ah,7U,(unsigned short)38912);
  #line 124 
  return ret;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
bool ath5k_channel_ok(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 138 
  u16 freq = (unsigned short)channel->center_freq;
  #line 141 
  if (channel->band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 142 
    if ((int)ah->ah_capabilities.cap_range.range_2ghz_min <= (int)freq && (int)ah->ah_capabilities.cap_range.range_2ghz_max >= (int)freq) 
      #line 144 
      return (_Bool)1;
  }
  else 
    #line 145 
    if (channel->band == (unsigned int)NL80211_BAND_5GHZ) 
      #line 146 
      if ((int)ah->ah_capabilities.cap_range.range_5ghz_min <= (int)freq && (int)ah->ah_capabilities.cap_range.range_5ghz_max >= (int)freq) 
        #line 148 
        return (_Bool)1;
  #line 150 
  return (_Bool)0;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
bool ath5k_hw_chan_has_spur_noise(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 162 
  u8 refclk_freq;
  #line 164 
  if (((ah->ah_radio == (unsigned int)AR5K_RF5112 || ah->ah_radio == (unsigned int)AR5K_RF5413) || ah->ah_radio == (unsigned int)AR5K_RF2413) || (unsigned int)ah->ah_mac_version == 15U) 
    #line 168 
    refclk_freq = (unsigned char)40U; else 
                                           #line 170 
                                           refclk_freq = (unsigned char)32U;
  #line 172 
  if (channel->center_freq % (unsigned int)refclk_freq != 0U && channel->center_freq % (unsigned int)refclk_freq + 4294967286U > 12U) 
    #line 175 
    return (_Bool)1; else 
                          #line 177 
                          return (_Bool)0;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static unsigned int ath5k_hw_rfb_op(struct ath5k_hw *ah, struct ath5k_rf_reg *rf_regs, u32 val, u8 reg_id, bool set)
{
  #line 197 
  u8 offset;
  #line 197 
  u8 bank;
  #line 197 
  u8 num_bits;
  #line 197 
  u8 col;
  #line 197 
  u8 position;
  #line 198 
  u16 entry;
  #line 199 
  u32 mask;
  #line 199 
  u32 data;
  #line 199 
  u32 last_bit;
  #line 199 
  u32 bits_shifted;
  #line 199 
  u32 first_bit;
  #line 200 
  u32 *rfb;
  #line 201 
  s32 bits_left;
  #line 202 
  int i;
  #line 196 
  struct ath5k_rf_reg *rfreg = (struct ath5k_rf_reg *)0;
  #line 204 
  data = 0U;
  #line 205 
  rfb = ah->ah_rf_banks;
  #line 207 
  i = 0;
  #line 207 
  while ((unsigned long)i < ah->ah_rf_regs_count) {
    #line 208 
    if ((int)(rf_regs + (unsigned long)i)->index == (int)reg_id) {
      #line 209 
      rfreg = rf_regs + (unsigned long)i;
      #line 210 
      break;
    }
    #line 207 
    i ++;
  }
  #line 214 
  if (rfb == (u32 *)0U || rfreg == (struct ath5k_rf_reg *)0) {
    #line 215 
    printk((char *)"\001",(char *)"ath5k_hw_rfb_op");
    #line 217 
    return 0U;
  }
  #line 220 
  bank = rfreg->bank;
  #line 221 
  num_bits = rfreg->field.len;
  #line 222 
  first_bit = (unsigned int)rfreg->field.pos;
  #line 223 
  col = rfreg->field.col;
  #line 229 
  offset = ah->ah_offset[(int)bank];
  #line 232 
  if (((unsigned int)col > 3U || (unsigned int)num_bits > 32U) || (unsigned int)num_bits + first_bit > 319U) {
    #line 233 
    printk((char *)"\001",(char *)"ath5k_hw_rfb_op",(int)offset);
    #line 234 
    return 0U;
  }
  #line 237 
  entry = (unsigned short)((int)((unsigned short)((first_bit + 4294967295U) / 8U)) + (int)((unsigned short)offset));
  #line 238 
  position = (unsigned char)(((unsigned int)((unsigned char)first_bit) + 255U) & 7U);
  #line 240 
  if ((int)set != 0) 
                     #line 241 
                     data = ath5k_hw_bitswap(val,(unsigned int)num_bits);
  #line 243 
  bits_shifted = 0U;
  #line 243 
  bits_left = (int)num_bits;
  #line 243 
  while (bits_left > 0) {
    {
      #line 246 
      int tmp;
      #line 246 
      if (8 < (int)position + bits_left) 
                                         #line 246 
                                         tmp = 8; else 
                                                       #line 246 
                                                       tmp = (int)position + bits_left;
      #line 246 
      last_bit = (unsigned int)tmp;
      #line 249 
      mask = (unsigned int)((((1 << last_bit) + -1) ^ ((1 << (int)position) + -1)) << (int)col * 8);
      #line 252 
      if ((int)set != 0) {
        #line 253 
        *(rfb + (unsigned long)entry) &= ~ mask;
        #line 254 
        *(rfb + (unsigned long)entry) |= ((data << (int)position) << (int)col * 8) & mask;
        #line 255 
        data >>= 8 - (int)position;
      }
      else {
        #line 257 
        data = ((((*(rfb + (unsigned long)entry) & mask) >> (int)col * 8) >> (int)position) << bits_shifted) | data;
        #line 259 
        bits_shifted = (last_bit - (unsigned int)position) + bits_shifted;
      }
      #line 262 
      bits_left -= 8 - (int)position;
    }
    #line 243 
    position = (unsigned char)0U;
    #line 244 
    entry = (u16)((int)entry + 1);
  }
  #line 265 
  if ((int)set == 0) 
                     #line 265 
                     data = ath5k_hw_bitswap(data,(unsigned int)num_bits); else 
                                                                    #line 265 
                                                                    data = 1U;
  #line 267 
  return data;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
__inline static int ath5k_hw_write_ofdm_timings(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 289 
  u32 coef_scaled;
  #line 289 
  u32 coef_exp;
  #line 289 
  u32 coef_man;
  #line 290 
  u32 ds_coef_exp;
  #line 290 
  u32 ds_coef_man;
  #line 290 
  u32 clock;
  #line 292 
  if ((long)(ah->ah_version != (unsigned int)AR5K_AR5212) != 0L || (long)((unsigned int)channel->hw_value == 1U) != 0L) {
    #line 293 
    ldv_inline_asm();
    #line 294 
    ldv_inline_asm();
    #line 295 
    ldv_inline_asm();
    #line 292 
    ;
  }
  #line 299 
  switch ((int)ah->ah_bwmode) {
    #line 300 
    case 3: 
            #line 300 
    ;
    #line 301 
    clock = 80U;
    #line 302 
    break;
    #line 303 
    case 2: 
            #line 303 
    ;
    #line 304 
    clock = 20U;
    #line 305 
    break;
    #line 306 
    case 1: 
            #line 306 
    ;
    #line 307 
    clock = 10U;
    #line 308 
    break;
    #line 309 
    default: 
             #line 309 
    ;
    #line 310 
    clock = 40U;
    #line 311 
    break;
  }
  #line 313 
  coef_scaled = ((clock * 83886080U) / 2U) / channel->center_freq;
  #line 317 
  if (0 != 0) {
    #line 317 
    unsigned int tmp_23;
    #line 317 
    unsigned int tmp_55;
    #line 317 
    unsigned int tmp_56;
    #line 317 
    unsigned int tmp_24;
    #line 317 
    unsigned int tmp_25;
    #line 317 
    unsigned int tmp_57;
    #line 317 
    unsigned int tmp_58;
    #line 317 
    unsigned int tmp_26;
    #line 317 
    unsigned int tmp_27;
    #line 317 
    unsigned int tmp_59;
    #line 317 
    unsigned int tmp_60;
    #line 317 
    unsigned int tmp_28;
    #line 317 
    unsigned int tmp_29;
    #line 317 
    unsigned int tmp_30;
    #line 317 
    unsigned int tmp;
    #line 317 
    unsigned int tmp_31;
    #line 317 
    unsigned int tmp_32;
    #line 317 
    unsigned int tmp_0;
    #line 317 
    unsigned int tmp_1;
    #line 317 
    unsigned int tmp_33;
    #line 317 
    unsigned int tmp_34;
    #line 317 
    unsigned int tmp_2;
    #line 317 
    unsigned int tmp_3;
    #line 317 
    unsigned int tmp_35;
    #line 317 
    unsigned int tmp_36;
    #line 317 
    unsigned int tmp_4;
    #line 317 
    unsigned int tmp_5;
    #line 317 
    unsigned int tmp_37;
    #line 317 
    unsigned int tmp_38;
    #line 317 
    unsigned int tmp_6;
    #line 317 
    unsigned int tmp_7;
    #line 317 
    unsigned int tmp_39;
    #line 317 
    unsigned int tmp_40;
    #line 317 
    unsigned int tmp_8;
    #line 317 
    unsigned int tmp_9;
    #line 317 
    unsigned int tmp_41;
    #line 317 
    unsigned int tmp_42;
    #line 317 
    unsigned int tmp_10;
    #line 317 
    unsigned int tmp_11;
    #line 317 
    unsigned int tmp_43;
    #line 317 
    unsigned int tmp_44;
    #line 317 
    unsigned int tmp_12;
    #line 317 
    unsigned int tmp_13;
    #line 317 
    unsigned int tmp_45;
    #line 317 
    unsigned int tmp_46;
    #line 317 
    unsigned int tmp_14;
    #line 317 
    unsigned int tmp_15;
    #line 317 
    unsigned int tmp_47;
    #line 317 
    unsigned int tmp_48;
    #line 317 
    unsigned int tmp_16;
    #line 317 
    unsigned int tmp_17;
    #line 317 
    unsigned int tmp_49;
    #line 317 
    unsigned int tmp_50;
    #line 317 
    unsigned int tmp_18;
    #line 317 
    unsigned int tmp_19;
    #line 317 
    unsigned int tmp_51;
    #line 317 
    unsigned int tmp_52;
    #line 317 
    unsigned int tmp_20;
    #line 317 
    unsigned int tmp_21;
    #line 317 
    unsigned int tmp_53;
    #line 317 
    unsigned int tmp_54;
    #line 317 
    unsigned int tmp_22;
    #line 317 
    unsigned int tmp_61;
    #line 317 
    if (coef_scaled > 1U) {
      #line 317 
      if (((unsigned long long)coef_scaled & 9223372036854775808ULL) == 0ULL) {
        #line 317 
        if (((unsigned long long)coef_scaled & 4611686018427387904ULL) == 0ULL) {
          #line 317 
          if (((unsigned long long)coef_scaled & 2305843009213693952ULL) == 0ULL) {
            #line 317 
            if (((unsigned long long)coef_scaled & 1152921504606846976ULL) == 0ULL) {
              #line 317 
              if (((unsigned long long)coef_scaled & 576460752303423488ULL) == 0ULL) {
                #line 317 
                if (((unsigned long long)coef_scaled & 288230376151711744ULL) == 0ULL) {
                  #line 317 
                  if (((unsigned long long)coef_scaled & 144115188075855872ULL) == 0ULL) {
                    #line 317 
                    if (((unsigned long long)coef_scaled & 72057594037927936ULL) == 0ULL) {
                      #line 317 
                      if (((unsigned long long)coef_scaled & 36028797018963968ULL) == 0ULL) {
                        #line 317 
                        if (((unsigned long long)coef_scaled & 18014398509481984ULL) == 0ULL) {
                          #line 317 
                          if (((unsigned long long)coef_scaled & 9007199254740992ULL) == 0ULL) {
                            #line 317 
                            if (((unsigned long long)coef_scaled & 4503599627370496ULL) == 0ULL) {
                              #line 317 
                              if (((unsigned long long)coef_scaled & 2251799813685248ULL) == 0ULL) {
                                #line 317 
                                if (((unsigned long long)coef_scaled & 1125899906842624ULL) == 0ULL) {
                                  #line 317 
                                  if (((unsigned long long)coef_scaled & 562949953421312ULL) == 0ULL) {
                                    #line 317 
                                    if (((unsigned long long)coef_scaled & 281474976710656ULL) == 0ULL) {
                                      #line 317 
                                      if (((unsigned long long)coef_scaled & 140737488355328ULL) == 0ULL) {
                                        #line 317 
                                        if (((unsigned long long)coef_scaled & 70368744177664ULL) == 0ULL) {
                                          #line 317 
                                          if (((unsigned long long)coef_scaled & 35184372088832ULL) == 0ULL) {
                                            #line 317 
                                            if (((unsigned long long)coef_scaled & 17592186044416ULL) == 0ULL) {
                                              #line 317 
                                              if (((unsigned long long)coef_scaled & 8796093022208ULL) == 0ULL) {
                                                #line 317 
                                                if (((unsigned long long)coef_scaled & 4398046511104ULL) == 0ULL) {
                                                  #line 317 
                                                  if (((unsigned long long)coef_scaled & 2199023255552ULL) == 0ULL) {
                                                    #line 317 
                                                    if (((unsigned long long)coef_scaled & 1099511627776ULL) == 0ULL) {
                                                      #line 317 
                                                      if (((unsigned long long)coef_scaled & 549755813888ULL) == 0ULL) {
                                                        #line 317 
                                                        if (((unsigned long long)coef_scaled & 274877906944ULL) == 0ULL) {
                                                          #line 317 
                                                          if (((unsigned long long)coef_scaled & 137438953472ULL) == 0ULL) {
                                                            #line 317 
                                                            if (((unsigned long long)coef_scaled & 68719476736ULL) == 0ULL) {
                                                              #line 317 
                                                              if (((unsigned long long)coef_scaled & 34359738368ULL) == 0ULL) {
                                                                #line 317 
                                                                if (((unsigned long long)coef_scaled & 17179869184ULL) == 0ULL) {
                                                                  #line 317 
                                                                  if (
                                                                    ((unsigned long long)coef_scaled & 8589934592ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 4294967296ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 2147483648ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 1073741824ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 536870912ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 268435456ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 134217728ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 67108864ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 33554432ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 16777216ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 8388608ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 4194304ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 2097152ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 1048576ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 524288ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 262144ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 131072ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 65536ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 32768ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 16384ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 8192ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 4096ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 2048ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 1024ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 512ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 256ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 128ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 64ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 32ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 16ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 8ULL) == 0ULL) {
                                                                    #line 317 
                                                                    if (
                                                                    ((unsigned long long)coef_scaled & 4ULL) != 0ULL) 
                                                                    #line 317 
                                                                    tmp = 2U; else 
                                                                    #line 317 
                                                                    tmp = 1U;
                                                                    #line 317 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_0 = 3U;
                                                                    #line 317 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_1 = 4U;
                                                                    #line 317 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_2 = 5U;
                                                                    #line 317 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_3 = 6U;
                                                                    #line 317 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_4 = 7U;
                                                                    #line 317 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_5 = 8U;
                                                                    #line 317 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_6 = 9U;
                                                                    #line 317 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_7 = 10U;
                                                                    #line 317 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_8 = 11U;
                                                                    #line 317 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_9 = 12U;
                                                                    #line 317 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_10 = 13U;
                                                                    #line 317 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_11 = 14U;
                                                                    #line 317 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_12 = 15U;
                                                                    #line 317 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_13 = 16U;
                                                                    #line 317 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_14 = 17U;
                                                                    #line 317 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_15 = 18U;
                                                                    #line 317 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_16 = 19U;
                                                                    #line 317 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_17 = 20U;
                                                                    #line 317 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_18 = 21U;
                                                                    #line 317 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_19 = 22U;
                                                                    #line 317 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_20 = 23U;
                                                                    #line 317 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_21 = 24U;
                                                                    #line 317 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_22 = 25U;
                                                                    #line 317 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_23 = 26U;
                                                                    #line 317 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_24 = 27U;
                                                                    #line 317 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_25 = 28U;
                                                                    #line 317 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_26 = 29U;
                                                                    #line 317 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_27 = 30U;
                                                                    #line 317 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_28 = 31U;
                                                                    #line 317 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 317 
                                                                    tmp_29 = 32U;
                                                                    #line 317 
                                                                    tmp_30 = tmp_29;
                                                                  }
                                                                  else 
                                                                    #line 317 
                                                                    tmp_30 = 33U;
                                                                  #line 317 
                                                                  tmp_31 = tmp_30;
                                                                }
                                                                else 
                                                                  #line 317 
                                                                  tmp_31 = 34U;
                                                                #line 317 
                                                                tmp_32 = tmp_31;
                                                              }
                                                              else 
                                                                   #line 317 
                                                                   tmp_32 = 35U;
                                                              #line 317 
                                                              tmp_33 = tmp_32;
                                                            }
                                                            else 
                                                                 #line 317 
                                                                 tmp_33 = 36U;
                                                            #line 317 
                                                            tmp_34 = tmp_33;
                                                          }
                                                          else 
                                                               #line 317 
                                                               tmp_34 = 37U;
                                                          #line 317 
                                                          tmp_35 = tmp_34;
                                                        }
                                                        else 
                                                             #line 317 
                                                             tmp_35 = 38U;
                                                        #line 317 
                                                        tmp_36 = tmp_35;
                                                      }
                                                      else 
                                                           #line 317 
                                                           tmp_36 = 39U;
                                                      #line 317 
                                                      tmp_37 = tmp_36;
                                                    }
                                                    else 
                                                         #line 317 
                                                         tmp_37 = 40U;
                                                    #line 317 
                                                    tmp_38 = tmp_37;
                                                  }
                                                  else 
                                                       #line 317 
                                                       tmp_38 = 41U;
                                                  #line 317 
                                                  tmp_39 = tmp_38;
                                                }
                                                else 
                                                     #line 317 
                                                     tmp_39 = 42U;
                                                #line 317 
                                                tmp_40 = tmp_39;
                                              }
                                              else 
                                                   #line 317 
                                                   tmp_40 = 43U;
                                              #line 317 
                                              tmp_41 = tmp_40;
                                            }
                                            else 
                                                 #line 317 
                                                 tmp_41 = 44U;
                                            #line 317 
                                            tmp_42 = tmp_41;
                                          }
                                          else 
                                               #line 317 
                                               tmp_42 = 45U;
                                          #line 317 
                                          tmp_43 = tmp_42;
                                        }
                                        else 
                                             #line 317 
                                             tmp_43 = 46U;
                                        #line 317 
                                        tmp_44 = tmp_43;
                                      }
                                      else 
                                           #line 317 
                                           tmp_44 = 47U;
                                      #line 317 
                                      tmp_45 = tmp_44;
                                    }
                                    else 
                                         #line 317 
                                         tmp_45 = 48U;
                                    #line 317 
                                    tmp_46 = tmp_45;
                                  }
                                  else 
                                       #line 317 
                                       tmp_46 = 49U;
                                  #line 317 
                                  tmp_47 = tmp_46;
                                }
                                else 
                                     #line 317 
                                     tmp_47 = 50U;
                                #line 317 
                                tmp_48 = tmp_47;
                              }
                              else 
                                   #line 317 
                                   tmp_48 = 51U;
                              #line 317 
                              tmp_49 = tmp_48;
                            }
                            else 
                                 #line 317 
                                 tmp_49 = 52U;
                            #line 317 
                            tmp_50 = tmp_49;
                          }
                          else 
                               #line 317 
                               tmp_50 = 53U;
                          #line 317 
                          tmp_51 = tmp_50;
                        }
                        else 
                             #line 317 
                             tmp_51 = 54U;
                        #line 317 
                        tmp_52 = tmp_51;
                      }
                      else 
                           #line 317 
                           tmp_52 = 55U;
                      #line 317 
                      tmp_53 = tmp_52;
                    }
                    else 
                         #line 317 
                         tmp_53 = 56U;
                    #line 317 
                    tmp_54 = tmp_53;
                  }
                  else 
                       #line 317 
                       tmp_54 = 57U;
                  #line 317 
                  tmp_55 = tmp_54;
                }
                else 
                     #line 317 
                     tmp_55 = 58U;
                #line 317 
                tmp_56 = tmp_55;
              }
              else 
                   #line 317 
                   tmp_56 = 59U;
              #line 317 
              tmp_57 = tmp_56;
            }
            else 
                 #line 317 
                 tmp_57 = 60U;
            #line 317 
            tmp_58 = tmp_57;
          }
          else 
               #line 317 
               tmp_58 = 61U;
          #line 317 
          tmp_59 = tmp_58;
        }
        else 
             #line 317 
             tmp_59 = 62U;
        #line 317 
        tmp_60 = tmp_59;
      }
      else 
           #line 317 
           tmp_60 = 63U;
      #line 317 
      tmp_61 = tmp_60;
    }
    else 
         #line 317 
         tmp_61 = 0U;
    #line 317 
    coef_exp = tmp_61;
  }
  else {
    #line 317 
    coef_exp = (unsigned int)__ilog2_u32(coef_scaled);
  }
  #line 320 
  if (coef_scaled == 0U || coef_exp == 0U) 
                                           #line 321 
                                           return -22;
  #line 324 
  coef_exp = 38U - coef_exp;
  #line 329 
  coef_man = (unsigned int)(1 << (23U - coef_exp)) + coef_scaled;
  #line 334 
  ds_coef_man = coef_man >> (24U - coef_exp);
  #line 335 
  ds_coef_exp = coef_exp + 4294967280U;
  #line 337 
  ;
  #line 337 
  ;
  #line 337 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38932) & 131071U) | (ds_coef_man << 17),(unsigned short)38932);
  #line 339 
  ;
  #line 339 
  ;
  #line 339 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38932) & 4294844415U) | ((ds_coef_exp << 13) & 122880U),(unsigned short)38932);
  #line 342 
  return 0;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_phy_disable(struct ath5k_hw *ah)
{
  #line 352 
  ath5k_hw_reg_write(ah,2U,(unsigned short)38940);
  #line 354 
  return 0;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_hw_wait_for_synth(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 370 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 371 
    u32 delay;
    #line 372 
    delay = ath5k_hw_reg_read(ah,(unsigned short)39188) & 16383U;
    #line 374 
    if ((unsigned int)channel->hw_value == 1U) 
                                               #line 374 
                                               delay = (delay << 2) / 22U; else 
                                                                    #line 374 
                                                                    delay /= 10U;
    #line 376 
    if ((unsigned int)ah->ah_bwmode == 2U) 
                                           #line 377 
                                           delay <<= 1;
    #line 378 
    if ((unsigned int)ah->ah_bwmode == 1U) 
                                           #line 379 
                                           delay <<= 2;
    #line 382 
    usleep_range((unsigned long)(delay + 100U),(unsigned long)((delay + 50U) * 2U));
  }
  else 
       #line 384 
       usleep_range(1000UL,1500UL);
  #line 385 
  return;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_rfgain_opt_init(struct ath5k_hw *ah)
{
  #line 423 
  switch ((unsigned int)ah->ah_radio) {
    #line 424 
    case (unsigned int)1: 
                          #line 424 
    ;
    #line 425 
    ah->ah_gain.g_step_idx = rfgain_opt_5111.go_default;
    #line 426 
    ah->ah_gain.g_low = (unsigned char)20U;
    #line 427 
    ah->ah_gain.g_high = (unsigned char)35U;
    #line 428 
    ah->ah_gain.g_state = (unsigned char)1U;
    #line 429 
    break;
    #line 430 
    case (unsigned int)2: 
                          #line 430 
    ;
    #line 431 
    ah->ah_gain.g_step_idx = rfgain_opt_5112.go_default;
    #line 432 
    ah->ah_gain.g_low = (unsigned char)20U;
    #line 433 
    ah->ah_gain.g_high = (unsigned char)85U;
    #line 434 
    ah->ah_gain.g_state = (unsigned char)1U;
    #line 435 
    break;
    #line 436 
    default: 
             #line 436 
    ;
    #line 437 
    return -22;
  }
  #line 440 
  return 0;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_hw_request_rfgain_probe(struct ath5k_hw *ah)
{
  #line 462 
  if ((unsigned int)ah->ah_gain.g_state != 1U) 
                                               #line 463 
                                               return;
  #line 467 
  ath5k_hw_reg_write(ah,(unsigned int)(((((int)ah->ah_txpower.txp_ofdm + -4) << 9) & 32256) | 32768),(unsigned short)39216);
  #line 471 
  ah->ah_gain.g_state = (unsigned char)2U;
  #line 472 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static u32 ath5k_hw_rf_gainf_corr(struct ath5k_hw *ah)
{
  #line 485 
  u32 mix;
  #line 485 
  u32 step;
  #line 486 
  struct ath5k_gain_opt *go;
  #line 487 
  struct ath5k_gain_opt_step *g_step;
  #line 488 
  struct ath5k_rf_reg *rf_regs;
  #line 491 
  if (ah->ah_radio != (unsigned int)AR5K_RF5112 || (unsigned int)ah->ah_radio_5ghz_revision <= 53U) 
    #line 493 
    return 0U;
  #line 495 
  go = & rfgain_opt_5112;
  #line 496 
  rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5112a);
  #line 497 
  ah->ah_rf_regs_count = 35UL;
  #line 499 
  g_step = & go->go_step[(int)ah->ah_gain.g_step_idx];
  #line 501 
  if (ah->ah_rf_banks == (u32 *)0U) 
                                    #line 502 
                                    return 0U;
  #line 504 
  ah->ah_gain.g_f_corr = (unsigned char)0U;
  #line 507 
  if (ath5k_hw_rfb_op(ah,rf_regs,0U,(unsigned char)38,(_Bool)0) != 1U) 
    #line 508 
    return 0U;
  #line 511 
  step = ath5k_hw_rfb_op(ah,rf_regs,0U,(unsigned char)40,(_Bool)0);
  #line 514 
  mix = (unsigned int)g_step->gos_param[0];
  #line 516 
  switch (mix) {
    #line 517 
    case (u32)3: 
                 #line 517 
    ;
    #line 518 
    ah->ah_gain.g_f_corr = (unsigned char)((unsigned int)((unsigned char)step) * 2U);
    #line 519 
    break;
    #line 520 
    case (u32)2: 
                 #line 520 
    ;
    #line 521 
    ah->ah_gain.g_f_corr = (unsigned char)((unsigned int)((unsigned char)(step + 4294967291U)) * 2U);
    #line 522 
    break;
    #line 523 
    case (u32)1: 
                 #line 523 
    ;
    #line 524 
    ah->ah_gain.g_f_corr = (unsigned char)step;
    #line 525 
    break;
    #line 526 
    default: 
             #line 526 
    ;
    #line 527 
    ah->ah_gain.g_f_corr = (unsigned char)0U;
    #line 528 
    break;
  }
  #line 531 
  return (unsigned int)ah->ah_gain.g_f_corr;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static bool ath5k_hw_rf_check_gainf_readback(struct ath5k_hw *ah)
{
  #line 548 
  struct ath5k_rf_reg *rf_regs;
  #line 549 
  u32 step;
  #line 549 
  u32 mix_ovr;
  #line 549 
  u32 level[4U];
  #line 551 
  if (ah->ah_rf_banks == (u32 *)0U) 
                                    #line 552 
                                    return (_Bool)0;
  #line 554 
  if (ah->ah_radio == (unsigned int)AR5K_RF5111) {
    #line 567 
    unsigned int tmp;
    #line 569 
    unsigned int tmp_0;
    #line 556 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5111);
    #line 557 
    ah->ah_rf_regs_count = 16UL;
    #line 559 
    step = ath5k_hw_rfb_op(ah,rf_regs,0U,(unsigned char)34,(_Bool)0);
    #line 562 
    level[0] = 0U;
    #line 563 
    if (step != 63U) 
                     #line 563 
                     level[1] = step + 4U; else 
                                                #line 563 
                                                level[1] = 50U;
    #line 564 
    if (step == 63U) 
                     #line 564 
                     level[2] = level[0]; else 
                                               #line 564 
                                               level[2] = 64U;
    #line 565 
    level[3] = level[2] + 50U;
    #line 567 
    if (step == 63U) 
                     #line 567 
                     tmp = 15U; else 
                                     #line 567 
                                     tmp = 251U;
    #line 567 
    ah->ah_gain.g_high = (unsigned char)((unsigned int)((unsigned char)level[3]) - tmp);
    #line 569 
    if (step == 63U) 
                     #line 569 
                     tmp_0 = 20U; else 
                                       #line 569 
                                       tmp_0 = 0U;
    #line 569 
    ah->ah_gain.g_low = (unsigned char)((unsigned int)((unsigned char)level[0]) + tmp_0);
  }
  else {
    #line 573 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5112);
    #line 574 
    ah->ah_rf_regs_count = 25UL;
    #line 576 
    mix_ovr = ath5k_hw_rfb_op(ah,rf_regs,0U,(unsigned char)38,(_Bool)0);
    #line 579 
    level[2] = 0U;
    #line 579 
    level[0] = level[2];
    #line 581 
    if (mix_ovr == 1U) {
      #line 582 
      level[3] = 83U;
      #line 582 
      level[1] = level[3];
    }
    else {
      #line 584 
      level[3] = 107U;
      #line 584 
      level[1] = level[3];
      #line 585 
      ah->ah_gain.g_high = (unsigned char)55U;
    }
  }
  #line 590 
  return (_Bool)(((unsigned int)ah->ah_gain.g_current >= level[0] && (unsigned int)ah->ah_gain.g_current <= level[1] || (unsigned int)ah->ah_gain.g_current >= level[2] && (unsigned int)ah->ah_gain.g_current <= level[3]) != 0);
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static s8 ath5k_hw_rf_gainf_adjust(struct ath5k_hw *ah)
{
  #line 605 
  struct ath5k_gain_opt *go;
  #line 606 
  struct ath5k_gain_opt_step *g_step;
  #line 607 
  int ret = 0;
  #line 609 
  switch ((unsigned int)ah->ah_radio) {
    #line 610 
    case (unsigned int)1: 
                          #line 610 
    ;
    #line 611 
    go = & rfgain_opt_5111;
    #line 612 
    break;
    #line 613 
    case (unsigned int)2: 
                          #line 613 
    ;
    #line 614 
    go = & rfgain_opt_5112;
    #line 615 
    break;
    #line 616 
    default: 
             #line 616 
    ;
    #line 617 
    return (signed char)0;
  }
  #line 620 
  g_step = & go->go_step[(int)ah->ah_gain.g_step_idx];
  #line 622 
  if ((int)ah->ah_gain.g_current >= (int)ah->ah_gain.g_high) {
    #line 625 
    if ((unsigned int)ah->ah_gain.g_step_idx == 0U) 
                                                    #line 626 
                                                    return (signed char)(-1);
    #line 628 
    ah->ah_gain.g_target = ah->ah_gain.g_current;
    #line 628 
    while ((int)ah->ah_gain.g_target >= (int)ah->ah_gain.g_high && (unsigned int)ah->ah_gain.g_step_idx != 0U) {
      #line 633 
      ah->ah_gain.g_step_idx = (u8)((int)ah->ah_gain.g_step_idx - 1);
      #line 634 
      ah->ah_gain.g_target = (unsigned char)((int)ah->ah_gain.g_target - (int)((unsigned char)(((int)go->go_step[(int)ah->ah_gain.g_step_idx].gos_gain - (int)g_step->gos_gain) * 2)));
      #line 630 
      g_step = & go->go_step[(int)ah->ah_gain.g_step_idx];
    }
    #line 636 
    ret = 1;
    #line 637 
    goto done;
  }
  #line 640 
  if ((int)ah->ah_gain.g_current <= (int)ah->ah_gain.g_low) {
    #line 643 
    if ((int)ah->ah_gain.g_step_idx == (int)go->go_steps_count + -1) 
      #line 644 
      return (signed char)(-2);
    #line 646 
    ah->ah_gain.g_target = ah->ah_gain.g_current;
    #line 646 
    while ((int)ah->ah_gain.g_target <= (int)ah->ah_gain.g_low && (int)ah->ah_gain.g_step_idx < (int)go->go_steps_count + -1) {
      #line 651 
      ah->ah_gain.g_step_idx = (u8)((int)ah->ah_gain.g_step_idx + 1);
      #line 652 
      ah->ah_gain.g_target = (unsigned char)((int)ah->ah_gain.g_target - (int)((unsigned char)(((int)go->go_step[(int)ah->ah_gain.g_step_idx].gos_gain - (int)g_step->gos_gain) * 2)));
      #line 648 
      g_step = & go->go_step[(int)ah->ah_gain.g_step_idx];
    }
    #line 654 
    ret = 2;
    #line 655 
    goto done;
  }
  #line 658 
  done: 
        #line 658 
  ;
  #line 659 
  if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
    #line 659 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 659 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_rf_gainf_adjust",659,ret,(int)ah->ah_gain.g_step_idx,(int)ah->ah_gain.g_current,(int)ah->ah_gain.g_target);
  }
  #line 664 
  return (signed char)ret;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
enum ath5k_rfgain ath5k_hw_gainf_calibrate(struct ath5k_hw *ah)
{
  #line 680 
  u32 data;
  #line 680 
  u32 type;
  #line 681 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 683 
  if (ah->ah_rf_banks == (u32 *)0U || (unsigned int)ah->ah_gain.g_state == 0U) 
    #line 685 
    return AR5K_RFGAIN_INACTIVE;
  #line 689 
  if ((unsigned int)ah->ah_gain.g_state != 2U) 
                                               #line 690 
                                               goto done;
  #line 694 
  data = ath5k_hw_reg_read(ah,(unsigned short)39216);
  #line 697 
  if ((data & 32768U) == 0U) {
    #line 698 
    ah->ah_gain.g_current = (unsigned char)(data >> 25);
    #line 699 
    type = (data >> 23) & 3U;
    #line 703 
    if (type == 2U) 
      #line 704 
      if ((unsigned int)ah->ah_radio_5ghz_revision > 52U) 
                                                          #line 705 
                                                          ah->ah_gain.g_current = (unsigned char)((int)ah->ah_gain.g_current + (int)((unsigned char)ee->ee_cck_ofdm_gain_delta)); else 
                                                                    #line 708 
                                                                    ah->ah_gain.g_current = (unsigned char)((unsigned int)ah->ah_gain.g_current + 5U);
    #line 714 
    if ((unsigned int)ah->ah_radio_5ghz_revision > 52U) {
      #line 715 
      ath5k_hw_rf_gainf_corr(ah);
      #line 716 
      if ((int)ah->ah_gain.g_current >= (int)ah->ah_gain.g_f_corr) 
                                                                   #line 716 
                                                                   ah->ah_gain.g_current = (unsigned char)((int)ah->ah_gain.g_current - (int)ah->ah_gain.g_f_corr); else 
                                                                    #line 716 
                                                                    ah->ah_gain.g_current = (unsigned char)0U;
    }
    #line 725 
    if ((int)ath5k_hw_rf_check_gainf_readback(ah) != 0) 
      #line 725 
      if ((int)ah->ah_gain.g_current <= (int)ah->ah_gain.g_low || (int)ah->ah_gain.g_current >= (int)ah->ah_gain.g_high) {
        #line 726 
        if ((int)ath5k_hw_rf_gainf_adjust(ah) != 0) 
                                                    #line 728 
                                                    ah->ah_gain.g_state = (unsigned char)3U; else 
                                                                    #line 730 
                                                                    ah->ah_gain.g_state = (unsigned char)1U;
      }
      else 
           #line 730 
           ah->ah_gain.g_state = (unsigned char)1U;
    else 
         #line 730 
         ah->ah_gain.g_state = (unsigned char)1U;
  }
  #line 734 
  done: 
        #line 734 
  ;
  #line 735 
  return (enum ath5k_rfgain)ah->ah_gain.g_state;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rfgain_init(struct ath5k_hw *ah, enum nl80211_band band)
{
  #line 751 
  struct ath5k_ini_rfgain *ath5k_rfg;
  #line 752 
  unsigned int i;
  #line 752 
  unsigned int size;
  #line 752 
  unsigned int index;
  #line 754 
  switch ((unsigned int)ah->ah_radio) {
    #line 755 
    case (unsigned int)1: 
                          #line 755 
    ;
    #line 756 
    ath5k_rfg = (struct ath5k_ini_rfgain *)(& rfgain_5111);
    #line 757 
    size = 64U;
    #line 758 
    break;
    #line 759 
    case (unsigned int)2: 
                          #line 759 
    ;
    #line 760 
    ath5k_rfg = (struct ath5k_ini_rfgain *)(& rfgain_5112);
    #line 761 
    size = 64U;
    #line 762 
    break;
    #line 763 
    case (unsigned int)3: 
                          #line 763 
    ;
    #line 764 
    ath5k_rfg = (struct ath5k_ini_rfgain *)(& rfgain_2413);
    #line 765 
    size = 64U;
    #line 766 
    break;
    #line 767 
    case (unsigned int)5: 
                          #line 767 
    ;
    #line 768 
    ath5k_rfg = (struct ath5k_ini_rfgain *)(& rfgain_2316);
    #line 769 
    size = 64U;
    #line 770 
    break;
    #line 771 
    case (unsigned int)4: 
                          #line 771 
    ;
    #line 772 
    ath5k_rfg = (struct ath5k_ini_rfgain *)(& rfgain_5413);
    #line 773 
    size = 64U;
    #line 774 
    break;
    #line 775 
    case (unsigned int)6: 
                          #line 775 
    ;
    #line 776 
    case (unsigned int)7: 
                          #line 776 
    ;
    #line 777 
    ath5k_rfg = (struct ath5k_ini_rfgain *)(& rfgain_2425);
    #line 778 
    size = 64U;
    #line 779 
    break;
    #line 780 
    default: 
             #line 780 
    ;
    #line 781 
    return -22;
  }
  #line 784 
  index = (unsigned int)(band == (unsigned int)NL80211_BAND_2GHZ);
  #line 786 
  i = 0U;
  #line 786 
  while (i < size) {
    #line 787 
    if ((i & 63U) != 0U) 
                         #line 787 
                         __const_udelay(4295UL);
    #line 788 
    ath5k_hw_reg_write(ah,(ath5k_rfg + (unsigned long)i)->rfg_value[index],(unsigned short)((int)(ath5k_rfg + (unsigned long)i)->rfg_register));
    #line 786 
    i ++;
  }
  #line 792 
  return 0;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rfregs_init(struct ath5k_hw *ah, struct ieee80211_channel *channel, unsigned int mode)
{
  #line 814 
  struct ath5k_rf_reg *rf_regs;
  #line 815 
  struct ath5k_ini_rfbuffer *ini_rfb;
  #line 817 
  struct ath5k_gain_opt_step *g_step;
  #line 820 
  u32 *rfb;
  #line 821 
  int i;
  #line 816 
  struct ath5k_gain_opt *go = (struct ath5k_gain_opt *)0;
  #line 818 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 819 
  u8 ee_mode = (unsigned char)0U;
  #line 821 
  int obdb = -1;
  #line 821 
  int bank = -1;
  #line 823 
  switch ((unsigned int)ah->ah_radio) {
    #line 824 
    case (unsigned int)1: 
                          #line 824 
    ;
    #line 825 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5111);
    #line 826 
    ah->ah_rf_regs_count = 16UL;
    #line 827 
    ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_5111);
    #line 828 
    ah->ah_rf_banks_size = 45UL;
    #line 829 
    go = & rfgain_opt_5111;
    #line 830 
    break;
    #line 831 
    case (unsigned int)2: 
                          #line 831 
    ;
    #line 832 
    if ((unsigned int)ah->ah_radio_5ghz_revision > 52U) {
      #line 833 
      rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5112a);
      #line 834 
      ah->ah_rf_regs_count = 35UL;
      #line 835 
      ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_5112a);
      #line 836 
      ah->ah_rf_banks_size = 56UL;
    }
    else {
      #line 838 
      rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5112);
      #line 839 
      ah->ah_rf_regs_count = 25UL;
      #line 840 
      ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_5112);
      #line 841 
      ah->ah_rf_banks_size = 54UL;
    }
    #line 843 
    go = & rfgain_opt_5112;
    #line 844 
    break;
    #line 845 
    case (unsigned int)3: 
                          #line 845 
    ;
    #line 846 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_2413);
    #line 847 
    ah->ah_rf_regs_count = 3UL;
    #line 848 
    ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_2413);
    #line 849 
    ah->ah_rf_banks_size = 33UL;
    #line 850 
    break;
    #line 851 
    case (unsigned int)5: 
                          #line 851 
    ;
    #line 852 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_2316);
    #line 853 
    ah->ah_rf_regs_count = 3UL;
    #line 854 
    ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_2316);
    #line 855 
    ah->ah_rf_banks_size = 35UL;
    #line 856 
    break;
    #line 857 
    case (unsigned int)4: 
                          #line 857 
    ;
    #line 858 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_5413);
    #line 859 
    ah->ah_rf_regs_count = 6UL;
    #line 860 
    ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_5413);
    #line 861 
    ah->ah_rf_banks_size = 43UL;
    #line 862 
    break;
    #line 863 
    case (unsigned int)6: 
                          #line 863 
    ;
    #line 864 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_2425);
    #line 865 
    ah->ah_rf_regs_count = 3UL;
    #line 866 
    ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_2317);
    #line 867 
    ah->ah_rf_banks_size = 36UL;
    #line 868 
    break;
    #line 869 
    case (unsigned int)7: 
                          #line 869 
    ;
    #line 870 
    rf_regs = (struct ath5k_rf_reg *)(& rf_regs_2425);
    #line 871 
    ah->ah_rf_regs_count = 3UL;
    #line 872 
    if (ah->ah_mac_srev <= 239U) {
      #line 873 
      ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_2425);
      #line 874 
      ah->ah_rf_banks_size = 36UL;
    }
    else {
      #line 876 
      ini_rfb = (struct ath5k_ini_rfbuffer *)(& rfb_2417);
      #line 877 
      ah->ah_rf_banks_size = 36UL;
    }
    #line 879 
    break;
    #line 880 
    default: 
             #line 880 
    ;
    #line 881 
    return -22;
  }
  #line 887 
  if (ah->ah_rf_banks == (u32 *)0U) {
    #line 888 
    ah->ah_rf_banks = (u32 *)kmalloc_array(ah->ah_rf_banks_size,4UL,3264U);
    #line 891 
    if (ah->ah_rf_banks == (u32 *)0U) {
      #line 892 
      if (net_ratelimit() != 0) 
                                #line 892 
                                _ath5k_printk(ah,(char *)"\001",(char *)"out of memory\n");
      #line 893 
      return -12;
    }
  }
  #line 898 
  rfb = ah->ah_rf_banks;
  #line 900 
  i = 0;
  #line 900 
  while ((unsigned long)i < ah->ah_rf_banks_size) {
    #line 901 
    if ((unsigned int)(ini_rfb + (unsigned long)i)->rfb_bank > 7U) {
      #line 902 
      if (net_ratelimit() != 0) 
                                #line 902 
                                _ath5k_printk(ah,(char *)"\001",(char *)"invalid bank\n");
      #line 903 
      return -22;
    }
    #line 907 
    if ((int)(ini_rfb + (unsigned long)i)->rfb_bank != bank) {
      #line 908 
      bank = (int)(ini_rfb + (unsigned long)i)->rfb_bank;
      #line 909 
      ah->ah_offset[bank] = (unsigned char)i;
    }
    #line 912 
    *(rfb + (unsigned long)i) = (ini_rfb + (unsigned long)i)->rfb_mode_data[mode];
    #line 900 
    i ++;
  }
  #line 916 
  if (channel->band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 918 
    if ((unsigned int)channel->hw_value == 1U) 
                                               #line 919 
                                               ee_mode = (unsigned char)1U; else 
                                                                    #line 921 
                                                                    ee_mode = (unsigned char)2U;
    #line 930 
    if ((unsigned int)ah->ah_radio + 4294967295U <= 1U) 
                                                        #line 932 
                                                        obdb = 0; else 
                                                                    #line 934 
                                                                    obdb = 1;
    #line 936 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_ob[(int)ee_mode][obdb],(unsigned char)1,(_Bool)1);
    #line 939 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_db[(int)ee_mode][obdb],(unsigned char)3,(_Bool)1);
  }
  else 
    #line 943 
    if (channel->band == (unsigned int)NL80211_BAND_5GHZ || ah->ah_radio == (unsigned int)AR5K_RF5111) {
      #line 948 
      ee_mode = (unsigned char)0U;
      #line 949 
      if (channel->center_freq <= 5724U) {
        #line 951 
        int tmp_2;
        #line 950 
        int tmp_3;
        #line 949 
        int tmp_4;
        #line 949 
        if (channel->center_freq <= 5499U) {
          #line 950 
          if (channel->center_freq <= 5259U) {
            #line 951 
            if (channel->center_freq > 4000U) 
                                              #line 951 
                                              tmp_2 = 0; else 
                                                              #line 951 
                                                              tmp_2 = -1;
            #line 950 
            tmp_3 = tmp_2;
          }
          else 
               #line 950 
               tmp_3 = 1;
          #line 949 
          tmp_4 = tmp_3;
        }
        else 
             #line 949 
             tmp_4 = 2;
        #line 949 
        obdb = tmp_4;
      }
      else 
           #line 949 
           obdb = 3;
      #line 954 
      if (obdb < 0) 
                    #line 955 
                    return -22;
      #line 957 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_ob[(int)ee_mode][obdb],(unsigned char)2,(_Bool)1);
      #line 960 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_db[(int)ee_mode][obdb],(unsigned char)4,(_Bool)1);
    }
  #line 964 
  g_step = & go->go_step[(int)ah->ah_gain.g_step_idx];
  #line 967 
  if ((unsigned int)ah->ah_bwmode == 3U && ah->ah_radio != (unsigned int)AR5K_RF5413) 
    #line 969 
    ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)0,(_Bool)0);
  #line 972 
  if (ah->ah_radio == (unsigned int)AR5K_RF5111) {
    #line 975 
    if ((unsigned int)channel->hw_value != 1U) {
      #line 977 
      int tmp_5;
      #line 977 
      int tmp_6;
      #line 977 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 977 
                                                       tmp_5 = 38916; else 
                                                                    #line 977 
                                                                    tmp_5 = 39236;
      #line 977 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 977 
                                                       tmp_6 = 38916; else 
                                                                    #line 977 
                                                                    tmp_6 = 39236;
      #line 977 
      ;
      #line 977 
      ;
      #line 977 
      ;
      #line 977 
      ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)tmp_6) & 4294967239U) | ((unsigned int)((int)g_step->gos_param[0] << 3) & 56U),(unsigned short)tmp_5);
      #line 981 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[1],(unsigned char)21,(_Bool)1);
      #line 984 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[2],(unsigned char)20,(_Bool)1);
      #line 987 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[3],(unsigned char)33,(_Bool)1);
      #line 992 
      ah->ah_gain.g_state = (unsigned char)1U;
    }
    #line 998 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)((unsigned int)ee->ee_xpd[(int)ee_mode] == 0U),(unsigned char)7,(_Bool)1);
    #line 1001 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_x_gain[(int)ee_mode],(unsigned char)9,(_Bool)1);
    #line 1004 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_i_gain[(int)ee_mode],(unsigned char)31,(_Bool)1);
    #line 1007 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_xpd[(int)ee_mode],(unsigned char)32,(_Bool)1);
    #line 1011 
    if ((unsigned int)ah->ah_bwmode + 255U <= 1U) {
      #line 1013 
      u8 wait_i;
      #line 1015 
      ath5k_hw_rfb_op(ah,rf_regs,31U,(unsigned char)35,(_Bool)1);
      #line 1018 
      if ((unsigned int)ah->ah_bwmode == 1U) 
                                             #line 1018 
                                             wait_i = (unsigned char)31U; else 
                                                                    #line 1018 
                                                                    wait_i = (unsigned char)16U;
      #line 1021 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)wait_i,(unsigned char)36,(_Bool)1);
      #line 1023 
      ath5k_hw_rfb_op(ah,rf_regs,3U,(unsigned char)37,(_Bool)1);
    }
  }
  #line 1029 
  if (ah->ah_radio == (unsigned int)AR5K_RF5112) {
    #line 1032 
    if ((unsigned int)channel->hw_value != 1U) {
      #line 1034 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[0],(unsigned char)39,(_Bool)1);
      #line 1037 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[1],(unsigned char)27,(_Bool)1);
      #line 1040 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[2],(unsigned char)26,(_Bool)1);
      #line 1043 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[3],(unsigned char)25,(_Bool)1);
      #line 1046 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[4],(unsigned char)24,(_Bool)1);
      #line 1049 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[5],(unsigned char)23,(_Bool)1);
      #line 1052 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)g_step->gos_param[6],(unsigned char)22,(_Bool)1);
      #line 1057 
      ah->ah_gain.g_state = (unsigned char)1U;
    }
    #line 1062 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_xpd[(int)ee_mode],(unsigned char)8,(_Bool)1);
    #line 1065 
    if ((unsigned int)ah->ah_radio_5ghz_revision <= 52U) 
                                                         #line 1067 
                                                         ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_x_gain[(int)ee_mode],(unsigned char)9,(_Bool)1);
    else {
      #line 1072 
      u8 *pdg_curve_to_idx = (u8 *)(& ee->ee_pdc_to_idx[(int)ee_mode]);
      #line 1073 
      if ((unsigned int)ee->ee_pd_gains[(int)ee_mode] > 1U) {
        #line 1074 
        ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)*pdg_curve_to_idx,(unsigned char)10,(_Bool)1);
        #line 1077 
        ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)*(pdg_curve_to_idx + 1U),(unsigned char)11,(_Bool)1);
      }
      else {
        #line 1081 
        ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)*pdg_curve_to_idx,(unsigned char)10,(_Bool)1);
        #line 1084 
        ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)*pdg_curve_to_idx,(unsigned char)11,(_Bool)1);
      }
      #line 1090 
      if (ah->ah_radio == (unsigned int)AR5K_RF5112 && ((int)ah->ah_radio_5ghz_revision & 15) > 0) {
        #line 1092 
        ath5k_hw_rfb_op(ah,rf_regs,2U,(unsigned char)12,(_Bool)1);
        #line 1095 
        ath5k_hw_rfb_op(ah,rf_regs,2U,(unsigned char)13,(_Bool)1);
        #line 1098 
        ath5k_hw_rfb_op(ah,rf_regs,2U,(unsigned char)14,(_Bool)1);
        #line 1101 
        ath5k_hw_rfb_op(ah,rf_regs,2U,(unsigned char)15,(_Bool)1);
      }
      #line 1106 
      if ((unsigned int)ah->ah_phy_revision > 65U) {
        #line 1107 
        ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)16,(_Bool)1);
        #line 1110 
        ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)17,(_Bool)1);
        #line 1113 
        ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)18,(_Bool)1);
        #line 1116 
        ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)29,(_Bool)1);
        #line 1119 
        ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)28,(_Bool)1);
      }
    }
    #line 1124 
    ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)ee->ee_i_gain[(int)ee_mode],(unsigned char)31,(_Bool)1);
    #line 1128 
    if ((unsigned int)ah->ah_bwmode + 255U <= 1U) {
      #line 1130 
      u8 pd_delay;
      #line 1132 
      if ((unsigned int)ah->ah_bwmode == 1U) 
                                             #line 1132 
                                             pd_delay = (unsigned char)15U; else 
                                                                    #line 1132 
                                                                    pd_delay = (unsigned char)8U;
      #line 1135 
      ath5k_hw_rfb_op(ah,rf_regs,(unsigned int)pd_delay,(unsigned char)44,(_Bool)1);
      #line 1137 
      ath5k_hw_rfb_op(ah,rf_regs,15U,(unsigned char)41,(_Bool)1);
    }
  }
  #line 1143 
  if (ah->ah_radio == (unsigned int)AR5K_RF5413 && channel->band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 1146 
    ath5k_hw_rfb_op(ah,rf_regs,1U,(unsigned char)30,(_Bool)1);
    #line 1150 
    if (ah->ah_mac_srev + 4294967152U <= 19U) {
      #line 1152 
      ;
      #line 1152 
      ;
      #line 1152 
      ath5k_hw_rfb_op(ah,rf_regs,ath5k_hw_bitswap(6U,3U),(unsigned char)19,(_Bool)1);
    }
  }
  #line 1158 
  i = 0;
  #line 1158 
  while ((unsigned long)i < ah->ah_rf_banks_size) {
    #line 1159 
    if (((unsigned int)i & 63U) != 0U) 
                                       #line 1159 
                                       __const_udelay(4295UL);
    #line 1160 
    ath5k_hw_reg_write(ah,*(rfb + (unsigned long)i),(unsigned short)((int)(ini_rfb + (unsigned long)i)->rfb_ctrl_register));
    #line 1158 
    i ++;
  }
  #line 1163 
  return 0;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static u32 ath5k_hw_rf5110_chan2athchan(struct ieee80211_channel *channel)
{
  #line 1181 
  u32 athchan;
  #line 1183 
  athchan = (ath5k_hw_bitswap((unsigned int)((ieee80211_frequency_to_channel((int)channel->center_freq) + -24) / 2),
                         5U) << 1) | 65U;
  #line 1187 
  return athchan;
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf5110_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1199 
  u32 data;
  #line 1204 
  data = ath5k_hw_rf5110_chan2athchan(channel);
  #line 1205 
  ath5k_hw_reg_write(ah,data,(unsigned short)39068);
  #line 1206 
  ath5k_hw_reg_write(ah,0U,(unsigned short)39104);
  #line 1207 
  usleep_range(1000UL,1500UL);
  #line 1209 
  return 0;
}

#line 1223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf5111_chan2athchan(unsigned int ieee, struct ath5k_athchan_2ghz *athchan)
{
  #line 1226 
  int channel;
  #line 1229 
  channel = (int)ieee;
  #line 1234 
  if (channel <= 13) {
    #line 1235 
    athchan->a2_athchan = (unsigned short)((unsigned int)((unsigned short)channel) + 115U);
    #line 1236 
    athchan->a2_flags = 70U;
  }
  else 
    #line 1237 
    if (channel == 14) {
      #line 1238 
      athchan->a2_athchan = (unsigned short)124U;
      #line 1239 
      athchan->a2_flags = 68U;
    }
    else 
      #line 1240 
      if ((unsigned int)channel + 4294967281U <= 11U) {
        #line 1241 
        athchan->a2_athchan = (unsigned short)((unsigned int)((unsigned short)(channel + 19)) * 4U);
        #line 1242 
        athchan->a2_flags = 70U;
      }
      else 
           #line 1244 
           return -22;
  #line 1246 
  return 0;
}

#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf5111_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1258 
  struct ath5k_athchan_2ghz ath5k_channel_2ghz;
  #line 1261 
  u32 data0;
  #line 1261 
  u32 data1;
  #line 1261 
  u32 clock;
  #line 1262 
  int ret;
  #line 1259 
  unsigned int ath5k_channel = (unsigned int)ieee80211_frequency_to_channel((int)channel->center_freq);
  #line 1267 
  data1 = 0U;
  #line 1267 
  data0 = data1;
  #line 1269 
  if (channel->band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 1271 
    ret = ath5k_hw_rf5111_chan2athchan((unsigned int)ieee80211_frequency_to_channel((int)channel->center_freq),& ath5k_channel_2ghz);
    #line 1274 
    if (ret != 0) 
                  #line 1275 
                  return ret;
    #line 1277 
    ath5k_channel = (unsigned int)ath5k_channel_2ghz.a2_athchan;
    #line 1278 
    data0 = ((ath5k_hw_bitswap(ath5k_channel_2ghz.a2_flags,8U) << 5) & 8160U) | 16U;
  }
  #line 1282 
  if (ath5k_channel <= 144U || (ath5k_channel & 1U) == 0U) {
    #line 1283 
    clock = 1U;
    #line 1284 
    data1 = (((ath5k_hw_bitswap(ath5k_channel + 4294967272U,8U) << 2) & 1020U) | (clock << 1)) | 1025U;
  }
  else {
    #line 1287 
    clock = 0U;
    #line 1288 
    data1 = (((ath5k_hw_bitswap((ath5k_channel + 4294967272U) / 2U,8U) << 2) & 1020U) | (clock << 1)) | 1025U;
  }
  #line 1292 
  ath5k_hw_reg_write(ah,(data1 & 255U) | ((data0 << 8) & 65535U),(unsigned short)39068);
  #line 1294 
  ath5k_hw_reg_write(ah,((data1 >> 8) & 255U) | (data0 & 65280U),(unsigned short)39120);
  #line 1297 
  return 0;
}

#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf5112_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1316 
  u32 data;
  #line 1316 
  u32 data0;
  #line 1316 
  u32 data1;
  #line 1316 
  u32 data2;
  #line 1317 
  u16 c;
  #line 1319 
  data2 = 0U;
  #line 1319 
  data1 = data2;
  #line 1319 
  data0 = data1;
  #line 1319 
  data = data0;
  #line 1320 
  c = (unsigned short)channel->center_freq;
  #line 1327 
  if ((unsigned int)c <= 4799U) {
    #line 1330 
    if (((int)c + -2224) % 5 == 0) {
      #line 1332 
      data0 = (unsigned int)(((int)c + -2224) / 5);
      #line 1333 
      data1 = 1U;
    }
    else 
      #line 1336 
      if (((int)c + -2192) % 5 == 0) {
        #line 1338 
        data0 = (unsigned int)(((int)c + -2192) / 5);
        #line 1339 
        data1 = 0U;
      }
      else 
           #line 1341 
           return -22;
    #line 1343 
    data0 = ath5k_hw_bitswap((data0 << 2) & 255U,8U);
  }
  else 
    #line 1353 
    if ((unsigned int)c % 5U != 2U || (unsigned int)c > 5435U) 
      #line 1354 
      if ((unsigned int)c % 20U == 0U && (unsigned int)c > 5119U) {
        #line 1355 
        data0 = ath5k_hw_bitswap((unsigned int)(((int)c + -4800) / 20 << 2),8U);
        #line 1356 
        data2 = ath5k_hw_bitswap(3U,2U);
      }
      else 
        #line 1357 
        if ((unsigned int)c % 10U == 0U) {
          #line 1358 
          data0 = ath5k_hw_bitswap((unsigned int)(((int)c + -4800) / 10 << 1),8U);
          #line 1359 
          data2 = ath5k_hw_bitswap(2U,2U);
        }
        else 
          #line 1360 
          if ((unsigned int)c % 5U == 0U) {
            #line 1361 
            data0 = ath5k_hw_bitswap((unsigned int)(((int)c + -4800) / 5),8U);
            #line 1362 
            data2 = ath5k_hw_bitswap(1U,2U);
          }
          else 
               #line 1364 
               return -22;
    else {
      #line 1366 
      data0 = ath5k_hw_bitswap((unsigned int)((((int)c + -4802) * 10) / 25 + 1),8U);
      #line 1367 
      data2 = ath5k_hw_bitswap(0U,2U);
    }
  #line 1370 
  data = (((data0 << 4) | (data1 << 1)) | (data2 << 2)) | 4097U;
  #line 1372 
  ath5k_hw_reg_write(ah,data & 255U,(unsigned short)39068);
  #line 1373 
  ath5k_hw_reg_write(ah,(data >> 8) & 127U,(unsigned short)39128);
  #line 1375 
  return 0;
}

#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf2425_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1390 
  u32 data;
  #line 1390 
  u32 data0;
  #line 1390 
  u32 data2;
  #line 1391 
  u16 c;
  #line 1393 
  data2 = 0U;
  #line 1393 
  data0 = data2;
  #line 1393 
  data = data0;
  #line 1394 
  c = (unsigned short)channel->center_freq;
  #line 1396 
  if ((unsigned int)c <= 4799U) {
    #line 1397 
    data0 = ath5k_hw_bitswap((unsigned int)((int)c + -2272),8U);
    #line 1398 
    data2 = 0U;
  }
  else 
    #line 1400 
    if ((unsigned int)c % 5U != 2U || (unsigned int)c > 5435U) {
      #line 1401 
      if ((unsigned int)c % 20U == 0U && (unsigned int)c <= 5119U) 
                                                                   #line 1402 
                                                                   data0 = ath5k_hw_bitswap((unsigned int)(((int)c + -4800) / 20 << 2),8U);
      else 
        #line 1403 
        if ((unsigned int)c % 10U == 0U) 
                                         #line 1404 
                                         data0 = ath5k_hw_bitswap((unsigned int)(((int)c + -4800) / 10 << 1),8U);
        else 
          #line 1405 
          if ((unsigned int)c % 5U == 0U) 
                                          #line 1406 
                                          data0 = ath5k_hw_bitswap((unsigned int)(((int)c + -4800) / 5),8U); else 
                                                                    #line 1408 
                                                                    return -22;
      #line 1409 
      data2 = ath5k_hw_bitswap(1U,2U);
    }
    else {
      #line 1411 
      data0 = ath5k_hw_bitswap((unsigned int)((((int)c + -4802) * 10) / 25 + 1),8U);
      #line 1412 
      data2 = ath5k_hw_bitswap(0U,2U);
    }
  #line 1415 
  data = ((data0 << 4) | (data2 << 2)) | 4097U;
  #line 1417 
  ath5k_hw_reg_write(ah,data & 255U,(unsigned short)39068);
  #line 1418 
  ath5k_hw_reg_write(ah,(data >> 8) & 127U,(unsigned short)39128);
  #line 1420 
  return 0;
}

#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1435 
  int ret;
  #line 1440 
  if (! ath5k_channel_ok(ah,channel)) {
    #line 1441 
    if (net_ratelimit() != 0) 
                              #line 1441 
                              _ath5k_printk(ah,(char *)"\001",(char *)"channel frequency (%u MHz) out of supported ",channel->center_freq);
    #line 1445 
    return -22;
  }
  #line 1451 
  switch ((unsigned int)ah->ah_radio) {
    #line 1452 
    case (unsigned int)0: 
                          #line 1452 
    ;
    #line 1453 
    ret = ath5k_hw_rf5110_channel(ah,channel);
    #line 1454 
    break;
    #line 1455 
    case (unsigned int)1: 
                          #line 1455 
    ;
    #line 1456 
    ret = ath5k_hw_rf5111_channel(ah,channel);
    #line 1457 
    break;
    #line 1458 
    case (unsigned int)6: 
                          #line 1458 
    ;
    #line 1459 
    case (unsigned int)7: 
                          #line 1459 
    ;
    #line 1460 
    ret = ath5k_hw_rf2425_channel(ah,channel);
    #line 1461 
    break;
    #line 1462 
    default: 
             #line 1462 
    ;
    #line 1463 
    ret = ath5k_hw_rf5112_channel(ah,channel);
    #line 1464 
    break;
  }
  #line 1467 
  if (ret != 0) 
                #line 1468 
                return ret;
  #line 1471 
  if (channel->center_freq == 2484U) {
    #line 1472 
    ;
    #line 1472 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)41476) | 16U,(unsigned short)41476);
  }
  else {
    #line 1475 
    ;
    #line 1475 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)41476),(unsigned short)41476);
  }
  #line 1479 
  ah->ah_current_channel = channel;
  #line 1481 
  return 0;
}

#line 1523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static s32 ath5k_hw_read_measured_noise_floor(struct ath5k_hw *ah)
{
  #line 1525 
  s32 val;
  #line 1527 
  val = (int)ath5k_hw_reg_read(ah,(unsigned short)39012);
  #line 1528 
  return sign_extend32((unsigned int)(val >> 19) & 511U,8);
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_init_nfcal_hist(struct ath5k_hw *ah)
{
  #line 1538 
  int i;
  #line 1540 
  ah->ah_nfcal_hist.index = (short)0;
  #line 1541 
  i = 0;
  #line 1541 
  while (i <= 7) {
    #line 1542 
    ah->ah_nfcal_hist.nfval[i] = (short)(-95);
    #line 1541 
    i ++;
  }
  #line 1543 
  return;
}

#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_hw_update_nfcal_hist(struct ath5k_hw *ah, s16 noise_floor)
{
  #line 1552 
  struct ath5k_nfcal_hist *hist = & ah->ah_nfcal_hist;
  #line 1553 
  hist->index = (short)((int)((short)((unsigned int)hist->index + 1U)) & 7);
  #line 1554 
  hist->nfval[(int)hist->index] = noise_floor;
  #line 1555 
  return;
}

#line 1562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static s16 ath5k_hw_get_median_noise_floor(struct ath5k_hw *ah)
{
  #line 1564 
  s16 sort[8U];
  #line 1565 
  s16 tmp;
  #line 1566 
  int i;
  #line 1566 
  int j;
  #line 1568 
  memcpy((void *)(& sort),(void *)(& ah->ah_nfcal_hist.nfval),16UL);
  #line 1569 
  i = 0;
  #line 1569 
  while (i <= 6) {
    #line 1570 
    j = 1;
    #line 1570 
    while (8 - i > j) {
      #line 1571 
      if ((int)sort[j] > (int)sort[j + -1]) {
        #line 1572 
        tmp = sort[j];
        #line 1573 
        sort[j] = sort[j + -1];
        #line 1574 
        sort[j + -1] = tmp;
      }
      #line 1570 
      j ++;
    }
    #line 1569 
    i ++;
  }
  #line 1578 
  i = 0;
  #line 1578 
  while (i <= 7) {
    #line 1579 
    if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
      #line 1579 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 1579 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_get_median_noise_floor",1579,i,(int)sort[i]);
    }
    #line 1578 
    i ++;
  }
  #line 1582 
  return sort[3];
}

#line 1594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_update_noise_floor(struct ath5k_hw *ah)
{
  #line 1597 
  u32 val;
  #line 1598 
  s16 nf;
  #line 1598 
  s16 threshold;
  #line 1599 
  u8 ee_mode;
  #line 1596 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1602 
  if ((ath5k_hw_reg_read(ah,(unsigned short)39008) & 2U) != 0U) {
    #line 1603 
    if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
      #line 1603 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 1603 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_update_noise_floor",1603);
    }
    #line 1606 
    return;
  }
  #line 1609 
  ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask | 4U);
  #line 1611 
  ee_mode = (unsigned char)ath5k_eeprom_mode_from_channel(ah,ah->ah_current_channel);
  #line 1614 
  nf = (short)ath5k_hw_read_measured_noise_floor(ah);
  #line 1615 
  threshold = ee->ee_noise_floor_thr[(int)ee_mode];
  #line 1617 
  if ((int)nf > (int)threshold) {
    #line 1618 
    if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
      #line 1618 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 1618 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_update_noise_floor",1618,(int)nf,(int)threshold);
    }
    #line 1623 
    nf = (short)(-95);
  }
  #line 1626 
  ath5k_hw_update_nfcal_hist(ah,(short)((int)nf));
  #line 1627 
  nf = ath5k_hw_get_median_noise_floor(ah);
  #line 1630 
  val = ath5k_hw_reg_read(ah,(unsigned short)39012) & 4294966784U;
  #line 1631 
  val = ((unsigned int)((int)nf * 2) & 510U) | val;
  #line 1632 
  ath5k_hw_reg_write(ah,val,(unsigned short)39012);
  #line 1634 
  ;
  #line 1634 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39008) & 4294803453U) | 2U,(unsigned short)39008);
  #line 1637 
  ath5k_hw_register_timeout(ah,39008U,2U,0U,(_Bool)0);
  #line 1646 
  val = (val & 4294966784U) | 412U;
  #line 1647 
  ath5k_hw_reg_write(ah,val,(unsigned short)39012);
  #line 1648 
  ;
  #line 1648 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) | 163842U,(unsigned short)39008);
  #line 1653 
  ah->ah_noise_floor = (int)nf;
  #line 1655 
  ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask & 251U);
  #line 1657 
  if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
    #line 1657 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 1657 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_update_noise_floor",1657,(int)nf);
  }
  #line 1658 
  return;
}

#line 1669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf5110_calibrate(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1672 
  u32 phy_sig;
  #line 1672 
  u32 phy_agc;
  #line 1672 
  u32 phy_sat;
  #line 1672 
  u32 beacon;
  #line 1673 
  int ret;
  #line 1675 
  if (((int)ah->ah_cal_mask & 1) == 0) 
                                       #line 1676 
                                       return 0;
  #line 1681 
  ;
  #line 1681 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32872) | 96U,(unsigned short)32872);
  #line 1683 
  beacon = ath5k_hw_reg_read(ah,(unsigned short)32804);
  #line 1684 
  ath5k_hw_reg_write(ah,beacon & 4286578687U,(unsigned short)32804);
  #line 1686 
  usleep_range(2000UL,2500UL);
  #line 1691 
  ;
  #line 1691 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)38920) | 134217728U,(unsigned short)38920);
  #line 1692 
  __const_udelay(42950UL);
  #line 1693 
  ret = ath5k_hw_channel(ah,channel);
  #line 1698 
  ath5k_hw_reg_write(ah,1U,(unsigned short)38940);
  #line 1699 
  usleep_range(1000UL,1500UL);
  #line 1701 
  ;
  #line 1701 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)38920) & 4160749567U,(unsigned short)38920);
  #line 1703 
  if (ret != 0) 
                #line 1704 
                return ret;
  #line 1711 
  phy_sig = ath5k_hw_reg_read(ah,(unsigned short)39000);
  #line 1712 
  phy_agc = ath5k_hw_reg_read(ah,(unsigned short)39004);
  #line 1713 
  phy_sat = ath5k_hw_reg_read(ah,(unsigned short)39016);
  #line 1716 
  ath5k_hw_reg_write(ah,phy_sig | 66846720U,(unsigned short)39000);
  #line 1719 
  ath5k_hw_reg_write(ah,(phy_agc & 4290773119U) | 4178048U,(unsigned short)39004);
  #line 1724 
  ath5k_hw_reg_write(ah,(phy_sat & 4294836255U) | 4480U,(unsigned short)39016);
  #line 1729 
  __const_udelay(85900UL);
  #line 1731 
  ;
  #line 1731 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)38920) | 134217728U,(unsigned short)38920);
  #line 1732 
  __const_udelay(42950UL);
  #line 1733 
  ath5k_hw_reg_write(ah,33U,(unsigned short)39124);
  #line 1734 
  ;
  #line 1734 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)38920) & 4160749567U,(unsigned short)38920);
  #line 1736 
  usleep_range(1000UL,1500UL);
  #line 1741 
  ;
  #line 1741 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) | 1U,(unsigned short)39008);
  #line 1743 
  ret = ath5k_hw_register_timeout(ah,39008U,1U,0U,(_Bool)0);
  #line 1747 
  ath5k_hw_reg_write(ah,phy_sig,(unsigned short)39000);
  #line 1748 
  ath5k_hw_reg_write(ah,phy_agc,(unsigned short)39004);
  #line 1749 
  ath5k_hw_reg_write(ah,phy_sat,(unsigned short)39016);
  #line 1751 
  if (ret != 0) {
    #line 1752 
    if (net_ratelimit() != 0) 
                              #line 1752 
                              _ath5k_printk(ah,(char *)"\001",(char *)"calibration timeout (%uMHz)\n",channel->center_freq);
    #line 1754 
    return ret;
  }
  #line 1760 
  ;
  #line 1760 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32872) & 4294967199U,(unsigned short)32872);
  #line 1762 
  ath5k_hw_reg_write(ah,beacon,(unsigned short)32804);
  #line 1764 
  return 0;
}

#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_rf511x_iq_calibrate(struct ath5k_hw *ah)
{
  #line 1823 
  int __UNIQUE_ID___x561;
  #line 1823 
  int tmp_7;
  #line 1817 
  int __UNIQUE_ID___x557;
  #line 1817 
  int tmp_3;
  #line 1774 
  u32 i_pwr;
  #line 1774 
  u32 q_pwr;
  #line 1775 
  s32 iq_corr;
  #line 1775 
  s32 i_coff;
  #line 1775 
  s32 i_coffd;
  #line 1775 
  s32 q_coff;
  #line 1775 
  s32 q_coffd;
  #line 1776 
  int i;
  #line 1779 
  if (! ah->ah_iq_cal_needed) 
                              #line 1780 
                              return -22;
  else {
    #line 1781 
    if ((ath5k_hw_reg_read(ah,(unsigned short)39200) & 65536U) != 0U) {
      #line 1782 
      if ((long)((ah->debug.level & 32U) != 0U) != 0L) 
                                                       #line 1782 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_rf511x_iq_calibrate",1782);
      #line 1784 
      return -16;
    }
  }
  #line 1791 
  i = 0;
  #line 1791 
  while (i <= 10) {
    {
      #line 1792 
      iq_corr = (int)ath5k_hw_reg_read(ah,(unsigned short)39960);
      #line 1793 
      i_pwr = ath5k_hw_reg_read(ah,(unsigned short)39952);
      #line 1794 
      q_pwr = ath5k_hw_reg_read(ah,(unsigned short)39956);
      #line 1795 
      if ((long)((ah->debug.level & 32U) != 0U) != 0L) 
                                                       #line 1795 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_rf511x_iq_calibrate",1795,iq_corr,i_pwr,q_pwr);
      #line 1797 
      if (i_pwr != 0U && q_pwr != 0U) 
                                      #line 1798 
                                      break;
    }
    #line 1791 
    i ++;
  }
  #line 1801 
  i_coffd = (int)(((i_pwr >> 1) + (q_pwr >> 1)) >> 7);
  #line 1803 
  if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                   #line 1804 
                                                   q_coffd = (int)(q_pwr >> 6); else 
                                                                    #line 1806 
                                                                    q_coffd = (int)(q_pwr >> 7);
  #line 1811 
  if (i_coffd == 0 || q_coffd <= 1) 
                                    #line 1812 
                                    return -125;
  #line 1816 
  i_coff = - iq_corr / i_coffd;
  {
    #line 1817 
    s32 __UNIQUE_ID___x555;
    #line 1817 
    int tmp_1;
    {
      #line 1817 
      __UNIQUE_ID___x555 = i_coff;
      #line 1817 
      int __UNIQUE_ID___y556 = -32;
      #line 1817 
      if (__UNIQUE_ID___x555 > __UNIQUE_ID___y556) 
                                                   #line 1817 
                                                   tmp_1 = __UNIQUE_ID___x555; else 
                                                                    #line 1817 
                                                                    tmp_1 = __UNIQUE_ID___y556;
      }
    #line 1817 
    __UNIQUE_ID___x557 = tmp_1;
    #line 1817 
    int __UNIQUE_ID___y558 = 31;
    #line 1817 
    if (__UNIQUE_ID___x557 < __UNIQUE_ID___y558) 
                                                 #line 1817 
                                                 tmp_3 = __UNIQUE_ID___x557; else 
                                                                    #line 1817 
                                                                    tmp_3 = __UNIQUE_ID___y558;
    }
  #line 1817 
  i_coff = tmp_3;
  #line 1819 
  if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                   #line 1820 
                                                   q_coff = (int)(i_pwr / (unsigned int)q_coffd + 4294967232U); else 
                                                                    #line 1822 
                                                                    q_coff = (int)(i_pwr / (unsigned int)q_coffd + 4294967168U);
  {
    #line 1823 
    s32 __UNIQUE_ID___x559;
    #line 1823 
    int tmp_5;
    {
      #line 1823 
      __UNIQUE_ID___x559 = q_coff;
      #line 1823 
      int __UNIQUE_ID___y560 = -16;
      #line 1823 
      if (__UNIQUE_ID___x559 > __UNIQUE_ID___y560) 
                                                   #line 1823 
                                                   tmp_5 = __UNIQUE_ID___x559; else 
                                                                    #line 1823 
                                                                    tmp_5 = __UNIQUE_ID___y560;
      }
    #line 1823 
    __UNIQUE_ID___x561 = tmp_5;
    #line 1823 
    int __UNIQUE_ID___y562 = 15;
    #line 1823 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 1823 
                                                 tmp_7 = __UNIQUE_ID___x561; else 
                                                                    #line 1823 
                                                                    tmp_7 = __UNIQUE_ID___y562;
    }
  #line 1823 
  q_coff = tmp_7;
  #line 1825 
  if ((long)((ah->debug.level & 32U) != 0U) != 0L) 
                                                   #line 1825 
                                                   _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_rf511x_iq_calibrate",1825,i_coff,q_coff,i_coffd,q_coffd);
  #line 1830 
  ;
  #line 1830 
  ;
  #line 1830 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39200) & 4294965279U) | ((unsigned int)(i_coff << 5) & 2016U),(unsigned short)39200);
  #line 1831 
  ;
  #line 1831 
  ;
  #line 1831 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39200) & 4294967264U) | ((unsigned int)q_coff & 31U),(unsigned short)39200);
  #line 1832 
  ;
  #line 1832 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 2048U,(unsigned short)39200);
  #line 1836 
  ;
  #line 1836 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 61440U,(unsigned short)39200);
  #line 1838 
  ;
  #line 1838 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 65536U,(unsigned short)39200);
  #line 1840 
  return 0;
}

#line 1853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_phy_calibrate(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1856 
  int ret;
  #line 1858 
  if (ah->ah_radio == (unsigned int)AR5K_RF5110) {
    #line 1859 
    return ath5k_hw_rf5110_calibrate(ah,channel);
  }
  #line 1861 
  ret = ath5k_hw_rf511x_iq_calibrate(ah);
  #line 1862 
  if (ret != 0) {
    #line 1863 
    if ((long)((ah->debug.level & 32U) != 0U) != 0L) 
                                                     #line 1863 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_phy_calibrate",1863,channel->center_freq);
    #line 1869 
    ret = 0;
  }
  #line 1874 
  if ((((int)ah->ah_cal_mask & 1) != 0 && (unsigned int)ah->ah_radio + 4294967295U <= 1U) && (unsigned int)channel->hw_value != 1U) 
    #line 1878 
    ath5k_hw_request_rfgain_probe(ah);
  #line 1881 
  if (((int)ah->ah_cal_mask & 4) == 0) 
                                       #line 1882 
                                       ath5k_hw_update_noise_floor(ah);
  #line 1884 
  return ret;
}

#line 1903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_hw_set_spur_mitigation_filter(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1910 
  u16 spur_chan_fbin;
  #line 1910 
  u16 chan_fbin;
  #line 1910 
  u16 symbol_width;
  #line 1910 
  u16 spur_detection_window;
  #line 1911 
  s32 spur_delta_phase;
  #line 1911 
  s32 spur_freq_sigma_delta;
  #line 1912 
  s32 spur_offset;
  #line 1912 
  s32 num_symbols_x16;
  #line 1913 
  u8 num_symbol_offsets;
  #line 1913 
  u8 i;
  #line 1913 
  u8 freq_band;
  #line 1906 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1907 
  u32 mag_mask[4U] = {0U, 0U, 0U, 0U};
  #line 1908 
  u32 pilot_mask[2U] = {0U, 0U};
  #line 1918 
  if (channel->band == (unsigned int)NL80211_BAND_2GHZ) {
    #line 1919 
    chan_fbin = (unsigned short)((unsigned int)((unsigned short)channel->center_freq) * 10U + 42536U);
    #line 1920 
    freq_band = (unsigned char)1U;
  }
  else {
    #line 1922 
    chan_fbin = (unsigned short)((unsigned int)((unsigned short)channel->center_freq) * 10U + 16536U);
    #line 1923 
    freq_band = (unsigned char)0U;
  }
  #line 1928 
  spur_chan_fbin = (unsigned short)32768U;
  #line 1929 
  spur_detection_window = (unsigned short)87U;
  #line 1931 
  if ((unsigned int)ah->ah_bwmode == 3U) 
                                         #line 1932 
                                         spur_detection_window = (unsigned short)((unsigned int)spur_detection_window * 2U);
  #line 1934 
  i = (unsigned char)0U;
  #line 1934 
  while ((unsigned int)i <= 4U) {
    #line 1935 
    spur_chan_fbin = ee->ee_spur_chans[(int)i][(int)freq_band];
    #line 1939 
    if ((unsigned int)spur_chan_fbin == 32768U) {
      #line 1940 
      spur_chan_fbin = (unsigned short)((unsigned int)spur_chan_fbin & 16383U);
      #line 1941 
      break;
    }
    #line 1944 
    if ((int)chan_fbin - (int)spur_detection_window <= ((int)spur_chan_fbin & 16383) && (int)chan_fbin + (int)spur_detection_window >= ((int)spur_chan_fbin & 16383)) {
      #line 1948 
      spur_chan_fbin = (unsigned short)((unsigned int)spur_chan_fbin & 16383U);
      #line 1949 
      break;
    }
    #line 1934 
    i = (u8)((int)i + 1);
  }
  #line 1954 
  if ((unsigned int)spur_chan_fbin != 0U) {
    #line 1955 
    spur_offset = (int)spur_chan_fbin - (int)chan_fbin;
    #line 1962 
    switch ((int)ah->ah_bwmode) {
      #line 1963 
      case 3: 
              #line 1963 
      ;
      #line 1965 
      spur_delta_phase = (spur_offset << 16) / 25;
      #line 1966 
      spur_freq_sigma_delta = spur_delta_phase >> 10;
      #line 1967 
      symbol_width = (unsigned short)6250U;
      #line 1968 
      break;
      #line 1969 
      case 2: 
              #line 1969 
      ;
      #line 1971 
      spur_delta_phase = (spur_offset << 18) / 25;
      #line 1972 
      spur_freq_sigma_delta = spur_delta_phase >> 10;
      #line 1973 
      symbol_width = (unsigned short)1562U;
      #line 1974 
      break;
      #line 1975 
      case 1: 
              #line 1975 
      ;
      #line 1977 
      spur_delta_phase = (spur_offset << 19) / 25;
      #line 1978 
      spur_freq_sigma_delta = spur_delta_phase >> 10;
      #line 1979 
      symbol_width = (unsigned short)781U;
      #line 1980 
      break;
      #line 1981 
      default: 
               #line 1981 
      ;
      #line 1982 
      if (channel->band == (unsigned int)NL80211_BAND_5GHZ) {
        #line 1984 
        spur_delta_phase = (spur_offset << 17) / 25;
        #line 1985 
        spur_freq_sigma_delta = spur_delta_phase >> 10;
        #line 1987 
        symbol_width = (unsigned short)3125U;
      }
      else {
        #line 1992 
        spur_delta_phase = (spur_offset << 17) / 25;
        #line 1993 
        spur_freq_sigma_delta = (spur_offset << 8) / 55;
        #line 1995 
        symbol_width = (unsigned short)3125U;
      }
      #line 1998 
      break;
    }
    #line 2006 
    num_symbols_x16 = (spur_offset * 1000 << 4) / (int)symbol_width;
    #line 2009 
    if ((num_symbols_x16 & 15) == 0) 
                                     #line 2011 
                                     num_symbol_offsets = (unsigned char)3U; else 
                                                                    #line 2014 
                                                                    num_symbol_offsets = (unsigned char)4U;
    #line 2016 
    i = (unsigned char)0U;
    #line 2016 
    while ((int)i < (int)num_symbol_offsets) {
      {
        #line 2027 
        unsigned int tmp;
        #line 2019 
        s32 curr_sym_off = (num_symbols_x16 / 16 + (int)i) + 25;
        #line 2027 
        if ((unsigned int)i == 0U || (int)i == (int)num_symbol_offsets + -1) 
          #line 2027 
          tmp = 1U; else 
                         #line 2027 
                         tmp = 2U;
        #line 2027 
        u8 plt_mag_map = (unsigned char)tmp;
        #line 2031 
        if ((unsigned int)curr_sym_off <= 32U) {
          #line 2032 
          if (curr_sym_off <= 25) 
                                  #line 2033 
                                  pilot_mask[0] |= (unsigned int)(1 << curr_sym_off);
          else 
            #line 2034 
            if (curr_sym_off > 26) 
                                   #line 2035 
                                   pilot_mask[0] |= (unsigned int)(1 << (curr_sym_off + -1));
        }
        else 
          #line 2036 
          if ((unsigned int)curr_sym_off + 4294967263U <= 19U) 
                                                               #line 2037 
                                                               pilot_mask[1] |= (unsigned int)(1 << (curr_sym_off + -33));
        #line 2040 
        if ((unsigned int)curr_sym_off + 1U <= 15U) 
                                                    #line 2041 
                                                    mag_mask[0] |= (unsigned int)((int)plt_mag_map << (curr_sym_off + 1) * 2);
        else 
          #line 2043 
          if ((unsigned int)curr_sym_off + 4294967281U <= 15U) 
                                                               #line 2044 
                                                               mag_mask[1] |= (unsigned int)((int)plt_mag_map << (curr_sym_off + -15) * 2);
          else 
            #line 2046 
            if ((unsigned int)curr_sym_off + 4294967265U <= 15U) 
                                                                 #line 2047 
                                                                 mag_mask[2] |= (unsigned int)((int)plt_mag_map << (curr_sym_off + -31) * 2);
            else 
              #line 2049 
              if ((unsigned int)curr_sym_off + 4294967249U <= 6U) 
                                                                  #line 2050 
                                                                  mag_mask[3] |= (unsigned int)((int)plt_mag_map << (curr_sym_off + -47) * 2);
      }
      #line 2016 
      i = (u8)((int)i + 1);
    }
    #line 2056 
    ;
    #line 2056 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39180) | 4278190080U,(unsigned short)39180);
    #line 2059 
    ;
    #line 2059 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 1879048192U,(unsigned short)39200);
    #line 2065 
    ath5k_hw_reg_write(ah,(unsigned int)(((spur_delta_phase & 1048575) | ((spur_freq_sigma_delta << 20) & 1072693248)) | 1073741824),(unsigned short)39328);
    #line 2074 
    ath5k_hw_reg_write(ah,pilot_mask[0],(unsigned short)39296);
    #line 2075 
    ;
    #line 2075 
    ;
    #line 2075 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39300) & 4293918720U) | (pilot_mask[1] & 1048575U),(unsigned short)39300);
    #line 2079 
    ath5k_hw_reg_write(ah,pilot_mask[0],(unsigned short)39320);
    #line 2080 
    ;
    #line 2080 
    ;
    #line 2080 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39324) & 4293918720U) | (pilot_mask[1] & 1048575U),(unsigned short)39324);
    #line 2085 
    ath5k_hw_reg_write(ah,mag_mask[0],(unsigned short)39168);
    #line 2086 
    ath5k_hw_reg_write(ah,mag_mask[1],(unsigned short)39172);
    #line 2087 
    ath5k_hw_reg_write(ah,mag_mask[2],(unsigned short)39176);
    #line 2088 
    ;
    #line 2088 
    ;
    #line 2088 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39180) & 4294950912U) | (mag_mask[3] & 16383U),(unsigned short)39180);
    #line 2092 
    ath5k_hw_reg_write(ah,mag_mask[0],(unsigned short)39304);
    #line 2093 
    ath5k_hw_reg_write(ah,mag_mask[1],(unsigned short)39308);
    #line 2094 
    ath5k_hw_reg_write(ah,mag_mask[2],(unsigned short)39312);
    #line 2095 
    ;
    #line 2095 
    ;
    #line 2095 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39316) & 4294950912U) | (mag_mask[3] & 16383U),(unsigned short)39316);
  }
  else {
    #line 2099 
    if ((ath5k_hw_reg_read(ah,(unsigned short)39200) & 1073741824U) != 0U) {
      #line 2102 
      ;
      #line 2102 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39180) & 16777215U,(unsigned short)39180);
      #line 2104 
      ;
      #line 2104 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) & 2415919103U,(unsigned short)39200);
      #line 2108 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39328);
      #line 2111 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39296);
      #line 2112 
      ;
      #line 2112 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39300) & 4293918720U,(unsigned short)39300);
      #line 2116 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39320);
      #line 2117 
      ;
      #line 2117 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39324) & 4293918720U,(unsigned short)39324);
      #line 2122 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39168);
      #line 2123 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39172);
      #line 2124 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39176);
      #line 2125 
      ;
      #line 2125 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39180) & 4294950912U,(unsigned short)39180);
      #line 2129 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39304);
      #line 2130 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39308);
      #line 2131 
      ath5k_hw_reg_write(ah,0U,(unsigned short)39312);
      #line 2132 
      ;
      #line 2132 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39316) & 4294950912U,(unsigned short)39316);
    }
  }
  #line 2134 
  return;
}

#line 2199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_hw_set_def_antenna(struct ath5k_hw *ah, u8 ant)
{
  #line 2201 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) 
                                                   #line 2202 
                                                   ath5k_hw_reg_write(ah,(unsigned int)ant & 7U,(unsigned short)32856);
  #line 2203 
  return;
}

#line 2212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_hw_set_fast_div(struct ath5k_hw *ah, u8 ee_mode, bool enable)
{
  #line 2214 
  switch ((int)ee_mode) {
    #line 2215 
    case 2: 
            #line 2215 
    ;
    #line 2218 
    case 0: 
            #line 2218 
    ;
    #line 2219 
    if ((int)enable != 0) {
      #line 2220 
      ;
      #line 2220 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) & 4294967287U,(unsigned short)39008);
    }
    else {
      #line 2223 
      ;
      #line 2223 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) | 8U,(unsigned short)39008);
    }
    #line 2225 
    break;
    #line 2226 
    case 1: 
            #line 2226 
    ;
    #line 2227 
    ;
    #line 2227 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) | 8U,(unsigned short)39008);
    #line 2229 
    break;
    #line 2230 
    default: 
             #line 2230 
    ;
    #line 2231 
    return;
  }
  #line 2234 
  if ((int)enable != 0) {
    #line 2235 
    ;
    #line 2235 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39280) & 4293132287U) | 1048576U,(unsigned short)39280);
    #line 2238 
    ;
    #line 2238 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)41480) | 8192U,(unsigned short)41480);
  }
  else {
    #line 2241 
    ;
    #line 2241 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39280) & 4293132287U,(unsigned short)39280);
    #line 2244 
    ;
    #line 2244 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)41480) & 4294959103U,(unsigned short)41480);
  }
  #line 2246 
  return;
}

#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_set_antenna_switch(struct ath5k_hw *ah, u8 ee_mode)
{
  #line 2260 
  u8 ant0;
  #line 2260 
  u8 ant1;
  #line 2266 
  if ((unsigned int)ah->ah_ant_mode == 1U) {
    #line 2267 
    ant1 = (unsigned char)1U;
    #line 2267 
    ant0 = ant1;
  }
  else 
    #line 2268 
    if ((unsigned int)ah->ah_ant_mode == 2U) {
      #line 2269 
      ant1 = (unsigned char)2U;
      #line 2269 
      ant0 = ant1;
    }
    else {
      #line 2271 
      ant0 = (unsigned char)1U;
      #line 2272 
      ant1 = (unsigned char)2U;
    }
  #line 2276 
  ;
  #line 2276 
  ;
  #line 2276 
  ath5k_hw_reg_write(ah,((ath5k_hw_reg_read(ah,(unsigned short)39184) & 4294966287U) | ((ah->ah_ant_ctl[(int)ee_mode][0] << 4) & 992U)) | 16U,(unsigned short)39184);
  #line 2282 
  ath5k_hw_reg_write(ah,ah->ah_ant_ctl[(int)ee_mode][(int)ant0],(unsigned short)39264);
  #line 2284 
  ath5k_hw_reg_write(ah,ah->ah_ant_ctl[(int)ee_mode][(int)ant1],(unsigned short)39268);
  #line 2285 
  return;
}

#line 2294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
void ath5k_hw_set_antenna_mode(struct ath5k_hw *ah, u8 ant_mode)
{
  #line 2297 
  bool use_def_for_tx;
  #line 2297 
  bool update_def_on_tx;
  #line 2297 
  bool use_def_for_rts;
  #line 2297 
  bool fast_div;
  #line 2298 
  bool use_def_for_sg;
  #line 2299 
  int ee_mode;
  #line 2300 
  u8 def_ant;
  #line 2300 
  u8 tx_ant;
  #line 2383 
  unsigned int tmp;
  #line 2384 
  unsigned int tmp_0;
  #line 2385 
  unsigned int tmp_1;
  #line 2386 
  unsigned int tmp_2;
  #line 2296 
  struct ieee80211_channel *channel = ah->ah_current_channel;
  #line 2301 
  u32 sta_id1 = 0U;
  #line 2305 
  if (channel == (struct ieee80211_channel *)0) {
    #line 2306 
    ah->ah_ant_mode = ant_mode;
    #line 2307 
    return;
  }
  #line 2310 
  def_ant = ah->ah_def_ant;
  #line 2312 
  ee_mode = ath5k_eeprom_mode_from_channel(ah,channel);
  #line 2314 
  switch ((int)ant_mode) {
    #line 2315 
    case 0: 
            #line 2315 
    ;
    #line 2316 
    tx_ant = (unsigned char)0U;
    #line 2317 
    use_def_for_tx = (_Bool)0;
    #line 2318 
    update_def_on_tx = (_Bool)0;
    #line 2319 
    use_def_for_rts = (_Bool)0;
    #line 2320 
    use_def_for_sg = (_Bool)0;
    #line 2321 
    fast_div = (_Bool)1;
    #line 2322 
    break;
    #line 2323 
    case 1: 
            #line 2323 
    ;
    #line 2324 
    def_ant = (unsigned char)1U;
    #line 2325 
    tx_ant = (unsigned char)1U;
    #line 2326 
    use_def_for_tx = (_Bool)1;
    #line 2327 
    update_def_on_tx = (_Bool)0;
    #line 2328 
    use_def_for_rts = (_Bool)1;
    #line 2329 
    use_def_for_sg = (_Bool)1;
    #line 2330 
    fast_div = (_Bool)0;
    #line 2331 
    break;
    #line 2332 
    case 2: 
            #line 2332 
    ;
    #line 2333 
    def_ant = (unsigned char)2U;
    #line 2334 
    tx_ant = (unsigned char)2U;
    #line 2335 
    use_def_for_tx = (_Bool)1;
    #line 2336 
    update_def_on_tx = (_Bool)0;
    #line 2337 
    use_def_for_rts = (_Bool)1;
    #line 2338 
    use_def_for_sg = (_Bool)1;
    #line 2339 
    fast_div = (_Bool)0;
    #line 2340 
    break;
    #line 2341 
    case 3: 
            #line 2341 
    ;
    #line 2342 
    def_ant = (unsigned char)1U;
    #line 2343 
    tx_ant = (unsigned char)0U;
    #line 2344 
    use_def_for_tx = (_Bool)1;
    #line 2345 
    update_def_on_tx = (_Bool)1;
    #line 2346 
    use_def_for_rts = (_Bool)1;
    #line 2347 
    use_def_for_sg = (_Bool)1;
    #line 2348 
    fast_div = (_Bool)1;
    #line 2349 
    break;
    #line 2350 
    case 4: 
            #line 2350 
    ;
    #line 2351 
    tx_ant = (unsigned char)1U;
    #line 2352 
    use_def_for_tx = (_Bool)0;
    #line 2353 
    update_def_on_tx = (_Bool)0;
    #line 2354 
    use_def_for_rts = (_Bool)1;
    #line 2355 
    use_def_for_sg = (_Bool)0;
    #line 2356 
    fast_div = (_Bool)0;
    #line 2357 
    break;
    #line 2358 
    case 5: 
            #line 2358 
    ;
    #line 2359 
    tx_ant = (unsigned char)1U;
    #line 2360 
    use_def_for_tx = (_Bool)1;
    #line 2361 
    update_def_on_tx = (_Bool)0;
    #line 2362 
    use_def_for_rts = (_Bool)1;
    #line 2363 
    use_def_for_sg = (_Bool)0;
    #line 2364 
    fast_div = (_Bool)1;
    #line 2365 
    break;
    #line 2366 
    case 6: 
            #line 2366 
    ;
    #line 2367 
    def_ant = (unsigned char)1U;
    #line 2368 
    tx_ant = (unsigned char)2U;
    #line 2369 
    use_def_for_tx = (_Bool)0;
    #line 2370 
    update_def_on_tx = (_Bool)0;
    #line 2371 
    use_def_for_rts = (_Bool)0;
    #line 2372 
    use_def_for_sg = (_Bool)0;
    #line 2373 
    fast_div = (_Bool)0;
    #line 2374 
    break;
    #line 2375 
    default: 
             #line 2375 
    ;
    #line 2376 
    return;
  }
  #line 2379 
  ah->ah_tx_ant = tx_ant;
  #line 2380 
  ah->ah_ant_mode = ant_mode;
  #line 2381 
  ah->ah_def_ant = def_ant;
  #line 2383 
  if ((int)use_def_for_tx != 0) 
                                #line 2383 
                                tmp = 2097152U; else 
                                                     #line 2383 
                                                     tmp = 0U;
  #line 2383 
  sta_id1 = tmp | sta_id1;
  #line 2384 
  if ((int)update_def_on_tx != 0) 
                                  #line 2384 
                                  tmp_0 = 4194304U; else 
                                                         #line 2384 
                                                         tmp_0 = 0U;
  #line 2384 
  sta_id1 = tmp_0 | sta_id1;
  #line 2385 
  if ((int)use_def_for_rts != 0) 
                                 #line 2385 
                                 tmp_1 = 8388608U; else 
                                                        #line 2385 
                                                        tmp_1 = 0U;
  #line 2385 
  sta_id1 = tmp_1 | sta_id1;
  #line 2386 
  if ((int)use_def_for_sg != 0) 
                                #line 2386 
                                tmp_2 = 67108864U; else 
                                                        #line 2386 
                                                        tmp_2 = 0U;
  #line 2386 
  sta_id1 = tmp_2 | sta_id1;
  #line 2388 
  ;
  #line 2388 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) & 4213178367U,(unsigned short)32772);
  #line 2390 
  if (sta_id1 != 0U) {
    #line 2391 
    ;
    #line 2391 
    ;
    #line 2391 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) | sta_id1,(unsigned short)32772);
  }
  #line 2393 
  ath5k_hw_set_antenna_switch(ah,(unsigned char)((int)((unsigned char)ee_mode)));
  #line 2396 
  ath5k_hw_set_fast_div(ah,(unsigned char)((int)((unsigned char)ee_mode)),(_Bool)((bool)((int)fast_div) != 0));
  #line 2397 
  ath5k_hw_set_def_antenna(ah,(unsigned char)((int)def_ant));
  #line 2398 
  return;
}

#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static s16 ath5k_get_interpolated_value(s16 target, s16 x_left, s16 x_right, s16 y_left, s16 y_right)
{
  #line 2421 
  s16 ratio;
  #line 2421 
  s16 result;
  #line 2425 
  if ((int)x_left == (int)x_right || (int)y_left == (int)y_right) 
                                                                  #line 2426 
                                                                  return y_left;
  #line 2434 
  ratio = (short)((((int)y_right - (int)y_left) * 100) / ((int)x_right - (int)x_left));
  #line 2437 
  result = (short)(((int)ratio * ((int)target - (int)x_left)) / 100 + (int)y_left);
  #line 2439 
  return result;
}

#line 2456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static s16 ath5k_get_linear_pcdac_min(u8 *stepL, u8 *stepR, s16 *pwrL, s16 *pwrR)
{
  #line 2496 
  s16 __UNIQUE_ID___x565;
  #line 2496 
  int tmp_4;
  #line 2459 
  s8 tmp;
  #line 2460 
  s16 min_pwrL;
  #line 2460 
  s16 min_pwrR;
  #line 2461 
  s16 pwr_i;
  #line 2464 
  if ((int)*stepL == (int)*(stepL + 1U) || (int)*stepR == (int)*(stepR + 1U)) {
    #line 2465 
    s16 __UNIQUE_ID___x563;
    #line 2465 
    int tmp_0;
    {
      #line 2465 
      __UNIQUE_ID___x563 = *pwrL;
      #line 2465 
      s16 __UNIQUE_ID___y564 = *pwrR;
      #line 2465 
      if ((int)__UNIQUE_ID___x563 > (int)__UNIQUE_ID___y564) 
                                                             #line 2465 
                                                             tmp_0 = (int)__UNIQUE_ID___x563; else 
                                                                    #line 2465 
                                                                    tmp_0 = (int)__UNIQUE_ID___y564;
      }
    #line 2465 
    return (short)tmp_0;
  }
  #line 2467 
  if ((int)*pwrL == (int)*(pwrL + 1U)) 
                                       #line 2468 
                                       min_pwrL = *pwrL;
  else {
    #line 2470 
    pwr_i = *pwrL;
    #line 2471 
    while (1) {
      {
        #line 2472 
        pwr_i = (s16)((int)pwr_i - 1);
        #line 2473 
        tmp = (signed char)ath5k_get_interpolated_value((short)((int)pwr_i),(short)((int)*pwrL),
                                     (short)((int)*(pwrL + 1U)),
                                     (short)((int)*stepL),
                                     (short)((int)*(stepL + 1U)));
      }
      #line 2476 
      if (! ((int)tmp > 1)) 
                            #line 2471 
                            break;
    }
    #line 2478 
    min_pwrL = pwr_i;
  }
  #line 2481 
  if ((int)*pwrR == (int)*(pwrR + 1U)) 
                                       #line 2482 
                                       min_pwrR = *pwrR;
  else {
    #line 2484 
    pwr_i = *pwrR;
    #line 2485 
    while (1) {
      {
        #line 2486 
        pwr_i = (s16)((int)pwr_i - 1);
        #line 2487 
        tmp = (signed char)ath5k_get_interpolated_value((short)((int)pwr_i),(short)((int)*pwrR),
                                     (short)((int)*(pwrR + 1U)),
                                     (short)((int)*stepR),
                                     (short)((int)*(stepR + 1U)));
      }
      #line 2490 
      if (! ((int)tmp > 1)) 
                            #line 2485 
                            break;
    }
    #line 2492 
    min_pwrR = pwr_i;
  }
  {
    #line 2496 
    __UNIQUE_ID___x565 = min_pwrL;
    #line 2496 
    s16 __UNIQUE_ID___y566 = min_pwrR;
    #line 2496 
    if ((int)__UNIQUE_ID___x565 > (int)__UNIQUE_ID___y566) 
                                                           #line 2496 
                                                           tmp_4 = (int)__UNIQUE_ID___x565; else 
                                                                    #line 2496 
                                                                    tmp_4 = (int)__UNIQUE_ID___y566;
    }
  #line 2496 
  return (short)tmp_4;
}

#line 2521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_create_power_curve(s16 pmin, s16 pmax, s16 *pwr, u8 *vpd, u8 num_points, u8 *vpd_table, u8 type)
{
  #line 2528 
  int i;
  #line 2526 
  u8 idx[2U] = {(unsigned char)0U, (unsigned char)1U};
  #line 2527 
  s16 pwr_i = (short)((unsigned int)pmin * 2U);
  #line 2530 
  if ((unsigned int)num_points <= 1U) 
                                      #line 2531 
                                      return;
  #line 2537 
  if ((unsigned int)type == 1U) {
    #line 2538 
    pwr_i = pmin;
    #line 2539 
    pmin = (short)0;
    #line 2540 
    pmax = (short)63;
  }
  #line 2545 
  i = 0;
  #line 2545 
  while ((int)((unsigned short)pmax) - (int)((unsigned short)pmin) >= i && i <= 63) {
    {
      #line 2551 
      if ((int)*(pwr + (unsigned long)idx[1]) < (int)pwr_i && (int)idx[1] < (int)num_points + -1) {
        #line 2552 
        idx[0] = (u8)((int)idx[0] + 1);
        #line 2553 
        idx[1] = (u8)((int)idx[1] + 1);
      }
      #line 2556 
      *(vpd_table + (unsigned long)i) = (unsigned char)ath5k_get_interpolated_value((short)((int)pwr_i),
                                   (short)((int)*(pwr + (unsigned long)idx[0])),
                                   (short)((int)*(pwr + (unsigned long)idx[1])),
                                   (short)((int)*(vpd + (unsigned long)idx[0])),
                                   (short)((int)*(vpd + (unsigned long)idx[1])));
      #line 2562 
      pwr_i = (short)((unsigned int)pwr_i + 2U);
    }
    #line 2546 
    i ++;
  }
  #line 2564 
  return;
}

#line 2580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_get_chan_pcal_surrounding_piers(struct ath5k_hw *ah, struct ieee80211_channel *channel, struct ath5k_chan_pcal_info **pcinfo_l, struct ath5k_chan_pcal_info **pcinfo_r)
{
  #line 2586 
  struct ath5k_chan_pcal_info *pcinfo;
  #line 2587 
  u8 idx_l;
  #line 2587 
  u8 idx_r;
  #line 2588 
  u8 mode;
  #line 2588 
  u8 max;
  #line 2588 
  u8 i;
  #line 2585 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 2589 
  u32 target = channel->center_freq;
  #line 2591 
  idx_l = (unsigned char)0U;
  #line 2592 
  idx_r = (unsigned char)0U;
  #line 2594 
  switch ((int)channel->hw_value) {
    #line 2595 
    case 0: 
            #line 2595 
    ;
    #line 2596 
    pcinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_a);
    #line 2597 
    mode = (unsigned char)0U;
    #line 2598 
    break;
    #line 2599 
    case 1: 
            #line 2599 
    ;
    #line 2600 
    pcinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_b);
    #line 2601 
    mode = (unsigned char)1U;
    #line 2602 
    break;
    #line 2603 
    case 2: 
            #line 2603 
    ;
    #line 2604 
    default: 
             #line 2604 
    ;
    #line 2605 
    pcinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_g);
    #line 2606 
    mode = (unsigned char)2U;
    #line 2607 
    break;
  }
  #line 2609 
  max = (unsigned char)((unsigned int)ee->ee_n_piers[(int)mode] + 255U);
  #line 2614 
  if ((unsigned int)pcinfo->freq > target) {
    #line 2615 
    idx_r = (unsigned char)0U;
    #line 2615 
    idx_l = idx_r;
    #line 2616 
    goto done;
  }
  #line 2622 
  if ((unsigned int)(pcinfo + (unsigned long)max)->freq < target) {
    #line 2623 
    idx_r = max;
    #line 2623 
    idx_l = idx_r;
    #line 2624 
    goto done;
  }
  #line 2631 
  i = (unsigned char)0U;
  #line 2631 
  while ((int)i <= (int)max) {
    #line 2636 
    if ((unsigned int)(pcinfo + (unsigned long)i)->freq == target) {
      #line 2637 
      idx_r = i;
      #line 2637 
      idx_l = idx_r;
      #line 2638 
      goto done;
    }
    #line 2644 
    if ((unsigned int)(pcinfo + (unsigned long)i)->freq > target) {
      #line 2645 
      idx_r = i;
      #line 2646 
      idx_l = (unsigned char)((unsigned int)idx_r + 255U);
      #line 2647 
      goto done;
    }
    #line 2631 
    i = (u8)((int)i + 1);
  }
  #line 2651 
  done: 
        #line 2651 
  ;
  #line 2652 
  *pcinfo_l = pcinfo + (unsigned long)idx_l;
  #line 2653 
  *pcinfo_r = pcinfo + (unsigned long)idx_r;
  #line 2654 
  return;
}

#line 2669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_get_rate_pcal_data(struct ath5k_hw *ah, struct ieee80211_channel *channel, struct ath5k_rate_pcal_info *rates)
{
  #line 2674 
  struct ath5k_rate_pcal_info *rpinfo;
  #line 2675 
  u8 idx_l;
  #line 2675 
  u8 idx_r;
  #line 2676 
  u8 mode;
  #line 2676 
  u8 max;
  #line 2676 
  u8 i;
  #line 2673 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 2677 
  u32 target = channel->center_freq;
  #line 2679 
  idx_l = (unsigned char)0U;
  #line 2680 
  idx_r = (unsigned char)0U;
  #line 2682 
  switch ((int)channel->hw_value) {
    #line 2683 
    case 0: 
            #line 2683 
    ;
    #line 2684 
    rpinfo = (struct ath5k_rate_pcal_info *)(& ee->ee_rate_tpwr_a);
    #line 2685 
    mode = (unsigned char)0U;
    #line 2686 
    break;
    #line 2687 
    case 1: 
            #line 2687 
    ;
    #line 2688 
    rpinfo = (struct ath5k_rate_pcal_info *)(& ee->ee_rate_tpwr_b);
    #line 2689 
    mode = (unsigned char)1U;
    #line 2690 
    break;
    #line 2691 
    case 2: 
            #line 2691 
    ;
    #line 2692 
    default: 
             #line 2692 
    ;
    #line 2693 
    rpinfo = (struct ath5k_rate_pcal_info *)(& ee->ee_rate_tpwr_g);
    #line 2694 
    mode = (unsigned char)2U;
    #line 2695 
    break;
  }
  #line 2697 
  max = (unsigned char)((unsigned int)ee->ee_rate_target_pwr_num[(int)mode] + 255U);
  #line 2701 
  if ((unsigned int)rpinfo->freq > target) {
    #line 2702 
    idx_r = (unsigned char)0U;
    #line 2702 
    idx_l = idx_r;
    #line 2703 
    goto done;
  }
  #line 2706 
  if ((unsigned int)(rpinfo + (unsigned long)max)->freq < target) {
    #line 2707 
    idx_r = max;
    #line 2707 
    idx_l = idx_r;
    #line 2708 
    goto done;
  }
  #line 2711 
  i = (unsigned char)0U;
  #line 2711 
  while ((int)i <= (int)max) {
    #line 2713 
    if ((unsigned int)(rpinfo + (unsigned long)i)->freq == target) {
      #line 2714 
      idx_r = i;
      #line 2714 
      idx_l = idx_r;
      #line 2715 
      goto done;
    }
    #line 2718 
    if ((unsigned int)(rpinfo + (unsigned long)i)->freq > target) {
      #line 2719 
      idx_r = i;
      #line 2720 
      idx_l = (unsigned char)((unsigned int)idx_r + 255U);
      #line 2721 
      goto done;
    }
    #line 2711 
    i = (u8)((int)i + 1);
  }
  #line 2725 
  done: 
        #line 2725 
  ;
  #line 2727 
  rates->freq = (unsigned short)target;
  #line 2729 
  rates->target_power_6to24 = (unsigned short)ath5k_get_interpolated_value((short)((int)((short)target)),
                                   (short)((int)((short)(rpinfo + (unsigned long)idx_l)->freq)),
                                   (short)((int)((short)(rpinfo + (unsigned long)idx_r)->freq)),
                                   (short)((int)((short)(rpinfo + (unsigned long)idx_l)->target_power_6to24)),
                                   (short)((int)((short)(rpinfo + (unsigned long)idx_r)->target_power_6to24)));
  #line 2735 
  rates->target_power_36 = (unsigned short)ath5k_get_interpolated_value((short)((int)((short)target)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_l)->freq)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_r)->freq)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_l)->target_power_36)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_r)->target_power_36)));
  #line 2741 
  rates->target_power_48 = (unsigned short)ath5k_get_interpolated_value((short)((int)((short)target)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_l)->freq)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_r)->freq)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_l)->target_power_48)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_r)->target_power_48)));
  #line 2747 
  rates->target_power_54 = (unsigned short)ath5k_get_interpolated_value((short)((int)((short)target)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_l)->freq)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_r)->freq)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_l)->target_power_54)),
                                     (short)((int)((short)(rpinfo + (unsigned long)idx_r)->target_power_54)));
  #line 2752 
  return;
}

#line 2764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_get_max_ctl_power(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 2773 
  u8 rep_idx;
  #line 2774 
  u8 i;
  #line 2774 
  u8 ctl_mode;
  #line 2767 
  struct ath_regulatory *regulatory = ath5k_hw_regulatory(ah);
  #line 2768 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 2769 
  struct ath5k_edge_power *rep = (struct ath5k_edge_power *)(& ee->ee_ctl_pwr);
  #line 2770 
  u8 *ctl_val = (u8 *)(& ee->ee_ctl);
  #line 2771 
  s16 max_chan_pwr = (short)((int)ah->ah_txpower.txp_max_pwr / 4);
  #line 2772 
  s16 edge_pwr = (short)0;
  #line 2775 
  u8 ctl_idx = (unsigned char)255U;
  #line 2776 
  u32 target = channel->center_freq;
  #line 2778 
  ctl_mode = (unsigned char)ath_regd_get_band_ctl(regulatory,channel->band);
  #line 2780 
  switch ((int)channel->hw_value) {
    #line 2781 
    case 0: 
            #line 2781 
    ;
    #line 2782 
    if ((unsigned int)ah->ah_bwmode == 3U) 
                                           #line 2783 
                                           ctl_mode = (unsigned char)((unsigned int)ctl_mode | 3U); else 
                                                                    #line 2785 
                                                                    ctl_mode = ctl_mode;
    #line 2786 
    break;
    #line 2787 
    case 2: 
            #line 2787 
    ;
    #line 2788 
    if ((unsigned int)ah->ah_bwmode == 3U) 
                                           #line 2789 
                                           ctl_mode = (unsigned char)((unsigned int)ctl_mode | 4U); else 
                                                                    #line 2791 
                                                                    ctl_mode = (unsigned char)((unsigned int)ctl_mode | 2U);
    #line 2792 
    break;
    #line 2793 
    case 1: 
            #line 2793 
    ;
    #line 2794 
    ctl_mode = (unsigned char)((unsigned int)ctl_mode | 1U);
    #line 2795 
    break;
    #line 2796 
    default: 
             #line 2796 
    ;
    #line 2797 
    return;
  }
  #line 2800 
  i = (unsigned char)0U;
  #line 2800 
  while ((int)ee->ee_ctls > (int)i) {
    #line 2801 
    if ((int)*(ctl_val + (unsigned long)i) == (int)ctl_mode) {
      #line 2802 
      ctl_idx = i;
      #line 2803 
      break;
    }
    #line 2800 
    i = (u8)((int)i + 1);
  }
  #line 2809 
  if ((unsigned int)ctl_idx == 255U) 
                                     #line 2810 
                                     return;
  #line 2815 
  rep_idx = (unsigned char)((unsigned int)ctl_idx * 8U);
  #line 2823 
  i = (unsigned char)0U;
  #line 2823 
  while ((unsigned int)i <= 7U) {
    #line 2824 
    rep_idx = (unsigned char)((int)rep_idx + (int)i);
    #line 2825 
    if ((unsigned int)(rep + (unsigned long)rep_idx)->freq >= target) 
      #line 2826 
      edge_pwr = (short)(rep + (unsigned long)rep_idx)->edge;
    #line 2823 
    i = (u8)((int)i + 1);
  }
  #line 2829 
  if ((int)edge_pwr != 0) {
    #line 2830 
    s16 __UNIQUE_ID___x567;
    #line 2830 
    int tmp_1;
    {
      #line 2830 
      __UNIQUE_ID___x567 = edge_pwr;
      #line 2830 
      s16 __UNIQUE_ID___y568 = max_chan_pwr;
      #line 2830 
      if ((int)__UNIQUE_ID___x567 < (int)__UNIQUE_ID___y568) 
                                                             #line 2830 
                                                             tmp_1 = (int)__UNIQUE_ID___x567; else 
                                                                    #line 2830 
                                                                    tmp_1 = (int)__UNIQUE_ID___y568;
      }
    #line 2830 
    ah->ah_txpower.txp_max_pwr = (short)((unsigned int)tmp_1 * 4U);
  }
  #line 2832 
  return;
}

#line 2877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_fill_pwr_to_pcdac_table(struct ath5k_hw *ah, s16 *table_min, s16 *table_max)
{
  #line 2882 
  u8 pcdac_0;
  #line 2882 
  u8 pcdac_n;
  #line 2882 
  u8 pcdac_i;
  #line 2882 
  u8 pwr_idx;
  #line 2882 
  u8 i;
  #line 2883 
  s16 min_pwr;
  #line 2883 
  s16 max_pwr;
  #line 2880 
  u8 *pcdac_out = (u8 *)(& ah->ah_txpower.txp_pd_table);
  #line 2881 
  u8 *pcdac_tmp = (u8 *)(& ah->ah_txpower.tmpL[0]);
  #line 2886 
  min_pwr = *table_min;
  #line 2887 
  pcdac_0 = *pcdac_tmp;
  #line 2889 
  max_pwr = *table_max;
  #line 2890 
  pcdac_n = *(pcdac_tmp + (unsigned long)((int)*table_max - (int)*table_min));
  #line 2893 
  pcdac_i = (unsigned char)0U;
  #line 2894 
  i = (unsigned char)0U;
  #line 2894 
  while ((int)i < (int)min_pwr) {
    #line 2895 
    u8 tmp;
    #line 2895 
    tmp = pcdac_i;
    #line 2895 
    pcdac_i = (u8)((int)pcdac_i + 1);
    #line 2895 
    *(pcdac_out + (unsigned long)tmp) = pcdac_0;
    #line 2894 
    i = (u8)((int)i + 1);
  }
  #line 2898 
  pwr_idx = (unsigned char)min_pwr;
  #line 2899 
  i = (unsigned char)0U;
  #line 2899 
  while ((int)pwr_idx <= (int)max_pwr && (unsigned int)pcdac_i <= 63U) {
    {
      #line 2901 
      u8 tmp_0;
      #line 2901 
      tmp_0 = pcdac_i;
      #line 2901 
      pcdac_i = (u8)((int)pcdac_i + 1);
      #line 2901 
      *(pcdac_out + (unsigned long)tmp_0) = *(pcdac_tmp + (unsigned long)i);
      #line 2902 
      pwr_idx = (u8)((int)pwr_idx + 1);
    }
    #line 2900 
    i = (u8)((int)i + 1);
  }
  #line 2906 
  while ((unsigned int)pcdac_i <= 63U) {
    #line 2907 
    u8 tmp_1;
    #line 2907 
    tmp_1 = pcdac_i;
    #line 2907 
    pcdac_i = (u8)((int)pcdac_i + 1);
    #line 2907 
    *(pcdac_out + (unsigned long)tmp_1) = pcdac_n;
  }
  #line 2908 
  return;
}

#line 2927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_combine_linear_pcdac_curves(struct ath5k_hw *ah, s16 *table_min, s16 *table_max, u8 pdcurves)
{
  #line 2931 
  u8 *pcdac_low_pwr;
  #line 2932 
  u8 *pcdac_high_pwr;
  #line 2933 
  u8 *pcdac_tmp;
  #line 2934 
  u8 pwr;
  #line 2935 
  s16 max_pwr_idx;
  #line 2936 
  s16 min_pwr_idx;
  #line 2944 
  u8 edge_flag;
  #line 2945 
  int i;
  #line 2930 
  u8 *pcdac_out = (u8 *)(& ah->ah_txpower.txp_pd_table);
  #line 2937 
  s16 mid_pwr_idx = (short)0;
  #line 2951 
  if ((unsigned int)pdcurves > 1U) {
    #line 2952 
    pcdac_low_pwr = (u8 *)(& ah->ah_txpower.tmpL[1]);
    #line 2953 
    pcdac_high_pwr = (u8 *)(& ah->ah_txpower.tmpL[0]);
    #line 2954 
    mid_pwr_idx = (short)((unsigned int)((int)*(table_max + 1U) - (int)*(table_min + 1U)) + 65535U);
    #line 2955 
    max_pwr_idx = (short)(((int)*table_max - (int)*table_min) / 2);
    #line 2960 
    if ((int)*table_max - (int)*(table_min + 1U) > 126) 
                                                        #line 2961 
                                                        min_pwr_idx = (short)((unsigned int)*table_max + 65410U); else 
                                                                    #line 2963 
                                                                    min_pwr_idx = *(table_min + 1U);
    #line 2967 
    pcdac_tmp = pcdac_high_pwr;
    #line 2969 
    edge_flag = (unsigned char)64U;
  }
  else {
    #line 2971 
    pcdac_low_pwr = (u8 *)(& ah->ah_txpower.tmpL[1]);
    #line 2972 
    pcdac_high_pwr = (u8 *)(& ah->ah_txpower.tmpL[0]);
    #line 2973 
    min_pwr_idx = *table_min;
    #line 2974 
    max_pwr_idx = (short)(((int)*table_max - (int)*table_min) / 2);
    #line 2975 
    pcdac_tmp = pcdac_high_pwr;
    #line 2976 
    edge_flag = (unsigned char)0U;
  }
  #line 2980 
  ah->ah_txpower.txp_min_idx = (unsigned char)((int)min_pwr_idx / 2);
  #line 2983 
  pwr = (unsigned char)max_pwr_idx;
  #line 2984 
  i = 63;
  #line 2984 
  while (i >= 0) {
    #line 2988 
    if ((unsigned int)edge_flag == 64U && ((int)pwr * 2 <= (int)*(table_max + 1U) - (int)*table_min || (unsigned int)pwr == 0U)) {
      #line 2990 
      edge_flag = (unsigned char)0U;
      #line 2991 
      pcdac_tmp = pcdac_low_pwr;
      #line 2992 
      pwr = (unsigned char)((int)mid_pwr_idx / 2);
    }
    #line 2999 
    if ((unsigned int)*(pcdac_tmp + (unsigned long)pwr) == 0U && (unsigned int)edge_flag == 0U) {
      #line 3000 
      while (i >= 0) {
        #line 3001 
        *(pcdac_out + (unsigned long)i) = *(pcdac_out + ((unsigned long)i + (unsigned long)1U));
        #line 3002 
        i --;
      }
      #line 3004 
      break;
    }
    #line 3007 
    *(pcdac_out + (unsigned long)i) = (unsigned char)((int)*(pcdac_tmp + (unsigned long)pwr) | (int)edge_flag);
    #line 3012 
    if ((unsigned int)*(pcdac_out + (unsigned long)i) > 126U) 
                                                              #line 3013 
                                                              *(pcdac_out + (unsigned long)i) = (unsigned char)126U;
    #line 3016 
    pwr = (u8)((int)pwr - 1);
    #line 2984 
    i --;
  }
  #line 3018 
  return;
}

#line 3025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_write_pcdac_table(struct ath5k_hw *ah)
{
  #line 3028 
  int i;
  #line 3027 
  u8 *pcdac_out = (u8 *)(& ah->ah_txpower.txp_pd_table);
  #line 3033 
  i = 0;
  #line 3033 
  while (i <= 31) {
    #line 3034 
    ath5k_hw_reg_write(ah,(unsigned int)(((((int)*(pcdac_out + (unsigned long)(i * 2)) << 8) & 65535) | 255) | (((int)*(pcdac_out + ((unsigned long)(i * 2) + (unsigned long)1U)) << 24) | 16711680)),(unsigned short)((int)((unsigned int)((int)((unsigned short)i) << 2U) + 41344U)));
    #line 3033 
    i ++;
  }
  #line 3038 
  return;
}

#line 3077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_combine_pwr_to_pdadc_curves(struct ath5k_hw *ah, s16 *pwr_min, s16 *pwr_max, u8 pdcurves)
{
  #line 3080 
  u8 gain_boundaries[4U];
  #line 3082 
  u8 *pdadc_tmp;
  #line 3083 
  s16 pdadc_0;
  #line 3084 
  u8 pdadc_i;
  #line 3084 
  u8 pdadc_n;
  #line 3084 
  u8 pwr_step;
  #line 3084 
  u8 pdg;
  #line 3084 
  u8 max_idx;
  #line 3084 
  u8 table_size;
  #line 3085 
  u8 pd_gain_overlap;
  #line 3081 
  u8 *pdadc_out = (u8 *)(& ah->ah_txpower.txp_pd_table);
  #line 3090 
  pd_gain_overlap = (unsigned char)((unsigned int)((unsigned char)ath5k_hw_reg_read(ah,(unsigned short)41580)) & 15U);
  #line 3094 
  pdg = (unsigned char)0U;
  #line 3094 
  pdadc_i = (unsigned char)0U;
  #line 3094 
  while ((int)pdg < (int)pdcurves) {
    #line 3095 
    pdadc_tmp = (u8 *)(& ah->ah_txpower.tmpL[(int)pdg]);
    #line 3097 
    if ((int)pdg == (int)pdcurves + -1) 
                                        #line 3100 
                                        gain_boundaries[(int)pdg] = (unsigned char)((unsigned int)((unsigned char)*(pwr_max + (unsigned long)pdg)) + 4U); else 
                                                                    #line 3104 
                                                                    gain_boundaries[(int)pdg] = (unsigned char)(((int)*(pwr_max + (unsigned long)pdg) + (int)*(pwr_min + ((unsigned long)pdg + (unsigned long)1U))) / 2);
    #line 3109 
    if ((unsigned int)gain_boundaries[(int)pdg] > 63U) 
                                                       #line 3110 
                                                       gain_boundaries[(int)pdg] = (unsigned char)63U;
    #line 3114 
    if ((unsigned int)pdg == 0U) 
                                 #line 3115 
                                 pdadc_0 = (short)0; else 
                                                          #line 3118 
                                                          pdadc_0 = (short)(((int)gain_boundaries[(int)pdg + -1] - (int)*(pwr_min + (unsigned long)pdg)) - (int)pd_gain_overlap);
    #line 3122 
    if ((int)*(pdadc_tmp + 1U) - (int)*pdadc_tmp > 1) 
                                                      #line 3123 
                                                      pwr_step = (unsigned char)((int)*(pdadc_tmp + 1U) - (int)*pdadc_tmp); else 
                                                                    #line 3125 
                                                                    pwr_step = (unsigned char)1U;
    #line 3129 
    while ((int)pdadc_0 < 0 && (int)pdadc_i >= 0) {
      #line 3131 
      u8 tmp_1;
      #line 3130 
      s16 tmp_0 = (short)((int)*pdadc_tmp + (int)pwr_step * (int)pdadc_0);
      #line 3131 
      tmp_1 = pdadc_i;
      #line 3131 
      pdadc_i = (u8)((int)pdadc_i + 1);
      #line 3131 
      if ((int)tmp_0 >= 0) 
                           #line 3131 
                           *(pdadc_out + (unsigned long)tmp_1) = (unsigned char)tmp_0; else 
                                                                    #line 3131 
                                                                    *(pdadc_out + (unsigned long)tmp_1) = (unsigned char)0U;
      #line 3132 
      pdadc_0 = (s16)((int)pdadc_0 + 1);
    }
    #line 3136 
    pdadc_n = (unsigned char)(((int)gain_boundaries[(int)pdg] + (int)pd_gain_overlap) - (int)((unsigned char)*(pwr_min + (unsigned long)pdg)));
    #line 3138 
    table_size = (unsigned char)((int)((unsigned char)*(pwr_max + (unsigned long)pdg)) - (int)((unsigned char)*(pwr_min + (unsigned long)pdg)));
    #line 3139 
    if ((int)pdadc_n < (int)table_size) 
                                        #line 3139 
                                        max_idx = pdadc_n; else 
                                                                #line 3139 
                                                                max_idx = table_size;
    #line 3142 
    while ((int)pdadc_0 < (int)max_idx && (int)pdadc_i >= 0) {
      #line 3143 
      u8 tmp_2;
      #line 3143 
      s16 tmp_3;
      #line 3143 
      tmp_2 = pdadc_i;
      #line 3143 
      pdadc_i = (u8)((int)pdadc_i + 1);
      #line 3143 
      tmp_3 = pdadc_0;
      #line 3143 
      pdadc_0 = (s16)((int)pdadc_0 + 1);
      #line 3143 
      *(pdadc_out + (unsigned long)tmp_2) = *(pdadc_tmp + (unsigned long)tmp_3);
    }
    #line 3146 
    if ((int)pdadc_n <= (int)max_idx) 
                                      #line 3147 
                                      goto __Cont;
    #line 3150 
    if ((int)*(pdadc_tmp + ((unsigned long)table_size + 18446744073709551615U)) - (int)*(pdadc_tmp + ((unsigned long)table_size + 18446744073709551614U)) > 1) 
      #line 3151 
      pwr_step = (unsigned char)((int)*(pdadc_tmp + ((unsigned long)table_size + 18446744073709551615U)) - (int)*(pdadc_tmp + ((unsigned long)table_size + 18446744073709551614U))); else 
                                                                    #line 3154 
                                                                    pwr_step = (unsigned char)1U;
    #line 3157 
    while ((int)pdadc_0 < (int)pdadc_n && (int)pdadc_i >= 0) {
      #line 3161 
      u8 tmp_5;
      #line 3159 
      s16 tmp_4 = (short)((int)*(pdadc_tmp + ((unsigned long)table_size + 18446744073709551615U)) + ((int)pdadc_0 - (int)max_idx) * (int)pwr_step);
      #line 3161 
      tmp_5 = pdadc_i;
      #line 3161 
      pdadc_i = (u8)((int)pdadc_i + 1);
      #line 3161 
      if ((int)tmp_4 <= 127) 
                             #line 3161 
                             *(pdadc_out + (unsigned long)tmp_5) = (unsigned char)tmp_4; else 
                                                                    #line 3161 
                                                                    *(pdadc_out + (unsigned long)tmp_5) = (unsigned char)127U;
      #line 3162 
      pdadc_0 = (s16)((int)pdadc_0 + 1);
    }
    #line 3094 
    __Cont: 
            #line 3094 
    pdg = (u8)((int)pdg + 1);
  }
  #line 3166 
  while ((unsigned int)pdg <= 3U) {
    #line 3167 
    gain_boundaries[(int)pdg] = gain_boundaries[(int)pdg + -1];
    #line 3168 
    pdg = (u8)((int)pdg + 1);
  }
  #line 3171 
  while ((int)pdadc_i >= 0) {
    #line 3172 
    *(pdadc_out + (unsigned long)pdadc_i) = *(pdadc_out + ((unsigned long)pdadc_i + 18446744073709551615U));
    #line 3173 
    pdadc_i = (u8)((int)pdadc_i + 1);
  }
  #line 3177 
  ath5k_hw_reg_write(ah,(unsigned int)((((((int)pd_gain_overlap & 15) | (((int)gain_boundaries[0] << 4) & 1008)) | (((int)gain_boundaries[1] << 10) & 65535)) | (((int)gain_boundaries[2] << 16) & 4128768)) | (((int)gain_boundaries[3] << 22) & 264241152)),(unsigned short)41580);
  #line 3191 
  ah->ah_txpower.txp_min_idx = (unsigned char)*pwr_min;
  #line 3192 
  return;
}

#line 3201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_write_pwr_to_pdadc_table(struct ath5k_hw *ah, u8 ee_mode)
{
  #line 3207 
  u32 reg;
  #line 3208 
  u8 i;
  #line 3203 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 3204 
  u8 *pdadc_out = (u8 *)(& ah->ah_txpower.txp_pd_table);
  #line 3205 
  u8 *pdg_to_idx = (u8 *)(& ee->ee_pdc_to_idx[(int)ee_mode]);
  #line 3206 
  u8 pdcurves = ee->ee_pd_gains[(int)ee_mode];
  #line 3213 
  reg = ath5k_hw_reg_read(ah,(unsigned short)41560);
  #line 3214 
  reg &= 4290789375U;
  #line 3227 
  reg = ((unsigned int)((int)pdcurves << 14) & 65535U) | reg;
  #line 3229 
  switch ((int)pdcurves) {
    #line 3230 
    case 3: 
            #line 3230 
    ;
    #line 3231 
    reg = ((unsigned int)((int)*(pdg_to_idx + 2U) << 20) & 3145728U) | reg;
    #line 3233 
    case 2: 
            #line 3233 
    ;
    #line 3234 
    reg = ((unsigned int)((int)*(pdg_to_idx + 1U) << 18) & 786432U) | reg;
    #line 3236 
    case 1: 
            #line 3236 
    ;
    #line 3237 
    reg = ((unsigned int)((int)*pdg_to_idx << 16) & 196608U) | reg;
    #line 3238 
    break;
  }
  #line 3240 
  ath5k_hw_reg_write(ah,reg,(unsigned short)41560);
  #line 3245 
  i = (unsigned char)0U;
  #line 3245 
  while ((unsigned int)i <= 31U) {
    {
      #line 3246 
      u32 val = get_unaligned_le32((void *)(pdadc_out + (unsigned long)((int)i * 4)));
      #line 3247 
      ath5k_hw_reg_write(ah,val,(unsigned short)((int)((unsigned int)((int)((unsigned short)i) << 2U) + 41600U)));
    }
    #line 3245 
    i = (u8)((int)i + 1);
  }
  #line 3249 
  return;
}

#line 3270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_setup_channel_powertable(struct ath5k_hw *ah, struct ieee80211_channel *channel, u8 ee_mode, u8 type)
{
  #line 3274 
  struct ath5k_pdgain_info *pdg_L;
  #line 3274 
  struct ath5k_pdgain_info *pdg_R;
  #line 3275 
  struct ath5k_chan_pcal_info *pcinfo_L;
  #line 3276 
  struct ath5k_chan_pcal_info *pcinfo_R;
  #line 3279 
  s16 table_min[4U];
  #line 3280 
  s16 table_max[4U];
  #line 3281 
  u8 *tmpL;
  #line 3282 
  u8 *tmpR;
  #line 3284 
  int pdg;
  #line 3284 
  int i;
  #line 3277 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 3278 
  u8 *pdg_curve_to_idx = (u8 *)(& ee->ee_pdc_to_idx[(int)ee_mode]);
  #line 3283 
  u32 target = channel->center_freq;
  #line 3287 
  ath5k_get_chan_pcal_surrounding_piers(ah,channel,& pcinfo_L,& pcinfo_R);
  #line 3293 
  pdg = 0;
  #line 3293 
  while ((int)ee->ee_pd_gains[(int)ee_mode] > pdg) {
    {
      #line 3315 
      s16 __UNIQUE_ID___x569;
      #line 3315 
      int tmp;
      #line 3318 
      s16 __UNIQUE_ID___x571;
      #line 3318 
      int tmp_1;
      #line 3299 
      u8 idx = *(pdg_curve_to_idx + (unsigned long)pdg);
      #line 3302 
      pdg_L = pcinfo_L->pd_curves + (unsigned long)idx;
      #line 3303 
      pdg_R = pcinfo_R->pd_curves + (unsigned long)idx;
      #line 3306 
      tmpL = (u8 *)(& ah->ah_txpower.tmpL[pdg]);
      #line 3307 
      tmpR = (u8 *)(& ah->ah_txpower.tmpR[pdg]);
      {
        #line 3315 
        __UNIQUE_ID___x569 = *(pdg_L->pd_pwr);
        #line 3315 
        s16 __UNIQUE_ID___y570 = *(pdg_R->pd_pwr);
        #line 3315 
        if ((int)__UNIQUE_ID___x569 < (int)__UNIQUE_ID___y570) 
                                                               #line 3315 
                                                               tmp = (int)__UNIQUE_ID___x569; else 
                                                                    #line 3315 
                                                                    tmp = (int)__UNIQUE_ID___y570;
        }
      #line 3315 
      table_min[pdg] = (short)(tmp / 2);
      {
        #line 3318 
        __UNIQUE_ID___x571 = *(pdg_L->pd_pwr + ((unsigned long)pdg_L->pd_points + 18446744073709551615U));
        #line 3318 
        s16 __UNIQUE_ID___y572 = *(pdg_R->pd_pwr + ((unsigned long)pdg_R->pd_points + 18446744073709551615U));
        #line 3318 
        if ((int)__UNIQUE_ID___x571 > (int)__UNIQUE_ID___y572) 
                                                               #line 3318 
                                                               tmp_1 = (int)__UNIQUE_ID___x571; else 
                                                                    #line 3318 
                                                                    tmp_1 = (int)__UNIQUE_ID___y572;
        }
      #line 3318 
      table_max[pdg] = (short)(tmp_1 / 2);
      #line 3324 
      switch ((int)type) {
        #line 3332 
        s16 __UNIQUE_ID___x575;
        #line 3332 
        int tmp_5;
        #line 3328 
        s16 __UNIQUE_ID___x573;
        #line 3328 
        int tmp_3;
        #line 3325 
        case 1: 
                #line 3325 
        ;
        {
          #line 3328 
          __UNIQUE_ID___x573 = *(pdg_L->pd_pwr);
          #line 3328 
          s16 __UNIQUE_ID___y574 = *(pdg_R->pd_pwr);
          #line 3328 
          if ((int)__UNIQUE_ID___x573 < (int)__UNIQUE_ID___y574) 
                                                                 #line 3328 
                                                                 tmp_3 = (int)__UNIQUE_ID___x573; else 
                                                                    #line 3328 
                                                                    tmp_3 = (int)__UNIQUE_ID___y574;
          }
        #line 3328 
        table_min[pdg] = (short)tmp_3;
        {
          #line 3332 
          __UNIQUE_ID___x575 = *(pdg_L->pd_pwr + ((unsigned long)pdg_L->pd_points + 18446744073709551615U));
          #line 3332 
          s16 __UNIQUE_ID___y576 = *(pdg_R->pd_pwr + ((unsigned long)pdg_R->pd_points + 18446744073709551615U));
          #line 3332 
          if ((int)__UNIQUE_ID___x575 > (int)__UNIQUE_ID___y576) 
                                                                 #line 3332 
                                                                 tmp_5 = (int)__UNIQUE_ID___x575; else 
                                                                    #line 3332 
                                                                    tmp_5 = (int)__UNIQUE_ID___y576;
          }
        #line 3331 
        table_max[pdg] = (short)tmp_5;
        #line 3340 
        if ((unsigned int)ee->ee_pd_gains[(int)ee_mode] <= 1U || pdg != 0) {
          #line 3342 
          table_min[pdg] = ath5k_get_linear_pcdac_min(pdg_L->pd_step,pdg_R->pd_step,pdg_L->pd_pwr,pdg_R->pd_pwr);
          #line 3352 
          if ((int)table_max[pdg] - (int)table_min[pdg] > 126) 
                                                               #line 3353 
                                                               table_min[pdg] = (short)((unsigned int)table_max[pdg] + 65410U);
        }
        #line 3357 
        case 0: 
                #line 3357 
        ;
        #line 3358 
        case 2: 
                #line 3358 
        ;
        #line 3360 
        ath5k_create_power_curve((short)((int)table_min[pdg]),(short)((int)table_max[pdg]),pdg_L->pd_pwr,pdg_L->pd_step,(unsigned char)((int)pdg_L->pd_points),tmpL,(unsigned char)((int)type));
        #line 3369 
        if (pcinfo_L == pcinfo_R) 
                                  #line 3370 
                                  goto __Cont;
        #line 3372 
        ath5k_create_power_curve((short)((int)table_min[pdg]),(short)((int)table_max[pdg]),pdg_R->pd_pwr,pdg_R->pd_step,(unsigned char)((int)pdg_R->pd_points),tmpR,(unsigned char)((int)type));
        #line 3377 
        break;
        #line 3378 
        default: 
                 #line 3378 
        ;
        #line 3379 
        return -22;
      }
      #line 3387 
      i = 0;
      #line 3387 
      while ((int)((unsigned short)table_max[pdg]) - (int)((unsigned short)table_min[pdg]) > i && i <= 63) {
        #line 3389 
        *(tmpL + (unsigned long)i) = (unsigned char)ath5k_get_interpolated_value((short)((int)((short)target)),
                                     (short)((int)((short)pcinfo_L->freq)),
                                     (short)((int)((short)pcinfo_R->freq)),
                                     (short)((int)*(tmpL + (unsigned long)i)),
                                     (short)((int)*(tmpR + (unsigned long)i)));
        #line 3388 
        i ++;
      }
    }
    #line 3293 
    __Cont: 
            #line 3293 
    pdg ++;
  }
  #line 3408 
  ah->ah_txpower.txp_min_pwr = ath5k_get_interpolated_value((short)((int)((short)target)),(short)((int)((short)pcinfo_L->freq)),(short)((int)((short)pcinfo_R->freq)),(short)((int)pcinfo_L->min_pwr),(short)((int)pcinfo_R->min_pwr));
  #line 3413 
  ah->ah_txpower.txp_max_pwr = ath5k_get_interpolated_value((short)((int)((short)target)),(short)((int)((short)pcinfo_L->freq)),(short)((int)((short)pcinfo_R->freq)),(short)((int)pcinfo_L->max_pwr),(short)((int)pcinfo_R->max_pwr));
  #line 3419 
  switch ((int)type) {
    #line 3420 
    case 1: 
            #line 3420 
    ;
    #line 3424 
    ath5k_combine_linear_pcdac_curves(ah,(s16 *)(& table_min),(s16 *)(& table_max),(unsigned char)((int)ee->ee_pd_gains[(int)ee_mode]));
    #line 3430 
    ah->ah_txpower.txp_offset = (short)(64U - (unsigned int)((int)table_max[0] / 2));
    #line 3431 
    break;
    #line 3432 
    case 0: 
            #line 3432 
    ;
    #line 3435 
    ath5k_fill_pwr_to_pcdac_table(ah,(s16 *)(& table_min),(s16 *)(& table_max));
    #line 3438 
    ah->ah_txpower.txp_min_idx = (unsigned char)0U;
    #line 3439 
    ah->ah_txpower.txp_offset = (short)0;
    #line 3440 
    break;
    #line 3441 
    case 2: 
            #line 3441 
    ;
    #line 3444 
    ath5k_combine_pwr_to_pdadc_curves(ah,(s16 *)(& table_min),(s16 *)(& table_max),(unsigned char)((int)ee->ee_pd_gains[(int)ee_mode]));
    #line 3449 
    ah->ah_txpower.txp_offset = table_min[0];
    #line 3450 
    break;
    #line 3451 
    default: 
             #line 3451 
    ;
    #line 3452 
    return -22;
  }
  #line 3455 
  ah->ah_txpower.txp_setup = (_Bool)1;
  #line 3457 
  return 0;
}

#line 3467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_write_channel_powertable(struct ath5k_hw *ah, u8 ee_mode, u8 type)
{
  #line 3469 
  if ((unsigned int)type == 2U) 
                                #line 3470 
                                ath5k_write_pwr_to_pdadc_table(ah,(unsigned char)((int)ee_mode)); else 
                                                                    #line 3472 
                                                                    ath5k_write_pcdac_table(ah);
  #line 3473 
  return;
}

#line 3506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static void ath5k_setup_rate_powertable(struct ath5k_hw *ah, u16 max_pwr, struct ath5k_rate_pcal_info *rate_info, u8 ee_mode)
{
  #line 3543 
  u16 __UNIQUE_ID___x597;
  #line 3535 
  u16 __UNIQUE_ID___x589;
  #line 3527 
  u16 __UNIQUE_ID___x581;
  #line 3543 
  int tmp_19;
  #line 3535 
  int tmp_11;
  #line 3527 
  int tmp_3;
  #line 3545 
  u16 __UNIQUE_ID___x599;
  #line 3537 
  u16 __UNIQUE_ID___x591;
  #line 3528 
  u16 __UNIQUE_ID___x583;
  #line 3545 
  int tmp_21;
  #line 3537 
  int tmp_13;
  #line 3528 
  int tmp_5;
  #line 3548 
  u16 __UNIQUE_ID___x601;
  #line 3539 
  u16 __UNIQUE_ID___x593;
  #line 3529 
  u16 __UNIQUE_ID___x585;
  #line 3517 
  u16 __UNIQUE_ID___x577;
  #line 3548 
  int tmp_23;
  #line 3539 
  int tmp_15;
  #line 3529 
  int tmp_7;
  #line 3517 
  int tmp;
  #line 3541 
  u16 __UNIQUE_ID___x595;
  #line 3533 
  u16 __UNIQUE_ID___x587;
  #line 3541 
  int tmp_17;
  #line 3533 
  int tmp_9;
  #line 3510 
  unsigned int i;
  #line 3511 
  u16 *rates;
  #line 3512 
  s16 rate_idx_scaled = (short)0;
  #line 3516 
  max_pwr = (unsigned short)((unsigned int)max_pwr * 2U);
  {
    #line 3517 
    __UNIQUE_ID___x577 = max_pwr;
    #line 3517 
    unsigned short __UNIQUE_ID___y578 = (unsigned short)ah->ah_txpower.txp_max_pwr;
    #line 3517 
    if ((int)__UNIQUE_ID___x577 < (int)__UNIQUE_ID___y578) 
                                                           #line 3517 
                                                           tmp = (int)__UNIQUE_ID___x577; else 
                                                                    #line 3517 
                                                                    tmp = (int)__UNIQUE_ID___y578;
    }
  #line 3517 
  max_pwr = (unsigned short)(tmp / 2);
  #line 3520 
  rates = (u16 *)(& ah->ah_txpower.txp_rates_power_table);
  #line 3523 
  i = 0U;
  #line 3523 
  while (i <= 4U) {
    #line 3524 
    u16 __UNIQUE_ID___x579;
    #line 3524 
    int tmp_1;
    {
      #line 3524 
      __UNIQUE_ID___x579 = max_pwr;
      #line 3524 
      u16 __UNIQUE_ID___y580 = rate_info->target_power_6to24;
      #line 3524 
      if ((int)__UNIQUE_ID___x579 < (int)__UNIQUE_ID___y580) 
                                                             #line 3524 
                                                             tmp_1 = (int)__UNIQUE_ID___x579; else 
                                                                    #line 3524 
                                                                    tmp_1 = (int)__UNIQUE_ID___y580;
      }
    #line 3524 
    *(rates + (unsigned long)i) = (unsigned short)tmp_1;
    #line 3523 
    i ++;
  }
  {
    #line 3527 
    __UNIQUE_ID___x581 = *rates;
    #line 3527 
    u16 __UNIQUE_ID___y582 = rate_info->target_power_36;
    #line 3527 
    if ((int)__UNIQUE_ID___x581 < (int)__UNIQUE_ID___y582) 
                                                           #line 3527 
                                                           tmp_3 = (int)__UNIQUE_ID___x581; else 
                                                                    #line 3527 
                                                                    tmp_3 = (int)__UNIQUE_ID___y582;
    }
  #line 3527 
  *(rates + 5U) = (unsigned short)tmp_3;
  {
    #line 3528 
    __UNIQUE_ID___x583 = *rates;
    #line 3528 
    u16 __UNIQUE_ID___y584 = rate_info->target_power_48;
    #line 3528 
    if ((int)__UNIQUE_ID___x583 < (int)__UNIQUE_ID___y584) 
                                                           #line 3528 
                                                           tmp_5 = (int)__UNIQUE_ID___x583; else 
                                                                    #line 3528 
                                                                    tmp_5 = (int)__UNIQUE_ID___y584;
    }
  #line 3528 
  *(rates + 6U) = (unsigned short)tmp_5;
  {
    #line 3529 
    __UNIQUE_ID___x585 = *rates;
    #line 3529 
    u16 __UNIQUE_ID___y586 = rate_info->target_power_54;
    #line 3529 
    if ((int)__UNIQUE_ID___x585 < (int)__UNIQUE_ID___y586) 
                                                           #line 3529 
                                                           tmp_7 = (int)__UNIQUE_ID___x585; else 
                                                                    #line 3529 
                                                                    tmp_7 = (int)__UNIQUE_ID___y586;
    }
  #line 3529 
  *(rates + 7U) = (unsigned short)tmp_7;
  {
    #line 3533 
    __UNIQUE_ID___x587 = *rates;
    #line 3533 
    u16 __UNIQUE_ID___y588 = rate_info->target_power_6to24;
    #line 3533 
    if ((int)__UNIQUE_ID___x587 < (int)__UNIQUE_ID___y588) 
                                                           #line 3533 
                                                           tmp_9 = (int)__UNIQUE_ID___x587; else 
                                                                    #line 3533 
                                                                    tmp_9 = (int)__UNIQUE_ID___y588;
    }
  #line 3533 
  *(rates + 8U) = (unsigned short)tmp_9;
  {
    #line 3535 
    __UNIQUE_ID___x589 = *rates;
    #line 3535 
    u16 __UNIQUE_ID___y590 = rate_info->target_power_36;
    #line 3535 
    if ((int)__UNIQUE_ID___x589 < (int)__UNIQUE_ID___y590) 
                                                           #line 3535 
                                                           tmp_11 = (int)__UNIQUE_ID___x589; else 
                                                                    #line 3535 
                                                                    tmp_11 = (int)__UNIQUE_ID___y590;
    }
  #line 3535 
  *(rates + 9U) = (unsigned short)tmp_11;
  {
    #line 3537 
    __UNIQUE_ID___x591 = *rates;
    #line 3537 
    u16 __UNIQUE_ID___y592 = rate_info->target_power_36;
    #line 3537 
    if ((int)__UNIQUE_ID___x591 < (int)__UNIQUE_ID___y592) 
                                                           #line 3537 
                                                           tmp_13 = (int)__UNIQUE_ID___x591; else 
                                                                    #line 3537 
                                                                    tmp_13 = (int)__UNIQUE_ID___y592;
    }
  #line 3537 
  *(rates + 10U) = (unsigned short)tmp_13;
  {
    #line 3539 
    __UNIQUE_ID___x593 = *rates;
    #line 3539 
    u16 __UNIQUE_ID___y594 = rate_info->target_power_48;
    #line 3539 
    if ((int)__UNIQUE_ID___x593 < (int)__UNIQUE_ID___y594) 
                                                           #line 3539 
                                                           tmp_15 = (int)__UNIQUE_ID___x593; else 
                                                                    #line 3539 
                                                                    tmp_15 = (int)__UNIQUE_ID___y594;
    }
  #line 3539 
  *(rates + 11U) = (unsigned short)tmp_15;
  {
    #line 3541 
    __UNIQUE_ID___x595 = *rates;
    #line 3541 
    u16 __UNIQUE_ID___y596 = rate_info->target_power_48;
    #line 3541 
    if ((int)__UNIQUE_ID___x595 < (int)__UNIQUE_ID___y596) 
                                                           #line 3541 
                                                           tmp_17 = (int)__UNIQUE_ID___x595; else 
                                                                    #line 3541 
                                                                    tmp_17 = (int)__UNIQUE_ID___y596;
    }
  #line 3541 
  *(rates + 12U) = (unsigned short)tmp_17;
  {
    #line 3543 
    __UNIQUE_ID___x597 = *rates;
    #line 3543 
    u16 __UNIQUE_ID___y598 = rate_info->target_power_54;
    #line 3543 
    if ((int)__UNIQUE_ID___x597 < (int)__UNIQUE_ID___y598) 
                                                           #line 3543 
                                                           tmp_19 = (int)__UNIQUE_ID___x597; else 
                                                                    #line 3543 
                                                                    tmp_19 = (int)__UNIQUE_ID___y598;
    }
  #line 3543 
  *(rates + 13U) = (unsigned short)tmp_19;
  {
    #line 3545 
    __UNIQUE_ID___x599 = *rates;
    #line 3545 
    u16 __UNIQUE_ID___y600 = rate_info->target_power_54;
    #line 3545 
    if ((int)__UNIQUE_ID___x599 < (int)__UNIQUE_ID___y600) 
                                                           #line 3545 
                                                           tmp_21 = (int)__UNIQUE_ID___x599; else 
                                                                    #line 3545 
                                                                    tmp_21 = (int)__UNIQUE_ID___y600;
    }
  #line 3545 
  *(rates + 14U) = (unsigned short)tmp_21;
  {
    #line 3548 
    __UNIQUE_ID___x601 = *rates;
    #line 3548 
    u16 __UNIQUE_ID___y602 = rate_info->target_power_6to24;
    #line 3548 
    if ((int)__UNIQUE_ID___x601 < (int)__UNIQUE_ID___y602) 
                                                           #line 3548 
                                                           tmp_23 = (int)__UNIQUE_ID___x601; else 
                                                                    #line 3548 
                                                                    tmp_23 = (int)__UNIQUE_ID___y602;
    }
  #line 3548 
  *(rates + 15U) = (unsigned short)tmp_23;
  #line 3554 
  if ((unsigned int)ee_mode == 2U && (unsigned int)ah->ah_phy_revision <= 65U) {
    #line 3556 
    i = 8U;
    #line 3556 
    while (i <= 15U) {
      #line 3557 
      *(rates + (unsigned long)i) = (unsigned short)((int)*(rates + (unsigned long)i) - (int)((unsigned short)ah->ah_txpower.txp_cck_ofdm_gainf_delta));
      #line 3556 
      i ++;
    }
  }
  #line 3565 
  ah->ah_txpower.txp_min_pwr = (short)((unsigned int)*(rates + 7U) * 2U);
  #line 3566 
  ah->ah_txpower.txp_cur_pwr = (short)((unsigned int)*rates * 2U);
  #line 3571 
  ah->ah_txpower.txp_ofdm = (short)*(rates + 7U);
  #line 3576 
  i = 0U;
  #line 3576 
  while (i <= 15U) {
    #line 3577 
    rate_idx_scaled = (short)((int)*(rates + (unsigned long)i) + (int)ah->ah_txpower.txp_offset);
    #line 3579 
    if ((int)rate_idx_scaled > 63) 
                                   #line 3580 
                                   rate_idx_scaled = (short)63;
    #line 3581 
    if ((int)rate_idx_scaled < 0) 
                                  #line 3582 
                                  rate_idx_scaled = (short)0;
    #line 3583 
    *(rates + (unsigned long)i) = (unsigned short)rate_idx_scaled;
    #line 3576 
    i ++;
  }
  #line 3585 
  return;
}

#line 3598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
static int ath5k_hw_txpower(struct ath5k_hw *ah, struct ieee80211_channel *channel, u8 txpower)
{
  #line 3601 
  struct ath5k_rate_pcal_info rate_info;
  #line 3603 
  int ee_mode;
  #line 3604 
  u8 type;
  #line 3605 
  int ret;
  #line 3602 
  struct ieee80211_channel *curr_channel = ah->ah_current_channel;
  #line 3607 
  if ((unsigned int)txpower > 63U) {
    #line 3608 
    if (net_ratelimit() != 0) 
                              #line 3608 
                              _ath5k_printk(ah,(char *)"\001",(char *)"invalid tx power: %u\n",(int)txpower);
    #line 3609 
    return -22;
  }
  #line 3612 
  ee_mode = ath5k_eeprom_mode_from_channel(ah,channel);
  #line 3615 
  switch ((unsigned int)ah->ah_radio) {
    #line 3616 
    case (unsigned int)0: 
                          #line 3616 
    ;
    #line 3618 
    return 0;
    #line 3619 
    case (unsigned int)1: 
                          #line 3619 
    ;
    #line 3620 
    type = (unsigned char)0U;
    #line 3621 
    break;
    #line 3622 
    case (unsigned int)2: 
                          #line 3622 
    ;
    #line 3623 
    type = (unsigned char)1U;
    #line 3624 
    break;
    #line 3625 
    case (unsigned int)3: 
                          #line 3625 
    ;
    #line 3626 
    case (unsigned int)4: 
                          #line 3626 
    ;
    #line 3627 
    case (unsigned int)5: 
                          #line 3627 
    ;
    #line 3628 
    case (unsigned int)6: 
                          #line 3628 
    ;
    #line 3629 
    case (unsigned int)7: 
                          #line 3629 
    ;
    #line 3630 
    type = (unsigned char)2U;
    #line 3631 
    break;
    #line 3632 
    default: 
             #line 3632 
    ;
    #line 3633 
    return -22;
  }
  #line 3640 
  if ((! ah->ah_txpower.txp_setup || (int)channel->hw_value != (int)curr_channel->hw_value) || channel->center_freq != curr_channel->center_freq) {
    #line 3645 
    int requested_txpower = ah->ah_txpower.txp_requested;
    #line 3647 
    memset((void *)(& ah->ah_txpower),0,728UL);
    #line 3650 
    ah->ah_txpower.txp_tpc = (_Bool)0;
    #line 3652 
    ah->ah_txpower.txp_requested = requested_txpower;
    #line 3655 
    ret = ath5k_setup_channel_powertable(ah,channel,(unsigned char)((int)((unsigned char)ee_mode)),(unsigned char)((int)type));
    #line 3657 
    if (ret != 0) 
                  #line 3658 
                  return ret;
  }
  #line 3662 
  ath5k_write_channel_powertable(ah,(unsigned char)((int)((unsigned char)ee_mode)),(unsigned char)((int)type));
  #line 3665 
  ath5k_get_max_ctl_power(ah,channel);
  #line 3675 
  ath5k_get_rate_pcal_data(ah,channel,& rate_info);
  #line 3678 
  ath5k_setup_rate_powertable(ah,(unsigned short)((int)txpower),& rate_info,(unsigned char)((int)((unsigned char)ee_mode)));
  #line 3681 
  ath5k_hw_reg_write(ah,(unsigned int)((((((int)ah->ah_txpower.txp_rates_power_table[3] << 24) & 1056964608) | (((int)ah->ah_txpower.txp_rates_power_table[2] << 16) & 4128768)) | (((int)ah->ah_txpower.txp_rates_power_table[1] << 8) & 16128)) | ((int)ah->ah_txpower.txp_rates_power_table[0] & 63)),(unsigned short)39220);
  #line 3685 
  ath5k_hw_reg_write(ah,(unsigned int)((((((int)ah->ah_txpower.txp_rates_power_table[7] << 24) & 1056964608) | (((int)ah->ah_txpower.txp_rates_power_table[6] << 16) & 4128768)) | (((int)ah->ah_txpower.txp_rates_power_table[5] << 8) & 16128)) | ((int)ah->ah_txpower.txp_rates_power_table[4] & 63)),(unsigned short)39224);
  #line 3689 
  ath5k_hw_reg_write(ah,(unsigned int)((((((int)ah->ah_txpower.txp_rates_power_table[10] << 24) & 1056964608) | (((int)ah->ah_txpower.txp_rates_power_table[9] << 16) & 4128768)) | (((int)ah->ah_txpower.txp_rates_power_table[15] << 8) & 16128)) | ((int)ah->ah_txpower.txp_rates_power_table[8] & 63)),(unsigned short)41524);
  #line 3693 
  ath5k_hw_reg_write(ah,(unsigned int)((((((int)ah->ah_txpower.txp_rates_power_table[14] << 24) & 1056964608) | (((int)ah->ah_txpower.txp_rates_power_table[13] << 16) & 4128768)) | (((int)ah->ah_txpower.txp_rates_power_table[12] << 8) & 16128)) | ((int)ah->ah_txpower.txp_rates_power_table[11] & 63)),(unsigned short)41528);
  #line 3698 
  if ((int)ah->ah_txpower.txp_tpc != 0) {
    #line 3699 
    ath5k_hw_reg_write(ah,127U,(unsigned short)39228);
    #line 3702 
    ath5k_hw_reg_write(ah,63U,(unsigned short)33000);
  }
  else 
       #line 3708 
       ath5k_hw_reg_write(ah,63U,(unsigned short)39228);
  #line 3712 
  return 0;
}

#line 3724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_set_txpower_limit(struct ath5k_hw *ah, u8 txpower)
{
  #line 3726 
  if ((long)((ah->debug.level & 64U) != 0U) != 0L) {
    #line 3726 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 3726 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_set_txpower_limit",3726,(int)txpower);
  }
  #line 3729 
  return ath5k_hw_txpower(ah,ah->ah_current_channel,
                         (unsigned char)((int)txpower));
}

#line 3751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/phy.c"
int ath5k_hw_phy_init(struct ath5k_hw *ah, struct ieee80211_channel *channel, u8 mode, bool fast)
{
  #line 3754 
  struct ieee80211_channel *curr_channel;
  #line 3755 
  int ret;
  #line 3755 
  int i;
  #line 3756 
  u32 phy_tst1;
  #line 3800 
  int tmp_1;
  #line 3757 
  ret = 0;
  #line 3765 
  curr_channel = ah->ah_current_channel;
  #line 3766 
  if ((int)fast != 0 && (int)channel->hw_value != (int)curr_channel->hw_value) 
    #line 3767 
    return -22;
  #line 3773 
  if ((int)fast != 0) {
    #line 3774 
    ;
    #line 3774 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39292) | 1U,(unsigned short)39292);
    #line 3776 
    i = 0;
    #line 3776 
    while (i <= 99) {
      {
        #line 3777 
        if (ath5k_hw_reg_read(ah,(unsigned short)39968) != 0U) 
                                                               #line 3778 
                                                               break;
        #line 3779 
        __const_udelay(21475UL);
      }
      #line 3776 
      i ++;
    }
    #line 3782 
    if (i > 99) 
                #line 3783 
                return -5;
    #line 3786 
    ret = ath5k_hw_channel(ah,channel);
    #line 3787 
    if (ret != 0) 
                  #line 3788 
                  return ret;
    #line 3790 
    ath5k_hw_wait_for_synth(ah,channel);
  }
  #line 3800 
  if (ah->ah_txpower.txp_requested != 0) 
                                         #line 3800 
                                         tmp_1 = (int)((unsigned int)((unsigned char)ah->ah_txpower.txp_requested) * 2U); else 
                                                                    #line 3800 
                                                                    tmp_1 = 63;
  #line 3800 
  ;
  #line 3800 
  ;
  #line 3800 
  ret = ath5k_hw_txpower(ah,channel,(unsigned char)tmp_1);
  #line 3803 
  if (ret != 0) 
                #line 3804 
                return ret;
  #line 3807 
  if (ah->ah_version == (unsigned int)AR5K_AR5212 && (unsigned int)channel->hw_value != 1U) {
    #line 3810 
    ret = ath5k_hw_write_ofdm_timings(ah,channel);
    #line 3811 
    if (ret != 0) 
                  #line 3812 
                  return ret;
    #line 3817 
    if (ah->ah_mac_srev > 143U) 
                                #line 3818 
                                ath5k_hw_set_spur_mitigation_filter(ah,channel);
  }
  #line 3830 
  if ((int)fast != 0) {
    #line 3834 
    ;
    #line 3834 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39292) & 4294967294U,(unsigned short)39292);
    #line 3840 
    ;
    #line 3840 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) | 2U,(unsigned short)39008);
    #line 3843 
    return ret;
  }
  #line 3852 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 3858 
    ret = ath5k_hw_rfgain_init(ah,channel->band);
    #line 3859 
    if (ret != 0) 
                  #line 3860 
                  return ret;
    #line 3862 
    usleep_range(1000UL,1500UL);
    #line 3867 
    ret = ath5k_hw_rfregs_init(ah,channel,(unsigned int)mode);
    #line 3868 
    if (ret != 0) 
                  #line 3869 
                  return ret;
    #line 3873 
    if (ah->ah_radio == (unsigned int)AR5K_RF5111) 
      #line 3874 
      if ((unsigned int)mode == 1U) {
        #line 3875 
        ;
        #line 3875 
        ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)48) | 8U,(unsigned short)48);
      }
      else {
        #line 3878 
        ;
        #line 3878 
        ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)48) & 4294967287U,(unsigned short)48);
      }
  }
  else 
    #line 3882 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) {
      #line 3883 
      usleep_range(1000UL,1500UL);
      #line 3885 
      ath5k_hw_reg_write(ah,2U,(unsigned short)38940);
      #line 3886 
      usleep_range(1000UL,1500UL);
    }
  #line 3890 
  ret = ath5k_hw_channel(ah,channel);
  #line 3891 
  if (ret != 0) 
                #line 3892 
                return ret;
  #line 3899 
  ath5k_hw_reg_write(ah,1U,(unsigned short)38940);
  #line 3901 
  ath5k_hw_wait_for_synth(ah,channel);
  #line 3907 
  phy_tst1 = ath5k_hw_reg_read(ah,(unsigned short)38920);
  #line 3908 
  ath5k_hw_reg_write(ah,14336U,(unsigned short)38920);
  #line 3909 
  i = 0;
  #line 3909 
  while (i <= 20) {
    {
      #line 3910 
      if ((ath5k_hw_reg_read(ah,(unsigned short)39972) & 16U) == 0U) 
        #line 3911 
        break;
      #line 3912 
      usleep_range(200UL,250UL);
    }
    #line 3909 
    i ++;
  }
  #line 3914 
  ath5k_hw_reg_write(ah,phy_tst1,(unsigned short)38920);
  #line 3935 
  ;
  #line 3935 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39008) | 3U,(unsigned short)39008);
  #line 3940 
  ah->ah_iq_cal_needed = (_Bool)0;
  #line 3941 
  if ((unsigned int)mode != 1U) {
    #line 3942 
    ah->ah_iq_cal_needed = (_Bool)1;
    #line 3943 
    ;
    #line 3943 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 61440U,(unsigned short)39200);
    #line 3945 
    ;
    #line 3945 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 65536U,(unsigned short)39200);
  }
  #line 3951 
  if (ath5k_hw_register_timeout(ah,39008U,1U,0U,(_Bool)0) != 0) {
    #line 3953 
    if (net_ratelimit() != 0) 
                              #line 3953 
                              _ath5k_printk(ah,(char *)"\001",(char *)"gain calibration timeout (%uMHz)\n",channel->center_freq);
  }
  #line 3958 
  ath5k_hw_set_antenna_mode(ah,(unsigned char)((int)ah->ah_ant_mode));
  #line 3960 
  return ret;
}

#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 331 
  return ldv_kmalloc_array(n,size,flags);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list);   */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list);   */
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_write((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3134 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3136 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list, struct list_head *head)
{
  #line 213 
  __list_del_entry(list);
  #line 214 
  list_add_tail(list,head);
  #line 215 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3138 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void *ERR_PTR(long error);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static bool IS_ERR(void *ptr);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_txbuflock_of_ath5k_hw(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_rxbuflock_of_ath5k_hw(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_lock_of_ath5k_txq(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_block_of_ath5k_hw(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_lock_of_ath5k_txq(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_rxbuflock_of_ath5k_hw(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_block_of_ath5k_hw(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1012  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_cc_lock_of_ath_common(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_txbuflock_of_ath5k_hw(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_rxbuflock_of_ath5k_hw(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_lock_of_ath5k_txq(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_block_of_ath5k_hw(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_lock_of_ath5k_txq(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_rxbuflock_of_ath5k_hw(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_block_of_ath5k_hw(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_cc_lock_of_ath_common(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_irqrestore_irqlock_of_ath5k_hw(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_irqrestore_txbuflock_of_ath5k_hw(spinlock_t *lock, unsigned long flags);
#line 26 
#line 982 
static void cif_mutex_lock_lock_of_ath5k_hw(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 858 
static void cif___ldv_spin_lock_irqlock_of_ath5k_hw(spinlock_t *lock);
#line 35 
#line 894 
static void cif___ldv_spin_lock_txbuflock_of_ath5k_hw(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 25 
#line 25 
void *ldv_err_ptr(long error);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 223 
#line 223 
int rcu_read_lock_sched_held(void);
#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void)
{
  #line 733 
  __preempt_count_add(1);
  #line 734 
  ldv_inline_asm();
  #line 735 
  return;
}

#line 752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace(void)
{
  #line 757 
  ldv_inline_asm();
  #line 755 
  __preempt_count_sub(1);
  #line 757 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_mutex_unlock_lock_of_ath5k_hw(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 471  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 996  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1004  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 966  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 974  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_tasklet_hi_schedule(struct tasklet_struct *t);
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 687 
#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_a4(__le16 fc)
{
  #line 286 
  __le16 tmp = (unsigned short)768U;
  #line 287 
  return (_Bool)(((int)fc & (int)tmp) == (int)tmp);
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_protected(__le16 fc)
{
  #line 332 
  return (_Bool)(((int)fc & 16384) != 0);
}

#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data_qos(__le16 fc)
{
  #line 384 
  return (_Bool)(((int)fc & 140) == 136);
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_probe_resp(__le16 fc)
{
  #line 458 
  return (_Bool)(((int)fc & 252) == 80);
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_beacon(__le16 fc)
{
  #line 468 
  return (_Bool)(((int)fc & 252) == 128);
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_atim(__le16 fc)
{
  #line 478 
  return (_Bool)(((int)fc & 252) == 144);
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_pspoll(__le16 fc)
{
  #line 548 
  return (_Bool)(((int)fc & 252) == 164);
}

#line 4738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  #line 4740 
  wiphy->dev.parent = dev;
  #line 4741 
  return;
}

#line 4760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static char *wiphy_name(struct wiphy *wiphy)
{
  #line 4762 
  return dev_name(& wiphy->dev);
}

#line 5027 
#line 5027 
int ieee80211_channel_to_frequency(int, enum nl80211_band);
#line 5170 
#line 5170 
unsigned int ieee80211_get_hdrlen_from_skb(struct sk_buff *);
#line 5177 
#line 5177 
unsigned int ieee80211_hdrlen(__le16);
#line 5490 
#line 5490 
int regulatory_hint(struct wiphy *, char *);
#line 7322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void wiphy_ext_feature_set(struct wiphy *wiphy, enum nl80211_ext_feature_index ftidx)
{
  #line 7325 
  u8 *ft_byte;
  #line 7327 
  ft_byte = & wiphy->ext_features[(unsigned int)ftidx / 8U];
  #line 7328 
  *ft_byte = (unsigned char)((int)*ft_byte | (int)((unsigned char)(1UL << ((unsigned int)ftidx & 7U))));
  #line 7329 
  return;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
  #line 1116 
  return (struct ieee80211_tx_info *)(& skb->cb);
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rx_status *IEEE80211_SKB_RXCB(struct sk_buff *skb)
{
  #line 1121 
  return (struct ieee80211_rx_status *)(& skb->cb);
}

#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_tx_info_clear_status(struct ieee80211_tx_info *info)
{
  #line 1141 
  int i;
  #line 1149 
  i = 0;
  #line 1149 
  while (i <= 3) {
    #line 1150 
    info->__anonCompField_ieee80211_tx_info_195.status.rates[i].count = (unsigned short)0U;
    #line 1149 
    i ++;
  }
  #line 1154 
  memset((void *)(& info->__anonCompField_ieee80211_tx_info_195.status.ampdu_ack_len),0,24UL);
  #line 1155 
  return;
}

#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void _ieee80211_hw_set(struct ieee80211_hw *hw, enum ieee80211_hw_flags flg)
{
  #line 2536 
  __set_bit((long)flg,(unsigned long *)(& hw->flags));
  #line 2537 
  return;
}

#line 2591 
#line 2591 
struct ieee80211_hw *wiphy_to_ieee80211_hw(struct wiphy *);
#line 2599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_DEV(struct ieee80211_hw *hw, struct device *dev)
{
  #line 2601 
  set_wiphy_dev(hw->wiphy,dev);
  #line 2602 
  return;
}

#line 2610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_PERM_ADDR(struct ieee80211_hw *hw, u8 *addr)
{
  #line 2612 
  memcpy((void *)(& (hw->wiphy)->perm_addr),(void *)addr,6UL);
  #line 2613 
  return;
}

#line 2616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rate *ieee80211_get_tx_rate(struct ieee80211_hw *hw, struct ieee80211_tx_info *c)
{
  #line 2619 
  int __ret_warn_on;
  #line 2619 
  __ret_warn_on = (int)c->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_4128_193.__anonCompField___anonunion_4129_192.rates[0].idx < 0;
  #line 2619 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 2620 
    ldv_inline_asm();
    #line 2621 
    ldv_inline_asm();
  }
  #line 2619 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2620 
                                                return (struct ieee80211_rate *)0;
  #line 2621 
  return ((hw->wiphy)->bands[(int)c->band])->bitrates + (unsigned long)c->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_4128_193.__anonCompField___anonunion_4129_192.rates[0].idx;
}

#line 2625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rate *ieee80211_get_rts_cts_rate(struct ieee80211_hw *hw, struct ieee80211_tx_info *c)
{
  #line 2628 
  if ((int)c->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_4128_193.__anonCompField___anonunion_4129_192.rts_cts_rate_idx < 0) 
    #line 2629 
    return (struct ieee80211_rate *)0;
  #line 2630 
  return ((hw->wiphy)->bands[(int)c->band])->bitrates + (unsigned long)c->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_4128_193.__anonCompField___anonunion_4129_192.rts_cts_rate_idx;
}

#line 2650 
#line 2650 
void ieee80211_free_txskb(struct ieee80211_hw *, struct sk_buff *);
#line 4135 
#line 4135 
int ieee80211_register_hw(struct ieee80211_hw *);
#line 4289 
#line 4289 
void ieee80211_unregister_hw(struct ieee80211_hw *);
#line 4338 
#line 4338 
void ieee80211_rx_napi(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct napi_struct *);
#line 4361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_rx(struct ieee80211_hw *hw, struct sk_buff *skb)
{
  #line 4363 
  ieee80211_rx_napi(hw,(struct ieee80211_sta *)0,skb,(struct napi_struct *)0);
  #line 4364 
  return;
}

#line 4527 
#line 4527 
void ieee80211_get_tx_rates(struct ieee80211_vif *, struct ieee80211_sta *, struct sk_buff *, struct ieee80211_tx_rate *, int);
#line 4580 
#line 4580 
void ieee80211_tx_status(struct ieee80211_hw *, struct sk_buff *);
#line 4737 
#line 4737 
struct sk_buff *ieee80211_beacon_get_tim(struct ieee80211_hw *, struct ieee80211_vif *, u16 *, u16 *);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct sk_buff *ieee80211_beacon_get(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 4753 
  return ieee80211_beacon_get_tim(hw,vif,(u16 *)0U,(u16 *)0U);
}

#line 4907 
#line 4907 
__le16 ieee80211_rts_duration(struct ieee80211_hw *, struct ieee80211_vif *, size_t, struct ieee80211_tx_info *);
#line 4944 
#line 4944 
__le16 ieee80211_ctstoself_duration(struct ieee80211_hw *, struct ieee80211_vif *, size_t, struct ieee80211_tx_info *);
#line 4990 
#line 4990 
struct sk_buff *ieee80211_get_buffered_bc(struct ieee80211_hw *, struct ieee80211_vif *);
#line 5170 
#line 5170 
void ieee80211_wake_queue(struct ieee80211_hw *, int);
#line 5179 
#line 5179 
void ieee80211_stop_queue(struct ieee80211_hw *, int);
#line 5199 
#line 5199 
void ieee80211_stop_queues(struct ieee80211_hw *);
#line 5207 
#line 5207 
void ieee80211_wake_queues(struct ieee80211_hw *);
#line 5320 
#line 5320 
void ieee80211_iterate_active_interfaces_atomic(struct ieee80211_hw *, u32, void (*)(void *, u8 *, struct ieee80211_vif *), void *);
#line 5371 
#line 5371 
void ieee80211_queue_work(struct ieee80211_hw *, struct work_struct *);
#line 5383 
#line 5383 
void ieee80211_queue_delayed_work(struct ieee80211_hw *, struct delayed_work *, unsigned long);
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_vif_iter(void *data, u8 *mac, struct ieee80211_vif *vif);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 3157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
bool ath5k_any_vif_assoc(struct ath5k_hw *ah);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 2723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_start(struct ieee80211_hw *hw);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_stop(struct ieee80211_hw *hw);
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_beacon_update_timers(struct ath5k_hw *ah, u64 bc_tsf);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_beacon_update(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 2148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_beacon_config(struct ath5k_hw *ah);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 3172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_set_beacon_filter(struct ieee80211_hw *hw, bool enable);
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_update_bssid_mask_and_opmode(struct ath5k_hw *ah, struct ieee80211_vif *vif);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_chan_set(struct ath5k_hw *ah, struct cfg80211_chan_def *chandef);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_txbuf_free_skb(struct ath5k_hw *ah, struct ath5k_buf *bf);
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_rxbuf_free_skb(struct ath5k_hw *ah, struct ath5k_buf *bf);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_tx_queue(struct ieee80211_hw *hw, struct sk_buff *skb, struct ath5k_txq *txq, struct ieee80211_tx_control *control);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
char *ath5k_chip_name(enum ath5k_srev_type type, u_int16_t val);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 2529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_init_ah(struct ath5k_hw *ah, struct ath_bus_ops *bus_ops);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.h"
#line 3123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_deinit_ah(struct ath5k_hw *ah);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.h"
#line 129 
void ath5k_debug_init_device(struct ath5k_hw *ah);
#line 132 
#line 132 
void ath5k_debug_printrxbuffs(struct ath5k_hw *ah);
#line 135 
#line 135 
void ath5k_debug_dump_bands(struct ath5k_hw *ah);
#line 138 
#line 138 
void ath5k_debug_printtxbuf(struct ath5k_hw *ah, struct ath5k_buf *bf);
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 194 
struct sk_buff *ath_rxbuf_alloc(struct ath_common *, u32, gfp_t);
#line 197 
#line 197 
bool ath_is_mybeacon(struct ath_common *, struct ieee80211_hdr *);
#line 205 
#line 205 
bool ath_hw_keyreset(struct ath_common *, u16);
#line 206 
#line 206 
void ath_hw_cycle_counters_update(struct ath_common *);
#line 320 
#line 320 
char *ath_opmode_to_string(enum nl80211_iftype);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.h"
#line 104 
void ath5k_ani_init(struct ath5k_hw *ah, enum ath5k_ani_mode mode);
#line 105 
#line 105 
void ath5k_ani_mib_intr(struct ath5k_hw *ah);
#line 106 
#line 106 
void ath5k_ani_calibration(struct ath5k_hw *ah);
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
bool ath5k_modparam_nohwcrypt;
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static void ewma_beacon_rssi_init(struct ewma_beacon_rssi *e)
{
  #line 1255 
  e->internal = 0UL;
  #line 1256 
  return;
}

#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static void ewma_beacon_rssi_add(struct ewma_beacon_rssi *e, unsigned long val)
{
  #line 1256 
  union __anonunion___u_4149 __u;
  #line 1255 
  __read_once_size((void *)(& e->internal),(void *)(& __u.__c),8);
  #line 1255 
  unsigned long internal = (__u.__val);
  #line 1255 
  unsigned long weight_rcp = 3UL;
  #line 1255 
  unsigned long precision = 10UL;
  {
    #line 1256 
    unsigned long tmp_0;
    #line 1256 
    if (internal != 0UL) 
                         #line 1256 
                         tmp_0 = (((internal << weight_rcp) - internal) + (val << precision)) >> weight_rcp; else 
                                                                    #line 1256 
                                                                    tmp_0 = val << precision;
    #line 1256 
    union __anonunion___u_4151 __u_0 = {.__val = tmp_0};
    #line 1255 
    __write_once_size((void *)(& e->internal),(void *)(& __u_0.__c),8);
    #line 1255 
    unsigned long tmp_2 = __u_0.__val;
  }
  #line 1257 
  return;
}

#line 1479 
#line 1479 
int ath5k_sysfs_register(struct ath5k_hw *ah);
#line 1480 
#line 1480 
void ath5k_sysfs_unregister(struct ath5k_hw *ah);
#line 1486 
#line 1486 
int ath5k_init_leds(struct ath5k_hw *ah);
#line 1488 
#line 1488 
void ath5k_led_off(struct ath5k_hw *ah);
#line 1489 
#line 1489 
void ath5k_unregister_leds(struct ath5k_hw *ah);
#line 1494 
#line 1494 
int ath5k_hw_on_hold(struct ath5k_hw *ah);
#line 1495 
#line 1495 
int ath5k_hw_reset(struct ath5k_hw *ah, enum nl80211_iftype op_mode, struct ieee80211_channel *channel, bool fast, bool skip_pcu);
#line 1509 
#line 1509 
void ath5k_hw_start_rx_dma(struct ath5k_hw *ah);
#line 1510 
#line 1510 
u32 ath5k_hw_get_rxdp(struct ath5k_hw *ah);
#line 1511 
#line 1511 
int ath5k_hw_set_rxdp(struct ath5k_hw *ah, u32 phys_addr);
#line 1512 
#line 1512 
int ath5k_hw_start_tx_dma(struct ath5k_hw *ah, unsigned int queue);
#line 1513 
#line 1513 
int ath5k_hw_stop_beacon_queue(struct ath5k_hw *ah, unsigned int queue);
#line 1514 
#line 1514 
u32 ath5k_hw_get_txdp(struct ath5k_hw *ah, unsigned int queue);
#line 1515 
#line 1515 
int ath5k_hw_set_txdp(struct ath5k_hw *ah, unsigned int queue, u32 phys_addr);
#line 1517 
#line 1517 
int ath5k_hw_update_tx_triglevel(struct ath5k_hw *ah, bool increase);
#line 1519 
#line 1519 
bool ath5k_hw_is_intr_pending(struct ath5k_hw *ah);
#line 1520 
#line 1520 
int ath5k_hw_get_isr(struct ath5k_hw *ah, enum ath5k_int *interrupt_mask);
#line 1521 
#line 1521 
enum ath5k_int ath5k_hw_set_imr(struct ath5k_hw *ah, enum ath5k_int new_mask);
#line 1522 
#line 1522 
void ath5k_hw_update_mib_counters(struct ath5k_hw *ah);
#line 1525 
#line 1525 
int ath5k_hw_dma_stop(struct ath5k_hw *ah);
#line 1544 
#line 1544 
void ath5k_hw_set_bssid_mask(struct ath5k_hw *ah, u8 *mask);
#line 1546 
#line 1546 
u32 ath5k_hw_get_rx_filter(struct ath5k_hw *ah);
#line 1547 
#line 1547 
void ath5k_hw_set_rx_filter(struct ath5k_hw *ah, u32 filter);
#line 1549 
#line 1549 
void ath5k_hw_start_rx_pcu(struct ath5k_hw *ah);
#line 1550 
#line 1550 
void ath5k_hw_stop_rx_pcu(struct ath5k_hw *ah);
#line 1552 
#line 1552 
u64 ath5k_hw_get_tsf64(struct ath5k_hw *ah);
#line 1555 
#line 1555 
void ath5k_hw_init_beacon_timers(struct ath5k_hw *ah, u32 next_beacon, u32 interval);
#line 1557 
#line 1557 
bool ath5k_hw_check_beacon_timers(struct ath5k_hw *ah, int intval);
#line 1562 
#line 1562 
int ath5k_hw_get_tx_queueprops(struct ath5k_hw *ah, int queue, struct ath5k_txq_info *queue_info);
#line 1564 
#line 1564 
int ath5k_hw_set_tx_queueprops(struct ath5k_hw *ah, int queue, struct ath5k_txq_info *qinfo);
#line 1566 
#line 1566 
int ath5k_hw_setup_tx_queue(struct ath5k_hw *ah, enum ath5k_tx_queue queue_type, struct ath5k_txq_info *queue_info);
#line 1571 
#line 1571 
u32 ath5k_hw_num_tx_pending(struct ath5k_hw *ah, unsigned int queue);
#line 1572 
#line 1572 
void ath5k_hw_release_tx_queue(struct ath5k_hw *ah, unsigned int queue);
#line 1573 
#line 1573 
int ath5k_hw_reset_tx_queue(struct ath5k_hw *ah, unsigned int queue);
#line 1580 
#line 1580 
int ath5k_hw_setup_rx_desc(struct ath5k_hw *ah, struct ath5k_desc *desc, u32 size, unsigned int flags);
#line 1582 
#line 1582 
int ath5k_hw_setup_mrr_tx_desc(struct ath5k_hw *ah, struct ath5k_desc *desc, unsigned int tx_rate1, u_int tx_tries1, u_int tx_rate2, u_int tx_tries2, unsigned int tx_rate3, u_int tx_tries3);
#line 1598 
#line 1598 
void ath5k_rfkill_hw_start(struct ath5k_hw *ah);
#line 1599 
#line 1599 
void ath5k_rfkill_hw_stop(struct ath5k_hw *ah);
#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static enum ath_bus_type ath5k_get_bus_type(struct ath5k_hw *ah)
{
  #line 1692 
  return (ath5k_hw_common(ah)->bus_ops)->ath_bus_type;
}

#line 1695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static void ath5k_read_cachesize(struct ath_common *common, int *csz)
{
  #line 1697 
  (*((common->bus_ops)->read_cachesize))(common,csz);
  #line 1698 
  return;
}

#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/regd.h"
#line 260 
bool ath_is_world_regd(struct ath_regulatory *);
#line 263 
#line 263 
int ath_regd_init(struct ath_regulatory *, struct wiphy *, void (*)(struct wiphy *, struct regulatory_request *));
#line 268 
#line 268 
void ath_reg_notifier_apply(struct wiphy *, struct regulatory_request *, struct ath_regulatory *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
#line 21 
struct tracepoint __tracepoint_ath5k_rx;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
__inline static void trace_ath5k_rx(struct ath5k_hw *priv, struct sk_buff *skb)
{
  #line 21 
  int pscr_ret___0;
  #line 21 
  if ((int)static_key_false(& __tracepoint_ath5k_rx.key) != 0) {
    #line 21 
    int pscr_ret__;
    #line 21 
    struct tracepoint_func *________p1;
    #line 21 
    struct tracepoint_func *it_func_ptr;
    #line 21 
    void *it_func;
    #line 21 
    void *__data;
    #line 21 
    int __idx = 0;
    {
      #line 21 
      void *__vpp_verify = (void *)0;
      #line 21 
      void *tmp = __vpp_verify;
    }
    #line 21 
    switch (4UL) {
      #line 21 
      int pfo_ret__;
      #line 21 
      int pfo_ret___0;
      #line 21 
      int pfo_ret___1;
      #line 21 
      int pfo_ret___2;
      #line 21 
      case (unsigned long)1: 
                             #line 21 
      ;
      #line 21 
      switch (4UL) {
        #line 21 
        case (unsigned long)1: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)2: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)4: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)8: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        default: 
                 #line 21 
        ;
        #line 21 
        __bad_percpu_size();
      }
      #line 21 
      pscr_ret__ = pfo_ret__;
      #line 21 
      break;
      #line 21 
      case (unsigned long)2: 
                             #line 21 
      ;
      #line 21 
      switch (4UL) {
        #line 21 
        case (unsigned long)1: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)2: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)4: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)8: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        default: 
                 #line 21 
        ;
        #line 21 
        __bad_percpu_size();
      }
      #line 21 
      pscr_ret__ = pfo_ret___0;
      #line 21 
      break;
      #line 21 
      case (unsigned long)4: 
                             #line 21 
      ;
      #line 21 
      switch (4UL) {
        #line 21 
        case (unsigned long)1: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)2: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)4: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)8: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        default: 
                 #line 21 
        ;
        #line 21 
        __bad_percpu_size();
      }
      #line 21 
      pscr_ret__ = pfo_ret___1;
      #line 21 
      break;
      #line 21 
      case (unsigned long)8: 
                             #line 21 
      ;
      #line 21 
      switch (4UL) {
        #line 21 
        case (unsigned long)1: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)2: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)4: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        case (unsigned long)8: 
                               #line 21 
        ;
        #line 22 
        ldv_inline_asm();
        #line 21 
        break;
        #line 21 
        default: 
                 #line 21 
        ;
        #line 21 
        __bad_percpu_size();
      }
      #line 21 
      pscr_ret__ = pfo_ret___2;
      #line 21 
      break;
      #line 21 
      default: 
               #line 21 
      ;
      #line 21 
      __bad_size_call_parameter();
      #line 21 
      break;
    }
    #line 21 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 21 
                                                               return;
    {
      #line 21 
      int __ret_warn_on = 0;
      #line 21 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 22 
        ldv_inline_asm();
        #line 23 
        ldv_inline_asm();
      }
      #line 21 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 21 
    __preempt_count_add(1);
    #line 22 
    ldv_inline_asm();
    {
      #line 22 
      union __anonunion___u_4154 __u;
      #line 21 
      __read_once_size((void *)(& __tracepoint_ath5k_rx.funcs),(void *)(& __u.__c),8);
      #line 21 
      ________p1 = (__u.__val);
      }
    #line 21 
    it_func_ptr = ________p1;
    #line 21 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 21 
      while (1) {
        #line 21 
        it_func = it_func_ptr->func;
        #line 21 
        __data = it_func_ptr->data;
        #line 21 
        (*((void (*)(void *, struct ath5k_hw *, struct sk_buff *))it_func))(__data,priv,skb);
        #line 21 
        it_func_ptr ++;
        #line 22 
        ;
        #line 22 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 21 
                                                break;
      }
    #line 23 
    ldv_inline_asm();
    #line 21 
    __preempt_count_sub(1);
  }
  {
    #line 21 
    void *__vpp_verify_0 = (void *)0;
    #line 21 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 21 
  switch (4UL) {
    #line 21 
    int pfo_ret___4;
    #line 21 
    int pfo_ret___5;
    #line 21 
    int pfo_ret___6;
    #line 21 
    int pfo_ret___3;
    #line 21 
    case (unsigned long)1: 
                           #line 21 
    ;
    #line 21 
    switch (4UL) {
      #line 21 
      case (unsigned long)1: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)2: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)4: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)8: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      default: 
               #line 21 
      ;
      #line 21 
      __bad_percpu_size();
    }
    #line 21 
    pscr_ret___0 = pfo_ret___3;
    #line 21 
    break;
    #line 21 
    case (unsigned long)2: 
                           #line 21 
    ;
    #line 21 
    switch (4UL) {
      #line 21 
      case (unsigned long)1: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)2: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)4: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)8: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      default: 
               #line 21 
      ;
      #line 21 
      __bad_percpu_size();
    }
    #line 21 
    pscr_ret___0 = pfo_ret___4;
    #line 21 
    break;
    #line 21 
    case (unsigned long)4: 
                           #line 21 
    ;
    #line 21 
    switch (4UL) {
      #line 21 
      case (unsigned long)1: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)2: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)4: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)8: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      default: 
               #line 21 
      ;
      #line 21 
      __bad_percpu_size();
    }
    #line 21 
    pscr_ret___0 = pfo_ret___5;
    #line 21 
    break;
    #line 21 
    case (unsigned long)8: 
                           #line 21 
    ;
    #line 21 
    switch (4UL) {
      #line 21 
      case (unsigned long)1: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)2: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)4: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      case (unsigned long)8: 
                             #line 21 
      ;
      #line 22 
      ldv_inline_asm();
      #line 21 
      break;
      #line 21 
      default: 
               #line 21 
      ;
      #line 21 
      __bad_percpu_size();
    }
    #line 21 
    pscr_ret___0 = pfo_ret___6;
    #line 21 
    break;
    #line 21 
    default: 
             #line 21 
    ;
    #line 21 
    __bad_size_call_parameter();
    #line 21 
    break;
  }
  #line 21 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 21 
    rcu_read_lock_sched_notrace();
    {
      #line 22 
      union __anonunion___u_4156 __u_0;
      #line 21 
      __read_once_size((void *)(& __tracepoint_ath5k_rx.funcs),(void *)(& __u_0.__c),8);
      #line 21 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 21 
        bool __warned;
        #line 21 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 21 
          if (! __warned) {
            #line 21 
            if (rcu_read_lock_sched_held() == 0) {
              #line 21 
              __warned = (_Bool)1;
              #line 21 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h",21,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 21 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 21 
    rcu_read_unlock_sched_notrace();
  }
  #line 23 
  return;
}

#line 39 
#line 39 
struct tracepoint __tracepoint_ath5k_tx;
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
__inline static void trace_ath5k_tx(struct ath5k_hw *priv, struct sk_buff *skb, struct ath5k_txq *q)
{
  #line 39 
  int pscr_ret___0;
  #line 39 
  if ((int)static_key_false(& __tracepoint_ath5k_tx.key) != 0) {
    #line 39 
    int pscr_ret__;
    #line 39 
    struct tracepoint_func *________p1;
    #line 39 
    struct tracepoint_func *it_func_ptr;
    #line 39 
    void *it_func;
    #line 39 
    void *__data;
    #line 39 
    int __idx = 0;
    {
      #line 39 
      void *__vpp_verify = (void *)0;
      #line 39 
      void *tmp = __vpp_verify;
    }
    #line 39 
    switch (4UL) {
      #line 39 
      int pfo_ret__;
      #line 39 
      int pfo_ret___0;
      #line 39 
      int pfo_ret___1;
      #line 39 
      int pfo_ret___2;
      #line 39 
      case (unsigned long)1: 
                             #line 39 
      ;
      #line 39 
      switch (4UL) {
        #line 39 
        case (unsigned long)1: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)2: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)4: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)8: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        default: 
                 #line 39 
        ;
        #line 39 
        __bad_percpu_size();
      }
      #line 39 
      pscr_ret__ = pfo_ret__;
      #line 39 
      break;
      #line 39 
      case (unsigned long)2: 
                             #line 39 
      ;
      #line 39 
      switch (4UL) {
        #line 39 
        case (unsigned long)1: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)2: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)4: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)8: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        default: 
                 #line 39 
        ;
        #line 39 
        __bad_percpu_size();
      }
      #line 39 
      pscr_ret__ = pfo_ret___0;
      #line 39 
      break;
      #line 39 
      case (unsigned long)4: 
                             #line 39 
      ;
      #line 39 
      switch (4UL) {
        #line 39 
        case (unsigned long)1: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)2: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)4: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)8: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        default: 
                 #line 39 
        ;
        #line 39 
        __bad_percpu_size();
      }
      #line 39 
      pscr_ret__ = pfo_ret___1;
      #line 39 
      break;
      #line 39 
      case (unsigned long)8: 
                             #line 39 
      ;
      #line 39 
      switch (4UL) {
        #line 39 
        case (unsigned long)1: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)2: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)4: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        case (unsigned long)8: 
                               #line 39 
        ;
        #line 40 
        ldv_inline_asm();
        #line 39 
        break;
        #line 39 
        default: 
                 #line 39 
        ;
        #line 39 
        __bad_percpu_size();
      }
      #line 39 
      pscr_ret__ = pfo_ret___2;
      #line 39 
      break;
      #line 39 
      default: 
               #line 39 
      ;
      #line 39 
      __bad_size_call_parameter();
      #line 39 
      break;
    }
    #line 39 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 39 
                                                               return;
    {
      #line 39 
      int __ret_warn_on = 0;
      #line 39 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 40 
        ldv_inline_asm();
        #line 41 
        ldv_inline_asm();
      }
      #line 39 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 39 
    __preempt_count_add(1);
    #line 40 
    ldv_inline_asm();
    {
      #line 40 
      union __anonunion___u_4158 __u;
      #line 39 
      __read_once_size((void *)(& __tracepoint_ath5k_tx.funcs),(void *)(& __u.__c),8);
      #line 39 
      ________p1 = (__u.__val);
      }
    #line 39 
    it_func_ptr = ________p1;
    #line 39 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 39 
      while (1) {
        #line 39 
        it_func = it_func_ptr->func;
        #line 39 
        __data = it_func_ptr->data;
        #line 39 
        (*((void (*)(void *, struct ath5k_hw *, struct sk_buff *, struct ath5k_txq *))it_func))(__data,priv,skb,q);
        #line 39 
        it_func_ptr ++;
        #line 40 
        ;
        #line 40 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 39 
                                                break;
      }
    #line 41 
    ldv_inline_asm();
    #line 39 
    __preempt_count_sub(1);
  }
  {
    #line 39 
    void *__vpp_verify_0 = (void *)0;
    #line 39 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 39 
  switch (4UL) {
    #line 39 
    int pfo_ret___5;
    #line 39 
    int pfo_ret___6;
    #line 39 
    int pfo_ret___3;
    #line 39 
    int pfo_ret___4;
    #line 39 
    case (unsigned long)1: 
                           #line 39 
    ;
    #line 39 
    switch (4UL) {
      #line 39 
      case (unsigned long)1: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)2: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)4: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)8: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      default: 
               #line 39 
      ;
      #line 39 
      __bad_percpu_size();
    }
    #line 39 
    pscr_ret___0 = pfo_ret___3;
    #line 39 
    break;
    #line 39 
    case (unsigned long)2: 
                           #line 39 
    ;
    #line 39 
    switch (4UL) {
      #line 39 
      case (unsigned long)1: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)2: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)4: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)8: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      default: 
               #line 39 
      ;
      #line 39 
      __bad_percpu_size();
    }
    #line 39 
    pscr_ret___0 = pfo_ret___4;
    #line 39 
    break;
    #line 39 
    case (unsigned long)4: 
                           #line 39 
    ;
    #line 39 
    switch (4UL) {
      #line 39 
      case (unsigned long)1: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)2: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)4: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)8: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      default: 
               #line 39 
      ;
      #line 39 
      __bad_percpu_size();
    }
    #line 39 
    pscr_ret___0 = pfo_ret___5;
    #line 39 
    break;
    #line 39 
    case (unsigned long)8: 
                           #line 39 
    ;
    #line 39 
    switch (4UL) {
      #line 39 
      case (unsigned long)1: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)2: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)4: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      case (unsigned long)8: 
                             #line 39 
      ;
      #line 40 
      ldv_inline_asm();
      #line 39 
      break;
      #line 39 
      default: 
               #line 39 
      ;
      #line 39 
      __bad_percpu_size();
    }
    #line 39 
    pscr_ret___0 = pfo_ret___6;
    #line 39 
    break;
    #line 39 
    default: 
             #line 39 
    ;
    #line 39 
    __bad_size_call_parameter();
    #line 39 
    break;
  }
  #line 39 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 39 
    rcu_read_lock_sched_notrace();
    {
      #line 40 
      union __anonunion___u_4160 __u_0;
      #line 39 
      __read_once_size((void *)(& __tracepoint_ath5k_tx.funcs),(void *)(& __u_0.__c),8);
      #line 39 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 39 
        bool __warned;
        #line 39 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 39 
          if (! __warned) {
            #line 39 
            if (rcu_read_lock_sched_held() == 0) {
              #line 39 
              __warned = (_Bool)1;
              #line 39 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h",39,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 39 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 39 
    rcu_read_unlock_sched_notrace();
  }
  #line 41 
  return;
}

#line 65 
#line 65 
struct tracepoint __tracepoint_ath5k_tx_complete;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
__inline static void trace_ath5k_tx_complete(struct ath5k_hw *priv, struct sk_buff *skb, struct ath5k_txq *q, struct ath5k_tx_status *ts)
{
  #line 65 
  int pscr_ret___0;
  #line 65 
  if ((int)static_key_false(& __tracepoint_ath5k_tx_complete.key) != 0) {
    #line 65 
    int pscr_ret__;
    #line 65 
    struct tracepoint_func *________p1;
    #line 65 
    struct tracepoint_func *it_func_ptr;
    #line 65 
    void *it_func;
    #line 65 
    void *__data;
    #line 65 
    int __idx = 0;
    {
      #line 65 
      void *__vpp_verify = (void *)0;
      #line 65 
      void *tmp = __vpp_verify;
    }
    #line 65 
    switch (4UL) {
      #line 65 
      int pfo_ret__;
      #line 65 
      int pfo_ret___0;
      #line 65 
      int pfo_ret___1;
      #line 65 
      int pfo_ret___2;
      #line 65 
      case (unsigned long)1: 
                             #line 65 
      ;
      #line 65 
      switch (4UL) {
        #line 65 
        case (unsigned long)1: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)2: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)4: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)8: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        default: 
                 #line 65 
        ;
        #line 65 
        __bad_percpu_size();
      }
      #line 65 
      pscr_ret__ = pfo_ret__;
      #line 65 
      break;
      #line 65 
      case (unsigned long)2: 
                             #line 65 
      ;
      #line 65 
      switch (4UL) {
        #line 65 
        case (unsigned long)1: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)2: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)4: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)8: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        default: 
                 #line 65 
        ;
        #line 65 
        __bad_percpu_size();
      }
      #line 65 
      pscr_ret__ = pfo_ret___0;
      #line 65 
      break;
      #line 65 
      case (unsigned long)4: 
                             #line 65 
      ;
      #line 65 
      switch (4UL) {
        #line 65 
        case (unsigned long)1: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)2: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)4: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)8: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        default: 
                 #line 65 
        ;
        #line 65 
        __bad_percpu_size();
      }
      #line 65 
      pscr_ret__ = pfo_ret___1;
      #line 65 
      break;
      #line 65 
      case (unsigned long)8: 
                             #line 65 
      ;
      #line 65 
      switch (4UL) {
        #line 65 
        case (unsigned long)1: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)2: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)4: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        case (unsigned long)8: 
                               #line 65 
        ;
        #line 66 
        ldv_inline_asm();
        #line 65 
        break;
        #line 65 
        default: 
                 #line 65 
        ;
        #line 65 
        __bad_percpu_size();
      }
      #line 65 
      pscr_ret__ = pfo_ret___2;
      #line 65 
      break;
      #line 65 
      default: 
               #line 65 
      ;
      #line 65 
      __bad_size_call_parameter();
      #line 65 
      break;
    }
    #line 65 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 65 
                                                               return;
    {
      #line 65 
      int __ret_warn_on = 0;
      #line 65 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 66 
        ldv_inline_asm();
        #line 67 
        ldv_inline_asm();
      }
      #line 65 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 65 
    __preempt_count_add(1);
    #line 66 
    ldv_inline_asm();
    {
      #line 66 
      union __anonunion___u_4162 __u;
      #line 65 
      __read_once_size((void *)(& __tracepoint_ath5k_tx_complete.funcs),(void *)(& __u.__c),8);
      #line 65 
      ________p1 = (__u.__val);
      }
    #line 65 
    it_func_ptr = ________p1;
    #line 65 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 65 
      while (1) {
        #line 65 
        it_func = it_func_ptr->func;
        #line 65 
        __data = it_func_ptr->data;
        #line 65 
        (*((void (*)(void *, struct ath5k_hw *, struct sk_buff *, struct ath5k_txq *, struct ath5k_tx_status *))it_func))(__data,priv,skb,q,ts);
        #line 65 
        it_func_ptr ++;
        #line 66 
        ;
        #line 66 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 65 
                                                break;
      }
    #line 67 
    ldv_inline_asm();
    #line 65 
    __preempt_count_sub(1);
  }
  {
    #line 65 
    void *__vpp_verify_0 = (void *)0;
    #line 65 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 65 
  switch (4UL) {
    #line 65 
    int pfo_ret___3;
    #line 65 
    int pfo_ret___4;
    #line 65 
    int pfo_ret___5;
    #line 65 
    int pfo_ret___6;
    #line 65 
    case (unsigned long)1: 
                           #line 65 
    ;
    #line 65 
    switch (4UL) {
      #line 65 
      case (unsigned long)1: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)2: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)4: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)8: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      default: 
               #line 65 
      ;
      #line 65 
      __bad_percpu_size();
    }
    #line 65 
    pscr_ret___0 = pfo_ret___3;
    #line 65 
    break;
    #line 65 
    case (unsigned long)2: 
                           #line 65 
    ;
    #line 65 
    switch (4UL) {
      #line 65 
      case (unsigned long)1: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)2: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)4: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)8: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      default: 
               #line 65 
      ;
      #line 65 
      __bad_percpu_size();
    }
    #line 65 
    pscr_ret___0 = pfo_ret___4;
    #line 65 
    break;
    #line 65 
    case (unsigned long)4: 
                           #line 65 
    ;
    #line 65 
    switch (4UL) {
      #line 65 
      case (unsigned long)1: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)2: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)4: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)8: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      default: 
               #line 65 
      ;
      #line 65 
      __bad_percpu_size();
    }
    #line 65 
    pscr_ret___0 = pfo_ret___5;
    #line 65 
    break;
    #line 65 
    case (unsigned long)8: 
                           #line 65 
    ;
    #line 65 
    switch (4UL) {
      #line 65 
      case (unsigned long)1: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)2: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)4: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      case (unsigned long)8: 
                             #line 65 
      ;
      #line 66 
      ldv_inline_asm();
      #line 65 
      break;
      #line 65 
      default: 
               #line 65 
      ;
      #line 65 
      __bad_percpu_size();
    }
    #line 65 
    pscr_ret___0 = pfo_ret___6;
    #line 65 
    break;
    #line 65 
    default: 
             #line 65 
    ;
    #line 65 
    __bad_size_call_parameter();
    #line 65 
    break;
  }
  #line 65 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 65 
    rcu_read_lock_sched_notrace();
    {
      #line 66 
      union __anonunion___u_4164 __u_0;
      #line 65 
      __read_once_size((void *)(& __tracepoint_ath5k_tx_complete.funcs),(void *)(& __u_0.__c),8);
      #line 65 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 65 
        bool __warned;
        #line 65 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 65 
          if (! __warned) {
            #line 65 
            if (rcu_read_lock_sched_held() == 0) {
              #line 65 
              __warned = (_Bool)1;
              #line 65 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h",65,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 65 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 65 
    rcu_read_unlock_sched_notrace();
  }
  #line 67 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
static char __tpstrtab_ath5k_rx[9U] = {(char)'a', (char)'t', (char)'h', (char)'5', (char)'k', (char)'_', (char)'r', (char)'x'};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
struct tracepoint __tracepoint_ath5k_rx = {.name = (char *)(& __tpstrtab_ath5k_rx)};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
static char __tpstrtab_ath5k_tx[9U] = {(char)'a', (char)'t', (char)'h', (char)'5', (char)'k', (char)'_', (char)'t', (char)'x'};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
struct tracepoint __tracepoint_ath5k_tx = {.name = (char *)(& __tpstrtab_ath5k_tx)};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
static char __tpstrtab_ath5k_tx_complete[18U] = {(char)'a', (char)'t', (char)'h', (char)'5', (char)'k', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e'};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/trace.h"
struct tracepoint __tracepoint_ath5k_tx_complete = {.name = (char *)(& __tpstrtab_ath5k_tx_complete)};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static bool modparam_fastchanswitch;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static bool ath5k_modparam_no_hw_rfkill_switch;
#line 96 
#line 2981 
static int ath5k_init(struct ieee80211_hw *hw);
#line 97 
#line 2857 
static int ath5k_reset(struct ath5k_hw *ah, struct ieee80211_channel *chan, bool skip_pcu);
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ath5k_srev_name srev_names[34U] = {{.sr_name = (char *)"5210"}, {.sr_name = (char *)"5311", .sr_val = 16U}, {.sr_name = (char *)"5311A", .sr_val = 32U}, {.sr_name = (char *)"5311B", .sr_val = 48U}, {.sr_name = (char *)"5211", .sr_val = 64U}, {.sr_name = (char *)"5212", .sr_val = 80U}, {.sr_name = (char *)"5213", .sr_val = 85U}, {.sr_name = (char *)"5213A", .sr_val = 89U}, {.sr_name = (char *)"2413", .sr_val = 120U}, {.sr_name = (char *)"2414", .sr_val = 112U}, {.sr_name = (char *)"5424", .sr_val = 144U}, {.sr_name = (char *)"5413", .sr_val = 164U}, {.sr_name = (char *)"5414", .sr_val = 160U}, {.sr_name = (char *)"2415", .sr_val = 176U}, {.sr_name = (char *)"5416", .sr_val = 192U}, {.sr_name = (char *)"5418", .sr_val = 202U}, {.sr_name = (char *)"2425", .sr_val = 224U}, {.sr_name = (char *)"2417", .sr_val = 240U}, {.sr_name = (char *)"xxxxx", .sr_val = 65535U}, {.sr_name = (char *)"5110", .sr_type = AR5K_VERSION_RAD}, {.sr_name = (char *)"5111", .sr_type = AR5K_VERSION_RAD, .sr_val = 16U}, {.sr_name = (char *)"5111A", .sr_type = AR5K_VERSION_RAD, .sr_val = 21U}, {.sr_name = (char *)"2111", .sr_type = AR5K_VERSION_RAD, .sr_val = 32U}, {.sr_name = (char *)"5112", .sr_type = AR5K_VERSION_RAD, .sr_val = 48U}, {.sr_name = (char *)"5112A", .sr_type = AR5K_VERSION_RAD, .sr_val = 53U}, {.sr_name = (char *)"5112B", .sr_type = AR5K_VERSION_RAD, .sr_val = 54U}, {.sr_name = (char *)"2112", .sr_type = AR5K_VERSION_RAD, .sr_val = 64U}, {.sr_name = (char *)"2112A", .sr_type = AR5K_VERSION_RAD, .sr_val = 69U}, {.sr_name = (char *)"2112B", .sr_type = AR5K_VERSION_RAD, .sr_val = 70U}, {.sr_name = (char *)"2413", .sr_type = AR5K_VERSION_RAD, .sr_val = 80U}, {.sr_name = (char *)"5413", .sr_type = AR5K_VERSION_RAD, .sr_val = 96U}, {.sr_name = (char *)"5424", .sr_type = AR5K_VERSION_RAD, .sr_val = 160U}, {.sr_name = (char *)"5133", .sr_type = AR5K_VERSION_RAD, .sr_val = 192U}, {.sr_name = (char *)"xxxxx", .sr_type = AR5K_VERSION_RAD, .sr_val = 65535U}};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ieee80211_rate ath5k_rates[12U] = {{.bitrate = (unsigned short)10U, .hw_value = (unsigned short)27U}, {.flags = 1U, .bitrate = (unsigned short)20U, .hw_value = (unsigned short)26U, .hw_value_short = (unsigned short)30U}, {.flags = 1U, .bitrate = (unsigned short)55U, .hw_value = (unsigned short)25U, .hw_value_short = (unsigned short)29U}, {.flags = 1U, .bitrate = (unsigned short)110U, .hw_value = (unsigned short)24U, .hw_value_short = (unsigned short)28U}, {.flags = 96U, .bitrate = (unsigned short)60U, .hw_value = (unsigned short)11U}, {.flags = 96U, .bitrate = (unsigned short)90U, .hw_value = (unsigned short)15U}, {.flags = 96U, .bitrate = (unsigned short)120U, .hw_value = (unsigned short)10U}, {.flags = 96U, .bitrate = (unsigned short)180U, .hw_value = (unsigned short)14U}, {.flags = 96U, .bitrate = (unsigned short)240U, .hw_value = (unsigned short)9U}, {.flags = 96U, .bitrate = (unsigned short)360U, .hw_value = (unsigned short)13U}, {.flags = 96U, .bitrate = (unsigned short)480U, .hw_value = (unsigned short)8U}, {.flags = 96U, .bitrate = (unsigned short)540U, .hw_value = (unsigned short)12U}};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
__inline static u64 ath5k_extend_tsf(struct ath5k_hw *ah, u32 rstamp)
{
  #line 203 
  u64 tsf = ath5k_hw_get_tsf64(ah);
  #line 205 
  if ((tsf & 32767ULL) < (unsigned long long)rstamp) 
                                                     #line 206 
                                                     tsf += 18446744073709518848ULL;
  #line 208 
  return (tsf & 18446744073709518848ULL) | (unsigned long long)rstamp;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
char *ath5k_chip_name(enum ath5k_srev_type type, u_int16_t val)
{
  #line 215 
  unsigned int i;
  #line 214 
  char *name = (char *)"xxxxx";
  #line 217 
  i = 0U;
  #line 217 
  while (i <= 33U) {
    #line 218 
    if (srev_names[i].sr_type != type) 
                                       #line 219 
                                       goto __Cont;
    #line 221 
    if (((unsigned int)val & 240U) == srev_names[i].sr_val) 
                                                            #line 222 
                                                            name = srev_names[i].sr_name;
    #line 224 
    if (((unsigned int)val & 255U) == srev_names[i].sr_val) {
      #line 225 
      name = srev_names[i].sr_name;
      #line 226 
      break;
    }
    #line 217 
    __Cont: 
            #line 217 
    i ++;
  }
  #line 230 
  return name;
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static unsigned int ath5k_ioread32(void *hw_priv, u32 reg_offset)
{
  #line 234 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw_priv;
  #line 235 
  return ath5k_hw_reg_read(ah,
                        (unsigned short)((int)((unsigned short)reg_offset)));
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_iowrite32(void *hw_priv, u32 val, u32 reg_offset)
{
  #line 240 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw_priv;
  #line 241 
  ath5k_hw_reg_write(ah,val,(unsigned short)((int)((unsigned short)reg_offset)));
  #line 242 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ath_ops ath5k_common_ops = {.read = & ath5k_ioread32, .write = & ath5k_iowrite32};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_reg_notifier(struct wiphy *wiphy, struct regulatory_request *request)
{
  #line 256 
  struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
  #line 257 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 258 
  struct ath_regulatory *regulatory = ath5k_hw_regulatory(ah);
  #line 260 
  ath_reg_notifier_apply(wiphy,request,regulatory);
  #line 261 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static bool ath5k_is_standard_channel(short chan, enum nl80211_band band)
{
  #line 273 
  return (_Bool)1;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static unsigned int ath5k_setup_channels(struct ath5k_hw *ah, struct ieee80211_channel *channels, unsigned int mode, unsigned int max)
{
  #line 299 
  unsigned int count;
  #line 299 
  unsigned int size;
  #line 299 
  unsigned int freq;
  #line 299 
  unsigned int ch;
  #line 300 
  enum nl80211_band band;
  #line 302 
  switch (mode) {
    #line 303 
    case (unsigned int)0: 
                          #line 303 
    ;
    #line 305 
    size = 220U;
    #line 306 
    band = NL80211_BAND_5GHZ;
    #line 307 
    break;
    #line 308 
    case (unsigned int)1: 
                          #line 308 
    ;
    #line 309 
    case (unsigned int)2: 
                          #line 309 
    ;
    #line 310 
    size = 26U;
    #line 311 
    band = NL80211_BAND_2GHZ;
    #line 312 
    break;
    #line 313 
    default: 
             #line 313 
    ;
    #line 314 
    if (net_ratelimit() != 0) 
                              #line 314 
                              _ath5k_printk(ah,(char *)"\001",(char *)"bad mode, not copying channels\n");
    #line 315 
    return 0U;
  }
  #line 318 
  count = 0U;
  #line 319 
  ch = 1U;
  #line 319 
  while (ch <= size && count < max) {
    {
      #line 320 
      freq = (unsigned int)ieee80211_channel_to_frequency((int)ch,band);
      #line 322 
      if (freq == 0U) 
                      #line 323 
                      goto __Cont;
      #line 326 
      (channels + (unsigned long)count)->center_freq = freq;
      #line 327 
      (channels + (unsigned long)count)->band = band;
      #line 328 
      (channels + (unsigned long)count)->hw_value = (unsigned short)mode;
      #line 331 
      if (! ath5k_channel_ok(ah,channels + (unsigned long)count)) 
                                                                  #line 332 
                                                                  goto __Cont;
      #line 334 
      if (! ath5k_is_standard_channel((short)((int)((short)ch)),band)) 
        #line 335 
        goto __Cont;
      #line 337 
      count ++;
    }
    #line 319 
    __Cont: 
            #line 319 
    ch ++;
  }
  #line 340 
  return count;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_setup_rate_idx(struct ath5k_hw *ah, struct ieee80211_supported_band *b)
{
  #line 346 
  u8 i;
  #line 348 
  i = (unsigned char)0U;
  #line 348 
  while ((unsigned int)i <= 31U) {
    #line 349 
    ah->rate_idx[(unsigned int)b->band][(int)i] = (signed char)(-1);
    #line 348 
    i = (u8)((int)i + 1);
  }
  #line 351 
  i = (unsigned char)0U;
  #line 351 
  while ((int)i < b->n_bitrates) {
    #line 352 
    ah->rate_idx[(unsigned int)b->band][(int)(b->bitrates + (unsigned long)i)->hw_value] = (signed char)i;
    #line 353 
    if ((unsigned int)(b->bitrates + (unsigned long)i)->hw_value_short != 0U) 
      #line 354 
      ah->rate_idx[(unsigned int)b->band][(int)(b->bitrates + (unsigned long)i)->hw_value_short] = (signed char)i;
    #line 351 
    i = (u8)((int)i + 1);
  }
  #line 356 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_setup_bands(struct ieee80211_hw *hw)
{
  #line 362 
  struct ieee80211_supported_band *sband;
  #line 363 
  int max_c;
  #line 364 
  int i;
  #line 361 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 363 
  int count_c = 0;
  #line 367 
  max_c = 314;
  #line 370 
  sband = & ah->sbands[0];
  #line 371 
  sband->band = NL80211_BAND_2GHZ;
  #line 372 
  sband->bitrates = & ah->rates[0][0];
  #line 374 
  if ((int)test_bit(2L,(unsigned long *)(& ah->ah_capabilities.cap_mode)) != 0) {
    #line 376 
    memcpy((void *)sband->bitrates,(void *)(ath5k_rates),144UL);
    #line 378 
    sband->n_bitrates = 12;
    #line 380 
    sband->channels = (struct ieee80211_channel *)(& ah->channels);
    #line 381 
    sband->n_channels = (int)ath5k_setup_channels(ah,sband->channels,2U,(unsigned int)max_c);
    #line 384 
    (hw->wiphy)->bands[0] = sband;
    #line 385 
    count_c = sband->n_channels;
    #line 386 
    max_c -= count_c;
  }
  else {
    #line 387 
    if ((int)test_bit(1L,(unsigned long *)(& ah->ah_capabilities.cap_mode)) != 0) {
      #line 389 
      memcpy((void *)sband->bitrates,(void *)(ath5k_rates),48UL);
      #line 391 
      sband->n_bitrates = 4;
      #line 397 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) {
        #line 398 
        i = 0;
        #line 398 
        while (i <= 3) {
          #line 399 
          (sband->bitrates + (unsigned long)i)->hw_value = (unsigned short)((unsigned int)(sband->bitrates + (unsigned long)i)->hw_value & 15U);
          #line 401 
          (sband->bitrates + (unsigned long)i)->hw_value_short = (unsigned short)((unsigned int)(sband->bitrates + (unsigned long)i)->hw_value_short & 15U);
          #line 398 
          i ++;
        }
      }
      #line 406 
      sband->channels = (struct ieee80211_channel *)(& ah->channels);
      #line 407 
      sband->n_channels = (int)ath5k_setup_channels(ah,sband->channels,1U,(unsigned int)max_c);
      #line 410 
      (hw->wiphy)->bands[0] = sband;
      #line 411 
      count_c = sband->n_channels;
      #line 412 
      max_c -= count_c;
    }
  }
  #line 414 
  ath5k_setup_rate_idx(ah,sband);
  #line 417 
  if ((int)test_bit(0L,(unsigned long *)(& ah->ah_capabilities.cap_mode)) != 0) {
    #line 418 
    sband = & ah->sbands[1];
    #line 419 
    sband->band = NL80211_BAND_5GHZ;
    #line 420 
    sband->bitrates = & ah->rates[1][0];
    #line 422 
    memcpy((void *)sband->bitrates,(void *)(& ath5k_rates[4]),96UL);
    #line 424 
    sband->n_bitrates = 8;
    #line 426 
    sband->channels = & ah->channels[count_c];
    #line 427 
    sband->n_channels = (int)ath5k_setup_channels(ah,sband->channels,0U,(unsigned int)max_c);
    #line 430 
    (hw->wiphy)->bands[1] = sband;
  }
  #line 432 
  ath5k_setup_rate_idx(ah,sband);
  #line 434 
  ath5k_debug_dump_bands(ah);
  #line 436 
  return 0;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_chan_set(struct ath5k_hw *ah, struct cfg80211_chan_def *chandef)
{
  #line 449 
  if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
    #line 449 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 449 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_chan_set",449,(ah->curchan)->center_freq,(chandef->chan)->center_freq);
  }
  #line 453 
  switch ((unsigned int)chandef->width) {
    #line 454 
    case (unsigned int)1: 
                          #line 454 
    ;
    #line 455 
    case (unsigned int)0: 
                          #line 455 
    ;
    #line 456 
    ah->ah_bwmode = (unsigned char)0U;
    #line 457 
    break;
    #line 458 
    case (unsigned int)6: 
                          #line 458 
    ;
    #line 459 
    ah->ah_bwmode = (unsigned char)1U;
    #line 460 
    break;
    #line 461 
    case (unsigned int)7: 
                          #line 461 
    ;
    #line 462 
    ah->ah_bwmode = (unsigned char)2U;
    #line 463 
    break;
    #line 464 
    default: 
             #line 464 
    ;
    {
      #line 465 
      int __ret_warn_on = 1;
      #line 465 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 466 
        ldv_inline_asm();
        #line 467 
        ldv_inline_asm();
      }
      #line 465 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 466 
    return -22;
  }
  #line 475 
  return ath5k_reset(ah,chandef->chan,(_Bool)1);
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_vif_iter(void *data, u8 *mac, struct ieee80211_vif *vif)
{
  #line 481 
  int i;
  #line 480 
  struct ath5k_vif_iter_data *iter_data = (struct ath5k_vif_iter_data *)data;
  #line 482 
  struct ath5k_vif *avf = (struct ath5k_vif *)(& vif->drv_priv);
  #line 484 
  if (iter_data->hw_macaddr != (u8 *)0U) {
    #line 485 
    i = 0;
    #line 485 
    while (i <= 5) {
      #line 486 
      iter_data->mask[i] = (unsigned char)((int)iter_data->mask[i] & ~ ((int)*(iter_data->hw_macaddr + (unsigned long)i) ^ (int)*(mac + (unsigned long)i)));
      #line 485 
      i ++;
    }
  }
  #line 489 
  if (! iter_data->found_active) {
    #line 490 
    iter_data->found_active = (_Bool)1;
    #line 491 
    memcpy((void *)(& iter_data->active_mac),(void *)mac,6UL);
  }
  #line 494 
  if ((int)iter_data->need_set_hw_addr != 0 && iter_data->hw_macaddr != (u8 *)0U) {
    #line 495 
    if ((int)ether_addr_equal(iter_data->hw_macaddr,mac) != 0) 
                                                               #line 496 
                                                               iter_data->need_set_hw_addr = (_Bool)0;
  }
  #line 498 
  if (! iter_data->any_assoc) 
    #line 499 
    if ((int)avf->assoc != 0) 
                              #line 500 
                              iter_data->any_assoc = (_Bool)1;
  #line 508 
  if (avf->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                      #line 509 
                                                      iter_data->opmode = NL80211_IFTYPE_AP;
  else {
    #line 511 
    if (avf->opmode == (unsigned int)NL80211_IFTYPE_STATION) 
                                                             #line 512 
                                                             (iter_data->n_stas) ++;
    #line 513 
    if (iter_data->opmode == (unsigned int)NL80211_IFTYPE_UNSPECIFIED) 
      #line 514 
      iter_data->opmode = avf->opmode;
  }
  #line 516 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_update_bssid_mask_and_opmode(struct ath5k_hw *ah, struct ieee80211_vif *vif)
{
  #line 523 
  struct ath5k_vif_iter_data iter_data;
  #line 524 
  u32 rfilt;
  #line 522 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 530 
  iter_data.hw_macaddr = (u8 *)(& common->macaddr);
  #line 531 
  eth_broadcast_addr((u8 *)(& iter_data.mask));
  #line 532 
  iter_data.found_active = (_Bool)0;
  #line 533 
  iter_data.need_set_hw_addr = (_Bool)1;
  #line 534 
  iter_data.opmode = NL80211_IFTYPE_UNSPECIFIED;
  #line 535 
  iter_data.n_stas = 0;
  #line 537 
  if (vif != (struct ieee80211_vif *)0) 
                                        #line 538 
                                        ath5k_vif_iter((void *)(& iter_data),(u8 *)(& vif->addr),vif);
  #line 541 
  ieee80211_iterate_active_interfaces_atomic(ah->hw,1U,& ath5k_vif_iter,(void *)(& iter_data));
  #line 544 
  memcpy((void *)(& ah->bssidmask),(void *)(& iter_data.mask),6UL);
  #line 546 
  ah->opmode = iter_data.opmode;
  #line 547 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_UNSPECIFIED) 
                                                              #line 549 
                                                              ah->opmode = NL80211_IFTYPE_STATION;
  #line 551 
  ath5k_hw_set_opmode(ah,ah->opmode);
  #line 552 
  if ((long)((ah->debug.level & 4U) != 0U) != 0L) {
    #line 552 
    if ((long)(net_ratelimit() != 0) != 0L) {
      #line 552 
      ;
      #line 552 
      ;
      #line 552 
      _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_update_bssid_mask_and_opmode",552,(unsigned int)ah->opmode,ath_opmode_to_string(ah->opmode));
    }
  }
  #line 555 
  if ((int)iter_data.need_set_hw_addr != 0 && (int)iter_data.found_active != 0) 
    #line 556 
    ath5k_hw_set_lladdr(ah,(u8 *)(& iter_data.active_mac));
  #line 558 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 559 
                                                   ath5k_hw_set_bssid_mask(ah,(u8 *)(& ah->bssidmask));
  #line 562 
  if (iter_data.n_stas > 1) 
                            #line 567 
                            ah->filter_flags |= 32U;
  #line 570 
  rfilt = ah->filter_flags;
  #line 571 
  ath5k_hw_set_rx_filter(ah,rfilt);
  #line 572 
  if ((long)((ah->debug.level & 4U) != 0U) != 0L) {
    #line 572 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 572 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_update_bssid_mask_and_opmode",572,rfilt);
  }
  #line 573 
  return;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
__inline static int ath5k_hw_to_driver_rix(struct ath5k_hw *ah, int hw_rix)
{
  #line 581 
  int __ret_warn_on;
  #line 586 
  int __ret_warn_on_0;
  #line 578 
  int rix;
  #line 581 
  __ret_warn_on = (unsigned int)hw_rix > 31U;
  #line 581 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 581 
    __warn_printk((char *)"hw_rix out of bounds: %x\n",hw_rix);
    #line 582 
    ldv_inline_asm();
    #line 583 
    ldv_inline_asm();
  }
  #line 581 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 583 
                                                return 0;
  #line 585 
  rix = (int)ah->rate_idx[(unsigned int)(ah->curchan)->band][hw_rix];
  #line 586 
  __ret_warn_on_0 = rix < 0;
  #line 586 
  if ((long)(__ret_warn_on_0 != 0) != 0L) {
    #line 586 
    __warn_printk((char *)"invalid hw_rix: %x\n",hw_rix);
    #line 587 
    ldv_inline_asm();
    #line 588 
    ldv_inline_asm();
  }
  #line 586 
  if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                  #line 587 
                                                  rix = 0;
  #line 589 
  return rix;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct sk_buff *ath5k_rx_skb_alloc(struct ath5k_hw *ah, dma_addr_t *skb_addr)
{
  #line 600 
  struct sk_buff *skb;
  #line 599 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 606 
  skb = ath_rxbuf_alloc(common,common->rx_bufsize,2592U);
  #line 610 
  if (skb == (struct sk_buff *)0) {
    #line 611 
    if (net_ratelimit() != 0) 
                              #line 611 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t alloc skbuff of size %u\n",common->rx_bufsize);
    #line 613 
    return (struct sk_buff *)0;
  }
  #line 616 
  *skb_addr = dma_map_single_attrs(ah->dev,(void *)skb->data,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 620 
  if ((long)(dma_mapping_error(ah->dev,*skb_addr) != 0) != 0L) {
    #line 621 
    if (net_ratelimit() != 0) 
                              #line 621 
                              _ath5k_printk(ah,(char *)"\001",(char *)"%s: DMA mapping failed\n",(char *)"ath5k_rx_skb_alloc");
    #line 622 
    consume_skb(skb);
    #line 623 
    return (struct sk_buff *)0;
  }
  #line 625 
  return skb;
}

#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_rxbuf_setup(struct ath5k_hw *ah, struct ath5k_buf *bf)
{
  #line 632 
  struct ath5k_desc *ds;
  #line 633 
  int ret;
  #line 631 
  struct sk_buff *skb = bf->skb;
  #line 635 
  if (skb == (struct sk_buff *)0) {
    #line 636 
    skb = ath5k_rx_skb_alloc(ah,& bf->skbaddr);
    #line 637 
    if (skb == (struct sk_buff *)0) 
                                    #line 638 
                                    return -12;
    #line 639 
    bf->skb = skb;
  }
  #line 657 
  ds = bf->desc;
  #line 658 
  ds->ds_link = (unsigned int)bf->daddr;
  #line 659 
  ds->ds_data = (unsigned int)bf->skbaddr;
  #line 660 
  ret = ath5k_hw_setup_rx_desc(ah,ds,ah->common.rx_bufsize,0U);
  #line 661 
  if (ret != 0) {
    #line 662 
    if (net_ratelimit() != 0) 
                              #line 662 
                              _ath5k_printk(ah,(char *)"\001",(char *)"%s: could not setup RX desc\n",(char *)"ath5k_rxbuf_setup");
    #line 663 
    return ret;
  }
  #line 666 
  if (ah->rxlink != (u32 *)0U) 
                               #line 667 
                               *(ah->rxlink) = (unsigned int)bf->daddr;
  #line 668 
  ah->rxlink = & ds->ds_link;
  #line 669 
  return 0;
}

#line 672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static enum ath5k_pkt_type get_hw_packet_type(struct sk_buff *skb)
{
  #line 674 
  struct ieee80211_hdr *hdr;
  #line 675 
  enum ath5k_pkt_type htype;
  #line 676 
  __le16 fc;
  #line 678 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 679 
  fc = hdr->frame_control;
  #line 681 
  if ((int)ieee80211_is_beacon((unsigned short)((int)fc)) != 0) 
                                                                #line 682 
                                                                htype = AR5K_PKT_TYPE_BEACON;
  else {
    #line 683 
    if ((int)ieee80211_is_probe_resp((unsigned short)((int)fc)) != 0) 
      #line 684 
      htype = AR5K_PKT_TYPE_PROBE_RESP;
    else {
      #line 685 
      if ((int)ieee80211_is_atim((unsigned short)((int)fc)) != 0) 
                                                                  #line 686 
                                                                  htype = AR5K_PKT_TYPE_ATIM;
      else {
        #line 687 
        if ((int)ieee80211_is_pspoll((unsigned short)((int)fc)) != 0) 
          #line 688 
          htype = AR5K_PKT_TYPE_PSPOLL; else 
                                             #line 690 
                                             htype = AR5K_PKT_TYPE_NORMAL;
      }
    }
  }
  #line 692 
  return htype;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ieee80211_rate *ath5k_get_rate(struct ieee80211_hw *hw, struct ieee80211_tx_info *info, struct ath5k_buf *bf, int idx)
{
  #line 704 
  if ((int)bf->rates[idx].idx < 0) 
                                   #line 705 
                                   return (struct ieee80211_rate *)0;
  #line 708 
  return ((hw->wiphy)->bands[(int)info->band])->bitrates + (unsigned long)bf->rates[idx].idx;
}

#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static u16 ath5k_get_rate_hw_value(struct ieee80211_hw *hw, struct ieee80211_tx_info *info, struct ath5k_buf *bf, int idx)
{
  #line 716 
  struct ieee80211_rate *rate;
  #line 717 
  u16 hw_rate;
  #line 718 
  u8 rc_flags;
  #line 720 
  rate = ath5k_get_rate(hw,info,bf,idx);
  #line 721 
  if (rate == (struct ieee80211_rate *)0) 
                                          #line 722 
                                          return (unsigned short)0U;
  #line 724 
  rc_flags = (unsigned char)bf->rates[idx].flags;
  #line 725 
  if (((int)rc_flags & 4) != 0) 
                                #line 725 
                                hw_rate = rate->hw_value_short; else 
                                                                  #line 725 
                                                                  hw_rate = rate->hw_value;
  #line 728 
  return hw_rate;
}

#line 732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_txbuf_setup(struct ath5k_hw *ah, struct ath5k_buf *bf, struct ath5k_txq *txq, int padsize, struct ieee80211_tx_control *control)
{
  #line 739 
  unsigned int pktlen;
  #line 739 
  unsigned int flags;
  #line 740 
  struct ieee80211_rate *rate;
  #line 741 
  unsigned int mrr_rate[3U];
  #line 741 
  unsigned int mrr_tries[3U];
  #line 742 
  int i;
  #line 742 
  int ret;
  #line 743 
  u16 hw_rate;
  #line 746 
  u8 rc_flags;
  #line 757 
  struct ieee80211_sta *tmp_1;
  #line 736 
  struct ath5k_desc *ds = bf->desc;
  #line 737 
  struct sk_buff *skb = bf->skb;
  #line 738 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 739 
  unsigned int keyidx = 4294967295U;
  #line 744 
  u16 cts_rate = (unsigned short)0U;
  #line 745 
  u16 duration = (unsigned short)0U;
  #line 748 
  flags = 17U;
  #line 751 
  bf->skbaddr = dma_map_single_attrs(ah->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 754 
  if (dma_mapping_error(ah->dev,bf->skbaddr) != 0) 
                                                   #line 755 
                                                   return -28;
  #line 757 
  ;
  #line 757 
  ;
  #line 757 
  if (control != (struct ieee80211_tx_control *)0) 
                                                   #line 757 
                                                   tmp_1 = control->sta; else 
                                                                    #line 757 
                                                                    tmp_1 = (struct ieee80211_sta *)0;
  #line 757 
  ;
  #line 757 
  ieee80211_get_tx_rates(info->__anonCompField_ieee80211_tx_info_195.control.vif,tmp_1,skb,(struct ieee80211_tx_rate *)(& bf->rates),4);
  #line 760 
  rate = ath5k_get_rate(ah->hw,info,bf,0);
  #line 762 
  if (rate == (struct ieee80211_rate *)0) {
    #line 763 
    ret = -22;
    #line 764 
    goto err_unmap;
  }
  #line 767 
  if ((info->flags & 4U) != 0U) 
                                #line 768 
                                flags |= 2U;
  #line 770 
  rc_flags = (unsigned char)bf->rates[0].flags;
  #line 772 
  hw_rate = ath5k_get_rate_hw_value(ah->hw,info,bf,0);
  #line 774 
  pktlen = skb->len;
  #line 779 
  if (info->__anonCompField_ieee80211_tx_info_195.control.hw_key != (struct ieee80211_key_conf *)0) {
    #line 780 
    keyidx = (unsigned int)(info->__anonCompField_ieee80211_tx_info_195.control.hw_key)->hw_key_idx;
    #line 781 
    pktlen = (unsigned int)(info->__anonCompField_ieee80211_tx_info_195.control.hw_key)->icv_len + pktlen;
  }
  #line 783 
  if (((int)rc_flags & 1) != 0) {
    #line 784 
    flags |= 4U;
    #line 785 
    cts_rate = ieee80211_get_rts_cts_rate(ah->hw,info)->hw_value;
    #line 786 
    duration = ieee80211_rts_duration(ah->hw,info->__anonCompField_ieee80211_tx_info_195.control.vif,(unsigned long)pktlen,info);
  }
  #line 789 
  if (((int)rc_flags & 2) != 0) {
    #line 790 
    flags |= 8U;
    #line 791 
    cts_rate = ieee80211_get_rts_cts_rate(ah->hw,info)->hw_value;
    #line 792 
    duration = ieee80211_ctstoself_duration(ah->hw,info->__anonCompField_ieee80211_tx_info_195.control.vif,(unsigned long)pktlen,info);
  }
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ;
  #line 796 
  ret = (*(ah->ah_setup_tx_desc))(ah,ds,pktlen,ieee80211_get_hdrlen_from_skb(skb),padsize,get_hw_packet_type(skb),(unsigned int)(ah->ah_txpower.txp_requested * 2),(unsigned int)hw_rate,(unsigned int)bf->rates[0].count,keyidx,(unsigned int)ah->ah_tx_ant,flags,(unsigned int)cts_rate,(unsigned int)duration);
  #line 803 
  if (ret != 0) 
                #line 804 
                goto err_unmap;
  #line 807 
  if ((int)ah->ah_capabilities.cap_has_mrr_support != 0) {
    #line 808 
    memset((void *)(& mrr_rate),0,12UL);
    #line 809 
    memset((void *)(& mrr_tries),0,12UL);
    #line 811 
    i = 0;
    #line 811 
    while (i <= 2) {
      {
        #line 813 
        rate = ath5k_get_rate(ah->hw,info,bf,i);
        #line 814 
        if (rate == (struct ieee80211_rate *)0) 
                                                #line 815 
                                                break;
        #line 817 
        mrr_rate[i] = (unsigned int)ath5k_get_rate_hw_value(ah->hw,info,bf,i);
        #line 818 
        mrr_tries[i] = (unsigned int)bf->rates[i].count;
      }
      #line 811 
      i ++;
    }
    #line 821 
    ath5k_hw_setup_mrr_tx_desc(ah,ds,mrr_rate[0],mrr_tries[0],mrr_rate[1],mrr_tries[1],mrr_rate[2],mrr_tries[2]);
  }
  #line 827 
  ds->ds_link = 0U;
  #line 828 
  ds->ds_data = (unsigned int)bf->skbaddr;
  #line 830 
  cif_spin_lock_bh_lock_of_ath5k_txq(& txq->lock);
  #line 831 
  list_add_tail(& bf->list,& txq->q);
  #line 832 
  (txq->txq_len) ++;
  #line 833 
  if (txq->link == (u32 *)0U) 
                              #line 834 
                              ath5k_hw_set_txdp(ah,txq->qnum,(unsigned int)bf->daddr); else 
                                                                    #line 836 
                                                                    *(txq->link) = (unsigned int)bf->daddr;
  #line 838 
  txq->link = & ds->ds_link;
  #line 839 
  ath5k_hw_start_tx_dma(ah,txq->qnum);
  #line 840 
  cif_spin_unlock_bh_lock_of_ath5k_txq(& txq->lock);
  #line 842 
  return 0;
  #line 843 
  err_unmap: 
             #line 843 
  ;
  #line 844 
  dma_unmap_single_attrs(ah->dev,bf->skbaddr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 845 
  return ret;
}

#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_desc_alloc(struct ath5k_hw *ah)
{
  #line 855 
  struct ath5k_desc *ds;
  #line 856 
  struct ath5k_buf *bf;
  #line 857 
  dma_addr_t da;
  #line 858 
  unsigned int i;
  #line 859 
  int ret;
  #line 862 
  ah->desc_len = 7840UL;
  #line 865 
  ah->desc = (struct ath5k_desc *)dma_alloc_coherent(ah->dev,ah->desc_len,& ah->desc_daddr,3264U);
  #line 867 
  if (ah->desc == (struct ath5k_desc *)0) {
    #line 868 
    if (net_ratelimit() != 0) 
                              #line 868 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t allocate descriptors\n");
    #line 869 
    ret = -12;
    #line 870 
    goto err;
  }
  #line 872 
  ds = ah->desc;
  #line 873 
  da = ah->desc_daddr;
  #line 874 
  if ((long)(ah->debug.level != 0U) != 0L) {
    #line 874 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 874 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_desc_alloc",874,ds,ah->desc_len,ah->desc_daddr);
  }
  #line 877 
  bf = (struct ath5k_buf *)kcalloc(245UL,64UL,3264U);
  #line 879 
  if (bf == (struct ath5k_buf *)0) {
    #line 880 
    if (net_ratelimit() != 0) 
                              #line 880 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t allocate bufptr\n");
    #line 881 
    ret = -12;
    #line 882 
    goto err_free;
  }
  #line 884 
  ah->bufptr = bf;
  #line 886 
  INIT_LIST_HEAD(& ah->rxbuf);
  #line 887 
  i = 0U;
  #line 887 
  while (i <= 39U) {
    #line 888 
    bf->desc = ds;
    #line 889 
    bf->daddr = da;
    #line 890 
    list_add_tail(& bf->list,& ah->rxbuf);
    #line 887 
    i ++;
    #line 887 
    bf ++;
    #line 887 
    ds ++;
    #line 887 
    da += 32ULL;
  }
  #line 893 
  INIT_LIST_HEAD(& ah->txbuf);
  #line 894 
  ah->txbuf_len = 200U;
  #line 895 
  i = 0U;
  #line 895 
  while (i <= 199U) {
    #line 896 
    bf->desc = ds;
    #line 897 
    bf->daddr = da;
    #line 898 
    list_add_tail(& bf->list,& ah->txbuf);
    #line 895 
    i ++;
    #line 895 
    bf ++;
    #line 895 
    ds ++;
    #line 895 
    da += 32ULL;
  }
  #line 902 
  INIT_LIST_HEAD(& ah->bcbuf);
  #line 903 
  i = 0U;
  #line 903 
  while (i <= 3U) {
    #line 904 
    bf->desc = ds;
    #line 905 
    bf->daddr = da;
    #line 906 
    list_add_tail(& bf->list,& ah->bcbuf);
    #line 903 
    i ++;
    #line 903 
    bf ++;
    #line 903 
    ds ++;
    #line 903 
    da += 32ULL;
  }
  #line 909 
  return 0;
  #line 910 
  err_free: 
            #line 910 
  ;
  #line 911 
  dma_free_coherent(ah->dev,ah->desc_len,(void *)ah->desc,ah->desc_daddr);
  #line 912 
  err: 
       #line 912 
  ;
  #line 913 
  ah->desc = (struct ath5k_desc *)0;
  #line 914 
  return ret;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_txbuf_free_skb(struct ath5k_hw *ah, struct ath5k_buf *bf)
{
  #line 920 
  if ((long)(bf == (struct ath5k_buf *)0) != 0L) {
    #line 921 
    ldv_inline_asm();
    #line 922 
    ldv_inline_asm();
    #line 923 
    ldv_inline_asm();
    #line 920 
    ;
  }
  #line 921 
  if (bf->skb == (struct sk_buff *)0) 
                                      #line 922 
                                      return;
  #line 923 
  dma_unmap_single_attrs(ah->dev,bf->skbaddr,(unsigned long)(bf->skb)->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 925 
  ieee80211_free_txskb(ah->hw,bf->skb);
  #line 926 
  bf->skb = (struct sk_buff *)0;
  #line 927 
  bf->skbaddr = 0ULL;
  #line 928 
  (bf->desc)->ds_data = 0U;
  #line 929 
  return;
}

#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_rxbuf_free_skb(struct ath5k_hw *ah, struct ath5k_buf *bf)
{
  #line 934 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 936 
  if ((long)(bf == (struct ath5k_buf *)0) != 0L) {
    #line 937 
    ldv_inline_asm();
    #line 938 
    ldv_inline_asm();
    #line 939 
    ldv_inline_asm();
    #line 936 
    ;
  }
  #line 937 
  if (bf->skb == (struct sk_buff *)0) 
                                      #line 938 
                                      return;
  #line 939 
  dma_unmap_single_attrs(ah->dev,bf->skbaddr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 941 
  dev_kfree_skb_any(bf->skb);
  #line 942 
  bf->skb = (struct sk_buff *)0;
  #line 943 
  bf->skbaddr = 0ULL;
  #line 944 
  (bf->desc)->ds_data = 0U;
  #line 945 
  return;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_desc_free(struct ath5k_hw *ah)
{
  #line 954 
  void *__mptr_1;
  #line 952 
  void *__mptr;
  #line 956 
  void *__mptr_3;
  #line 950 
  struct ath5k_buf *bf;
  #line 952 
  __mptr = (void *)ah->txbuf.next;
  #line 952 
  bf = ((struct ath5k_buf *)__mptr);
  #line 952 
  while (& bf->list != & ah->txbuf) {
    #line 952 
    void *__mptr_0;
    #line 953 
    ath5k_txbuf_free_skb(ah,bf);
    #line 952 
    __mptr_0 = (void *)bf->list.next;
    #line 952 
    bf = ((struct ath5k_buf *)__mptr_0);
  }
  #line 954 
  __mptr_1 = (void *)ah->rxbuf.next;
  #line 954 
  bf = ((struct ath5k_buf *)__mptr_1);
  #line 954 
  while (& bf->list != & ah->rxbuf) {
    #line 954 
    void *__mptr_2;
    #line 955 
    ath5k_rxbuf_free_skb(ah,bf);
    #line 954 
    __mptr_2 = (void *)bf->list.next;
    #line 954 
    bf = ((struct ath5k_buf *)__mptr_2);
  }
  #line 956 
  __mptr_3 = (void *)ah->bcbuf.next;
  #line 956 
  bf = ((struct ath5k_buf *)__mptr_3);
  #line 956 
  while (& bf->list != & ah->bcbuf) {
    #line 956 
    void *__mptr_4;
    #line 957 
    ath5k_txbuf_free_skb(ah,bf);
    #line 956 
    __mptr_4 = (void *)bf->list.next;
    #line 956 
    bf = ((struct ath5k_buf *)__mptr_4);
  }
  #line 960 
  dma_free_coherent(ah->dev,ah->desc_len,(void *)ah->desc,ah->desc_daddr);
  #line 961 
  ah->desc = (struct ath5k_desc *)0;
  #line 962 
  ah->desc_daddr = 0ULL;
  #line 964 
  kfree((void *)ah->bufptr);
  #line 965 
  ah->bufptr = (struct ath5k_buf *)0;
  #line 966 
  return;
}

#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ath5k_txq *ath5k_txq_setup(struct ath5k_hw *ah, int qtype, int subtype)
{
  #line 977 
  struct ath5k_txq *txq;
  #line 986 
  int qnum;
  #line 978 
  struct ath5k_txq_info qi = {.tqi_type = 0, .tqi_subtype = (enum ath5k_tx_queue_subtype)subtype, .tqi_flags = (unsigned short)0, .tqi_aifs = (unsigned char)2U, .tqi_cw_min = (unsigned short)15U, .tqi_cw_max = (unsigned short)1023U, .tqi_cbr_period = 0U, .tqi_cbr_overflow_limit = 0U, .tqi_burst_time = 0U, .tqi_ready_time = 0U};
  #line 1000 
  qi.tqi_flags = (unsigned short)12U;
  #line 1002 
  qnum = ath5k_hw_setup_tx_queue(ah,(enum ath5k_tx_queue)qtype,& qi);
  #line 1003 
  if (qnum < 0) {
    #line 1008 
    return (struct ath5k_txq *)ERR_PTR((long)qnum);
  }
  #line 1010 
  txq = & ah->txqs[qnum];
  #line 1011 
  if (! txq->setup) {
    #line 1012 
    txq->qnum = (unsigned int)qnum;
    #line 1013 
    txq->link = (u32 *)0U;
    #line 1014 
    INIT_LIST_HEAD(& txq->q);
    #line 1015 
    spinlock_check(& txq->lock);
    {
      #line 1015 
      struct lock_class_key __key;
      #line 1015 
      __raw_spin_lock_init(& txq->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&txq->lock)->rlock",& __key);
    }
    #line 1016 
    txq->setup = (_Bool)1;
    #line 1017 
    txq->txq_len = 0;
    #line 1018 
    txq->txq_max = 50;
    #line 1019 
    txq->txq_poll_mark = (_Bool)0;
    #line 1020 
    txq->txq_stuck = 0U;
  }
  #line 1022 
  return & ah->txqs[qnum];
}

#line 1026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_beaconq_setup(struct ath5k_hw *ah)
{
  #line 1028 
  struct ath5k_txq_info qi = {.tqi_type = 0, .tqi_subtype = 0, .tqi_flags = (unsigned short)8U, .tqi_aifs = (unsigned char)2U, .tqi_cw_min = (unsigned short)15U, .tqi_cw_max = (unsigned short)1023U, .tqi_cbr_period = 0U, .tqi_cbr_overflow_limit = 0U, .tqi_burst_time = 0U, .tqi_ready_time = 0U};
  #line 1038 
  return ath5k_hw_setup_tx_queue(ah,(enum ath5k_tx_queue)AR5K_TX_QUEUE_BEACON,
                              & qi);
}

#line 1042  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_beaconq_config(struct ath5k_hw *ah)
{
  #line 1044 
  struct ath5k_txq_info qi;
  #line 1045 
  int ret;
  #line 1047 
  ret = ath5k_hw_get_tx_queueprops(ah,(int)ah->bhalq,& qi);
  #line 1048 
  if (ret != 0) 
                #line 1049 
                goto err;
  #line 1051 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP || ah->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 1057 
    qi.tqi_aifs = (unsigned char)0U;
    #line 1058 
    qi.tqi_cw_min = (unsigned short)0U;
    #line 1059 
    qi.tqi_cw_max = (unsigned short)0U;
  }
  else 
    #line 1060 
    if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) {
      #line 1064 
      qi.tqi_aifs = (unsigned char)0U;
      #line 1065 
      qi.tqi_cw_min = (unsigned short)0U;
      #line 1066 
      qi.tqi_cw_max = (unsigned short)30U;
    }
  #line 1069 
  if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
    #line 1069 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 1069 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beaconq_config",1069,(int)qi.tqi_aifs,(int)qi.tqi_cw_min,(int)qi.tqi_cw_max);
  }
  #line 1073 
  ret = ath5k_hw_set_tx_queueprops(ah,(int)ah->bhalq,& qi);
  #line 1074 
  if (ret != 0) {
    #line 1075 
    if (net_ratelimit() != 0) 
                              #line 1075 
                              _ath5k_printk(ah,(char *)"\001",(char *)"%s: unable to update parameters for beacon ",(char *)"ath5k_beaconq_config");
    #line 1077 
    goto err;
  }
  #line 1079 
  ret = ath5k_hw_reset_tx_queue(ah,ah->bhalq);
  #line 1080 
  if (ret != 0) 
                #line 1081 
                goto err;
  #line 1084 
  ret = ath5k_hw_get_tx_queueprops(ah,8,& qi);
  #line 1085 
  if (ret != 0) 
                #line 1086 
                goto err;
  #line 1088 
  qi.tqi_ready_time = (ah->bintval * 80U) / 100U;
  #line 1089 
  ret = ath5k_hw_set_tx_queueprops(ah,8,& qi);
  #line 1090 
  if (ret != 0) 
                #line 1091 
                goto err;
  #line 1093 
  ret = ath5k_hw_reset_tx_queue(ah,8U);
  #line 1094 
  err: 
       #line 1094 
  ;
  #line 1095 
  return ret;
}

#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_drain_tx_buffs(struct ath5k_hw *ah)
{
  #line 1112 
  struct ath5k_txq *txq;
  #line 1113 
  struct ath5k_buf *bf;
  #line 1113 
  struct ath5k_buf *bf0;
  #line 1114 
  int i;
  #line 1116 
  i = 0;
  #line 1116 
  while ((unsigned int)i <= 9U) {
    #line 1117 
    if ((int)ah->txqs[i].setup != 0) {
      #line 1120 
      void *__mptr_0;
      #line 1120 
      void *__mptr;
      #line 1118 
      txq = & ah->txqs[i];
      #line 1119 
      cif_spin_lock_bh_lock_of_ath5k_txq(& txq->lock);
      #line 1120 
      __mptr = (void *)txq->q.next;
      #line 1120 
      bf = ((struct ath5k_buf *)__mptr);
      #line 1120 
      __mptr_0 = (void *)bf->list.next;
      #line 1121 
      bf0 = ((struct ath5k_buf *)__mptr_0);
      #line 1120 
      while (& bf->list != & txq->q) {
        #line 1120 
        void *__mptr_1;
        #line 1121 
        ath5k_debug_printtxbuf(ah,bf);
        #line 1123 
        ath5k_txbuf_free_skb(ah,bf);
        #line 1125 
        cif_spin_lock_txbuflock_of_ath5k_hw(& ah->txbuflock);
        #line 1126 
        list_move_tail(& bf->list,& ah->txbuf);
        #line 1127 
        (ah->txbuf_len) ++;
        #line 1128 
        (txq->txq_len) --;
        #line 1129 
        cif_spin_unlock_txbuflock_of_ath5k_hw(& ah->txbuflock);
        #line 1120 
        bf = bf0;
        #line 1120 
        __mptr_1 = (void *)bf0->list.next;
        #line 1120 
        bf0 = ((struct ath5k_buf *)__mptr_1);
      }
      #line 1131 
      txq->link = (u32 *)0U;
      #line 1132 
      txq->txq_poll_mark = (_Bool)0;
      #line 1133 
      cif_spin_unlock_bh_lock_of_ath5k_txq(& txq->lock);
    }
    #line 1116 
    i ++;
  }
  #line 1135 
  return;
}

#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_txq_release(struct ath5k_hw *ah)
{
  #line 1142 
  unsigned int i;
  #line 1141 
  struct ath5k_txq *txq = (struct ath5k_txq *)(& ah->txqs);
  #line 1144 
  i = 0U;
  #line 1144 
  while (i <= 9U) {
    #line 1145 
    if ((int)txq->setup != 0) {
      #line 1146 
      ath5k_hw_release_tx_queue(ah,txq->qnum);
      #line 1147 
      txq->setup = (_Bool)0;
    }
    #line 1144 
    i ++;
    #line 1144 
    txq ++;
  }
  #line 1149 
  return;
}

#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_rx_start(struct ath5k_hw *ah)
{
  #line 1173 
  void *__mptr;
  #line 1180 
  void *__mptr_1;
  #line 1166 
  u16 __y;
  #line 1163 
  struct ath5k_buf *bf;
  #line 1164 
  int ret;
  #line 1162 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 1166 
  __y = common->cachelsz;
  #line 1166 
  common->rx_bufsize = (unsigned int)((((int)__y + 2351) / (int)__y) * (int)__y);
  #line 1168 
  if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
    #line 1168 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 1168 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_rx_start",1168,(int)common->cachelsz,common->rx_bufsize);
  }
  #line 1171 
  cif_spin_lock_bh_rxbuflock_of_ath5k_hw(& ah->rxbuflock);
  #line 1172 
  ah->rxlink = (u32 *)0U;
  #line 1173 
  __mptr = (void *)ah->rxbuf.next;
  #line 1173 
  bf = ((struct ath5k_buf *)__mptr);
  #line 1173 
  while (& bf->list != & ah->rxbuf) {
    #line 1173 
    void *__mptr_0;
    #line 1174 
    ret = ath5k_rxbuf_setup(ah,bf);
    #line 1175 
    if (ret != 0) {
      #line 1176 
      cif_spin_unlock_bh_rxbuflock_of_ath5k_hw(& ah->rxbuflock);
      #line 1177 
      goto err;
    }
    #line 1173 
    __mptr_0 = (void *)bf->list.next;
    #line 1173 
    bf = ((struct ath5k_buf *)__mptr_0);
  }
  #line 1180 
  __mptr_1 = (void *)ah->rxbuf.next;
  #line 1180 
  bf = ((struct ath5k_buf *)__mptr_1);
  #line 1181 
  ath5k_hw_set_rxdp(ah,(unsigned int)bf->daddr);
  #line 1182 
  cif_spin_unlock_bh_rxbuflock_of_ath5k_hw(& ah->rxbuflock);
  #line 1184 
  ath5k_hw_start_rx_dma(ah);
  #line 1185 
  ath5k_update_bssid_mask_and_opmode(ah,(struct ieee80211_vif *)0);
  #line 1186 
  ath5k_hw_start_rx_pcu(ah);
  #line 1188 
  return 0;
  #line 1189 
  err: 
       #line 1189 
  ;
  #line 1190 
  return ret;
}

#line 1201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_rx_stop(struct ath5k_hw *ah)
{
  #line 1204 
  ath5k_hw_set_rx_filter(ah,0U);
  #line 1205 
  ath5k_hw_stop_rx_pcu(ah);
  #line 1207 
  ath5k_debug_printrxbuffs(ah);
  #line 1208 
  return;
}

#line 1211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static unsigned int ath5k_rx_decrypted(struct ath5k_hw *ah, struct sk_buff *skb, struct ath5k_rx_status *rs)
{
  #line 1216 
  unsigned int keyix;
  #line 1216 
  unsigned int hlen;
  #line 1214 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 1215 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1218 
  if (((int)rs->rs_status & 8) == 0 && (unsigned int)rs->rs_keyix != 255U) 
    #line 1220 
    return 2U;
  #line 1225 
  hlen = ieee80211_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 1226 
  if ((int)ieee80211_has_protected((unsigned short)((int)hdr->frame_control)) != 0) 
    #line 1226 
    if (((int)rs->rs_status & 8) == 0) 
      #line 1227 
      if (skb->len >= hlen + 4U) {
        #line 1229 
        keyix = (unsigned int)((int)*(skb->data + (unsigned long)(hlen + 3U)) >> 6);
        #line 1231 
        if ((int)test_bit((long)keyix,(unsigned long *)(& common->keymap)) != 0) 
          #line 1232 
          return 2U;
      }
  #line 1235 
  return 0U;
}

#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_check_ibss_tsf(struct ath5k_hw *ah, struct sk_buff *skb, struct ieee80211_rx_status *rxs)
{
  #line 1243 
  u64 tsf;
  #line 1243 
  u64 bc_tstamp;
  #line 1244 
  u32 hw_tu;
  #line 1245 
  struct ieee80211_mgmt *mgmt = (struct ieee80211_mgmt *)skb->data;
  #line 1247 
  if (((int)mgmt->u.beacon.capab_info & 2) != 0) {
    #line 1253 
    tsf = ath5k_hw_get_tsf64(ah);
    #line 1254 
    bc_tstamp = mgmt->u.beacon.timestamp;
    #line 1255 
    hw_tu = (unsigned int)(tsf >> 10);
    #line 1257 
    if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                     #line 1257 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_check_ibss_tsf",1257,bc_tstamp,rxs->mactime,rxs->mactime - bc_tstamp,tsf);
    #line 1275 
    if (rxs->mactime < bc_tstamp) {
      #line 1276 
      if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                       #line 1276 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_check_ibss_tsf",1276,rxs->mactime,tsf);
      #line 1280 
      rxs->mactime = tsf;
    }
    #line 1289 
    if (ah->nexttbtt <= hw_tu) 
                               #line 1290 
                               ath5k_beacon_update_timers(ah,bc_tstamp);
    #line 1295 
    if (! ath5k_hw_check_beacon_timers(ah,(int)ah->bintval)) {
      #line 1296 
      ath5k_beacon_update_timers(ah,bc_tstamp);
      #line 1297 
      if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                       #line 1297 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_check_ibss_tsf",1297);
    }
  }
  #line 1300 
  return;
}

#line 1306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_common_padpos(struct sk_buff *skb)
{
  #line 1308 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1309 
  __le16 frame_control = hdr->frame_control;
  #line 1310 
  int padpos = 24;
  #line 1312 
  if ((int)ieee80211_has_a4((unsigned short)((int)frame_control)) != 0) 
    #line 1313 
    padpos += 6;
  #line 1315 
  if ((int)ieee80211_is_data_qos((unsigned short)((int)frame_control)) != 0) 
    #line 1316 
    padpos += 2;
  #line 1318 
  return padpos;
}

#line 1325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_add_padding(struct sk_buff *skb)
{
  #line 1327 
  int padpos = ath5k_common_padpos(skb);
  #line 1328 
  int padsize = padpos & 3;
  #line 1330 
  if (padsize != 0 && skb->len > (unsigned int)padpos) {
    #line 1332 
    ;
    #line 1332 
    if (skb_headroom(skb) < (unsigned int)padsize) 
                                                   #line 1333 
                                                   return -1;
    #line 1335 
    skb_push(skb,(unsigned int)padsize);
    #line 1336 
    __memmove((void *)skb->data,(void *)(skb->data + (unsigned long)padsize),(unsigned long)padpos);
    #line 1337 
    return padsize;
  }
  #line 1340 
  return 0;
}

#line 1356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_remove_padding(struct sk_buff *skb)
{
  #line 1358 
  int padpos = ath5k_common_padpos(skb);
  #line 1359 
  int padsize = padpos & 3;
  #line 1361 
  if (padsize != 0 && skb->len >= (unsigned int)(padpos + padsize)) {
    #line 1362 
    __memmove((void *)(skb->data + (unsigned long)padsize),(void *)skb->data,(unsigned long)padpos);
    #line 1363 
    skb_pull(skb,(unsigned int)padsize);
    #line 1364 
    return padsize;
  }
  #line 1367 
  return 0;
}

#line 1371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_receive_frame(struct ath5k_hw *ah, struct sk_buff *skb, struct ath5k_rx_status *rs)
{
  #line 1374 
  struct ieee80211_rx_status *rxs;
  #line 1375 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 1377 
  ath5k_remove_padding(skb);
  #line 1379 
  rxs = IEEE80211_SKB_RXCB(skb);
  #line 1381 
  rxs->flag = 0U;
  #line 1382 
  if ((long)(((int)rs->rs_status & 16) != 0) != 0L) 
                                                    #line 1383 
                                                    rxs->flag |= 1U;
  #line 1384 
  if ((long)(((int)rs->rs_status & 1) != 0) != 0L) 
                                                   #line 1385 
                                                   rxs->flag |= 32U;
  #line 1397 
  rxs->mactime = ath5k_extend_tsf(ah,(unsigned int)rs->rs_tstamp);
  #line 1398 
  rxs->flag |= 65536U;
  #line 1400 
  rxs->freq = (unsigned short)(ah->curchan)->center_freq;
  #line 1401 
  rxs->band = (unsigned char)(ah->curchan)->band;
  #line 1403 
  rxs->signal = (signed char)(ah->ah_noise_floor + (s32)rs->rs_rssi);
  #line 1405 
  rxs->antenna = rs->rs_antenna;
  #line 1407 
  if ((unsigned int)rs->rs_antenna + 255U <= 3U) 
                                                 #line 1408 
                                                 (ah->stats.antenna_rx[(int)rs->rs_antenna]) ++; else 
                                                                    #line 1410 
                                                                    (ah->stats.antenna_rx[0]) ++;
  #line 1412 
  rxs->rate_idx = (unsigned char)ath5k_hw_to_driver_rix(ah,(int)rs->rs_rate);
  #line 1413 
  rxs->flag |= ath5k_rx_decrypted(ah,skb,rs);
  #line 1414 
  switch ((int)ah->ah_bwmode) {
    #line 1415 
    case 1: 
            #line 1415 
    ;
    #line 1416 
    rxs->bw = (unsigned char)1U;
    #line 1417 
    break;
    #line 1418 
    case 2: 
            #line 1418 
    ;
    #line 1419 
    rxs->bw = (unsigned char)2U;
    #line 1420 
    break;
    #line 1421 
    default: 
             #line 1421 
    ;
    #line 1422 
    break;
  }
  #line 1425 
  if ((int)((unsigned short)rs->rs_rate) == (int)(ah->sbands[(unsigned int)(ah->curchan)->band].bitrates + (unsigned long)rxs->rate_idx)->hw_value_short) 
    #line 1427 
    rxs->enc_flags = (unsigned char)((unsigned int)rxs->enc_flags | 1U);
  #line 1429 
  trace_ath5k_rx(ah,skb);
  #line 1431 
  if ((int)ath_is_mybeacon(common,(struct ieee80211_hdr *)skb->data) != 0) {
    #line 1432 
    ewma_beacon_rssi_add(& ah->ah_beacon_rssi_avg,(unsigned long)rs->rs_rssi);
    #line 1435 
    if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                          #line 1436 
                                                          ath5k_check_ibss_tsf(ah,skb,rxs);
  }
  #line 1439 
  ieee80211_rx(ah->hw,skb);
  #line 1440 
  return;
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static bool ath5k_receive_frame_ok(struct ath5k_hw *ah, struct ath5k_rx_status *rs)
{
  #line 1450 
  (ah->stats.rx_all_count) ++;
  #line 1451 
  ah->stats.rx_bytes_count += (unsigned int)rs->rs_datalen;
  #line 1453 
  if ((long)((unsigned int)rs->rs_status != 0U) != 0L) {
    #line 1454 
    unsigned int filters;
    #line 1456 
    if (((int)rs->rs_status & 1) != 0) 
                                       #line 1457 
                                       (ah->stats.rxerr_crc) ++;
    #line 1458 
    if (((int)rs->rs_status & 4) != 0) 
                                       #line 1459 
                                       (ah->stats.rxerr_fifo) ++;
    #line 1460 
    if (((int)rs->rs_status & 2) != 0) {
      #line 1461 
      (ah->stats.rxerr_phy) ++;
      #line 1462 
      if ((unsigned int)rs->rs_phyerr + 255U <= 30U) 
                                                     #line 1463 
                                                     (ah->stats.rxerr_phy_code[(int)rs->rs_phyerr]) ++;
      #line 1471 
      if ((unsigned int)rs->rs_phyerr == 23U || (unsigned int)rs->rs_phyerr == 31U) {
        #line 1473 
        rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 1U);
        #line 1474 
        rs->rs_status = (unsigned char)((unsigned int)rs->rs_status & 253U);
      }
      else 
           #line 1476 
           return (_Bool)0;
    }
    #line 1479 
    if (((int)rs->rs_status & 8) != 0) {
      #line 1490 
      (ah->stats.rxerr_decrypt) ++;
      #line 1491 
      if ((unsigned int)rs->rs_keyix == 255U && ((int)rs->rs_status & 1) == 0) 
        #line 1493 
        return (_Bool)1;
    }
    #line 1495 
    if (((int)rs->rs_status & 16) != 0) {
      #line 1496 
      (ah->stats.rxerr_mic) ++;
      #line 1497 
      return (_Bool)1;
    }
    #line 1504 
    filters = 8U;
    #line 1505 
    if ((ah->fif_filter_flags & 4U) != 0U) 
                                           #line 1506 
                                           filters |= 1U;
    #line 1508 
    if (((unsigned int)rs->rs_status & ~ filters) != 0U) 
                                                         #line 1509 
                                                         return (_Bool)0;
  }
  #line 1512 
  if ((long)((unsigned int)rs->rs_more != 0U) != 0L) {
    #line 1513 
    (ah->stats.rxerr_jumbo) ++;
    #line 1514 
    return (_Bool)0;
  }
  #line 1516 
  return (_Bool)1;
}

#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_set_current_imask(struct ath5k_hw *ah)
{
  #line 1522 
  enum ath5k_int imask;
  #line 1523 
  unsigned long flags;
  #line 1525 
  if ((int)test_bit(4L,(unsigned long *)(& ah->status)) != 0) 
                                                              #line 1526 
                                                              return;
  #line 1528 
  cif___ldv_spin_lock_irqlock_of_ath5k_hw(& ah->irqlock);
  #line 1529 
  imask = ah->imask;
  #line 1530 
  if ((int)ah->rx_pending != 0) 
                                #line 1531 
                                imask = (enum ath5k_int)((unsigned int)imask & 4294967232U);
  #line 1532 
  if ((int)ah->tx_pending != 0) 
                                #line 1533 
                                imask = (enum ath5k_int)((unsigned int)imask & 4294963263U);
  #line 1534 
  ath5k_hw_set_imr(ah,imask);
  #line 1535 
  cif_spin_unlock_irqrestore_irqlock_of_ath5k_hw(& ah->irqlock,flags);
  #line 1536 
  return;
}

#line 1539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tasklet_rx(unsigned long data)
{
  #line 1542 
  struct sk_buff *skb;
  #line 1542 
  struct sk_buff *next_skb;
  #line 1543 
  dma_addr_t next_skb_addr;
  #line 1546 
  struct ath5k_buf *bf;
  #line 1547 
  struct ath5k_desc *ds;
  #line 1548 
  int ret;
  #line 1541 
  struct ath5k_rx_status rs = {.rs_datalen = (unsigned short)0, .rs_tstamp = (unsigned short)0, .rs_status = (unsigned char)0, .rs_phyerr = (unsigned char)0, .rs_rssi = (signed char)0, .rs_keyix = (unsigned char)0, .rs_rate = (unsigned char)0, .rs_antenna = (unsigned char)0, .rs_more = (unsigned char)0};
  #line 1544 
  struct ath5k_hw *ah = (struct ath5k_hw *)data;
  #line 1545 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 1550 
  cif_spin_lock_rxbuflock_of_ath5k_hw(& ah->rxbuflock);
  #line 1551 
  if (list_empty(& ah->rxbuf) != 0) {
    #line 1552 
    if (net_ratelimit() != 0) 
                              #line 1552 
                              _ath5k_printk(ah,(char *)"\001",(char *)"empty rx buf pool\n");
    #line 1553 
    goto unlock;
  }
  #line 1555 
  while (1) {
    {
      #line 1556 
      void *__mptr;
      #line 1556 
      __mptr = (void *)ah->rxbuf.next;
      #line 1556 
      bf = ((struct ath5k_buf *)__mptr);
      #line 1557 
      if ((long)(bf->skb == (struct sk_buff *)0) != 0L) {
        #line 1558 
        ldv_inline_asm();
        #line 1559 
        ldv_inline_asm();
        #line 1560 
        ldv_inline_asm();
        #line 1557 
        ;
      }
      #line 1558 
      skb = bf->skb;
      #line 1559 
      ds = bf->desc;
      #line 1562 
      ;
      #line 1562 
      if ((unsigned long long)ath5k_hw_get_rxdp(ah) == bf->daddr) 
                                                                  #line 1563 
                                                                  break;
      #line 1565 
      ret = (*(ah->ah_proc_rx_desc))(ah,ds,& rs);
      #line 1566 
      if ((long)(ret == -115) != 0L) 
                                     #line 1567 
                                     break;
      else 
        #line 1568 
        if ((long)(ret != 0) != 0L) {
          #line 1569 
          if (net_ratelimit() != 0) 
                                    #line 1569 
                                    _ath5k_printk(ah,(char *)"\001",(char *)"error in processing rx descriptor\n");
          #line 1570 
          (ah->stats.rxerr_proc) ++;
          #line 1571 
          break;
        }
      #line 1574 
      if ((int)ath5k_receive_frame_ok(ah,& rs) != 0) {
        #line 1575 
        next_skb = ath5k_rx_skb_alloc(ah,& next_skb_addr);
        #line 1581 
        if (next_skb == (struct sk_buff *)0) 
                                             #line 1582 
                                             goto next;
        #line 1584 
        dma_unmap_single_attrs(ah->dev,bf->skbaddr,(unsigned long)common->rx_bufsize,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
        #line 1588 
        skb_put(skb,(unsigned int)rs.rs_datalen);
        #line 1590 
        ath5k_receive_frame(ah,skb,& rs);
        #line 1592 
        bf->skb = next_skb;
        #line 1593 
        bf->skbaddr = next_skb_addr;
      }
      #line 1595 
      next: 
            #line 1595 
      ;
      #line 1596 
      list_move_tail(& bf->list,& ah->rxbuf);
    }
    #line 1597 
    if (! (ath5k_rxbuf_setup(ah,bf) == 0)) 
                                           #line 1555 
                                           break;
  }
  #line 1598 
  unlock: 
          #line 1598 
  ;
  #line 1599 
  cif_spin_unlock_rxbuflock_of_ath5k_hw(& ah->rxbuflock);
  #line 1600 
  ah->rx_pending = (_Bool)0;
  #line 1601 
  ath5k_set_current_imask(ah);
  #line 1602 
  return;
}

#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_tx_queue(struct ieee80211_hw *hw, struct sk_buff *skb, struct ath5k_txq *txq, struct ieee80211_tx_control *control)
{
  #line 1642 
  void *__mptr;
  #line 1614 
  struct ath5k_buf *bf;
  #line 1615 
  unsigned long flags;
  #line 1616 
  int padsize;
  #line 1613 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 1618 
  trace_ath5k_tx(ah,skb,txq);
  #line 1624 
  padsize = ath5k_add_padding(skb);
  #line 1625 
  if (padsize < 0) {
    #line 1626 
    if (net_ratelimit() != 0) 
                              #line 1626 
                              _ath5k_printk(ah,(char *)"\001",(char *)"tx hdrlen not %%4: not enough");
    #line 1628 
    goto drop_packet;
  }
  #line 1631 
  if (txq->txq_len >= txq->txq_max && txq->qnum <= 3U) 
                                                       #line 1633 
                                                       ieee80211_stop_queue(hw,(int)txq->qnum);
  #line 1635 
  cif___ldv_spin_lock_txbuflock_of_ath5k_hw(& ah->txbuflock);
  #line 1636 
  if (list_empty(& ah->txbuf) != 0) {
    #line 1637 
    if (net_ratelimit() != 0) 
                              #line 1637 
                              _ath5k_printk(ah,(char *)"\001",(char *)"no further txbuf available, dropping packet\n");
    #line 1638 
    cif_spin_unlock_irqrestore_txbuflock_of_ath5k_hw(& ah->txbuflock,flags);
    #line 1639 
    ieee80211_stop_queues(hw);
    #line 1640 
    goto drop_packet;
  }
  #line 1642 
  __mptr = (void *)ah->txbuf.next;
  #line 1642 
  bf = ((struct ath5k_buf *)__mptr);
  #line 1643 
  list_del(& bf->list);
  #line 1644 
  (ah->txbuf_len) --;
  #line 1645 
  if (list_empty(& ah->txbuf) != 0) 
                                    #line 1646 
                                    ieee80211_stop_queues(hw);
  #line 1647 
  cif_spin_unlock_irqrestore_txbuflock_of_ath5k_hw(& ah->txbuflock,flags);
  #line 1649 
  bf->skb = skb;
  #line 1651 
  if (ath5k_txbuf_setup(ah,bf,txq,padsize,control) != 0) {
    #line 1652 
    bf->skb = (struct sk_buff *)0;
    #line 1653 
    cif___ldv_spin_lock_txbuflock_of_ath5k_hw(& ah->txbuflock);
    #line 1654 
    list_add_tail(& bf->list,& ah->txbuf);
    #line 1655 
    (ah->txbuf_len) ++;
    #line 1656 
    cif_spin_unlock_irqrestore_txbuflock_of_ath5k_hw(& ah->txbuflock,flags);
    #line 1657 
    goto drop_packet;
  }
  #line 1659 
  return;
  #line 1661 
  drop_packet: 
               #line 1661 
  ;
  #line 1662 
  ieee80211_free_txskb(hw,skb);
  #line 1663 
  return;
}

#line 1666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tx_frame_completed(struct ath5k_hw *ah, struct sk_buff *skb, struct ath5k_txq *txq, struct ath5k_tx_status *ts, struct ath5k_buf *bf)
{
  #line 1670 
  struct ieee80211_tx_info *info;
  #line 1671 
  u8 tries[3U];
  #line 1672 
  int i;
  #line 1673 
  int size = 0;
  #line 1675 
  (ah->stats.tx_all_count) ++;
  #line 1676 
  ah->stats.tx_bytes_count += skb->len;
  #line 1677 
  info = IEEE80211_SKB_CB(skb);
  #line 1679 
  size = 12;
  #line 1680 
  memcpy((void *)(& info->__anonCompField_ieee80211_tx_info_195.status.rates),(void *)(& bf->rates),(unsigned long)size);
  #line 1682 
  tries[0] = (unsigned char)info->__anonCompField_ieee80211_tx_info_195.status.rates[0].count;
  #line 1683 
  tries[1] = (unsigned char)info->__anonCompField_ieee80211_tx_info_195.status.rates[1].count;
  #line 1684 
  tries[2] = (unsigned char)info->__anonCompField_ieee80211_tx_info_195.status.rates[2].count;
  #line 1686 
  ieee80211_tx_info_clear_status(info);
  #line 1688 
  i = 0;
  #line 1688 
  while ((int)ts->ts_final_idx > i) {
    {
      #line 1689 
      struct ieee80211_tx_rate *r = & info->__anonCompField_ieee80211_tx_info_195.status.rates[i];
      #line 1692 
      r->count = (unsigned short)tries[i];
    }
    #line 1688 
    i ++;
  }
  #line 1695 
  info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)ts->ts_final_idx].count = (unsigned short)ts->ts_final_retry;
  #line 1696 
  info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)ts->ts_final_idx + 1].idx = (signed char)(-1);
  #line 1698 
  if ((long)((unsigned int)ts->ts_status != 0U) != 0L) {
    #line 1699 
    (ah->stats.ack_fail) ++;
    #line 1700 
    if (((int)ts->ts_status & 2) != 0) {
      #line 1701 
      info->flags |= 256U;
      #line 1702 
      (ah->stats.txerr_filt) ++;
    }
    #line 1704 
    if (((int)ts->ts_status & 1) != 0) 
                                       #line 1705 
                                       (ah->stats.txerr_retry) ++;
    #line 1706 
    if (((int)ts->ts_status & 4) != 0) 
                                       #line 1707 
                                       (ah->stats.txerr_fifo) ++;
  }
  else {
    #line 1709 
    info->flags |= 512U;
    #line 1710 
    info->__anonCompField_ieee80211_tx_info_195.status.ack_signal = (int)ts->ts_rssi;
    #line 1713 
    info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)ts->ts_final_idx].count = (u16)((int)info->__anonCompField_ieee80211_tx_info_195.status.rates[(int)ts->ts_final_idx].count + 1);
  }
  #line 1720 
  ath5k_remove_padding(skb);
  #line 1722 
  if ((unsigned int)ts->ts_antenna + 255U <= 3U) 
                                                 #line 1723 
                                                 (ah->stats.antenna_tx[(int)ts->ts_antenna]) ++; else 
                                                                    #line 1725 
                                                                    (ah->stats.antenna_tx[0]) ++;
  #line 1727 
  trace_ath5k_tx_complete(ah,skb,txq,ts);
  #line 1728 
  ieee80211_tx_status(ah->hw,skb);
  #line 1729 
  return;
}

#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tx_processq(struct ath5k_hw *ah, struct ath5k_txq *txq)
{
  #line 1741 
  void *__mptr;
  #line 1741 
  void *__mptr_0;
  #line 1735 
  struct ath5k_buf *bf;
  #line 1735 
  struct ath5k_buf *bf0;
  #line 1736 
  struct ath5k_desc *ds;
  #line 1737 
  struct sk_buff *skb;
  #line 1738 
  int ret;
  #line 1734 
  struct ath5k_tx_status ts = {.ts_seqnum = (unsigned short)0, .ts_tstamp = (unsigned short)0, .ts_status = (unsigned char)0, .ts_final_idx = (unsigned char)0, .ts_final_retry = (unsigned char)0, .ts_rssi = (signed char)0, .ts_shortretry = (unsigned char)0, .ts_virtcol = (unsigned char)0, .ts_antenna = (unsigned char)0};
  #line 1740 
  cif_spin_lock_lock_of_ath5k_txq(& txq->lock);
  #line 1741 
  __mptr = (void *)txq->q.next;
  #line 1741 
  bf = ((struct ath5k_buf *)__mptr);
  #line 1741 
  __mptr_0 = (void *)bf->list.next;
  #line 1742 
  bf0 = ((struct ath5k_buf *)__mptr_0);
  #line 1741 
  while (& bf->list != & txq->q) {
    #line 1741 
    void *__mptr_1;
    {
      #line 1743 
      txq->txq_poll_mark = (_Bool)0;
      #line 1746 
      if (bf->skb != (struct sk_buff *)0) {
        #line 1747 
        ds = bf->desc;
        #line 1749 
        ret = (*(ah->ah_proc_tx_desc))(ah,ds,& ts);
        #line 1750 
        if ((long)(ret == -115) != 0L) 
                                       #line 1751 
                                       break;
        else 
          #line 1752 
          if ((long)(ret != 0) != 0L) {
            #line 1753 
            if (net_ratelimit() != 0) 
                                      #line 1753 
                                      _ath5k_printk(ah,(char *)"\001",(char *)"error %d while processing ",ret,txq->qnum);
            #line 1756 
            break;
          }
        #line 1759 
        skb = bf->skb;
        #line 1760 
        bf->skb = (struct sk_buff *)0;
        #line 1762 
        dma_unmap_single_attrs(ah->dev,bf->skbaddr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
        #line 1764 
        ath5k_tx_frame_completed(ah,skb,txq,& ts,bf);
      }
      #line 1773 
      ;
      #line 1773 
      if ((unsigned long long)ath5k_hw_get_txdp(ah,txq->qnum) != bf->daddr) {
        #line 1774 
        cif_spin_lock_txbuflock_of_ath5k_hw(& ah->txbuflock);
        #line 1775 
        list_move_tail(& bf->list,& ah->txbuf);
        #line 1776 
        (ah->txbuf_len) ++;
        #line 1777 
        (txq->txq_len) --;
        #line 1778 
        cif_spin_unlock_txbuflock_of_ath5k_hw(& ah->txbuflock);
      }
    }
    #line 1741 
    bf = bf0;
    #line 1741 
    __mptr_1 = (void *)bf0->list.next;
    #line 1741 
    bf0 = ((struct ath5k_buf *)__mptr_1);
  }
  #line 1781 
  cif_spin_unlock_lock_of_ath5k_txq(& txq->lock);
  #line 1782 
  if (txq->txq_len <= 24 && txq->qnum <= 3U) 
                                             #line 1783 
                                             ieee80211_wake_queue(ah->hw,(int)txq->qnum);
  #line 1784 
  return;
}

#line 1787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tasklet_tx(unsigned long data)
{
  #line 1789 
  int i;
  #line 1790 
  struct ath5k_hw *ah = (struct ath5k_hw *)data;
  #line 1792 
  i = 0;
  #line 1792 
  while (i <= 9) {
    #line 1793 
    if ((int)ah->txqs[i].setup != 0 && (((unsigned long)ah->ah_txq_isr_txok_all >> i) & 1UL) != 0UL) 
      #line 1794 
      ath5k_tx_processq(ah,& ah->txqs[i]);
    #line 1792 
    i ++;
  }
  #line 1796 
  ah->tx_pending = (_Bool)0;
  #line 1797 
  ath5k_set_current_imask(ah);
  #line 1798 
  return;
}

#line 1809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_beacon_setup(struct ath5k_hw *ah, struct ath5k_buf *bf)
{
  #line 1813 
  struct ath5k_desc *ds;
  #line 1815 
  u8 antenna;
  #line 1816 
  u32 flags;
  #line 1811 
  struct sk_buff *skb = bf->skb;
  #line 1812 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 1814 
  int ret = 0;
  #line 1817 
  int padsize = 0;
  #line 1819 
  bf->skbaddr = dma_map_single_attrs(ah->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1821 
  if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
    #line 1821 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 1821 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_setup",1821,skb,skb->data,skb->len,bf->skbaddr);
  }
  #line 1825 
  if (dma_mapping_error(ah->dev,bf->skbaddr) != 0) {
    #line 1826 
    if (net_ratelimit() != 0) 
                              #line 1826 
                              _ath5k_printk(ah,(char *)"\001",(char *)"beacon DMA mapping failed\n");
    #line 1827 
    dev_kfree_skb_any(skb);
    #line 1828 
    bf->skb = (struct sk_buff *)0;
    #line 1829 
    return -5;
  }
  #line 1832 
  ds = bf->desc;
  #line 1833 
  antenna = ah->ah_tx_ant;
  #line 1835 
  flags = 2U;
  #line 1836 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC && ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 1837 
    ds->ds_link = (unsigned int)bf->daddr;
    #line 1838 
    flags |= 32U;
  }
  else 
       #line 1840 
       ds->ds_link = 0U;
  #line 1860 
  if ((unsigned int)ah->ah_ant_mode == 4U) 
    #line 1861 
    if ((ah->bsent & 4U) != 0U) 
                                #line 1861 
                                antenna = (unsigned char)2U; else 
                                                                  #line 1861 
                                                                  antenna = (unsigned char)1U;
  #line 1867 
  ds->ds_data = (unsigned int)bf->skbaddr;
  #line 1868 
  ;
  #line 1868 
  ;
  #line 1868 
  ;
  #line 1868 
  ;
  #line 1868 
  ;
  #line 1868 
  ;
  #line 1868 
  ret = (*(ah->ah_setup_tx_desc))(ah,ds,skb->len,ieee80211_get_hdrlen_from_skb(skb),0,(enum ath5k_pkt_type)AR5K_PKT_TYPE_BEACON,(unsigned int)(ah->ah_txpower.txp_requested * 2),(unsigned int)ieee80211_get_tx_rate(ah->hw,info)->hw_value,1U,4294967295U,(unsigned int)antenna,flags,0U,0U);
  #line 1875 
  if (ret != 0) 
                #line 1876 
                goto err_unmap;
  #line 1878 
  return 0;
  #line 1879 
  err_unmap: 
             #line 1879 
  ;
  #line 1880 
  dma_unmap_single_attrs(ah->dev,bf->skbaddr,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 1881 
  return ret;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_beacon_update(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 1899 
  int __ret_warn_on;
  #line 1894 
  int ret;
  #line 1896 
  struct ath5k_vif *avf;
  #line 1897 
  struct sk_buff *skb;
  #line 1895 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 1899 
  __ret_warn_on = vif == (struct ieee80211_vif *)0;
  #line 1899 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 1900 
    ldv_inline_asm();
    #line 1901 
    ldv_inline_asm();
  }
  #line 1899 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 1900 
    ret = -22;
    #line 1901 
    goto out;
  }
  #line 1904 
  skb = ieee80211_beacon_get(hw,vif);
  #line 1906 
  if (skb == (struct sk_buff *)0) {
    #line 1907 
    ret = -12;
    #line 1908 
    goto out;
  }
  #line 1911 
  avf = (struct ath5k_vif *)(& vif->drv_priv);
  #line 1912 
  ath5k_txbuf_free_skb(ah,avf->bbuf);
  #line 1913 
  (avf->bbuf)->skb = skb;
  #line 1914 
  ret = ath5k_beacon_setup(ah,avf->bbuf);
  #line 1915 
  out: 
       #line 1915 
  ;
  #line 1916 
  return ret;
}

#line 1928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_beacon_send(struct ath5k_hw *ah)
{
  #line 1930 
  struct ieee80211_vif *vif;
  #line 1931 
  struct ath5k_vif *avf;
  #line 1932 
  struct ath5k_buf *bf;
  #line 1933 
  struct sk_buff *skb;
  #line 1934 
  int err;
  #line 1936 
  if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                   #line 1936 
                                                   _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",1936);
  #line 1945 
  if ((long)(ath5k_hw_num_tx_pending(ah,ah->bhalq) != 0U) != 0L) {
    #line 1946 
    (ah->bmisscount) ++;
    #line 1947 
    if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
      #line 1947 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 1947 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",1947,ah->bmisscount);
    }
    #line 1949 
    if (ah->bmisscount > 10U) {
      #line 1950 
      if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
        #line 1950 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 1950 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",1950,ah->bmisscount);
      }
      #line 1953 
      if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
        #line 1953 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 1953 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",1953);
      }
      #line 1955 
      ieee80211_queue_work(ah->hw,& ah->reset_work);
    }
    #line 1957 
    return;
  }
  #line 1959 
  if ((long)(ah->bmisscount != 0U) != 0L) {
    #line 1960 
    if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
      #line 1960 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 1960 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",1960,ah->bmisscount);
    }
    #line 1963 
    ah->bmisscount = 0U;
  }
  #line 1966 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP && (int)ah->num_ap_vifs + (int)ah->num_mesh_vifs > 1 || ah->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 1969 
    u64 tsf = ath5k_hw_get_tsf64(ah);
    #line 1970 
    u32 tsftu = (unsigned int)(tsf >> 10);
    #line 1971 
    int slot = (int)(((tsftu % ah->bintval) * 4U) / ah->bintval);
    #line 1972 
    vif = ah->bslot[(slot + 1) % 4];
    #line 1973 
    if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
      #line 1973 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 1973 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",1973,tsf,tsftu,ah->bintval,slot,vif);
    }
  }
  else 
       #line 1977 
       vif = ah->bslot[0];
  #line 1979 
  if (vif == (struct ieee80211_vif *)0) 
                                        #line 1980 
                                        return;
  #line 1982 
  avf = (struct ath5k_vif *)(& vif->drv_priv);
  #line 1983 
  bf = avf->bbuf;
  #line 1990 
  if ((long)(ath5k_hw_stop_beacon_queue(ah,ah->bhalq) != 0) != 0L) {
    #line 1991 
    if (net_ratelimit() != 0) 
                              #line 1991 
                              _ath5k_printk(ah,(char *)"\001",(char *)"beacon queue %u didn\'t start/stop ?\n",ah->bhalq);
  }
  #line 1996 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP || ah->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 1998 
    err = ath5k_beacon_update(ah->hw,vif);
    #line 1999 
    if (err != 0) 
                  #line 2000 
                  return;
  }
  #line 2003 
  if ((((long)(bf->skb == (struct sk_buff *)0) != 0L || (long)(ah->opmode == (unsigned int)NL80211_IFTYPE_STATION) != 0L) != 0) != 0 || (long)(ah->opmode == (unsigned int)NL80211_IFTYPE_MONITOR) != 0L) {
    #line 2005 
    if (net_ratelimit() != 0) 
                              #line 2005 
                              _ath5k_printk(ah,(char *)"\001",(char *)"bf=%p bf_skb=%p\n",bf,bf->skb);
    #line 2006 
    return;
  }
  #line 2009 
  trace_ath5k_tx(ah,bf->skb,& ah->txqs[ah->bhalq]);
  #line 2011 
  ath5k_hw_set_txdp(ah,ah->bhalq,(unsigned int)bf->daddr);
  #line 2012 
  ath5k_hw_start_tx_dma(ah,ah->bhalq);
  #line 2013 
  if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
    #line 2013 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 2013 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_send",2013,ah->bhalq,bf->daddr,bf->desc);
  }
  #line 2016 
  skb = ieee80211_get_buffered_bc(ah->hw,vif);
  #line 2017 
  while (skb != (struct sk_buff *)0) {
    #line 2018 
    ath5k_tx_queue(ah->hw,skb,ah->cabq,(struct ieee80211_tx_control *)0);
    #line 2020 
    if ((ah->cabq)->txq_len >= (ah->cabq)->txq_max) 
                                                    #line 2021 
                                                    break;
    #line 2023 
    skb = ieee80211_get_buffered_bc(ah->hw,vif);
  }
  #line 2026 
  (ah->bsent) ++;
  #line 2027 
  return;
}

#line 2046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_beacon_update_timers(struct ath5k_hw *ah, u64 bc_tsf)
{
  #line 2059 
  int __ret_warn_on;
  #line 2048 
  u32 nexttbtt;
  #line 2048 
  u32 intval;
  #line 2048 
  u32 hw_tu;
  #line 2048 
  u32 bc_tu;
  #line 2049 
  u64 hw_tsf;
  #line 2051 
  intval = ah->bintval & 65535U;
  #line 2052 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP && (int)ah->num_ap_vifs + (int)ah->num_mesh_vifs > 1) {
    #line 2054 
    intval /= 4U;
    #line 2055 
    if (intval <= 14U) {
      #line 2056 
      if (net_ratelimit() != 0) 
                                #line 2056 
                                _ath5k_printk(ah,(char *)"\001",(char *)"intval %u is too low, min 15\n",intval);
    }
  }
  #line 2059 
  __ret_warn_on = intval == 0U;
  #line 2059 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 2060 
    ldv_inline_asm();
    #line 2061 
    ldv_inline_asm();
  }
  #line 2059 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2060 
                                                return;
  #line 2063 
  bc_tu = (unsigned int)(bc_tsf >> 10);
  #line 2066 
  hw_tsf = ath5k_hw_get_tsf64(ah);
  #line 2067 
  hw_tu = (unsigned int)(hw_tsf >> 10);
  #line 2074 
  if (bc_tsf == 18446744073709551615ULL) {
    #line 2079 
    u32 __y;
    #line 2079 
    __y = intval;
    #line 2079 
    nexttbtt = ((((hw_tu + __y) + 12U) / __y) * __y);
  }
  else 
    #line 2080 
    if (bc_tsf == 0ULL) {
      #line 2085 
      nexttbtt = intval;
      #line 2086 
      intval |= 16777216U;
    }
    else 
      #line 2087 
      if (bc_tsf > hw_tsf) {
        #line 2095 
        if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                         #line 2095 
                                                         _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_update_timers",2095);
        #line 2097 
        return;
      }
      else {
        #line 2106 
        u32 __y_0;
        #line 2106 
        __y_0 = intval;
        #line 2106 
        nexttbtt = (((((hw_tu - bc_tu) + __y_0) + 12U) / __y_0) * __y_0) + bc_tu;
      }
  #line 2110 
  ah->nexttbtt = nexttbtt;
  #line 2112 
  intval |= 8388608U;
  #line 2113 
  ath5k_hw_init_beacon_timers(ah,nexttbtt,intval);
  #line 2119 
  if (bc_tsf == 18446744073709551615ULL) {
    #line 2120 
    if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                     #line 2120 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_update_timers",2120);
  }
  else 
    #line 2122 
    if (bc_tsf == 0ULL) {
      #line 2123 
      if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                       #line 2123 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_update_timers",2123);
    }
    else 
      #line 2126 
      if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                       #line 2126 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_update_timers",2126);
  #line 2129 
  if ((long)((ah->debug.level & 16U) != 0U) != 0L) 
                                                   #line 2129 
                                                   _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_update_timers",2129,bc_tsf,hw_tsf,bc_tu,hw_tu,nexttbtt);
  #line 2133 
  if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
    #line 2133 
    char *tmp_3;
    #line 2133 
    char *tmp_4;
    #line 2133 
    if ((intval & 16777216U) != 0U) 
                                    #line 2133 
                                    tmp_3 = (char *)"AR5K_BEACON_RESET_TSF"; else 
                                                                    #line 2133 
                                                                    tmp_3 = (char *)"";
    #line 2133 
    if ((intval & 8388608U) != 0U) 
                                   #line 2133 
                                   tmp_4 = (char *)"AR5K_BEACON_ENA"; else 
                                                                    #line 2133 
                                                                    tmp_4 = (char *)"";
    #line 2133 
    ;
    #line 2133 
    ;
    #line 2133 
    _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_beacon_update_timers",2133,intval & 65535U,tmp_4,tmp_3);
  }
  #line 2134 
  return;
}

#line 2148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_beacon_config(struct ath5k_hw *ah)
{
  #line 2150 
  cif_spin_lock_bh_block_of_ath5k_hw(& ah->block);
  #line 2151 
  ah->bmisscount = 0U;
  #line 2152 
  ah->imask = (enum ath5k_int)((unsigned int)ah->imask & 4294639615U);
  #line 2154 
  if ((int)ah->enable_beacon != 0) {
    #line 2162 
    ath5k_beaconq_config(ah);
    #line 2164 
    ah->imask = (enum ath5k_int)((unsigned int)ah->imask | 65536U);
    #line 2166 
    if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) {
      #line 2167 
      if (ah->ah_version != (unsigned int)AR5K_AR5210) 
                                                       #line 2168 
                                                       ath5k_beacon_send(ah);
    }
    else 
         #line 2170 
         ath5k_beacon_update_timers(ah,18446744073709551615ULL);
  }
  else 
       #line 2172 
       ath5k_hw_stop_beacon_queue(ah,ah->bhalq);
  #line 2175 
  ath5k_hw_set_imr(ah,ah->imask);
  #line 2176 
  cif_spin_unlock_bh_block_of_ath5k_hw(& ah->block);
  #line 2177 
  return;
}

#line 2179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tasklet_beacon(unsigned long data)
{
  #line 2181 
  struct ath5k_hw *ah = (struct ath5k_hw *)data;
  #line 2191 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) {
    #line 2193 
    u64 tsf = ath5k_hw_get_tsf64(ah);
    #line 2194 
    ah->nexttbtt += ah->bintval;
    #line 2195 
    if ((long)((ah->debug.level & 16U) != 0U) != 0L) {
      #line 2195 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 2195 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_tasklet_beacon",2195,ah->nexttbtt,(unsigned int)(tsf >> 10),tsf);
    }
  }
  else {
    #line 2202 
    cif_spin_lock_block_of_ath5k_hw(& ah->block);
    #line 2203 
    ath5k_beacon_send(ah);
    #line 2204 
    cif_spin_unlock_block_of_ath5k_hw(& ah->block);
  }
  #line 2206 
  return;
}

#line 2214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_intr_calibration_poll(struct ath5k_hw *ah)
{
  {
    #line 2216 
    unsigned long __dummy_1;
    #line 2216 
    unsigned long __dummy2_1;
    }
  #line 2216 
  if (1 != 0) {
    {
      #line 2216 
      unsigned long __dummy_2;
      #line 2216 
      unsigned long __dummy2_2;
      }
    #line 2216 
    if (1 != 0) {
      #line 2216 
      if ((long)(jiffies - ah->ah_cal_next_ani) >= 0L) {
        #line 2216 
        if (((int)ah->ah_cal_mask & 1) == 0) {
          #line 2217 
          if (((int)ah->ah_cal_mask & 2) == 0) {
            #line 2222 
            ah->ah_cal_next_ani = msecs_to_jiffies(1000U) + jiffies;
            #line 2224 
            cif_tasklet_schedule(& ah->ani_tasklet);
          }
          else 
               #line 2216 
               goto _LAND_2;
        }
        else 
             #line 2216 
             goto _LAND_2;
      }
      else 
           #line 2216 
           goto _LAND_2;
    }
    else 
         #line 2216 
         goto _LAND_2;
  }
  else {
    #line 2216 
    _LAND_2: {
               #line 2226 
               unsigned long __dummy;
               #line 2226 
               unsigned long __dummy2;
               }
    #line 2226 
    if (1 != 0) {
      {
        #line 2226 
        unsigned long __dummy_0;
        #line 2226 
        unsigned long __dummy2_0;
        }
      #line 2226 
      if (1 != 0) 
        #line 2226 
        if ((long)(jiffies - ah->ah_cal_next_short) >= 0L) 
          #line 2226 
          if (((int)ah->ah_cal_mask & 1) == 0) 
            #line 2227 
            if (((int)ah->ah_cal_mask & 2) == 0) {
              #line 2237 
              ah->ah_cal_next_short = msecs_to_jiffies(10000U) + jiffies;
              #line 2239 
              ieee80211_queue_work(ah->hw,& ah->calib_work);
            }
    }
  }
  #line 2241 
  return;
}

#line 2247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_schedule_rx(struct ath5k_hw *ah)
{
  #line 2249 
  ah->rx_pending = (_Bool)1;
  #line 2250 
  cif_tasklet_schedule(& ah->rxtq);
  #line 2251 
  return;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_schedule_tx(struct ath5k_hw *ah)
{
  #line 2256 
  ah->tx_pending = (_Bool)1;
  #line 2257 
  cif_tasklet_schedule(& ah->txtq);
  #line 2258 
  return;
}

#line 2261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static irqreturn_t ath5k_intr(int irq, void *dev_id)
{
  #line 2264 
  enum ath5k_int status;
  #line 2263 
  struct ath5k_hw *ah = (struct ath5k_hw *)dev_id;
  #line 2265 
  unsigned int counter = 1000U;
  #line 2278 
  if ((long)((int)test_bit(0L,(unsigned long *)(& ah->status)) != 0) != 0L) 
    #line 2281 
    return IRQ_NONE;
  else {
    #line 2278 
    int tmp_3;
    #line 2278 
    if ((long)(ath5k_get_bus_type(ah) != (unsigned int)ATH_AHB) != 0L) {
      #line 2278 
      int tmp_2;
      #line 2278 
      if (ath5k_hw_is_intr_pending(ah)) 
                                        #line 2278 
                                        tmp_2 = 0; else 
                                                        #line 2278 
                                                        tmp_2 = 1;
      #line 2278 
      if ((long)tmp_2 != 0L) 
                             #line 2278 
                             tmp_3 = 1; else 
                                             #line 2278 
                                             tmp_3 = 0;
    }
    else 
         #line 2278 
         tmp_3 = 0;
    #line 2278 
    if (tmp_3 != 0) 
                    #line 2281 
                    return IRQ_NONE;
  }
  #line 2284 
  while (1) {
    {
      #line 2285 
      ath5k_hw_get_isr(ah,& status);
      #line 2287 
      if ((long)((ah->debug.level & 2U) != 0U) != 0L) {
        #line 2287 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 2287 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_intr",2287,(unsigned int)status,(unsigned int)ah->imask);
      }
      #line 2297 
      if ((long)(((unsigned int)status & 524288U) != 0U) != 0L) {
        #line 2299 
        if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
          #line 2299 
          if ((long)(net_ratelimit() != 0) != 0L) 
                                                  #line 2299 
                                                  _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_intr",2299);
        }
        #line 2301 
        ieee80211_queue_work(ah->hw,& ah->reset_work);
      }
      else 
        #line 2310 
        if ((long)(((unsigned int)status & 32U) != 0U) != 0L) {
          #line 2318 
          (ah->stats.rxorn_intr) ++;
          #line 2320 
          if (ah->ah_mac_srev <= 79U) {
            #line 2321 
            if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
              #line 2321 
              if ((long)(net_ratelimit() != 0) != 0L) 
                                                      #line 2321 
                                                      _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_intr",2321);
            }
            #line 2323 
            ieee80211_queue_work(ah->hw,& ah->reset_work);
          }
          else 
               #line 2325 
               ath5k_schedule_rx(ah);
        }
        else {
          #line 2330 
          if (((unsigned int)status & 65536U) != 0U) 
                                                     #line 2331 
                                                     cif_tasklet_hi_schedule(& ah->beacontq);
          #line 2340 
          if (((unsigned int)status & 16U) != 0U) 
                                                  #line 2341 
                                                  (ah->stats.rxeol_intr) ++;
          #line 2345 
          if (((unsigned int)status & 2048U) != 0U) 
                                                    #line 2346 
                                                    ath5k_hw_update_tx_triglevel(ah,(_Bool)1);
          #line 2349 
          if (((unsigned int)status & 5U) != 0U) 
                                                 #line 2350 
                                                 ath5k_schedule_rx(ah);
          #line 2353 
          if (((unsigned int)status & 1472U) != 0U) 
                                                    #line 2357 
                                                    ath5k_schedule_tx(ah);
          #line 2364 
          if (((unsigned int)status & 4096U) != 0U) {
            #line 2365 
            (ah->stats.mib_intr) ++;
            #line 2366 
            ath5k_hw_update_mib_counters(ah);
            #line 2367 
            ath5k_ani_mib_intr(ah);
          }
          #line 2371 
          if (((unsigned int)status & 16777216U) != 0U) 
                                                        #line 2372 
                                                        cif_tasklet_schedule(& ah->rf_kill.toggleq);
        }
      #line 2376 
      if (ath5k_get_bus_type(ah) == (unsigned int)ATH_AHB) 
                                                           #line 2377 
                                                           break;
    }
    #line 2378 
    if ((int)ath5k_hw_is_intr_pending(ah) != 0) {
      #line 2379 
      counter --;
      #line 2379 
      if (! (counter != 0U)) 
                             #line 2284 
                             break;
    }
    else 
         #line 2284 
         break;
  }
  #line 2387 
  if ((int)ah->rx_pending != 0 || (int)ah->tx_pending != 0) 
                                                            #line 2388 
                                                            ath5k_set_current_imask(ah);
  #line 2390 
  if ((long)(counter == 0U) != 0L) {
    #line 2391 
    if (net_ratelimit() != 0) 
                              #line 2391 
                              _ath5k_printk(ah,(char *)"\001",(char *)"too many interrupts, giving up for now\n");
  }
  #line 2394 
  ath5k_intr_calibration_poll(ah);
  #line 2396 
  return IRQ_HANDLED;
}

#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_calibrate_work(struct work_struct *work)
{
  #line 2406 
  void *__mptr;
  #line 2406 
  __mptr = (void *)work;
  #line 2406 
  struct ath5k_hw *ah = ((struct ath5k_hw *)(__mptr + 18446744073709528288U));
  {
    #line 2410 
    unsigned long __dummy;
    #line 2410 
    unsigned long __dummy2;
    }
  #line 2410 
  if (1 != 0) {
    {
      #line 2410 
      unsigned long __dummy_0;
      #line 2410 
      unsigned long __dummy2_0;
      }
    #line 2410 
    if (1 != 0) 
      #line 2410 
      if ((long)(jiffies - ah->ah_cal_next_full) >= 0L) {
        #line 2412 
        ah->ah_cal_next_full = msecs_to_jiffies(60000U) + jiffies;
        #line 2414 
        ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask | 1U);
        #line 2416 
        if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
          #line 2416 
          if ((long)(net_ratelimit() != 0) != 0L) 
                                                  #line 2416 
                                                  _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_calibrate_work",2416);
        }
        #line 2419 
        if (ath5k_hw_gainf_calibrate(ah) == (unsigned int)AR5K_RFGAIN_NEED_CHANGE) {
          #line 2424 
          if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
            #line 2424 
            if ((long)(net_ratelimit() != 0) != 0L) 
                                                    #line 2424 
                                                    _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_calibrate_work",2424);
          }
          #line 2426 
          ieee80211_queue_work(ah->hw,& ah->reset_work);
        }
      }
      else 
           #line 2429 
           ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask | 2U);
    else 
         #line 2429 
         ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask | 2U);
  }
  else 
       #line 2429 
       ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask | 2U);
  #line 2432 
  if ((long)((ah->debug.level & 32U) != 0U) != 0L) {
    #line 2432 
    if ((long)(net_ratelimit() != 0) != 0L) {
      #line 2432 
      ;
      #line 2432 
      ;
      #line 2432 
      _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_calibrate_work",2432,ieee80211_frequency_to_channel((int)(ah->curchan)->center_freq),(int)(ah->curchan)->hw_value);
    }
  }
  #line 2436 
  if (ath5k_hw_phy_calibrate(ah,ah->curchan) != 0) {
    #line 2437 
    if (net_ratelimit() != 0) {
      #line 2437 
      ;
      #line 2437 
      _ath5k_printk(ah,(char *)"\001",(char *)"calibration of channel %u failed\n",ieee80211_frequency_to_channel((int)(ah->curchan)->center_freq));
    }
  }
  #line 2442 
  if (((int)ah->ah_cal_mask & 1) != 0) 
                                       #line 2443 
                                       ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask & 254U);
  else 
    #line 2444 
    if (((int)ah->ah_cal_mask & 2) != 0) 
                                         #line 2445 
                                         ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask & 253U);
  #line 2446 
  return;
}

#line 2450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tasklet_ani(unsigned long data)
{
  #line 2452 
  struct ath5k_hw *ah = (struct ath5k_hw *)data;
  #line 2454 
  ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask | 8U);
  #line 2455 
  ath5k_ani_calibration(ah);
  #line 2456 
  ah->ah_cal_mask = (unsigned char)((unsigned int)ah->ah_cal_mask & 247U);
  #line 2457 
  return;
}

#line 2461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_tx_complete_poll_work(struct work_struct *work)
{
  #line 2463 
  void *__mptr;
  #line 2465 
  struct ath5k_txq *txq;
  #line 2466 
  int i;
  #line 2463 
  __mptr = (void *)work;
  #line 2463 
  struct ath5k_hw *ah = ((struct ath5k_hw *)(__mptr + 18446744073709524544U));
  #line 2467 
  bool needreset = (_Bool)0;
  #line 2469 
  if (! test_bit(3L,(unsigned long *)(& ah->status))) 
                                                      #line 2470 
                                                      return;
  #line 2472 
  cif_mutex_lock_lock_of_ath5k_hw(& ah->lock);
  #line 2474 
  i = 0;
  #line 2474 
  while ((unsigned int)i <= 9U) {
    #line 2475 
    if ((int)ah->txqs[i].setup != 0) {
      #line 2476 
      txq = & ah->txqs[i];
      #line 2477 
      cif_spin_lock_bh_lock_of_ath5k_txq(& txq->lock);
      #line 2478 
      if (txq->txq_len > 1) 
        #line 2479 
        if ((int)txq->txq_poll_mark != 0) {
          #line 2480 
          if ((long)((ah->debug.level & 8U) != 0U) != 0L) {
            #line 2480 
            if ((long)(net_ratelimit() != 0) != 0L) 
                                                    #line 2480 
                                                    _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_tx_complete_poll_work",2480,txq->qnum);
          }
          #line 2483 
          needreset = (_Bool)1;
          #line 2484 
          (txq->txq_stuck) ++;
          #line 2485 
          cif_spin_unlock_bh_lock_of_ath5k_txq(& txq->lock);
          #line 2486 
          break;
        }
        else 
             #line 2488 
             txq->txq_poll_mark = (_Bool)1;
      #line 2491 
      cif_spin_unlock_bh_lock_of_ath5k_txq(& txq->lock);
    }
    #line 2474 
    i ++;
  }
  #line 2495 
  if ((int)needreset != 0) {
    #line 2496 
    if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
      #line 2496 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 2496 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_tx_complete_poll_work",2496);
    }
    #line 2498 
    ath5k_reset(ah,(struct ieee80211_channel *)0,(_Bool)1);
  }
  #line 2501 
  cif_mutex_unlock_lock_of_ath5k_hw(& ah->lock);
  #line 2503 
  ;
  #line 2503 
  ;
  #line 2503 
  ieee80211_queue_delayed_work(ah->hw,& ah->tx_complete_work,msecs_to_jiffies(3000U));
  #line 2505 
  return;
}

#line 2512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ieee80211_iface_limit if_limits[2U] = {{.max = (unsigned short)2048U, .types = (unsigned short)4U}, {.max = (unsigned short)4U, .types = (unsigned short)136U}};
#line 2521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static struct ieee80211_iface_combination if_comb = {.limits = (struct ieee80211_iface_limit *)(& if_limits), .num_different_channels = 1U, .max_interfaces = (unsigned short)2048U, .n_limits = (unsigned char)2U};
#line 2529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_init_ah(struct ath5k_hw *ah, struct ath_bus_ops *bus_ops)
{
  #line 2532 
  struct ath_common *common;
  #line 2533 
  int ret;
  #line 2534 
  int csz;
  #line 2531 
  struct ieee80211_hw *hw = ah->hw;
  #line 2537 
  SET_IEEE80211_DEV(hw,ah->dev);
  #line 2538 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_RC_TABLE);
  #line 2539 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_REPORTS_TX_ACK_STATUS);
  #line 2540 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_MFP_CAPABLE);
  #line 2541 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SIGNAL_DBM);
  #line 2542 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_RX_INCLUDES_FCS);
  #line 2543 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING);
  #line 2545 
  (hw->wiphy)->interface_modes = (unsigned short)142U;
  #line 2551 
  (hw->wiphy)->iface_combinations = & if_comb;
  #line 2552 
  (hw->wiphy)->n_iface_combinations = 1;
  #line 2555 
  (hw->wiphy)->flags |= 256U;
  #line 2557 
  (hw->wiphy)->flags |= 4194304U;
  #line 2560 
  (hw->wiphy)->available_antennas_tx = 3U;
  #line 2561 
  (hw->wiphy)->available_antennas_rx = 3U;
  #line 2563 
  hw->extra_tx_headroom = 2U;
  #line 2565 
  wiphy_ext_feature_set(hw->wiphy,(enum nl80211_ext_feature_index)NL80211_EXT_FEATURE_CQM_RSSI_LIST);
  #line 2571 
  __set_bit(0L,(unsigned long *)(& ah->status));
  #line 2573 
  ah->opmode = NL80211_IFTYPE_STATION;
  #line 2574 
  ah->bintval = 1000U;
  {
    #line 2575 
    struct lock_class_key __key;
    #line 2575 
    __mutex_init(& ah->lock,(char *)"&ah->lock",& __key);
  }
  #line 2576 
  spinlock_check(& ah->rxbuflock);
  {
    #line 2576 
    struct lock_class_key __key_0;
    #line 2576 
    __raw_spin_lock_init(& ah->rxbuflock.__anonCompField_spinlock_25.rlock,(char *)"&(&ah->rxbuflock)->rlock",& __key_0);
  }
  #line 2577 
  spinlock_check(& ah->txbuflock);
  {
    #line 2577 
    struct lock_class_key __key_1;
    #line 2577 
    __raw_spin_lock_init(& ah->txbuflock.__anonCompField_spinlock_25.rlock,(char *)"&(&ah->txbuflock)->rlock",& __key_1);
  }
  #line 2578 
  spinlock_check(& ah->block);
  {
    #line 2578 
    struct lock_class_key __key_2;
    #line 2578 
    __raw_spin_lock_init(& ah->block.__anonCompField_spinlock_25.rlock,(char *)"&(&ah->block)->rlock",& __key_2);
  }
  #line 2579 
  spinlock_check(& ah->irqlock);
  {
    #line 2579 
    struct lock_class_key __key_3;
    #line 2579 
    __raw_spin_lock_init(& ah->irqlock.__anonCompField_spinlock_25.rlock,(char *)"&(&ah->irqlock)->rlock",& __key_3);
  }
  #line 2582 
  ret = cif_request_irq((unsigned int)ah->irq,& ath5k_intr,128UL,(char *)"ath",(void *)ah);
  #line 2583 
  if (ret != 0) {
    #line 2584 
    if (net_ratelimit() != 0) 
                              #line 2584 
                              _ath5k_printk(ah,(char *)"\001",(char *)"request_irq failed\n");
    #line 2585 
    goto err;
  }
  #line 2588 
  common = ath5k_hw_common(ah);
  #line 2589 
  common->ops = & ath5k_common_ops;
  #line 2590 
  common->bus_ops = bus_ops;
  #line 2591 
  common->ah = (void *)ah;
  #line 2592 
  common->hw = hw;
  #line 2593 
  common->priv = (void *)ah;
  #line 2594 
  common->clockrate = 40U;
  #line 2600 
  ath5k_read_cachesize(common,& csz);
  #line 2601 
  common->cachelsz = (unsigned short)((int)((unsigned short)csz) << 2U);
  #line 2603 
  spinlock_check(& common->cc_lock);
  {
    #line 2603 
    struct lock_class_key __key_4;
    #line 2603 
    __raw_spin_lock_init(& common->cc_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&common->cc_lock)->rlock",& __key_4);
  }
  #line 2606 
  ret = ath5k_hw_init(ah);
  #line 2607 
  if (ret != 0) 
                #line 2608 
                goto err_irq;
  #line 2611 
  if ((int)ah->ah_capabilities.cap_has_mrr_support != 0) {
    #line 2612 
    hw->max_rates = (unsigned char)4U;
    #line 2613 
    hw->max_rate_tries = (unsigned char)7U;
  }
  #line 2617 
  hw->vif_data_size = 24;
  #line 2620 
  ret = ath5k_init(hw);
  #line 2621 
  if (ret != 0) 
                #line 2622 
                goto err_ah;
  #line 2624 
  ;
  #line 2624 
  ;
  #line 2624 
  ;
  #line 2624 
  _ath5k_printk(ah,(char *)"\001",(char *)"Atheros AR%s chip found (MAC: 0x%x, PHY: 0x%x)\n",ath5k_chip_name((enum ath5k_srev_type)AR5K_VERSION_MAC,
                        (unsigned short)((int)((unsigned short)ah->ah_mac_srev))),ah->ah_mac_srev,(int)ah->ah_phy_revision);
  #line 2629 
  if (! ah->ah_single_chip) 
    #line 2631 
    if ((unsigned int)ah->ah_radio_5ghz_revision != 0U && (unsigned int)ah->ah_radio_2ghz_revision == 0U) {
      #line 2634 
      if (test_bit(0L,(unsigned long *)(& ah->ah_capabilities.cap_mode))) {
        #line 2642 
        if (test_bit(1L,(unsigned long *)(& ah->ah_capabilities.cap_mode))) {
          #line 2650 
          ;
          #line 2650 
          ;
          #line 2650 
          _ath5k_printk(ah,(char *)"\001",(char *)"RF%s multiband radio found",ath5k_chip_name((enum ath5k_srev_type)AR5K_VERSION_RAD,
                        (unsigned short)((int)ah->ah_radio_5ghz_revision)),(int)ah->ah_radio_5ghz_revision);
        }
        else {
          #line 2644 
          ;
          #line 2644 
          ;
          #line 2644 
          _ath5k_printk(ah,(char *)"\001",(char *)"RF%s 5GHz radio found (0x%x)\n",ath5k_chip_name((enum ath5k_srev_type)AR5K_VERSION_RAD,
                        (unsigned short)((int)ah->ah_radio_5ghz_revision)),(int)ah->ah_radio_5ghz_revision);
        }
      }
      else {
        #line 2636 
        ;
        #line 2636 
        ;
        #line 2636 
        _ath5k_printk(ah,(char *)"\001",(char *)"RF%s 2GHz radio found (0x%x)\n",ath5k_chip_name((enum ath5k_srev_type)AR5K_VERSION_RAD,
                        (unsigned short)((int)ah->ah_radio_5ghz_revision)),(int)ah->ah_radio_5ghz_revision);
      }
    }
    else 
      #line 2659 
      if ((unsigned int)ah->ah_radio_5ghz_revision != 0U && (unsigned int)ah->ah_radio_2ghz_revision != 0U) {
        #line 2661 
        ;
        #line 2661 
        ;
        #line 2661 
        _ath5k_printk(ah,(char *)"\001",(char *)"RF%s 5GHz radio found (0x%x)\n",ath5k_chip_name((enum ath5k_srev_type)AR5K_VERSION_RAD,
                        (unsigned short)((int)ah->ah_radio_5ghz_revision)),(int)ah->ah_radio_5ghz_revision);
        #line 2665 
        ;
        #line 2665 
        ;
        #line 2665 
        _ath5k_printk(ah,(char *)"\001",(char *)"RF%s 2GHz radio found (0x%x)\n",ath5k_chip_name((enum ath5k_srev_type)AR5K_VERSION_RAD,
                        (unsigned short)((int)ah->ah_radio_2ghz_revision)),(int)ah->ah_radio_2ghz_revision);
      }
  #line 2672 
  ath5k_debug_init_device(ah);
  #line 2675 
  __set_bit(0L,(unsigned long *)(& ah->status));
  #line 2677 
  return 0;
  #line 2678 
  err_ah: 
          #line 2678 
  ;
  #line 2679 
  ath5k_hw_deinit(ah);
  #line 2680 
  err_irq: 
           #line 2680 
  ;
  #line 2681 
  cif_free_irq((unsigned int)ah->irq,(void *)ah);
  #line 2682 
  err: 
       #line 2682 
  ;
  #line 2683 
  return ret;
}

#line 2687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_stop_locked(struct ath5k_hw *ah)
{
  #line 2690 
  if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
    #line 2690 
    if ((long)(net_ratelimit() != 0) != 0L) {
      #line 2690 
      ;
      #line 2690 
      _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_stop_locked",2690,(int)test_bit(0L,(unsigned long *)(& ah->status)));
    }
  }
  #line 2708 
  ieee80211_stop_queues(ah->hw);
  #line 2710 
  if (! test_bit(0L,(unsigned long *)(& ah->status))) {
    #line 2711 
    ath5k_led_off(ah);
    #line 2712 
    ath5k_hw_set_imr(ah,(enum ath5k_int)0);
    #line 2713 
    synchronize_irq((unsigned int)ah->irq);
    #line 2714 
    ath5k_rx_stop(ah);
    #line 2715 
    ath5k_hw_dma_stop(ah);
    #line 2716 
    ath5k_drain_tx_buffs(ah);
    #line 2717 
    ath5k_hw_phy_disable(ah);
  }
  #line 2720 
  return 0;
}

#line 2723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
int ath5k_start(struct ieee80211_hw *hw)
{
  #line 2727 
  int ret;
  #line 2727 
  int i;
  #line 2725 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 2726 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 2729 
  cif_mutex_lock_lock_of_ath5k_hw(& ah->lock);
  #line 2731 
  if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
    #line 2731 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 2731 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_start",2731,(unsigned int)ah->opmode);
  }
  #line 2737 
  ath5k_stop_locked(ah);
  #line 2746 
  ah->curchan = (ah->hw)->conf.chandef.chan;
  #line 2747 
  ah->imask = 2148013237;
  #line 2757 
  ret = ath5k_reset(ah,(struct ieee80211_channel *)0,(_Bool)0);
  #line 2758 
  if (ret != 0) 
                #line 2759 
                goto done;
  #line 2761 
  if (! ath5k_modparam_no_hw_rfkill_switch) 
                                            #line 2762 
                                            ath5k_rfkill_hw_start(ah);
  #line 2768 
  i = 0;
  #line 2768 
  while (common->keymax > (unsigned int)i) {
    #line 2769 
    ath_hw_keyreset(common,(unsigned short)((int)((unsigned short)i)));
    #line 2768 
    i ++;
  }
  #line 2773 
  ah->ah_ack_bitrate_high = (_Bool)1;
  #line 2775 
  i = 0;
  #line 2775 
  while ((unsigned int)i <= 3U) {
    #line 2776 
    ah->bslot[i] = (struct ieee80211_vif *)0;
    #line 2775 
    i ++;
  }
  #line 2778 
  ret = 0;
  #line 2779 
  done: 
        #line 2779 
  ;
  #line 2780 
  cif_mutex_unlock_lock_of_ath5k_hw(& ah->lock);
  #line 2782 
  cif_set_bit(3L,(unsigned long *)(& ah->status));
  #line 2783 
  ;
  #line 2783 
  ;
  #line 2783 
  ieee80211_queue_delayed_work(ah->hw,& ah->tx_complete_work,msecs_to_jiffies(3000U));
  #line 2786 
  return ret;
}

#line 2789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_stop_tasklets(struct ath5k_hw *ah)
{
  #line 2791 
  ah->rx_pending = (_Bool)0;
  #line 2792 
  ah->tx_pending = (_Bool)0;
  #line 2793 
  tasklet_kill(& ah->rxtq);
  #line 2794 
  tasklet_kill(& ah->txtq);
  #line 2795 
  tasklet_kill(& ah->beacontq);
  #line 2796 
  tasklet_kill(& ah->ani_tasklet);
  #line 2797 
  return;
}

#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_stop(struct ieee80211_hw *hw)
{
  #line 2808 
  int ret;
  #line 2807 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 2810 
  cif_mutex_lock_lock_of_ath5k_hw(& ah->lock);
  #line 2811 
  ret = ath5k_stop_locked(ah);
  #line 2812 
  if (ret == 0) {
    #line 2812 
    if (! test_bit(0L,(unsigned long *)(& ah->status))) {
      #line 2833 
      ret = ath5k_hw_on_hold(ah);
      #line 2835 
      if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
        #line 2835 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 2835 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_stop",2835);
      }
    }
  }
  #line 2839 
  cif_mutex_unlock_lock_of_ath5k_hw(& ah->lock);
  #line 2841 
  ath5k_stop_tasklets(ah);
  #line 2843 
  cif_clear_bit(3L,(unsigned long *)(& ah->status));
  #line 2844 
  cancel_delayed_work_sync(& ah->tx_complete_work);
  #line 2846 
  if (! ath5k_modparam_no_hw_rfkill_switch) 
                                            #line 2847 
                                            ath5k_rfkill_hw_stop(ah);
  #line 2848 
  return;
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_reset(struct ath5k_hw *ah, struct ieee80211_channel *chan, bool skip_pcu)
{
  #line 2861 
  int ret;
  #line 2861 
  int ani_mode;
  #line 2860 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 2862 
  bool fast = (_Bool)((chan != (struct ieee80211_channel *)0 && (int)modparam_fastchanswitch != 0) != 0);
  #line 2864 
  if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
    #line 2864 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 2864 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_reset",2864);
  }
  #line 2866 
  __set_bit(4L,(unsigned long *)(& ah->status));
  #line 2868 
  ath5k_hw_set_imr(ah,(enum ath5k_int)0);
  #line 2869 
  synchronize_irq((unsigned int)ah->irq);
  #line 2870 
  ath5k_stop_tasklets(ah);
  #line 2875 
  ani_mode = (int)ah->ani_state.ani_mode;
  #line 2876 
  ath5k_ani_init(ah,(enum ath5k_ani_mode)ATH5K_ANI_MODE_OFF);
  #line 2881 
  ath5k_drain_tx_buffs(ah);
  #line 2884 
  ath5k_hw_stop_rx_pcu(ah);
  #line 2891 
  ret = ath5k_hw_dma_stop(ah);
  #line 2896 
  if (ret != 0 && (int)fast != 0) {
    #line 2897 
    if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
      #line 2897 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 2897 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_reset",2897);
    }
    #line 2899 
    fast = (_Bool)0;
  }
  #line 2902 
  if (chan != (struct ieee80211_channel *)0) 
                                             #line 2903 
                                             ah->curchan = chan;
  #line 2905 
  ret = ath5k_hw_reset(ah,ah->opmode,ah->curchan,(_Bool)((bool)((int)fast) != 0),(_Bool)((bool)((int)skip_pcu) != 0));
  #line 2906 
  if (ret != 0) {
    #line 2907 
    if (net_ratelimit() != 0) 
                              #line 2907 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t reset hardware (%d)\n",ret);
    #line 2908 
    goto err;
  }
  #line 2911 
  ret = ath5k_rx_start(ah);
  #line 2912 
  if (ret != 0) {
    #line 2913 
    if (net_ratelimit() != 0) 
                              #line 2913 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t start recv logic\n");
    #line 2914 
    goto err;
  }
  #line 2917 
  ath5k_ani_init(ah,(enum ath5k_ani_mode)ani_mode);
  #line 2930 
  ah->ah_cal_next_full = msecs_to_jiffies(60000U) + jiffies;
  #line 2932 
  ah->ah_cal_next_ani = msecs_to_jiffies(1000U) + jiffies;
  #line 2934 
  ah->ah_cal_next_short = msecs_to_jiffies(10000U) + jiffies;
  #line 2937 
  ewma_beacon_rssi_init(& ah->ah_beacon_rssi_avg);
  #line 2940 
  memset((void *)(& ah->survey),0,72UL);
  #line 2941 
  cif_spin_lock_bh_cc_lock_of_ath_common(& common->cc_lock);
  #line 2942 
  ath_hw_cycle_counters_update(common);
  #line 2943 
  memset((void *)(& common->cc_survey),0,16UL);
  #line 2944 
  memset((void *)(& common->cc_ani),0,16UL);
  #line 2945 
  cif_spin_unlock_bh_cc_lock_of_ath_common(& common->cc_lock);
  #line 2958 
  __set_bit(4L,(unsigned long *)(& ah->status));
  #line 2960 
  ath5k_beacon_config(ah);
  #line 2963 
  ieee80211_wake_queues(ah->hw);
  #line 2965 
  return 0;
  #line 2966 
  err: 
       #line 2966 
  ;
  #line 2967 
  return ret;
}

#line 2970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static void ath5k_reset_work(struct work_struct *work)
{
  #line 2972 
  void *__mptr;
  #line 2972 
  __mptr = (void *)work;
  #line 2972 
  struct ath5k_hw *ah = ((struct ath5k_hw *)(__mptr + 18446744073709528368U));
  #line 2975 
  cif_mutex_lock_lock_of_ath5k_hw(& ah->lock);
  #line 2976 
  ath5k_reset(ah,(struct ieee80211_channel *)0,(_Bool)1);
  #line 2977 
  cif_mutex_unlock_lock_of_ath5k_hw(& ah->lock);
  #line 2978 
  return;
}

#line 2981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
static int ath5k_init(struct ieee80211_hw *hw)
{
  #line 2986 
  struct ath5k_txq *txq;
  #line 2988 
  int ret;
  #line 2984 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 2985 
  struct ath_regulatory *regulatory = ath5k_hw_regulatory(ah);
  #line 2987 
  u8 mac[6U] = {};
  #line 2997 
  ret = ath5k_setup_bands(hw);
  #line 2998 
  if (ret != 0) {
    #line 2999 
    if (net_ratelimit() != 0) 
                              #line 2999 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t get channels\n");
    #line 3000 
    goto err;
  }
  #line 3006 
  ret = ath5k_desc_alloc(ah);
  #line 3007 
  if (ret != 0) {
    #line 3008 
    if (net_ratelimit() != 0) 
                              #line 3008 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t allocate descriptors\n");
    #line 3009 
    goto err;
  }
  #line 3018 
  ret = ath5k_beaconq_setup(ah);
  #line 3019 
  if (ret < 0) {
    #line 3020 
    if (net_ratelimit() != 0) 
                              #line 3020 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup a beacon xmit queue\n");
    #line 3021 
    goto err_desc;
  }
  #line 3023 
  ah->bhalq = (unsigned int)ret;
  #line 3024 
  ah->cabq = ath5k_txq_setup(ah,3,0);
  #line 3025 
  if ((int)IS_ERR((void *)ah->cabq) != 0) {
    #line 3026 
    if (net_ratelimit() != 0) 
                              #line 3026 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup cab queue\n");
    #line 3027 
    ret = (int)PTR_ERR((void *)ah->cabq);
    #line 3028 
    goto err_bhal;
  }
  #line 3033 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num > 5U) {
    #line 3036 
    txq = ath5k_txq_setup(ah,1,3);
    #line 3037 
    if ((int)IS_ERR((void *)txq) != 0) {
      #line 3038 
      if (net_ratelimit() != 0) 
                                #line 3038 
                                _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup xmit queue\n");
      #line 3039 
      ret = (int)PTR_ERR((void *)txq);
      #line 3040 
      goto err_queues;
    }
    #line 3042 
    txq = ath5k_txq_setup(ah,1,2);
    #line 3043 
    if ((int)IS_ERR((void *)txq) != 0) {
      #line 3044 
      if (net_ratelimit() != 0) 
                                #line 3044 
                                _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup xmit queue\n");
      #line 3045 
      ret = (int)PTR_ERR((void *)txq);
      #line 3046 
      goto err_queues;
    }
    #line 3048 
    txq = ath5k_txq_setup(ah,1,1);
    #line 3049 
    if ((int)IS_ERR((void *)txq) != 0) {
      #line 3050 
      if (net_ratelimit() != 0) 
                                #line 3050 
                                _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup xmit queue\n");
      #line 3051 
      ret = (int)PTR_ERR((void *)txq);
      #line 3052 
      goto err_queues;
    }
    #line 3054 
    txq = ath5k_txq_setup(ah,1,0);
    #line 3055 
    if ((int)IS_ERR((void *)txq) != 0) {
      #line 3056 
      if (net_ratelimit() != 0) 
                                #line 3056 
                                _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup xmit queue\n");
      #line 3057 
      ret = (int)PTR_ERR((void *)txq);
      #line 3058 
      goto err_queues;
    }
    #line 3060 
    hw->queues = (unsigned short)4U;
  }
  else {
    #line 3063 
    txq = ath5k_txq_setup(ah,1,1);
    #line 3064 
    if ((int)IS_ERR((void *)txq) != 0) {
      #line 3065 
      if (net_ratelimit() != 0) 
                                #line 3065 
                                _ath5k_printk(ah,(char *)"\001",(char *)"can\'t setup xmit queue\n");
      #line 3066 
      ret = (int)PTR_ERR((void *)txq);
      #line 3067 
      goto err_queues;
    }
    #line 3069 
    hw->queues = (unsigned short)1U;
  }
  #line 3072 
  cif_tasklet_init(& ah->rxtq,& ath5k_tasklet_rx,(unsigned long)ah);
  #line 3073 
  cif_tasklet_init(& ah->txtq,& ath5k_tasklet_tx,(unsigned long)ah);
  #line 3074 
  cif_tasklet_init(& ah->beacontq,& ath5k_tasklet_beacon,(unsigned long)ah);
  #line 3075 
  cif_tasklet_init(& ah->ani_tasklet,& ath5k_tasklet_ani,(unsigned long)ah);
  {
    #line 3077 
    struct lock_class_key __key;
    #line 3077 
    __init_work(& ah->reset_work,0);
    #line 3077 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 3077 
    ah->reset_work.data = __constr_expr_41;
    #line 3077 
    lockdep_init_map(& ah->reset_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 3077 
    INIT_LIST_HEAD(& ah->reset_work.entry);
    #line 3077 
    ah->reset_work.func = & ath5k_reset_work;
  }
  {
    #line 3078 
    struct lock_class_key __key_0;
    #line 3078 
    __init_work(& ah->calib_work,0);
    #line 3078 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 3078 
    ah->calib_work.data = __constr_expr_42;
    #line 3078 
    lockdep_init_map(& ah->calib_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 3078 
    INIT_LIST_HEAD(& ah->calib_work.entry);
    #line 3078 
    ah->calib_work.func = & ath5k_calibrate_work;
  }
  {
    #line 3079 
    struct lock_class_key __key_1;
    #line 3079 
    __init_work(& ah->tx_complete_work.work,0);
    #line 3079 
    atomic_long_t __constr_expr_43 = {.counter = 137438953408LL};
    #line 3079 
    ah->tx_complete_work.work.data = __constr_expr_43;
    #line 3079 
    lockdep_init_map(& ah->tx_complete_work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 3079 
    INIT_LIST_HEAD(& ah->tx_complete_work.work.entry);
    #line 3079 
    ah->tx_complete_work.work.func = & ath5k_tx_complete_poll_work;
  }
  {
    #line 3079 
    struct lock_class_key __key_2;
    #line 3079 
    init_timer_key(& ah->tx_complete_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&ah->tx_complete_work)->timer",& __key_2);
  }
  #line 3081 
  ret = (*((ath5k_hw_common(ah)->bus_ops)->eeprom_read_mac))(ah,(u8 *)(& mac));
  #line 3082 
  if (ret != 0) {
    #line 3083 
    if (net_ratelimit() != 0) 
                              #line 3083 
                              _ath5k_printk(ah,(char *)"\001",(char *)"unable to read address from EEPROM\n");
    #line 3084 
    goto err_queues;
  }
  #line 3087 
  SET_IEEE80211_PERM_ADDR(hw,(u8 *)(& mac));
  #line 3089 
  ath5k_update_bssid_mask_and_opmode(ah,(struct ieee80211_vif *)0);
  #line 3091 
  regulatory->current_rd = ah->ah_capabilities.cap_eeprom.ee_regdomain;
  #line 3092 
  ret = ath_regd_init(regulatory,hw->wiphy,& ath5k_reg_notifier);
  #line 3093 
  if (ret != 0) {
    #line 3094 
    if (net_ratelimit() != 0) 
                              #line 3094 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t initialize regulatory system\n");
    #line 3095 
    goto err_queues;
  }
  #line 3098 
  ret = ieee80211_register_hw(hw);
  #line 3099 
  if (ret != 0) {
    #line 3100 
    if (net_ratelimit() != 0) 
                              #line 3100 
                              _ath5k_printk(ah,(char *)"\001",(char *)"can\'t register ieee80211 hw\n");
    #line 3101 
    goto err_queues;
  }
  #line 3104 
  if (! ath_is_world_regd(regulatory)) 
                                       #line 3105 
                                       regulatory_hint(hw->wiphy,(char *)(& regulatory->alpha2));
  #line 3107 
  ath5k_init_leds(ah);
  #line 3109 
  ath5k_sysfs_register(ah);
  #line 3111 
  return 0;
  #line 3112 
  err_queues: 
              #line 3112 
  ;
  #line 3113 
  ath5k_txq_release(ah);
  #line 3114 
  err_bhal: 
            #line 3114 
  ;
  #line 3115 
  ath5k_hw_release_tx_queue(ah,ah->bhalq);
  #line 3116 
  err_desc: 
            #line 3116 
  ;
  #line 3117 
  ath5k_desc_free(ah);
  #line 3118 
  err: 
       #line 3118 
  ;
  #line 3119 
  return ret;
}

#line 3123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_deinit_ah(struct ath5k_hw *ah)
{
  #line 3125 
  struct ieee80211_hw *hw = ah->hw;
  #line 3140 
  ieee80211_unregister_hw(hw);
  #line 3141 
  ath5k_desc_free(ah);
  #line 3142 
  ath5k_txq_release(ah);
  #line 3143 
  ath5k_hw_release_tx_queue(ah,ah->bhalq);
  #line 3144 
  ath5k_unregister_leds(ah);
  #line 3146 
  ath5k_sysfs_unregister(ah);
  #line 3152 
  ath5k_hw_deinit(ah);
  #line 3153 
  cif_free_irq((unsigned int)ah->irq,(void *)ah);
  #line 3154 
  return;
}

#line 3157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
bool ath5k_any_vif_assoc(struct ath5k_hw *ah)
{
  #line 3159 
  struct ath5k_vif_iter_data iter_data;
  #line 3160 
  iter_data.hw_macaddr = (u8 *)0U;
  #line 3161 
  iter_data.any_assoc = (_Bool)0;
  #line 3162 
  iter_data.need_set_hw_addr = (_Bool)0;
  #line 3163 
  iter_data.found_active = (_Bool)1;
  #line 3165 
  ieee80211_iterate_active_interfaces_atomic(ah->hw,1U,& ath5k_vif_iter,(void *)(& iter_data));
  #line 3168 
  return iter_data.any_assoc;
}

#line 3172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void ath5k_set_beacon_filter(struct ieee80211_hw *hw, bool enable)
{
  #line 3175 
  u32 rfilt;
  #line 3174 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 3176 
  rfilt = ath5k_hw_get_rx_filter(ah);
  #line 3177 
  if ((int)enable != 0) 
                        #line 3178 
                        rfilt |= 16U; else 
                                           #line 3180 
                                           rfilt &= 4294967279U;
  #line 3181 
  ath5k_hw_set_rx_filter(ah,rfilt);
  #line 3182 
  ah->filter_flags = rfilt;
  #line 3183 
  return;
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/base.c"
void _ath5k_printk(struct ath5k_hw *ah, char *level, char *fmt , ...)
{
  #line 3188 
  struct va_format vaf;
  #line 3189 
  va_list args;
  #line 3191 
  #line 3191 
  __builtin_va_start(args,fmt);
  #line 3193 
  vaf.fmt = fmt;
  #line 3194 
  vaf.va = & args;
  #line 3196 
  if (ah != (struct ath5k_hw *)0 && ah->hw != (struct ieee80211_hw *)0) {
    #line 3197 
    ;
    #line 3197 
    printk((char *)"%s",level,wiphy_name((ah->hw)->wiphy),& vaf);
  }
  else 
       #line 3200 
       printk((char *)"%s",level,& vaf);
  #line 3202 
  __builtin_va_end(args);
  #line 3203 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
#line 95 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 98 
#line 98 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 100 
#line 100 
void emg_tasklet_hi_schedule(struct tasklet_struct *arg0);
#line 101 
#line 101 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 102 
#line 102 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
enum irqreturn emg_wrapper_ath5k_intr(int arg0, void *arg1)
{
  #line 107 
  return ath5k_intr(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 129 
  ldv_set_bit(nr,addr);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 136 
  ldv_clear_bit(nr,addr);
  #line 137 
  return;
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 143 
  ldv_init_list_head(list);
  #line 144 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void *ERR_PTR(long error)
{
  #line 213 
  return ldv_err_ptr(error);
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 220 
  return ldv_ptr_err(ptr);
}

#line 224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 227 
  return ldv_is_err(ptr);
}

#line 471  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 474 
  return ldv_kcalloc(n,size,flags);
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_lock_of_ath5k_txq(spinlock_t *lock)
{
  #line 807 
  ldv_spin_model_lock((char *)"lock_of_ath5k_txq");
  #line 809 
  spin_lock_bh(lock);
  #line 810 
  return;
}

#line 813  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_lock_of_ath5k_txq(spinlock_t *lock)
{
  #line 816 
  ldv_spin_model_unlock((char *)"lock_of_ath5k_txq");
  #line 818 
  spin_unlock_bh(lock);
  #line 819 
  return;
}

#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_txbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 825 
  ldv_spin_model_lock((char *)"txbuflock_of_ath5k_hw");
  #line 827 
  spin_lock(lock);
  #line 828 
  return;
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_txbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 834 
  ldv_spin_model_unlock((char *)"txbuflock_of_ath5k_hw");
  #line 836 
  spin_unlock(lock);
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_rxbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 843 
  ldv_spin_model_lock((char *)"rxbuflock_of_ath5k_hw");
  #line 845 
  spin_lock_bh(lock);
  #line 846 
  return;
}

#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_rxbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 852 
  ldv_spin_model_unlock((char *)"rxbuflock_of_ath5k_hw");
  #line 854 
  spin_unlock_bh(lock);
  #line 855 
  return;
}

#line 858  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif___ldv_spin_lock_irqlock_of_ath5k_hw(spinlock_t *lock)
{
  #line 861 
  ldv_spin_model_lock((char *)"irqlock_of_ath5k_hw");
  #line 863 
  __ldv_spin_lock(lock);
  #line 864 
  return;
}

#line 867  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_irqrestore_irqlock_of_ath5k_hw(spinlock_t *lock, unsigned long flags)
{
  #line 870 
  ldv_spin_model_unlock((char *)"irqlock_of_ath5k_hw");
  #line 872 
  spin_unlock_irqrestore(lock,flags);
  #line 873 
  return;
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_rxbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 879 
  ldv_spin_model_lock((char *)"rxbuflock_of_ath5k_hw");
  #line 881 
  spin_lock(lock);
  #line 882 
  return;
}

#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_rxbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 888 
  ldv_spin_model_unlock((char *)"rxbuflock_of_ath5k_hw");
  #line 890 
  spin_unlock(lock);
  #line 891 
  return;
}

#line 894  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif___ldv_spin_lock_txbuflock_of_ath5k_hw(spinlock_t *lock)
{
  #line 897 
  ldv_spin_model_lock((char *)"txbuflock_of_ath5k_hw");
  #line 899 
  __ldv_spin_lock(lock);
  #line 900 
  return;
}

#line 903  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_irqrestore_txbuflock_of_ath5k_hw(spinlock_t *lock, unsigned long flags)
{
  #line 906 
  ldv_spin_model_unlock((char *)"txbuflock_of_ath5k_hw");
  #line 908 
  spin_unlock_irqrestore(lock,flags);
  #line 909 
  return;
}

#line 912  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_lock_of_ath5k_txq(spinlock_t *lock)
{
  #line 915 
  ldv_spin_model_lock((char *)"lock_of_ath5k_txq");
  #line 917 
  spin_lock(lock);
  #line 918 
  return;
}

#line 921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_lock_of_ath5k_txq(spinlock_t *lock)
{
  #line 924 
  ldv_spin_model_unlock((char *)"lock_of_ath5k_txq");
  #line 926 
  spin_unlock(lock);
  #line 927 
  return;
}

#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_block_of_ath5k_hw(spinlock_t *lock)
{
  #line 933 
  ldv_spin_model_lock((char *)"block_of_ath5k_hw");
  #line 935 
  spin_lock_bh(lock);
  #line 936 
  return;
}

#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_block_of_ath5k_hw(spinlock_t *lock)
{
  #line 942 
  ldv_spin_model_unlock((char *)"block_of_ath5k_hw");
  #line 944 
  spin_unlock_bh(lock);
  #line 945 
  return;
}

#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_block_of_ath5k_hw(spinlock_t *lock)
{
  #line 951 
  ldv_spin_model_lock((char *)"block_of_ath5k_hw");
  #line 953 
  spin_lock(lock);
  #line 954 
  return;
}

#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_block_of_ath5k_hw(spinlock_t *lock)
{
  #line 960 
  ldv_spin_model_unlock((char *)"block_of_ath5k_hw");
  #line 962 
  spin_unlock(lock);
  #line 963 
  return;
}

#line 966  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 970 
  emg_tasklet_schedule(t);
  #line 971 
  return;
}

#line 974  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_tasklet_hi_schedule(struct tasklet_struct *t)
{
  #line 978 
  emg_tasklet_hi_schedule(t);
  #line 979 
  return;
}

#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_mutex_lock_lock_of_ath5k_hw(struct mutex *lock)
{
  #line 985 
  ldv_mutex_model_lock(lock,(char *)"lock_of_ath5k_hw");
  #line 986 
  return;
}

#line 989  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_mutex_unlock_lock_of_ath5k_hw(struct mutex *lock)
{
  #line 992 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_ath5k_hw");
  #line 993 
  return;
}

#line 996  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1000 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1004  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1008 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1012  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_lock_bh_cc_lock_of_ath_common(spinlock_t *lock)
{
  #line 1015 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 1017 
  spin_lock_bh(lock);
  #line 1018 
  return;
}

#line 1021  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_spin_unlock_bh_cc_lock_of_ath_common(spinlock_t *lock)
{
  #line 1024 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 1026 
  spin_unlock_bh(lock);
  #line 1027 
  return;
}

#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/base.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 1034 
  emg_tasklet_init(t,func,data);
  #line 1035 
  return;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/rfkill.i.aux"
static void cif_tasklet_init_0(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 6082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 6082 
void wiphy_rfkill_set_hw_state(struct wiphy *, bool);
#line 1589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1589 
int ath5k_hw_set_gpio_input(struct ath5k_hw *ah, u32 gpio);
#line 1590 
#line 1590 
int ath5k_hw_set_gpio_output(struct ath5k_hw *ah, u32 gpio);
#line 1591 
#line 1591 
u32 ath5k_hw_get_gpio(struct ath5k_hw *ah, u32 gpio);
#line 1592 
#line 1592 
int ath5k_hw_set_gpio(struct ath5k_hw *ah, u32 gpio, u32 val);
#line 1593 
#line 1593 
void ath5k_hw_set_gpio_intr(struct ath5k_hw *ah, unsigned int gpio, u32 interrupt_level);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
__inline static void ath5k_rfkill_disable(struct ath5k_hw *ah)
{
  #line 41 
  if ((long)(ah->debug.level != 0U) != 0L) {
    #line 41 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 41 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_rfkill_disable",41,(int)ah->rf_kill.gpio,(int)ah->rf_kill.polarity);
  }
  #line 43 
  ath5k_hw_set_gpio_output(ah,(unsigned int)ah->rf_kill.gpio);
  #line 44 
  ath5k_hw_set_gpio(ah,(unsigned int)ah->rf_kill.gpio,(unsigned int)(! ah->rf_kill.polarity));
  #line 45 
  return;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
__inline static void ath5k_rfkill_enable(struct ath5k_hw *ah)
{
  #line 50 
  if ((long)(ah->debug.level != 0U) != 0L) {
    #line 50 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 50 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_rfkill_enable",50,(int)ah->rf_kill.gpio,(int)ah->rf_kill.polarity);
  }
  #line 52 
  ath5k_hw_set_gpio_output(ah,(unsigned int)ah->rf_kill.gpio);
  #line 53 
  ath5k_hw_set_gpio(ah,(unsigned int)ah->rf_kill.gpio,(unsigned int)ah->rf_kill.polarity);
  #line 54 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
__inline static void ath5k_rfkill_set_intr(struct ath5k_hw *ah, bool enable)
{
  #line 58 
  u32 curval;
  #line 63 
  int tmp;
  #line 60 
  ath5k_hw_set_gpio_input(ah,(unsigned int)ah->rf_kill.gpio);
  #line 61 
  curval = ath5k_hw_get_gpio(ah,(unsigned int)ah->rf_kill.gpio);
  #line 63 
  if ((int)enable != 0) 
                        #line 63 
                        tmp = curval != 0U; else 
                                                 #line 63 
                                                 tmp = curval == 0U;
  #line 62 
  ;
  #line 62 
  ;
  #line 62 
  ath5k_hw_set_gpio_intr(ah,(unsigned int)ah->rf_kill.gpio,(unsigned int)tmp);
  #line 64 
  return;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
static bool ath5k_is_rfkill_set(struct ath5k_hw *ah)
{
  #line 71 
  ;
  #line 71 
  return (_Bool)(ath5k_hw_get_gpio(ah,(unsigned int)ah->rf_kill.gpio) == (unsigned int)ah->rf_kill.polarity);
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
static void ath5k_tasklet_rfkill_toggle(unsigned long data)
{
  #line 79 
  bool blocked;
  #line 78 
  struct ath5k_hw *ah = (struct ath5k_hw *)data;
  #line 81 
  blocked = ath5k_is_rfkill_set(ah);
  #line 82 
  wiphy_rfkill_set_hw_state((ah->hw)->wiphy,(_Bool)((bool)((int)blocked) != 0));
  #line 83 
  return;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
void ath5k_rfkill_hw_start(struct ath5k_hw *ah)
{
  #line 90 
  ah->rf_kill.gpio = (unsigned short)ah->ah_capabilities.cap_eeprom.ee_rfkill_pin;
  #line 91 
  ah->rf_kill.polarity = ah->ah_capabilities.cap_eeprom.ee_rfkill_pol;
  #line 93 
  cif_tasklet_init_0(& ah->rf_kill.toggleq,& ath5k_tasklet_rfkill_toggle,(unsigned long)ah);
  #line 96 
  ath5k_rfkill_disable(ah);
  #line 99 
  if ((((int)ah->ah_capabilities.cap_eeprom.ee_header >> 14) & 1) != 0) 
    #line 100 
    ath5k_rfkill_set_intr(ah,(_Bool)1);
  #line 101 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/rfkill.c"
void ath5k_rfkill_hw_stop(struct ath5k_hw *ah)
{
  #line 108 
  if ((((int)ah->ah_capabilities.cap_eeprom.ee_header >> 14) & 1) != 0) 
    #line 109 
    ath5k_rfkill_set_intr(ah,(_Bool)0);
  #line 111 
  tasklet_kill(& ah->rf_kill.toggleq);
  #line 114 
  ath5k_rfkill_enable(ah);
  #line 115 
  return;
}

#line 790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/rfkill.i.aux"
static void cif_tasklet_init_0(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 794 
  emg_tasklet_init(t,func,data);
  #line 795 
  return;
}

#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 386 
int kstrtoint(char *, unsigned int, int *);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 276 
int sysfs_create_group(struct kobject *, struct attribute_group *);
#line 284 
#line 284 
void sysfs_remove_group(struct kobject *, struct attribute_group *);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.h"
#line 111 
void ath5k_ani_set_noise_immunity_level(struct ath5k_hw *ah, int level);
#line 112 
#line 112 
void ath5k_ani_set_spur_immunity_level(struct ath5k_hw *ah, int level);
#line 113 
#line 113 
void ath5k_ani_set_firstep_level(struct ath5k_hw *ah, int level);
#line 114 
#line 114 
void ath5k_ani_set_ofdm_weak_signal_detection(struct ath5k_hw *ah, bool on);
#line 115 
#line 115 
void ath5k_ani_set_cck_weak_signal_detection(struct ath5k_hw *ah, bool on);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_ani_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 50 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 50 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 50 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",
                 (unsigned int)ah->ani_state.ani_mode);
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_store_ani_mode(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 50 
  int val;
  #line 50 
  int ret;
  #line 50 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 50 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 50 
  ret = kstrtoint(buf,10U,& val);
  #line 50 
  if (ret < 0) 
               #line 50 
               return (long)ret;
  #line 50 
  ath5k_ani_init(ah,(enum ath5k_ani_mode)val);
  #line 50 
  return (long)count;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_ani_mode = {.attr = {.name = (char *)"ani_mode", .mode = (unsigned short)420U}, .show = & ath5k_attr_show_ani_mode, .store = & ath5k_attr_store_ani_mode};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_noise_immunity_level(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 51 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 51 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 51 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",ah->ani_state.noise_imm_level);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_store_noise_immunity_level(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 51 
  int val;
  #line 51 
  int ret;
  #line 51 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 51 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 51 
  ret = kstrtoint(buf,10U,& val);
  #line 51 
  if (ret < 0) 
               #line 51 
               return (long)ret;
  #line 51 
  ath5k_ani_set_noise_immunity_level(ah,val);
  #line 51 
  return (long)count;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_noise_immunity_level = {.attr = {.name = (char *)"noise_immunity_level", .mode = (unsigned short)420U}, .show = & ath5k_attr_show_noise_immunity_level, .store = & ath5k_attr_store_noise_immunity_level};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_spur_level(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 53 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 53 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 53 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",ah->ani_state.spur_level);
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_store_spur_level(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 53 
  int val;
  #line 53 
  int ret;
  #line 53 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 53 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 53 
  ret = kstrtoint(buf,10U,& val);
  #line 53 
  if (ret < 0) 
               #line 53 
               return (long)ret;
  #line 53 
  ath5k_ani_set_spur_immunity_level(ah,val);
  #line 53 
  return (long)count;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_spur_level = {.attr = {.name = (char *)"spur_level", .mode = (unsigned short)420U}, .show = & ath5k_attr_show_spur_level, .store = & ath5k_attr_store_spur_level};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_firstep_level(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 55 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 55 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 55 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",ah->ani_state.firstep_level);
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_store_firstep_level(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 55 
  int val;
  #line 55 
  int ret;
  #line 55 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 55 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 55 
  ret = kstrtoint(buf,10U,& val);
  #line 55 
  if (ret < 0) 
               #line 55 
               return (long)ret;
  #line 55 
  ath5k_ani_set_firstep_level(ah,val);
  #line 55 
  return (long)count;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_firstep_level = {.attr = {.name = (char *)"firstep_level", .mode = (unsigned short)420U}, .show = & ath5k_attr_show_firstep_level, .store = & ath5k_attr_store_firstep_level};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_ofdm_weak_signal_detection(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 57 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 57 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 57 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",(int)ah->ani_state.ofdm_weak_sig);
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_store_ofdm_weak_signal_detection(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 57 
  int val;
  #line 57 
  int ret;
  #line 57 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 57 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 57 
  ret = kstrtoint(buf,10U,& val);
  #line 57 
  if (ret < 0) 
               #line 57 
               return (long)ret;
  #line 57 
  ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)(val != 0));
  #line 57 
  return (long)count;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_ofdm_weak_signal_detection = {.attr = {.name = (char *)"ofdm_weak_signal_detection", .mode = (unsigned short)420U}, .show = & ath5k_attr_show_ofdm_weak_signal_detection, .store = & ath5k_attr_store_ofdm_weak_signal_detection};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_cck_weak_signal_detection(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 59 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 59 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 59 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",(int)ah->ani_state.cck_weak_sig);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_store_cck_weak_signal_detection(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 59 
  int val;
  #line 59 
  int ret;
  #line 59 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 59 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 59 
  ret = kstrtoint(buf,10U,& val);
  #line 59 
  if (ret < 0) 
               #line 59 
               return (long)ret;
  #line 59 
  ath5k_ani_set_cck_weak_signal_detection(ah,(_Bool)(val != 0));
  #line 59 
  return (long)count;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_cck_weak_signal_detection = {.attr = {.name = (char *)"cck_weak_signal_detection", .mode = (unsigned short)420U}, .show = & ath5k_attr_show_cck_weak_signal_detection, .store = & ath5k_attr_store_cck_weak_signal_detection};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_spur_level_max(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 61 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 61 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 61 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",ah->ani_state.max_spur_level);
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_spur_level_max = {.attr = {.name = (char *)"spur_level_max", .mode = (unsigned short)292U}, .show = & ath5k_attr_show_spur_level_max};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_noise_immunity_level_max(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 67 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",1);
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_noise_immunity_level_max = {.attr = {.name = (char *)"noise_immunity_level_max", .mode = (unsigned short)292U}, .show = & ath5k_attr_show_noise_immunity_level_max};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static ssize_t ath5k_attr_show_firstep_level_max(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 76 
  return (long)snprintf(buf,4096UL,(char *)"%d\n",2);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct device_attribute dev_attr_firstep_level_max = {.attr = {.name = (char *)"firstep_level_max", .mode = (unsigned short)292U}, .show = & ath5k_attr_show_firstep_level_max};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct attribute *ath5k_sysfs_entries_ani[10U] = {& dev_attr_ani_mode.attr, & dev_attr_noise_immunity_level.attr, & dev_attr_spur_level.attr, & dev_attr_firstep_level.attr, & dev_attr_ofdm_weak_signal_detection.attr, & dev_attr_cck_weak_signal_detection.attr, & dev_attr_noise_immunity_level_max.attr, & dev_attr_spur_level_max.attr, & dev_attr_firstep_level_max.attr};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
static struct attribute_group ath5k_attribute_group_ani = {.name = (char *)"ani", .attrs = (struct attribute **)(& ath5k_sysfs_entries_ani)};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
int ath5k_sysfs_register(struct ath5k_hw *ah)
{
  #line 106 
  int err;
  #line 105 
  struct device *dev = ah->dev;
  #line 108 
  err = sysfs_create_group(& dev->kobj,& ath5k_attribute_group_ani);
  #line 109 
  if (err != 0) {
    #line 110 
    if (net_ratelimit() != 0) 
                              #line 110 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to create sysfs group\n");
    #line 111 
    return err;
  }
  #line 114 
  return 0;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/sysfs.c"
void ath5k_sysfs_unregister(struct ath5k_hw *ah)
{
  #line 120 
  struct device *dev = ah->dev;
  #line 122 
  sysfs_remove_group(& dev->kobj,& ath5k_attribute_group_ani);
  #line 123 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/iomap.h"
#line 107 
void pci_iounmap(struct pci_dev *, void *);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/pci_iomap.h"
#line 13 
void *pci_iomap(struct pci_dev *, int, unsigned long);
#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1083 
int pci_read_config_byte(struct pci_dev *, int, u8 *);
#line 1086 
#line 1086 
int pci_write_config_byte(struct pci_dev *, int, u8);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1284 
#line 1284 
int pci_request_region(struct pci_dev *, int, char *);
#line 1285 
#line 1285 
void pci_release_region(struct pci_dev *, int);
#line 1346 
#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1547 
int pci_disable_link_state(struct pci_dev *, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 4123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops);
#line 4301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw);
#line 1473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
struct ieee80211_ops ath5k_hw_ops;
#line 1487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1487 
void ath5k_led_enable(struct ath5k_hw *ah);
#line 1700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static bool ath5k_hw_nvram_read(struct ath5k_hw *ah, u32 off, u16 *data)
{
  #line 1702 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 1703 
  return (*((common->bus_ops)->eeprom_read))(common,off,data);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static struct pci_device_id ath5k_pci_id_table[20U] = {{.vendor = 5772U, .device = 519U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 7U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 17U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 18U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 19U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 42791U, .device = 19U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4279U, .device = 19U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 4116U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 20U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 21U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 22U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 23U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 24U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 25U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 26U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 27U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 28U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 29U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5772U, .device = 65307U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
struct pci_device_id __mod_pci__ath5k_pci_id_table_device_table[20U];
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static void ath5k_pci_read_cachesize(struct ath_common *common, int *csz)
{
  #line 58 
  u8 u8tmp;
  #line 57 
  struct ath5k_hw *ah = (struct ath5k_hw *)common->priv;
  #line 60 
  pci_read_config_byte(ah->pdev,12,& u8tmp);
  #line 61 
  *csz = (int)u8tmp;
  #line 69 
  if (*csz == 0) 
                 #line 70 
                 *csz = 16;
  #line 71 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static bool ath5k_pci_eeprom_read(struct ath_common *common, u32 offset, u16 *data)
{
  #line 80 
  u32 status;
  #line 80 
  u32 timeout;
  #line 79 
  struct ath5k_hw *ah = (struct ath5k_hw *)common->ah;
  #line 85 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 86 
    ;
    #line 86 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | 1U,(unsigned short)16400);
    #line 87 
    ath5k_hw_reg_read(ah,(unsigned short)((int)((unsigned int)((unsigned short)(offset + 6144U)) * 4U)));
  }
  else {
    #line 89 
    ath5k_hw_reg_write(ah,offset,(unsigned short)24576);
    #line 90 
    ;
    #line 90 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)24584) | 1U,(unsigned short)24584);
  }
  #line 94 
  timeout = 20000U;
  #line 94 
  while (timeout != 0U) {
    {
      #line 95 
      int tmp_1;
      #line 95 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 95 
                                                       tmp_1 = 27648; else 
                                                                    #line 95 
                                                                    tmp_1 = 24588;
      #line 95 
      ;
      #line 95 
      status = ath5k_hw_reg_read(ah,(unsigned short)tmp_1);
      #line 96 
      if ((status & 2U) != 0U) {
        #line 99 
        int tmp_2;
        #line 97 
        if ((status & 1U) != 0U) 
                                 #line 98 
                                 return (_Bool)0;
        #line 99 
        if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                         #line 99 
                                                         tmp_2 = 26624; else 
                                                                    #line 99 
                                                                    tmp_2 = 24580;
        #line 99 
        ;
        #line 99 
        *data = (unsigned short)ath5k_hw_reg_read(ah,(unsigned short)tmp_2);
        #line 101 
        return (_Bool)1;
      }
      #line 103 
      usleep_range(15UL,20UL);
    }
    #line 94 
    timeout --;
  }
  #line 106 
  return (_Bool)0;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
int ath5k_hw_read_srev(struct ath5k_hw *ah)
{
  #line 111 
  ah->ah_mac_srev = ath5k_hw_reg_read(ah,(unsigned short)16416);
  #line 112 
  return 0;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static int ath5k_pci_eeprom_read_mac(struct ath5k_hw *ah, u8 *mac)
{
  #line 121 
  u32 total;
  #line 121 
  u32 offset;
  #line 122 
  u16 data;
  #line 123 
  int octet;
  #line 120 
  u8 mac_d[6U] = {};
  #line 125 
  if (! ath5k_hw_nvram_read(ah,32U,& data)) 
                                            #line 125 
                                            return -5;
  #line 127 
  offset = 31U;
  #line 127 
  octet = 0;
  #line 127 
  total = 0U;
  #line 127 
  while (offset > 28U) {
    {
      #line 128 
      if (! ath5k_hw_nvram_read(ah,offset,& data)) 
                                                   #line 128 
                                                   return -5;
      #line 130 
      total = (unsigned int)data + total;
      #line 131 
      mac_d[octet + 1] = (unsigned char)data;
      #line 132 
      mac_d[octet] = (unsigned char)((int)data >> 8);
      #line 133 
      octet += 2;
    }
    #line 127 
    offset --;
  }
  #line 136 
  if (total == 0U || total == 196605U) 
                                       #line 137 
                                       return -22;
  #line 139 
  memcpy((void *)mac,(void *)(& mac_d),6UL);
  #line 141 
  return 0;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static struct ath_bus_ops ath_pci_bus_ops = {.read_cachesize = & ath5k_pci_read_cachesize, .eeprom_read = & ath5k_pci_eeprom_read, .eeprom_read_mac = & ath5k_pci_eeprom_read_mac};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static int ath5k_pci_probe(struct pci_dev *pdev, struct pci_device_id *id)
{
  #line 161 
  void *mem;
  #line 162 
  struct ath5k_hw *ah;
  #line 163 
  struct ieee80211_hw *hw;
  #line 164 
  int ret;
  #line 165 
  u8 csz;
  #line 185 
  pci_disable_link_state(pdev,1);
  #line 187 
  ret = pci_enable_device(pdev);
  #line 188 
  if (ret != 0) {
    #line 189 
    _dev_err(& pdev->dev,(char *)"can\'t enable device\n");
    #line 190 
    goto err;
  }
  #line 194 
  ret = pci_set_dma_mask(pdev,4294967295ULL);
  #line 195 
  if (ret != 0) {
    #line 196 
    _dev_err(& pdev->dev,(char *)"32-bit DMA not available\n");
    #line 197 
    goto err_dis;
  }
  #line 204 
  pci_read_config_byte(pdev,12,& csz);
  #line 205 
  if ((unsigned int)csz == 0U) {
    #line 213 
    csz = (unsigned char)16U;
    #line 214 
    pci_write_config_byte(pdev,12,(unsigned char)((int)csz));
  }
  #line 221 
  pci_write_config_byte(pdev,13,(unsigned char)168);
  #line 224 
  pci_set_master(pdev);
  #line 230 
  pci_write_config_byte(pdev,65,(unsigned char)0);
  #line 232 
  ret = pci_request_region(pdev,0,(char *)"ath5k");
  #line 233 
  if (ret != 0) {
    #line 234 
    _dev_err(& pdev->dev,(char *)"cannot reserve PCI memory region\n");
    #line 235 
    goto err_dis;
  }
  #line 238 
  mem = pci_iomap(pdev,0,0UL);
  #line 239 
  if (mem == (void *)0) {
    #line 240 
    _dev_err(& pdev->dev,(char *)"cannot remap PCI memory region\n");
    #line 241 
    ret = -5;
    #line 242 
    goto err_reg;
  }
  #line 249 
  hw = cif_ieee80211_alloc_hw(31960UL,& ath5k_hw_ops);
  #line 250 
  if (hw == (struct ieee80211_hw *)0) {
    #line 251 
    _dev_err(& pdev->dev,(char *)"cannot allocate ieee80211_hw\n");
    #line 252 
    ret = -12;
    #line 253 
    goto err_map;
  }
  #line 256 
  ;
  #line 256 
  _dev_info(& pdev->dev,(char *)"registered as \'%s\'\n",wiphy_name(hw->wiphy));
  #line 258 
  ah = (struct ath5k_hw *)hw->priv;
  #line 259 
  ah->hw = hw;
  #line 260 
  ah->pdev = pdev;
  #line 261 
  ah->dev = & pdev->dev;
  #line 262 
  ah->irq = (int)pdev->irq;
  #line 263 
  ah->devid = (unsigned short)id->device;
  #line 264 
  ah->iobase = mem;
  #line 267 
  ret = ath5k_init_ah(ah,& ath_pci_bus_ops);
  #line 268 
  if (ret != 0) 
                #line 269 
                goto err_free;
  #line 272 
  pci_set_drvdata(pdev,(void *)hw);
  #line 274 
  return 0;
  #line 275 
  err_free: 
            #line 275 
  ;
  #line 276 
  cif_ieee80211_free_hw(hw);
  #line 277 
  err_map: 
           #line 277 
  ;
  #line 278 
  pci_iounmap(pdev,mem);
  #line 279 
  err_reg: 
           #line 279 
  ;
  #line 280 
  pci_release_region(pdev,0);
  #line 281 
  err_dis: 
           #line 281 
  ;
  #line 282 
  pci_disable_device(pdev);
  #line 283 
  err: 
       #line 283 
  ;
  #line 284 
  return ret;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static void ath5k_pci_remove(struct pci_dev *pdev)
{
  #line 290 
  struct ieee80211_hw *hw = pci_get_drvdata(pdev);
  #line 291 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 293 
  ath5k_deinit_ah(ah);
  #line 294 
  pci_iounmap(pdev,ah->iobase);
  #line 295 
  pci_release_region(pdev,0);
  #line 296 
  pci_disable_device(pdev);
  #line 297 
  cif_ieee80211_free_hw(hw);
  #line 298 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static int ath5k_pci_suspend(struct device *dev)
{
  #line 303 
  struct ieee80211_hw *hw = dev_get_drvdata(dev);
  #line 304 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 306 
  ath5k_led_off(ah);
  #line 307 
  return 0;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static int ath5k_pci_resume(struct device *dev)
{
  #line 312 
  void *__mptr;
  #line 312 
  __mptr = (void *)dev;
  #line 312 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 313 
  struct ieee80211_hw *hw = pci_get_drvdata(pdev);
  #line 314 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 321 
  pci_write_config_byte(pdev,65,(unsigned char)0);
  #line 323 
  ath5k_led_enable(ah);
  #line 324 
  return 0;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static struct dev_pm_ops ath5k_pm_ops = {.suspend = & ath5k_pci_suspend, .resume = & ath5k_pci_resume, .freeze = & ath5k_pci_suspend, .thaw = & ath5k_pci_resume, .poweroff = & ath5k_pci_suspend, .restore = & ath5k_pci_resume};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static struct pci_driver ath5k_pci_driver = {.name = (char *)"ath5k", .id_table = (struct pci_device_id *)(& ath5k_pci_id_table), .probe = & ath5k_pci_probe, .remove = & ath5k_pci_remove, .driver = {.pm = & ath5k_pm_ops}};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static int ath5k_pci_driver_init(void)
{
  #line 341 
  return cif___pci_register_driver(& ath5k_pci_driver,& __this_module,
                                (char *)"ath5k");
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pci.c"
static void ath5k_pci_driver_exit(void)
{
  #line 341 
  cif_pci_unregister_driver(& ath5k_pci_driver);
  #line 342 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
struct pci_driver *emg_alias_ath5k_pci_driver = & ath5k_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
struct dev_pm_ops *emg_alias_ath5k_pm_ops = & ath5k_pm_ops;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 101 
#line 101 
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1);
#line 102 
#line 102 
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0);
#line 103 
#line 103 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
void emg_ath5k_pci_driver_exit(void)
{
  #line 113 
  ath5k_pci_driver_exit();
  #line 114 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_ath5k_pci_driver_init(void)
{
  #line 117 
  return ath5k_pci_driver_init();
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_wrapper_ath5k_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 121 
  return ath5k_pci_probe(arg0,arg1);
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
void emg_wrapper_ath5k_pci_remove(struct pci_dev *arg0)
{
  #line 126 
  ath5k_pci_remove(arg0);
  #line 127 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_wrapper_ath5k_pci_resume(struct device *arg0)
{
  #line 131 
  return ath5k_pci_resume(arg0);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
int emg_wrapper_ath5k_pci_suspend(struct device *arg0)
{
  #line 136 
  return ath5k_pci_suspend(arg0);
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops)
{
  #line 830 
  return emg_ieee80211_alloc_hw(priv_data_len,ops);
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw)
{
  #line 838 
  emg_ieee80211_free_hw(hw);
  #line 839 
  return;
}

#line 842  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 846 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/pci.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 854 
  emg_pci_unregister_driver(dev);
  #line 855 
  return;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  #line 47 
  return (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 1503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1503 
unsigned int ath5k_hw_htoclock(struct ath5k_hw *ah, unsigned int usec);
#line 1535 
#line 1535 
int ath5k_hw_get_frame_duration(struct ath5k_hw *ah, enum nl80211_band band, int len, struct ieee80211_rate *rate, bool shortpre);
#line 1537 
#line 1537 
unsigned int ath5k_hw_get_default_slottime(struct ath5k_hw *ah);
#line 1538 
#line 1538 
unsigned int ath5k_hw_get_default_sifs(struct ath5k_hw *ah);
#line 1569 
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
void ath5k_hw_set_tx_retry_limits(struct ath5k_hw *ah, unsigned int queue);
#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_set_ifs_intervals(struct ath5k_hw *ah, unsigned int slot_time);
#line 1576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_init_queues(struct ath5k_hw *ah);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
u32 ath5k_hw_num_tx_pending(struct ath5k_hw *ah, unsigned int queue)
{
  #line 65 
  u32 pending;
  #line 66 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
    #line 66 
    return 0U;
  #line 69 
  if (ah->ah_txq[queue].tqi_type == (unsigned int)AR5K_TX_QUEUE_INACTIVE) 
    #line 70 
    return 0U;
  #line 73 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 74 
                                                   return 0U;
  #line 76 
  pending = ath5k_hw_reg_read(ah,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2560U)));
  #line 77 
  pending &= 3U;
  #line 82 
  if (pending == 0U) {
    #line 82 
    ;
    #line 82 
    if ((ath5k_hw_reg_read(ah,(unsigned short)2112) & (unsigned int)(1 << queue)) != 0U) 
      #line 83 
      return 1U;
  }
  #line 85 
  return pending;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
void ath5k_hw_release_tx_queue(struct ath5k_hw *ah, unsigned int queue)
{
  #line 96 
  int __ret_warn_on;
  #line 96 
  __ret_warn_on = (unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue;
  #line 96 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 97 
    ldv_inline_asm();
    #line 98 
    ldv_inline_asm();
  }
  #line 96 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 97 
                                                return;
  #line 100 
  ah->ah_txq[queue].tqi_type = AR5K_TX_QUEUE_INACTIVE;
  #line 102 
  ah->ah_txq_status &= (unsigned int)(~ (1 << queue));
  #line 103 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
static u16 ath5k_cw_validate(u16 cw_req)
{
  #line 114 
  int tmp;
  #line 114 
  u16 __UNIQUE_ID___x555;
  {
    #line 114 
    __UNIQUE_ID___x555 = cw_req;
    #line 114 
    unsigned short __UNIQUE_ID___y556 = (unsigned short)1023U;
    #line 114 
    if ((int)__UNIQUE_ID___x555 < (int)__UNIQUE_ID___y556) 
                                                           #line 114 
                                                           tmp = (int)__UNIQUE_ID___x555; else 
                                                                    #line 114 
                                                                    tmp = (int)__UNIQUE_ID___y556;
    }
  #line 114 
  cw_req = (unsigned short)tmp;
  #line 117 
  if ((int)is_power_of_2((unsigned long)((int)cw_req + 1)) != 0) 
                                                                 #line 118 
                                                                 return cw_req;
  #line 121 
  if ((int)is_power_of_2((unsigned long)cw_req) != 0) 
                                                      #line 122 
                                                      return (unsigned short)((unsigned int)cw_req + 65535U);
  #line 126 
  if (0 != 0) {
    #line 126 
    unsigned int tmp_15;
    #line 126 
    unsigned int tmp_47;
    #line 126 
    unsigned int tmp_48;
    #line 126 
    unsigned int tmp_16;
    #line 126 
    unsigned int tmp_17;
    #line 126 
    unsigned int tmp_49;
    #line 126 
    unsigned int tmp_50;
    #line 126 
    unsigned int tmp_18;
    #line 126 
    unsigned int tmp_19;
    #line 126 
    unsigned int tmp_51;
    #line 126 
    unsigned int tmp_52;
    #line 126 
    unsigned int tmp_20;
    #line 126 
    unsigned int tmp_21;
    #line 126 
    unsigned int tmp_53;
    #line 126 
    unsigned int tmp_54;
    #line 126 
    unsigned int tmp_22;
    #line 126 
    unsigned int tmp_23;
    #line 126 
    unsigned int tmp_55;
    #line 126 
    unsigned int tmp_56;
    #line 126 
    unsigned int tmp_24;
    #line 126 
    unsigned int tmp_25;
    #line 126 
    unsigned int tmp_57;
    #line 126 
    unsigned int tmp_58;
    #line 126 
    unsigned int tmp_26;
    #line 126 
    unsigned int tmp_27;
    #line 126 
    unsigned int tmp_59;
    #line 126 
    unsigned int tmp_60;
    #line 126 
    unsigned int tmp_28;
    #line 126 
    unsigned int tmp_29;
    #line 126 
    unsigned int tmp_61;
    #line 126 
    unsigned int tmp_62;
    #line 126 
    unsigned int tmp_30;
    #line 126 
    unsigned int tmp_31;
    #line 126 
    unsigned int tmp_63;
    #line 126 
    unsigned int tmp_64;
    #line 126 
    unsigned int tmp_32;
    #line 126 
    unsigned int tmp_33;
    #line 126 
    unsigned int tmp_65;
    #line 126 
    unsigned int tmp_34;
    #line 126 
    unsigned int tmp_67;
    #line 126 
    unsigned int tmp_3;
    #line 126 
    unsigned int tmp_35;
    #line 126 
    unsigned int tmp_36;
    #line 126 
    unsigned int tmp_4;
    #line 126 
    unsigned int tmp_5;
    #line 126 
    unsigned int tmp_37;
    #line 126 
    unsigned int tmp_38;
    #line 126 
    unsigned int tmp_6;
    #line 126 
    unsigned int tmp_7;
    #line 126 
    unsigned int tmp_39;
    #line 126 
    unsigned int tmp_40;
    #line 126 
    unsigned int tmp_8;
    #line 126 
    unsigned int tmp_9;
    #line 126 
    unsigned int tmp_41;
    #line 126 
    unsigned int tmp_42;
    #line 126 
    unsigned int tmp_10;
    #line 126 
    unsigned int tmp_11;
    #line 126 
    unsigned int tmp_43;
    #line 126 
    unsigned int tmp_44;
    #line 126 
    unsigned int tmp_12;
    #line 126 
    unsigned int tmp_13;
    #line 126 
    unsigned int tmp_45;
    #line 126 
    unsigned int tmp_46;
    #line 126 
    unsigned int tmp_14;
    #line 126 
    unsigned int tmp_68;
    #line 126 
    if ((unsigned int)cw_req != 1U) {
      #line 126 
      if (0 != 0) {
        #line 126 
        if ((unsigned int)cw_req > 2U) {
          #line 126 
          if (((unsigned long long)((int)cw_req + -1) & 9223372036854775808ULL) == 0ULL) {
            #line 126 
            if (((unsigned long long)((int)cw_req + -1) & 4611686018427387904ULL) == 0ULL) {
              #line 126 
              if (((unsigned long long)((int)cw_req + -1) & 2305843009213693952ULL) == 0ULL) {
                #line 126 
                if (((unsigned long long)((int)cw_req + -1) & 1152921504606846976ULL) == 0ULL) {
                  #line 126 
                  if (((unsigned long long)((int)cw_req + -1) & 576460752303423488ULL) == 0ULL) {
                    #line 126 
                    if (((unsigned long long)((int)cw_req + -1) & 288230376151711744ULL) == 0ULL) {
                      #line 126 
                      if (((unsigned long long)((int)cw_req + -1) & 144115188075855872ULL) == 0ULL) {
                        #line 126 
                        if (((unsigned long long)((int)cw_req + -1) & 72057594037927936ULL) == 0ULL) {
                          #line 126 
                          if (((unsigned long long)((int)cw_req + -1) & 36028797018963968ULL) == 0ULL) {
                            #line 126 
                            if (((unsigned long long)((int)cw_req + -1) & 18014398509481984ULL) == 0ULL) {
                              #line 126 
                              if (((unsigned long long)((int)cw_req + -1) & 9007199254740992ULL) == 0ULL) {
                                #line 126 
                                if (((unsigned long long)((int)cw_req + -1) & 4503599627370496ULL) == 0ULL) {
                                  #line 126 
                                  if (((unsigned long long)((int)cw_req + -1) & 2251799813685248ULL) == 0ULL) {
                                    #line 126 
                                    if (((unsigned long long)((int)cw_req + -1) & 1125899906842624ULL) == 0ULL) {
                                      #line 126 
                                      if (((unsigned long long)((int)cw_req + -1) & 562949953421312ULL) == 0ULL) {
                                        #line 126 
                                        if (((unsigned long long)((int)cw_req + -1) & 281474976710656ULL) == 0ULL) {
                                          #line 126 
                                          if (((unsigned long long)((int)cw_req + -1) & 140737488355328ULL) == 0ULL) {
                                            #line 126 
                                            if (((unsigned long long)((int)cw_req + -1) & 70368744177664ULL) == 0ULL) {
                                              #line 126 
                                              if (((unsigned long long)((int)cw_req + -1) & 35184372088832ULL) == 0ULL) {
                                                #line 126 
                                                if (((unsigned long long)((int)cw_req + -1) & 17592186044416ULL) == 0ULL) {
                                                  #line 126 
                                                  if (((unsigned long long)((int)cw_req + -1) & 8796093022208ULL) == 0ULL) {
                                                    #line 126 
                                                    if (((unsigned long long)((int)cw_req + -1) & 4398046511104ULL) == 0ULL) {
                                                      #line 126 
                                                      if (((unsigned long long)((int)cw_req + -1) & 2199023255552ULL) == 0ULL) {
                                                        #line 126 
                                                        if (((unsigned long long)((int)cw_req + -1) & 1099511627776ULL) == 0ULL) {
                                                          #line 126 
                                                          if (((unsigned long long)((int)cw_req + -1) & 549755813888ULL) == 0ULL) {
                                                            #line 126 
                                                            if (((unsigned long long)((int)cw_req + -1) & 274877906944ULL) == 0ULL) {
                                                              #line 126 
                                                              if (((unsigned long long)((int)cw_req + -1) & 137438953472ULL) == 0ULL) {
                                                                #line 126 
                                                                if (((unsigned long long)((int)cw_req + -1) & 68719476736ULL) == 0ULL) {
                                                                  #line 126 
                                                                  if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 34359738368ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 17179869184ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 8589934592ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 4294967296ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 2147483648ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 1073741824ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 536870912ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 268435456ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 134217728ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 67108864ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 33554432ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 16777216ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 8388608ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 4194304ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 2097152ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 1048576ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 524288ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 262144ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 131072ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 65536ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 32768ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 16384ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 8192ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 4096ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 2048ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 1024ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 512ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 256ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 128ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 64ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 32ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 16ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 8ULL) == 0ULL) {
                                                                    #line 126 
                                                                    if (
                                                                    ((unsigned long long)((int)cw_req + -1) & 4ULL) != 0ULL) 
                                                                    #line 126 
                                                                    tmp_3 = 7U; else 
                                                                    #line 126 
                                                                    tmp_3 = 3U;
                                                                    #line 126 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_4 = 15U;
                                                                    #line 126 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_5 = 31U;
                                                                    #line 126 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_6 = 63U;
                                                                    #line 126 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_7 = 127U;
                                                                    #line 126 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_8 = 255U;
                                                                    #line 126 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_9 = 511U;
                                                                    #line 126 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_10 = 1023U;
                                                                    #line 126 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_11 = 2047U;
                                                                    #line 126 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_12 = 4095U;
                                                                    #line 126 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_13 = 8191U;
                                                                    #line 126 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_14 = 16383U;
                                                                    #line 126 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_15 = 32767U;
                                                                    #line 126 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_16 = 65535U;
                                                                    #line 126 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_17 = 65535U;
                                                                    #line 126 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_18 = 65535U;
                                                                    #line 126 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_19 = 65535U;
                                                                    #line 126 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_20 = 65535U;
                                                                    #line 126 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_21 = 65535U;
                                                                    #line 126 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_22 = 65535U;
                                                                    #line 126 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_23 = 65535U;
                                                                    #line 126 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_24 = 65535U;
                                                                    #line 126 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_25 = 65535U;
                                                                    #line 126 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_26 = 65535U;
                                                                    #line 126 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_27 = 65535U;
                                                                    #line 126 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_28 = 65535U;
                                                                    #line 126 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_29 = 65535U;
                                                                    #line 126 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_30 = 65535U;
                                                                    #line 126 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_31 = 65535U;
                                                                    #line 126 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_32 = 65535U;
                                                                    #line 126 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_33 = 65535U;
                                                                    #line 126 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_34 = 65535U;
                                                                    #line 126 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 126 
                                                                    tmp_35 = 65535U;
                                                                    #line 126 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    #line 126 
                                                                    tmp_36 = 65535U;
                                                                  #line 126 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  #line 126 
                                                                  tmp_37 = 65535U;
                                                                #line 126 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
                                                                   #line 126 
                                                                   tmp_38 = 65535U;
                                                              #line 126 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
                                                                 #line 126 
                                                                 tmp_39 = 65535U;
                                                            #line 126 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
                                                               #line 126 
                                                               tmp_40 = 65535U;
                                                          #line 126 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
                                                             #line 126 
                                                             tmp_41 = 65535U;
                                                        #line 126 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
                                                           #line 126 
                                                           tmp_42 = 65535U;
                                                      #line 126 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
                                                         #line 126 
                                                         tmp_43 = 65535U;
                                                    #line 126 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
                                                       #line 126 
                                                       tmp_44 = 65535U;
                                                  #line 126 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
                                                     #line 126 
                                                     tmp_45 = 65535U;
                                                #line 126 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
                                                   #line 126 
                                                   tmp_46 = 65535U;
                                              #line 126 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
                                                 #line 126 
                                                 tmp_47 = 65535U;
                                            #line 126 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
                                               #line 126 
                                               tmp_48 = 65535U;
                                          #line 126 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
                                             #line 126 
                                             tmp_49 = 65535U;
                                        #line 126 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
                                           #line 126 
                                           tmp_50 = 65535U;
                                      #line 126 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
                                         #line 126 
                                         tmp_51 = 65535U;
                                    #line 126 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
                                       #line 126 
                                       tmp_52 = 65535U;
                                  #line 126 
                                  tmp_53 = tmp_52;
                                }
                                else 
                                     #line 126 
                                     tmp_53 = 65535U;
                                #line 126 
                                tmp_54 = tmp_53;
                              }
                              else 
                                   #line 126 
                                   tmp_54 = 65535U;
                              #line 126 
                              tmp_55 = tmp_54;
                            }
                            else 
                                 #line 126 
                                 tmp_55 = 65535U;
                            #line 126 
                            tmp_56 = tmp_55;
                          }
                          else 
                               #line 126 
                               tmp_56 = 65535U;
                          #line 126 
                          tmp_57 = tmp_56;
                        }
                        else 
                             #line 126 
                             tmp_57 = 65535U;
                        #line 126 
                        tmp_58 = tmp_57;
                      }
                      else 
                           #line 126 
                           tmp_58 = 65535U;
                      #line 126 
                      tmp_59 = tmp_58;
                    }
                    else 
                         #line 126 
                         tmp_59 = 65535U;
                    #line 126 
                    tmp_60 = tmp_59;
                  }
                  else 
                       #line 126 
                       tmp_60 = 65535U;
                  #line 126 
                  tmp_61 = tmp_60;
                }
                else 
                     #line 126 
                     tmp_61 = 65535U;
                #line 126 
                tmp_62 = tmp_61;
              }
              else 
                   #line 126 
                   tmp_62 = 65535U;
              #line 126 
              tmp_63 = tmp_62;
            }
            else 
                 #line 126 
                 tmp_63 = 65535U;
            #line 126 
            tmp_64 = tmp_63;
          }
          else 
               #line 126 
               tmp_64 = 65535U;
          #line 126 
          tmp_65 = tmp_64;
        }
        else 
             #line 126 
             tmp_65 = 1U;
        #line 126 
        tmp_67 = tmp_65;
      }
      else {
        #line 126 
        tmp_67 = (unsigned int)((unsigned short)(1UL << (__ilog2_u32((unsigned int)((int)cw_req + -1)) + 1))) + 65535U;
      }
      #line 126 
      tmp_68 = tmp_67;
    }
    else 
         #line 126 
         tmp_68 = 0U;
    #line 126 
    cw_req = (unsigned short)tmp_68;
  }
  else {
    #line 126 
    cw_req = (unsigned short)((unsigned int)((unsigned short)__roundup_pow_of_two((unsigned long)cw_req)) + 65535U);
  }
  #line 128 
  return cw_req;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_get_tx_queueprops(struct ath5k_hw *ah, int queue, struct ath5k_txq_info *queue_info)
{
  #line 141 
  memcpy((void *)queue_info,(void *)(& ah->ah_txq[queue]),32UL);
  #line 142 
  return 0;
}

#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_set_tx_queueprops(struct ath5k_hw *ah, int queue, struct ath5k_txq_info *qinfo)
{
  #line 175 
  u8 __UNIQUE_ID___x557;
  #line 175 
  int tmp;
  #line 157 
  struct ath5k_txq_info *qi;
  #line 159 
  if ((int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
                                                             #line 159 
                                                             return 0;
  #line 161 
  qi = & ah->ah_txq[queue];
  #line 163 
  if (qi->tqi_type == (unsigned int)AR5K_TX_QUEUE_INACTIVE) 
                                                            #line 164 
                                                            return -5;
  #line 167 
  qi->tqi_type = qinfo->tqi_type;
  #line 168 
  qi->tqi_subtype = qinfo->tqi_subtype;
  #line 169 
  qi->tqi_flags = qinfo->tqi_flags;
  {
    #line 175 
    __UNIQUE_ID___x557 = qinfo->tqi_aifs;
    #line 175 
    unsigned char __UNIQUE_ID___y558 = (unsigned char)252U;
    #line 175 
    if ((int)__UNIQUE_ID___x557 < (int)__UNIQUE_ID___y558) 
                                                           #line 175 
                                                           tmp = (int)__UNIQUE_ID___x557; else 
                                                                    #line 175 
                                                                    tmp = (int)__UNIQUE_ID___y558;
    }
  #line 175 
  qi->tqi_aifs = (unsigned char)tmp;
  #line 176 
  qi->tqi_cw_min = ath5k_cw_validate((unsigned short)((int)qinfo->tqi_cw_min));
  #line 177 
  qi->tqi_cw_max = ath5k_cw_validate((unsigned short)((int)qinfo->tqi_cw_max));
  #line 178 
  qi->tqi_cbr_period = qinfo->tqi_cbr_period;
  #line 179 
  qi->tqi_cbr_overflow_limit = qinfo->tqi_cbr_overflow_limit;
  #line 180 
  qi->tqi_burst_time = qinfo->tqi_burst_time;
  #line 181 
  qi->tqi_ready_time = qinfo->tqi_ready_time;
  #line 185 
  if (qinfo->tqi_type == (unsigned int)AR5K_TX_QUEUE_DATA && (unsigned int)qinfo->tqi_subtype + 4294967294U <= 1U || qinfo->tqi_type == (unsigned int)AR5K_TX_QUEUE_UAPSD) 
    #line 189 
    qi->tqi_flags = (unsigned short)((unsigned int)qi->tqi_flags | 4096U);
  #line 191 
  return 0;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_setup_tx_queue(struct ath5k_hw *ah, enum ath5k_tx_queue queue_type, struct ath5k_txq_info *queue_info)
{
  #line 206 
  unsigned int queue;
  #line 207 
  int ret;
  #line 213 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num == 2U) 
    #line 214 
    switch ((unsigned int)queue_type) {
      #line 215 
      case (unsigned int)1: 
                            #line 215 
      ;
      #line 216 
      queue = 0U;
      #line 217 
      break;
      #line 218 
      case (unsigned int)2: 
                            #line 218 
      ;
      #line 219 
      case (unsigned int)3: 
                            #line 219 
      ;
      #line 220 
      queue = 1U;
      #line 221 
      break;
      #line 222 
      default: 
               #line 222 
      ;
      #line 223 
      return -22;
    }
  else 
    #line 226 
    switch ((unsigned int)queue_type) {
      #line 227 
      case (unsigned int)1: 
                            #line 227 
      ;
      #line 228 
      queue = (unsigned int)queue_info->tqi_subtype;
      #line 229 
      break;
      #line 230 
      case (unsigned int)4: 
                            #line 230 
      ;
      #line 231 
      queue = 7U;
      #line 232 
      break;
      #line 233 
      case (unsigned int)2: 
                            #line 233 
      ;
      #line 234 
      queue = 9U;
      #line 235 
      break;
      #line 236 
      case (unsigned int)3: 
                            #line 236 
      ;
      #line 237 
      queue = 8U;
      #line 238 
      break;
      #line 239 
      default: 
               #line 239 
      ;
      #line 240 
      return -22;
    }
  #line 247 
  memset((void *)(& ah->ah_txq[queue]),0,32UL);
  #line 248 
  ah->ah_txq[queue].tqi_type = queue_type;
  #line 250 
  if (queue_info != (struct ath5k_txq_info *)0) {
    #line 251 
    queue_info->tqi_type = queue_type;
    #line 252 
    ret = ath5k_hw_set_tx_queueprops(ah,(int)queue,queue_info);
    #line 253 
    if (ret != 0) 
                  #line 254 
                  return ret;
  }
  #line 262 
  ah->ah_txq_status |= (unsigned int)(1 << queue);
  #line 264 
  return (int)queue;
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
void ath5k_hw_set_tx_retry_limits(struct ath5k_hw *ah, unsigned int queue)
{
  #line 285 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 286 
    struct ath5k_txq_info *tq = & ah->ah_txq[queue];
    #line 288 
    if (queue != 0U) 
                     #line 289 
                     return;
    #line 291 
    ath5k_hw_reg_write(ah,(unsigned int)((((((int)tq->tqi_cw_min << 20) | (((int)ah->ah_retry_long << 14) & 1032192)) | (((int)ah->ah_retry_short << 8) & 16128)) | (((int)ah->ah_retry_long << 4) & 255)) | ((int)ah->ah_retry_short & 15)),(unsigned short)32796);
  }
  else {
    #line 309 
    u8 __UNIQUE_ID___x559;
    #line 309 
    int tmp;
    #line 304 
    ;
    {
      #line 309 
      __UNIQUE_ID___x559 = ah->ah_retry_long;
      #line 309 
      u8 __UNIQUE_ID___y560 = ah->ah_retry_short;
      #line 309 
      if ((int)__UNIQUE_ID___x559 > (int)__UNIQUE_ID___y560) 
                                                             #line 309 
                                                             tmp = (int)__UNIQUE_ID___x559; else 
                                                                    #line 309 
                                                                    tmp = (int)__UNIQUE_ID___y560;
      }
    #line 304 
    ;
    #line 304 
    ;
    #line 304 
    ath5k_hw_reg_write(ah,(unsigned int)((((int)ah->ah_retry_long & 15) | (((int)ah->ah_retry_long << 8) & 16128)) | ((tmp << 14) & 1032192)),(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4224U)));
  }
  #line 312 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_reset_tx_queue(struct ath5k_hw *ah, unsigned int queue)
{
  #line 326 
  struct ath5k_txq_info *tq = & ah->ah_txq[queue];
  #line 328 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
    #line 328 
    return 0;
  #line 332 
  if (ah->ah_version == (unsigned int)AR5K_AR5210 || tq->tqi_type == (unsigned int)AR5K_TX_QUEUE_INACTIVE) 
    #line 334 
    return 0;
  #line 340 
  ath5k_hw_reg_write(ah,(unsigned int)((((int)tq->tqi_cw_min & 1023) | (((int)tq->tqi_cw_max << 10) & 1047552)) | (((int)tq->tqi_aifs << 20) & 267386880)),(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4160U)));
  #line 349 
  ath5k_hw_set_tx_retry_limits(ah,queue);
  #line 357 
  ;
  #line 357 
  ;
  #line 357 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                        (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U))) | 256U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U)));
  #line 361 
  if ((unsigned int)ah->ah_mac_version <= 63U) {
    #line 362 
    ;
    #line 362 
    ;
    #line 362 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U))) | 16777216U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U)));
  }
  #line 366 
  if (tq->tqi_cbr_period != 0U) {
    #line 367 
    ath5k_hw_reg_write(ah,(tq->tqi_cbr_period & 16777215U) | (tq->tqi_cbr_overflow_limit << 24),(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2240U)));
    #line 373 
    ;
    #line 373 
    ;
    #line 373 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 1U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    #line 376 
    if (tq->tqi_cbr_overflow_limit != 0U) {
      #line 377 
      ;
      #line 377 
      ;
      #line 377 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 256U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    }
  }
  #line 382 
  if (tq->tqi_ready_time != 0U && tq->tqi_type != (unsigned int)AR5K_TX_QUEUE_CAB) 
    #line 383 
    ath5k_hw_reg_write(ah,(tq->tqi_ready_time & 16777215U) | 16777216U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2304U)));
  #line 388 
  if (tq->tqi_burst_time != 0U) {
    #line 389 
    ath5k_hw_reg_write(ah,(tq->tqi_burst_time & 1048575U) | 1048576U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4288U)));
    #line 394 
    if (((int)tq->tqi_flags & 768) != 0) {
      #line 395 
      ;
      #line 395 
      ;
      #line 395 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 512U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    }
  }
  #line 400 
  if (((int)tq->tqi_flags & 512) != 0) 
                                       #line 401 
                                       ath5k_hw_reg_write(ah,2097152U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U)));
  #line 405 
  if (((int)tq->tqi_flags & 2048) != 0) 
                                        #line 406 
                                        ath5k_hw_reg_write(ah,512U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U)));
  #line 412 
  switch ((unsigned int)tq->tqi_type) {
    #line 413 
    case (unsigned int)2: 
                          #line 413 
    ;
    #line 414 
    ;
    #line 414 
    ;
    #line 414 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 194U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    #line 419 
    ;
    #line 419 
    ;
    #line 419 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U))) | 2949120U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U)));
    #line 425 
    break;
    #line 427 
    case (unsigned int)3: 
                          #line 427 
    ;
    #line 429 
    ;
    #line 429 
    ;
    #line 429 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 98U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    #line 434 
    ath5k_hw_reg_write(ah,(tq->tqi_ready_time + 4294967288U) * 1024U | 16777216U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2304U)));
    #line 441 
    ;
    #line 441 
    ;
    #line 441 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U))) | 262144U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4352U)));
    #line 444 
    break;
    #line 446 
    case (unsigned int)4: 
                          #line 446 
    ;
    #line 447 
    ;
    #line 447 
    ;
    #line 447 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 32U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    #line 449 
    break;
    #line 451 
    case (unsigned int)1: 
                          #line 451 
    ;
    #line 452 
    default: 
             #line 452 
    ;
    #line 453 
    break;
  }
  #line 462 
  if (((int)tq->tqi_flags & 1) != 0) 
                                     #line 463 
                                     ah->ah_txq_imr_txok |= (unsigned int)(1 << queue);
  #line 465 
  if (((int)tq->tqi_flags & 2) != 0) 
                                     #line 466 
                                     ah->ah_txq_imr_txerr |= (unsigned int)(1 << queue);
  #line 468 
  if (((int)tq->tqi_flags & 16) != 0) 
                                      #line 469 
                                      ah->ah_txq_imr_txurn |= (unsigned int)(1 << queue);
  #line 471 
  if (((int)tq->tqi_flags & 8) != 0) 
                                     #line 472 
                                     ah->ah_txq_imr_txdesc |= (unsigned int)(1 << queue);
  #line 474 
  if (((int)tq->tqi_flags & 4) != 0) 
                                     #line 475 
                                     ah->ah_txq_imr_txeol |= (unsigned int)(1 << queue);
  #line 477 
  if (((int)tq->tqi_flags & 32) != 0) 
                                      #line 478 
                                      ah->ah_txq_imr_cbrorn |= (unsigned int)(1 << queue);
  #line 480 
  if (((int)tq->tqi_flags & 64) != 0) 
                                      #line 481 
                                      ah->ah_txq_imr_cbrurn |= (unsigned int)(1 << queue);
  #line 483 
  if (((int)tq->tqi_flags & 128) != 0) 
                                       #line 484 
                                       ah->ah_txq_imr_qtrig |= (unsigned int)(1 << queue);
  #line 486 
  if (((int)tq->tqi_flags & 256) != 0) 
                                       #line 487 
                                       ah->ah_txq_imr_nofrm |= (unsigned int)(1 << queue);
  #line 492 
  ah->ah_txq_imr_txok &= ah->ah_txq_status;
  #line 493 
  ah->ah_txq_imr_txerr &= ah->ah_txq_status;
  #line 494 
  ah->ah_txq_imr_txurn &= ah->ah_txq_status;
  #line 495 
  ah->ah_txq_imr_txdesc &= ah->ah_txq_status;
  #line 496 
  ah->ah_txq_imr_txeol &= ah->ah_txq_status;
  #line 497 
  ah->ah_txq_imr_cbrorn &= ah->ah_txq_status;
  #line 498 
  ah->ah_txq_imr_cbrurn &= ah->ah_txq_status;
  #line 499 
  ah->ah_txq_imr_qtrig &= ah->ah_txq_status;
  #line 500 
  ah->ah_txq_imr_nofrm &= ah->ah_txq_status;
  #line 502 
  ath5k_hw_reg_write(ah,(ah->ah_txq_imr_txok & 1023U) | ((ah->ah_txq_imr_txdesc << 16) & 67043328U),(unsigned short)164);
  #line 508 
  ath5k_hw_reg_write(ah,(ah->ah_txq_imr_txerr & 1023U) | ((ah->ah_txq_imr_txeol << 16) & 67043328U),(unsigned short)168);
  #line 515 
  ;
  #line 515 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)172) & 4294966272U,(unsigned short)172);
  #line 516 
  ;
  #line 516 
  ;
  #line 516 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)172) | (ah->ah_txq_imr_txurn & 1023U),(unsigned short)172);
  #line 520 
  ath5k_hw_reg_write(ah,(ah->ah_txq_imr_cbrorn & 1023U) | ((ah->ah_txq_imr_cbrurn << 16) & 67043328U),(unsigned short)176);
  #line 526 
  ath5k_hw_reg_write(ah,ah->ah_txq_imr_qtrig & 1023U,(unsigned short)180);
  #line 530 
  ath5k_hw_reg_write(ah,(ah->ah_txq_imr_nofrm << 10) & 1047552U,(unsigned short)76);
  #line 535 
  if (ah->ah_txq_imr_nofrm == 0U) 
                                  #line 536 
                                  ath5k_hw_reg_write(ah,0U,(unsigned short)76);
  #line 539 
  ath5k_hw_reg_write(ah,(unsigned int)(1 << queue),(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 4096U)));
  #line 541 
  return 0;
}

#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_set_ifs_intervals(struct ath5k_hw *ah, unsigned int slot_time)
{
  #line 621 
  int __ret_warn_on;
  #line 560 
  enum nl80211_band band;
  #line 561 
  struct ieee80211_supported_band *sband;
  #line 562 
  struct ieee80211_rate *rate;
  #line 563 
  u32 ack_tx_time;
  #line 563 
  u32 eifs;
  #line 563 
  u32 eifs_clock;
  #line 563 
  u32 sifs;
  #line 563 
  u32 sifs_clock;
  #line 565 
  u32 rate_flags;
  #line 565 
  u32 i;
  #line 559 
  struct ieee80211_channel *channel = ah->ah_current_channel;
  #line 564 
  u32 slot_time_clock = ath5k_hw_htoclock(ah,slot_time);
  #line 567 
  if (slot_time <= 5U || slot_time_clock > 65535U) 
                                                   #line 568 
                                                   return -22;
  #line 570 
  sifs = ath5k_hw_get_default_sifs(ah);
  #line 571 
  sifs_clock = ath5k_hw_htoclock(ah,sifs + 4294967294U);
  #line 597 
  if (channel->band == (unsigned int)NL80211_BAND_5GHZ) 
                                                        #line 598 
                                                        band = NL80211_BAND_5GHZ; else 
                                                                    #line 600 
                                                                    band = NL80211_BAND_2GHZ;
  #line 602 
  switch ((int)ah->ah_bwmode) {
    #line 603 
    case 1: 
            #line 603 
    ;
    #line 604 
    rate_flags = 32U;
    #line 605 
    break;
    #line 606 
    case 2: 
            #line 606 
    ;
    #line 607 
    rate_flags = 64U;
    #line 608 
    break;
    #line 609 
    default: 
             #line 609 
    ;
    #line 610 
    rate_flags = 0U;
    #line 611 
    break;
  }
  #line 613 
  sband = & ah->sbands[(unsigned int)band];
  #line 614 
  rate = (struct ieee80211_rate *)0;
  #line 615 
  i = 0U;
  #line 615 
  while ((unsigned int)sband->n_bitrates > i) {
    #line 616 
    if (((sband->bitrates + (unsigned long)i)->flags & rate_flags) != rate_flags) 
      #line 617 
      goto __Cont;
    #line 618 
    rate = sband->bitrates + (unsigned long)i;
    #line 619 
    break;
    #line 615 
    __Cont: 
            #line 615 
    i ++;
  }
  #line 621 
  __ret_warn_on = rate == (struct ieee80211_rate *)0;
  #line 621 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 622 
    ldv_inline_asm();
    #line 623 
    ldv_inline_asm();
  }
  #line 621 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 622 
                                                return -22;
  #line 624 
  ack_tx_time = (unsigned int)ath5k_hw_get_frame_duration(ah,band,10,rate,(_Bool)0);
  #line 627 
  eifs = (ack_tx_time + sifs) + slot_time * 2U;
  #line 628 
  eifs_clock = ath5k_hw_htoclock(ah,eifs);
  #line 631 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 632 
    u32 pifs;
    #line 632 
    u32 pifs_clock;
    #line 632 
    u32 difs;
    #line 632 
    u32 difs_clock;
    #line 635 
    ath5k_hw_reg_write(ah,slot_time_clock,(unsigned short)32784);
    #line 638 
    eifs_clock = (eifs_clock << 12) & 67104768U;
    #line 641 
    pifs = slot_time + sifs;
    #line 642 
    pifs_clock = ath5k_hw_htoclock(ah,pifs);
    #line 643 
    pifs_clock &= 4095U;
    #line 646 
    difs = slot_time * 2U + sifs;
    #line 647 
    difs_clock = ath5k_hw_htoclock(ah,difs);
    #line 650 
    ath5k_hw_reg_write(ah,(difs_clock << 11) | sifs_clock,(unsigned short)32832);
    #line 655 
    ath5k_hw_reg_write(ah,(pifs_clock | eifs_clock) | 67108864U,(unsigned short)32836);
    #line 659 
    return 0;
  }
  #line 663 
  ath5k_hw_reg_write(ah,slot_time_clock,(unsigned short)4208);
  #line 666 
  ath5k_hw_reg_write(ah,eifs_clock,(unsigned short)4272);
  #line 669 
  ;
  #line 669 
  ;
  #line 669 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)4336) & 4294966287U) | ((sifs << 4) & 1008U),(unsigned short)4336);
  #line 674 
  ath5k_hw_reg_write(ah,sifs_clock,(unsigned short)4144);
  #line 676 
  return 0;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/qcu.c"
int ath5k_hw_init_queues(struct ath5k_hw *ah)
{
  #line 690 
  int i;
  #line 690 
  int ret;
  #line 700 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 701 
    i = 0;
    #line 701 
    while ((int)ah->ah_capabilities.cap_queues.q_tx_num > i) {
      #line 702 
      ret = ath5k_hw_reset_tx_queue(ah,(unsigned int)i);
      #line 703 
      if (ret != 0) {
        #line 704 
        if (net_ratelimit() != 0) 
                                  #line 704 
                                  _ath5k_printk(ah,(char *)"\001",(char *)"failed to reset TX queue #%d\n",i);
        #line 706 
        return ret;
      }
      #line 701 
      i ++;
    }
  }
  else 
       #line 713 
       ath5k_hw_set_tx_retry_limits(ah,0U);
  #line 716 
  if ((unsigned int)ah->ah_bwmode == 3U) {
    #line 717 
    ;
    #line 717 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)4336) | 8U,(unsigned short)4336);
  }
  #line 723 
  if ((unsigned int)ah->ah_coverage_class == 0U) {
    #line 724 
    unsigned int slot_time = ath5k_hw_get_default_slottime(ah);
    #line 725 
    ath5k_hw_set_ifs_intervals(ah,slot_time);
  }
  #line 728 
  return 0;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/ani.i.aux"
static void cif_spin_lock_bh_cc_lock_of_ath_common_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/ani.i.aux"
static void cif_spin_unlock_bh_cc_lock_of_ath_common_0(spinlock_t *lock);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/ani.i.aux"
static void cif_tasklet_schedule_0(struct tasklet_struct *t);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 207 
int32_t ath_hw_get_listen_time(struct ath_common *);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.h"
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_phy_error_report(struct ath5k_hw *ah, enum ath5k_phy_error_code phyerr);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.h"
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_print_counters(struct ath5k_hw *ah);
#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
__inline static unsigned long ewma_beacon_rssi_read(struct ewma_beacon_rssi *e)
{
  #line 1255 
  return e->internal >> 10;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_set_noise_immunity_level(struct ath5k_hw *ah, int level)
{
  #line 80 
  s8 lo[2U] = {(signed char)(-64), (signed char)(-70)};
  #line 81 
  s8 hi[2U] = {(signed char)(-14), (signed char)(-12)};
  #line 82 
  s8 sz[2U] = {(signed char)(-55), (signed char)(-62)};
  #line 83 
  s8 fr[2U] = {(signed char)(-78), (signed char)(-80)};
  #line 85 
  if ((unsigned int)level > 1U) {
    #line 86 
    if (net_ratelimit() != 0) 
                              #line 86 
                              _ath5k_printk(ah,(char *)"\001",(char *)"noise immunity level %d out of range",level);
    #line 88 
    return;
  }
  #line 91 
  ;
  #line 91 
  ;
  #line 91 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38992) & 4027580415U) | ((unsigned int)((int)sz[level] << 20) & 267386880U),(unsigned short)38992);
  #line 93 
  ;
  #line 93 
  ;
  #line 93 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39004) & 4294934655U) | ((unsigned int)((int)lo[level] << 7) & 32640U),(unsigned short)39004);
  #line 95 
  ;
  #line 95 
  ;
  #line 95 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39004) & 4290805759U) | ((unsigned int)((int)hi[level] << 15) & 4161536U),(unsigned short)39004);
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39000) & 4228120575U) | ((unsigned int)((int)fr[level] << 18) & 66846720U),(unsigned short)39000);
  #line 100 
  ah->ani_state.noise_imm_level = level;
  #line 101 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                     #line 101 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_set_noise_immunity_level",101,level);
  #line 102 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_set_spur_immunity_level(struct ath5k_hw *ah, int level)
{
  #line 113 
  int val[8U] = {2, 4, 6, 8, 10, 12, 14, 16};
  #line 115 
  if ((unsigned int)level > 7U || ah->ani_state.max_spur_level < level) {
    #line 117 
    if (net_ratelimit() != 0) 
                              #line 117 
                              _ath5k_printk(ah,(char *)"\001",(char *)"spur immunity level %d out of range",level);
    #line 119 
    return;
  }
  #line 122 
  ;
  #line 122 
  ;
  #line 122 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39204) & 4294967041U) | ((unsigned int)(val[level] << 1) & 255U),(unsigned short)39204);
  #line 125 
  ah->ani_state.spur_level = level;
  #line 126 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                     #line 126 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_set_spur_immunity_level",126,level);
  #line 127 
  return;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_set_firstep_level(struct ath5k_hw *ah, int level)
{
  #line 137 
  int val[3U] = {0, 4, 8};
  #line 139 
  if ((unsigned int)level > 2U) {
    #line 140 
    if (net_ratelimit() != 0) 
                              #line 140 
                              _ath5k_printk(ah,(char *)"\001",(char *)"firstep level %d out of range",level);
    #line 141 
    return;
  }
  #line 144 
  ;
  #line 144 
  ;
  #line 144 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39000) & 4294709247U) | ((unsigned int)(val[level] << 12) & 258048U),(unsigned short)39000);
  #line 147 
  ah->ani_state.firstep_level = level;
  #line 148 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                     #line 148 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_set_firstep_level",148,level);
  #line 149 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_set_ofdm_weak_signal_detection(struct ath5k_hw *ah, bool on)
{
  #line 159 
  int m1l[2U] = {127, 50};
  #line 160 
  int m2l[2U] = {127, 40};
  #line 161 
  int m1[2U] = {127, 77};
  #line 162 
  int m2[2U] = {127, 64};
  #line 163 
  int m2cnt[2U] = {31, 16};
  #line 164 
  int m2lcnt[2U] = {63, 48};
  #line 166 
  ;
  #line 166 
  ;
  #line 166 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39020) & 4292886527U) | ((unsigned int)(m1l[(int)on] << 14) & 2080768U),(unsigned short)39020);
  #line 168 
  ;
  #line 168 
  ;
  #line 168 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39020) & 4028628991U) | ((unsigned int)(m2l[(int)on] << 21) & 266338304U),(unsigned short)39020);
  #line 170 
  ;
  #line 170 
  ;
  #line 170 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39016) & 4278321151U) | ((unsigned int)(m1[(int)on] << 17) & 16646144U),(unsigned short)39016);
  #line 172 
  ;
  #line 172 
  ;
  #line 172 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39016) & 2164260863U) | ((unsigned int)(m2[(int)on] << 24) & 2130706432U),(unsigned short)39016);
  #line 174 
  ;
  #line 174 
  ;
  #line 174 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39016) & 4294967264U) | ((unsigned int)m2cnt[(int)on] & 31U),(unsigned short)39016);
  #line 176 
  ;
  #line 176 
  ;
  #line 176 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39020) & 4294951167U) | ((unsigned int)(m2lcnt[(int)on] << 8) & 16128U),(unsigned short)39020);
  #line 179 
  if ((int)on != 0) {
    #line 180 
    ;
    #line 180 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39020) | 1U,(unsigned short)39020);
  }
  else {
    #line 183 
    ;
    #line 183 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39020) & 4294967294U,(unsigned short)39020);
  }
  #line 186 
  ah->ani_state.ofdm_weak_sig = on;
  #line 187 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) {
    #line 187 
    char *tmp_7;
    #line 187 
    if ((int)on != 0) 
                      #line 187 
                      tmp_7 = (char *)"on"; else 
                                                 #line 187 
                                                 tmp_7 = (char *)"off";
    #line 187 
    ;
    #line 187 
    _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_set_ofdm_weak_signal_detection",187,tmp_7);
  }
  #line 188 
  return;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_set_cck_weak_signal_detection(struct ath5k_hw *ah, bool on)
{
  #line 199 
  int val[2U] = {8, 6};
  #line 200 
  ;
  #line 200 
  ;
  #line 200 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)41480) & 4294967232U) | ((unsigned int)val[(int)on] & 63U),(unsigned short)41480);
  #line 202 
  ah->ani_state.cck_weak_sig = on;
  #line 203 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) {
    #line 203 
    char *tmp_0;
    #line 203 
    if ((int)on != 0) 
                      #line 203 
                      tmp_0 = (char *)"on"; else 
                                                 #line 203 
                                                 tmp_0 = (char *)"off";
    #line 203 
    ;
    #line 203 
    _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_set_cck_weak_signal_detection",203,tmp_0);
  }
  #line 204 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static void ath5k_ani_raise_immunity(struct ath5k_hw *ah, struct ath5k_ani_state *as, bool ofdm_trigger)
{
  #line 226 
  int rssi = (int)ewma_beacon_rssi_read(& ah->ah_beacon_rssi_avg);
  #line 228 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) {
    #line 228 
    char *tmp_0;
    #line 228 
    if ((int)ofdm_trigger != 0) 
                                #line 228 
                                tmp_0 = (char *)"ODFM"; else 
                                                             #line 228 
                                                             tmp_0 = (char *)"CCK";
    #line 228 
    ;
    #line 228 
    _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_raise_immunity",228,tmp_0);
  }
  #line 232 
  if (as->noise_imm_level <= 0) {
    #line 233 
    ath5k_ani_set_noise_immunity_level(ah,as->noise_imm_level + 1);
    #line 234 
    return;
  }
  #line 238 
  if ((int)ofdm_trigger != 0 && as->spur_level < ah->ani_state.max_spur_level) {
    #line 240 
    ath5k_ani_set_spur_immunity_level(ah,as->spur_level + 1);
    #line 241 
    return;
  }
  #line 245 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP) {
    #line 246 
    if (as->firstep_level <= 1) 
                                #line 247 
                                ath5k_ani_set_firstep_level(ah,as->firstep_level + 1);
    #line 248 
    return;
  }
  #line 257 
  if (rssi > 40) {
    #line 258 
    if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                       #line 258 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_raise_immunity",258);
    #line 262 
    if ((int)ofdm_trigger != 0 && (int)as->ofdm_weak_sig != 0) {
      #line 263 
      ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)0);
      #line 264 
      ath5k_ani_set_spur_immunity_level(ah,0);
      #line 265 
      return;
    }
    #line 268 
    if (as->firstep_level <= 1) {
      #line 269 
      ath5k_ani_set_firstep_level(ah,as->firstep_level + 1);
      #line 270 
      return;
    }
  }
  else 
    #line 272 
    if (rssi > 7) {
      #line 275 
      if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                         #line 275 
                                                         _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_raise_immunity",275);
      #line 277 
      if ((int)ofdm_trigger != 0 && ! as->ofdm_weak_sig) 
                                                         #line 278 
                                                         ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)1);
      #line 279 
      if (as->firstep_level <= 1) 
                                  #line 280 
                                  ath5k_ani_set_firstep_level(ah,as->firstep_level + 1);
      #line 281 
      return;
    }
    else 
      #line 282 
      if ((ah->ah_current_channel)->band == (unsigned int)NL80211_BAND_2GHZ) {
        #line 285 
        if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                           #line 285 
                                                           _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_raise_immunity",285);
        #line 287 
        if ((int)ofdm_trigger != 0 && (int)as->ofdm_weak_sig != 0) 
                                                                   #line 288 
                                                                   ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)0);
        #line 289 
        if (as->firstep_level > 0) 
                                   #line 290 
                                   ath5k_ani_set_firstep_level(ah,0);
        #line 291 
        return;
      }
  #line 293 
  return;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static void ath5k_ani_lower_immunity(struct ath5k_hw *ah, struct ath5k_ani_state *as)
{
  #line 312 
  int rssi = (int)ewma_beacon_rssi_read(& ah->ah_beacon_rssi_avg);
  #line 314 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                     #line 314 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_lower_immunity",314);
  #line 316 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP) {
    #line 318 
    if (as->firstep_level > 0) {
      #line 319 
      ath5k_ani_set_firstep_level(ah,as->firstep_level + -1);
      #line 320 
      return;
    }
  }
  else 
    #line 324 
    if (! (rssi > 40)) 
      #line 328 
      if (rssi > 7) {
        #line 331 
        if (! as->ofdm_weak_sig) {
          #line 332 
          ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)1);
          #line 334 
          return;
        }
        #line 336 
        if (as->firstep_level > 0) {
          #line 337 
          ath5k_ani_set_firstep_level(ah,as->firstep_level + -1);
          #line 339 
          return;
        }
      }
      else 
        #line 343 
        if (as->firstep_level > 0) {
          #line 344 
          ath5k_ani_set_firstep_level(ah,as->firstep_level + -1);
          #line 346 
          return;
        }
  #line 352 
  if (as->spur_level > 0) {
    #line 353 
    ath5k_ani_set_spur_immunity_level(ah,as->spur_level + -1);
    #line 354 
    return;
  }
  #line 358 
  if (as->noise_imm_level > 0) {
    #line 359 
    ath5k_ani_set_noise_immunity_level(ah,as->noise_imm_level + -1);
    #line 360 
    return;
  }
  #line 362 
  return;
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static int ath5k_hw_ani_get_listen_time(struct ath5k_hw *ah, struct ath5k_ani_state *as)
{
  #line 377 
  int listen;
  #line 376 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 379 
  cif_spin_lock_bh_cc_lock_of_ath_common_0(& common->cc_lock);
  #line 381 
  ath_hw_cycle_counters_update(common);
  #line 382 
  memcpy((void *)(& as->last_cc),(void *)(& common->cc_ani),16UL);
  #line 385 
  listen = ath_hw_get_listen_time(common);
  #line 387 
  cif_spin_unlock_bh_cc_lock_of_ath_common_0(& common->cc_lock);
  #line 389 
  return listen;
}

#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static int ath5k_ani_save_and_clear_phy_errors(struct ath5k_hw *ah, struct ath5k_ani_state *as)
{
  #line 409 
  unsigned int ofdm_err;
  #line 409 
  unsigned int cck_err;
  #line 411 
  if (! ah->ah_capabilities.cap_has_phyerr_counters) 
                                                     #line 412 
                                                     return 0;
  #line 414 
  ofdm_err = ath5k_hw_reg_read(ah,(unsigned short)33068);
  #line 415 
  cck_err = ath5k_hw_reg_read(ah,(unsigned short)33076);
  #line 418 
  ath5k_hw_reg_write(ah,12582412U,(unsigned short)33068);
  #line 420 
  ath5k_hw_reg_write(ah,12582712U,(unsigned short)33076);
  #line 423 
  ofdm_err += 4282384884U;
  #line 424 
  cck_err += 4282384584U;
  #line 428 
  if (ofdm_err == 0U && cck_err == 0U) 
                                       #line 429 
                                       return 0;
  #line 432 
  if (ofdm_err != 0U) {
    #line 433 
    as->ofdm_errors += ofdm_err;
    #line 434 
    as->sum_ofdm_errors += ofdm_err;
  }
  #line 436 
  if (cck_err != 0U) {
    #line 437 
    as->cck_errors += cck_err;
    #line 438 
    as->sum_cck_errors += cck_err;
  }
  #line 440 
  return 1;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static void ath5k_ani_period_restart(struct ath5k_ani_state *as)
{
  #line 453 
  as->last_ofdm_errors = as->ofdm_errors;
  #line 454 
  as->last_cck_errors = as->cck_errors;
  #line 455 
  as->last_listen = as->listen_time;
  #line 457 
  as->ofdm_errors = 0U;
  #line 458 
  as->cck_errors = 0U;
  #line 459 
  as->listen_time = 0U;
  #line 460 
  return;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_calibration(struct ath5k_hw *ah)
{
  #line 478 
  int listen;
  #line 478 
  int ofdm_high;
  #line 478 
  int ofdm_low;
  #line 478 
  int cck_high;
  #line 478 
  int cck_low;
  #line 477 
  struct ath5k_ani_state *as = & ah->ani_state;
  #line 483 
  listen = ath5k_hw_ani_get_listen_time(ah,as);
  #line 484 
  as->listen_time += (unsigned int)listen;
  #line 486 
  if (as->ani_mode != (unsigned int)ATH5K_ANI_MODE_AUTO) 
                                                         #line 487 
                                                         return;
  #line 489 
  ath5k_ani_save_and_clear_phy_errors(ah,as);
  #line 491 
  ofdm_high = (int)((as->listen_time * 500U) / 1000U);
  #line 492 
  cck_high = (int)((as->listen_time * 200U) / 1000U);
  #line 493 
  ofdm_low = (int)((as->listen_time * 200U) / 1000U);
  #line 494 
  cck_low = (int)((as->listen_time * 100U) / 1000U);
  #line 496 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                     #line 496 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_calibration",496,as->listen_time,listen);
  #line 498 
  if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                     #line 498 
                                                     _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_calibration",498,as->ofdm_errors,ofdm_high,as->cck_errors,cck_high);
  #line 502 
  if (as->ofdm_errors > (unsigned int)ofdm_high || as->cck_errors > (unsigned int)cck_high) {
    #line 504 
    bool ofdm_flag = (_Bool)(as->ofdm_errors > (unsigned int)ofdm_high);
    #line 505 
    ath5k_ani_raise_immunity(ah,as,(_Bool)((bool)((int)ofdm_flag) != 0));
    #line 506 
    ath5k_ani_period_restart(as);
  }
  else 
    #line 508 
    if (as->listen_time > 500U) {
      #line 511 
      if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                         #line 511 
                                                         _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_calibration",511,as->ofdm_errors,ofdm_low,as->cck_errors,cck_low);
      #line 515 
      if (as->ofdm_errors <= (unsigned int)ofdm_low && as->cck_errors <= (unsigned int)cck_low) 
        #line 516 
        ath5k_ani_lower_immunity(ah,as);
      #line 518 
      ath5k_ani_period_restart(as);
    }
  #line 520 
  return;
}

#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_mib_intr(struct ath5k_hw *ah)
{
  #line 541 
  struct ath5k_ani_state *as = & ah->ani_state;
  #line 545 
  if (! ah->ah_capabilities.cap_has_phyerr_counters) 
                                                     #line 546 
                                                     return;
  #line 549 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33060);
  #line 550 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33064);
  #line 552 
  if (ah->ani_state.ani_mode != (unsigned int)ATH5K_ANI_MODE_AUTO) 
                                                                   #line 553 
                                                                   return;
  #line 558 
  if (ath5k_ani_save_and_clear_phy_errors(ah,as) == 0) 
                                                       #line 559 
                                                       return;
  #line 561 
  if (as->ofdm_errors > 500U || as->cck_errors > 200U) 
                                                       #line 563 
                                                       cif_tasklet_schedule_0(& ah->ani_tasklet);
  #line 564 
  return;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_phy_error_report(struct ath5k_hw *ah, enum ath5k_phy_error_code phyerr)
{
  #line 579 
  struct ath5k_ani_state *as = & ah->ani_state;
  #line 581 
  if (phyerr == (unsigned int)AR5K_RX_PHY_ERROR_OFDM_TIMING) {
    #line 582 
    (as->ofdm_errors) ++;
    #line 583 
    if (as->ofdm_errors > 500U) 
                                #line 584 
                                cif_tasklet_schedule_0(& ah->ani_tasklet);
  }
  else 
    #line 585 
    if (phyerr == (unsigned int)AR5K_RX_PHY_ERROR_CCK_TIMING) {
      #line 586 
      (as->cck_errors) ++;
      #line 587 
      if (as->cck_errors > 200U) 
                                 #line 588 
                                 cif_tasklet_schedule_0(& ah->ani_tasklet);
    }
  #line 590 
  return;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static void ath5k_enable_phy_err_counters(struct ath5k_hw *ah)
{
  #line 606 
  ath5k_hw_reg_write(ah,12582412U,(unsigned short)33068);
  #line 608 
  ath5k_hw_reg_write(ah,12582712U,(unsigned short)33076);
  #line 610 
  ath5k_hw_reg_write(ah,131072U,(unsigned short)33072);
  #line 611 
  ath5k_hw_reg_write(ah,33554432U,(unsigned short)33080);
  #line 614 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33060);
  #line 615 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33064);
  #line 616 
  return;
}

#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
static void ath5k_disable_phy_err_counters(struct ath5k_hw *ah)
{
  #line 627 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33068);
  #line 628 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33076);
  #line 629 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33072);
  #line 630 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33080);
  #line 633 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33060);
  #line 634 
  ath5k_hw_reg_write(ah,0U,(unsigned short)33064);
  #line 635 
  return;
}

#line 645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_init(struct ath5k_hw *ah, enum ath5k_ani_mode mode)
{
  #line 648 
  if (ah->ah_version <= (unsigned int)AR5K_AR5211) 
                                                   #line 649 
                                                   return;
  #line 651 
  if (mode > (unsigned int)ATH5K_ANI_MODE_AUTO) {
    #line 652 
    if (net_ratelimit() != 0) 
                              #line 652 
                              _ath5k_printk(ah,(char *)"\001",(char *)"ANI mode %d out of range",(unsigned int)mode);
    #line 653 
    return;
  }
  #line 657 
  memset((void *)(& ah->ani_state),0,72UL);
  #line 660 
  if (ah->ah_mac_srev <= 111U) 
                               #line 661 
                               ah->ani_state.max_spur_level = 7; else 
                                                                   #line 663 
                                                                   ah->ani_state.max_spur_level = 2;
  #line 666 
  if (mode == (unsigned int)ATH5K_ANI_MODE_OFF) {
    #line 667 
    if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                       #line 667 
                                                       _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_init",667);
  }
  else 
    #line 668 
    if (mode == (unsigned int)ATH5K_ANI_MODE_MANUAL_LOW) {
      #line 669 
      if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                         #line 669 
                                                         _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_init",669);
      #line 671 
      ath5k_ani_set_noise_immunity_level(ah,0);
      #line 672 
      ath5k_ani_set_spur_immunity_level(ah,0);
      #line 673 
      ath5k_ani_set_firstep_level(ah,0);
      #line 674 
      ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)1);
      #line 675 
      ath5k_ani_set_cck_weak_signal_detection(ah,(_Bool)1);
    }
    else 
      #line 676 
      if (mode == (unsigned int)ATH5K_ANI_MODE_MANUAL_HIGH) {
        #line 677 
        if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                           #line 677 
                                                           _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_init",677);
        #line 679 
        ath5k_ani_set_noise_immunity_level(ah,1);
        #line 681 
        ath5k_ani_set_spur_immunity_level(ah,ah->ani_state.max_spur_level);
        #line 683 
        ath5k_ani_set_firstep_level(ah,2);
        #line 684 
        ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)0);
        #line 685 
        ath5k_ani_set_cck_weak_signal_detection(ah,(_Bool)0);
      }
      else 
        #line 686 
        if (mode == (unsigned int)ATH5K_ANI_MODE_AUTO) {
          #line 687 
          if ((long)((ah->debug.level & 8192U) != 0U) != 0L) 
                                                             #line 687 
                                                             _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_ani_init",687);
          #line 688 
          ath5k_ani_set_noise_immunity_level(ah,0);
          #line 689 
          ath5k_ani_set_spur_immunity_level(ah,0);
          #line 690 
          ath5k_ani_set_firstep_level(ah,0);
          #line 691 
          ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)1);
          #line 692 
          ath5k_ani_set_cck_weak_signal_detection(ah,(_Bool)0);
        }
  #line 699 
  if (mode == (unsigned int)ATH5K_ANI_MODE_AUTO) 
    #line 700 
    if ((int)ah->ah_capabilities.cap_has_phyerr_counters != 0) 
                                                               #line 701 
                                                               ath5k_enable_phy_err_counters(ah);
    else {
      #line 703 
      u32 tmp_0;
      #line 703 
      unsigned int tmp_1;
      #line 703 
      tmp_0 = ath5k_hw_get_rx_filter(ah);
      #line 703 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                       #line 703 
                                                       tmp_1 = 64U; else 
                                                                    #line 703 
                                                                    tmp_1 = 256U;
      #line 703 
      ;
      #line 703 
      ath5k_hw_set_rx_filter(ah,tmp_0 | tmp_1);
    }
  else 
    #line 706 
    if ((int)ah->ah_capabilities.cap_has_phyerr_counters != 0) 
                                                               #line 707 
                                                               ath5k_disable_phy_err_counters(ah);
    else {
      #line 709 
      u32 tmp_2;
      #line 709 
      unsigned int tmp_3;
      #line 709 
      tmp_2 = ath5k_hw_get_rx_filter(ah);
      #line 709 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                       #line 709 
                                                       tmp_3 = 4294967231U; else 
                                                                    #line 709 
                                                                    tmp_3 = 4294967039U;
      #line 709 
      ;
      #line 709 
      ath5k_hw_set_rx_filter(ah,tmp_2 & tmp_3);
    }
  #line 713 
  ah->ani_state.ani_mode = mode;
  #line 714 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ani.c"
void ath5k_ani_print_counters(struct ath5k_hw *ah)
{
  #line 733 
  int tmp;
  #line 734 
  int tmp_1;
  #line 735 
  int tmp_3;
  #line 736 
  int tmp_5;
  #line 733 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 733 
                                                   tmp = 32920; else 
                                                                  #line 733 
                                                                  tmp = 32912;
  #line 733 
  ;
  #line 733 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)tmp));
  #line 734 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 734 
                                                   tmp_1 = 32916; else 
                                                                    #line 734 
                                                                    tmp_1 = 32908;
  #line 734 
  ;
  #line 734 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)tmp_1));
  #line 735 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 735 
                                                   tmp_3 = 32912; else 
                                                                    #line 735 
                                                                    tmp_3 = 32904;
  #line 735 
  ;
  #line 735 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)tmp_3));
  #line 736 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 736 
                                                   tmp_5 = 32924; else 
                                                                    #line 736 
                                                                    tmp_5 = 32916;
  #line 736 
  ;
  #line 736 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)tmp_5));
  #line 739 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33004));
  #line 740 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33008));
  #line 741 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33012));
  #line 742 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33016));
  #line 744 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33068));
  #line 746 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33076));
  #line 748 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33060));
  #line 750 
  printk((char *)"\001",ath5k_hw_reg_read(ah,(unsigned short)33064));
  #line 751 
  return;
}

#line 790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/ani.i.aux"
static void cif_spin_lock_bh_cc_lock_of_ath_common_0(spinlock_t *lock)
{
  #line 793 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 795 
  spin_lock_bh_0(lock);
  #line 796 
  return;
}

#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/ani.i.aux"
static void cif_spin_unlock_bh_cc_lock_of_ath_common_0(spinlock_t *lock)
{
  #line 802 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 804 
  spin_unlock_bh_0(lock);
  #line 805 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/ani.i.aux"
static void cif_tasklet_schedule_0(struct tasklet_struct *t)
{
  #line 812 
  emg_tasklet_schedule(t);
  #line 813 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 *p)
{
  #line 66 
  return *p;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
#line 334 
extern struct paravirt_patch_template pv_ops;
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void)
{
  #line 747 
  unsigned long __ret;
  {
    #line 747 
    unsigned long __edi = __edi;
    #line 747 
    unsigned long __esi = __esi;
    #line 747 
    unsigned long __edx = __edx;
    #line 747 
    unsigned long __ecx = __ecx;
    #line 747 
    unsigned long __eax = __eax;
    #line 747 
    if ((long)(pv_ops.irq.save_fl.func == (void *)0) != 0L) {
      #line 748 
      ldv_inline_asm();
      #line 749 
      ldv_inline_asm();
      #line 750 
      ldv_inline_asm();
      #line 747 
      ;
    }
    {
      #line 747 
      unsigned long __mask;
      #line 751 
      ldv_inline_asm();
      #line 747 
      __mask = 18446744073709551615UL;
      #line 747 
      switch (8UL) {
        #line 747 
        case (unsigned long)1: 
                               #line 747 
        ;
        #line 747 
        __mask = 255UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)2: 
                               #line 747 
        ;
        #line 747 
        __mask = 65535UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)4: 
                               #line 747 
        ;
        #line 747 
        __mask = 4294967295UL;
        #line 747 
        break;
        #line 747 
        default: 
                 #line 747 
        ;
        #line 747 
        break;
      }
      #line 747 
      __ret = __mask & __eax;
    }
    }
  #line 747 
  return __ret;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_restore(unsigned long f)
{
  #line 752 
  unsigned long __edi = __edi;
  #line 752 
  unsigned long __esi = __esi;
  #line 752 
  unsigned long __edx = __edx;
  #line 752 
  unsigned long __ecx = __ecx;
  #line 752 
  unsigned long __eax = __eax;
  #line 752 
  if ((long)(pv_ops.irq.restore_fl.func == (void *)0) != 0L) {
    #line 753 
    ldv_inline_asm();
    #line 754 
    ldv_inline_asm();
    #line 755 
    ldv_inline_asm();
    #line 752 
    ;
  }
  #line 756 
  ldv_inline_asm();
  #line 758 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void)
{
  #line 757 
  unsigned long __edi = __edi;
  #line 757 
  unsigned long __esi = __esi;
  #line 757 
  unsigned long __edx = __edx;
  #line 757 
  unsigned long __ecx = __ecx;
  #line 757 
  unsigned long __eax = __eax;
  #line 757 
  if ((long)(pv_ops.irq.irq_disable.func == (void *)0) != 0L) {
    #line 758 
    ldv_inline_asm();
    #line 759 
    ldv_inline_asm();
    #line 760 
    ldv_inline_asm();
    #line 757 
    ;
  }
  #line 761 
  ldv_inline_asm();
  #line 763 
  return;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_irq_save(void)
{
  #line 767 
  unsigned long f;
  #line 769 
  f = arch_local_save_flags();
  #line 770 
  arch_local_irq_disable();
  #line 771 
  return f;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags)
{
  #line 164 
  return (flags & 512UL) == 0UL;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqflags.h"
#line 32 
void trace_hardirqs_on(void);
#line 33 
#line 33 
void trace_hardirqs_off(void);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void *p)
{
  #line 10 
  return __le16_to_cpup((__le16 *)p);
}

#line 4962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4962 
__le16 ieee80211_generic_frame_duration(struct ieee80211_hw *, struct ieee80211_vif *, enum nl80211_band, size_t, struct ieee80211_rate *);
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 199 
void ath_hw_setbssidmask(struct ath_common *);
#line 1504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1504 
unsigned int ath5k_hw_clocktoh(struct ath5k_hw *ah, unsigned int clock);
#line 1540 
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_coverage_class(struct ath5k_hw *ah, u8 coverage_class);
#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_mcast_filter(struct ath5k_hw *ah, u32 filter0, u32 filter1);
#line 1553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_tsf64(struct ath5k_hw *ah, u64 tsf64);
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_reset_tsf(struct ath5k_hw *ah);
#line 1559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_pcu_init(struct ath5k_hw *ah, enum nl80211_iftype op_mode);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
static unsigned int ack_rates_high[12U] = {[1] = 1U, 1U, 1U, 4U, 4U, 6U, 6U, 8U, 8U, 8U, 8U};
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
int ath5k_hw_get_frame_duration(struct ath5k_hw *ah, enum nl80211_band band, int len, struct ieee80211_rate *rate, bool shortpre)
{
  #line 116 
  int sifs;
  #line 116 
  int preamble;
  #line 116 
  int plcp_bits;
  #line 116 
  int sym_time;
  #line 117 
  int bitrate;
  #line 117 
  int bits;
  #line 117 
  int symbols;
  #line 117 
  int symbol_bits;
  #line 118 
  int dur;
  #line 121 
  if ((unsigned int)ah->ah_bwmode == 0U) {
    #line 122 
    __le16 raw_dur = ieee80211_generic_frame_duration(ah->hw,(struct ieee80211_vif *)0,band,(unsigned long)len,rate);
    #line 126 
    dur = (int)raw_dur;
    #line 127 
    if ((int)shortpre != 0) 
                            #line 128 
                            dur += -96;
    #line 130 
    return dur;
  }
  #line 133 
  bitrate = (int)rate->bitrate;
  #line 134 
  preamble = 20;
  #line 135 
  plcp_bits = 22;
  #line 136 
  sym_time = 4;
  #line 138 
  switch ((int)ah->ah_bwmode) {
    #line 139 
    case 3: 
            #line 139 
    ;
    #line 140 
    sifs = 6;
    #line 141 
    preamble = 14;
    #line 142 
    break;
    #line 143 
    case 2: 
            #line 143 
    ;
    #line 144 
    sifs = 32;
    #line 145 
    preamble *= 2;
    #line 146 
    sym_time *= 2;
    #line 147 
    bitrate = (bitrate + 1) / 2;
    #line 148 
    break;
    #line 149 
    case 1: 
            #line 149 
    ;
    #line 150 
    sifs = 64;
    #line 151 
    preamble *= 4;
    #line 152 
    sym_time *= 4;
    #line 153 
    bitrate = (bitrate + 3) / 4;
    #line 154 
    break;
    #line 155 
    default: 
             #line 155 
    ;
    #line 156 
    sifs = 10;
    #line 157 
    break;
  }
  #line 160 
  bits = (len << 3) + plcp_bits;
  #line 162 
  symbol_bits = bitrate * sym_time;
  #line 163 
  symbols = ((bits * 10 + symbol_bits) + -1) / symbol_bits;
  #line 165 
  dur = (sifs + preamble) + sym_time * symbols;
  #line 167 
  return dur;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
unsigned int ath5k_hw_get_default_slottime(struct ath5k_hw *ah)
{
  #line 178 
  unsigned int slot_time;
  #line 177 
  struct ieee80211_channel *channel = ah->ah_current_channel;
  #line 180 
  switch ((int)ah->ah_bwmode) {
    #line 181 
    case 3: 
            #line 181 
    ;
    #line 182 
    slot_time = 6U;
    #line 183 
    break;
    #line 184 
    case 2: 
            #line 184 
    ;
    #line 185 
    slot_time = 13U;
    #line 186 
    break;
    #line 187 
    case 1: 
            #line 187 
    ;
    #line 188 
    slot_time = 21U;
    #line 189 
    break;
    #line 190 
    case 0: 
            #line 190 
    ;
    #line 191 
    default: 
             #line 191 
    ;
    #line 192 
    slot_time = 9U;
    #line 193 
    if ((unsigned int)channel->hw_value == 1U && ! ah->ah_short_slot) 
      #line 194 
      slot_time = 20U;
    #line 195 
    break;
  }
  #line 198 
  return slot_time;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
unsigned int ath5k_hw_get_default_sifs(struct ath5k_hw *ah)
{
  #line 209 
  unsigned int sifs;
  #line 208 
  struct ieee80211_channel *channel = ah->ah_current_channel;
  #line 211 
  switch ((int)ah->ah_bwmode) {
    #line 212 
    case 3: 
            #line 212 
    ;
    #line 213 
    sifs = 6U;
    #line 214 
    break;
    #line 215 
    case 2: 
            #line 215 
    ;
    #line 216 
    sifs = 32U;
    #line 217 
    break;
    #line 218 
    case 1: 
            #line 218 
    ;
    #line 219 
    sifs = 64U;
    #line 220 
    break;
    #line 221 
    case 0: 
            #line 221 
    ;
    #line 222 
    default: 
             #line 222 
    ;
    #line 223 
    sifs = 10U;
    #line 224 
    if (channel->band == (unsigned int)NL80211_BAND_5GHZ) 
                                                          #line 225 
                                                          sifs = 16U;
    #line 226 
    break;
  }
  #line 229 
  return sifs;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_update_mib_counters(struct ath5k_hw *ah)
{
  #line 248 
  int tmp;
  #line 249 
  int tmp_1;
  #line 250 
  int tmp_3;
  #line 251 
  int tmp_5;
  #line 252 
  int tmp_7;
  #line 245 
  struct ath5k_statistics *stats = & ah->stats;
  #line 248 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 248 
                                                   tmp = 32920; else 
                                                                  #line 248 
                                                                  tmp = 32912;
  #line 248 
  ;
  #line 248 
  stats->ack_fail += ath5k_hw_reg_read(ah,(unsigned short)tmp);
  #line 249 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 249 
                                                   tmp_1 = 32916; else 
                                                                    #line 249 
                                                                    tmp_1 = 32908;
  #line 249 
  ;
  #line 249 
  stats->rts_fail += ath5k_hw_reg_read(ah,(unsigned short)tmp_1);
  #line 250 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 250 
                                                   tmp_3 = 32912; else 
                                                                    #line 250 
                                                                    tmp_3 = 32904;
  #line 250 
  ;
  #line 250 
  stats->rts_ok += ath5k_hw_reg_read(ah,(unsigned short)tmp_3);
  #line 251 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 251 
                                                   tmp_5 = 32924; else 
                                                                    #line 251 
                                                                    tmp_5 = 32916;
  #line 251 
  ;
  #line 251 
  stats->fcs_error += ath5k_hw_reg_read(ah,(unsigned short)tmp_5);
  #line 252 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 252 
                                                   tmp_7 = 32928; else 
                                                                    #line 252 
                                                                    tmp_7 = 32920;
  #line 252 
  ;
  #line 252 
  stats->beacons += ath5k_hw_reg_read(ah,(unsigned short)tmp_7);
  #line 253 
  return;
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
__inline static void ath5k_hw_write_rate_duration(struct ath5k_hw *ah)
{
  #line 279 
  struct ieee80211_rate *rate;
  #line 280 
  unsigned int i;
  #line 282 
  u8 band = (unsigned char)0U;
  #line 285 
  i = 0U;
  #line 285 
  while ((unsigned int)ah->sbands[(int)band].n_bitrates > i) {
    {
      #line 286 
      u32 reg;
      #line 287 
      u16 tx_time;
      #line 289 
      if ((int)ah->ah_ack_bitrate_high != 0) 
                                             #line 290 
                                             rate = ah->sbands[(int)band].bitrates + (unsigned long)ack_rates_high[i];
      else 
        #line 292 
        if (i <= 3U) 
                     #line 293 
                     rate = ah->sbands[(int)band].bitrates; else 
                                                                 #line 296 
                                                                 rate = ah->sbands[(int)band].bitrates + 4U;
      #line 299 
      reg = (unsigned int)(((int)rate->hw_value << 2) + 34560);
      #line 307 
      tx_time = (unsigned short)ath5k_hw_get_frame_duration(ah,(enum nl80211_band)band,10,rate,
                                  (_Bool)0);
      #line 310 
      ath5k_hw_reg_write(ah,(unsigned int)tx_time,(unsigned short)((int)((unsigned short)reg)));
      #line 312 
      if ((rate->flags & 1U) == 0U) 
                                    #line 313 
                                    goto __Cont;
      #line 315 
      tx_time = (unsigned short)ath5k_hw_get_frame_duration(ah,(enum nl80211_band)band,10,rate,
                                    (_Bool)1);
      #line 316 
      ath5k_hw_reg_write(ah,(unsigned int)tx_time,(unsigned short)((int)((unsigned int)((unsigned short)reg) + 16U)));
    }
    #line 285 
    __Cont: 
            #line 285 
    i ++;
  }
  #line 319 
  return;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
static int ath5k_hw_set_ack_timeout(struct ath5k_hw *ah, unsigned int timeout)
{
  #line 329 
  ;
  #line 329 
  if (ath5k_hw_clocktoh(ah,8191U) <= timeout) 
                                              #line 331 
                                              return -22;
  #line 333 
  ;
  #line 333 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)32788) & 4294959104U) | (ath5k_hw_htoclock(ah,timeout) & 8191U),(unsigned short)32788);
  #line 336 
  return 0;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
static int ath5k_hw_set_cts_timeout(struct ath5k_hw *ah, unsigned int timeout)
{
  #line 347 
  ;
  #line 347 
  if (ath5k_hw_clocktoh(ah,8191U) <= timeout) 
                                              #line 349 
                                              return -22;
  #line 351 
  ;
  #line 351 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)32788) & 3758161919U) | ((ath5k_hw_htoclock(ah,timeout) << 16) & 536805376U),(unsigned short)32788);
  #line 354 
  return 0;
}

#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
int ath5k_hw_set_lladdr(struct ath5k_hw *ah, u8 *mac)
{
  #line 373 
  u32 low_id;
  #line 373 
  u32 high_id;
  #line 374 
  u32 pcu_reg;
  #line 372 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 377 
  memcpy((void *)(& common->macaddr),(void *)mac,6UL);
  #line 379 
  pcu_reg = ath5k_hw_reg_read(ah,(unsigned short)32772) & 4294901760U;
  #line 381 
  low_id = get_unaligned_le32((void *)mac);
  #line 382 
  high_id = (unsigned int)get_unaligned_le16((void *)(mac + 4U));
  #line 384 
  ath5k_hw_reg_write(ah,low_id,(unsigned short)32768);
  #line 385 
  ath5k_hw_reg_write(ah,pcu_reg | high_id,(unsigned short)32772);
  #line 387 
  return 0;
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_bssid(struct ath5k_hw *ah)
{
  #line 425 
  int tmp_2;
  #line 425 
  u32 tmp_4;
  #line 425 
  int tmp_3;
  #line 425 
  unsigned int tmp_5;
  #line 400 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 401 
  u16 tim_offset = (unsigned short)0U;
  #line 406 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 407 
                                                   ath_hw_setbssidmask(common);
  #line 412 
  ;
  #line 412 
  ath5k_hw_reg_write(ah,get_unaligned_le32((void *)(& common->curbssid)),(unsigned short)32776);
  #line 415 
  ;
  #line 415 
  ;
  #line 415 
  ath5k_hw_reg_write(ah,(unsigned int)((int)get_unaligned_le16((void *)((u8 *)(& common->curbssid) + 4U)) | (((int)common->curaid << 16) & 1073676288)),(unsigned short)32780);
  #line 420 
  if ((unsigned int)common->curaid == 0U) {
    #line 421 
    ath5k_hw_disable_pspoll(ah);
    #line 422 
    return;
  }
  #line 425 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 425 
                                                   tmp_2 = 32804; else 
                                                                    #line 425 
                                                                    tmp_2 = 32800;
  #line 425 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 425 
                                                   tmp_3 = 32804; else 
                                                                    #line 425 
                                                                    tmp_3 = 32800;
  #line 425 
  ;
  #line 425 
  tmp_4 = ath5k_hw_reg_read(ah,(unsigned short)tmp_3);
  #line 425 
  if ((unsigned int)tim_offset != 0U) 
                                      #line 425 
                                      tmp_5 = (unsigned int)(((int)tim_offset + 4) << 16) & 8323072U; else 
                                                                    #line 425 
                                                                    tmp_5 = 0U;
  #line 425 
  ;
  #line 425 
  ath5k_hw_reg_write(ah,(tmp_4 & 4286644223U) | tmp_5,(unsigned short)tmp_2);
  #line 428 
  ath5k_hw_enable_pspoll(ah,(u8 *)0U,(unsigned short)0);
  #line 429 
  return;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_bssid_mask(struct ath5k_hw *ah, u8 *mask)
{
  #line 449 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 453 
  memcpy((void *)(& common->bssidmask),(void *)mask,6UL);
  #line 454 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 455 
                                                   ath_hw_setbssidmask(common);
  #line 456 
  return;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_mcast_filter(struct ath5k_hw *ah, u32 filter0, u32 filter1)
{
  #line 467 
  int tmp;
  #line 468 
  int tmp_0;
  #line 467 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 467 
                                                   tmp = 32848; else 
                                                                  #line 467 
                                                                  tmp = 32832;
  #line 467 
  ;
  #line 467 
  ;
  #line 467 
  ath5k_hw_reg_write(ah,filter0,(unsigned short)tmp);
  #line 468 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 468 
                                                   tmp_0 = 32852; else 
                                                                    #line 468 
                                                                    tmp_0 = 32836;
  #line 468 
  ;
  #line 468 
  ;
  #line 468 
  ath5k_hw_reg_write(ah,filter1,(unsigned short)tmp_0);
  #line 469 
  return;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
u32 ath5k_hw_get_rx_filter(struct ath5k_hw *ah)
{
  #line 484 
  u32 data;
  #line 486 
  int tmp;
  #line 484 
  u32 filter = 0U;
  #line 486 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 486 
                                                   tmp = 32844; else 
                                                                  #line 486 
                                                                  tmp = 32828;
  #line 486 
  ;
  #line 486 
  filter = ath5k_hw_reg_read(ah,(unsigned short)tmp);
  #line 489 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) {
    #line 490 
    data = ath5k_hw_reg_read(ah,(unsigned short)33036);
    #line 492 
    if ((data & 32U) != 0U) {
      #line 493 
      unsigned int tmp_0;
      #line 493 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                       #line 493 
                                                       tmp_0 = 128U; else 
                                                                    #line 493 
                                                                    tmp_0 = 512U;
      #line 493 
      filter = tmp_0 | filter;
    }
    #line 494 
    if ((data & 33685504U) != 0U) {
      #line 495 
      unsigned int tmp_1;
      #line 495 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                       #line 495 
                                                       tmp_1 = 64U; else 
                                                                    #line 495 
                                                                    tmp_1 = 256U;
      #line 495 
      filter = tmp_1 | filter;
    }
  }
  #line 498 
  return filter;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_rx_filter(struct ath5k_hw *ah, u32 filter)
{
  #line 539 
  int tmp_5;
  #line 513 
  u32 data = 0U;
  #line 516 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) {
    #line 517 
    unsigned int tmp;
    #line 519 
    unsigned int tmp_0;
    #line 517 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                     #line 517 
                                                     tmp = 128U; else 
                                                                   #line 517 
                                                                   tmp = 512U;
    #line 517 
    ;
    #line 517 
    if ((tmp & filter) != 0U) 
                              #line 518 
                              data |= 32U;
    #line 519 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                     #line 519 
                                                     tmp_0 = 64U; else 
                                                                    #line 519 
                                                                    tmp_0 = 256U;
    #line 519 
    ;
    #line 519 
    if ((tmp_0 & filter) != 0U) 
                                #line 520 
                                data |= 33685504U;
  }
  #line 526 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 526 
    unsigned int tmp_2;
    #line 526 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                     #line 526 
                                                     tmp_2 = 128U; else 
                                                                    #line 526 
                                                                    tmp_2 = 512U;
    #line 526 
    ;
    #line 526 
    if ((tmp_2 & filter) != 0U) {
      #line 528 
      unsigned int tmp_1;
      #line 528 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                       #line 528 
                                                       tmp_1 = 4294967167U; else 
                                                                    #line 528 
                                                                    tmp_1 = 4294966783U;
      #line 528 
      filter = tmp_1 & filter;
      #line 529 
      filter |= 32U;
    }
  }
  #line 533 
  if (data != 0U) {
    #line 534 
    ;
    #line 534 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)52) | 8U,(unsigned short)52);
  }
  else {
    #line 536 
    ;
    #line 536 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)52) & 4294967287U,(unsigned short)52);
  }
  #line 539 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 539 
                                                   tmp_5 = 32844; else 
                                                                    #line 539 
                                                                    tmp_5 = 32828;
  #line 539 
  ;
  #line 539 
  ;
  #line 539 
  ath5k_hw_reg_write(ah,filter & 255U,(unsigned short)tmp_5);
  #line 542 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 543 
                                                   ath5k_hw_reg_write(ah,data,(unsigned short)33036);
  #line 544 
  return;
}

#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
u64 ath5k_hw_get_tsf64(struct ath5k_hw *ah)
{
  #line 563 
  u32 tsf_lower;
  #line 563 
  u32 tsf_upper1;
  #line 563 
  u32 tsf_upper2;
  #line 564 
  int i;
  #line 565 
  unsigned long flags;
  #line 582 
  int tmp;
  {
    #line 568 
    unsigned long __dummy;
    #line 568 
    unsigned long __dummy2;
    }
  #line 568 
  flags = arch_local_irq_save();
  #line 568 
  trace_hardirqs_off();
  #line 582 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 582 
                                                   tmp = 32880; else 
                                                                  #line 582 
                                                                  tmp = 32848;
  #line 582 
  ;
  #line 582 
  tsf_upper1 = ath5k_hw_reg_read(ah,(unsigned short)tmp);
  #line 583 
  i = 0;
  #line 583 
  while (i <= 9) {
    {
      #line 584 
      int tmp_0;
      #line 585 
      int tmp_1;
      #line 584 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 584 
                                                       tmp_0 = 32876; else 
                                                                    #line 584 
                                                                    tmp_0 = 32844;
      #line 584 
      ;
      #line 584 
      tsf_lower = ath5k_hw_reg_read(ah,(unsigned short)tmp_0);
      #line 585 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 585 
                                                       tmp_1 = 32880; else 
                                                                    #line 585 
                                                                    tmp_1 = 32848;
      #line 585 
      ;
      #line 585 
      tsf_upper2 = ath5k_hw_reg_read(ah,(unsigned short)tmp_1);
      #line 586 
      if (tsf_upper2 == tsf_upper1) 
                                    #line 587 
                                    break;
      #line 588 
      tsf_upper1 = tsf_upper2;
    }
    #line 583 
    i ++;
  }
  {
    #line 591 
    unsigned long __dummy_2;
    #line 591 
    unsigned long __dummy2_2;
    }
  #line 591 
  if (arch_irqs_disabled_flags(flags) != 0) {
    {
      #line 591 
      unsigned long __dummy_0;
      #line 591 
      unsigned long __dummy2_0;
      }
    #line 591 
    arch_local_irq_restore(flags);
    #line 591 
    trace_hardirqs_off();
  }
  else {
    #line 591 
    trace_hardirqs_on();
    {
      #line 591 
      unsigned long __dummy_1;
      #line 591 
      unsigned long __dummy2_1;
      }
    #line 591 
    arch_local_irq_restore(flags);
  }
  {
    #line 593 
    int __ret_warn_on = i == 10;
    #line 593 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 594 
      ldv_inline_asm();
      #line 595 
      ldv_inline_asm();
    }
    #line 593 
    long tmp_4 = (long)(__ret_warn_on != 0);
  }
  #line 595 
  return ((unsigned long long)tsf_upper1 << 32) | (unsigned long long)tsf_lower;
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_tsf64(struct ath5k_hw *ah, u64 tsf64)
{
  #line 610 
  int tmp;
  #line 611 
  int tmp_0;
  #line 610 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 610 
                                                   tmp = 32876; else 
                                                                  #line 610 
                                                                  tmp = 32844;
  #line 610 
  ;
  #line 610 
  ;
  #line 610 
  ath5k_hw_reg_write(ah,(unsigned int)tsf64,(unsigned short)tmp);
  #line 611 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 611 
                                                   tmp_0 = 32880; else 
                                                                    #line 611 
                                                                    tmp_0 = 32848;
  #line 611 
  ;
  #line 611 
  ;
  #line 611 
  ath5k_hw_reg_write(ah,(unsigned int)(tsf64 >> 32),(unsigned short)tmp_0);
  #line 612 
  return;
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_reset_tsf(struct ath5k_hw *ah)
{
  #line 623 
  u32 val;
  #line 625 
  int tmp;
  #line 633 
  int tmp_1;
  #line 634 
  int tmp_2;
  #line 625 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 625 
                                                   tmp = 32804; else 
                                                                  #line 625 
                                                                  tmp = 32800;
  #line 625 
  ;
  #line 625 
  val = ath5k_hw_reg_read(ah,(unsigned short)tmp) | 16777216U;
  #line 633 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 633 
                                                   tmp_1 = 32804; else 
                                                                    #line 633 
                                                                    tmp_1 = 32800;
  #line 633 
  ;
  #line 633 
  ;
  #line 633 
  ath5k_hw_reg_write(ah,val,(unsigned short)tmp_1);
  #line 634 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 634 
                                                   tmp_2 = 32804; else 
                                                                    #line 634 
                                                                    tmp_2 = 32800;
  #line 634 
  ;
  #line 634 
  ;
  #line 634 
  ath5k_hw_reg_write(ah,val,(unsigned short)tmp_2);
  #line 635 
  return;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_init_beacon_timers(struct ath5k_hw *ah, u32 next_beacon, u32 interval)
{
  #line 649 
  u32 timer1;
  #line 649 
  u32 timer2;
  #line 649 
  u32 timer3;
  #line 696 
  int tmp_3;
  #line 697 
  int tmp_4;
  #line 698 
  int tmp_5;
  #line 699 
  int tmp_6;
  #line 705 
  int tmp_7;
  #line 654 
  switch ((unsigned int)ah->opmode) {
    #line 669 
    u32 tmp;
    #line 669 
    unsigned int tmp_0;
    #line 655 
    case (unsigned int)6: 
                          #line 655 
    ;
    #line 656 
    case (unsigned int)2: 
                          #line 656 
    ;
    #line 661 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) {
      #line 662 
      timer1 = 4294967295U;
      #line 663 
      timer2 = 4294967295U;
    }
    else {
      #line 665 
      timer1 = 65535U;
      #line 666 
      timer2 = 524287U;
    }
    #line 669 
    tmp = ath5k_hw_reg_read(ah,(unsigned short)32772);
    #line 669 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 669 
                                                     tmp_0 = 4292870143U; else 
                                                                    #line 669 
                                                                    tmp_0 = 4293918719U;
    #line 669 
    ;
    #line 669 
    ath5k_hw_reg_write(ah,tmp & tmp_0,(unsigned short)32772);
    #line 670 
    break;
    #line 671 
    case (unsigned int)1: 
                          #line 671 
    ;
    #line 672 
    ;
    #line 672 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)48) | 2048U,(unsigned short)48);
    #line 674 
    default: 
             #line 674 
    ;
    #line 678 
    timer1 = (next_beacon + 4294967294U) << 3;
    #line 679 
    timer2 = (next_beacon + 4294967286U) << 3;
    #line 680 
    break;
  }
  #line 686 
  timer3 = next_beacon + 1U;
  #line 692 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_AP || ah->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 694 
    int tmp_2;
    #line 694 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 694 
                                                     tmp_2 = 32812; else 
                                                                    #line 694 
                                                                    tmp_2 = 32808;
    #line 694 
    ;
    #line 694 
    ath5k_hw_reg_write(ah,0U,(unsigned short)tmp_2);
  }
  #line 696 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 696 
                                                   tmp_3 = 32812; else 
                                                                    #line 696 
                                                                    tmp_3 = 32808;
  #line 696 
  ;
  #line 696 
  ;
  #line 696 
  ath5k_hw_reg_write(ah,next_beacon,(unsigned short)tmp_3);
  #line 697 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 697 
                                                   tmp_4 = 32816; else 
                                                                    #line 697 
                                                                    tmp_4 = 32812;
  #line 697 
  ;
  #line 697 
  ;
  #line 697 
  ath5k_hw_reg_write(ah,timer1,(unsigned short)tmp_4);
  #line 698 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 698 
                                                   tmp_5 = 32820; else 
                                                                    #line 698 
                                                                    tmp_5 = 32816;
  #line 698 
  ;
  #line 698 
  ;
  #line 698 
  ath5k_hw_reg_write(ah,timer2,(unsigned short)tmp_5);
  #line 699 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 699 
                                                   tmp_6 = 32824; else 
                                                                    #line 699 
                                                                    tmp_6 = 32820;
  #line 699 
  ;
  #line 699 
  ;
  #line 699 
  ath5k_hw_reg_write(ah,timer3,(unsigned short)tmp_6);
  #line 702 
  if ((interval & 16777216U) != 0U) 
                                    #line 703 
                                    ath5k_hw_reset_tsf(ah);
  #line 705 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 705 
                                                   tmp_7 = 32804; else 
                                                                    #line 705 
                                                                    tmp_7 = 32800;
  #line 705 
  ;
  #line 705 
  ;
  #line 705 
  ath5k_hw_reg_write(ah,interval & 8454143U,(unsigned short)tmp_7);
  #line 714 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 715 
                                                   ath5k_hw_reg_write(ah,262144U,(unsigned short)28); else 
                                                                    #line 717 
                                                                    ath5k_hw_reg_write(ah,262144U,(unsigned short)128);
  #line 722 
  ;
  #line 722 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) & 4294705151U,(unsigned short)32772);
  #line 723 
  return;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
__inline static bool ath5k_check_timer_win(int a, int b, int window, int intval)
{
  #line 748 
  if (((b - a == window || a - b == intval - window) || (a | 65536) - b == intval - window) || (b | 65536) - a == window) 
    #line 752 
    return (_Bool)1;
  #line 753 
  return (_Bool)0;
}

#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
bool ath5k_hw_check_beacon_timers(struct ath5k_hw *ah, int intval)
{
  #line 798 
  unsigned int nbtt;
  #line 798 
  unsigned int atim;
  #line 798 
  unsigned int dma;
  #line 800 
  int tmp;
  #line 801 
  int tmp_0;
  #line 802 
  int tmp_1;
  #line 800 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 800 
                                                   tmp = 32812; else 
                                                                  #line 800 
                                                                  tmp = 32808;
  #line 800 
  ;
  #line 800 
  nbtt = ath5k_hw_reg_read(ah,(unsigned short)tmp);
  #line 801 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 801 
                                                   tmp_0 = 32824; else 
                                                                    #line 801 
                                                                    tmp_0 = 32820;
  #line 801 
  ;
  #line 801 
  atim = ath5k_hw_reg_read(ah,(unsigned short)tmp_0);
  #line 802 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 802 
                                                   tmp_1 = 32816; else 
                                                                    #line 802 
                                                                    tmp_1 = 32812;
  #line 802 
  ;
  #line 802 
  dma = ath5k_hw_reg_read(ah,(unsigned short)tmp_1) >> 3;
  #line 808 
  if ((int)ath5k_check_timer_win((int)nbtt,(int)atim,1,intval) != 0) {
    #line 808 
    if ((int)ath5k_check_timer_win((int)dma,(int)nbtt,2,intval) != 0) 
      #line 811 
      return (_Bool)1;
  }
  #line 812 
  return (_Bool)0;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_set_coverage_class(struct ath5k_hw *ah, u8 coverage_class)
{
  #line 826 
  int slot_time = (int)(ath5k_hw_get_default_slottime(ah) + (unsigned int)((int)coverage_class * 3));
  #line 827 
  int ack_timeout = (int)(ath5k_hw_get_default_sifs(ah) + (unsigned int)slot_time);
  #line 828 
  int cts_timeout = ack_timeout;
  #line 830 
  ath5k_hw_set_ifs_intervals(ah,(unsigned int)slot_time);
  #line 831 
  ath5k_hw_set_ack_timeout(ah,(unsigned int)ack_timeout);
  #line 832 
  ath5k_hw_set_cts_timeout(ah,(unsigned int)cts_timeout);
  #line 834 
  ah->ah_coverage_class = coverage_class;
  #line 835 
  return;
}

#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_start_rx_pcu(struct ath5k_hw *ah)
{
  #line 853 
  int tmp;
  #line 853 
  u32 tmp_1;
  #line 853 
  int tmp_0;
  #line 853 
  unsigned int tmp_2;
  #line 853 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 853 
                                                   tmp = 32872; else 
                                                                  #line 853 
                                                                  tmp = 32840;
  #line 853 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 853 
                                                   tmp_0 = 32872; else 
                                                                    #line 853 
                                                                    tmp_0 = 32840;
  #line 853 
  ;
  #line 853 
  tmp_1 = ath5k_hw_reg_read(ah,(unsigned short)tmp_0);
  #line 853 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 853 
                                                   tmp_2 = 4294967231U; else 
                                                                    #line 853 
                                                                    tmp_2 = 4294967263U;
  #line 853 
  ;
  #line 853 
  ath5k_hw_reg_write(ah,tmp_1 & tmp_2,(unsigned short)tmp);
  #line 854 
  return;
}

#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_stop_rx_pcu(struct ath5k_hw *ah)
{
  #line 865 
  int tmp;
  #line 865 
  u32 tmp_1;
  #line 865 
  int tmp_0;
  #line 865 
  unsigned int tmp_2;
  #line 865 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 865 
                                                   tmp = 32872; else 
                                                                  #line 865 
                                                                  tmp = 32840;
  #line 865 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 865 
                                                   tmp_0 = 32872; else 
                                                                    #line 865 
                                                                    tmp_0 = 32840;
  #line 865 
  ;
  #line 865 
  tmp_1 = ath5k_hw_reg_read(ah,(unsigned short)tmp_0);
  #line 865 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 865 
                                                   tmp_2 = 64U; else 
                                                                  #line 865 
                                                                  tmp_2 = 32U;
  #line 865 
  ;
  #line 865 
  ath5k_hw_reg_write(ah,tmp_1 | tmp_2,(unsigned short)tmp);
  #line 866 
  return;
}

#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
int ath5k_hw_set_opmode(struct ath5k_hw *ah, enum nl80211_iftype op_mode)
{
  #line 879 
  u32 pcu_reg;
  #line 879 
  u32 beacon_reg;
  #line 879 
  u32 low_id;
  #line 879 
  u32 high_id;
  #line 885 
  unsigned int tmp_2;
  #line 878 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 881 
  if ((long)((ah->debug.level & 4U) != 0U) != 0L) {
    #line 881 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 881 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_set_opmode",881,(unsigned int)op_mode);
  }
  #line 884 
  pcu_reg = ath5k_hw_reg_read(ah,(unsigned short)32772) & 4294901760U;
  #line 885 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 885 
                                                   tmp_2 = 4025024511U; else 
                                                                    #line 885 
                                                                    tmp_2 = 4026335231U;
  #line 885 
  pcu_reg = tmp_2 & pcu_reg;
  #line 890 
  beacon_reg = 0U;
  #line 892 
  switch ((unsigned int)op_mode) {
    #line 913 
    unsigned int tmp_5;
    #line 918 
    unsigned int tmp_6;
    #line 893 
    case (unsigned int)1: 
                          #line 893 
    ;
    #line 894 
    pcu_reg |= 268566528U;
    #line 895 
    beacon_reg |= 1U;
    #line 896 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 897 
                                                     pcu_reg |= 1048576U;
    else {
      #line 899 
      ;
      #line 899 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)20) | 32U,(unsigned short)20);
    }
    #line 900 
    break;
    #line 902 
    case (unsigned int)3: 
                          #line 902 
    ;
    #line 903 
    case (unsigned int)7: 
                          #line 903 
    ;
    #line 904 
    pcu_reg |= 268500992U;
    #line 905 
    beacon_reg = beacon_reg;
    #line 906 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 907 
                                                     pcu_reg |= 1048576U;
    else {
      #line 909 
      ;
      #line 909 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)20) & 4294967263U,(unsigned short)20);
    }
    #line 910 
    break;
    #line 912 
    case (unsigned int)2: 
                          #line 912 
    ;
    #line 913 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 913 
                                                     tmp_5 = 268697600U; else 
                                                                    #line 913 
                                                                    tmp_5 = 268435456U;
    #line 913 
    pcu_reg = tmp_5 | pcu_reg;
    #line 917 
    case (unsigned int)6: 
                          #line 917 
    ;
    #line 918 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 918 
                                                     tmp_6 = 269484032U; else 
                                                                    #line 918 
                                                                    tmp_6 = 268435456U;
    #line 918 
    pcu_reg = tmp_6 | pcu_reg;
    #line 921 
    break;
    #line 923 
    default: 
             #line 923 
    ;
    #line 924 
    return -22;
  }
  #line 930 
  low_id = get_unaligned_le32((void *)(& common->macaddr));
  #line 931 
  high_id = (unsigned int)get_unaligned_le16((void *)((u8 *)(& common->macaddr) + 4U));
  #line 932 
  ath5k_hw_reg_write(ah,low_id,(unsigned short)32768);
  #line 933 
  ath5k_hw_reg_write(ah,pcu_reg | high_id,(unsigned short)32772);
  #line 938 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 939 
                                                   ath5k_hw_reg_write(ah,beacon_reg,(unsigned short)40);
  #line 941 
  return 0;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/pcu.c"
void ath5k_hw_pcu_init(struct ath5k_hw *ah, enum nl80211_iftype op_mode)
{
  #line 957 
  ath5k_hw_set_bssid(ah);
  #line 960 
  ath5k_hw_set_opmode(ah,op_mode);
  #line 966 
  if (ah->ah_version == (unsigned int)AR5K_AR5212 && (unsigned int)ah->nvifs != 0U) 
    #line 968 
    ath5k_hw_write_rate_duration(ah);
  #line 978 
  ath5k_hw_reg_write(ah,1921U,(unsigned short)32792);
  #line 984 
  if (ah->ah_mac_srev > 119U) {
    #line 985 
    ath5k_hw_reg_write(ah,65706U,(unsigned short)33048);
    #line 986 
    ath5k_hw_reg_write(ah,12816U,(unsigned short)33052);
  }
  #line 990 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 991 
                                                   ath5k_hw_reg_write(ah,82U,(unsigned short)33032);
  #line 999 
  if ((unsigned int)ah->ah_coverage_class != 0U) 
                                                 #line 1000 
                                                 ath5k_hw_set_coverage_class(ah,(unsigned char)((int)ah->ah_coverage_class));
  #line 1003 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) {
    #line 1004 
    u32 val = 50331648U;
    #line 1005 
    if ((int)ah->ah_ack_bitrate_high != 0) {
      #line 1006 
      ;
      #line 1006 
      ;
      #line 1006 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) & ~ val,(unsigned short)32772);
    }
    else {
      #line 1008 
      ;
      #line 1008 
      ;
      #line 1008 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32772) | val,(unsigned short)32772);
    }
  }
  #line 1010 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_10420 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_10422 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_10424 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 916  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_lock_bh_block_of_ath5k_hw_0(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_lock_bh_cc_lock_of_ath_common_1(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_unlock_bh_block_of_ath5k_hw_0(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_unlock_bh_cc_lock_of_ath_common_1(spinlock_t *lock);
#line 26 
#line 902 
static void cif_mutex_lock_lock_of_ath5k_hw_0(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_mutex_unlock_lock_of_ath5k_hw_0(struct mutex *lock);
#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath.h"
#line 200 
void ath_key_delete(struct ath_common *, struct ieee80211_key_conf *);
#line 201 
#line 201 
int ath_key_config(struct ath_common *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb)
{
  #line 64 
  int __ret_warn_on;
  #line 61 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 62 
  u16 qnum = skb_get_queue_mapping(skb);
  #line 64 
  __ret_warn_on = (int)((unsigned short)ah->ah_capabilities.cap_queues.q_tx_num) <= (int)qnum;
  #line 64 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 65 
    ldv_inline_asm();
    #line 66 
    ldv_inline_asm();
  }
  #line 64 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 65 
    ieee80211_free_txskb(hw,skb);
    #line 66 
    return;
  }
  #line 69 
  ath5k_tx_queue(hw,skb,& ah->txqs[(int)qnum],control);
  #line 70 
  return;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_add_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 77 
  int ret;
  #line 76 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 78 
  struct ath5k_vif *avf = (struct ath5k_vif *)(& vif->drv_priv);
  #line 80 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 82 
  if ((vif->type == (unsigned int)NL80211_IFTYPE_AP || vif->type == (unsigned int)NL80211_IFTYPE_ADHOC) && (int)ah->num_ap_vifs + (int)ah->num_adhoc_vifs > 3) {
    #line 85 
    ret = -48;
    #line 86 
    goto end;
  }
  #line 94 
  if ((unsigned int)ah->num_adhoc_vifs != 0U || (unsigned int)ah->nvifs != 0U && vif->type == (unsigned int)NL80211_IFTYPE_ADHOC) {
    #line 96 
    if (net_ratelimit() != 0) 
                              #line 96 
                              _ath5k_printk(ah,(char *)"\001",(char *)"Only one single ad-hoc interface is allowed.\n");
    #line 97 
    ret = -48;
    #line 98 
    goto end;
  }
  #line 101 
  switch ((unsigned int)vif->type) {
    #line 102 
    case (unsigned int)3: 
                          #line 102 
    ;
    #line 103 
    case (unsigned int)2: 
                          #line 103 
    ;
    #line 104 
    case (unsigned int)1: 
                          #line 104 
    ;
    #line 105 
    case (unsigned int)7: 
                          #line 105 
    ;
    #line 106 
    avf->opmode = vif->type;
    #line 107 
    break;
    #line 108 
    default: 
             #line 108 
    ;
    #line 109 
    ret = -95;
    #line 110 
    goto end;
  }
  #line 113 
  ah->nvifs = (u16)((int)ah->nvifs + 1);
  #line 114 
  if ((long)((ah->debug.level & 4U) != 0U) != 0L) {
    #line 114 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 114 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_add_interface",114,(unsigned int)avf->opmode);
  }
  #line 117 
  if ((avf->opmode == (unsigned int)NL80211_IFTYPE_AP || avf->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) || avf->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) {
    #line 123 
    void *__mptr;
    #line 120 
    int slot;
    {
      #line 122 
      int __ret_warn_on = list_empty_0(& ah->bcbuf) != 0;
      #line 122 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 123 
        ldv_inline_asm();
        #line 124 
        ldv_inline_asm();
      }
      #line 122 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 123 
    __mptr = (void *)ah->bcbuf.next;
    #line 123 
    avf->bbuf = ((struct ath5k_buf *)__mptr);
    #line 125 
    list_del_0(& (avf->bbuf)->list);
    #line 127 
    avf->bslot = 0;
    #line 128 
    slot = 0;
    #line 128 
    while (slot <= 3) {
      #line 129 
      if (ah->bslot[slot] == (struct ieee80211_vif *)0) {
        #line 130 
        avf->bslot = slot;
        #line 131 
        break;
      }
      #line 128 
      slot ++;
    }
    #line 134 
    if ((long)(ah->bslot[avf->bslot] != (struct ieee80211_vif *)0) != 0L) {
      #line 135 
      ldv_inline_asm();
      #line 136 
      ldv_inline_asm();
      #line 137 
      ldv_inline_asm();
      #line 134 
      ;
    }
    #line 135 
    ah->bslot[avf->bslot] = vif;
    #line 136 
    if (avf->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                        #line 137 
                                                        ah->num_ap_vifs = (u16)((int)ah->num_ap_vifs + 1);
    else 
      #line 138 
      if (avf->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                             #line 139 
                                                             ah->num_adhoc_vifs = (u16)((int)ah->num_adhoc_vifs + 1);
      else 
        #line 140 
        if (avf->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
                                                                    #line 141 
                                                                    ah->num_mesh_vifs = (u16)((int)ah->num_mesh_vifs + 1);
  }
  #line 147 
  ath5k_hw_set_lladdr(ah,(u8 *)(& vif->addr));
  #line 149 
  ath5k_update_bssid_mask_and_opmode(ah,vif);
  #line 150 
  ret = 0;
  #line 151 
  end: 
       #line 151 
  ;
  #line 152 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 153 
  return ret;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_remove_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 163 
  unsigned int i;
  #line 161 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 162 
  struct ath5k_vif *avf = (struct ath5k_vif *)(& vif->drv_priv);
  #line 165 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 166 
  ah->nvifs = (u16)((int)ah->nvifs - 1);
  #line 168 
  if (avf->bbuf != (struct ath5k_buf *)0) {
    #line 169 
    ath5k_txbuf_free_skb(ah,avf->bbuf);
    #line 170 
    list_add_tail_0(& (avf->bbuf)->list,& ah->bcbuf);
    #line 171 
    i = 0U;
    #line 171 
    while (i <= 3U) {
      #line 172 
      if (ah->bslot[i] == vif) {
        #line 173 
        ah->bslot[i] = (struct ieee80211_vif *)0;
        #line 174 
        break;
      }
      #line 171 
      i ++;
    }
    #line 177 
    avf->bbuf = (struct ath5k_buf *)0;
  }
  #line 179 
  if (avf->opmode == (unsigned int)NL80211_IFTYPE_AP) 
                                                      #line 180 
                                                      ah->num_ap_vifs = (u16)((int)ah->num_ap_vifs - 1);
  else 
    #line 181 
    if (avf->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                           #line 182 
                                                           ah->num_adhoc_vifs = (u16)((int)ah->num_adhoc_vifs - 1);
    else 
      #line 183 
      if (avf->opmode == (unsigned int)NL80211_IFTYPE_MESH_POINT) 
                                                                  #line 184 
                                                                  ah->num_mesh_vifs = (u16)((int)ah->num_mesh_vifs - 1);
  #line 186 
  ath5k_update_bssid_mask_and_opmode(ah,(struct ieee80211_vif *)0);
  #line 187 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 188 
  return;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_config(struct ieee80211_hw *hw, u32 changed)
{
  #line 200 
  int i;
  #line 197 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 198 
  struct ieee80211_conf *conf = & hw->conf;
  #line 199 
  int ret = 0;
  #line 202 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 204 
  if ((changed & 64U) != 0U) {
    #line 205 
    ret = ath5k_chan_set(ah,& conf->chandef);
    #line 206 
    if (ret < 0) 
                 #line 207 
                 goto unlock;
  }
  #line 210 
  if ((changed & 32U) != 0U && ah->ah_txpower.txp_requested != conf->power_level) {
    #line 212 
    ah->ah_txpower.txp_requested = conf->power_level;
    #line 215 
    ath5k_hw_set_txpower_limit(ah,(unsigned char)((int)((unsigned int)((unsigned char)conf->power_level) * 2U)));
  }
  #line 218 
  if ((changed & 128U) != 0U) {
    #line 219 
    ah->ah_retry_long = conf->long_frame_max_tx_count;
    #line 220 
    ah->ah_retry_short = conf->short_frame_max_tx_count;
    #line 222 
    i = 0;
    #line 222 
    while ((int)ah->ah_capabilities.cap_queues.q_tx_num > i) {
      #line 223 
      ath5k_hw_set_tx_retry_limits(ah,(unsigned int)i);
      #line 222 
      i ++;
    }
  }
  #line 243 
  ath5k_hw_set_antenna_mode(ah,(unsigned char)((int)ah->ah_ant_mode));
  #line 245 
  unlock: 
          #line 245 
  ;
  #line 246 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 247 
  return ret;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_bss_info_changed(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_bss_conf *bss_conf, u32 changes)
{
  #line 255 
  struct ath5k_vif *avf = (struct ath5k_vif *)(& vif->drv_priv);
  #line 256 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 257 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 259 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 261 
  if ((changes & 128U) != 0U) {
    #line 263 
    memcpy((void *)(& common->curbssid),(void *)bss_conf->bssid,6UL);
    #line 264 
    common->curaid = (unsigned short)0U;
    #line 265 
    ath5k_hw_set_bssid(ah);
  }
  #line 268 
  if ((changes & 64U) != 0U) 
                             #line 269 
                             ah->bintval = (unsigned int)bss_conf->beacon_int;
  #line 271 
  if ((changes & 8U) != 0U) {
    #line 272 
    int slot_time;
    #line 274 
    ah->ah_short_slot = bss_conf->use_short_slot;
    #line 275 
    slot_time = (int)(ath5k_hw_get_default_slottime(ah) + (unsigned int)((int)ah->ah_coverage_class * 3));
    #line 277 
    ath5k_hw_set_ifs_intervals(ah,(unsigned int)slot_time);
  }
  #line 280 
  if ((changes & 1U) != 0U) {
    #line 289 
    unsigned int tmp_1;
    #line 281 
    avf->assoc = bss_conf->assoc;
    #line 282 
    if ((int)bss_conf->assoc != 0) 
                                   #line 283 
                                   ah->assoc = bss_conf->assoc; else 
                                                                  #line 285 
                                                                  ah->assoc = ath5k_any_vif_assoc(ah);
    #line 287 
    if (ah->opmode == (unsigned int)NL80211_IFTYPE_STATION) 
                                                            #line 288 
                                                            ath5k_set_beacon_filter(hw,(_Bool)((bool)((int)ah->assoc) != 0));
    #line 289 
    if ((int)ah->assoc != 0) 
                             #line 289 
                             tmp_1 = 3U; else 
                                              #line 289 
                                              tmp_1 = 0U;
    #line 289 
    ;
    #line 289 
    ath5k_hw_set_ledstate(ah,tmp_1);
    #line 291 
    if ((int)bss_conf->assoc != 0) {
      #line 292 
      if ((long)(ah->debug.level != 0U) != 0L) {
        #line 292 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 292 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_bss_info_changed",292,(int)bss_conf->aid,(u8 *)(& common->curbssid));
      }
      #line 295 
      common->curaid = bss_conf->aid;
      #line 296 
      ath5k_hw_set_bssid(ah);
    }
  }
  #line 301 
  if ((changes & 256U) != 0U) {
    #line 302 
    cif_spin_lock_bh_block_of_ath5k_hw_0(& ah->block);
    #line 303 
    ath5k_beacon_update(hw,vif);
    #line 304 
    cif_spin_unlock_bh_block_of_ath5k_hw_0(& ah->block);
  }
  #line 307 
  if ((changes & 512U) != 0U) 
                              #line 308 
                              ah->enable_beacon = bss_conf->enable_beacon;
  #line 310 
  if ((changes & 832U) != 0U) 
                              #line 312 
                              ath5k_beacon_config(ah);
  #line 314 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 315 
  return;
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static u64 ath5k_prepare_multicast(struct ieee80211_hw *hw, struct netdev_hw_addr_list *mc_list)
{
  #line 329 
  void *__mptr;
  #line 322 
  u32 mfilt[2U];
  #line 322 
  u32 val;
  #line 323 
  u8 pos;
  #line 324 
  struct netdev_hw_addr *ha;
  #line 326 
  mfilt[0] = 0U;
  #line 327 
  mfilt[1] = 0U;
  #line 329 
  __mptr = (void *)mc_list->list.next;
  #line 329 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 329 
  while ((void *)ha != (void *)mc_list) {
    #line 329 
    void *__mptr_0;
    #line 331 
    val = get_unaligned_le32((void *)(& ha->addr));
    #line 332 
    pos = (unsigned char)((((int)((unsigned char)(val >> 18)) ^ (int)((unsigned char)(val >> 12))) ^ (int)((unsigned char)(val >> 6))) ^ (int)((unsigned char)val));
    #line 333 
    val = get_unaligned_le32((void *)((unsigned char *)(& ha->addr) + 3U));
    #line 334 
    pos = (unsigned char)(((((int)((unsigned char)(val >> 18)) ^ (int)((unsigned char)(val >> 12))) ^ (int)((unsigned char)(val >> 6))) ^ (int)((unsigned char)val)) ^ (int)pos);
    #line 335 
    pos = (unsigned char)((unsigned int)pos & 63U);
    #line 336 
    mfilt[(int)((unsigned int)pos / 32U)] |= (unsigned int)(1 << ((int)pos & 31));
    #line 329 
    __mptr_0 = (void *)ha->list.next;
    #line 329 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 344 
  return ((unsigned long long)mfilt[1] << 32) | (unsigned long long)mfilt[0];
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_configure_filter(struct ieee80211_hw *hw, unsigned int changed_flags, unsigned int *new_flags, u64 multicast)
{
  #line 376 
  u32 mfilt[2U];
  #line 376 
  u32 rfilt;
  #line 377 
  struct ath5k_vif_iter_data iter_data;
  #line 391 
  u32 tmp;
  #line 391 
  unsigned int tmp_0;
  #line 375 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 379 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 381 
  mfilt[0] = (unsigned int)multicast;
  #line 382 
  mfilt[1] = (unsigned int)(multicast >> 32);
  #line 385 
  changed_flags &= 126U;
  #line 386 
  *new_flags &= 126U;
  #line 391 
  tmp = ath5k_hw_get_rx_filter(ah);
  #line 391 
  if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                   #line 391 
                                                   tmp_0 = 64U; else 
                                                                  #line 391 
                                                                  tmp_0 = 256U;
  #line 391 
  rfilt = (tmp & tmp_0) | 7U;
  #line 396 
  if ((*new_flags & 2U) != 0U) {
    #line 397 
    mfilt[0] = 4294967295U;
    #line 398 
    mfilt[1] = 4294967295U;
  }
  #line 402 
  if ((*new_flags & 12U) != 0U) {
    #line 403 
    unsigned int tmp_1;
    #line 403 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                     #line 403 
                                                     tmp_1 = 64U; else 
                                                                    #line 403 
                                                                    tmp_1 = 256U;
    #line 403 
    rfilt = tmp_1 | rfilt;
  }
  #line 407 
  if ((*new_flags & 16U) != 0U || (unsigned int)ah->nvifs > 1U) 
                                                                #line 408 
                                                                rfilt |= 16U;
  #line 414 
  if ((*new_flags & 32U) != 0U) 
                                #line 415 
                                rfilt |= 8U;
  #line 421 
  switch ((unsigned int)ah->opmode) {
    #line 422 
    case (unsigned int)7: 
                          #line 422 
    ;
    #line 423 
    rfilt |= 184U;
    #line 427 
    break;
    #line 428 
    case (unsigned int)3: 
                          #line 428 
    ;
    #line 429 
    case (unsigned int)1: 
                          #line 429 
    ;
    #line 430 
    rfilt |= 144U;
    #line 432 
    break;
    #line 433 
    case (unsigned int)2: 
                          #line 433 
    ;
    #line 434 
    if ((int)ah->assoc != 0) 
                             #line 435 
                             rfilt |= 16U;
    #line 436 
    default: 
             #line 436 
    ;
    #line 437 
    break;
  }
  #line 440 
  iter_data.hw_macaddr = (u8 *)0U;
  #line 441 
  iter_data.n_stas = 0;
  #line 442 
  iter_data.need_set_hw_addr = (_Bool)0;
  #line 443 
  ieee80211_iterate_active_interfaces_atomic(ah->hw,1U,& ath5k_vif_iter,(void *)(& iter_data));
  #line 448 
  if (iter_data.n_stas > 1) 
                            #line 453 
                            rfilt |= 32U;
  #line 457 
  ath5k_hw_set_rx_filter(ah,rfilt);
  #line 460 
  ath5k_hw_set_mcast_filter(ah,mfilt[0],mfilt[1]);
  #line 463 
  ah->filter_flags = rfilt;
  #line 465 
  ah->fif_filter_flags = *new_flags;
  #line 467 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 468 
  return;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key)
{
  #line 476 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 477 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 478 
  int ret = 0;
  #line 480 
  if ((int)ath5k_modparam_nohwcrypt != 0) 
                                          #line 481 
                                          return -95;
  #line 483 
  if (((int)key->flags & 64) != 0) 
                                   #line 484 
                                   return -95;
  #line 486 
  if ((vif->type == (unsigned int)NL80211_IFTYPE_ADHOC && (key->cipher == 1027074U || key->cipher == 1027076U)) && ((int)key->flags & 8) == 0) 
    #line 491 
    return -95;
  #line 494 
  switch (key->cipher) {
    #line 495 
    case (u32)1027073: 
                       #line 495 
    ;
    #line 496 
    case (u32)1027077: 
                       #line 496 
    ;
    #line 497 
    case (u32)1027074: 
                       #line 497 
    ;
    #line 498 
    break;
    #line 499 
    case (u32)1027076: 
                       #line 499 
    ;
    #line 500 
    if (((unsigned int)common->crypt_caps & 1U) != 0U) 
                                                       #line 501 
                                                       break;
    #line 502 
    return -95;
    #line 503 
    default: 
             #line 503 
    ;
    #line 504 
    return -95;
  }
  #line 507 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 509 
  switch ((unsigned int)cmd) {
    #line 510 
    case (unsigned int)0: 
                          #line 510 
    ;
    #line 511 
    ret = ath_key_config(common,vif,sta,key);
    #line 512 
    if (ret >= 0) {
      #line 513 
      key->hw_key_idx = (unsigned char)ret;
      #line 515 
      key->flags = (unsigned short)((unsigned int)key->flags | 2U);
      #line 516 
      if (key->cipher == 1027074U) 
                                   #line 517 
                                   key->flags = (unsigned short)((unsigned int)key->flags | 4U);
      #line 518 
      if (key->cipher == 1027076U) 
                                   #line 519 
                                   key->flags = (unsigned short)((unsigned int)key->flags | 16U);
      #line 520 
      ret = 0;
    }
    #line 522 
    break;
    #line 523 
    case (unsigned int)1: 
                          #line 523 
    ;
    #line 524 
    ath_key_delete(common,key);
    #line 525 
    break;
    #line 526 
    default: 
             #line 526 
    ;
    #line 527 
    ret = -22;
  }
  #line 530 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 531 
  return ret;
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_sw_scan_start(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u8 *mac_addr)
{
  #line 540 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 541 
  if (! ah->assoc) 
                   #line 542 
                   ath5k_hw_set_ledstate(ah,1U);
  #line 543 
  return;
}

#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_sw_scan_complete(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 550 
  unsigned int tmp;
  #line 549 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 550 
  if ((int)ah->assoc != 0) 
                           #line 550 
                           tmp = 3U; else 
                                          #line 550 
                                          tmp = 0U;
  #line 550 
  ;
  #line 550 
  ath5k_hw_set_ledstate(ah,tmp);
  #line 552 
  return;
}

#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_get_stats(struct ieee80211_hw *hw, struct ieee80211_low_level_stats *stats)
{
  #line 559 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 562 
  ath5k_hw_update_mib_counters(ah);
  #line 564 
  stats->dot11ACKFailureCount = ah->stats.ack_fail;
  #line 565 
  stats->dot11RTSFailureCount = ah->stats.rts_fail;
  #line 566 
  stats->dot11RTSSuccessCount = ah->stats.rts_ok;
  #line 567 
  stats->dot11FCSErrorCount = ah->stats.fcs_error;
  #line 569 
  return 0;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_conf_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u16 queue, struct ieee80211_tx_queue_params *params)
{
  #line 578 
  struct ath5k_txq_info qi;
  #line 577 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 579 
  int ret = 0;
  #line 581 
  if ((int)((unsigned short)ah->ah_capabilities.cap_queues.q_tx_num) <= (int)queue) 
    #line 582 
    return 0;
  #line 584 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 586 
  ath5k_hw_get_tx_queueprops(ah,(int)queue,& qi);
  #line 588 
  qi.tqi_aifs = params->aifs;
  #line 589 
  qi.tqi_cw_min = params->cw_min;
  #line 590 
  qi.tqi_cw_max = params->cw_max;
  #line 591 
  qi.tqi_burst_time = (unsigned int)((int)params->txop * 32);
  #line 593 
  if ((long)(ah->debug.level != 0U) != 0L) {
    #line 593 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 593 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_conf_tx",593,(int)queue,(int)params->aifs,(int)params->cw_min,(int)params->cw_max,(int)params->txop);
  }
  #line 599 
  if (ath5k_hw_set_tx_queueprops(ah,(int)queue,& qi) != 0) {
    #line 600 
    if (net_ratelimit() != 0) 
                              #line 600 
                              _ath5k_printk(ah,(char *)"\001",(char *)"Unable to update hardware queue %u!\n",(int)queue);
    #line 602 
    ret = -5;
  }
  else 
       #line 604 
       ath5k_hw_reset_tx_queue(ah,(unsigned int)queue);
  #line 606 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 608 
  return ret;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static u64 ath5k_get_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 615 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 617 
  return ath5k_hw_get_tsf64(ah);
}

#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_set_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u64 tsf)
{
  #line 624 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 626 
  ath5k_hw_set_tsf64(ah,tsf);
  #line 627 
  return;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_reset_tsf(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 633 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 639 
  if (ah->opmode == (unsigned int)NL80211_IFTYPE_ADHOC) 
                                                        #line 640 
                                                        ath5k_beacon_update_timers(ah,0ULL); else 
                                                                    #line 642 
                                                                    ath5k_hw_reset_tsf(ah);
  #line 643 
  return;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_get_survey(struct ieee80211_hw *hw, int idx, struct survey_info *survey)
{
  #line 649 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 650 
  struct ieee80211_conf *conf = & hw->conf;
  #line 651 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 652 
  struct ath_cycle_counters *cc = & common->cc_survey;
  #line 653 
  unsigned int div = common->clockrate * 1000U;
  #line 655 
  if (idx != 0) 
                #line 656 
                return -2;
  #line 658 
  cif_spin_lock_bh_cc_lock_of_ath_common_1(& common->cc_lock);
  #line 659 
  ath_hw_cycle_counters_update(common);
  #line 660 
  if (cc->cycles != 0U) {
    #line 661 
    ah->survey.time += (unsigned long long)(cc->cycles / div);
    #line 662 
    ah->survey.time_busy += (unsigned long long)(cc->rx_busy / div);
    #line 663 
    ah->survey.time_rx += (unsigned long long)(cc->rx_frame / div);
    #line 664 
    ah->survey.time_tx += (unsigned long long)(cc->tx_frame / div);
  }
  #line 666 
  memset((void *)cc,0,16UL);
  #line 667 
  cif_spin_unlock_bh_cc_lock_of_ath_common_1(& common->cc_lock);
  #line 669 
  memcpy((void *)survey,(void *)(& ah->survey),72UL);
  #line 671 
  survey->channel = conf->chandef.chan;
  #line 672 
  survey->noise = (signed char)ah->ah_noise_floor;
  #line 673 
  survey->filled = 111U;
  #line 680 
  return 0;
}

#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_set_coverage_class(struct ieee80211_hw *hw, s16 coverage_class)
{
  #line 697 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 699 
  cif_mutex_lock_lock_of_ath5k_hw_0(& ah->lock);
  #line 700 
  ath5k_hw_set_coverage_class(ah,(unsigned char)((int)((unsigned char)coverage_class)));
  #line 701 
  cif_mutex_unlock_lock_of_ath5k_hw_0(& ah->lock);
  #line 702 
  return;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_set_antenna(struct ieee80211_hw *hw, u32 tx_ant, u32 rx_ant)
{
  #line 708 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 710 
  if (tx_ant == 1U && rx_ant == 1U) 
                                    #line 711 
                                    ath5k_hw_set_antenna_mode(ah,(unsigned char)1);
  else 
    #line 712 
    if (tx_ant == 2U && rx_ant == 2U) 
                                      #line 713 
                                      ath5k_hw_set_antenna_mode(ah,(unsigned char)2);
    else 
      #line 714 
      if ((tx_ant & 3U) == 3U && (rx_ant & 3U) == 3U) 
                                                      #line 715 
                                                      ath5k_hw_set_antenna_mode(ah,(unsigned char)0); else 
                                                                    #line 717 
                                                                    return -22;
  #line 718 
  return 0;
}

#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_get_antenna(struct ieee80211_hw *hw, u32 *tx_ant, u32 *rx_ant)
{
  #line 725 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 727 
  switch ((int)ah->ah_ant_mode) {
    #line 728 
    case 1: 
            #line 728 
    ;
    #line 729 
    *tx_ant = 1U;
    #line 729 
    *rx_ant = 1U;
    #line 729 
    break;
    #line 730 
    case 2: 
            #line 730 
    ;
    #line 731 
    *tx_ant = 2U;
    #line 731 
    *rx_ant = 2U;
    #line 731 
    break;
    #line 732 
    case 0: 
            #line 732 
    ;
    #line 733 
    *tx_ant = 3U;
    #line 733 
    *rx_ant = 3U;
    #line 733 
    break;
  }
  #line 735 
  return 0;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static void ath5k_get_ringparam(struct ieee80211_hw *hw, u32 *tx, u32 *tx_max, u32 *rx, u32 *rx_max)
{
  #line 742 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 744 
  *tx = (unsigned int)ah->txqs[0].txq_max;
  #line 746 
  *tx_max = 50U;
  #line 747 
  *rx_max = 40U;
  #line 747 
  *rx = 40U;
  #line 748 
  return;
}

#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
static int ath5k_set_ringparam(struct ieee80211_hw *hw, u32 tx, u32 rx)
{
  #line 754 
  u16 qnum;
  #line 753 
  struct ath5k_hw *ah = (struct ath5k_hw *)hw->priv;
  #line 757 
  if (rx != 40U) 
                 #line 758 
                 return -22;
  #line 761 
  if (tx + 4294967295U > 49U) 
                              #line 762 
                              return -22;
  #line 764 
  qnum = (unsigned short)0U;
  #line 764 
  while ((unsigned int)qnum <= 9U) {
    #line 765 
    if (! ah->txqs[(int)qnum].setup) 
                                     #line 766 
                                     goto __Cont;
    #line 767 
    if (ah->txqs[(int)qnum].qnum > 3U) 
                                       #line 769 
                                       goto __Cont;
    #line 771 
    ah->txqs[(int)qnum].txq_max = (int)tx;
    #line 772 
    if (ah->txqs[(int)qnum].txq_len >= ah->txqs[(int)qnum].txq_max) 
                                                                    #line 773 
                                                                    ieee80211_stop_queue(hw,(int)ah->txqs[(int)qnum].qnum);
    #line 764 
    __Cont: 
            #line 764 
    qnum = (u16)((int)qnum + 1);
  }
  #line 776 
  return 0;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/mac80211-ops.c"
struct ieee80211_ops ath5k_hw_ops = {.tx = & ath5k_tx, .start = & ath5k_start, .stop = & ath5k_stop, .add_interface = & ath5k_add_interface, .remove_interface = & ath5k_remove_interface, .config = & ath5k_config, .bss_info_changed = & ath5k_bss_info_changed, .prepare_multicast = & ath5k_prepare_multicast, .configure_filter = & ath5k_configure_filter, .set_key = & ath5k_set_key, .sw_scan_start = & ath5k_sw_scan_start, .sw_scan_complete = & ath5k_sw_scan_complete, .get_stats = & ath5k_get_stats, .conf_tx = & ath5k_conf_tx, .get_tsf = & ath5k_get_tsf, .set_tsf = & ath5k_set_tsf, .reset_tsf = & ath5k_reset_tsf, .get_survey = & ath5k_get_survey, .set_coverage_class = & ath5k_set_coverage_class, .set_antenna = & ath5k_set_antenna, .get_antenna = & ath5k_get_antenna, .set_ringparam = & ath5k_set_ringparam, .get_ringparam = & ath5k_get_ringparam};
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_add_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 107 
  return ath5k_add_interface(arg0,arg1);
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_bss_info_changed(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_bss_conf *arg2, unsigned int arg3)
{
  #line 112 
  ath5k_bss_info_changed(arg0,arg1,arg2,arg3);
  #line 113 
  return;
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_conf_tx(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned short arg2, struct ieee80211_tx_queue_params *arg3)
{
  #line 117 
  return ath5k_conf_tx(arg0,arg1,(unsigned short)((int)arg2),arg3);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_config(struct ieee80211_hw *arg0, unsigned int arg1)
{
  #line 122 
  return ath5k_config(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_configure_filter(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int *arg2, unsigned long long arg3)
{
  #line 127 
  ath5k_configure_filter(arg0,arg1,arg2,arg3);
  #line 128 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_get_antenna(struct ieee80211_hw *arg0, unsigned int *arg1, unsigned int *arg2)
{
  #line 132 
  return ath5k_get_antenna(arg0,arg1,arg2);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_get_ringparam(struct ieee80211_hw *arg0, unsigned int *arg1, unsigned int *arg2, unsigned int *arg3, unsigned int *arg4)
{
  #line 137 
  ath5k_get_ringparam(arg0,arg1,arg2,arg3,arg4);
  #line 138 
  return;
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_get_stats(struct ieee80211_hw *arg0, struct ieee80211_low_level_stats *arg1)
{
  #line 142 
  return ath5k_get_stats(arg0,arg1);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_get_survey(struct ieee80211_hw *arg0, int arg1, struct survey_info *arg2)
{
  #line 147 
  return ath5k_get_survey(arg0,arg1,arg2);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
unsigned long long emg_wrapper_ath5k_get_tsf(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 152 
  return ath5k_get_tsf(arg0,arg1);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
unsigned long long emg_wrapper_ath5k_prepare_multicast(struct ieee80211_hw *arg0, struct netdev_hw_addr_list *arg1)
{
  #line 157 
  return ath5k_prepare_multicast(arg0,arg1);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_remove_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 162 
  ath5k_remove_interface(arg0,arg1);
  #line 163 
  return;
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_reset_tsf(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 167 
  ath5k_reset_tsf(arg0,arg1);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_set_antenna(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int arg2)
{
  #line 172 
  return ath5k_set_antenna(arg0,arg1,arg2);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_set_coverage_class(struct ieee80211_hw *arg0, short arg1)
{
  #line 177 
  ath5k_set_coverage_class(arg0,(short)((int)arg1));
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_set_key(struct ieee80211_hw *arg0, enum set_key_cmd arg1, struct ieee80211_vif *arg2, struct ieee80211_sta *arg3, struct ieee80211_key_conf *arg4)
{
  #line 182 
  return ath5k_set_key(arg0,arg1,arg2,arg3,arg4);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_set_ringparam(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int arg2)
{
  #line 187 
  return ath5k_set_ringparam(arg0,arg1,arg2);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_set_tsf(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned long long arg2)
{
  #line 192 
  ath5k_set_tsf(arg0,arg1,arg2);
  #line 193 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
int emg_wrapper_ath5k_start(struct ieee80211_hw *arg0)
{
  #line 197 
  return ath5k_start(arg0);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_sw_scan_complete(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 202 
  ath5k_sw_scan_complete(arg0,arg1);
  #line 203 
  return;
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_sw_scan_start(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned char *arg2)
{
  #line 207 
  ath5k_sw_scan_start(arg0,arg1,arg2);
  #line 208 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
void emg_wrapper_ath5k_tx(struct ieee80211_hw *arg0, struct ieee80211_tx_control *arg1, struct sk_buff *arg2)
{
  #line 212 
  ath5k_tx(arg0,arg1,arg2);
  #line 213 
  return;
}

#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_mutex_lock_lock_of_ath5k_hw_0(struct mutex *lock)
{
  #line 905 
  ldv_mutex_model_lock(lock,(char *)"lock_of_ath5k_hw");
  #line 906 
  return;
}

#line 909  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_mutex_unlock_lock_of_ath5k_hw_0(struct mutex *lock)
{
  #line 912 
  ldv_mutex_model_unlock(lock,(char *)"lock_of_ath5k_hw");
  #line 913 
  return;
}

#line 916  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_lock_bh_block_of_ath5k_hw_0(spinlock_t *lock)
{
  #line 919 
  ldv_spin_model_lock((char *)"block_of_ath5k_hw");
  #line 921 
  spin_lock_bh_1(lock);
  #line 922 
  return;
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_unlock_bh_block_of_ath5k_hw_0(spinlock_t *lock)
{
  #line 928 
  ldv_spin_model_unlock((char *)"block_of_ath5k_hw");
  #line 930 
  spin_unlock_bh_1(lock);
  #line 931 
  return;
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_lock_bh_cc_lock_of_ath_common_1(spinlock_t *lock)
{
  #line 937 
  ldv_spin_model_lock((char *)"cc_lock_of_ath_common");
  #line 939 
  spin_lock_bh_1(lock);
  #line 940 
  return;
}

#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/mac80211-ops.i.aux"
static void cif_spin_unlock_bh_cc_lock_of_ath_common_1(spinlock_t *lock)
{
  #line 946 
  ldv_spin_model_unlock((char *)"cc_lock_of_ath_common");
  #line 948 
  spin_unlock_bh_1(lock);
  #line 949 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1381 
struct pci_device_id *pci_match_id(struct pci_device_id *, struct pci_dev *);
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
#line 164 
int led_classdev_register_ext(struct device *, struct led_classdev *, struct led_init_data *);
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/leds.h"
__inline static int led_classdev_register(struct device *parent, struct led_classdev *led_cdev)
{
  #line 181 
  return led_classdev_register_ext(parent,led_cdev,(struct led_init_data *)0);
}

#line 193 
#line 193 
void led_classdev_unregister(struct led_classdev *);
#line 4162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4162 
char *__ieee80211_get_tx_led_name(struct ieee80211_hw *);
#line 4163 
#line 4163 
char *__ieee80211_get_rx_led_name(struct ieee80211_hw *);
#line 4184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static char *ieee80211_get_tx_led_name(struct ieee80211_hw *hw)
{
  #line 4187 
  return __ieee80211_get_tx_led_name(hw);
}

#line 4205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static char *ieee80211_get_rx_led_name(struct ieee80211_hw *hw)
{
  #line 4208 
  return __ieee80211_get_rx_led_name(hw);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
static struct pci_device_id ath5k_led_devices[16U] = {{.vendor = 5772U, .device = 18U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 3601U, .subdevice = 4294967295U, .driver_data = 257UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 4187U, .subdevice = 57352U, .driver_data = 768UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 4187U, .subdevice = 57357U, .driver_data = 768UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 5224U, .subdevice = 1058U, .driver_data = 257UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 5224U, .subdevice = 1064U, .driver_data = 768UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 6706U, .subdevice = 256U, .driver_data = 256UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 6706U, .subdevice = 261U, .driver_data = 768UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 6715U, .subdevice = 4134U, .driver_data = 768UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 4116U, .subdevice = 1418U, .driver_data = 256UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 4156U, .subdevice = 4986U, .driver_data = 769UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 4156U, .subdevice = 4987U, .driver_data = 768UL}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 5772U, .subdevice = 12391U, .driver_data = 768UL}, {.vendor = 5772U, .device = 4116U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 4294967295U, .device = 4294967295U, .subvendor = 6706U, .subdevice = 274U, .driver_data = 768UL}};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
void ath5k_led_enable(struct ath5k_hw *ah)
{
  #line 92 
  if ((int)test_bit(2L,(unsigned long *)(& ah->status)) != 0) {
    #line 93 
    ath5k_hw_set_gpio_output(ah,ah->led_pin);
    #line 94 
    ath5k_led_off(ah);
  }
  #line 96 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
static void ath5k_led_on(struct ath5k_hw *ah)
{
  #line 100 
  if (! test_bit(2L,(unsigned long *)(& ah->status))) 
                                                      #line 101 
                                                      return;
  #line 102 
  ath5k_hw_set_gpio(ah,ah->led_pin,ah->led_on);
  #line 103 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
void ath5k_led_off(struct ath5k_hw *ah)
{
  #line 107 
  if (! test_bit(2L,(unsigned long *)(& ah->status))) 
                                                      #line 108 
                                                      return;
  #line 109 
  ath5k_hw_set_gpio(ah,ah->led_pin,(unsigned int)(ah->led_on == 0U));
  #line 110 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
static void ath5k_led_brightness_set(struct led_classdev *led_dev, enum led_brightness brightness)
{
  #line 116 
  void *__mptr;
  #line 116 
  __mptr = (void *)led_dev;
  #line 116 
  struct ath5k_led *led = ((struct ath5k_led *)(__mptr + 18446744073709551576U));
  #line 119 
  if (brightness == (unsigned int)LED_OFF) 
                                           #line 120 
                                           ath5k_led_off(led->ah); else 
                                                                    #line 122 
                                                                    ath5k_led_on(led->ah);
  #line 123 
  return;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
static int ath5k_register_led(struct ath5k_hw *ah, struct ath5k_led *led, char *name, char *trigger)
{
  #line 129 
  int err;
  #line 131 
  led->ah = ah;
  #line 132 
  strncpy((char *)(& led->name),name,32UL);
  #line 133 
  led->name[31UL] = (char)0;
  #line 134 
  led->led_dev.name = (char *)(& led->name);
  #line 135 
  led->led_dev.default_trigger = trigger;
  #line 136 
  led->led_dev.brightness_set = & ath5k_led_brightness_set;
  #line 138 
  err = led_classdev_register(ah->dev,& led->led_dev);
  #line 139 
  if (err != 0) {
    #line 140 
    if (net_ratelimit() != 0) 
                              #line 140 
                              _ath5k_printk(ah,(char *)"\001",(char *)"could not register LED %s\n",name);
    #line 141 
    led->ah = (struct ath5k_hw *)0;
  }
  #line 143 
  return err;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
static void ath5k_unregister_led(struct ath5k_led *led)
{
  #line 149 
  if (led->ah == (struct ath5k_hw *)0) 
                                       #line 150 
                                       return;
  #line 151 
  led_classdev_unregister(& led->led_dev);
  #line 152 
  ath5k_led_off(led->ah);
  #line 153 
  led->ah = (struct ath5k_hw *)0;
  #line 154 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
void ath5k_unregister_leds(struct ath5k_hw *ah)
{
  #line 158 
  ath5k_unregister_led(& ah->rx_led);
  #line 159 
  ath5k_unregister_led(& ah->tx_led);
  #line 160 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/led.c"
int ath5k_init_leds(struct ath5k_hw *ah)
{
  #line 169 
  char name[32U];
  #line 170 
  struct pci_device_id *match;
  #line 164 
  int ret = 0;
  #line 165 
  struct ieee80211_hw *hw = ah->hw;
  #line 167 
  struct pci_dev *pdev = ah->pdev;
  #line 172 
  if (ah->pdev == (struct pci_dev *)0) 
                                       #line 173 
                                       return 0;
  #line 178 
  match = pci_match_id(ath5k_led_devices,pdev);
  #line 180 
  if (match != (struct pci_device_id *)0) {
    #line 181 
    __set_bit(2L,(unsigned long *)(& ah->status));
    #line 182 
    ah->led_pin = (unsigned int)(match->driver_data >> 8);
    #line 183 
    ah->led_on = (unsigned int)match->driver_data & 255U;
  }
  #line 186 
  if (! test_bit(2L,(unsigned long *)(& ah->status))) 
                                                      #line 187 
                                                      goto out;
  #line 189 
  ath5k_led_enable(ah);
  #line 191 
  snprintf((char *)(& name),32UL,(char *)"ath5k-%s::rx",wiphy_name(hw->wiphy));
  #line 192 
  ;
  #line 192 
  ;
  #line 192 
  ret = ath5k_register_led(ah,& ah->rx_led,(char *)(& name),ieee80211_get_rx_led_name(hw));
  #line 194 
  if (ret != 0) 
                #line 195 
                goto out;
  #line 197 
  snprintf((char *)(& name),32UL,(char *)"ath5k-%s::tx",wiphy_name(hw->wiphy));
  #line 198 
  ;
  #line 198 
  ;
  #line 198 
  ret = ath5k_register_led(ah,& ah->tx_led,(char *)(& name),ieee80211_get_tx_led_name(hw));
  #line 200 
  out: 
       #line 200 
  ;
  #line 201 
  return ret;
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
static int ath5k_hw_setup_2word_tx_desc(struct ath5k_hw *ah, struct ath5k_desc *desc, unsigned int pkt_len, unsigned int hdr_len, int padsize, enum ath5k_pkt_type type, unsigned int tx_power, unsigned int tx_rate0, unsigned int tx_tries0, unsigned int key_index, unsigned int antenna_mode, unsigned int flags, unsigned int rtscts_rate, unsigned int rtscts_duration)
{
  #line 87 
  u32 frame_type;
  #line 88 
  struct ath5k_hw_2w_tx_ctl *tx_ctl;
  #line 89 
  unsigned int frame_len;
  #line 91 
  tx_ctl = & desc->ud.ds_tx5210.tx_ctl;
  #line 99 
  if ((long)(tx_tries0 == 0U) != 0L) {
    #line 100 
    if (net_ratelimit() != 0) 
                              #line 100 
                              _ath5k_printk(ah,(char *)"\001",(char *)"zero retries\n");
    {
      #line 101 
      int __ret_warn_on = 1;
      #line 101 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 102 
        ldv_inline_asm();
        #line 103 
        ldv_inline_asm();
      }
      #line 101 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 102 
    return -22;
  }
  #line 104 
  if ((long)(tx_rate0 == 0U) != 0L) {
    #line 105 
    if (net_ratelimit() != 0) 
                              #line 105 
                              _ath5k_printk(ah,(char *)"\001",(char *)"zero rate\n");
    {
      #line 106 
      int __ret_warn_on_0 = 1;
      #line 106 
      if ((long)(__ret_warn_on_0 != 0) != 0L) {
        #line 107 
        ldv_inline_asm();
        #line 108 
        ldv_inline_asm();
      }
      #line 106 
      long tmp_4 = (long)(__ret_warn_on_0 != 0);
    }
    #line 107 
    return -22;
  }
  #line 111 
  memset((void *)(& desc->ud.ds_tx5210),0,16UL);
  #line 118 
  frame_len = (pkt_len - (unsigned int)padsize) + 4U;
  #line 120 
  if ((frame_len & 4294963200U) != 0U) 
                                       #line 121 
                                       return -22;
  #line 123 
  tx_ctl->tx_control_0 = frame_len & 4095U;
  #line 128 
  if (type == (unsigned int)AR5K_PKT_TYPE_BEACON) {
    #line 129 
    int __y;
    #line 129 
    __y = 4;
    #line 129 
    pkt_len = (((((unsigned int)__y + pkt_len) + 4294967295U) / (unsigned int)__y) * (unsigned int)__y);
  }
  #line 131 
  if ((pkt_len & 4294963200U) != 0U) 
                                     #line 132 
                                     return -22;
  #line 134 
  tx_ctl->tx_control_1 = pkt_len & 4095U;
  #line 139 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 140 
    if ((hdr_len & 4294709247U) != 0U) 
                                       #line 141 
                                       return -22;
    #line 142 
    tx_ctl->tx_control_0 |= (hdr_len << 12) & 258048U;
  }
  #line 147 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 148 
    switch ((unsigned int)type) {
      #line 149 
      case (unsigned int)3: 
                            #line 149 
      ;
      #line 150 
      case (unsigned int)4: 
                            #line 150 
      ;
      #line 151 
      frame_type = 3U;
      #line 152 
      break;
      #line 153 
      case (unsigned int)5: 
                            #line 153 
      ;
      #line 154 
      frame_type = 4U;
      #line 155 
      break;
      #line 156 
      default: 
               #line 156 
      ;
      #line 157 
      frame_type = (unsigned int)type;
      #line 158 
      break;
    }
    #line 161 
    tx_ctl->tx_control_0 |= ((frame_type << 26) & 469762048U) | ((tx_rate0 << 18) & 3932160U);
  }
  else {
    #line 168 
    unsigned int tmp_2_2;
    #line 168 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 168 
                                                     tmp_2_2 = 33554432U; else 
                                                                    #line 168 
                                                                    tmp_2_2 = 503316480U;
    #line 166 
    tx_ctl->tx_control_0 |= ((tx_rate0 << 18) & 3932160U) | ((antenna_mode << 25) & tmp_2_2);
    #line 170 
    tx_ctl->tx_control_1 |= ((unsigned int)type << 20) & 7340032U;
  }
  #line 184 
  if ((flags & 1U) != 0U) 
                          #line 184 
                          tx_ctl->tx_control_0 |= 16777216U;
  #line 185 
  if ((flags & 16U) != 0U) 
                           #line 185 
                           tx_ctl->tx_control_0 |= 536870912U;
  #line 186 
  if ((flags & 4U) != 0U) 
                          #line 186 
                          tx_ctl->tx_control_0 |= 4194304U;
  #line 188 
  if (ah->ah_version == (unsigned int)AR5K_AR5211) {
    #line 189 
    if ((flags & 32U) != 0U) 
                             #line 189 
                             tx_ctl->tx_control_0 |= 8388608U;
    #line 190 
    if ((flags & 2U) != 0U) 
                            #line 190 
                            tx_ctl->tx_control_1 |= 8388608U;
  }
  #line 199 
  if (key_index != 4294967295U) {
    #line 203 
    unsigned int tmp_3;
    #line 200 
    tx_ctl->tx_control_0 |= 1073741824U;
    #line 203 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 203 
                                                     tmp_3 = 516096U; else 
                                                                    #line 203 
                                                                    tmp_3 = 1040384U;
    #line 202 
    tx_ctl->tx_control_1 |= (key_index << 13) & tmp_3;
  }
  #line 210 
  if (ah->ah_version == (unsigned int)AR5K_AR5210 && (flags & 12U) != 0U) 
    #line 212 
    tx_ctl->tx_control_1 |= rtscts_duration & 4294443008U;
  #line 215 
  return 0;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
static int ath5k_hw_setup_4word_tx_desc(struct ath5k_hw *ah, struct ath5k_desc *desc, unsigned int pkt_len, unsigned int hdr_len, int padsize, enum ath5k_pkt_type type, unsigned int tx_power, unsigned int tx_rate0, unsigned int tx_tries0, unsigned int key_index, unsigned int antenna_mode, unsigned int flags, unsigned int rtscts_rate, unsigned int rtscts_duration)
{
  #line 253 
  struct ath5k_hw_4w_tx_ctl *tx_ctl;
  #line 254 
  unsigned int frame_len;
  #line 260 
  u32 txctl0 = 0U;
  #line 260 
  u32 txctl1 = 0U;
  #line 260 
  u32 txctl2 = 0U;
  #line 260 
  u32 txctl3 = 0U;
  #line 262 
  tx_ctl = & desc->ud.ds_tx5212.tx_ctl;
  #line 270 
  if ((long)(tx_tries0 == 0U) != 0L) {
    #line 271 
    if (net_ratelimit() != 0) 
                              #line 271 
                              _ath5k_printk(ah,(char *)"\001",(char *)"zero retries\n");
    {
      #line 272 
      int __ret_warn_on = 1;
      #line 272 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 273 
        ldv_inline_asm();
        #line 274 
        ldv_inline_asm();
      }
      #line 272 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 273 
    return -22;
  }
  #line 275 
  if ((long)(tx_rate0 == 0U) != 0L) {
    #line 276 
    if (net_ratelimit() != 0) 
                              #line 276 
                              _ath5k_printk(ah,(char *)"\001",(char *)"zero rate\n");
    {
      #line 277 
      int __ret_warn_on_0 = 1;
      #line 277 
      if ((long)(__ret_warn_on_0 != 0) != 0L) {
        #line 278 
        ldv_inline_asm();
        #line 279 
        ldv_inline_asm();
      }
      #line 277 
      long tmp_4 = (long)(__ret_warn_on_0 != 0);
    }
    #line 278 
    return -22;
  }
  #line 281 
  tx_power = (unsigned int)ah->ah_txpower.txp_offset + tx_power;
  #line 282 
  if (tx_power > 63U) 
                      #line 283 
                      tx_power = 63U;
  #line 286 
  memset((void *)(& desc->ud.ds_tx5212.tx_stat),0,8UL);
  #line 294 
  frame_len = (pkt_len - (unsigned int)padsize) + 4U;
  #line 296 
  if ((frame_len & 4294963200U) != 0U) 
                                       #line 297 
                                       return -22;
  #line 299 
  txctl0 = frame_len & 4095U;
  #line 304 
  if (type == (unsigned int)AR5K_PKT_TYPE_BEACON) {
    #line 305 
    int __y;
    #line 305 
    __y = 4;
    #line 305 
    pkt_len = (((((unsigned int)__y + pkt_len) + 4294967295U) / (unsigned int)__y) * (unsigned int)__y);
  }
  #line 307 
  if ((pkt_len & 4294963200U) != 0U) 
                                     #line 308 
                                     return -22;
  #line 310 
  txctl1 = pkt_len & 4095U;
  #line 312 
  txctl0 = (((tx_power << 16) & 4128768U) | ((antenna_mode << 25) & 503316480U)) | txctl0;
  #line 314 
  txctl1 = (((unsigned int)type << 20) & 15728640U) | txctl1;
  #line 315 
  txctl2 = (tx_tries0 << 16) & 983040U;
  #line 316 
  txctl3 = tx_rate0 & 31U;
  #line 323 
  if ((flags & 1U) != 0U) 
                          #line 323 
                          txctl0 |= 16777216U;
  #line 324 
  if ((flags & 32U) != 0U) 
                           #line 324 
                           txctl0 |= 8388608U;
  #line 325 
  if ((flags & 16U) != 0U) 
                           #line 325 
                           txctl0 |= 536870912U;
  #line 326 
  if ((flags & 4U) != 0U) 
                          #line 326 
                          txctl0 |= 4194304U;
  #line 327 
  if ((flags & 8U) != 0U) 
                          #line 327 
                          txctl0 |= 2147483648U;
  #line 328 
  if ((flags & 2U) != 0U) 
                          #line 328 
                          txctl1 |= 16777216U;
  #line 335 
  if (key_index != 4294967295U) {
    #line 336 
    txctl0 |= 1073741824U;
    #line 337 
    txctl1 = ((key_index << 13) & 1040384U) | txctl1;
  }
  #line 344 
  if ((flags & 12U) != 0U) {
    #line 345 
    if ((flags & 4U) != 0U && (flags & 8U) != 0U) 
                                                  #line 347 
                                                  return -22;
    #line 348 
    txctl2 = (rtscts_duration & 32767U) | txctl2;
    #line 349 
    txctl3 = ((rtscts_rate << 20) & 32505856U) | txctl3;
  }
  #line 353 
  tx_ctl->tx_control_0 = txctl0;
  #line 354 
  tx_ctl->tx_control_1 = txctl1;
  #line 355 
  tx_ctl->tx_control_2 = txctl2;
  #line 356 
  tx_ctl->tx_control_3 = txctl3;
  #line 358 
  return 0;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
int ath5k_hw_setup_mrr_tx_desc(struct ath5k_hw *ah, struct ath5k_desc *desc, unsigned int tx_rate1, u_int tx_tries1, u_int tx_rate2, u_int tx_tries2, unsigned int tx_rate3, u_int tx_tries3)
{
  #line 385 
  struct ath5k_hw_4w_tx_ctl *tx_ctl;
  #line 388 
  if (ah->ah_version <= (unsigned int)AR5K_AR5211) 
                                                   #line 389 
                                                   return 0;
  #line 397 
  if ((((long)((tx_rate1 == 0U && tx_tries1 != 0U) != 0) != 0L || (long)((tx_rate2 == 0U && tx_tries2 != 0U) != 0) != 0L) != 0) != 0 || (long)((tx_rate3 == 0U && tx_tries3 != 0U) != 0) != 0L) {
    #line 400 
    if (net_ratelimit() != 0) 
                              #line 400 
                              _ath5k_printk(ah,(char *)"\001",(char *)"zero rate\n");
    {
      #line 401 
      int __ret_warn_on = 1;
      #line 401 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 402 
        ldv_inline_asm();
        #line 403 
        ldv_inline_asm();
      }
      #line 401 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 402 
    return -22;
  }
  #line 405 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) {
    #line 406 
    tx_ctl = & desc->ud.ds_tx5212.tx_ctl;
    #line 418 
    if (tx_tries1 != 0U) {
      #line 418 
      tx_ctl->tx_control_2 |= (tx_tries1 << 20) & 15728640U;
      #line 418 
      tx_ctl->tx_control_3 |= (tx_rate1 << 5) & 992U;
    }
    #line 419 
    if (tx_tries2 != 0U) {
      #line 419 
      tx_ctl->tx_control_2 |= (tx_tries2 << 24) & 251658240U;
      #line 419 
      tx_ctl->tx_control_3 |= (tx_rate2 << 10) & 31744U;
    }
    #line 420 
    if (tx_tries3 != 0U) {
      #line 420 
      tx_ctl->tx_control_2 |= tx_tries3 << 28;
      #line 420 
      tx_ctl->tx_control_3 |= (tx_rate3 << 15) & 1015808U;
    }
    #line 424 
    return 1;
  }
  #line 427 
  return 0;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
static int ath5k_hw_proc_2word_tx_status(struct ath5k_hw *ah, struct ath5k_desc *desc, struct ath5k_tx_status *ts)
{
  #line 446 
  struct ath5k_hw_tx_status *tx_status;
  #line 448 
  tx_status = & desc->ud.ds_tx5210.tx_stat;
  #line 451 
  if ((long)((tx_status->tx_status_1 & 1U) == 0U) != 0L) 
                                                         #line 452 
                                                         return -115;
  #line 457 
  ts->ts_tstamp = (unsigned short)(tx_status->tx_status_0 >> 16);
  #line 459 
  ts->ts_shortretry = (unsigned char)((unsigned int)((unsigned char)(tx_status->tx_status_0 >> 4)) & 15U);
  #line 461 
  ts->ts_final_retry = (unsigned char)((unsigned int)((unsigned char)(tx_status->tx_status_0 >> 8)) & 15U);
  #line 464 
  ts->ts_seqnum = (unsigned short)((unsigned int)((unsigned short)(tx_status->tx_status_1 >> 1)) & 4095U);
  #line 466 
  ts->ts_rssi = (signed char)(tx_status->tx_status_1 >> 13);
  #line 468 
  ts->ts_antenna = (unsigned char)1U;
  #line 469 
  ts->ts_status = (unsigned char)0U;
  #line 470 
  ts->ts_final_idx = (unsigned char)0U;
  #line 472 
  if ((tx_status->tx_status_0 & 1U) == 0U) {
    #line 473 
    if ((tx_status->tx_status_0 & 2U) != 0U) 
                                             #line 475 
                                             ts->ts_status = (unsigned char)((unsigned int)ts->ts_status | 1U);
    #line 477 
    if ((tx_status->tx_status_0 & 4U) != 0U) 
                                             #line 478 
                                             ts->ts_status = (unsigned char)((unsigned int)ts->ts_status | 4U);
    #line 480 
    if ((tx_status->tx_status_0 & 8U) != 0U) 
                                             #line 481 
                                             ts->ts_status = (unsigned char)((unsigned int)ts->ts_status | 2U);
  }
  #line 484 
  return 0;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
static int ath5k_hw_proc_4word_tx_status(struct ath5k_hw *ah, struct ath5k_desc *desc, struct ath5k_tx_status *ts)
{
  #line 510 
  union __anonunion___u_13507 __u_0;
  #line 504 
  union __anonunion___u_13505 __u;
  #line 498 
  struct ath5k_hw_tx_status *tx_status;
  #line 499 
  u32 txstat0;
  #line 499 
  u32 txstat1;
  #line 501 
  tx_status = & desc->ud.ds_tx5212.tx_stat;
  #line 503 
  __read_once_size((void *)(& tx_status->tx_status_1),(void *)(& __u.__c),4);
  #line 503 
  txstat1 = (__u.__val);
  #line 506 
  if ((long)((txstat1 & 1U) == 0U) != 0L) 
                                          #line 507 
                                          return -115;
  #line 509 
  __read_once_size((void *)(& tx_status->tx_status_0),(void *)(& __u_0.__c),4);
  #line 509 
  txstat0 = (__u_0.__val);
  #line 514 
  ts->ts_tstamp = (unsigned short)(txstat0 >> 16);
  #line 516 
  ts->ts_shortretry = (unsigned char)((unsigned int)((unsigned char)(txstat0 >> 4)) & 15U);
  #line 518 
  ts->ts_final_retry = (unsigned char)((unsigned int)((unsigned char)(txstat0 >> 8)) & 15U);
  #line 520 
  ts->ts_seqnum = (unsigned short)((unsigned int)((unsigned short)(txstat1 >> 1)) & 4095U);
  #line 522 
  ts->ts_rssi = (signed char)(txstat1 >> 13);
  #line 524 
  if ((txstat1 & 16777216U) != 0U) 
                                   #line 524 
                                   ts->ts_antenna = (unsigned char)2U; else 
                                                                    #line 524 
                                                                    ts->ts_antenna = (unsigned char)1U;
  #line 526 
  ts->ts_status = (unsigned char)0U;
  #line 528 
  ts->ts_final_idx = (unsigned char)((unsigned int)((unsigned char)(txstat1 >> 21)) & 3U);
  #line 532 
  if ((txstat0 & 1U) == 0U) {
    #line 533 
    if ((txstat0 & 2U) != 0U) 
                              #line 534 
                              ts->ts_status = (unsigned char)((unsigned int)ts->ts_status | 1U);
    #line 536 
    if ((txstat0 & 4U) != 0U) 
                              #line 537 
                              ts->ts_status = (unsigned char)((unsigned int)ts->ts_status | 4U);
    #line 539 
    if ((txstat0 & 8U) != 0U) 
                              #line 540 
                              ts->ts_status = (unsigned char)((unsigned int)ts->ts_status | 2U);
  }
  #line 543 
  return 0;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
int ath5k_hw_setup_rx_desc(struct ath5k_hw *ah, struct ath5k_desc *desc, u32 size, unsigned int flags)
{
  #line 563 
  struct ath5k_hw_rx_ctl *rx_ctl;
  #line 565 
  rx_ctl = & desc->ud.ds_rx.rx_ctl;
  #line 574 
  memset((void *)(& desc->ud.ds_rx),0,16UL);
  #line 576 
  if ((long)((size & 4294963200U) != 0U) != 0L) 
                                                #line 577 
                                                return -22;
  #line 580 
  rx_ctl->rx_control_1 = size & 4095U;
  #line 582 
  if ((flags & 32U) != 0U) 
                           #line 583 
                           rx_ctl->rx_control_1 |= 8192U;
  #line 585 
  return 0;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
static int ath5k_hw_proc_5210_rx_status(struct ath5k_hw *ah, struct ath5k_desc *desc, struct ath5k_rx_status *rs)
{
  #line 605 
  struct ath5k_hw_rx_status *rx_status;
  #line 607 
  rx_status = & desc->ud.ds_rx.rx_stat;
  #line 610 
  if ((long)((rx_status->rx_status_1 & 1U) == 0U) != 0L) 
                                                         #line 612 
                                                         return -115;
  #line 614 
  memset((void *)rs,0,12UL);
  #line 619 
  rs->rs_datalen = (unsigned short)((unsigned int)((unsigned short)rx_status->rx_status_0) & 4095U);
  #line 621 
  rs->rs_rssi = (signed char)(rx_status->rx_status_0 >> 19);
  #line 623 
  rs->rs_rate = (unsigned char)((unsigned int)((unsigned char)(rx_status->rx_status_0 >> 15)) & 15U);
  #line 625 
  rs->rs_more = (unsigned char)((rx_status->rx_status_0 & 4096U) != 0U);
  #line 632 
  rs->rs_tstamp = (unsigned short)((unsigned int)((unsigned short)(rx_status->rx_status_1 >> 15)) & 8191U);
  #line 635 
  if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                   #line 636 
                                                   rs->rs_antenna = (unsigned char)((unsigned int)((unsigned char)(rx_status->rx_status_0 >> 27)) & 7U);
  else 
    #line 639 
    if ((rx_status->rx_status_0 & 16384U) != 0U) 
                                                 #line 639 
                                                 rs->rs_antenna = (unsigned char)2U; else 
                                                                    #line 639 
                                                                    rs->rs_antenna = (unsigned char)1U;
  #line 646 
  if ((rx_status->rx_status_1 & 256U) != 0U) 
                                             #line 647 
                                             rs->rs_keyix = (unsigned char)((unsigned int)((unsigned char)(rx_status->rx_status_1 >> 9)) & 63U); else 
                                                                    #line 650 
                                                                    rs->rs_keyix = (unsigned char)255U;
  #line 655 
  if ((rx_status->rx_status_1 & 2U) == 0U) {
    #line 657 
    if ((rx_status->rx_status_1 & 4U) != 0U) 
                                             #line 659 
                                             rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 1U);
    #line 662 
    if (ah->ah_version == (unsigned int)AR5K_AR5210 && (rx_status->rx_status_1 & 8U) != 0U) 
      #line 665 
      rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 4U);
    #line 667 
    if ((rx_status->rx_status_1 & 224U) != 0U) {
      #line 669 
      rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 2U);
      #line 670 
      rs->rs_phyerr = (unsigned char)((unsigned int)((unsigned char)(rx_status->rx_status_1 >> 5)) & 7U);
    }
    #line 674 
    if ((rx_status->rx_status_1 & 16U) != 0U) 
                                              #line 676 
                                              rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 8U);
  }
  #line 679 
  return 0;
}

#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
static int ath5k_hw_proc_5212_rx_status(struct ath5k_hw *ah, struct ath5k_desc *desc, struct ath5k_rx_status *rs)
{
  #line 711 
  union __anonunion___u_13511 __u_0;
  #line 704 
  union __anonunion___u_13509 __u;
  #line 699 
  struct ath5k_hw_rx_status *rx_status;
  #line 700 
  u32 rxstat0;
  #line 700 
  u32 rxstat1;
  #line 702 
  rx_status = & desc->ud.ds_rx.rx_stat;
  #line 703 
  __read_once_size((void *)(& rx_status->rx_status_1),(void *)(& __u.__c),4);
  #line 703 
  rxstat1 = (__u.__val);
  #line 706 
  if ((long)((rxstat1 & 1U) == 0U) != 0L) 
                                          #line 707 
                                          return -115;
  #line 709 
  memset((void *)rs,0,12UL);
  #line 710 
  __read_once_size((void *)(& rx_status->rx_status_0),(void *)(& __u_0.__c),4);
  #line 710 
  rxstat0 = (__u_0.__val);
  #line 715 
  rs->rs_datalen = (unsigned short)((unsigned int)((unsigned short)rxstat0) & 4095U);
  #line 716 
  rs->rs_rssi = (signed char)(rxstat0 >> 20);
  #line 718 
  rs->rs_rate = (unsigned char)((unsigned int)((unsigned char)(rxstat0 >> 15)) & 31U);
  #line 720 
  rs->rs_antenna = (unsigned char)(rxstat0 >> 28);
  #line 722 
  rs->rs_more = (unsigned char)((rxstat0 & 4096U) != 0U);
  #line 723 
  rs->rs_tstamp = (unsigned short)((unsigned int)((unsigned short)(rxstat1 >> 16)) & 32767U);
  #line 729 
  if ((rxstat1 & 256U) != 0U) 
                              #line 730 
                              rs->rs_keyix = (unsigned char)((unsigned int)((unsigned char)(rxstat1 >> 9)) & 127U); else 
                                                                    #line 733 
                                                                    rs->rs_keyix = (unsigned char)255U;
  #line 738 
  if ((rxstat1 & 2U) == 0U) {
    #line 739 
    if ((rxstat1 & 4U) != 0U) 
                              #line 740 
                              rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 1U);
    #line 742 
    if ((rxstat1 & 16U) != 0U) {
      #line 743 
      rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 2U);
      #line 744 
      rs->rs_phyerr = (unsigned char)(rxstat1 >> 8);
      #line 746 
      if (! ah->ah_capabilities.cap_has_phyerr_counters) 
                                                         #line 747 
                                                         ath5k_ani_phy_error_report(ah,(enum ath5k_phy_error_code)rs->rs_phyerr);
    }
    #line 750 
    if ((rxstat1 & 8U) != 0U) 
                              #line 751 
                              rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 8U);
    #line 753 
    if ((rxstat1 & 32U) != 0U) 
                               #line 754 
                               rs->rs_status = (unsigned char)((unsigned int)rs->rs_status | 16U);
  }
  #line 756 
  return 0;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/desc.c"
int ath5k_hw_init_desc_functions(struct ath5k_hw *ah)
{
  #line 775 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) {
    #line 776 
    ah->ah_setup_tx_desc = & ath5k_hw_setup_4word_tx_desc;
    #line 777 
    ah->ah_proc_tx_desc = & ath5k_hw_proc_4word_tx_status;
    #line 778 
    ah->ah_proc_rx_desc = & ath5k_hw_proc_5212_rx_status;
  }
  else 
    #line 779 
    if (ah->ah_version <= (unsigned int)AR5K_AR5211) {
      #line 780 
      ah->ah_setup_tx_desc = & ath5k_hw_setup_2word_tx_desc;
      #line 781 
      ah->ah_proc_tx_desc = & ath5k_hw_proc_2word_tx_status;
      #line 782 
      ah->ah_proc_rx_desc = & ath5k_hw_proc_5210_rx_status;
    }
    else 
         #line 784 
         return -524;
  #line 785 
  return 0;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/eeprom.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static u16 ath5k_eeprom_bin2freq(struct ath5k_eeprom_info *ee, u16 bin, unsigned int mode)
{
  #line 43 
  u16 val;
  #line 45 
  if ((unsigned int)bin == 255U) 
                                 #line 46 
                                 return bin;
  #line 48 
  if (mode == 0U) 
    #line 49 
    if ((unsigned int)ee->ee_version > 12290U) 
                                               #line 50 
                                               val = (unsigned short)((unsigned int)bin * 5U + 4800U);
    else 
      #line 52 
      if ((unsigned int)bin > 62U) 
                                   #line 52 
                                   val = (unsigned short)((unsigned int)bin * 5U + 5410U); else 
                                                                    #line 52 
                                                                    val = (unsigned short)((unsigned int)bin * 10U + 5100U);
  else 
    #line 55 
    if ((unsigned int)ee->ee_version > 12290U) 
                                               #line 56 
                                               val = (unsigned short)((unsigned int)bin + 2300U); else 
                                                                    #line 58 
                                                                    val = (unsigned short)((unsigned int)bin + 2400U);
  #line 61 
  return val;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_init_header(struct ath5k_hw *ah)
{
  #line 76 
  u16 val;
  #line 77 
  u32 cksum;
  #line 77 
  u32 offset;
  #line 131 
  unsigned int tmp_10;
  #line 75 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 77 
  u32 eep_max = 832U;
  #line 82 
  if (! ath5k_hw_nvram_read(ah,61U,& ah->ah_capabilities.cap_eeprom.ee_magic)) 
    #line 82 
    return -5;
  #line 83 
  if (! ath5k_hw_nvram_read(ah,63U,
                            & ah->ah_capabilities.cap_eeprom.ee_protect)) 
    #line 83 
    return -5;
  #line 84 
  if (! ath5k_hw_nvram_read(ah,191U,
                            & ah->ah_capabilities.cap_eeprom.ee_regdomain)) 
    #line 84 
    return -5;
  #line 85 
  if (! ath5k_hw_nvram_read(ah,193U,
                            & ah->ah_capabilities.cap_eeprom.ee_version)) 
    #line 85 
    return -5;
  #line 86 
  if (! ath5k_hw_nvram_read(ah,194U,
                            & ah->ah_capabilities.cap_eeprom.ee_header)) 
    #line 86 
    return -5;
  #line 89 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 12287U) 
    #line 90 
    return 0;
  #line 96 
  if (! ath5k_hw_nvram_read(ah,28U,& val)) 
                                           #line 96 
                                           return -5;
  #line 97 
  if ((unsigned int)val != 0U) {
    #line 98 
    eep_max = (unsigned int)((int)val << 12) & 268369920U;
    #line 100 
    if (! ath5k_hw_nvram_read(ah,27U,& val)) 
                                             #line 100 
                                             return -5;
    #line 101 
    eep_max = ((unsigned int)val | eep_max) + 4294967104U;
    #line 108 
    if (eep_max > 2496U) {
      #line 109 
      if (net_ratelimit() != 0) 
                                #line 109 
                                _ath5k_printk(ah,(char *)"\001",(char *)"Invalid max custom EEPROM size: ",eep_max,eep_max,2496,2496);
      #line 114 
      return -5;
    }
  }
  #line 118 
  cksum = 0U;
  #line 118 
  offset = 0U;
  #line 118 
  while (offset < eep_max) {
    {
      #line 119 
      if (! ath5k_hw_nvram_read(ah,offset + 192U,& val)) 
                                                         #line 119 
                                                         return -5;
      #line 120 
      cksum = (unsigned int)val ^ cksum;
    }
    #line 118 
    offset ++;
  }
  #line 122 
  if (cksum != 65535U) {
    #line 123 
    if (net_ratelimit() != 0) {
      #line 123 
      char *tmp_8;
      #line 123 
      if (eep_max == 832U) 
                           #line 123 
                           tmp_8 = (char *)"default size"; else 
                                                                #line 123 
                                                                tmp_8 = (char *)"custom size";
      #line 123 
      ;
      #line 123 
      ;
      #line 123 
      ;
      #line 123 
      _ath5k_printk(ah,(char *)"\001",(char *)"Invalid EEPROM ",cksum,eep_max,tmp_8);
    }
    #line 128 
    return -5;
  }
  #line 131 
  ;
  #line 131 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12290U) 
    #line 131 
    tmp_10 = 195U; else 
                        #line 131 
                        tmp_10 = 196U;
  #line 131 
  ;
  #line 131 
  if (! ath5k_hw_nvram_read(ah,tmp_10,
                             & ah->ah_capabilities.cap_eeprom.ee_ant_gain)) 
    #line 131 
    return -5;
  #line 134 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16383U) {
    #line 135 
    if (! ath5k_hw_nvram_read(ah,196U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc0)) 
      #line 135 
      return -5;
    #line 136 
    if (! ath5k_hw_nvram_read(ah,197U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc1)) 
      #line 136 
      return -5;
    #line 139 
    if (! ath5k_hw_nvram_read(ah,198U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc2)) 
      #line 139 
      return -5;
    #line 141 
    if ((unsigned int)ee->ee_version > 16386U) {
      #line 142 
      if (! ath5k_hw_nvram_read(ah,199U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc3)) 
        #line 142 
        return -5;
    }
    #line 144 
    if ((unsigned int)ee->ee_version > 20479U) {
      #line 145 
      if (! ath5k_hw_nvram_read(ah,200U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc4)) 
        #line 145 
        return -5;
      #line 146 
      if (! ath5k_hw_nvram_read(ah,201U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc5)) 
        #line 146 
        return -5;
      #line 147 
      if (! ath5k_hw_nvram_read(ah,202U,
                             & ah->ah_capabilities.cap_eeprom.ee_misc6)) 
        #line 147 
        return -5;
    }
  }
  #line 151 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 12290U) {
    #line 152 
    if (! ath5k_hw_nvram_read(ah,236U,& val)) 
                                              #line 152 
                                              return -5;
    #line 153 
    ee->ee_ob[1][0] = (unsigned short)((unsigned int)val & 7U);
    #line 154 
    ee->ee_db[1][0] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 7U);
    #line 156 
    if (! ath5k_hw_nvram_read(ah,237U,& val)) 
                                              #line 156 
                                              return -5;
    #line 157 
    ee->ee_ob[2][0] = (unsigned short)((unsigned int)val & 7U);
    #line 158 
    ee->ee_db[2][0] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 7U);
  }
  #line 161 
  if (! ath5k_hw_nvram_read(ah,11U,& val)) 
                                           #line 161 
                                           return -5;
  #line 163 
  if ((unsigned int)ah->ah_mac_version == 14U && (unsigned int)val != 0U) 
    #line 164 
    ee->ee_is_hb63 = (_Bool)1; else 
                                    #line 166 
                                    ee->ee_is_hb63 = (_Bool)0;
  #line 168 
  if (! ath5k_hw_nvram_read(ah,15U,& val)) 
                                           #line 168 
                                           return -5;
  #line 169 
  ee->ee_rfkill_pin = (unsigned char)((unsigned int)((unsigned char)((int)val >> 2)) & 7U);
  #line 170 
  ee->ee_rfkill_pol = (_Bool)((((int)val >> 1) & 1) != 0);
  #line 178 
  if (! ath5k_hw_nvram_read(ah,2U,& val)) 
                                          #line 178 
                                          return -5;
  #line 179 
  ee->ee_serdes = (_Bool)((unsigned int)val == 64U);
  #line 182 
  return 0;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_ants(struct ath5k_hw *ah, u32 *offset, unsigned int mode)
{
  #line 194 
  u16 val;
  #line 197 
  u32 tmp;
  #line 202 
  u32 tmp_1;
  #line 203 
  int tmp_3;
  #line 203 
  int tmp_4;
  #line 204 
  int tmp_5;
  #line 205 
  int tmp_6;
  #line 207 
  u32 tmp_7;
  #line 208 
  int tmp_9;
  #line 209 
  int tmp_10;
  #line 212 
  u32 tmp_11;
  #line 213 
  int tmp_13;
  #line 213 
  int tmp_14;
  #line 214 
  int tmp_15;
  #line 215 
  int tmp_16;
  #line 218 
  u32 tmp_17;
  #line 219 
  int tmp_19;
  #line 219 
  int tmp_20;
  #line 220 
  int tmp_21;
  #line 221 
  int tmp_22;
  #line 192 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 193 
  u32 o = *offset;
  #line 195 
  int i = 0;
  #line 197 
  tmp = o;
  #line 197 
  o ++;
  #line 197 
  ;
  #line 197 
  ;
  #line 197 
  if (! ath5k_hw_nvram_read(ah,tmp,& val)) 
                                           #line 197 
                                           return -5;
  #line 198 
  ee->ee_switch_settling[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 8)) & 127U);
  #line 199 
  ee->ee_atn_tx_rx[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 2)) & 63U);
  #line 200 
  ee->ee_ant_control[mode][i] = (unsigned short)((unsigned int)((unsigned short)((int)val << 4)) & 63U);
  #line 202 
  tmp_1 = o;
  #line 202 
  o ++;
  #line 202 
  ;
  #line 202 
  ;
  #line 202 
  if (! ath5k_hw_nvram_read(ah,tmp_1,& val)) 
                                             #line 202 
                                             return -5;
  #line 203 
  tmp_3 = i;
  #line 203 
  i ++;
  #line 203 
  tmp_4 = i;
  #line 203 
  i ++;
  #line 203 
  ee->ee_ant_control[mode][tmp_3] = (unsigned short)((int)ee->ee_ant_control[mode][tmp_4] | ((int)val >> 12));
  #line 204 
  tmp_5 = i;
  #line 204 
  i ++;
  #line 204 
  ee->ee_ant_control[mode][tmp_5] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 6)) & 63U);
  #line 205 
  tmp_6 = i;
  #line 205 
  i ++;
  #line 205 
  ee->ee_ant_control[mode][tmp_6] = (unsigned short)((unsigned int)val & 63U);
  #line 207 
  tmp_7 = o;
  #line 207 
  o ++;
  #line 207 
  ;
  #line 207 
  ;
  #line 207 
  if (! ath5k_hw_nvram_read(ah,tmp_7,& val)) 
                                             #line 207 
                                             return -5;
  #line 208 
  tmp_9 = i;
  #line 208 
  i ++;
  #line 208 
  ee->ee_ant_control[mode][tmp_9] = (unsigned short)((int)val >> 10);
  #line 209 
  tmp_10 = i;
  #line 209 
  i ++;
  #line 209 
  ee->ee_ant_control[mode][tmp_10] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 4)) & 63U);
  #line 210 
  ee->ee_ant_control[mode][i] = (unsigned short)((unsigned int)((unsigned short)((int)val << 2)) & 63U);
  #line 212 
  tmp_11 = o;
  #line 212 
  o ++;
  #line 212 
  ;
  #line 212 
  ;
  #line 212 
  if (! ath5k_hw_nvram_read(ah,tmp_11,& val)) 
                                              #line 212 
                                              return -5;
  #line 213 
  tmp_13 = i;
  #line 213 
  i ++;
  #line 213 
  tmp_14 = i;
  #line 213 
  i ++;
  #line 213 
  ee->ee_ant_control[mode][tmp_13] = (unsigned short)((int)ee->ee_ant_control[mode][tmp_14] | ((int)val >> 14));
  #line 214 
  tmp_15 = i;
  #line 214 
  i ++;
  #line 214 
  ee->ee_ant_control[mode][tmp_15] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 8)) & 63U);
  #line 215 
  tmp_16 = i;
  #line 215 
  i ++;
  #line 215 
  ee->ee_ant_control[mode][tmp_16] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 2)) & 63U);
  #line 216 
  ee->ee_ant_control[mode][i] = (unsigned short)((unsigned int)((unsigned short)((int)val << 4)) & 63U);
  #line 218 
  tmp_17 = o;
  #line 218 
  o ++;
  #line 218 
  ;
  #line 218 
  ;
  #line 218 
  if (! ath5k_hw_nvram_read(ah,tmp_17,& val)) 
                                              #line 218 
                                              return -5;
  #line 219 
  tmp_19 = i;
  #line 219 
  i ++;
  #line 219 
  tmp_20 = i;
  #line 219 
  i ++;
  #line 219 
  ee->ee_ant_control[mode][tmp_19] = (unsigned short)((int)ee->ee_ant_control[mode][tmp_20] | ((int)val >> 12));
  #line 220 
  tmp_21 = i;
  #line 220 
  i ++;
  #line 220 
  ee->ee_ant_control[mode][tmp_21] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 6)) & 63U);
  #line 221 
  tmp_22 = i;
  #line 221 
  i ++;
  #line 221 
  ee->ee_ant_control[mode][tmp_22] = (unsigned short)((unsigned int)val & 63U);
  #line 224 
  ah->ah_ant_ctl[mode][0] = (unsigned int)((int)ee->ee_ant_control[mode][0] << 4);
  #line 226 
  ah->ah_ant_ctl[mode][1] = (unsigned int)(((((int)ee->ee_ant_control[mode][1] | ((int)ee->ee_ant_control[mode][2] << 6)) | ((int)ee->ee_ant_control[mode][3] << 12)) | ((int)ee->ee_ant_control[mode][4] << 18)) | ((int)ee->ee_ant_control[mode][5] << 24));
  #line 232 
  ah->ah_ant_ctl[mode][2] = (unsigned int)(((((int)ee->ee_ant_control[mode][6] | ((int)ee->ee_ant_control[mode][7] << 6)) | ((int)ee->ee_ant_control[mode][8] << 12)) | ((int)ee->ee_ant_control[mode][9] << 18)) | ((int)ee->ee_ant_control[mode][10] << 24));
  #line 240 
  *offset = o;
  #line 242 
  return 0;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_modes(struct ath5k_hw *ah, u32 *offset, unsigned int mode)
{
  #line 254 
  u16 val;
  #line 257 
  u32 tmp;
  #line 280 
  u32 tmp_3;
  #line 287 
  u32 tmp_5;
  #line 291 
  u32 tmp_7;
  #line 303 
  u32 tmp_9;
  #line 252 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 253 
  u32 o = *offset;
  #line 256 
  ee->ee_n_piers[mode] = (unsigned char)0U;
  #line 257 
  tmp = o;
  #line 257 
  o ++;
  #line 257 
  ;
  #line 257 
  ;
  #line 257 
  if (! ath5k_hw_nvram_read(ah,tmp,& val)) 
                                           #line 257 
                                           return -5;
  #line 258 
  ee->ee_adc_desired_size[mode] = (signed char)((int)val >> 8);
  #line 259 
  switch (mode) {
    #line 265 
    u32 tmp_1;
    #line 260 
    case (unsigned int)0: 
                          #line 260 
    ;
    #line 261 
    ee->ee_ob[mode][3] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 5)) & 7U);
    #line 262 
    ee->ee_db[mode][3] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 2)) & 7U);
    #line 263 
    ee->ee_ob[mode][2] = (unsigned short)((unsigned int)((unsigned short)((int)val << 1)) & 7U);
    #line 265 
    tmp_1 = o;
    #line 265 
    o ++;
    #line 265 
    ;
    #line 265 
    ;
    #line 265 
    if (! ath5k_hw_nvram_read(ah,tmp_1,& val)) 
                                               #line 265 
                                               return -5;
    #line 266 
    ee->ee_ob[mode][2] = (unsigned short)((int)ee->ee_ob[mode][2] | ((int)val >> 15));
    #line 267 
    ee->ee_db[mode][2] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 12)) & 7U);
    #line 268 
    ee->ee_ob[mode][1] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 9)) & 7U);
    #line 269 
    ee->ee_db[mode][1] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 6)) & 7U);
    #line 270 
    ee->ee_ob[mode][0] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 7U);
    #line 271 
    ee->ee_db[mode][0] = (unsigned short)((unsigned int)val & 7U);
    #line 272 
    break;
    #line 273 
    case (unsigned int)2: 
                          #line 273 
    ;
    #line 274 
    case (unsigned int)1: 
                          #line 274 
    ;
    #line 275 
    ee->ee_ob[mode][1] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 4)) & 7U);
    #line 276 
    ee->ee_db[mode][1] = (unsigned short)((unsigned int)val & 7U);
    #line 277 
    break;
  }
  #line 280 
  tmp_3 = o;
  #line 280 
  o ++;
  #line 280 
  ;
  #line 280 
  ;
  #line 280 
  if (! ath5k_hw_nvram_read(ah,tmp_3,& val)) 
                                             #line 280 
                                             return -5;
  #line 281 
  ee->ee_tx_end2xlna_enable[mode] = (unsigned short)((int)val >> 8);
  #line 282 
  ee->ee_thr_62[mode] = (unsigned short)((unsigned int)val & 255U);
  #line 284 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 12290U) 
    #line 285 
    if (mode == 0U) 
                    #line 285 
                    ee->ee_thr_62[mode] = (unsigned short)15U; else 
                                                                    #line 285 
                                                                    ee->ee_thr_62[mode] = (unsigned short)28U;
  #line 287 
  tmp_5 = o;
  #line 287 
  o ++;
  #line 287 
  ;
  #line 287 
  ;
  #line 287 
  if (! ath5k_hw_nvram_read(ah,tmp_5,& val)) 
                                             #line 287 
                                             return -5;
  #line 288 
  ee->ee_tx_end2xpa_disable[mode] = (unsigned short)((int)val >> 8);
  #line 289 
  ee->ee_tx_frm2xpa_enable[mode] = (unsigned short)((unsigned int)val & 255U);
  #line 291 
  tmp_7 = o;
  #line 291 
  o ++;
  #line 291 
  ;
  #line 291 
  ;
  #line 291 
  if (! ath5k_hw_nvram_read(ah,tmp_7,& val)) 
                                             #line 291 
                                             return -5;
  #line 292 
  ee->ee_pga_desired_size[mode] = (signed char)((int)val >> 8);
  #line 294 
  if (((int)val & 128) != 0) 
                             #line 295 
                             ee->ee_noise_floor_thr[mode] = (short)((int)((short)val) | -256); else 
                                                                    #line 297 
                                                                    ee->ee_noise_floor_thr[mode] = (short)((int)((short)val) & 255);
  #line 299 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 12290U) 
    #line 300 
    if (mode == 0U) 
                    #line 300 
                    ee->ee_noise_floor_thr[mode] = (short)(-54); else 
                                                                   #line 300 
                                                                   ee->ee_noise_floor_thr[mode] = (short)(-1);
  #line 303 
  tmp_9 = o;
  #line 303 
  o ++;
  #line 303 
  ;
  #line 303 
  ;
  #line 303 
  if (! ath5k_hw_nvram_read(ah,tmp_9,& val)) 
                                             #line 303 
                                             return -5;
  #line 304 
  ee->ee_xlna_gain[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 5)) & 255U);
  #line 305 
  ee->ee_x_gain[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 1)) & 15U);
  #line 306 
  ee->ee_xpd[mode] = (unsigned short)((unsigned int)val & 1U);
  #line 308 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16383U && mode != 1U) 
    #line 310 
    ee->ee_fixed_bias[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 13)) & 1U);
  #line 312 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12290U) {
    #line 313 
    u32 tmp_11;
    #line 313 
    tmp_11 = o;
    #line 313 
    o ++;
    #line 313 
    ;
    #line 313 
    ;
    #line 313 
    if (! ath5k_hw_nvram_read(ah,tmp_11,& val)) 
                                                #line 313 
                                                return -5;
    #line 314 
    ee->ee_false_detect[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 6)) & 127U);
    #line 316 
    if (mode == 0U) 
                    #line 317 
                    ee->ee_xr_power[mode] = (unsigned short)((unsigned int)val & 63U);
    else {
      #line 320 
      ee->ee_ob[mode][0] = (unsigned short)((unsigned int)val & 7U);
      #line 321 
      ee->ee_db[mode][0] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 7U);
    }
  }
  #line 325 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 12291U) {
    #line 326 
    ee->ee_i_gain[mode] = (unsigned short)10U;
    #line 327 
    ee->ee_cck_ofdm_power_delta = (unsigned short)15U;
  }
  else {
    #line 331 
    u32 tmp_13;
    #line 329 
    ee->ee_i_gain[mode] = (unsigned short)((int)val >> 13);
    #line 331 
    tmp_13 = o;
    #line 331 
    o ++;
    #line 331 
    ;
    #line 331 
    ;
    #line 331 
    if (! ath5k_hw_nvram_read(ah,tmp_13,& val)) 
                                                #line 331 
                                                return -5;
    #line 332 
    ee->ee_i_gain[mode] = (unsigned short)((int)ee->ee_i_gain[mode] | (((int)val << 3) & 56));
    #line 334 
    if (mode == 2U) {
      #line 335 
      ee->ee_cck_ofdm_power_delta = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 255U);
      #line 336 
      if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16389U) 
        #line 337 
        ee->ee_scaled_cck_delta = (unsigned short)((int)val >> 11);
    }
  }
  #line 341 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16383U && mode == 0U) {
    #line 343 
    ee->ee_i_cal[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 8)) & 63U);
    #line 344 
    ee->ee_q_cal[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 31U);
  }
  #line 347 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 16383U) 
    #line 348 
    goto done;
  #line 353 
  switch (mode) {
    #line 358 
    u32 tmp_15;
    #line 362 
    u32 tmp_17;
    #line 374 
    u32 tmp_19;
    #line 384 
    u32 tmp_21;
    #line 396 
    u32 tmp_23;
    #line 400 
    u32 tmp_25;
    #line 409 
    u32 tmp_27;
    #line 354 
    case (unsigned int)0: 
                          #line 354 
    ;
    #line 355 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 16384U) 
      #line 356 
      break;
    #line 358 
    tmp_15 = o;
    #line 358 
    o ++;
    #line 358 
    ;
    #line 358 
    ;
    #line 358 
    if (! ath5k_hw_nvram_read(ah,tmp_15,& val)) 
                                                #line 358 
                                                return -5;
    #line 359 
    ee->ee_margin_tx_rx[mode] = (unsigned short)((unsigned int)val & 63U);
    #line 360 
    break;
    #line 361 
    case (unsigned int)1: 
                          #line 361 
    ;
    #line 362 
    tmp_17 = o;
    #line 362 
    o ++;
    #line 362 
    ;
    #line 362 
    ;
    #line 362 
    if (! ath5k_hw_nvram_read(ah,tmp_17,& val)) 
                                                #line 362 
                                                return -5;
    #line 364 
    ee->ee_pwr_cal_b[0].freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val & 255),mode);
    #line 366 
    if ((unsigned int)ee->ee_pwr_cal_b[0].freq != 255U) 
                                                        #line 367 
                                                        ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 369 
    ee->ee_pwr_cal_b[1].freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val >> 8),mode);
    #line 371 
    if ((unsigned int)ee->ee_pwr_cal_b[1].freq != 255U) 
                                                        #line 372 
                                                        ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 374 
    tmp_19 = o;
    #line 374 
    o ++;
    #line 374 
    ;
    #line 374 
    ;
    #line 374 
    if (! ath5k_hw_nvram_read(ah,tmp_19,& val)) 
                                                #line 374 
                                                return -5;
    #line 375 
    ee->ee_pwr_cal_b[2].freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val & 255),mode);
    #line 377 
    if ((unsigned int)ee->ee_pwr_cal_b[2].freq != 255U) 
                                                        #line 378 
                                                        ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 380 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16384U) 
      #line 381 
      ee->ee_margin_tx_rx[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 8)) & 63U);
    #line 382 
    break;
    #line 383 
    case (unsigned int)2: 
                          #line 383 
    ;
    #line 384 
    tmp_21 = o;
    #line 384 
    o ++;
    #line 384 
    ;
    #line 384 
    ;
    #line 384 
    if (! ath5k_hw_nvram_read(ah,tmp_21,& val)) 
                                                #line 384 
                                                return -5;
    #line 386 
    ee->ee_pwr_cal_g[0].freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val & 255),mode);
    #line 388 
    if ((unsigned int)ee->ee_pwr_cal_g[0].freq != 255U) 
                                                        #line 389 
                                                        ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 391 
    ee->ee_pwr_cal_g[1].freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val >> 8),mode);
    #line 393 
    if ((unsigned int)ee->ee_pwr_cal_g[1].freq != 255U) 
                                                        #line 394 
                                                        ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 396 
    tmp_23 = o;
    #line 396 
    o ++;
    #line 396 
    ;
    #line 396 
    ;
    #line 396 
    if (! ath5k_hw_nvram_read(ah,tmp_23,& val)) 
                                                #line 396 
                                                return -5;
    #line 397 
    ee->ee_turbo_max_power[mode] = (unsigned short)((unsigned int)val & 127U);
    #line 398 
    ee->ee_xr_power[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 7)) & 63U);
    #line 400 
    tmp_25 = o;
    #line 400 
    o ++;
    #line 400 
    ;
    #line 400 
    ;
    #line 400 
    if (! ath5k_hw_nvram_read(ah,tmp_25,& val)) 
                                                #line 400 
                                                return -5;
    #line 401 
    ee->ee_pwr_cal_g[2].freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val & 255),mode);
    #line 403 
    if ((unsigned int)ee->ee_pwr_cal_g[2].freq != 255U) 
                                                        #line 404 
                                                        ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 406 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16384U) 
      #line 407 
      ee->ee_margin_tx_rx[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 8)) & 63U);
    #line 409 
    tmp_27 = o;
    #line 409 
    o ++;
    #line 409 
    ;
    #line 409 
    ;
    #line 409 
    if (! ath5k_hw_nvram_read(ah,tmp_27,& val)) 
                                                #line 409 
                                                return -5;
    #line 410 
    ee->ee_i_cal[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 5)) & 63U);
    #line 411 
    ee->ee_q_cal[mode] = (unsigned short)((unsigned int)val & 31U);
    #line 413 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16385U) {
      #line 414 
      u32 tmp_29;
      #line 414 
      tmp_29 = o;
      #line 414 
      o ++;
      #line 414 
      ;
      #line 414 
      ;
      #line 414 
      if (! ath5k_hw_nvram_read(ah,tmp_29,& val)) 
                                                  #line 414 
                                                  return -5;
      #line 415 
      ee->ee_cck_ofdm_gain_delta = (unsigned short)((unsigned int)val & 255U);
    }
    #line 417 
    break;
  }
  #line 423 
  if ((unsigned int)ee->ee_version <= 20479U) 
                                              #line 424 
                                              goto done;
  #line 426 
  switch (mode) {
    #line 431 
    u32 tmp_31;
    #line 436 
    u32 tmp_33;
    #line 447 
    u32 tmp_35;
    #line 452 
    u32 tmp_37;
    #line 427 
    case (unsigned int)0: 
                          #line 427 
    ;
    #line 428 
    ee->ee_switch_settling_turbo[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 6)) & 127U);
    #line 430 
    ee->ee_atn_tx_rx_turbo[mode] = (unsigned short)((int)val >> 13);
    #line 431 
    tmp_31 = o;
    #line 431 
    o ++;
    #line 431 
    ;
    #line 431 
    ;
    #line 431 
    if (! ath5k_hw_nvram_read(ah,tmp_31,& val)) 
                                                #line 431 
                                                return -5;
    #line 432 
    ee->ee_atn_tx_rx_turbo[mode] = (unsigned short)((int)ee->ee_atn_tx_rx_turbo[mode] | (((int)val << 3) & 56));
    #line 433 
    ee->ee_margin_tx_rx_turbo[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 63U);
    #line 435 
    ee->ee_adc_desired_size_turbo[mode] = (signed char)((int)((signed char)((int)val >> 9)) & 127);
    #line 436 
    tmp_33 = o;
    #line 436 
    o ++;
    #line 436 
    ;
    #line 436 
    ;
    #line 436 
    if (! ath5k_hw_nvram_read(ah,tmp_33,& val)) 
                                                #line 436 
                                                return -5;
    #line 437 
    ee->ee_adc_desired_size_turbo[mode] = (signed char)((int)ee->ee_adc_desired_size_turbo[mode] | (int)((signed char)((int)val << 7)));
    #line 438 
    ee->ee_pga_desired_size_turbo[mode] = (signed char)((int)val >> 1);
    #line 440 
    if ((((int)ee->ee_misc0 >> 14) & 2) != 0) 
                                              #line 441 
                                              ee->ee_pd_gain_overlap = (signed char)((int)((signed char)((int)val >> 9)) & 15);
    #line 442 
    break;
    #line 443 
    case (unsigned int)2: 
                          #line 443 
    ;
    #line 444 
    ee->ee_switch_settling_turbo[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 8)) & 127U);
    #line 446 
    ee->ee_atn_tx_rx_turbo[mode] = (unsigned short)((int)val >> 15);
    #line 447 
    tmp_35 = o;
    #line 447 
    o ++;
    #line 447 
    ;
    #line 447 
    ;
    #line 447 
    if (! ath5k_hw_nvram_read(ah,tmp_35,& val)) 
                                                #line 447 
                                                return -5;
    #line 448 
    ee->ee_atn_tx_rx_turbo[mode] = (unsigned short)((int)ee->ee_atn_tx_rx_turbo[mode] | (((int)val << 1) & 62));
    #line 449 
    ee->ee_margin_tx_rx_turbo[mode] = (unsigned short)((unsigned int)((unsigned short)((int)val >> 5)) & 63U);
    #line 451 
    ee->ee_adc_desired_size_turbo[mode] = (signed char)((int)((signed char)((int)val >> 11)) & 127);
    #line 452 
    tmp_37 = o;
    #line 452 
    o ++;
    #line 452 
    ;
    #line 452 
    ;
    #line 452 
    if (! ath5k_hw_nvram_read(ah,tmp_37,& val)) 
                                                #line 452 
                                                return -5;
    #line 453 
    ee->ee_adc_desired_size_turbo[mode] = (signed char)((int)ee->ee_adc_desired_size_turbo[mode] | (int)((signed char)((int)val << 5)));
    #line 454 
    ee->ee_pga_desired_size_turbo[mode] = (signed char)((int)val >> 3);
    #line 455 
    break;
  }
  #line 458 
  done: 
        #line 458 
  ;
  #line 460 
  *offset = o;
  #line 462 
  return 0;
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_init_modes(struct ath5k_hw *ah)
{
  #line 470 
  u32 mode_offset[3U];
  #line 471 
  unsigned int mode;
  #line 472 
  u32 offset;
  #line 473 
  int ret;
  #line 469 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 478 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12290U) 
    #line 478 
    mode_offset[0] = 212U; else 
                                #line 478 
                                mode_offset[0] = 197U;
  #line 479 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12290U) 
    #line 479 
    mode_offset[1] = 242U; else 
                                #line 479 
                                mode_offset[1] = 208U;
  #line 480 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12290U) 
    #line 480 
    mode_offset[2] = 269U; else 
                                #line 480 
                                mode_offset[2] = 218U;
  #line 482 
  ee->ee_turbo_max_power[0] = (unsigned short)((unsigned int)((unsigned short)((int)ee->ee_header >> 4)) & 127U);
  #line 485 
  mode = 0U;
  #line 485 
  while (mode <= 2U) {
    #line 486 
    offset = mode_offset[mode];
    #line 488 
    ret = ath5k_eeprom_read_ants(ah,& offset,mode);
    #line 489 
    if (ret != 0) 
                  #line 490 
                  return ret;
    #line 492 
    ret = ath5k_eeprom_read_modes(ah,& offset,mode);
    #line 493 
    if (ret != 0) 
                  #line 494 
                  return ret;
    #line 485 
    mode ++;
  }
  #line 498 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version <= 12290U) {
    #line 499 
    ee->ee_thr_62[0] = (unsigned short)15U;
    #line 500 
    ee->ee_thr_62[1] = (unsigned short)28U;
    #line 501 
    ee->ee_thr_62[2] = (unsigned short)28U;
  }
  #line 504 
  return 0;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
__inline static int ath5k_eeprom_read_freq_list(struct ath5k_hw *ah, int *offset, int max, struct ath5k_chan_pcal_info *pc, unsigned int mode)
{
  #line 516 
  u8 freq1;
  #line 516 
  u8 freq2;
  #line 517 
  u16 val;
  #line 513 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 514 
  int o = *offset;
  #line 515 
  int i = 0;
  #line 519 
  ee->ee_n_piers[mode] = (unsigned char)0U;
  #line 520 
  while (i < max) {
    #line 521 
    int tmp;
    #line 527 
    int tmp_1;
    #line 535 
    int tmp_2;
    #line 521 
    tmp = o;
    #line 521 
    o ++;
    #line 521 
    ;
    #line 521 
    ;
    #line 521 
    if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp,& val)) 
                                                           #line 521 
                                                           return -5;
    #line 523 
    freq1 = (unsigned char)val;
    #line 524 
    if ((unsigned int)freq1 == 0U) 
                                   #line 525 
                                   break;
    #line 527 
    tmp_1 = i;
    #line 527 
    i ++;
    #line 527 
    (pc + (unsigned long)tmp_1)->freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)freq1),mode);
    #line 529 
    ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
    #line 531 
    freq2 = (unsigned char)((int)val >> 8);
    #line 532 
    if ((unsigned int)freq2 == 0U) 
                                   #line 533 
                                   break;
    #line 535 
    tmp_2 = i;
    #line 535 
    i ++;
    #line 535 
    (pc + (unsigned long)tmp_2)->freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)freq2),mode);
    #line 537 
    ee->ee_n_piers[mode] = (u8)((int)ee->ee_n_piers[mode] + 1);
  }
  #line 541 
  *offset = o;
  #line 543 
  return 0;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_init_11a_pcal_freq(struct ath5k_hw *ah, int offset)
{
  #line 552 
  int i;
  #line 553 
  u16 val;
  #line 554 
  u8 mask;
  #line 550 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 551 
  struct ath5k_chan_pcal_info *pcal = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_a);
  #line 556 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 557 
                                             ath5k_eeprom_read_freq_list(ah,& offset,10,pcal,0U);
  else {
    #line 563 
    int tmp;
    #line 568 
    int tmp_1;
    #line 573 
    int tmp_3;
    #line 578 
    int tmp_5;
    #line 584 
    int tmp_7;
    #line 561 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12290U) 
      #line 561 
      mask = (unsigned char)255U; else 
                                       #line 561 
                                       mask = (unsigned char)127U;
    #line 563 
    tmp = offset;
    #line 563 
    offset ++;
    #line 563 
    ;
    #line 563 
    ;
    #line 563 
    if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp,& val)) 
                                                           #line 563 
                                                           return -5;
    #line 564 
    pcal->freq = (unsigned short)((int)((unsigned short)((int)val >> 9)) & (int)((unsigned short)mask));
    #line 565 
    (pcal + 1U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 2)) & (int)((unsigned short)mask));
    #line 566 
    (pcal + 2U)->freq = (unsigned short)(((int)val << 5) & (int)mask);
    #line 568 
    tmp_1 = offset;
    #line 568 
    offset ++;
    #line 568 
    ;
    #line 568 
    ;
    #line 568 
    if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_1,& val)) 
                                                             #line 568 
                                                             return -5;
    #line 569 
    (pcal + 2U)->freq = (unsigned short)((int)(pcal + 2U)->freq | ((int)val >> 11));
    #line 570 
    (pcal + 3U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 4)) & (int)((unsigned short)mask));
    #line 571 
    (pcal + 4U)->freq = (unsigned short)(((int)val << 3) & (int)mask);
    #line 573 
    tmp_3 = offset;
    #line 573 
    offset ++;
    #line 573 
    ;
    #line 573 
    ;
    #line 573 
    if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_3,& val)) 
                                                             #line 573 
                                                             return -5;
    #line 574 
    (pcal + 4U)->freq = (unsigned short)((int)(pcal + 4U)->freq | ((int)val >> 13));
    #line 575 
    (pcal + 5U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 6)) & (int)((unsigned short)mask));
    #line 576 
    (pcal + 6U)->freq = (unsigned short)(((int)val << 1) & (int)mask);
    #line 578 
    tmp_5 = offset;
    #line 578 
    offset ++;
    #line 578 
    ;
    #line 578 
    ;
    #line 578 
    if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_5,& val)) 
                                                             #line 578 
                                                             return -5;
    #line 579 
    (pcal + 6U)->freq = (unsigned short)((int)(pcal + 6U)->freq | ((int)val >> 15));
    #line 580 
    (pcal + 7U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 8)) & (int)((unsigned short)mask));
    #line 581 
    (pcal + 8U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 1)) & (int)((unsigned short)mask));
    #line 582 
    (pcal + 9U)->freq = (unsigned short)(((int)val << 6) & (int)mask);
    #line 584 
    tmp_7 = offset;
    #line 584 
    offset ++;
    #line 584 
    ;
    #line 584 
    ;
    #line 584 
    if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_7,& val)) 
                                                             #line 584 
                                                             return -5;
    #line 585 
    (pcal + 9U)->freq = (unsigned short)((int)(pcal + 9U)->freq | ((int)val >> 10));
    #line 588 
    ee->ee_n_piers[0] = (unsigned char)10U;
    #line 590 
    i = 0;
    #line 590 
    while (i <= 9) {
      #line 591 
      (pcal + (unsigned long)i)->freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)(pcal + (unsigned long)i)->freq),0U);
      #line 590 
      i ++;
    }
  }
  #line 596 
  return 0;
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
__inline static int ath5k_eeprom_init_11bg_2413(struct ath5k_hw *ah, unsigned int mode, int offset)
{
  #line 604 
  struct ath5k_chan_pcal_info *pcal;
  #line 603 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 606 
  switch (mode) {
    #line 607 
    case (unsigned int)1: 
                          #line 607 
    ;
    #line 608 
    pcal = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_b);
    #line 609 
    break;
    #line 610 
    case (unsigned int)2: 
                          #line 610 
    ;
    #line 611 
    pcal = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_g);
    #line 612 
    break;
    #line 613 
    default: 
             #line 613 
    ;
    #line 614 
    return -22;
  }
  #line 617 
  ath5k_eeprom_read_freq_list(ah,& offset,4,pcal,mode);
  #line 621 
  return 0;
}

#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
__inline static void ath5k_get_pcdac_intercepts(struct ath5k_hw *ah, u8 min, u8 max, u8 *vp)
{
  #line 654 
  u16 *ip;
  #line 655 
  int i;
  #line 648 
  u16 intercepts3[11U] = {(unsigned short)0U, (unsigned short)5U, (unsigned short)10U, (unsigned short)20U, (unsigned short)30U, (unsigned short)50U, (unsigned short)70U, (unsigned short)85U, (unsigned short)90U, (unsigned short)95U, (unsigned short)100U};
  #line 651 
  u16 intercepts3_2[11U] = {(unsigned short)0U, (unsigned short)10U, (unsigned short)20U, (unsigned short)30U, (unsigned short)40U, (unsigned short)50U, (unsigned short)60U, (unsigned short)70U, (unsigned short)80U, (unsigned short)90U, (unsigned short)100U};
  #line 657 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 12289U) 
    #line 658 
    ip = (u16 *)(& intercepts3_2); else 
                                        #line 660 
                                        ip = (u16 *)(& intercepts3);
  #line 662 
  i = 0;
  #line 662 
  while ((unsigned int)i <= 10U) {
    #line 663 
    *(vp + (unsigned long)i) = (unsigned char)(((int)*(ip + (unsigned long)i) * (int)max + (100 - (int)*(ip + (unsigned long)i)) * (int)min) / 100);
    #line 662 
    i ++;
  }
  #line 664 
  return;
}

#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_free_pcal_info(struct ath5k_hw *ah, int mode)
{
  #line 670 
  struct ath5k_chan_pcal_info *chinfo;
  #line 671 
  u8 pier;
  #line 671 
  u8 pdg;
  #line 669 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 673 
  switch (mode) {
    #line 674 
    case 0: 
            #line 674 
    ;
    #line 675 
    if (((int)ee->ee_header & 1) == 0) 
                                       #line 676 
                                       return 0;
    #line 677 
    chinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_a);
    #line 678 
    break;
    #line 679 
    case 1: 
            #line 679 
    ;
    #line 680 
    if ((((int)ee->ee_header >> 1) & 1) == 0) 
                                              #line 681 
                                              return 0;
    #line 682 
    chinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_b);
    #line 683 
    break;
    #line 684 
    case 2: 
            #line 684 
    ;
    #line 685 
    if ((((int)ee->ee_header >> 2) & 1) == 0) 
                                              #line 686 
                                              return 0;
    #line 687 
    chinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_g);
    #line 688 
    break;
    #line 689 
    default: 
             #line 689 
    ;
    #line 690 
    return -22;
  }
  #line 693 
  pier = (unsigned char)0U;
  #line 693 
  while ((int)ee->ee_n_piers[mode] > (int)pier) {
    #line 694 
    if ((chinfo + (unsigned long)pier)->pd_curves == (struct ath5k_pdgain_info *)0) 
      #line 695 
      goto __Cont;
    #line 697 
    pdg = (unsigned char)0U;
    #line 697 
    while ((unsigned int)pdg <= 3U) {
      {
        #line 698 
        struct ath5k_pdgain_info *pd = (chinfo + (unsigned long)pier)->pd_curves + (unsigned long)pdg;
        #line 701 
        kfree((void *)pd->pd_step);
        #line 702 
        kfree((void *)pd->pd_pwr);
      }
      #line 697 
      pdg = (u8)((int)pdg + 1);
    }
    #line 705 
    kfree((void *)(chinfo + (unsigned long)pier)->pd_curves);
    #line 693 
    __Cont: 
            #line 693 
    pier = (u8)((int)pier + 1);
  }
  #line 708 
  return 0;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_convert_pcal_info_5111(struct ath5k_hw *ah, int mode, struct ath5k_chan_pcal_info *chinfo)
{
  #line 718 
  struct ath5k_chan_pcal_info_rf5111 *pcinfo;
  #line 719 
  struct ath5k_pdgain_info *pd;
  #line 720 
  u8 pier;
  #line 720 
  u8 point;
  #line 720 
  u8 idx;
  #line 717 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 721 
  u8 *pdgain_idx = (u8 *)(& ee->ee_pdc_to_idx[mode]);
  #line 724 
  pier = (unsigned char)0U;
  #line 724 
  while ((int)ee->ee_n_piers[mode] > (int)pier) {
    #line 726 
    pcinfo = & (chinfo + (unsigned long)pier)->__anonCompField_ath5k_chan_pcal_info_198.rf5111_info;
    #line 730 
    (chinfo + (unsigned long)pier)->pd_curves = (struct ath5k_pdgain_info *)kcalloc_0(4UL,24UL,3264U);
    #line 734 
    if ((chinfo + (unsigned long)pier)->pd_curves == (struct ath5k_pdgain_info *)0) 
      #line 735 
      goto err_out;
    #line 741 
    idx = (unsigned char)0U;
    #line 741 
    while ((unsigned int)idx <= 3U) {
      #line 743 
      if ((((int)ee->ee_x_gain[mode] >> (int)idx) & 1) == 0) {
        #line 744 
        *pdgain_idx = idx;
        #line 745 
        break;
      }
      #line 741 
      idx = (u8)((int)idx + 1);
    }
    #line 749 
    ee->ee_pd_gains[mode] = (unsigned char)1U;
    #line 751 
    pd = (chinfo + (unsigned long)pier)->pd_curves + (unsigned long)idx;
    #line 753 
    pd->pd_points = (unsigned char)11U;
    #line 756 
    pd->pd_step = (u8 *)kcalloc_0(11UL,1UL,3264U);
    #line 758 
    if (pd->pd_step == (u8 *)0U) 
                                 #line 759 
                                 goto err_out;
    #line 761 
    pd->pd_pwr = (s16 *)kcalloc_0(11UL,2UL,3264U);
    #line 763 
    if (pd->pd_pwr == (s16 *)0) 
                                #line 764 
                                goto err_out;
    #line 769 
    point = (unsigned char)0U;
    #line 769 
    while ((int)pd->pd_points > (int)point) {
      #line 772 
      *(pd->pd_pwr + (unsigned long)point) = (short)((unsigned int)pcinfo->pwr[(int)point] * 2U);
      #line 775 
      *(pd->pd_step + (unsigned long)point) = pcinfo->pcdac[(int)point];
      #line 769 
      point = (u8)((int)point + 1);
    }
    #line 779 
    (chinfo + (unsigned long)pier)->min_pwr = *(pd->pd_pwr);
    #line 780 
    (chinfo + (unsigned long)pier)->max_pwr = *(pd->pd_pwr + 10U);
    #line 724 
    pier = (u8)((int)pier + 1);
  }
  #line 784 
  return 0;
  #line 786 
  err_out: 
           #line 786 
  ;
  #line 787 
  ath5k_eeprom_free_pcal_info(ah,mode);
  #line 788 
  return -12;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_pcal_info_5111(struct ath5k_hw *ah, int mode)
{
  #line 796 
  struct ath5k_chan_pcal_info *pcal;
  #line 797 
  int offset;
  #line 797 
  int ret;
  #line 798 
  int i;
  #line 799 
  u16 val;
  #line 795 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 801 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 801 
                                             offset = 336; else 
                                                                #line 801 
                                                                offset = 256;
  #line 802 
  switch (mode) {
    #line 803 
    case 0: 
            #line 803 
    ;
    #line 804 
    if (((int)ee->ee_header & 1) == 0) 
                                       #line 805 
                                       return 0;
    #line 807 
    ret = ath5k_eeprom_init_11a_pcal_freq(ah,offset);
    #line 809 
    if (ret < 0) 
                 #line 810 
                 return ret;
    #line 812 
    offset += 5;
    #line 813 
    pcal = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_a);
    #line 814 
    break;
    #line 815 
    case 1: 
            #line 815 
    ;
    #line 816 
    if ((((int)ee->ee_header >> 1) & 1) == 0 && (((int)ee->ee_header >> 2) & 1) == 0) 
      #line 818 
      return 0;
    #line 820 
    pcal = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_b);
    #line 821 
    offset += 55;
    #line 824 
    pcal->freq = (unsigned short)2412U;
    #line 825 
    (pcal + 1U)->freq = (unsigned short)2447U;
    #line 826 
    (pcal + 2U)->freq = (unsigned short)2484U;
    #line 827 
    ee->ee_n_piers[mode] = (unsigned char)3U;
    #line 828 
    break;
    #line 829 
    case 2: 
            #line 829 
    ;
    #line 830 
    if ((((int)ee->ee_header >> 2) & 1) == 0) 
                                              #line 831 
                                              return 0;
    #line 833 
    pcal = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_g);
    #line 834 
    offset += 70;
    #line 837 
    pcal->freq = (unsigned short)2312U;
    #line 838 
    (pcal + 1U)->freq = (unsigned short)2412U;
    #line 839 
    (pcal + 2U)->freq = (unsigned short)2484U;
    #line 840 
    ee->ee_n_piers[mode] = (unsigned char)3U;
    #line 841 
    break;
    #line 842 
    default: 
             #line 842 
    ;
    #line 843 
    return -22;
  }
  #line 846 
  i = 0;
  #line 846 
  while ((int)ee->ee_n_piers[mode] > i) {
    {
      #line 850 
      int tmp;
      #line 855 
      int tmp_1;
      #line 861 
      int tmp_3;
      #line 866 
      int tmp_5;
      #line 871 
      int tmp_7;
      #line 847 
      struct ath5k_chan_pcal_info_rf5111 *cdata = & (pcal + (unsigned long)i)->__anonCompField_ath5k_chan_pcal_info_198.rf5111_info;
      #line 850 
      tmp = offset;
      #line 850 
      offset ++;
      #line 850 
      ;
      #line 850 
      ;
      #line 850 
      if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp,& val)) 
                                                             #line 850 
                                                             return -5;
      #line 851 
      cdata->pcdac_max = (unsigned char)((unsigned int)((unsigned char)((int)val >> 10)) & 63U);
      #line 852 
      cdata->pcdac_min = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
      #line 853 
      cdata->pwr[0] = (unsigned char)((unsigned int)((unsigned char)((int)val << 2)) & 63U);
      #line 855 
      tmp_1 = offset;
      #line 855 
      offset ++;
      #line 855 
      ;
      #line 855 
      ;
      #line 855 
      if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_1,& val)) 
                                                               #line 855 
                                                               return -5;
      #line 856 
      cdata->pwr[0] = (unsigned char)((int)cdata->pwr[0] | (((int)val >> 14) & 3));
      #line 857 
      cdata->pwr[1] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 8)) & 63U);
      #line 858 
      cdata->pwr[2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 2)) & 63U);
      #line 859 
      cdata->pwr[3] = (unsigned char)((unsigned int)((unsigned char)((int)val << 4)) & 63U);
      #line 861 
      tmp_3 = offset;
      #line 861 
      offset ++;
      #line 861 
      ;
      #line 861 
      ;
      #line 861 
      if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_3,& val)) 
                                                               #line 861 
                                                               return -5;
      #line 862 
      cdata->pwr[3] = (unsigned char)((int)cdata->pwr[3] | (((int)val >> 12) & 15));
      #line 863 
      cdata->pwr[4] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 6)) & 63U);
      #line 864 
      cdata->pwr[5] = (unsigned char)((unsigned int)((unsigned char)val) & 63U);
      #line 866 
      tmp_5 = offset;
      #line 866 
      offset ++;
      #line 866 
      ;
      #line 866 
      ;
      #line 866 
      if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_5,& val)) 
                                                               #line 866 
                                                               return -5;
      #line 867 
      cdata->pwr[6] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 10)) & 63U);
      #line 868 
      cdata->pwr[7] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
      #line 869 
      cdata->pwr[8] = (unsigned char)((unsigned int)((unsigned char)((int)val << 2)) & 63U);
      #line 871 
      tmp_7 = offset;
      #line 871 
      offset ++;
      #line 871 
      ;
      #line 871 
      ;
      #line 871 
      if (! ath5k_hw_nvram_read(ah,(unsigned int)tmp_7,& val)) 
                                                               #line 871 
                                                               return -5;
      #line 872 
      cdata->pwr[8] = (unsigned char)((int)cdata->pwr[8] | (((int)val >> 14) & 3));
      #line 873 
      cdata->pwr[9] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 8)) & 63U);
      #line 874 
      cdata->pwr[10] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 2)) & 63U);
      #line 876 
      ath5k_get_pcdac_intercepts(ah,(unsigned char)((int)cdata->pcdac_min),(unsigned char)((int)cdata->pcdac_max),(u8 *)(& cdata->pcdac));
    }
    #line 846 
    i ++;
  }
  #line 880 
  return ath5k_eeprom_convert_pcal_info_5111(ah,mode,pcal);
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_convert_pcal_info_5112(struct ath5k_hw *ah, int mode, struct ath5k_chan_pcal_info *chinfo)
{
  #line 906 
  struct ath5k_chan_pcal_info_rf5112 *pcinfo;
  #line 908 
  unsigned int pier;
  #line 908 
  unsigned int pdg;
  #line 908 
  unsigned int point;
  #line 905 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 907 
  u8 *pdgain_idx = (u8 *)(& ee->ee_pdc_to_idx[mode]);
  #line 911 
  pier = 0U;
  #line 911 
  while ((unsigned int)ee->ee_n_piers[mode] > pier) {
    #line 913 
    pcinfo = & (chinfo + (unsigned long)pier)->__anonCompField_ath5k_chan_pcal_info_198.rf5112_info;
    #line 917 
    (chinfo + (unsigned long)pier)->pd_curves = (struct ath5k_pdgain_info *)kcalloc_0(4UL,24UL,3264U);
    #line 921 
    if ((chinfo + (unsigned long)pier)->pd_curves == (struct ath5k_pdgain_info *)0) 
      #line 922 
      goto err_out;
    #line 925 
    pdg = 0U;
    #line 925 
    while ((unsigned int)ee->ee_pd_gains[mode] > pdg) {
      {
        #line 927 
        u8 idx = *(pdgain_idx + (unsigned long)pdg);
        #line 928 
        struct ath5k_pdgain_info *pd = (chinfo + (unsigned long)pier)->pd_curves + (unsigned long)idx;
        #line 932 
        if (pdg == 0U) {
          #line 934 
          pd->pd_points = (unsigned char)4U;
          #line 937 
          pd->pd_step = (u8 *)kcalloc_0((unsigned long)pd->pd_points,1UL,3264U);
          #line 940 
          if (pd->pd_step == (u8 *)0U) 
                                       #line 941 
                                       goto err_out;
          #line 943 
          pd->pd_pwr = (s16 *)kcalloc_0((unsigned long)pd->pd_points,2UL,3264U);
          #line 946 
          if (pd->pd_pwr == (s16 *)0) 
                                      #line 947 
                                      goto err_out;
          #line 951 
          *(pd->pd_step) = pcinfo->pcdac_x0[0];
          #line 952 
          *(pd->pd_pwr) = (short)pcinfo->pwr_x0[0];
          #line 954 
          point = 1U;
          #line 954 
          while ((unsigned int)pd->pd_points > point) {
            #line 957 
            *(pd->pd_pwr + (unsigned long)point) = (short)pcinfo->pwr_x0[point];
            #line 961 
            *(pd->pd_step + (unsigned long)point) = (unsigned char)((int)*(pd->pd_step + (unsigned long)(point + 4294967295U)) + (int)pcinfo->pcdac_x0[point]);
            #line 954 
            point ++;
          }
          #line 967 
          (chinfo + (unsigned long)pier)->min_pwr = *(pd->pd_pwr);
        }
        else 
          #line 970 
          if (pdg == 1U) {
            #line 972 
            pd->pd_points = (unsigned char)3U;
            #line 975 
            pd->pd_step = (u8 *)kcalloc_0((unsigned long)pd->pd_points,1UL,3264U);
            #line 978 
            if (pd->pd_step == (u8 *)0U) 
                                         #line 979 
                                         goto err_out;
            #line 981 
            pd->pd_pwr = (s16 *)kcalloc_0((unsigned long)pd->pd_points,2UL,3264U);
            #line 984 
            if (pd->pd_pwr == (s16 *)0) 
                                        #line 985 
                                        goto err_out;
            #line 989 
            point = 0U;
            #line 989 
            while ((unsigned int)pd->pd_points > point) {
              #line 992 
              *(pd->pd_pwr + (unsigned long)point) = (short)pcinfo->pwr_x3[point];
              #line 996 
              *(pd->pd_step + (unsigned long)point) = pcinfo->pcdac_x3[point];
              #line 989 
              point ++;
            }
            #line 1002 
            (chinfo + (unsigned long)pier)->min_pwr = *(pd->pd_pwr);
          }
      }
      #line 925 
      pdg ++;
    }
    #line 911 
    pier ++;
  }
  #line 1007 
  return 0;
  #line 1009 
  err_out: 
           #line 1009 
  ;
  #line 1010 
  ath5k_eeprom_free_pcal_info(ah,mode);
  #line 1011 
  return -12;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_pcal_info_5112(struct ath5k_hw *ah, int mode)
{
  #line 1019 
  struct ath5k_chan_pcal_info_rf5112 *chan_pcal_info;
  #line 1020 
  struct ath5k_chan_pcal_info *gen_chan_info;
  #line 1022 
  u32 offset;
  #line 1023 
  u8 i;
  #line 1023 
  u8 c;
  #line 1024 
  u16 val;
  #line 1018 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1021 
  u8 *pdgain_idx = (u8 *)(& ee->ee_pdc_to_idx[mode]);
  #line 1025 
  u8 pd_gains = (unsigned char)0U;
  #line 1032 
  i = (unsigned char)0U;
  #line 1032 
  while ((unsigned int)i <= 3U) {
    #line 1034 
    if ((((int)ee->ee_x_gain[mode] >> (int)i) & 1) != 0) {
      #line 1035 
      u8 tmp;
      #line 1035 
      tmp = pd_gains;
      #line 1035 
      pd_gains = (u8)((int)pd_gains + 1);
      #line 1035 
      *(pdgain_idx + (unsigned long)tmp) = i;
    }
    #line 1032 
    i = (u8)((int)i + 1);
  }
  #line 1037 
  ee->ee_pd_gains[mode] = pd_gains;
  #line 1039 
  if ((unsigned int)pd_gains + 255U > 1U) 
                                          #line 1040 
                                          return -22;
  #line 1042 
  switch (mode) {
    #line 1043 
    case 0: 
            #line 1043 
    ;
    #line 1047 
    if ((unsigned int)ee->ee_version > 12290U) 
                                               #line 1047 
                                               offset = 336U; else 
                                                                   #line 1047 
                                                                   offset = 256U;
    #line 1048 
    ath5k_eeprom_init_11a_pcal_freq(ah,(int)offset);
    #line 1050 
    offset += 5U;
    #line 1051 
    gen_chan_info = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_a);
    #line 1052 
    break;
    #line 1053 
    case 1: 
            #line 1053 
    ;
    #line 1054 
    if ((unsigned int)ee->ee_version > 12290U) 
                                               #line 1054 
                                               offset = 336U; else 
                                                                   #line 1054 
                                                                   offset = 256U;
    #line 1055 
    if (((int)ee->ee_header & 1) != 0) 
                                       #line 1056 
                                       offset += 55U;
    #line 1059 
    gen_chan_info = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_b);
    #line 1060 
    break;
    #line 1061 
    case 2: 
            #line 1061 
    ;
    #line 1062 
    if ((unsigned int)ee->ee_version > 12290U) 
                                               #line 1062 
                                               offset = 336U; else 
                                                                   #line 1062 
                                                                   offset = 256U;
    #line 1063 
    if (((int)ee->ee_header & 1) != 0) 
                                       #line 1064 
                                       offset += 70U;
    else 
      #line 1065 
      if ((((int)ee->ee_header >> 1) & 1) != 0) 
                                                #line 1066 
                                                offset += 5U;
    #line 1069 
    gen_chan_info = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_g);
    #line 1070 
    break;
    #line 1071 
    default: 
             #line 1071 
    ;
    #line 1072 
    return -22;
  }
  #line 1075 
  i = (unsigned char)0U;
  #line 1075 
  while ((int)ee->ee_n_piers[mode] > (int)i) {
    {
      #line 1090 
      u32 tmp_2;
      #line 1098 
      u32 tmp_4;
      #line 1102 
      u32 tmp_6;
      #line 1076 
      chan_pcal_info = & (gen_chan_info + (unsigned long)i)->__anonCompField_ath5k_chan_pcal_info_198.rf5112_info;
      #line 1081 
      c = (unsigned char)0U;
      #line 1081 
      while ((unsigned int)c <= 3U) {
        {
          #line 1082 
          u32 tmp_0;
          #line 1082 
          tmp_0 = offset;
          #line 1082 
          offset ++;
          #line 1082 
          ;
          #line 1082 
          ;
          #line 1082 
          if (! ath5k_hw_nvram_read(ah,tmp_0,& val)) 
                                                     #line 1082 
                                                     return -5;
          #line 1083 
          chan_pcal_info->pwr_x0[(int)c] = (signed char)val;
          #line 1084 
          c = (u8)((int)c + 1);
          #line 1084 
          chan_pcal_info->pwr_x0[(int)c] = (signed char)((int)val >> 8);
        }
        #line 1081 
        c = (u8)((int)c + 1);
      }
      #line 1090 
      tmp_2 = offset;
      #line 1090 
      offset ++;
      #line 1090 
      ;
      #line 1090 
      ;
      #line 1090 
      if (! ath5k_hw_nvram_read(ah,tmp_2,& val)) 
                                                 #line 1090 
                                                 return -5;
      #line 1091 
      chan_pcal_info->pcdac_x0[1] = (unsigned char)((unsigned int)((unsigned char)val) & 31U);
      #line 1092 
      chan_pcal_info->pcdac_x0[2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 5)) & 31U);
      #line 1093 
      chan_pcal_info->pcdac_x0[3] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 10)) & 31U);
      #line 1098 
      tmp_4 = offset;
      #line 1098 
      offset ++;
      #line 1098 
      ;
      #line 1098 
      ;
      #line 1098 
      if (! ath5k_hw_nvram_read(ah,tmp_4,& val)) 
                                                 #line 1098 
                                                 return -5;
      #line 1099 
      chan_pcal_info->pwr_x3[0] = (signed char)val;
      #line 1100 
      chan_pcal_info->pwr_x3[1] = (signed char)((int)val >> 8);
      #line 1102 
      tmp_6 = offset;
      #line 1102 
      offset ++;
      #line 1102 
      ;
      #line 1102 
      ;
      #line 1102 
      if (! ath5k_hw_nvram_read(ah,tmp_6,& val)) 
                                                 #line 1102 
                                                 return -5;
      #line 1103 
      chan_pcal_info->pwr_x3[2] = (signed char)val;
      #line 1108 
      chan_pcal_info->pcdac_x3[0] = (unsigned char)20U;
      #line 1109 
      chan_pcal_info->pcdac_x3[1] = (unsigned char)35U;
      #line 1110 
      chan_pcal_info->pcdac_x3[2] = (unsigned char)63U;
      #line 1112 
      if ((unsigned int)ee->ee_version > 16386U) {
        #line 1113 
        chan_pcal_info->pcdac_x0[0] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 8)) & 63U);
        #line 1116 
        (gen_chan_info + (unsigned long)i)->max_pwr = (short)chan_pcal_info->pwr_x0[3];
      }
      else {
        #line 1118 
        chan_pcal_info->pcdac_x0[0] = (unsigned char)1U;
        #line 1119 
        (gen_chan_info + (unsigned long)i)->max_pwr = (short)((signed char)((int)val >> 8));
      }
    }
    #line 1075 
    i = (u8)((int)i + 1);
  }
  #line 1124 
  return ath5k_eeprom_convert_pcal_info_5112(ah,mode,gen_chan_info);
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
__inline static unsigned int ath5k_pdgains_size_2413(struct ath5k_eeprom_info *ee, unsigned int mode)
{
  #line 1154 
  unsigned int sz;
  #line 1153 
  unsigned int pdgains_size[4U] = {4U, 6U, 9U, 12U};
  #line 1156 
  sz = pdgains_size[(int)ee->ee_pd_gains[mode] + -1];
  #line 1157 
  sz = (unsigned int)ee->ee_n_piers[mode] * sz;
  #line 1159 
  return sz;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static unsigned int ath5k_cal_data_offset_2413(struct ath5k_eeprom_info *ee, int mode)
{
  #line 1167 
  u32 offset = (unsigned int)((int)ee->ee_misc4 >> 4) & 4095U;
  #line 1169 
  switch (mode) {
    #line 1170 
    case 2: 
            #line 1170 
    ;
    #line 1171 
    if ((((int)ee->ee_header >> 1) & 1) != 0) {
      #line 1174 
      offset = (ath5k_pdgains_size_2413(ee,1U) + 2U) + offset;
    }
    #line 1176 
    case 1: 
            #line 1176 
    ;
    #line 1177 
    if (((int)ee->ee_header & 1) != 0) {
      #line 1180 
      offset = (ath5k_pdgains_size_2413(ee,0U) + 5U) + offset;
    }
    #line 1182 
    case 0: 
            #line 1182 
    ;
    #line 1183 
    break;
    #line 1184 
    default: 
             #line 1184 
    ;
    #line 1185 
    break;
  }
  #line 1188 
  return offset;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_convert_pcal_info_2413(struct ath5k_hw *ah, int mode, struct ath5k_chan_pcal_info *chinfo)
{
  #line 1198 
  struct ath5k_chan_pcal_info_rf2413 *pcinfo;
  #line 1200 
  unsigned int pier;
  #line 1200 
  unsigned int pdg;
  #line 1200 
  unsigned int point;
  #line 1197 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1199 
  u8 *pdgain_idx = (u8 *)(& ee->ee_pdc_to_idx[mode]);
  #line 1203 
  pier = 0U;
  #line 1203 
  while ((unsigned int)ee->ee_n_piers[mode] > pier) {
    #line 1205 
    pcinfo = & (chinfo + (unsigned long)pier)->__anonCompField_ath5k_chan_pcal_info_198.rf2413_info;
    #line 1209 
    (chinfo + (unsigned long)pier)->pd_curves = (struct ath5k_pdgain_info *)kcalloc_0(4UL,24UL,3264U);
    #line 1213 
    if ((chinfo + (unsigned long)pier)->pd_curves == (struct ath5k_pdgain_info *)0) 
      #line 1214 
      goto err_out;
    #line 1217 
    pdg = 0U;
    #line 1217 
    while ((unsigned int)ee->ee_pd_gains[mode] > pdg) {
      {
        #line 1219 
        u8 idx = *(pdgain_idx + (unsigned long)pdg);
        #line 1220 
        struct ath5k_pdgain_info *pd = (chinfo + (unsigned long)pier)->pd_curves + (unsigned long)idx;
        #line 1225 
        if ((unsigned int)((int)ee->ee_pd_gains[mode] + -1) == pdg) 
                                                                    #line 1226 
                                                                    pd->pd_points = (unsigned char)5U; else 
                                                                    #line 1228 
                                                                    pd->pd_points = (unsigned char)4U;
        #line 1231 
        pd->pd_step = (u8 *)kcalloc_0((unsigned long)pd->pd_points,1UL,3264U);
        #line 1234 
        if (pd->pd_step == (u8 *)0U) 
                                     #line 1235 
                                     goto err_out;
        #line 1237 
        pd->pd_pwr = (s16 *)kcalloc_0((unsigned long)pd->pd_points,2UL,3264U);
        #line 1240 
        if (pd->pd_pwr == (s16 *)0) 
                                    #line 1241 
                                    goto err_out;
        #line 1246 
        *(pd->pd_step) = pcinfo->pddac_i[pdg];
        #line 1247 
        *(pd->pd_pwr) = (short)((unsigned int)pcinfo->pwr_i[pdg] * 4U);
        #line 1249 
        point = 1U;
        #line 1249 
        while ((unsigned int)pd->pd_points > point) {
          #line 1251 
          *(pd->pd_pwr + (unsigned long)point) = (short)((unsigned int)*(pd->pd_pwr + (unsigned long)(point + 4294967295U)) + (unsigned int)pcinfo->pwr[pdg][point + 4294967295U] * 2U);
          #line 1254 
          *(pd->pd_step + (unsigned long)point) = (unsigned char)((int)*(pd->pd_step + (unsigned long)(point + 4294967295U)) + (int)pcinfo->pddac[pdg][point + 4294967295U]);
          #line 1249 
          point ++;
        }
        #line 1260 
        if (pdg == 0U) 
                       #line 1261 
                       (chinfo + (unsigned long)pier)->min_pwr = *(pd->pd_pwr);
        #line 1264 
        if ((unsigned int)((int)ee->ee_pd_gains[mode] + -1) == pdg) 
                                                                    #line 1265 
                                                                    (chinfo + (unsigned long)pier)->max_pwr = *(pd->pd_pwr + ((unsigned long)pd->pd_points + 18446744073709551615U));
      }
      #line 1217 
      pdg ++;
    }
    #line 1203 
    pier ++;
  }
  #line 1270 
  return 0;
  #line 1272 
  err_out: 
           #line 1272 
  ;
  #line 1273 
  ath5k_eeprom_free_pcal_info(ah,mode);
  #line 1274 
  return -12;
}

#line 1279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_pcal_info_2413(struct ath5k_hw *ah, int mode)
{
  #line 1282 
  struct ath5k_chan_pcal_info_rf2413 *pcinfo;
  #line 1283 
  struct ath5k_chan_pcal_info *chinfo;
  #line 1285 
  u32 offset;
  #line 1286 
  int idx;
  #line 1286 
  int i;
  #line 1287 
  u16 val;
  #line 1281 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1284 
  u8 *pdgain_idx = (u8 *)(& ee->ee_pdc_to_idx[mode]);
  #line 1288 
  u8 pd_gains = (unsigned char)0U;
  #line 1295 
  idx = 3;
  #line 1295 
  while (idx >= 0) {
    #line 1297 
    if ((((int)ee->ee_x_gain[mode] >> idx) & 1) != 0) {
      #line 1298 
      u8 tmp;
      #line 1298 
      tmp = pd_gains;
      #line 1298 
      pd_gains = (u8)((int)pd_gains + 1);
      #line 1298 
      *(pdgain_idx + (unsigned long)tmp) = (unsigned char)idx;
    }
    #line 1295 
    idx --;
  }
  #line 1301 
  ee->ee_pd_gains[mode] = pd_gains;
  #line 1303 
  if ((unsigned int)pd_gains == 0U) 
                                    #line 1304 
                                    return -22;
  #line 1306 
  offset = ath5k_cal_data_offset_2413(ee,mode);
  #line 1307 
  switch (mode) {
    #line 1308 
    case 0: 
            #line 1308 
    ;
    #line 1309 
    if (((int)ee->ee_header & 1) == 0) 
                                       #line 1310 
                                       return 0;
    #line 1312 
    ath5k_eeprom_init_11a_pcal_freq(ah,(int)offset);
    #line 1313 
    offset += 5U;
    #line 1314 
    chinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_a);
    #line 1315 
    break;
    #line 1316 
    case 1: 
            #line 1316 
    ;
    #line 1317 
    if ((((int)ee->ee_header >> 1) & 1) == 0) 
                                              #line 1318 
                                              return 0;
    #line 1320 
    ath5k_eeprom_init_11bg_2413(ah,(unsigned int)mode,(int)offset);
    #line 1321 
    offset += 2U;
    #line 1322 
    chinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_b);
    #line 1323 
    break;
    #line 1324 
    case 2: 
            #line 1324 
    ;
    #line 1325 
    if ((((int)ee->ee_header >> 2) & 1) == 0) 
                                              #line 1326 
                                              return 0;
    #line 1328 
    ath5k_eeprom_init_11bg_2413(ah,(unsigned int)mode,(int)offset);
    #line 1329 
    offset += 2U;
    #line 1330 
    chinfo = (struct ath5k_chan_pcal_info *)(& ee->ee_pwr_cal_g);
    #line 1331 
    break;
    #line 1332 
    default: 
             #line 1332 
    ;
    #line 1333 
    return -22;
  }
  #line 1336 
  i = 0;
  #line 1336 
  while ((int)ee->ee_n_piers[mode] > i) {
    {
      #line 1343 
      u32 tmp_0;
      #line 1348 
      u32 tmp_2;
      #line 1353 
      u32 tmp_4;
      #line 1337 
      pcinfo = & (chinfo + (unsigned long)i)->__anonCompField_ath5k_chan_pcal_info_198.rf2413_info;
      #line 1343 
      tmp_0 = offset;
      #line 1343 
      offset ++;
      #line 1343 
      ;
      #line 1343 
      ;
      #line 1343 
      if (! ath5k_hw_nvram_read(ah,tmp_0,& val)) 
                                                 #line 1343 
                                                 return -5;
      #line 1344 
      pcinfo->pwr_i[0] = (signed char)((int)((signed char)val) & 31);
      #line 1345 
      pcinfo->pddac_i[0] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 5)) & 127U);
      #line 1346 
      pcinfo->pwr[0][0] = (signed char)((int)((signed char)((int)val >> 12)) & 15);
      #line 1348 
      tmp_2 = offset;
      #line 1348 
      offset ++;
      #line 1348 
      ;
      #line 1348 
      ;
      #line 1348 
      if (! ath5k_hw_nvram_read(ah,tmp_2,& val)) 
                                                 #line 1348 
                                                 return -5;
      #line 1349 
      pcinfo->pddac[0][0] = (unsigned char)((unsigned int)((unsigned char)val) & 63U);
      #line 1350 
      pcinfo->pwr[0][1] = (signed char)((int)((signed char)((int)val >> 6)) & 15);
      #line 1351 
      pcinfo->pddac[0][1] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 10)) & 63U);
      #line 1353 
      tmp_4 = offset;
      #line 1353 
      offset ++;
      #line 1353 
      ;
      #line 1353 
      ;
      #line 1353 
      if (! ath5k_hw_nvram_read(ah,tmp_4,& val)) 
                                                 #line 1353 
                                                 return -5;
      #line 1354 
      pcinfo->pwr[0][2] = (signed char)((int)((signed char)val) & 15);
      #line 1355 
      pcinfo->pddac[0][2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
      #line 1357 
      pcinfo->pwr[0][3] = (signed char)0;
      #line 1358 
      pcinfo->pddac[0][3] = (unsigned char)0U;
      #line 1360 
      if ((unsigned int)pd_gains > 1U) {
        #line 1369 
        u32 tmp_6;
        #line 1375 
        u32 tmp_8;
        #line 1381 
        u32 tmp_10;
        #line 1366 
        pcinfo->pwr_i[1] = (signed char)((int)((signed char)((int)val >> 10)) & 31);
        #line 1368 
        pcinfo->pddac_i[1] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 15)) & 1U);
        #line 1369 
        tmp_6 = offset;
        #line 1369 
        offset ++;
        #line 1369 
        ;
        #line 1369 
        ;
        #line 1369 
        if (! ath5k_hw_nvram_read(ah,tmp_6,& val)) 
                                                   #line 1369 
                                                   return -5;
        #line 1370 
        pcinfo->pddac_i[1] = (unsigned char)((int)pcinfo->pddac_i[1] | (((int)val << 1) & 126));
        #line 1372 
        pcinfo->pwr[1][0] = (signed char)((int)((signed char)((int)val >> 6)) & 15);
        #line 1373 
        pcinfo->pddac[1][0] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 10)) & 63U);
        #line 1375 
        tmp_8 = offset;
        #line 1375 
        offset ++;
        #line 1375 
        ;
        #line 1375 
        ;
        #line 1375 
        if (! ath5k_hw_nvram_read(ah,tmp_8,& val)) 
                                                   #line 1375 
                                                   return -5;
        #line 1376 
        pcinfo->pwr[1][1] = (signed char)((int)((signed char)val) & 15);
        #line 1377 
        pcinfo->pddac[1][1] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
        #line 1378 
        pcinfo->pwr[1][2] = (signed char)((int)((signed char)((int)val >> 10)) & 15);
        #line 1380 
        pcinfo->pddac[1][2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 14)) & 3U);
        #line 1381 
        tmp_10 = offset;
        #line 1381 
        offset ++;
        #line 1381 
        ;
        #line 1381 
        ;
        #line 1381 
        if (! ath5k_hw_nvram_read(ah,tmp_10,& val)) 
                                                    #line 1381 
                                                    return -5;
        #line 1382 
        pcinfo->pddac[1][2] = (unsigned char)((int)pcinfo->pddac[1][2] | (((int)val << 2) & 60));
        #line 1384 
        pcinfo->pwr[1][3] = (signed char)0;
        #line 1385 
        pcinfo->pddac[1][3] = (unsigned char)0U;
      }
      else 
        #line 1386 
        if ((unsigned int)pd_gains == 1U) {
          #line 1394 
          u32 tmp_12;
          #line 1391 
          pcinfo->pwr[0][3] = (signed char)((int)((signed char)((int)val >> 10)) & 15);
          #line 1393 
          pcinfo->pddac[0][3] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 14)) & 3U);
          #line 1394 
          tmp_12 = offset;
          #line 1394 
          offset ++;
          #line 1394 
          ;
          #line 1394 
          ;
          #line 1394 
          if (! ath5k_hw_nvram_read(ah,tmp_12,& val)) 
                                                      #line 1394 
                                                      return -5;
          #line 1395 
          pcinfo->pddac[0][3] = (unsigned char)((int)pcinfo->pddac[0][3] | (((int)val << 2) & 60));
        }
      #line 1402 
      if ((unsigned int)pd_gains > 2U) {
        #line 1406 
        u32 tmp_14;
        #line 1412 
        u32 tmp_16;
        #line 1403 
        pcinfo->pwr_i[2] = (signed char)((int)((signed char)((int)val >> 4)) & 31);
        #line 1404 
        pcinfo->pddac_i[2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 9)) & 127U);
        #line 1406 
        tmp_14 = offset;
        #line 1406 
        offset ++;
        #line 1406 
        ;
        #line 1406 
        ;
        #line 1406 
        if (! ath5k_hw_nvram_read(ah,tmp_14,& val)) 
                                                    #line 1406 
                                                    return -5;
        #line 1407 
        pcinfo->pwr[2][0] = (signed char)((int)((signed char)val) & 15);
        #line 1408 
        pcinfo->pddac[2][0] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
        #line 1409 
        pcinfo->pwr[2][1] = (signed char)((int)((signed char)((int)val >> 10)) & 15);
        #line 1411 
        pcinfo->pddac[2][1] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 14)) & 3U);
        #line 1412 
        tmp_16 = offset;
        #line 1412 
        offset ++;
        #line 1412 
        ;
        #line 1412 
        ;
        #line 1412 
        if (! ath5k_hw_nvram_read(ah,tmp_16,& val)) 
                                                    #line 1412 
                                                    return -5;
        #line 1413 
        pcinfo->pddac[2][1] = (unsigned char)((int)pcinfo->pddac[2][1] | (((int)val << 2) & 60));
        #line 1415 
        pcinfo->pwr[2][2] = (signed char)((int)((signed char)((int)val >> 4)) & 15);
        #line 1416 
        pcinfo->pddac[2][2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 8)) & 63U);
        #line 1418 
        pcinfo->pwr[2][3] = (signed char)0;
        #line 1419 
        pcinfo->pddac[2][3] = (unsigned char)0U;
      }
      else 
        #line 1420 
        if ((unsigned int)pd_gains == 2U) {
          #line 1421 
          pcinfo->pwr[1][3] = (signed char)((int)((signed char)((int)val >> 4)) & 15);
          #line 1422 
          pcinfo->pddac[1][3] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 8)) & 63U);
        }
      #line 1425 
      if ((unsigned int)pd_gains > 3U) {
        #line 1427 
        u32 tmp_18;
        #line 1434 
        u32 tmp_20;
        #line 1440 
        u32 tmp_22;
        #line 1447 
        u32 tmp_24;
        #line 1426 
        pcinfo->pwr_i[3] = (signed char)((int)((signed char)((int)val >> 14)) & 3);
        #line 1427 
        tmp_18 = offset;
        #line 1427 
        offset ++;
        #line 1427 
        ;
        #line 1427 
        ;
        #line 1427 
        if (! ath5k_hw_nvram_read(ah,tmp_18,& val)) 
                                                    #line 1427 
                                                    return -5;
        #line 1428 
        pcinfo->pwr_i[3] = (signed char)((int)pcinfo->pwr_i[3] | ((int)((signed char)((int)val << 2)) & 28));
        #line 1430 
        pcinfo->pddac_i[3] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 3)) & 127U);
        #line 1431 
        pcinfo->pwr[3][0] = (signed char)((int)((signed char)((int)val >> 10)) & 15);
        #line 1432 
        pcinfo->pddac[3][0] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 14)) & 3U);
        #line 1434 
        tmp_20 = offset;
        #line 1434 
        offset ++;
        #line 1434 
        ;
        #line 1434 
        ;
        #line 1434 
        if (! ath5k_hw_nvram_read(ah,tmp_20,& val)) 
                                                    #line 1434 
                                                    return -5;
        #line 1435 
        pcinfo->pddac[3][0] = (unsigned char)((int)pcinfo->pddac[3][0] | (((int)val << 2) & 60));
        #line 1436 
        pcinfo->pwr[3][1] = (signed char)((int)((signed char)((int)val >> 4)) & 15);
        #line 1437 
        pcinfo->pddac[3][1] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 8)) & 63U);
        #line 1439 
        pcinfo->pwr[3][2] = (signed char)((int)((signed char)((int)val >> 14)) & 3);
        #line 1440 
        tmp_22 = offset;
        #line 1440 
        offset ++;
        #line 1440 
        ;
        #line 1440 
        ;
        #line 1440 
        if (! ath5k_hw_nvram_read(ah,tmp_22,& val)) 
                                                    #line 1440 
                                                    return -5;
        #line 1441 
        pcinfo->pwr[3][2] = (signed char)((int)pcinfo->pwr[3][2] | ((int)((signed char)((int)val << 2)) & 12));
        #line 1443 
        pcinfo->pddac[3][2] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 2)) & 63U);
        #line 1444 
        pcinfo->pwr[3][3] = (signed char)((int)((signed char)((int)val >> 8)) & 15);
        #line 1446 
        pcinfo->pddac[3][3] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 12)) & 15U);
        #line 1447 
        tmp_24 = offset;
        #line 1447 
        offset ++;
        #line 1447 
        ;
        #line 1447 
        ;
        #line 1447 
        if (! ath5k_hw_nvram_read(ah,tmp_24,& val)) 
                                                    #line 1447 
                                                    return -5;
        #line 1448 
        pcinfo->pddac[3][3] = (unsigned char)((int)pcinfo->pddac[3][3] | (((int)val << 4) & 48));
      }
      else 
        #line 1449 
        if ((unsigned int)pd_gains == 3U) {
          #line 1451 
          u32 tmp_26;
          #line 1450 
          pcinfo->pwr[2][3] = (signed char)((int)((signed char)((int)val >> 14)) & 3);
          #line 1451 
          tmp_26 = offset;
          #line 1451 
          offset ++;
          #line 1451 
          ;
          #line 1451 
          ;
          #line 1451 
          if (! ath5k_hw_nvram_read(ah,tmp_26,& val)) 
                                                      #line 1451 
                                                      return -5;
          #line 1452 
          pcinfo->pwr[2][3] = (signed char)((int)pcinfo->pwr[2][3] | ((int)((signed char)((int)val << 2)) & 12));
          #line 1454 
          pcinfo->pddac[2][3] = (unsigned char)((unsigned int)((unsigned char)((int)val >> 2)) & 63U);
        }
    }
    #line 1336 
    i ++;
  }
  #line 1458 
  return ath5k_eeprom_convert_pcal_info_2413(ah,mode,chinfo);
}

#line 1470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_target_rate_pwr_info(struct ath5k_hw *ah, unsigned int mode)
{
  #line 1473 
  struct ath5k_rate_pcal_info *rate_pcal_info;
  #line 1474 
  u8 *rate_target_pwr_num;
  #line 1475 
  u32 offset;
  #line 1476 
  u16 val;
  #line 1477 
  int i;
  #line 1472 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1479 
  offset = (unsigned int)ee->ee_misc1 & 4095U;
  #line 1480 
  rate_target_pwr_num = & ee->ee_rate_target_pwr_num[mode];
  #line 1481 
  switch (mode) {
    #line 1483 
    unsigned int tmp;
    #line 1488 
    unsigned int tmp_0;
    #line 1493 
    unsigned int tmp_1;
    #line 1482 
    case (unsigned int)0: 
                          #line 1482 
    ;
    #line 1483 
    if ((unsigned int)ee->ee_version <= 12290U) 
                                                #line 1483 
                                                tmp = 341U; else 
                                                                 #line 1483 
                                                                 tmp = 0U;
    #line 1483 
    offset = tmp + offset;
    #line 1484 
    rate_pcal_info = (struct ath5k_rate_pcal_info *)(& ee->ee_rate_tpwr_a);
    #line 1485 
    ee->ee_rate_target_pwr_num[mode] = (unsigned char)8U;
    #line 1486 
    break;
    #line 1487 
    case (unsigned int)1: 
                          #line 1487 
    ;
    #line 1488 
    if ((unsigned int)ee->ee_version <= 12290U) 
                                                #line 1488 
                                                tmp_0 = 357U; else 
                                                                   #line 1488 
                                                                   tmp_0 = 16U;
    #line 1488 
    offset = tmp_0 + offset;
    #line 1489 
    rate_pcal_info = (struct ath5k_rate_pcal_info *)(& ee->ee_rate_tpwr_b);
    #line 1490 
    ee->ee_rate_target_pwr_num[mode] = (unsigned char)2U;
    #line 1491 
    break;
    #line 1492 
    case (unsigned int)2: 
                          #line 1492 
    ;
    #line 1493 
    if ((unsigned int)ee->ee_version <= 12290U) 
                                                #line 1493 
                                                tmp_1 = 361U; else 
                                                                   #line 1493 
                                                                   tmp_1 = 20U;
    #line 1493 
    offset = tmp_1 + offset;
    #line 1494 
    rate_pcal_info = (struct ath5k_rate_pcal_info *)(& ee->ee_rate_tpwr_g);
    #line 1495 
    ee->ee_rate_target_pwr_num[mode] = (unsigned char)3U;
    #line 1496 
    break;
    #line 1497 
    default: 
             #line 1497 
    ;
    #line 1498 
    return -22;
  }
  #line 1502 
  if ((unsigned int)ee->ee_version <= 12290U) {
    #line 1503 
    i = 0;
    #line 1503 
    while ((int)*rate_target_pwr_num > i) {
      {
        #line 1504 
        u32 tmp_2;
        #line 1511 
        u32 tmp_4;
        #line 1504 
        tmp_2 = offset;
        #line 1504 
        offset ++;
        #line 1504 
        ;
        #line 1504 
        ;
        #line 1504 
        if (! ath5k_hw_nvram_read(ah,tmp_2,& val)) 
                                                   #line 1504 
                                                   return -5;
        #line 1505 
        (rate_pcal_info + (unsigned long)i)->freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val >> 9),mode);
        #line 1508 
        (rate_pcal_info + (unsigned long)i)->target_power_6to24 = (unsigned short)((unsigned int)((unsigned short)((int)val >> 3)) & 63U);
        #line 1509 
        (rate_pcal_info + (unsigned long)i)->target_power_36 = (unsigned short)((unsigned int)((unsigned short)((int)val << 3)) & 63U);
        #line 1511 
        tmp_4 = offset;
        #line 1511 
        offset ++;
        #line 1511 
        ;
        #line 1511 
        ;
        #line 1511 
        if (! ath5k_hw_nvram_read(ah,tmp_4,& val)) 
                                                   #line 1511 
                                                   return -5;
        #line 1513 
        if ((unsigned int)(rate_pcal_info + (unsigned long)i)->freq == 255U || (unsigned int)val == 0U) {
          #line 1515 
          *rate_target_pwr_num = (unsigned char)i;
          #line 1516 
          break;
        }
        #line 1519 
        (rate_pcal_info + (unsigned long)i)->target_power_36 = (unsigned short)((int)(rate_pcal_info + (unsigned long)i)->target_power_36 | ((int)val >> 13));
        #line 1520 
        (rate_pcal_info + (unsigned long)i)->target_power_48 = (unsigned short)((unsigned int)((unsigned short)((int)val >> 7)) & 63U);
        #line 1521 
        (rate_pcal_info + (unsigned long)i)->target_power_54 = (unsigned short)((unsigned int)((unsigned short)((int)val >> 1)) & 63U);
      }
      #line 1503 
      i ++;
    }
  }
  else {
    #line 1524 
    i = 0;
    #line 1524 
    while ((int)*rate_target_pwr_num > i) {
      {
        #line 1525 
        u32 tmp_6;
        #line 1532 
        u32 tmp_8;
        #line 1525 
        tmp_6 = offset;
        #line 1525 
        offset ++;
        #line 1525 
        ;
        #line 1525 
        ;
        #line 1525 
        if (! ath5k_hw_nvram_read(ah,tmp_6,& val)) 
                                                   #line 1525 
                                                   return -5;
        #line 1526 
        (rate_pcal_info + (unsigned long)i)->freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)val >> 8),mode);
        #line 1529 
        (rate_pcal_info + (unsigned long)i)->target_power_6to24 = (unsigned short)((unsigned int)((unsigned short)((int)val >> 2)) & 63U);
        #line 1530 
        (rate_pcal_info + (unsigned long)i)->target_power_36 = (unsigned short)((unsigned int)((unsigned short)((int)val << 4)) & 63U);
        #line 1532 
        tmp_8 = offset;
        #line 1532 
        offset ++;
        #line 1532 
        ;
        #line 1532 
        ;
        #line 1532 
        if (! ath5k_hw_nvram_read(ah,tmp_8,& val)) 
                                                   #line 1532 
                                                   return -5;
        #line 1534 
        if ((unsigned int)(rate_pcal_info + (unsigned long)i)->freq == 255U || (unsigned int)val == 0U) {
          #line 1536 
          *rate_target_pwr_num = (unsigned char)i;
          #line 1537 
          break;
        }
        #line 1540 
        (rate_pcal_info + (unsigned long)i)->target_power_36 = (unsigned short)((int)(rate_pcal_info + (unsigned long)i)->target_power_36 | ((int)val >> 12));
        #line 1541 
        (rate_pcal_info + (unsigned long)i)->target_power_48 = (unsigned short)((unsigned int)((unsigned short)((int)val >> 6)) & 63U);
        #line 1542 
        (rate_pcal_info + (unsigned long)i)->target_power_54 = (unsigned short)((unsigned int)val & 63U);
      }
      #line 1524 
      i ++;
    }
  }
  #line 1546 
  return 0;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_pcal_info(struct ath5k_hw *ah)
{
  #line 1568 
  int (*read_pcal)(struct ath5k_hw *, int );
  #line 1569 
  int mode;
  #line 1570 
  int err;
  #line 1567 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1572 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16383U && (((int)ee->ee_misc0 >> 14) & 3) == 1) 
    #line 1574 
    read_pcal = & ath5k_eeprom_read_pcal_info_5112;
  else 
    #line 1575 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 20479U && (((int)ee->ee_misc0 >> 14) & 3) == 2) 
      #line 1577 
      read_pcal = & ath5k_eeprom_read_pcal_info_2413; else 
                                                           #line 1579 
                                                           read_pcal = & ath5k_eeprom_read_pcal_info_5111;
  #line 1582 
  mode = 0;
  #line 1582 
  while (mode <= 2) {
    #line 1584 
    err = (*read_pcal)(ah,mode);
    #line 1585 
    if (err != 0) 
                  #line 1586 
                  return err;
    #line 1588 
    err = ath5k_eeprom_read_target_rate_pwr_info(ah,(unsigned int)mode);
    #line 1589 
    if (err < 0) 
                 #line 1590 
                 return err;
    #line 1582 
    mode ++;
  }
  #line 1593 
  return 0;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_ctl_info(struct ath5k_hw *ah)
{
  #line 1601 
  struct ath5k_edge_power *rep;
  #line 1602 
  unsigned int fmask;
  #line 1602 
  unsigned int pmask;
  #line 1603 
  unsigned int ctl_mode;
  #line 1604 
  int i;
  #line 1604 
  int j;
  #line 1605 
  u32 offset;
  #line 1606 
  u16 val;
  #line 1600 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1608 
  pmask = 63U;
  #line 1609 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 1609 
                                             fmask = 255U; else 
                                                                #line 1609 
                                                                fmask = 127U;
  #line 1610 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 1610 
                                             offset = 296U; else 
                                                                 #line 1610 
                                                                 offset = 228U;
  #line 1611 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 1611 
                                             ee->ee_ctls = (unsigned char)32U; else 
                                                                    #line 1611 
                                                                    ee->ee_ctls = (unsigned char)16U;
  #line 1612 
  i = 0;
  #line 1612 
  while ((int)ee->ee_ctls > i) {
    {
      #line 1613 
      u32 tmp;
      #line 1613 
      tmp = offset;
      #line 1613 
      offset ++;
      #line 1613 
      ;
      #line 1613 
      ;
      #line 1613 
      if (! ath5k_hw_nvram_read(ah,tmp,& val)) 
                                               #line 1613 
                                               return -5;
      #line 1614 
      ee->ee_ctl[i] = (unsigned char)((int)val >> 8);
      #line 1615 
      ee->ee_ctl[i + 1] = (unsigned char)val;
    }
    #line 1612 
    i += 2;
  }
  #line 1618 
  offset = 111U;
  #line 1619 
  if ((unsigned int)ee->ee_version > 16383U) 
                                             #line 1620 
                                             offset = (((unsigned int)ee->ee_misc1 & 4095U) + offset) + 4294967211U;
  else {
    #line 1623 
    unsigned int tmp_1;
    #line 1623 
    if ((unsigned int)ee->ee_version > 12290U) 
                                               #line 1623 
                                               tmp_1 = 336U; else 
                                                                  #line 1623 
                                                                  tmp_1 = 256U;
    #line 1623 
    offset = tmp_1 + offset;
  }
  #line 1625 
  rep = (struct ath5k_edge_power *)(& ee->ee_ctl_pwr);
  #line 1626 
  i = 0;
  #line 1626 
  while ((int)ee->ee_ctls > i) {
    #line 1627 
    switch ((int)ee->ee_ctl[i] & 15) {
      #line 1628 
      case 0: 
              #line 1628 
      ;
      #line 1629 
      case 3: 
              #line 1629 
      ;
      #line 1630 
      ctl_mode = 0U;
      #line 1631 
      break;
      #line 1632 
      default: 
               #line 1632 
      ;
      #line 1633 
      ctl_mode = 2U;
      #line 1634 
      break;
    }
    #line 1636 
    if ((unsigned int)ee->ee_ctl[i] == 0U) {
      #line 1637 
      if ((unsigned int)ee->ee_version > 12290U) 
                                                 #line 1638 
                                                 offset += 8U; else 
                                                                    #line 1640 
                                                                    offset += 7U;
      #line 1641 
      rep += 8U;
      #line 1642 
      goto __Cont;
    }
    #line 1644 
    if ((unsigned int)ee->ee_version > 12290U) {
      #line 1645 
      j = 0;
      #line 1645 
      while (j <= 7) {
        {
          #line 1646 
          u32 tmp_2;
          #line 1646 
          tmp_2 = offset;
          #line 1646 
          offset ++;
          #line 1646 
          ;
          #line 1646 
          ;
          #line 1646 
          if (! ath5k_hw_nvram_read(ah,tmp_2,& val)) 
                                                     #line 1646 
                                                     return -5;
          #line 1647 
          (rep + (unsigned long)j)->freq = (unsigned short)((int)((unsigned short)((int)val >> 8)) & (int)((unsigned short)fmask));
          #line 1648 
          (rep + ((unsigned long)j + (unsigned long)1U))->freq = (unsigned short)((int)((unsigned short)fmask) & (int)val);
        }
        #line 1645 
        j += 2;
      }
      #line 1650 
      j = 0;
      #line 1650 
      while (j <= 7) {
        {
          #line 1651 
          u32 tmp_4;
          #line 1651 
          tmp_4 = offset;
          #line 1651 
          offset ++;
          #line 1651 
          ;
          #line 1651 
          ;
          #line 1651 
          if (! ath5k_hw_nvram_read(ah,tmp_4,& val)) 
                                                     #line 1651 
                                                     return -5;
          #line 1652 
          (rep + (unsigned long)j)->edge = (unsigned short)((int)((unsigned short)((int)val >> 8)) & (int)((unsigned short)pmask));
          #line 1653 
          (rep + (unsigned long)j)->flag = (_Bool)((((int)val >> 14) & 1) != 0);
          #line 1654 
          (rep + ((unsigned long)j + (unsigned long)1U))->edge = (unsigned short)((int)((unsigned short)pmask) & (int)val);
          #line 1655 
          (rep + ((unsigned long)j + (unsigned long)1U))->flag = (_Bool)((((int)val >> 6) & 1) != 0);
        }
        #line 1650 
        j += 2;
      }
    }
    else {
      #line 1658 
      u32 tmp_6;
      #line 1663 
      u32 tmp_8;
      #line 1668 
      u32 tmp_10;
      #line 1673 
      u32 tmp_12;
      #line 1680 
      u32 tmp_14;
      #line 1685 
      u32 tmp_16;
      #line 1690 
      u32 tmp_18;
      #line 1658 
      tmp_6 = offset;
      #line 1658 
      offset ++;
      #line 1658 
      ;
      #line 1658 
      ;
      #line 1658 
      if (! ath5k_hw_nvram_read(ah,tmp_6,& val)) 
                                                 #line 1658 
                                                 return -5;
      #line 1659 
      rep->freq = (unsigned short)((int)((unsigned short)((int)val >> 9)) & (int)((unsigned short)fmask));
      #line 1660 
      (rep + 1U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 2)) & (int)((unsigned short)fmask));
      #line 1661 
      (rep + 2U)->freq = (unsigned short)(((int)val << 5U) & (int)((unsigned short)fmask));
      #line 1663 
      tmp_8 = offset;
      #line 1663 
      offset ++;
      #line 1663 
      ;
      #line 1663 
      ;
      #line 1663 
      if (! ath5k_hw_nvram_read(ah,tmp_8,& val)) 
                                                 #line 1663 
                                                 return -5;
      #line 1664 
      (rep + 2U)->freq = (unsigned short)((int)(rep + 2U)->freq | ((int)val >> 11));
      #line 1665 
      (rep + 3U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 4)) & (int)((unsigned short)fmask));
      #line 1666 
      (rep + 4U)->freq = (unsigned short)(((int)val << 3U) & (int)((unsigned short)fmask));
      #line 1668 
      tmp_10 = offset;
      #line 1668 
      offset ++;
      #line 1668 
      ;
      #line 1668 
      ;
      #line 1668 
      if (! ath5k_hw_nvram_read(ah,tmp_10,& val)) 
                                                  #line 1668 
                                                  return -5;
      #line 1669 
      (rep + 4U)->freq = (unsigned short)((int)(rep + 4U)->freq | ((int)val >> 13));
      #line 1670 
      (rep + 5U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 6)) & (int)((unsigned short)fmask));
      #line 1671 
      (rep + 6U)->freq = (unsigned short)(((int)val << 1U) & (int)((unsigned short)fmask));
      #line 1673 
      tmp_12 = offset;
      #line 1673 
      offset ++;
      #line 1673 
      ;
      #line 1673 
      ;
      #line 1673 
      if (! ath5k_hw_nvram_read(ah,tmp_12,& val)) 
                                                  #line 1673 
                                                  return -5;
      #line 1674 
      (rep + 6U)->freq = (unsigned short)((int)(rep + 6U)->freq | ((int)val >> 15));
      #line 1675 
      (rep + 7U)->freq = (unsigned short)((int)((unsigned short)((int)val >> 8)) & (int)((unsigned short)fmask));
      #line 1677 
      rep->edge = (unsigned short)((int)((unsigned short)((int)val >> 2)) & (int)((unsigned short)pmask));
      #line 1678 
      (rep + 1U)->edge = (unsigned short)(((int)val << 4U) & (int)((unsigned short)pmask));
      #line 1680 
      tmp_14 = offset;
      #line 1680 
      offset ++;
      #line 1680 
      ;
      #line 1680 
      ;
      #line 1680 
      if (! ath5k_hw_nvram_read(ah,tmp_14,& val)) 
                                                  #line 1680 
                                                  return -5;
      #line 1681 
      (rep + 1U)->edge = (unsigned short)((int)(rep + 1U)->edge | ((int)val >> 12));
      #line 1682 
      (rep + 2U)->edge = (unsigned short)((int)((unsigned short)((int)val >> 6)) & (int)((unsigned short)pmask));
      #line 1683 
      (rep + 3U)->edge = (unsigned short)((int)((unsigned short)pmask) & (int)val);
      #line 1685 
      tmp_16 = offset;
      #line 1685 
      offset ++;
      #line 1685 
      ;
      #line 1685 
      ;
      #line 1685 
      if (! ath5k_hw_nvram_read(ah,tmp_16,& val)) 
                                                  #line 1685 
                                                  return -5;
      #line 1686 
      (rep + 4U)->edge = (unsigned short)((int)((unsigned short)((int)val >> 10)) & (int)((unsigned short)pmask));
      #line 1687 
      (rep + 5U)->edge = (unsigned short)((int)((unsigned short)((int)val >> 4)) & (int)((unsigned short)pmask));
      #line 1688 
      (rep + 6U)->edge = (unsigned short)(((int)val << 2U) & (int)((unsigned short)pmask));
      #line 1690 
      tmp_18 = offset;
      #line 1690 
      offset ++;
      #line 1690 
      ;
      #line 1690 
      ;
      #line 1690 
      if (! ath5k_hw_nvram_read(ah,tmp_18,& val)) 
                                                  #line 1690 
                                                  return -5;
      #line 1691 
      (rep + 6U)->edge = (unsigned short)((int)(rep + 6U)->edge | ((int)val >> 14));
      #line 1692 
      (rep + 7U)->edge = (unsigned short)((int)((unsigned short)((int)val >> 8)) & (int)((unsigned short)pmask));
    }
    #line 1694 
    j = 0;
    #line 1694 
    while (j <= 7) {
      #line 1695 
      (rep + (unsigned long)j)->freq = ath5k_eeprom_bin2freq(ee,(unsigned short)((int)(rep + (unsigned long)j)->freq),ctl_mode);
      #line 1694 
      j ++;
    }
    #line 1698 
    rep += 8U;
    #line 1626 
    __Cont: 
            #line 1626 
    i ++;
  }
  #line 1701 
  return 0;
}

#line 1705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
static int ath5k_eeprom_read_spur_chans(struct ath5k_hw *ah)
{
  #line 1708 
  u32 offset;
  #line 1709 
  u16 val;
  #line 1710 
  int i;
  #line 1712 
  int tmp;
  #line 1712 
  int tmp_0;
  #line 1707 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 1712 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 1712 
                                             tmp = 296; else 
                                                             #line 1712 
                                                             tmp = 228;
  #line 1712 
  if ((unsigned int)ee->ee_version > 12290U) 
                                             #line 1712 
                                             tmp_0 = 32; else 
                                                              #line 1712 
                                                              tmp_0 = 16;
  #line 1712 
  offset = (unsigned int)(tmp + tmp_0);
  #line 1715 
  if ((unsigned int)ee->ee_version <= 20482U) {
    #line 1717 
    ee->ee_spur_chans[0][0] = (unsigned short)32768U;
    #line 1719 
    ee->ee_spur_chans[0][1] = (unsigned short)1640U;
    #line 1720 
    ee->ee_spur_chans[1][1] = (unsigned short)1200U;
    #line 1721 
    ee->ee_spur_chans[2][1] = (unsigned short)32768U;
  }
  else 
    #line 1722 
    if ((unsigned int)ee->ee_version > 20482U) {
      #line 1723 
      i = 0;
      #line 1723 
      while (i <= 4) {
        {
          #line 1724 
          if (! ath5k_hw_nvram_read(ah,offset,& val)) 
                                                      #line 1724 
                                                      return -5;
          #line 1725 
          ee->ee_spur_chans[i][0] = val;
          #line 1726 
          if (! ath5k_hw_nvram_read(ah,offset + 5U,& val)) 
                                                           #line 1726 
                                                           return -5;
          #line 1728 
          ee->ee_spur_chans[i][1] = val;
          #line 1729 
          offset ++;
        }
        #line 1723 
        i ++;
      }
    }
  #line 1733 
  return 0;
}

#line 1745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
int ath5k_eeprom_init(struct ath5k_hw *ah)
{
  #line 1747 
  int err;
  #line 1749 
  err = ath5k_eeprom_init_header(ah);
  #line 1750 
  if (err < 0) 
               #line 1751 
               return err;
  #line 1753 
  err = ath5k_eeprom_init_modes(ah);
  #line 1754 
  if (err < 0) 
               #line 1755 
               return err;
  #line 1757 
  err = ath5k_eeprom_read_pcal_info(ah);
  #line 1758 
  if (err < 0) 
               #line 1759 
               return err;
  #line 1761 
  err = ath5k_eeprom_read_ctl_info(ah);
  #line 1762 
  if (err < 0) 
               #line 1763 
               return err;
  #line 1765 
  err = ath5k_eeprom_read_spur_chans(ah);
  #line 1766 
  if (err < 0) 
               #line 1767 
               return err;
  #line 1769 
  return 0;
}

#line 1773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
void ath5k_eeprom_detach(struct ath5k_hw *ah)
{
  #line 1775 
  u8 mode;
  #line 1777 
  mode = (unsigned char)0U;
  #line 1777 
  while ((unsigned int)mode <= 2U) {
    #line 1778 
    ath5k_eeprom_free_pcal_info(ah,(int)mode);
    #line 1777 
    mode = (u8)((int)mode + 1);
  }
  #line 1779 
  return;
}

#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/eeprom.c"
int ath5k_eeprom_mode_from_channel(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 1785 
  switch ((int)channel->hw_value) {
    #line 1786 
    case 0: 
            #line 1786 
    ;
    #line 1787 
    return 0;
    #line 1788 
    case 2: 
            #line 1788 
    ;
    #line 1789 
    return 2;
    #line 1790 
    case 1: 
            #line 1790 
    ;
    #line 1791 
    return 1;
    #line 1792 
    default: 
             #line 1792 
    ;
    #line 1793 
    if (net_ratelimit() != 0) 
                              #line 1793 
                              _ath5k_printk(ah,(char *)"\001",(char *)"channel is not A/B/G!");
    #line 1794 
    return 0;
  }
}

#line 335  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/eeprom.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 338 
  return ldv_kcalloc(n,size,flags);
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static size_t cif_strlen(char *s);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_lock_bh_lock_of_ath5k_txq_0(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_lock_bh_rxbuflock_of_ath5k_hw_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_unlock_bh_lock_of_ath5k_txq_0(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_unlock_bh_rxbuflock_of_ath5k_hw_0(spinlock_t *lock);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_vfree(void *addr);
#line 3013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3013 
loff_t default_llseek(struct file *, loff_t, int);
#line 3132 
#line 3132 
loff_t noop_llseek(struct file *, loff_t, int);
#line 3300 
#line 3300 
int simple_open(struct inode *, struct file *);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static int cif_seq_open(struct file *ldv_func_arg1, struct seq_operations *ldv_func_arg2);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 109 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 110 
#line 110 
loff_t seq_lseek(struct file *, loff_t, int);
#line 111 
#line 111 
int seq_release(struct inode *, struct file *);
#line 117 
#line 117 
void seq_printf(struct seq_file *, char * , ...);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 965  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 122 
struct dentry *debugfs_create_bool(char *, umode_t, struct dentry *, bool *);
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static unsigned int ath5k_debug;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct reg regs[48U] = {{.name = (char *)"AR5K_CR", .addr = 8}, {.name = (char *)"AR5K_RXDP", .addr = 12}, {.name = (char *)"AR5K_CFG", .addr = 20}, {.name = (char *)"AR5K_IER", .addr = 36}, {.name = (char *)"AR5K_BCR", .addr = 40}, {.name = (char *)"AR5K_RTSD0", .addr = 40}, {.name = (char *)"AR5K_RTSD1", .addr = 44}, {.name = (char *)"AR5K_TXCFG", .addr = 48}, {.name = (char *)"AR5K_RXCFG", .addr = 52}, {.name = (char *)"AR5K_RXJLA", .addr = 56}, {.name = (char *)"AR5K_MIBC", .addr = 64}, {.name = (char *)"AR5K_TOPS", .addr = 68}, {.name = (char *)"AR5K_RXNOFRM", .addr = 72}, {.name = (char *)"AR5K_TXNOFRM", .addr = 76}, {.name = (char *)"AR5K_RPGTO", .addr = 80}, {.name = (char *)"AR5K_RFCNT", .addr = 84}, {.name = (char *)"AR5K_MISC", .addr = 88}, {.name = (char *)"AR5K_QCUDCU_CLKGT", .addr = 92}, {.name = (char *)"AR5K_ISR", .addr = 28}, {.name = (char *)"AR5K_PISR", .addr = 128}, {.name = (char *)"AR5K_SISR0", .addr = 132}, {.name = (char *)"AR5K_SISR1", .addr = 136}, {.name = (char *)"AR5K_SISR2", .addr = 140}, {.name = (char *)"AR5K_SISR3", .addr = 144}, {.name = (char *)"AR5K_SISR4", .addr = 148}, {.name = (char *)"AR5K_IMR", .addr = 32}, {.name = (char *)"AR5K_PIMR", .addr = 160}, {.name = (char *)"AR5K_SIMR0", .addr = 164}, {.name = (char *)"AR5K_SIMR1", .addr = 168}, {.name = (char *)"AR5K_SIMR2", .addr = 172}, {.name = (char *)"AR5K_SIMR3", .addr = 176}, {.name = (char *)"AR5K_SIMR4", .addr = 180}, {.name = (char *)"AR5K_DCM_ADDR", .addr = 1024}, {.name = (char *)"AR5K_DCCFG", .addr = 1056}, {.name = (char *)"AR5K_CCFG", .addr = 1536}, {.name = (char *)"AR5K_CPC0", .addr = 1552}, {.name = (char *)"AR5K_CPC1", .addr = 1556}, {.name = (char *)"AR5K_CPC2", .addr = 1560}, {.name = (char *)"AR5K_CPC3", .addr = 1564}, {.name = (char *)"AR5K_CPCOVF", .addr = 1568}, {.name = (char *)"AR5K_RESET_CTL", .addr = 16384}, {.name = (char *)"AR5K_SLEEP_CTL", .addr = 16388}, {.name = (char *)"AR5K_INTPEND", .addr = 16392}, {.name = (char *)"AR5K_SFR", .addr = 16396}, {.name = (char *)"AR5K_PCICFG", .addr = 16400}, {.name = (char *)"AR5K_GPIOCR", .addr = 16404}, {.name = (char *)"AR5K_GPIODO", .addr = 16408}, {.name = (char *)"AR5K_SREV", .addr = 16416}};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static void *reg_start(struct seq_file *seq, loff_t *pos)
{
  #line 141 
  void *tmp;
  #line 141 
  if ((unsigned long long)*pos <= 47ULL) 
                                         #line 141 
                                         tmp = (void *)(& regs[*pos]); else 
                                                                    #line 141 
                                                                    tmp = (void *)0;
  #line 141 
  return tmp;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static void reg_stop(struct seq_file *seq, void *p)
{
  #line 146 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static void *reg_next(struct seq_file *seq, void *p, loff_t *pos)
{
  #line 152 
  void *tmp;
  #line 151 
  (*pos) ++;
  #line 152 
  if ((unsigned long long)*pos <= 47ULL) 
                                         #line 152 
                                         tmp = (void *)(& regs[*pos]); else 
                                                                    #line 152 
                                                                    tmp = (void *)0;
  #line 152 
  return tmp;
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static int reg_show(struct seq_file *seq, void *p)
{
  #line 157 
  struct ath5k_hw *ah = (struct ath5k_hw *)seq->private;
  #line 158 
  struct reg *r = (struct reg *)p;
  #line 159 
  ;
  #line 159 
  ;
  #line 159 
  seq_printf(seq,(char *)"%-25s0x%08x\n",r->name,ath5k_hw_reg_read(ah,(unsigned short)((int)((unsigned short)r->addr))));
  #line 161 
  return 0;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct seq_operations register_seq_ops = {.start = & reg_start, .stop = & reg_stop, .next = & reg_next, .show = & reg_show};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static int open_file_registers(struct inode *inode, struct file *file)
{
  #line 173 
  struct seq_file *s;
  #line 174 
  int res;
  #line 175 
  res = cif_seq_open(file,& register_seq_ops);
  #line 176 
  if (res == 0) {
    #line 177 
    s = (struct seq_file *)file->private_data;
    #line 178 
    s->private = inode->i_private;
  }
  #line 180 
  return res;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_registers = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & open_file_registers, .release = & seq_release};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_beacon(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 198 
  char buf[500U];
  #line 200 
  unsigned int v;
  #line 201 
  u64 tsf;
  #line 203 
  int tmp;
  #line 213 
  int tmp_3;
  #line 215 
  int tmp_6;
  #line 219 
  int tmp_8;
  #line 223 
  int tmp_10;
  #line 227 
  int tmp_12;
  #line 197 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 199 
  unsigned int len = 0U;
  #line 203 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 203 
                                                   tmp = 32804; else 
                                                                  #line 203 
                                                                  tmp = 32800;
  #line 203 
  ;
  #line 203 
  v = ath5k_hw_reg_read(ah,(unsigned short)tmp);
  #line 207 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 500UL - (unsigned long)len,
                 (char *)"%-24s0x%08x\tintval: %d\tTIM: 0x%x\n",
                 (char *)"AR5K_BEACON",v,v & 65535U,(v >> 16) & 127U) + len;
  #line 210 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 500UL - (unsigned long)len,(char *)"%-24s0x%08x\n",
                 (char *)"AR5K_LAST_TSTP",
                 ath5k_hw_reg_read(ah,(unsigned short)32896)) + len;
  #line 213 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 213 
                                                   tmp_3 = 32928; else 
                                                                    #line 213 
                                                                    tmp_3 = 32920;
  #line 213 
  ;
  #line 213 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 500UL - (unsigned long)len,(char *)"%-24s0x%08x\n\n",
                 (char *)"AR5K_BEACON_CNT",
                 ath5k_hw_reg_read(ah,(unsigned short)tmp_3)) + len;
  #line 215 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 215 
                                                   tmp_6 = 32812; else 
                                                                    #line 215 
                                                                    tmp_6 = 32808;
  #line 215 
  ;
  #line 215 
  v = ath5k_hw_reg_read(ah,(unsigned short)tmp_6);
  #line 217 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 500UL - (unsigned long)len,
                 (char *)"%-24s0x%08x\tTU: %08x\n",
                 (char *)"AR5K_TIMER0 (TBTT)",v,v) + len;
  #line 219 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 219 
                                                   tmp_8 = 32816; else 
                                                                    #line 219 
                                                                    tmp_8 = 32812;
  #line 219 
  ;
  #line 219 
  v = ath5k_hw_reg_read(ah,(unsigned short)tmp_8);
  #line 221 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 500UL - (unsigned long)len,
                 (char *)"%-24s0x%08x\tTU: %08x\n",
                 (char *)"AR5K_TIMER1 (DMA)",v,v >> 3) + len;
  #line 223 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 223 
                                                   tmp_10 = 32820; else 
                                                                    #line 223 
                                                                    tmp_10 = 32816;
  #line 223 
  ;
  #line 223 
  v = ath5k_hw_reg_read(ah,(unsigned short)tmp_10);
  #line 225 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  500UL - (unsigned long)len,
                  (char *)"%-24s0x%08x\tTU: %08x\n",
                  (char *)"AR5K_TIMER2 (SWBA)",v,v >> 3) + len;
  #line 227 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 227 
                                                   tmp_12 = 32824; else 
                                                                    #line 227 
                                                                    tmp_12 = 32820;
  #line 227 
  ;
  #line 227 
  v = ath5k_hw_reg_read(ah,(unsigned short)tmp_12);
  #line 229 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  500UL - (unsigned long)len,
                  (char *)"%-24s0x%08x\tTU: %08x\n",
                  (char *)"AR5K_TIMER3 (ATIM)",v,v) + len;
  #line 231 
  tsf = ath5k_hw_get_tsf64(ah);
  #line 234 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  500UL - (unsigned long)len,
                  (char *)"TSF\t\t0x%016llx\tTU: %08x\n",tsf,
                  (unsigned int)(tsf >> 10)) + len;
  #line 236 
  if (len > 500U) 
                  #line 237 
                  len = 500U;
  #line 239 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                 (unsigned long)len);
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_beacon(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 249 
  unsigned long __UNIQUE_ID___x555;
  #line 249 
  unsigned long tmp;
  #line 247 
  char buf[20U];
  #line 246 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  {
    #line 249 
    __UNIQUE_ID___x555 = count;
    #line 249 
    unsigned long __UNIQUE_ID___y556 = 19UL;
    #line 249 
    if (__UNIQUE_ID___x555 < __UNIQUE_ID___y556) 
                                                 #line 249 
                                                 tmp = __UNIQUE_ID___x555; else 
                                                                    #line 249 
                                                                    tmp = __UNIQUE_ID___y556;
    }
  #line 249 
  count = tmp;
  #line 250 
  if (copy_from_user((void *)(& buf),(void *)userbuf,count) != 0UL) 
                                                                    #line 251 
                                                                    return -14L;
  #line 253 
  buf[count] = (char)0;
  #line 254 
  if (cif_strncmp((char *)(& buf),(char *)"disable",7UL) == 0) {
    #line 255 
    int tmp_2;
    #line 255 
    int tmp_3;
    #line 255 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 255 
                                                     tmp_2 = 32804; else 
                                                                    #line 255 
                                                                    tmp_2 = 32800;
    #line 255 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 255 
                                                     tmp_3 = 32804; else 
                                                                    #line 255 
                                                                    tmp_3 = 32800;
    #line 255 
    ;
    #line 255 
    ;
    #line 255 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)tmp_3) & 4286578687U,(unsigned short)tmp_2);
    #line 256 
    printk((char *)"\001");
  }
  else {
    #line 257 
    if (cif_strncmp((char *)(& buf),(char *)"enable",6UL) == 0) {
      #line 258 
      int tmp_5;
      #line 258 
      int tmp_6;
      #line 258 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 258 
                                                       tmp_5 = 32804; else 
                                                                    #line 258 
                                                                    tmp_5 = 32800;
      #line 258 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 258 
                                                       tmp_6 = 32804; else 
                                                                    #line 258 
                                                                    tmp_6 = 32800;
      #line 258 
      ;
      #line 258 
      ;
      #line 258 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)tmp_6) | 8388608U,(unsigned short)tmp_5);
      #line 259 
      printk((char *)"\001");
    }
  }
  #line 261 
  return (long)count;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_beacon = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_beacon, .write = & write_file_beacon, .open = & simple_open};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_reset(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 279 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 280 
  if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
    #line 280 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 280 
                                            _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"write_file_reset",280);
  }
  #line 281 
  ieee80211_queue_work(ah->hw,& ah->reset_work);
  #line 282 
  return (long)count;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_reset = {.owner = & __this_module, .llseek = & noop_llseek, .write = & write_file_reset, .open = & simple_open};
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct __anonstruct_dbg_info_15577 dbg_info[13U] = {{.level = ATH5K_DEBUG_RESET, .name = (char *)"reset", .desc = (char *)"reset and initialization"}, {.level = ATH5K_DEBUG_INTR, .name = (char *)"intr", .desc = (char *)"interrupt handling"}, {.level = ATH5K_DEBUG_MODE, .name = (char *)"mode", .desc = (char *)"mode init/setup"}, {.level = ATH5K_DEBUG_XMIT, .name = (char *)"xmit", .desc = (char *)"basic xmit operation"}, {.level = ATH5K_DEBUG_BEACON, .name = (char *)"beacon", .desc = (char *)"beacon handling"}, {.level = ATH5K_DEBUG_CALIBRATE, .name = (char *)"calib", .desc = (char *)"periodic calibration"}, {.level = ATH5K_DEBUG_TXPOWER, .name = (char *)"txpower", .desc = (char *)"transmit power setting"}, {.level = ATH5K_DEBUG_LED, .name = (char *)"led", .desc = (char *)"LED management"}, {.level = ATH5K_DEBUG_DUMPBANDS, .name = (char *)"dumpbands", .desc = (char *)"dump bands"}, {.level = ATH5K_DEBUG_DMA, .name = (char *)"dma", .desc = (char *)"dma start/stop"}, {.level = ATH5K_DEBUG_ANI, .name = (char *)"ani", .desc = (char *)"adaptive noise immunity"}, {.level = ATH5K_DEBUG_DESC, .name = (char *)"desc", .desc = (char *)"descriptor chains"}, {.level = ATH5K_DEBUG_ANY, .name = (char *)"all", .desc = (char *)"show all debug levels"}};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_debug(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 319 
  char buf[700U];
  #line 321 
  unsigned int i;
  #line 333 
  int tmp_2;
  #line 318 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 320 
  unsigned int len = 0U;
  #line 324 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
               700UL - (unsigned long)len,(char *)"DEBUG LEVEL: 0x%08x\n\n",
               ah->debug.level) + len;
  #line 326 
  i = 0U;
  #line 326 
  while (i <= 11U) {
    #line 328 
    int tmp_0;
    #line 327 
    ;
    #line 327 
    ;
    #line 328 
    if ((ah->debug.level & (unsigned int)dbg_info[i].level) != 0U) 
                                                                   #line 328 
                                                                   tmp_0 = 43; else 
                                                                    #line 328 
                                                                    tmp_0 = 32;
    #line 327 
    ;
    #line 330 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"%10s %c 0x%08x - %s\n",
                 dbg_info[i].name,tmp_0,(unsigned int)dbg_info[i].level,
                 dbg_info[i].desc) + len;
    #line 326 
    i ++;
  }
  #line 332 
  ;
  #line 332 
  ;
  #line 333 
  if (ah->debug.level == (unsigned int)dbg_info[i].level) 
                                                          #line 333 
                                                          tmp_2 = 43; else 
                                                                    #line 333 
                                                                    tmp_2 = 32;
  #line 332 
  ;
  #line 335 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"%10s %c 0x%08x - %s\n",
                 dbg_info[i].name,tmp_2,(unsigned int)dbg_info[i].level,
                 dbg_info[i].desc) + len;
  #line 337 
  if (len > 700U) 
                  #line 338 
                  len = 700U;
  #line 340 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_debug(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 351 
  unsigned long __UNIQUE_ID___x557;
  #line 351 
  unsigned long tmp;
  #line 348 
  unsigned int i;
  #line 349 
  char buf[20U];
  #line 347 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  {
    #line 351 
    __UNIQUE_ID___x557 = count;
    #line 351 
    unsigned long __UNIQUE_ID___y558 = 19UL;
    #line 351 
    if (__UNIQUE_ID___x557 < __UNIQUE_ID___y558) 
                                                 #line 351 
                                                 tmp = __UNIQUE_ID___x557; else 
                                                                    #line 351 
                                                                    tmp = __UNIQUE_ID___y558;
    }
  #line 351 
  count = tmp;
  #line 352 
  if (copy_from_user((void *)(& buf),(void *)userbuf,count) != 0UL) 
                                                                    #line 353 
                                                                    return -14L;
  #line 355 
  buf[count] = (char)0;
  #line 356 
  i = 0U;
  #line 356 
  while (i <= 12U) {
    #line 357 
    ;
    #line 357 
    if (cif_strncmp((char *)(& buf),dbg_info[i].name,
                    cif_strlen(dbg_info[i].name)) == 0) {
      #line 359 
      ah->debug.level ^= (unsigned int)dbg_info[i].level;
      #line 360 
      break;
    }
    #line 356 
    i ++;
  }
  #line 363 
  return (long)count;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_debug = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_debug, .write = & write_file_debug, .open = & simple_open};
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_antenna(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 381 
  char buf[700U];
  #line 383 
  unsigned int i;
  #line 384 
  unsigned int v;
  #line 380 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 382 
  unsigned int len = 0U;
  #line 387 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
               700UL - (unsigned long)len,(char *)"antenna mode\t%d\n",
               (int)ah->ah_ant_mode) + len;
  #line 389 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"default antenna\t%d\n",
                 (int)ah->ah_def_ant) + len;
  #line 391 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"tx antenna\t%d\n",
                 (int)ah->ah_tx_ant) + len;
  #line 393 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"\nANTENNA\t\tRX\tTX\n") + len;
  #line 394 
  i = 1U;
  #line 394 
  while (i <= 4U) {
    #line 397 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"[antenna %d]\t%d\t%d\n",
                 i,ah->stats.antenna_rx[i],ah->stats.antenna_tx[i]) + len;
    #line 394 
    i ++;
  }
  #line 400 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"[invalid]\t%d\t%d\n",
                 ah->stats.antenna_rx[0],ah->stats.antenna_tx[0]) + len;
  #line 402 
  v = ath5k_hw_reg_read(ah,(unsigned short)32856);
  #line 404 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"\nAR5K_DEFAULT_ANTENNA\t0x%08x\n",v) + len;
  #line 406 
  v = ath5k_hw_reg_read(ah,(unsigned short)32772);
  #line 409 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"AR5K_STA_ID1_DEFAULT_ANTENNA\t%d\n",
                 (v & 2097152U) != 0U) + len;
  #line 412 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"AR5K_STA_ID1_DESC_ANTENNA\t%d\n",
                 (v & 4194304U) != 0U) + len;
  #line 415 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"AR5K_STA_ID1_RTS_DEF_ANTENNA\t%d\n",
                 (v & 8388608U) != 0U) + len;
  #line 418 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"AR5K_STA_ID1_SELFGEN_DEF_ANT\t%d\n",
                 (v & 67108864U) != 0U) + len;
  #line 420 
  v = ath5k_hw_reg_read(ah,(unsigned short)39008);
  #line 423 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"\nAR5K_PHY_AGCCTL_OFDM_DIV_DIS\t%d\n",
                  (v & 8U) != 0U) + len;
  #line 425 
  v = ath5k_hw_reg_read(ah,(unsigned short)39280);
  #line 428 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"AR5K_PHY_RESTART_DIV_GC\t\t%x\n",(v >> 18) & 7U) + len;
  #line 430 
  v = ath5k_hw_reg_read(ah,(unsigned short)41480);
  #line 433 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"AR5K_PHY_FAST_ANT_DIV_EN\t%d\n",(v & 8192U) != 0U) + len;
  #line 435 
  v = ath5k_hw_reg_read(ah,(unsigned short)39264);
  #line 437 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"\nAR5K_PHY_ANT_SWITCH_TABLE_0\t0x%08x\n",v) + len;
  #line 438 
  v = ath5k_hw_reg_read(ah,(unsigned short)39268);
  #line 440 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"AR5K_PHY_ANT_SWITCH_TABLE_1\t0x%08x\n",v) + len;
  #line 442 
  if (len > 700U) 
                  #line 443 
                  len = 700U;
  #line 445 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                 (unsigned long)len);
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_antenna(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 456 
  unsigned long __UNIQUE_ID___x559;
  #line 456 
  unsigned long tmp;
  #line 453 
  unsigned int i;
  #line 454 
  char buf[20U];
  #line 452 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  {
    #line 456 
    __UNIQUE_ID___x559 = count;
    #line 456 
    unsigned long __UNIQUE_ID___y560 = 19UL;
    #line 456 
    if (__UNIQUE_ID___x559 < __UNIQUE_ID___y560) 
                                                 #line 456 
                                                 tmp = __UNIQUE_ID___x559; else 
                                                                    #line 456 
                                                                    tmp = __UNIQUE_ID___y560;
    }
  #line 456 
  count = tmp;
  #line 457 
  if (copy_from_user((void *)(& buf),(void *)userbuf,count) != 0UL) 
                                                                    #line 458 
                                                                    return -14L;
  #line 460 
  buf[count] = (char)0;
  #line 461 
  if (cif_strncmp((char *)(& buf),(char *)"diversity",9UL) == 0) {
    #line 462 
    ath5k_hw_set_antenna_mode(ah,(unsigned char)0);
    #line 463 
    printk((char *)"\001");
  }
  else {
    #line 464 
    if (cif_strncmp((char *)(& buf),(char *)"fixed-a",7UL) == 0) {
      #line 465 
      ath5k_hw_set_antenna_mode(ah,(unsigned char)1);
      #line 466 
      printk((char *)"\001");
    }
    else {
      #line 467 
      if (cif_strncmp((char *)(& buf),(char *)"fixed-b",7UL) == 0) {
        #line 468 
        ath5k_hw_set_antenna_mode(ah,(unsigned char)2);
        #line 469 
        printk((char *)"\001");
      }
      else {
        #line 470 
        if (cif_strncmp((char *)(& buf),(char *)"clear",5UL) == 0) {
          #line 471 
          i = 0U;
          #line 471 
          while (i <= 4U) {
            #line 472 
            ah->stats.antenna_rx[i] = 0U;
            #line 473 
            ah->stats.antenna_tx[i] = 0U;
            #line 471 
            i ++;
          }
          #line 475 
          printk((char *)"\001");
        }
      }
    }
  }
  #line 477 
  return (long)count;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_antenna = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_antenna, .write = & write_file_antenna, .open = & simple_open};
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_misc(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 494 
  char buf[700U];
  #line 493 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 495 
  unsigned int len = 0U;
  #line 496 
  u32 filt = ath5k_hw_get_rx_filter(ah);
  #line 499 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"bssid-mask: %pM\n",
                 (u8 *)(& ah->bssidmask)) + len;
  #line 501 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"filter-flags: 0x%x ",
                 filt) + len;
  #line 502 
  if ((filt & 1U) != 0U) {
    #line 503 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" UCAST") + len;
  }
  #line 504 
  if ((filt & 2U) != 0U) {
    #line 505 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" MCAST") + len;
  }
  #line 506 
  if ((filt & 4U) != 0U) {
    #line 507 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" BCAST") + len;
  }
  #line 508 
  if ((filt & 8U) != 0U) {
    #line 509 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" CONTROL") + len;
  }
  #line 510 
  if ((filt & 16U) != 0U) {
    #line 511 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" BEACON") + len;
  }
  #line 512 
  if ((filt & 32U) != 0U) {
    #line 513 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" PROM") + len;
  }
  #line 514 
  if ((filt & 64U) != 0U) {
    #line 515 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" XRPOLL") + len;
  }
  #line 516 
  if ((filt & 128U) != 0U) {
    #line 517 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" PROBEREQ") + len;
  }
  #line 518 
  if ((filt & 256U) != 0U) {
    #line 519 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)" PHYERR-5212") + len;
  }
  #line 520 
  if ((filt & 512U) != 0U) {
    #line 521 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)" RADARERR-5212") + len;
  }
  #line 522 
  if ((filt & 64U) != 0U) 
                          #line 523 
                          snprintf((char *)(& buf) + (unsigned long)len,700UL - (unsigned long)len,(char *)" PHYERR-5211");
  #line 524 
  if ((filt & 128U) != 0U) {
    #line 525 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)" RADARERR-5211") + len;
  }
  #line 527 
  ;
  #line 528 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"\nopmode: %s (%d)\n",
                  ath_opmode_to_string(ah->opmode),(unsigned int)ah->opmode) + len;
  #line 530 
  if (len > 700U) 
                  #line 531 
                  len = 700U;
  #line 533 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                 (unsigned long)len);
}

#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_misc = {.owner = & __this_module, .read = & read_file_misc, .open = & simple_open};
#line 545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_frameerrors(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 550 
  char buf[700U];
  #line 552 
  int i;
  #line 557 
  unsigned int tmp_0;
  #line 561 
  unsigned int tmp_2;
  #line 572 
  unsigned int tmp_5;
  #line 576 
  unsigned int tmp_7;
  #line 580 
  unsigned int tmp_9;
  #line 584 
  unsigned int tmp_11;
  #line 588 
  unsigned int tmp_13;
  #line 599 
  unsigned int tmp_18;
  #line 603 
  unsigned int tmp_20;
  #line 607 
  unsigned int tmp_22;
  #line 548 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 549 
  struct ath5k_statistics *st = & ah->stats;
  #line 551 
  unsigned int len = 0U;
  #line 555 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
               700UL - (unsigned long)len,
               (char *)"RX\n---------------------\n") + len;
  #line 557 
  if (st->rx_all_count != 0U) 
                              #line 557 
                              tmp_0 = (st->rxerr_crc * 100U) / st->rx_all_count; else 
                                                                    #line 557 
                                                                    tmp_0 = 0U;
  #line 556 
  ;
  #line 559 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"CRC\t%u\t(%u%%)\n",
                 st->rxerr_crc,tmp_0) + len;
  #line 561 
  if (st->rx_all_count != 0U) 
                              #line 561 
                              tmp_2 = (st->rxerr_phy * 100U) / st->rx_all_count; else 
                                                                    #line 561 
                                                                    tmp_2 = 0U;
  #line 560 
  ;
  #line 563 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"PHY\t%u\t(%u%%)\n",
                 st->rxerr_phy,tmp_2) + len;
  #line 564 
  i = 0;
  #line 564 
  while (i <= 31) {
    #line 565 
    if (st->rxerr_phy_code[i] != 0U) {
      #line 568 
      len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)" phy_err[%u]\t%u\n",i,
                 st->rxerr_phy_code[i]) + len;
    }
    #line 564 
    i ++;
  }
  #line 572 
  if (st->rx_all_count != 0U) 
                              #line 572 
                              tmp_5 = (st->rxerr_fifo * 100U) / st->rx_all_count; else 
                                                                    #line 572 
                                                                    tmp_5 = 0U;
  #line 571 
  ;
  #line 574 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"FIFO\t%u\t(%u%%)\n",
                 st->rxerr_fifo,tmp_5) + len;
  #line 576 
  if (st->rx_all_count != 0U) 
                              #line 576 
                              tmp_7 = (st->rxerr_decrypt * 100U) / st->rx_all_count; else 
                                                                    #line 576 
                                                                    tmp_7 = 0U;
  #line 575 
  ;
  #line 578 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"decrypt\t%u\t(%u%%)\n",
                 st->rxerr_decrypt,tmp_7) + len;
  #line 580 
  if (st->rx_all_count != 0U) 
                              #line 580 
                              tmp_9 = (st->rxerr_mic * 100U) / st->rx_all_count; else 
                                                                    #line 580 
                                                                    tmp_9 = 0U;
  #line 579 
  ;
  #line 582 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"MIC\t%u\t(%u%%)\n",
                  st->rxerr_mic,tmp_9) + len;
  #line 584 
  if (st->rx_all_count != 0U) 
                              #line 584 
                              tmp_11 = (st->rxerr_proc * 100U) / st->rx_all_count; else 
                                                                    #line 584 
                                                                    tmp_11 = 0U;
  #line 583 
  ;
  #line 586 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"process\t%u\t(%u%%)\n",
                  st->rxerr_proc,tmp_11) + len;
  #line 588 
  if (st->rx_all_count != 0U) 
                              #line 588 
                              tmp_13 = (st->rxerr_jumbo * 100U) / st->rx_all_count; else 
                                                                    #line 588 
                                                                    tmp_13 = 0U;
  #line 587 
  ;
  #line 590 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"jumbo\t%u\t(%u%%)\n",
                  st->rxerr_jumbo,tmp_13) + len;
  #line 592 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"[RX all\t%u]\n",
                  st->rx_all_count) + len;
  #line 594 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"RX-all-bytes\t%u\n",
                  st->rx_bytes_count) + len;
  #line 597 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"\nTX\n---------------------\n") + len;
  #line 599 
  if (st->tx_all_count != 0U) 
                              #line 599 
                              tmp_18 = (st->txerr_retry * 100U) / st->tx_all_count; else 
                                                                    #line 599 
                                                                    tmp_18 = 0U;
  #line 598 
  ;
  #line 601 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"retry\t%u\t(%u%%)\n",
                  st->txerr_retry,tmp_18) + len;
  #line 603 
  if (st->tx_all_count != 0U) 
                              #line 603 
                              tmp_20 = (st->txerr_fifo * 100U) / st->tx_all_count; else 
                                                                    #line 603 
                                                                    tmp_20 = 0U;
  #line 602 
  ;
  #line 605 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"FIFO\t%u\t(%u%%)\n",
                  st->txerr_fifo,tmp_20) + len;
  #line 607 
  if (st->tx_all_count != 0U) 
                              #line 607 
                              tmp_22 = (st->txerr_filt * 100U) / st->tx_all_count; else 
                                                                    #line 607 
                                                                    tmp_22 = 0U;
  #line 606 
  ;
  #line 609 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"filter\t%u\t(%u%%)\n",
                  st->txerr_filt,tmp_22) + len;
  #line 611 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"[TX all\t%u]\n",
                  st->tx_all_count) + len;
  #line 613 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,(char *)"TX-all-bytes\t%u\n",
                  st->tx_bytes_count) + len;
  #line 615 
  if (len > 700U) 
                  #line 616 
                  len = 700U;
  #line 618 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                 (unsigned long)len);
}

#line 621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_frameerrors(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 629 
  unsigned long tmp;
  #line 629 
  unsigned long __UNIQUE_ID___x561;
  #line 627 
  char buf[20U];
  #line 625 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 626 
  struct ath5k_statistics *st = & ah->stats;
  {
    #line 629 
    __UNIQUE_ID___x561 = count;
    #line 629 
    unsigned long __UNIQUE_ID___y562 = 19UL;
    #line 629 
    if (__UNIQUE_ID___x561 < __UNIQUE_ID___y562) 
                                                 #line 629 
                                                 tmp = __UNIQUE_ID___x561; else 
                                                                    #line 629 
                                                                    tmp = __UNIQUE_ID___y562;
    }
  #line 629 
  count = tmp;
  #line 630 
  if (copy_from_user((void *)(& buf),(void *)userbuf,count) != 0UL) 
                                                                    #line 631 
                                                                    return -14L;
  #line 633 
  buf[count] = (char)0;
  #line 634 
  if (cif_strncmp((char *)(& buf),(char *)"clear",5UL) == 0) {
    #line 635 
    st->rxerr_crc = 0U;
    #line 636 
    st->rxerr_phy = 0U;
    #line 637 
    st->rxerr_fifo = 0U;
    #line 638 
    st->rxerr_decrypt = 0U;
    #line 639 
    st->rxerr_mic = 0U;
    #line 640 
    st->rxerr_proc = 0U;
    #line 641 
    st->rxerr_jumbo = 0U;
    #line 642 
    st->rx_all_count = 0U;
    #line 643 
    st->txerr_retry = 0U;
    #line 644 
    st->txerr_fifo = 0U;
    #line 645 
    st->txerr_filt = 0U;
    #line 646 
    st->tx_all_count = 0U;
    #line 647 
    printk((char *)"\001");
  }
  #line 649 
  return (long)count;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_frameerrors = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_frameerrors, .write = & write_file_frameerrors, .open = & simple_open};
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_ani(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 670 
  char buf[700U];
  #line 674 
  char *tmp;
  #line 713 
  char *tmp_12;
  #line 716 
  char *tmp_14;
  #line 733 
  u32 tmp_19;
  #line 736 
  u32 tmp_21;
  #line 739 
  u32 tmp_23;
  #line 666 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 667 
  struct ath5k_statistics *st = & ah->stats;
  #line 668 
  struct ath5k_ani_state *as = & ah->ani_state;
  #line 671 
  unsigned int len = 0U;
  #line 674 
  if ((int)ah->ah_capabilities.cap_has_phyerr_counters != 0) 
                                                             #line 674 
                                                             tmp = (char *)"yes"; else 
                                                                    #line 674 
                                                                    tmp = (char *)"no";
  #line 676 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"HW has PHY error counters:\t%s\n",tmp) + len;
  #line 679 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"HW max spur immunity level:\t%d\n",
                 as->max_spur_level) + len;
  #line 681 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"\nANI state\n--------------------------------------------\n") + len;
  #line 682 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"operating mode:\t\t\t") + len;
  #line 683 
  switch ((unsigned int)as->ani_mode) {
    #line 684 
    case (unsigned int)0: 
                          #line 684 
    ;
    #line 685 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"OFF\n") + len;
    #line 686 
    break;
    #line 687 
    case (unsigned int)1: 
                          #line 687 
    ;
    #line 689 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"MANUAL LOW\n") + len;
    #line 690 
    break;
    #line 691 
    case (unsigned int)2: 
                          #line 691 
    ;
    #line 693 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"MANUAL HIGH\n") + len;
    #line 694 
    break;
    #line 695 
    case (unsigned int)3: 
                          #line 695 
    ;
    #line 696 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"AUTO\n") + len;
    #line 697 
    break;
    #line 698 
    default: 
             #line 698 
    ;
    #line 700 
    len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"?\?\? (not good)\n") + len;
    #line 701 
    break;
  }
  #line 705 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,
                 (char *)"noise immunity level:\t\t%d\n",as->noise_imm_level) + len;
  #line 708 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"spur immunity level:\t\t%d\n",as->spur_level) + len;
  #line 711 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"firstep level:\t\t\t%d\n",as->firstep_level) + len;
  #line 713 
  if ((int)as->ofdm_weak_sig != 0) 
                                   #line 713 
                                   tmp_12 = (char *)"on"; else 
                                                               #line 713 
                                                               tmp_12 = (char *)"off";
  #line 714 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"OFDM weak signal detection:\t%s\n",tmp_12) + len;
  #line 716 
  if ((int)as->cck_weak_sig != 0) 
                                  #line 716 
                                  tmp_14 = (char *)"on"; else 
                                                              #line 716 
                                                              tmp_14 = (char *)"off";
  #line 717 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"CCK weak signal detection:\t%s\n",tmp_14) + len;
  #line 721 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"\nMIB INTERRUPTS:\t\t%u\n",st->mib_intr) + len;
  #line 724 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"beacon RSSI average:\t%d\n",
                  (int)ewma_beacon_rssi_read(& ah->ah_beacon_rssi_avg)) + len;
  #line 733 
  if (as->last_cc.cycles != 0U) 
                                #line 733 
                                tmp_19 = (as->last_cc.tx_frame * 100U) / as->last_cc.cycles; else 
                                                                    #line 733 
                                                                    tmp_19 = 0U;
  #line 731 
  ;
  #line 733 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"profcnt tx\t\t%u\t(%d%%)\n",as->last_cc.tx_frame,
                  tmp_19) + len;
  #line 736 
  if (as->last_cc.cycles != 0U) 
                                #line 736 
                                tmp_21 = (as->last_cc.rx_frame * 100U) / as->last_cc.cycles; else 
                                                                    #line 736 
                                                                    tmp_21 = 0U;
  #line 734 
  ;
  #line 736 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"profcnt rx\t\t%u\t(%d%%)\n",as->last_cc.rx_frame,
                  tmp_21) + len;
  #line 739 
  if (as->last_cc.cycles != 0U) 
                                #line 739 
                                tmp_23 = (as->last_cc.rx_busy * 100U) / as->last_cc.cycles; else 
                                                                    #line 739 
                                                                    tmp_23 = 0U;
  #line 737 
  ;
  #line 739 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"profcnt busy\t\t%u\t(%d%%)\n",as->last_cc.rx_busy,
                  tmp_23) + len;
  #line 742 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"profcnt cycles\t\t%u\n",as->last_cc.cycles) + len;
  #line 745 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"listen time\t\t%d\tlast: %d\n",as->listen_time,
                  as->last_listen) + len;
  #line 749 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"OFDM errors\t\t%u\tlast: %u\tsum: %u\n",
                  as->ofdm_errors,as->last_ofdm_errors,as->sum_ofdm_errors) + len;
  #line 753 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"CCK errors\t\t%u\tlast: %u\tsum: %u\n",
                  as->cck_errors,as->last_cck_errors,as->sum_cck_errors) + len;
  #line 758 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"AR5K_PHYERR_CNT1\t%x\t(=%d)\n",
                  ath5k_hw_reg_read(ah,(unsigned short)33068),
                  ath5k_hw_reg_read(ah,(unsigned short)33068) + 4282384884U) + len;
  #line 763 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                  700UL - (unsigned long)len,
                  (char *)"AR5K_PHYERR_CNT2\t%x\t(=%d)\n",
                  ath5k_hw_reg_read(ah,(unsigned short)33076),
                  ath5k_hw_reg_read(ah,(unsigned short)33076) + 4282384584U) + len;
  #line 765 
  if (len > 700U) 
                  #line 766 
                  len = 700U;
  #line 768 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                 (unsigned long)len);
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_ani(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 778 
  unsigned long __UNIQUE_ID___x563;
  #line 778 
  unsigned long tmp;
  #line 776 
  char buf[20U];
  #line 775 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  {
    #line 778 
    __UNIQUE_ID___x563 = count;
    #line 778 
    unsigned long __UNIQUE_ID___y564 = 19UL;
    #line 778 
    if (__UNIQUE_ID___x563 < __UNIQUE_ID___y564) 
                                                 #line 778 
                                                 tmp = __UNIQUE_ID___x563; else 
                                                                    #line 778 
                                                                    tmp = __UNIQUE_ID___y564;
    }
  #line 778 
  count = tmp;
  #line 779 
  if (copy_from_user((void *)(& buf),(void *)userbuf,count) != 0UL) 
                                                                    #line 780 
                                                                    return -14L;
  #line 782 
  buf[count] = (char)0;
  #line 783 
  if (cif_strncmp((char *)(& buf),(char *)"sens-low",8UL) == 0) 
                                                                #line 784 
                                                                ath5k_ani_init(ah,(enum ath5k_ani_mode)ATH5K_ANI_MODE_MANUAL_HIGH);
  else {
    #line 785 
    if (cif_strncmp((char *)(& buf),(char *)"sens-high",9UL) == 0) 
                                                                   #line 786 
                                                                   ath5k_ani_init(ah,(enum ath5k_ani_mode)ATH5K_ANI_MODE_MANUAL_LOW);
    else {
      #line 787 
      if (cif_strncmp((char *)(& buf),(char *)"ani-off",7UL) == 0) 
                                                                   #line 788 
                                                                   ath5k_ani_init(ah,(enum ath5k_ani_mode)ATH5K_ANI_MODE_OFF);
      else {
        #line 789 
        if (cif_strncmp((char *)(& buf),(char *)"ani-on",6UL) == 0) 
                                                                    #line 790 
                                                                    ath5k_ani_init(ah,(enum ath5k_ani_mode)ATH5K_ANI_MODE_AUTO);
        else {
          #line 791 
          if (cif_strncmp((char *)(& buf),(char *)"noise-low",9UL) == 0) 
            #line 792 
            ath5k_ani_set_noise_immunity_level(ah,0);
          else {
            #line 793 
            if (cif_strncmp((char *)(& buf),(char *)"noise-high",10UL) == 0) 
              #line 794 
              ath5k_ani_set_noise_immunity_level(ah,1);
            else {
              #line 796 
              if (cif_strncmp((char *)(& buf),(char *)"spur-low",8UL) == 0) 
                #line 797 
                ath5k_ani_set_spur_immunity_level(ah,0);
              else {
                #line 798 
                if (cif_strncmp((char *)(& buf),(char *)"spur-high",9UL) == 0) 
                  #line 799 
                  ath5k_ani_set_spur_immunity_level(ah,ah->ani_state.max_spur_level);
                else {
                  #line 801 
                  if (cif_strncmp((char *)(& buf),(char *)"fir-low",7UL) == 0) 
                    #line 802 
                    ath5k_ani_set_firstep_level(ah,0);
                  else {
                    #line 803 
                    if (cif_strncmp((char *)(& buf),(char *)"fir-high",8UL) == 0) 
                      #line 804 
                      ath5k_ani_set_firstep_level(ah,2);
                    else {
                      #line 805 
                      if (cif_strncmp((char *)(& buf),(char *)"ofdm-off",8UL) == 0) 
                        #line 806 
                        ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)0);
                      else {
                        #line 807 
                        if (cif_strncmp((char *)(& buf),(char *)"ofdm-on",7UL) == 0) 
                          #line 808 
                          ath5k_ani_set_ofdm_weak_signal_detection(ah,(_Bool)1);
                        else {
                          #line 809 
                          if (cif_strncmp((char *)(& buf),(char *)"cck-off",7UL) == 0) 
                            #line 810 
                            ath5k_ani_set_cck_weak_signal_detection(ah,(_Bool)0);
                          else {
                            #line 811 
                            if (cif_strncmp((char *)(& buf),(char *)"cck-on",6UL) == 0) 
                              #line 812 
                              ath5k_ani_set_cck_weak_signal_detection(ah,(_Bool)1);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #line 814 
  return (long)count;
}

#line 817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_ani = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_ani, .write = & write_file_ani, .open = & simple_open};
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_queue(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 832 
  char buf[700U];
  #line 835 
  struct ath5k_txq *txq;
  #line 836 
  struct ath5k_buf *bf;
  #line 836 
  struct ath5k_buf *bf0;
  #line 837 
  int i;
  #line 837 
  int n;
  #line 831 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  #line 833 
  unsigned int len = 0U;
  #line 840 
  len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
               700UL - (unsigned long)len,
               (char *)"available txbuffers: %d\n",ah->txbuf_len) + len;
  #line 842 
  i = 0;
  #line 842 
  while ((unsigned int)i <= 9U) {
    {
      #line 853 
      void *__mptr;
      #line 853 
      void *__mptr_0;
      #line 846 
      char *tmp_0;
      #line 843 
      txq = & ah->txqs[i];
      #line 846 
      if ((int)txq->setup != 0) 
                                #line 846 
                                tmp_0 = (char *)""; else 
                                                         #line 846 
                                                         tmp_0 = (char *)"not ";
      #line 845 
      ;
      #line 846 
      len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"%02d: %ssetup\n",i,
                 tmp_0) + len;
      #line 848 
      if (! txq->setup) 
                        #line 849 
                        goto __Cont;
      #line 851 
      n = 0;
      #line 852 
      cif_spin_lock_bh_lock_of_ath5k_txq_0(& txq->lock);
      #line 853 
      __mptr = (void *)txq->q.next;
      #line 853 
      bf = ((struct ath5k_buf *)__mptr);
      #line 853 
      __mptr_0 = (void *)bf->list.next;
      #line 854 
      bf0 = ((struct ath5k_buf *)__mptr_0);
      #line 853 
      while (& bf->list != & txq->q) {
        #line 853 
        void *__mptr_1;
        #line 854 
        n ++;
        #line 853 
        bf = bf0;
        #line 853 
        __mptr_1 = (void *)bf0->list.next;
        #line 853 
        bf0 = ((struct ath5k_buf *)__mptr_1);
      }
      #line 855 
      cif_spin_unlock_bh_lock_of_ath5k_txq_0(& txq->lock);
      #line 858 
      len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"  len: %d bufs: %d\n",
                 txq->txq_len,n) + len;
      #line 860 
      len = (unsigned int)snprintf((char *)(& buf) + (unsigned long)len,
                 700UL - (unsigned long)len,(char *)"  stuck: %d\n",
                 txq->txq_stuck) + len;
    }
    #line 842 
    __Cont: 
            #line 842 
    i ++;
  }
  #line 863 
  if (len > 700U) 
                  #line 864 
                  len = 700U;
  #line 866 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)(& buf),
                                (unsigned long)len);
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t write_file_queue(struct file *file, char *userbuf, size_t count, loff_t *ppos)
{
  #line 876 
  unsigned long __UNIQUE_ID___x565;
  #line 876 
  unsigned long tmp;
  #line 874 
  char buf[20U];
  #line 873 
  struct ath5k_hw *ah = (struct ath5k_hw *)file->private_data;
  {
    #line 876 
    __UNIQUE_ID___x565 = count;
    #line 876 
    unsigned long __UNIQUE_ID___y566 = 19UL;
    #line 876 
    if (__UNIQUE_ID___x565 < __UNIQUE_ID___y566) 
                                                 #line 876 
                                                 tmp = __UNIQUE_ID___x565; else 
                                                                    #line 876 
                                                                    tmp = __UNIQUE_ID___y566;
    }
  #line 876 
  count = tmp;
  #line 877 
  if (copy_from_user((void *)(& buf),(void *)userbuf,count) != 0UL) 
                                                                    #line 878 
                                                                    return -14L;
  #line 880 
  buf[count] = (char)0;
  #line 881 
  if (cif_strncmp((char *)(& buf),(char *)"start",5UL) == 0) 
                                                             #line 882 
                                                             ieee80211_wake_queues(ah->hw);
  else {
    #line 883 
    if (cif_strncmp((char *)(& buf),(char *)"stop",4UL) == 0) 
                                                              #line 884 
                                                              ieee80211_stop_queues(ah->hw);
  }
  #line 886 
  return (long)count;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_queue = {.owner = & __this_module, .llseek = & default_llseek, .read = & read_file_queue, .write = & write_file_queue, .open = & simple_open};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static int open_file_eeprom(struct inode *inode, struct file *file)
{
  #line 907 
  struct eeprom_private *ep;
  #line 909 
  bool res;
  #line 910 
  int i;
  #line 910 
  int ret;
  #line 911 
  u32 eesize;
  #line 912 
  u16 val;
  #line 912 
  u16 *buf;
  #line 908 
  struct ath5k_hw *ah = (struct ath5k_hw *)inode->i_private;
  #line 916 
  res = ath5k_hw_nvram_read(ah,28U,& val);
  #line 917 
  if (! res) 
             #line 918 
             return -13;
  #line 920 
  if ((unsigned int)val == 0U) 
                               #line 921 
                               eesize = 1024U;
  else {
    #line 923 
    eesize = (unsigned int)((int)val << 12) & 268369920U;
    #line 925 
    ath5k_hw_nvram_read(ah,27U,& val);
    #line 926 
    eesize = (unsigned int)val | eesize;
  }
  #line 929 
  if (eesize > 4096U) 
                      #line 930 
                      return -22;
  #line 934 
  buf = (u16 *)cif_vmalloc(array_size((unsigned long)eesize,2UL));
  #line 935 
  if (buf == (u16 *)0U) {
    #line 936 
    ret = -12;
    #line 937 
    goto err;
  }
  #line 940 
  i = 0;
  #line 940 
  while ((unsigned int)i < eesize) {
    {
      #line 941 
      if (! ath5k_hw_nvram_read(ah,(unsigned int)i,& val)) {
        #line 942 
        ret = -5;
        #line 943 
        goto freebuf;
      }
      #line 945 
      *(buf + (unsigned long)i) = val;
    }
    #line 940 
    i ++;
  }
  #line 950 
  ep = (struct eeprom_private *)kmalloc(16UL,3264U);
  #line 951 
  if (ep == (struct eeprom_private *)0) {
    #line 952 
    ret = -12;
    #line 953 
    goto freebuf;
  }
  #line 956 
  ep->buf = buf;
  #line 957 
  ep->len = (int)(eesize * 2U);
  #line 959 
  file->private_data = (void *)ep;
  #line 961 
  return 0;
  #line 963 
  freebuf: 
           #line 963 
  ;
  #line 964 
  cif_vfree((void *)buf);
  #line 965 
  err: 
       #line 965 
  ;
  #line 966 
  return ret;
}

#line 970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static ssize_t read_file_eeprom(struct file *file, char *user_buf, size_t count, loff_t *ppos)
{
  #line 973 
  struct eeprom_private *ep = (struct eeprom_private *)file->private_data;
  #line 975 
  return simple_read_from_buffer((void *)user_buf,count,ppos,(void *)ep->buf,
                              (unsigned long)ep->len);
}

#line 978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static int release_file_eeprom(struct inode *inode, struct file *file)
{
  #line 980 
  struct eeprom_private *ep = (struct eeprom_private *)file->private_data;
  #line 982 
  cif_vfree((void *)ep->buf);
  #line 983 
  kfree((void *)ep);
  #line 985 
  return 0;
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
static struct file_operations fops_eeprom = {.owner = & __this_module, .read = & read_file_eeprom, .open = & open_file_eeprom, .release = & release_file_eeprom};
#line 997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
void ath5k_debug_init_device(struct ath5k_hw *ah)
{
  #line 999 
  struct dentry *phydir;
  #line 1001 
  ah->debug.level = ath5k_debug;
  #line 1003 
  phydir = cif_debugfs_create_dir((char *)"ath5k",((ah->hw)->wiphy)->debugfsdir);
  #line 1004 
  if (phydir == (struct dentry *)0) 
                                    #line 1005 
                                    return;
  #line 1007 
  cif_debugfs_create_file((char *)"debug",(unsigned short)384,phydir,(void *)ah,& fops_debug);
  #line 1008 
  cif_debugfs_create_file((char *)"registers",(unsigned short)256,phydir,(void *)ah,& fops_registers);
  #line 1009 
  cif_debugfs_create_file((char *)"beacon",(unsigned short)384,phydir,(void *)ah,& fops_beacon);
  #line 1010 
  cif_debugfs_create_file((char *)"reset",(unsigned short)128,phydir,(void *)ah,& fops_reset);
  #line 1011 
  cif_debugfs_create_file((char *)"antenna",(unsigned short)384,phydir,(void *)ah,& fops_antenna);
  #line 1012 
  cif_debugfs_create_file((char *)"misc",(unsigned short)256,phydir,(void *)ah,& fops_misc);
  #line 1013 
  cif_debugfs_create_file((char *)"eeprom",(unsigned short)256,phydir,(void *)ah,& fops_eeprom);
  #line 1014 
  cif_debugfs_create_file((char *)"frameerrors",(unsigned short)384,phydir,(void *)ah,& fops_frameerrors);
  #line 1015 
  cif_debugfs_create_file((char *)"ani",(unsigned short)384,phydir,(void *)ah,& fops_ani);
  #line 1016 
  cif_debugfs_create_file((char *)"queue",(unsigned short)384,phydir,(void *)ah,& fops_queue);
  #line 1017 
  debugfs_create_bool((char *)"32khz_clock",(unsigned short)384,phydir,& ah->ah_use_32khz_clock);
  #line 1019 
  return;
}

#line 1024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
void ath5k_debug_dump_bands(struct ath5k_hw *ah)
{
  #line 1026 
  unsigned int b;
  #line 1026 
  unsigned int i;
  #line 1028 
  if ((long)((ah->debug.level & 1024U) == 0U) != 0L) 
                                                     #line 1029 
                                                     return;
  #line 1031 
  b = 0U;
  #line 1031 
  while (b <= 3U) {
    {
      #line 1033 
      char bname[6U];
      #line 1032 
      struct ieee80211_supported_band *band = & ah->sbands[b];
      #line 1034 
      switch ((unsigned int)band->band) {
        #line 1035 
        case (unsigned int)0: 
                              #line 1035 
        ;
        #line 1036 
        strcpy((char *)(& bname),(char *)"2 GHz");
        #line 1037 
        break;
        #line 1038 
        case (unsigned int)1: 
                              #line 1038 
        ;
        #line 1039 
        strcpy((char *)(& bname),(char *)"5 GHz");
        #line 1040 
        break;
        #line 1041 
        default: 
                 #line 1041 
        ;
        #line 1042 
        printk((char *)"\001",(unsigned int)band->band);
        #line 1044 
        return;
      }
      #line 1046 
      printk((char *)"\001",(char *)(& bname),band->n_channels,band->n_bitrates);
      #line 1048 
      printk((char *)"\001");
      #line 1049 
      i = 0U;
      #line 1049 
      while ((unsigned int)band->n_channels > i) {
        #line 1050 
        ;
        #line 1050 
        ;
        #line 1050 
        ;
        #line 1050 
        printk((char *)"\001",ieee80211_frequency_to_channel((int)(band->channels + (unsigned long)i)->center_freq),(band->channels + (unsigned long)i)->center_freq,(int)(band->channels + (unsigned long)i)->hw_value,(band->channels + (unsigned long)i)->flags);
        #line 1049 
        i ++;
      }
      #line 1056 
      printk((char *)"\001");
      #line 1057 
      i = 0U;
      #line 1057 
      while ((unsigned int)band->n_bitrates > i) {
        #line 1058 
        printk((char *)"\001",(int)(band->bitrates + (unsigned long)i)->bitrate,(int)(band->bitrates + (unsigned long)i)->hw_value,(band->bitrates + (unsigned long)i)->flags,(int)(band->bitrates + (unsigned long)i)->hw_value_short);
        #line 1057 
        i ++;
      }
    }
    #line 1031 
    b ++;
  }
  #line 1064 
  return;
}

#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
__inline static void ath5k_debug_printrxbuf(struct ath5k_buf *bf, int done, struct ath5k_rx_status *rs)
{
  #line 1078 
  int tmp;
  #line 1077 
  int tmp_0;
  #line 1070 
  struct ath5k_desc *ds = bf->desc;
  #line 1071 
  struct ath5k_hw_all_rx_desc *rd = & ds->ud.ds_rx;
  #line 1077 
  if (done != 0) {
    #line 1078 
    if ((unsigned int)rs->rs_status == 0U) 
                                           #line 1078 
                                           tmp = 42; else 
                                                          #line 1078 
                                                          tmp = 33;
    #line 1077 
    tmp_0 = tmp;
  }
  else 
       #line 1077 
       tmp_0 = 32;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  ;
  #line 1073 
  printk((char *)"\001",ds,bf->daddr,ds->ds_link,ds->ds_data,rd->rx_ctl.rx_control_0,rd->rx_ctl.rx_control_1,rd->rx_stat.rx_status_0,rd->rx_stat.rx_status_1,tmp_0);
  #line 1079 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
void ath5k_debug_printrxbuffs(struct ath5k_hw *ah)
{
  #line 1096 
  void *__mptr;
  #line 1084 
  struct ath5k_desc *ds;
  #line 1085 
  struct ath5k_buf *bf;
  #line 1087 
  int status;
  #line 1086 
  struct ath5k_rx_status rs = {.rs_datalen = (unsigned short)0, .rs_tstamp = (unsigned short)0, .rs_status = (unsigned char)0, .rs_phyerr = (unsigned char)0, .rs_rssi = (signed char)0, .rs_keyix = (unsigned char)0, .rs_rate = (unsigned char)0, .rs_antenna = (unsigned char)0, .rs_more = (unsigned char)0};
  #line 1089 
  if ((long)((ah->debug.level & 16384U) == 0U) != 0L) 
                                                      #line 1090 
                                                      return;
  #line 1092 
  ;
  #line 1092 
  printk((char *)"\001",ath5k_hw_get_rxdp(ah),ah->rxlink);
  #line 1095 
  cif_spin_lock_bh_rxbuflock_of_ath5k_hw_0(& ah->rxbuflock);
  #line 1096 
  __mptr = (void *)ah->rxbuf.next;
  #line 1096 
  bf = ((struct ath5k_buf *)__mptr);
  #line 1096 
  while (& bf->list != & ah->rxbuf) {
    #line 1096 
    void *__mptr_0;
    #line 1097 
    ds = bf->desc;
    #line 1098 
    status = (*(ah->ah_proc_rx_desc))(ah,ds,& rs);
    #line 1099 
    if (status == 0) 
                     #line 1100 
                     ath5k_debug_printrxbuf(bf,status == 0,& rs);
    #line 1096 
    __mptr_0 = (void *)bf->list.next;
    #line 1096 
    bf = ((struct ath5k_buf *)__mptr_0);
  }
  #line 1102 
  cif_spin_unlock_bh_rxbuflock_of_ath5k_hw_0(& ah->rxbuflock);
  #line 1103 
  return;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/debug.c"
void ath5k_debug_printtxbuf(struct ath5k_hw *ah, struct ath5k_buf *bf)
{
  #line 1123 
  int tmp;
  #line 1111 
  int done;
  #line 1122 
  int tmp_0;
  #line 1108 
  struct ath5k_desc *ds = bf->desc;
  #line 1109 
  struct ath5k_hw_5212_tx_desc *td = & ds->ud.ds_tx5212;
  #line 1110 
  struct ath5k_tx_status ts = {.ts_seqnum = (unsigned short)0, .ts_tstamp = (unsigned short)0, .ts_status = (unsigned char)0, .ts_final_idx = (unsigned char)0, .ts_final_retry = (unsigned char)0, .ts_rssi = (signed char)0, .ts_shortretry = (unsigned char)0, .ts_virtcol = (unsigned char)0, .ts_antenna = (unsigned char)0};
  #line 1113 
  if ((long)((ah->debug.level & 16384U) == 0U) != 0L) 
                                                      #line 1114 
                                                      return;
  #line 1116 
  done = (*(ah->ah_proc_tx_desc))(ah,bf->desc,& ts);
  #line 1122 
  if (done == 0) {
    #line 1123 
    if ((unsigned int)ts.ts_status == 0U) 
                                          #line 1123 
                                          tmp = 42; else 
                                                         #line 1123 
                                                         tmp = 33;
    #line 1122 
    tmp_0 = tmp;
  }
  else 
       #line 1122 
       tmp_0 = 32;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  ;
  #line 1118 
  printk((char *)"\001",ds,bf->daddr,ds->ds_link,ds->ds_data,td->tx_ctl.tx_control_0,td->tx_ctl.tx_control_1,td->tx_ctl.tx_control_2,td->tx_ctl.tx_control_3,td->tx_stat.tx_status_0,td->tx_stat.tx_status_1,tmp_0);
  #line 1124 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_ani = & fops_ani;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_antenna = & fops_antenna;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_beacon = & fops_beacon;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_debug = & fops_debug;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_eeprom = & fops_eeprom;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_frameerrors = & fops_frameerrors;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_misc = & fops_misc;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_queue = & fops_queue;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_registers = & fops_registers;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct file_operations *emg_alias_fops_reset = & fops_reset;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
struct seq_operations *emg_alias_register_seq_ops = & register_seq_ops;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int (*emg_alias_seq_release)(struct inode *, struct file *) = & seq_release;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int (*emg_alias_simple_open)(struct inode *, struct file *) = & simple_open;
#line 108 
#line 108 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 109 
#line 109 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 114 
#line 114 
int emg_seq_open(struct file *arg0, struct seq_operations *arg1);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int emg_wrapper_open_file_eeprom(struct inode *arg0, struct file *arg1)
{
  #line 122 
  return open_file_eeprom(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int emg_wrapper_open_file_registers(struct inode *arg0, struct file *arg1)
{
  #line 127 
  return open_file_registers(arg0,arg1);
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_ani(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 132 
  return read_file_ani(arg0,arg1,arg2,arg3);
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_antenna(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 137 
  return read_file_antenna(arg0,arg1,arg2,arg3);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_beacon(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 142 
  return read_file_beacon(arg0,arg1,arg2,arg3);
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_debug(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 147 
  return read_file_debug(arg0,arg1,arg2,arg3);
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_eeprom(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 152 
  return read_file_eeprom(arg0,arg1,arg2,arg3);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_frameerrors(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 157 
  return read_file_frameerrors(arg0,arg1,arg2,arg3);
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_misc(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 162 
  return read_file_misc(arg0,arg1,arg2,arg3);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_read_file_queue(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 167 
  return read_file_queue(arg0,arg1,arg2,arg3);
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
void *emg_wrapper_reg_next(struct seq_file *arg0, void *arg1, long long *arg2)
{
  #line 172 
  return reg_next(arg0,arg1,arg2);
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int emg_wrapper_reg_show(struct seq_file *arg0, void *arg1)
{
  #line 177 
  return reg_show(arg0,arg1);
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
void *emg_wrapper_reg_start(struct seq_file *arg0, long long *arg1)
{
  #line 182 
  return reg_start(arg0,arg1);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
void emg_wrapper_reg_stop(struct seq_file *arg0, void *arg1)
{
  #line 187 
  reg_stop(arg0,arg1);
  #line 188 
  return;
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
int emg_wrapper_release_file_eeprom(struct inode *arg0, struct file *arg1)
{
  #line 192 
  return release_file_eeprom(arg0,arg1);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_ani(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 197 
  return write_file_ani(arg0,arg1,arg2,arg3);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_antenna(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 202 
  return write_file_antenna(arg0,arg1,arg2,arg3);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_beacon(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 207 
  return write_file_beacon(arg0,arg1,arg2,arg3);
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_debug(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 212 
  return write_file_debug(arg0,arg1,arg2,arg3);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_frameerrors(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 217 
  return write_file_frameerrors(arg0,arg1,arg2,arg3);
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_queue(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 222 
  return write_file_queue(arg0,arg1,arg2,arg3);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
long emg_wrapper_write_file_reset(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 227 
  return write_file_reset(arg0,arg1,arg2,arg3);
}

#line 267  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 270 
  return ldv_strncmp(cs,ct,count);
}

#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static size_t cif_strlen(char *s)
{
  #line 277 
  return ldv_strlen(s);
}

#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 580 
  return ldv_kmalloc(size,flags);
}

#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static int cif_seq_open(struct file *ldv_func_arg1, struct seq_operations *ldv_func_arg2)
{
  #line 921 
  return emg_seq_open(ldv_func_arg1,ldv_func_arg2);
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_lock_bh_lock_of_ath5k_txq_0(spinlock_t *lock)
{
  #line 928 
  ldv_spin_model_lock((char *)"lock_of_ath5k_txq");
  #line 930 
  spin_lock_bh_2(lock);
  #line 931 
  return;
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_unlock_bh_lock_of_ath5k_txq_0(spinlock_t *lock)
{
  #line 937 
  ldv_spin_model_unlock((char *)"lock_of_ath5k_txq");
  #line 939 
  spin_unlock_bh_2(lock);
  #line 940 
  return;
}

#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 946 
  return ldv_vmalloc(size);
}

#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_vfree(void *addr)
{
  #line 953 
  ldv_vfree(addr);
  #line 954 
  return;
}

#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 961 
  return emg_debugfs_create_dir(name,parent);
}

#line 965  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 969 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 973  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_lock_bh_rxbuflock_of_ath5k_hw_0(spinlock_t *lock)
{
  #line 976 
  ldv_spin_model_lock((char *)"rxbuflock_of_ath5k_hw");
  #line 978 
  spin_lock_bh_2(lock);
  #line 979 
  return;
}

#line 982  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/0/concurrency safety/weaver/debug.i.aux"
static void cif_spin_unlock_bh_rxbuflock_of_ath5k_hw_0(spinlock_t *lock)
{
  #line 985 
  ldv_spin_model_unlock((char *)"rxbuflock_of_ath5k_hw");
  #line 987 
  spin_unlock_bh_2(lock);
  #line 988 
  return;
}

#line 1609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
int ath5k_hw_write_initvals(struct ath5k_hw *ah, u8 mode, bool skip_pcu);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini ar5210_ini[203U] = {[1] = {.ini_register = (unsigned short)4U}, {.ini_register = (unsigned short)12U}, {.ini_register = (unsigned short)8U}, {.ini_register = (unsigned short)28U, .ini_mode = AR5K_INI_READ}, {.ini_register = (unsigned short)32U}, {.ini_register = (unsigned short)36U}, {.ini_register = (unsigned short)44U, .ini_mode = AR5K_INI_READ}, {.ini_register = (unsigned short)48U, .ini_value = 5U}, {.ini_register = (unsigned short)52U, .ini_value = 5U}, {.ini_register = (unsigned short)20U}, {.ini_register = (unsigned short)68U, .ini_value = 8U}, {.ini_register = (unsigned short)72U, .ini_value = 8U}, {.ini_register = (unsigned short)80U}, {.ini_register = (unsigned short)76U}, {.ini_register = (unsigned short)16396U}, {.ini_register = (unsigned short)64U}, {.ini_register = (unsigned short)88U}, {.ini_register = (unsigned short)32844U}, {.ini_register = (unsigned short)32848U}, {.ini_register = (unsigned short)32852U}, {.ini_register = (unsigned short)32856U}, {.ini_register = (unsigned short)32860U}, {.ini_register = (unsigned short)32864U}, {.ini_register = (unsigned short)32868U, .ini_value = 1U}, {.ini_register = (unsigned short)32872U}, {.ini_register = (unsigned short)32792U, .ini_value = 129U}, {.ini_register = (unsigned short)32876U}, {.ini_register = (unsigned short)32812U}, {.ini_register = (unsigned short)32816U, .ini_value = 4294967295U}, {.ini_register = (unsigned short)32820U, .ini_value = 4294967295U}, {.ini_register = (unsigned short)32824U, .ini_value = 1U}, {.ini_register = (unsigned short)32840U}, {.ini_register = (unsigned short)32808U}, {.ini_register = (unsigned short)38912U, .ini_value = 71U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38924U, .ini_value = 159682214U}, {.ini_register = (unsigned short)38928U, .ini_value = 1026744320U}, {.ini_register = (unsigned short)38932U, .ini_value = 1899U}, {.ini_register = (unsigned short)38940U, .ini_value = 2U}, {.ini_register = (unsigned short)38944U, .ini_value = 33686016U}, {.ini_register = (unsigned short)38948U, .ini_value = 3598U}, {.ini_register = (unsigned short)38952U, .ini_value = 167903745U}, {.ini_register = (unsigned short)38956U, .ini_value = 225276U}, {.ini_register = (unsigned short)38960U}, {.ini_register = (unsigned short)38964U, .ini_value = 3598U}, {.ini_register = (unsigned short)38968U, .ini_value = 7U}, {.ini_register = (unsigned short)38972U, .ini_value = 131328U}, {.ini_register = (unsigned short)38976U, .ini_value = 2304966656U}, {.ini_register = (unsigned short)38980U, .ini_value = 326243996U}, {.ini_register = (unsigned short)38984U, .ini_value = 1619507U}, {.ini_register = (unsigned short)38988U, .ini_value = 310665532U}, {.ini_register = (unsigned short)38992U, .ini_value = 233355488U}, {.ini_register = (unsigned short)38996U, .ini_value = 477273U}, {.ini_register = (unsigned short)39000U, .ini_value = 2122366650U}, {.ini_register = (unsigned short)39004U, .ini_value = 825910878U}, {.ini_register = (unsigned short)39008U, .ini_value = 7432U}, {.ini_register = (unsigned short)39012U, .ini_value = 118272U}, {.ini_register = (unsigned short)39016U, .ini_value = 1083851152U}, {.ini_register = (unsigned short)39024U, .ini_value = 15U}, {.ini_register = (unsigned short)39028U, .ini_value = 128U}, {.ini_register = (unsigned short)39032U, .ini_value = 4U}, {.ini_register = (unsigned short)39036U, .ini_value = 24U}, {.ini_register = (unsigned short)39168U}, {.ini_register = (unsigned short)39172U}, {.ini_register = (unsigned short)39176U}, {.ini_register = (unsigned short)39180U, .ini_value = 8388608U}, {.ini_register = (unsigned short)39184U, .ini_value = 3U}, {.ini_register = (unsigned short)39680U}, {.ini_register = (unsigned short)39684U, .ini_value = 32U}, {.ini_register = (unsigned short)39688U, .ini_value = 16U}, {.ini_register = (unsigned short)39692U, .ini_value = 48U}, {.ini_register = (unsigned short)39696U, .ini_value = 8U}, {.ini_register = (unsigned short)39700U, .ini_value = 40U}, {.ini_register = (unsigned short)39704U, .ini_value = 40U}, {.ini_register = (unsigned short)39708U, .ini_value = 4U}, {.ini_register = (unsigned short)39712U, .ini_value = 36U}, {.ini_register = (unsigned short)39716U, .ini_value = 20U}, {.ini_register = (unsigned short)39720U, .ini_value = 52U}, {.ini_register = (unsigned short)39724U, .ini_value = 12U}, {.ini_register = (unsigned short)39728U, .ini_value = 44U}, {.ini_register = (unsigned short)39732U, .ini_value = 2U}, {.ini_register = (unsigned short)39736U, .ini_value = 34U}, {.ini_register = (unsigned short)39740U, .ini_value = 18U}, {.ini_register = (unsigned short)39744U, .ini_value = 50U}, {.ini_register = (unsigned short)39748U, .ini_value = 10U}, {.ini_register = (unsigned short)39752U, .ini_value = 42U}, {.ini_register = (unsigned short)39756U, .ini_value = 1U}, {.ini_register = (unsigned short)39760U, .ini_value = 33U}, {.ini_register = (unsigned short)39764U, .ini_value = 17U}, {.ini_register = (unsigned short)39768U, .ini_value = 49U}, {.ini_register = (unsigned short)39772U, .ini_value = 9U}, {.ini_register = (unsigned short)39776U, .ini_value = 41U}, {.ini_register = (unsigned short)39780U, .ini_value = 5U}, {.ini_register = (unsigned short)39784U, .ini_value = 37U}, {.ini_register = (unsigned short)39788U, .ini_value = 21U}, {.ini_register = (unsigned short)39792U, .ini_value = 53U}, {.ini_register = (unsigned short)39796U, .ini_value = 13U}, {.ini_register = (unsigned short)39800U, .ini_value = 45U}, {.ini_register = (unsigned short)39804U, .ini_value = 3U}, {.ini_register = (unsigned short)39808U, .ini_value = 35U}, {.ini_register = (unsigned short)39812U, .ini_value = 19U}, {.ini_register = (unsigned short)39816U, .ini_value = 51U}, {.ini_register = (unsigned short)39820U, .ini_value = 11U}, {.ini_register = (unsigned short)39824U, .ini_value = 43U}, {.ini_register = (unsigned short)39828U, .ini_value = 7U}, {.ini_register = (unsigned short)39832U, .ini_value = 39U}, {.ini_register = (unsigned short)39836U, .ini_value = 23U}, {.ini_register = (unsigned short)39840U, .ini_value = 55U}, {.ini_register = (unsigned short)39844U, .ini_value = 15U}, {.ini_register = (unsigned short)39848U, .ini_value = 47U}, {.ini_register = (unsigned short)39852U, .ini_value = 47U}, {.ini_register = (unsigned short)39856U, .ini_value = 47U}, {.ini_register = (unsigned short)39860U, .ini_value = 47U}, {.ini_register = (unsigned short)39864U, .ini_value = 47U}, {.ini_register = (unsigned short)39868U, .ini_value = 47U}, {.ini_register = (unsigned short)39872U, .ini_value = 47U}, {.ini_register = (unsigned short)39876U, .ini_value = 47U}, {.ini_register = (unsigned short)39880U, .ini_value = 47U}, {.ini_register = (unsigned short)39884U, .ini_value = 47U}, {.ini_register = (unsigned short)39888U, .ini_value = 47U}, {.ini_register = (unsigned short)39892U, .ini_value = 47U}, {.ini_register = (unsigned short)39896U, .ini_value = 47U}, {.ini_register = (unsigned short)39900U, .ini_value = 47U}, {.ini_register = (unsigned short)39904U, .ini_value = 47U}, {.ini_register = (unsigned short)39908U, .ini_value = 47U}, {.ini_register = (unsigned short)39912U, .ini_value = 47U}, {.ini_register = (unsigned short)39916U, .ini_value = 47U}, {.ini_register = (unsigned short)39920U, .ini_value = 47U}, {.ini_register = (unsigned short)39924U, .ini_value = 47U}, {.ini_register = (unsigned short)39928U, .ini_value = 47U}, {.ini_register = (unsigned short)39932U, .ini_value = 47U}, {.ini_register = (unsigned short)39424U, .ini_value = 29U}, {.ini_register = (unsigned short)39428U, .ini_value = 93U}, {.ini_register = (unsigned short)39432U, .ini_value = 157U}, {.ini_register = (unsigned short)39436U, .ini_value = 221U}, {.ini_register = (unsigned short)39440U, .ini_value = 285U}, {.ini_register = (unsigned short)39444U, .ini_value = 33U}, {.ini_register = (unsigned short)39448U, .ini_value = 97U}, {.ini_register = (unsigned short)39452U, .ini_value = 161U}, {.ini_register = (unsigned short)39456U, .ini_value = 225U}, {.ini_register = (unsigned short)39460U, .ini_value = 49U}, {.ini_register = (unsigned short)39464U, .ini_value = 113U}, {.ini_register = (unsigned short)39468U, .ini_value = 177U}, {.ini_register = (unsigned short)39472U, .ini_value = 28U}, {.ini_register = (unsigned short)39476U, .ini_value = 92U}, {.ini_register = (unsigned short)39480U, .ini_value = 41U}, {.ini_register = (unsigned short)39484U, .ini_value = 105U}, {.ini_register = (unsigned short)39488U, .ini_value = 169U}, {.ini_register = (unsigned short)39492U, .ini_value = 32U}, {.ini_register = (unsigned short)39496U, .ini_value = 25U}, {.ini_register = (unsigned short)39500U, .ini_value = 89U}, {.ini_register = (unsigned short)39504U, .ini_value = 153U}, {.ini_register = (unsigned short)39508U, .ini_value = 48U}, {.ini_register = (unsigned short)39512U, .ini_value = 5U}, {.ini_register = (unsigned short)39516U, .ini_value = 37U}, {.ini_register = (unsigned short)39520U, .ini_value = 101U}, {.ini_register = (unsigned short)39524U, .ini_value = 165U}, {.ini_register = (unsigned short)39528U, .ini_value = 40U}, {.ini_register = (unsigned short)39532U, .ini_value = 104U}, {.ini_register = (unsigned short)39536U, .ini_value = 31U}, {.ini_register = (unsigned short)39540U, .ini_value = 30U}, {.ini_register = (unsigned short)39544U, .ini_value = 24U}, {.ini_register = (unsigned short)39548U, .ini_value = 88U}, {.ini_register = (unsigned short)39552U, .ini_value = 152U}, {.ini_register = (unsigned short)39556U, .ini_value = 3U}, {.ini_register = (unsigned short)39560U, .ini_value = 4U}, {.ini_register = (unsigned short)39564U, .ini_value = 68U}, {.ini_register = (unsigned short)39568U, .ini_value = 132U}, {.ini_register = (unsigned short)39572U, .ini_value = 19U}, {.ini_register = (unsigned short)39576U, .ini_value = 18U}, {.ini_register = (unsigned short)39580U, .ini_value = 82U}, {.ini_register = (unsigned short)39584U, .ini_value = 146U}, {.ini_register = (unsigned short)39588U, .ini_value = 210U}, {.ini_register = (unsigned short)39592U, .ini_value = 43U}, {.ini_register = (unsigned short)39596U, .ini_value = 42U}, {.ini_register = (unsigned short)39600U, .ini_value = 106U}, {.ini_register = (unsigned short)39604U, .ini_value = 170U}, {.ini_register = (unsigned short)39608U, .ini_value = 27U}, {.ini_register = (unsigned short)39612U, .ini_value = 26U}, {.ini_register = (unsigned short)39616U, .ini_value = 90U}, {.ini_register = (unsigned short)39620U, .ini_value = 154U}, {.ini_register = (unsigned short)39624U, .ini_value = 218U}, {.ini_register = (unsigned short)39628U, .ini_value = 6U}, {.ini_register = (unsigned short)39632U, .ini_value = 6U}, {.ini_register = (unsigned short)39636U, .ini_value = 6U}, {.ini_register = (unsigned short)39640U, .ini_value = 6U}, {.ini_register = (unsigned short)39644U, .ini_value = 6U}, {.ini_register = (unsigned short)39648U, .ini_value = 6U}, {.ini_register = (unsigned short)39652U, .ini_value = 6U}, {.ini_register = (unsigned short)39656U, .ini_value = 6U}, {.ini_register = (unsigned short)39660U, .ini_value = 6U}, {.ini_register = (unsigned short)39664U, .ini_value = 6U}, {.ini_register = (unsigned short)39668U, .ini_value = 6U}, {.ini_register = (unsigned short)39672U, .ini_value = 6U}, {.ini_register = (unsigned short)39676U, .ini_value = 6U}, {.ini_register = (unsigned short)39124U, .ini_value = 32U}, {.ini_register = (unsigned short)39116U, .ini_value = 4U}, {.ini_register = (unsigned short)39112U, .ini_value = 393478U}, {.ini_register = (unsigned short)39068U, .ini_value = 109U}, {.ini_register = (unsigned short)39104U}, {.ini_register = (unsigned short)39120U, .ini_value = 20U}, {.ini_register = (unsigned short)38940U, .ini_value = 1U}};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini ar5211_ini[116U] = {{.ini_register = (unsigned short)12U}, {.ini_register = (unsigned short)40U, .ini_value = 2223283356U}, {.ini_register = (unsigned short)44U, .ini_value = 2088533116U}, {.ini_register = (unsigned short)52U, .ini_value = 5U}, {.ini_register = (unsigned short)64U}, {.ini_register = (unsigned short)68U, .ini_value = 8U}, {.ini_register = (unsigned short)72U, .ini_value = 8U}, {.ini_register = (unsigned short)76U, .ini_value = 16U}, {.ini_register = (unsigned short)80U}, {.ini_register = (unsigned short)84U, .ini_value = 31U}, {.ini_register = (unsigned short)2048U}, {.ini_register = (unsigned short)2052U}, {.ini_register = (unsigned short)2056U}, {.ini_register = (unsigned short)2060U}, {.ini_register = (unsigned short)2064U}, {.ini_register = (unsigned short)2068U}, {.ini_register = (unsigned short)2072U}, {.ini_register = (unsigned short)2076U}, {.ini_register = (unsigned short)2080U}, {.ini_register = (unsigned short)2084U}, {.ini_register = (unsigned short)4656U}, {.ini_register = (unsigned short)32772U}, {.ini_register = (unsigned short)32776U}, {.ini_register = (unsigned short)32780U}, {.ini_register = (unsigned short)32792U}, {.ini_register = (unsigned short)32804U}, {.ini_register = (unsigned short)32808U, .ini_value = 48U}, {.ini_register = (unsigned short)32812U, .ini_value = 524287U}, {.ini_register = (unsigned short)32816U, .ini_value = 33554431U}, {.ini_register = (unsigned short)32820U, .ini_value = 49U}, {.ini_register = (unsigned short)32824U}, {.ini_register = (unsigned short)32828U}, {.ini_register = (unsigned short)32832U}, {.ini_register = (unsigned short)32836U, .ini_value = 2U}, {.ini_register = (unsigned short)32840U}, {.ini_register = (unsigned short)32852U}, {.ini_register = (unsigned short)32856U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38924U, .ini_value = 763662483U}, {.ini_register = (unsigned short)38928U, .ini_value = 2100486144U}, {.ini_register = (unsigned short)38932U, .ini_value = 3947U}, {.ini_register = (unsigned short)38940U}, {.ini_register = (unsigned short)38956U, .ini_value = 159742U}, {.ini_register = (unsigned short)38960U}, {.ini_register = (unsigned short)38972U, .ini_value = 131328U}, {.ini_register = (unsigned short)38976U, .ini_value = 543818106U}, {.ini_register = (unsigned short)38988U, .ini_value = 310665532U}, {.ini_register = (unsigned short)38996U, .ini_value = 2137U}, {.ini_register = (unsigned short)39016U, .ini_value = 1083851152U}, {.ini_register = (unsigned short)39020U, .ini_value = 84717697U}, {.ini_register = (unsigned short)39024U, .ini_value = 15U}, {.ini_register = (unsigned short)39028U, .ini_value = 128U}, {.ini_register = (unsigned short)39032U, .ini_value = 12U}, {.ini_register = (unsigned short)39168U}, {.ini_register = (unsigned short)39172U}, {.ini_register = (unsigned short)39176U}, {.ini_register = (unsigned short)39180U, .ini_value = 8388608U}, {.ini_register = (unsigned short)39184U, .ini_value = 1U}, {.ini_register = (unsigned short)39196U, .ini_value = 2346U}, {.ini_register = (unsigned short)39200U}, {.ini_register = (unsigned short)39204U, .ini_value = 363013U}, {.ini_register = (unsigned short)39208U, .ini_value = 1U}, {.ini_register = (unsigned short)39212U}, {.ini_register = (unsigned short)39216U}, {.ini_register = (unsigned short)39220U}, {.ini_register = (unsigned short)39224U}, {.ini_register = (unsigned short)39228U, .ini_value = 63U}, {.ini_register = (unsigned short)39232U, .ini_value = 4U}, {.ini_register = (unsigned short)39240U}, {.ini_register = (unsigned short)39244U}, {.ini_register = (unsigned short)39248U}, {.ini_register = (unsigned short)39252U, .ini_value = 1565585740U}, {.ini_register = (unsigned short)39256U, .ini_value = 24U}, {.ini_register = (unsigned short)39260U, .ini_value = 4942478U}, {.ini_register = (unsigned short)41348U, .ini_value = 117376511U}, {.ini_register = (unsigned short)41352U, .ini_value = 134154239U}, {.ini_register = (unsigned short)41356U, .ini_value = 150931711U}, {.ini_register = (unsigned short)41360U, .ini_value = 167709183U}, {.ini_register = (unsigned short)41364U, .ini_value = 184486655U}, {.ini_register = (unsigned short)41368U, .ini_value = 201264127U}, {.ini_register = (unsigned short)41372U, .ini_value = 218041599U}, {.ini_register = (unsigned short)41376U, .ini_value = 234819071U}, {.ini_register = (unsigned short)41380U, .ini_value = 268373759U}, {.ini_register = (unsigned short)41384U, .ini_value = 318706431U}, {.ini_register = (unsigned short)41388U, .ini_value = 352261119U}, {.ini_register = (unsigned short)41392U, .ini_value = 385816063U}, {.ini_register = (unsigned short)41396U, .ini_value = 436148223U}, {.ini_register = (unsigned short)41400U, .ini_value = 469703423U}, {.ini_register = (unsigned short)41404U, .ini_value = 520035839U}, {.ini_register = (unsigned short)41408U, .ini_value = 603922687U}, {.ini_register = (unsigned short)41412U, .ini_value = 671032831U}, {.ini_register = (unsigned short)41416U, .ini_value = 754919935U}, {.ini_register = (unsigned short)41420U, .ini_value = 838807551U}, {.ini_register = (unsigned short)41424U, .ini_value = 939472127U}, {.ini_register = (unsigned short)41428U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41432U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41436U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41440U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41444U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41448U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41452U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41456U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41460U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41464U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41468U, .ini_value = 989805311U}, {.ini_register = (unsigned short)41476U}, {.ini_register = (unsigned short)41480U, .ini_value = 1346258502U}, {.ini_register = (unsigned short)41484U, .ini_value = 1686126956U}, {.ini_register = (unsigned short)41488U, .ini_value = 26845187U}, {.ini_register = (unsigned short)41492U, .ini_value = 72144400U}, {.ini_register = (unsigned short)41496U, .ini_value = 327155776U}, {.ini_register = (unsigned short)41500U, .ini_value = 467664992U}, {.ini_register = (unsigned short)41504U, .ini_value = 206798858U}, {.ini_register = (unsigned short)41508U, .ini_value = 1367867U}, {.ini_register = (unsigned short)41512U, .ini_value = 437U}, {.ini_register = (unsigned short)41516U, .ini_value = 32U}};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode ar5211_ini_mode[34U] = {{.mode_register = (unsigned short)48U, .mode_value = {21U, 29U, 21U}}, {.mode_register = (unsigned short)4160U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4164U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4168U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4172U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4176U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4180U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4184U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4188U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4192U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4196U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4208U, .mode_value = {360U, 440U, 360U}}, {.mode_register = (unsigned short)4144U, .mode_value = {560U, 176U, 560U}}, {.mode_register = (unsigned short)4272U, .mode_value = {3480U, 8008U, 3480U}}, {.mode_register = (unsigned short)4336U, .mode_value = {41184U, 22656U, 41184U}}, {.mode_register = (unsigned short)32788U, .mode_value = {67109888U, 536883200U, 67109888U}}, {.mode_register = (unsigned short)32796U, .mode_value = {244158375U, 23105429U, 244158375U}}, {.mode_register = (unsigned short)38944U, .mode_value = {33686016U, 33620480U, 33686016U}}, {.mode_register = (unsigned short)38948U, .mode_value = {3598U, 1799U, 3598U}}, {.mode_register = (unsigned short)38952U, .mode_value = {167903233U, 83951616U, 167903233U}}, {.mode_register = (unsigned short)38964U, .mode_value = {3598U, 3598U, 3598U}}, {.mode_register = (unsigned short)38968U, .mode_value = {7U, 11U, 11U}}, {.mode_register = (unsigned short)38980U, .mode_value = {326243996U, 326244008U, 326243996U}}, {.mode_register = (unsigned short)38984U, .mode_value = {1620583U, 1620585U, 1620585U}}, {.mode_register = (unsigned short)38992U, .mode_value = {203994336U, 203994336U, 203994336U}}, {.mode_register = (unsigned short)39000U, .mode_value = {2122321198U, 2126515502U, 2122321198U}}, {.mode_register = (unsigned short)39004U, .mode_value = {825711966U, 825908574U, 825711966U}}, {.mode_register = (unsigned short)39008U, .mode_value = {48400U, 48440U, 48400U}}, {.mode_register = (unsigned short)39012U, .mode_value = {118272U, 118272U, 118272U}}, {.mode_register = (unsigned short)39188U, .mode_value = {10000U, 5500U, 10000U}}, {.mode_register = (unsigned short)39192U, .mode_value = {400U, 132U, 400U}}, {.mode_register = (unsigned short)39236U, .mode_value = {1876955168U, 1876953376U, 1876955168U}}, {.mode_register = (unsigned short)41344U, .mode_value = {100603135U, 100603135U, 100604415U}}, {.mode_register = (unsigned short)39124U, .mode_value = {16U, 16U, 16U}}};
#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini ar5212_ini_common_start[191U] = {{.ini_register = (unsigned short)12U}, {.ini_register = (unsigned short)52U, .ini_value = 5U}, {.ini_register = (unsigned short)64U}, {.ini_register = (unsigned short)68U, .ini_value = 8U}, {.ini_register = (unsigned short)72U, .ini_value = 8U}, {.ini_register = (unsigned short)76U, .ini_value = 16U}, {.ini_register = (unsigned short)80U}, {.ini_register = (unsigned short)84U, .ini_value = 31U}, {.ini_register = (unsigned short)2048U}, {.ini_register = (unsigned short)2052U}, {.ini_register = (unsigned short)2056U}, {.ini_register = (unsigned short)2060U}, {.ini_register = (unsigned short)2064U}, {.ini_register = (unsigned short)2068U}, {.ini_register = (unsigned short)2072U}, {.ini_register = (unsigned short)2076U}, {.ini_register = (unsigned short)2080U}, {.ini_register = (unsigned short)2084U}, {.ini_register = (unsigned short)4656U}, {.ini_register = (unsigned short)4720U}, {.ini_register = (unsigned short)4152U}, {.ini_register = (unsigned short)4216U}, {.ini_register = (unsigned short)4280U}, {.ini_register = (unsigned short)4344U}, {.ini_register = (unsigned short)4408U}, {.ini_register = (unsigned short)4472U}, {.ini_register = (unsigned short)4536U}, {.ini_register = (unsigned short)4600U}, {.ini_register = (unsigned short)4664U}, {.ini_register = (unsigned short)4728U}, {.ini_register = (unsigned short)4792U}, {.ini_register = (unsigned short)4856U}, {.ini_register = (unsigned short)4920U}, {.ini_register = (unsigned short)4984U}, {.ini_register = (unsigned short)5048U}, {.ini_register = (unsigned short)5112U}, {.ini_register = (unsigned short)5176U}, {.ini_register = (unsigned short)5240U}, {.ini_register = (unsigned short)5304U}, {.ini_register = (unsigned short)5368U}, {.ini_register = (unsigned short)5432U}, {.ini_register = (unsigned short)5496U}, {.ini_register = (unsigned short)5560U}, {.ini_register = (unsigned short)5624U}, {.ini_register = (unsigned short)5688U}, {.ini_register = (unsigned short)5752U}, {.ini_register = (unsigned short)5816U}, {.ini_register = (unsigned short)5880U}, {.ini_register = (unsigned short)5944U}, {.ini_register = (unsigned short)6008U}, {.ini_register = (unsigned short)6072U}, {.ini_register = (unsigned short)6136U}, {.ini_register = (unsigned short)4156U}, {.ini_register = (unsigned short)4220U}, {.ini_register = (unsigned short)4284U}, {.ini_register = (unsigned short)4348U}, {.ini_register = (unsigned short)4412U}, {.ini_register = (unsigned short)4476U}, {.ini_register = (unsigned short)4540U}, {.ini_register = (unsigned short)4604U}, {.ini_register = (unsigned short)4668U}, {.ini_register = (unsigned short)4732U}, {.ini_register = (unsigned short)4796U}, {.ini_register = (unsigned short)4860U}, {.ini_register = (unsigned short)4924U}, {.ini_register = (unsigned short)4988U}, {.ini_register = (unsigned short)5052U}, {.ini_register = (unsigned short)5116U}, {.ini_register = (unsigned short)5180U}, {.ini_register = (unsigned short)5244U}, {.ini_register = (unsigned short)32772U}, {.ini_register = (unsigned short)32776U}, {.ini_register = (unsigned short)32780U}, {.ini_register = (unsigned short)32800U}, {.ini_register = (unsigned short)32804U}, {.ini_register = (unsigned short)32808U, .ini_value = 48U}, {.ini_register = (unsigned short)32812U, .ini_value = 524287U}, {.ini_register = (unsigned short)32816U, .ini_value = 33554431U}, {.ini_register = (unsigned short)32820U, .ini_value = 49U}, {.ini_register = (unsigned short)32824U}, {.ini_register = (unsigned short)32828U}, {.ini_register = (unsigned short)32840U}, {.ini_register = (unsigned short)32852U}, {.ini_register = (unsigned short)32856U}, {.ini_register = (unsigned short)32860U, .ini_value = 1034127U}, {.ini_register = (unsigned short)32960U, .ini_value = 713175066U}, {.ini_register = (unsigned short)32964U, .ini_value = 98304480U}, {.ini_register = (unsigned short)32968U, .ini_value = 524298000U}, {.ini_register = (unsigned short)32972U, .ini_value = 32768000U}, {.ini_register = (unsigned short)32976U, .ini_value = 7708U}, {.ini_register = (unsigned short)32980U, .ini_value = 174762U}, {.ini_register = (unsigned short)32984U, .ini_value = 33576277U}, {.ini_register = (unsigned short)32988U}, {.ini_register = (unsigned short)32992U, .ini_value = 4294967295U}, {.ini_register = (unsigned short)32996U, .ini_value = 65535U}, {.ini_register = (unsigned short)33000U}, {.ini_register = (unsigned short)33004U}, {.ini_register = (unsigned short)33008U}, {.ini_register = (unsigned short)33012U}, {.ini_register = (unsigned short)33016U}, {.ini_register = (unsigned short)33020U, .ini_value = 136U}, {.ini_register = (unsigned short)34560U}, {.ini_register = (unsigned short)34564U, .ini_value = 140U}, {.ini_register = (unsigned short)34568U, .ini_value = 228U}, {.ini_register = (unsigned short)34572U, .ini_value = 725U}, {.ini_register = (unsigned short)34576U}, {.ini_register = (unsigned short)34580U}, {.ini_register = (unsigned short)34584U, .ini_value = 160U}, {.ini_register = (unsigned short)34588U, .ini_value = 457U}, {.ini_register = (unsigned short)34592U, .ini_value = 44U}, {.ini_register = (unsigned short)34596U, .ini_value = 44U}, {.ini_register = (unsigned short)34600U, .ini_value = 48U}, {.ini_register = (unsigned short)34604U, .ini_value = 60U}, {.ini_register = (unsigned short)34608U, .ini_value = 44U}, {.ini_register = (unsigned short)34612U, .ini_value = 44U}, {.ini_register = (unsigned short)34616U, .ini_value = 48U}, {.ini_register = (unsigned short)34620U, .ini_value = 60U}, {.ini_register = (unsigned short)34624U}, {.ini_register = (unsigned short)34628U}, {.ini_register = (unsigned short)34632U}, {.ini_register = (unsigned short)34636U}, {.ini_register = (unsigned short)34640U}, {.ini_register = (unsigned short)34644U}, {.ini_register = (unsigned short)34648U}, {.ini_register = (unsigned short)34652U}, {.ini_register = (unsigned short)34656U, .ini_value = 213U}, {.ini_register = (unsigned short)34660U, .ini_value = 223U}, {.ini_register = (unsigned short)34664U, .ini_value = 258U}, {.ini_register = (unsigned short)34668U, .ini_value = 314U}, {.ini_register = (unsigned short)34672U, .ini_value = 117U}, {.ini_register = (unsigned short)34676U, .ini_value = 127U}, {.ini_register = (unsigned short)34680U, .ini_value = 162U}, {.ini_register = (unsigned short)34684U}, {.ini_register = (unsigned short)33024U, .ini_value = 65538U}, {.ini_register = (unsigned short)33028U, .ini_value = 1U}, {.ini_register = (unsigned short)33032U, .ini_value = 192U}, {.ini_register = (unsigned short)33036U}, {.ini_register = (unsigned short)33040U, .ini_value = 360U}, {.ini_register = (unsigned short)33044U}, {.ini_register = (unsigned short)34752U, .ini_value = 50462976U}, {.ini_register = (unsigned short)34756U, .ini_value = 117835012U}, {.ini_register = (unsigned short)34760U, .ini_value = 185207048U}, {.ini_register = (unsigned short)34764U, .ini_value = 252579084U}, {.ini_register = (unsigned short)34768U, .ini_value = 319951120U}, {.ini_register = (unsigned short)34772U, .ini_value = 387323156U}, {.ini_register = (unsigned short)34776U, .ini_value = 454695192U}, {.ini_register = (unsigned short)34780U, .ini_value = 522067228U}, {.ini_register = (unsigned short)34784U, .ini_value = 50462976U}, {.ini_register = (unsigned short)34788U, .ini_value = 117835012U}, {.ini_register = (unsigned short)34792U, .ini_value = 185207048U}, {.ini_register = (unsigned short)34796U, .ini_value = 252579084U}, {.ini_register = (unsigned short)34800U, .ini_value = 319951120U}, {.ini_register = (unsigned short)34804U, .ini_value = 387323156U}, {.ini_register = (unsigned short)34808U, .ini_value = 454695192U}, {.ini_register = (unsigned short)34812U, .ini_value = 522067228U}, {.ini_register = (unsigned short)38924U, .ini_value = 2911145497U}, {.ini_register = (unsigned short)38928U, .ini_value = 2099830784U}, {.ini_register = (unsigned short)38932U, .ini_value = 2617941867U}, {.ini_register = (unsigned short)38940U}, {.ini_register = (unsigned short)38976U, .ini_value = 543818106U}, {.ini_register = (unsigned short)38996U, .ini_value = 2137U}, {.ini_register = (unsigned short)39168U}, {.ini_register = (unsigned short)39172U}, {.ini_register = (unsigned short)39176U}, {.ini_register = (unsigned short)39180U, .ini_value = 8388608U}, {.ini_register = (unsigned short)39184U, .ini_value = 1U}, {.ini_register = (unsigned short)39196U, .ini_value = 3200U}, {.ini_register = (unsigned short)39200U, .ini_value = 84934656U}, {.ini_register = (unsigned short)39208U, .ini_value = 1U}, {.ini_register = (unsigned short)39212U, .ini_value = 4U}, {.ini_register = (unsigned short)39220U, .ini_value = 505356322U}, {.ini_register = (unsigned short)39224U, .ini_value = 168496141U}, {.ini_register = (unsigned short)39228U, .ini_value = 63U}, {.ini_register = (unsigned short)39240U, .ini_value = 2457907730U}, {.ini_register = (unsigned short)39252U, .ini_value = 1565581704U}, {.ini_register = (unsigned short)39260U, .ini_value = 4942478U}, {.ini_register = (unsigned short)39272U, .ini_value = 974U}, {.ini_register = (unsigned short)39280U, .ini_value = 422556949U}, {.ini_register = (unsigned short)39288U, .ini_value = 1U}, {.ini_register = (unsigned short)39292U}, {.ini_register = (unsigned short)41488U, .ini_value = 8414003U}, {.ini_register = (unsigned short)41492U, .ini_value = 1076240U}, {.ini_register = (unsigned short)41496U, .ini_value = 10240096U}, {.ini_register = (unsigned short)41504U, .ini_value = 25702598U}, {.ini_register = (unsigned short)41508U, .ini_value = 1024U}, {.ini_register = (unsigned short)41516U}, {.ini_register = (unsigned short)41524U, .ini_value = 538976288U}, {.ini_register = (unsigned short)41528U, .ini_value = 538976288U}, {.ini_register = (unsigned short)41536U, .ini_value = 944310816U}, {.ini_register = (unsigned short)41540U, .ini_value = 31670U}, {.ini_register = (unsigned short)41544U, .ini_value = 268386300U}};
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode ar5212_ini_mode_start[24U] = {{.mode_register = (unsigned short)4160U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4164U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4168U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4172U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4176U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4180U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4184U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4188U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4192U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4196U, .mode_value = {3144719U, 3144735U, 3144719U}}, {.mode_register = (unsigned short)4144U, .mode_value = {560U, 176U, 352U}}, {.mode_register = (unsigned short)4208U, .mode_value = {360U, 440U, 396U}}, {.mode_register = (unsigned short)4272U, .mode_value = {3680U, 7964U, 15928U}}, {.mode_register = (unsigned short)4336U, .mode_value = {41184U, 22656U, 45280U}}, {.mode_register = (unsigned short)32788U, .mode_value = {65537000U, 69207072U, 138414144U}}, {.mode_register = (unsigned short)38944U, .mode_value = {33686016U, 33620480U, 33686016U}}, {.mode_register = (unsigned short)38948U, .mode_value = {3598U, 1799U, 3598U}}, {.mode_register = (unsigned short)38980U, .mode_value = {326243868U, 326244130U, 326244002U}}, {.mode_register = (unsigned short)39008U, .mode_value = {40208U, 40216U, 40216U}}, {.mode_register = (unsigned short)39012U, .mode_value = {118272U, 118272U, 118272U}}, {.mode_register = (unsigned short)39016U, .mode_value = {1083851152U, 1083851152U, 1083851152U}}, {.mode_register = (unsigned short)39192U, .mode_value = {440U, 132U, 264U}}, {.mode_register = (unsigned short)39204U, .mode_value = {268798469U, 268798469U, 268798469U}}, {.mode_register = (unsigned short)41520U, .mode_value = {[2] = 264U}}};
#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode rf5111_ini_mode_end[14U] = {{.mode_register = (unsigned short)48U, .mode_value = {32789U, 32789U, 32789U}}, {.mode_register = (unsigned short)32796U, .mode_value = {311267239U, 81792917U, 316673963U}}, {.mode_register = (unsigned short)38952U, .mode_value = {167903233U, 83951872U, 167903233U}}, {.mode_register = (unsigned short)38964U, .mode_value = {3598U, 3598U, 3598U}}, {.mode_register = (unsigned short)38968U, .mode_value = {7U, 11U, 11U}}, {.mode_register = (unsigned short)38984U, .mode_value = {1628762U, 1624681U, 1624681U}}, {.mode_register = (unsigned short)38992U, .mode_value = {233354464U, 233354464U, 233354464U}}, {.mode_register = (unsigned short)39000U, .mode_value = {2122321198U, 2129153326U, 2129153326U}}, {.mode_register = (unsigned short)39004U, .mode_value = {825714270U, 825714270U, 825714270U}}, {.mode_register = (unsigned short)39020U, .mode_value = {84717697U, 84717697U, 84717696U}}, {.mode_register = (unsigned short)39188U, .mode_value = {10000U, 5500U, 11000U}}, {.mode_register = (unsigned short)39236U, .mode_value = {4156035104U, 4156034336U, 4156035104U}}, {.mode_register = (unsigned short)41484U, .mode_value = {1680621930U, 1681932650U, 1681932650U}}, {.mode_register = (unsigned short)41500U, .mode_value = {411271178U, 410222602U, 411271178U}}};
#line 766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf5111_ini_common_end[14U] = {{.ini_register = (unsigned short)4656U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38956U, .ini_value = 143358U}, {.ini_register = (unsigned short)38972U, .ini_value = 131328U}, {.ini_register = (unsigned short)38988U, .ini_value = 310665532U}, {.ini_register = (unsigned short)39216U, .ini_value = 18563U}, {.ini_register = (unsigned short)39232U, .ini_value = 4U}, {.ini_register = (unsigned short)39256U, .ini_value = 255U}, {.ini_register = (unsigned short)39284U}, {.ini_register = (unsigned short)39416U, .ini_value = 24U}, {.ini_register = (unsigned short)41476U}, {.ini_register = (unsigned short)41480U, .ini_value = 3493750664U}, {.ini_register = (unsigned short)41512U, .ini_value = 437U}, {.ini_register = (unsigned short)41532U, .ini_value = 331909551U}};
#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode rf5112_ini_mode_end[16U] = {{.mode_register = (unsigned short)48U, .mode_value = {32789U, 32789U, 32789U}}, {.mode_register = (unsigned short)32796U, .mode_value = {311268263U, 81793941U, 316674987U}}, {.mode_register = (unsigned short)38952U, .mode_value = {167903233U, 84017408U, 167903233U}}, {.mode_register = (unsigned short)38964U, .mode_value = {3598U, 3598U, 3598U}}, {.mode_register = (unsigned short)38968U, .mode_value = {7U, 11U, 11U}}, {.mode_register = (unsigned short)38984U, .mode_value = {1628781U, 1624693U, 1624693U}}, {.mode_register = (unsigned short)38992U, .mode_value = {233354464U, 233354464U, 233354464U}}, {.mode_register = (unsigned short)39000U, .mode_value = {2122321198U, 2129136942U, 2129136942U}}, {.mode_register = (unsigned short)39004U, .mode_value = {825714270U, 825714270U, 825714270U}}, {.mode_register = (unsigned short)39020U, .mode_value = {84717697U, 84717697U, 84717697U}}, {.mode_register = (unsigned short)39188U, .mode_value = {2000U, 1100U, 2200U}}, {.mode_register = (unsigned short)39236U, .mode_value = {4156035104U, 4156034320U, 4156035088U}}, {.mode_register = (unsigned short)41476U, .mode_value = {[1] = 8U, 8U}}, {.mode_register = (unsigned short)41480U, .mode_value = {3602802568U, 3493750664U, 3493750664U}}, {.mode_register = (unsigned short)41484U, .mode_value = {1680605504U, 1682096480U, 1682096480U}}, {.mode_register = (unsigned short)41500U, .mode_value = {411271178U, 410222602U, 411271178U}}};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf5112_ini_common_end[11U] = {{.ini_register = (unsigned short)4656U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38956U, .ini_value = 143358U}, {.ini_register = (unsigned short)38972U, .ini_value = 131328U}, {.ini_register = (unsigned short)38988U, .ini_value = 310665532U}, {.ini_register = (unsigned short)39216U, .ini_value = 18562U}, {.ini_register = (unsigned short)39232U, .ini_value = 4U}, {.ini_register = (unsigned short)39256U, .ini_value = 255U}, {.ini_register = (unsigned short)39284U}, {.ini_register = (unsigned short)41512U, .ini_value = 437U}, {.ini_register = (unsigned short)41532U, .ini_value = 331909551U}};
#line 839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode rf5413_ini_mode_end[30U] = {{.mode_register = (unsigned short)48U, .mode_value = {21U, 21U, 21U}}, {.mode_register = (unsigned short)32796U, .mode_value = {311268263U, 81793941U, 316674987U}}, {.mode_register = (unsigned short)38952U, .mode_value = {167903233U, 84017408U, 167903233U}}, {.mode_register = (unsigned short)38964U, .mode_value = {3598U, 3598U, 3598U}}, {.mode_register = (unsigned short)38968U, .mode_value = {7U, 11U, 11U}}, {.mode_register = (unsigned short)38984U, .mode_value = {1636961U, 1710691U, 1710691U}}, {.mode_register = (unsigned short)38992U, .mode_value = {211334368U, 211333338U, 211333338U}}, {.mode_register = (unsigned short)39000U, .mode_value = {2127039790U, 2127039790U, 2127039790U}}, {.mode_register = (unsigned short)39004U, .mode_value = {825843806U, 825843806U, 825843806U}}, {.mode_register = (unsigned short)39020U, .mode_value = {84717697U, 84717697U, 84717697U}}, {.mode_register = (unsigned short)39188U, .mode_value = {2000U, 1100U, 2200U}}, {.mode_register = (unsigned short)39236U, .mode_value = {4156035072U, 4156034304U, 4156035072U}}, {.mode_register = (unsigned short)41476U}, {.mode_register = (unsigned short)41480U, .mode_value = {3602802568U, 3493750664U, 3493750664U}}, {.mode_register = (unsigned short)41484U, .mode_value = {3064288U, 2801952U, 2801952U}}, {.mode_register = (unsigned short)41500U, .mode_value = {411271178U, 409174026U, 411271178U}}, {.mode_register = (unsigned short)41728U, .mode_value = {402718720U, 402718720U, 402718720U}}, {.mode_register = (unsigned short)41732U, .mode_value = {805512706U, 805512706U, 805512706U}}, {.mode_register = (unsigned short)41736U, .mode_value = {1208434182U, 1208434182U, 1208434182U}}, {.mode_register = (unsigned short)41740U, .mode_value = {1443580938U, 1443580938U, 1443580938U}}, {.mode_register = (unsigned short)41744U, .mode_value = {1679450127U, 1679450127U, 1679450127U}}, {.mode_register = (unsigned short)41748U, .mode_value = {2018471451U, 2018471451U, 2018471451U}}, {.mode_register = (unsigned short)41752U, .mode_value = {2257550426U, 2257550426U, 2257550426U}}, {.mode_register = (unsigned short)41756U, .mode_value = {2429519451U, 2395965019U, 2395965019U}}, {.mode_register = (unsigned short)41760U, .mode_value = {2639238927U, 2605684495U, 2605684495U}}, {.mode_register = (unsigned short)41764U, .mode_value = {2815402895U, 2748293007U, 2748293007U}}, {.mode_register = (unsigned short)41768U, .mode_value = {3042946847U, 3009392415U, 3009392415U}}, {.mode_register = (unsigned short)41772U, .mode_value = {3185555871U, 3152001439U, 3152001439U}}, {.mode_register = (unsigned short)41776U, .mode_value = {3414148415U, 3414148927U, 3414148927U}}, {.mode_register = (unsigned short)41780U, .mode_value = {3590312383U, 3556757951U, 3556757951U}}};
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf5413_ini_common_end[70U] = {{.ini_register = (unsigned short)4656U, .ini_value = 992U}, {.ini_register = (unsigned short)16488U, .ini_value = 16U}, {.ini_register = (unsigned short)32864U, .ini_value = 15U}, {.ini_register = (unsigned short)32924U}, {.ini_register = (unsigned short)32928U}, {.ini_register = (unsigned short)33048U}, {.ini_register = (unsigned short)33052U}, {.ini_register = (unsigned short)33056U}, {.ini_register = (unsigned short)33060U}, {.ini_register = (unsigned short)33064U}, {.ini_register = (unsigned short)33068U}, {.ini_register = (unsigned short)33072U}, {.ini_register = (unsigned short)33076U}, {.ini_register = (unsigned short)33080U}, {.ini_register = (unsigned short)33084U}, {.ini_register = (unsigned short)33088U, .ini_value = 2147484665U}, {.ini_register = (unsigned short)33092U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38956U, .ini_value = 40960U}, {.ini_register = (unsigned short)38972U, .ini_value = 2098176U}, {.ini_register = (unsigned short)38988U, .ini_value = 310649660U}, {.ini_register = (unsigned short)39024U, .ini_value = 31U}, {.ini_register = (unsigned short)39028U, .ini_value = 128U}, {.ini_register = (unsigned short)39032U, .ini_value = 14U}, {.ini_register = (unsigned short)39256U, .ini_value = 532479U}, {.ini_register = (unsigned short)39296U}, {.ini_register = (unsigned short)39300U, .ini_value = 41943040U}, {.ini_register = (unsigned short)39328U}, {.ini_register = (unsigned short)39392U}, {.ini_register = (unsigned short)39396U, .ini_value = 2863311530U}, {.ini_register = (unsigned short)39400U, .ini_value = 1011246200U}, {.ini_register = (unsigned short)39404U, .ini_value = 170U}, {.ini_register = (unsigned short)39408U, .ini_value = 12U}, {.ini_register = (unsigned short)39412U, .ini_value = 255U}, {.ini_register = (unsigned short)39416U, .ini_value = 20U}, {.ini_register = (unsigned short)41512U, .ini_value = 2485U}, {.ini_register = (unsigned short)41532U, .ini_value = 2479393199U}, {.ini_register = (unsigned short)41548U, .ini_value = 1U}, {.ini_register = (unsigned short)41552U, .ini_value = 40960U}, {.ini_register = (unsigned short)41556U}, {.ini_register = (unsigned short)41560U, .ini_value = 214389632U}, {.ini_register = (unsigned short)41564U, .ini_value = 252645121U}, {.ini_register = (unsigned short)41568U, .ini_value = 1600720641U}, {.ini_register = (unsigned short)41572U, .ini_value = 4295185U}, {.ini_register = (unsigned short)41576U}, {.ini_register = (unsigned short)41580U, .ini_value = 204521834U}, {.ini_register = (unsigned short)41584U, .ini_value = 8521760U}, {.ini_register = (unsigned short)41588U, .ini_value = 136019114U}, {.ini_register = (unsigned short)41592U, .ini_value = 484915662U}, {.ini_register = (unsigned short)41596U, .ini_value = 85393870U}, {.ini_register = (unsigned short)41784U}, {.ini_register = (unsigned short)41788U}, {.ini_register = (unsigned short)41792U}, {.ini_register = (unsigned short)41796U}, {.ini_register = (unsigned short)41800U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41804U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41808U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41812U, .ini_value = 262143U}, {.ini_register = (unsigned short)41816U, .ini_value = 2041096735U}, {.ini_register = (unsigned short)41820U, .ini_value = 107758095U}, {.ini_register = (unsigned short)41824U, .ini_value = 254288391U}, {.ini_register = (unsigned short)41828U, .ini_value = 392173189U}, {.ini_register = (unsigned short)41832U, .ini_value = 528486660U}, {.ini_register = (unsigned short)41836U, .ini_value = 933235715U}, {.ini_register = (unsigned short)41840U, .ini_value = 1069811843U}, {.ini_register = (unsigned short)41844U, .ini_value = 1472202755U}, {.ini_register = (unsigned short)41848U, .ini_value = 1607992962U}, {.ini_register = (unsigned short)41852U, .ini_value = 2145387650U}, {.ini_register = (unsigned short)41856U, .ini_value = 2134670266U}, {.ini_register = (unsigned short)41860U, .ini_value = 4080041968U}};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode rf2413_ini_mode_end[16U] = {{.mode_register = (unsigned short)48U, .mode_value = {21U, 21U, 21U}}, {.mode_register = (unsigned short)32796U, .mode_value = {311268263U, 81793941U, 316674987U}}, {.mode_register = (unsigned short)38952U, .mode_value = {167903233U, 84017152U, 167903233U}}, {.mode_register = (unsigned short)38964U, .mode_value = {3584U, 3584U, 3584U}}, {.mode_register = (unsigned short)38968U, .mode_value = {2U, 10U, 10U}}, {.mode_register = (unsigned short)38984U, .mode_value = {1628781U, 1731172U, 1731172U}}, {.mode_register = (unsigned short)38992U, .mode_value = {233354464U, 233353434U, 211333338U}}, {.mode_register = (unsigned short)39000U, .mode_value = {2122321198U, 2129136942U, 2127039790U}}, {.mode_register = (unsigned short)39004U, .mode_value = {825714270U, 825714270U, 825843806U}}, {.mode_register = (unsigned short)39020U, .mode_value = {84717697U, 84717697U, 84717697U}}, {.mode_register = (unsigned short)39188U, .mode_value = {2000U, 1100U, 2200U}}, {.mode_register = (unsigned short)39236U, .mode_value = {4156035072U, 4156034304U, 4156035072U}}, {.mode_register = (unsigned short)41476U}, {.mode_register = (unsigned short)41480U, .mode_value = {3602802568U, 3493750664U, 3493750664U}}, {.mode_register = (unsigned short)41484U, .mode_value = {2883904U, 4374848U, 4374848U}}, {.mode_register = (unsigned short)41500U, .mode_value = {411271178U, 409174026U, 411271178U}}};
#line 1015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf2413_ini_common_end[81U] = {{.ini_register = (unsigned short)4656U, .ini_value = 992U}, {.ini_register = (unsigned short)32864U, .ini_value = 15U}, {.ini_register = (unsigned short)33048U}, {.ini_register = (unsigned short)33052U}, {.ini_register = (unsigned short)33056U}, {.ini_register = (unsigned short)33060U}, {.ini_register = (unsigned short)33064U}, {.ini_register = (unsigned short)33068U}, {.ini_register = (unsigned short)33072U}, {.ini_register = (unsigned short)33076U}, {.ini_register = (unsigned short)33080U}, {.ini_register = (unsigned short)33084U}, {.ini_register = (unsigned short)33088U, .ini_value = 2147483816U}, {.ini_register = (unsigned short)33092U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38956U, .ini_value = 40960U}, {.ini_register = (unsigned short)38972U, .ini_value = 2098176U}, {.ini_register = (unsigned short)38988U, .ini_value = 310649660U}, {.ini_register = (unsigned short)39024U, .ini_value = 31U}, {.ini_register = (unsigned short)39028U, .ini_value = 128U}, {.ini_register = (unsigned short)39032U, .ini_value = 14U}, {.ini_register = (unsigned short)39256U, .ini_value = 255U}, {.ini_register = (unsigned short)39296U}, {.ini_register = (unsigned short)39300U, .ini_value = 41943040U}, {.ini_register = (unsigned short)39328U}, {.ini_register = (unsigned short)39392U}, {.ini_register = (unsigned short)39396U, .ini_value = 2863311530U}, {.ini_register = (unsigned short)39400U, .ini_value = 1011246200U}, {.ini_register = (unsigned short)39404U, .ini_value = 170U}, {.ini_register = (unsigned short)39408U, .ini_value = 12U}, {.ini_register = (unsigned short)39412U, .ini_value = 255U}, {.ini_register = (unsigned short)39416U, .ini_value = 20U}, {.ini_register = (unsigned short)41512U, .ini_value = 2485U}, {.ini_register = (unsigned short)41532U, .ini_value = 2479393199U}, {.ini_register = (unsigned short)41548U, .ini_value = 1U}, {.ini_register = (unsigned short)41552U, .ini_value = 40960U}, {.ini_register = (unsigned short)41556U}, {.ini_register = (unsigned short)41560U, .ini_value = 214389632U}, {.ini_register = (unsigned short)41564U, .ini_value = 252645121U}, {.ini_register = (unsigned short)41568U, .ini_value = 1600720641U}, {.ini_register = (unsigned short)41572U, .ini_value = 4295185U}, {.ini_register = (unsigned short)41576U}, {.ini_register = (unsigned short)41580U, .ini_value = 204521834U}, {.ini_register = (unsigned short)41584U, .ini_value = 8521760U}, {.ini_register = (unsigned short)41588U, .ini_value = 1801386U}, {.ini_register = (unsigned short)41592U, .ini_value = 484915662U}, {.ini_register = (unsigned short)41596U, .ini_value = 85393870U}, {.ini_register = (unsigned short)41728U, .ini_value = 402718720U}, {.ini_register = (unsigned short)41732U, .ini_value = 805512706U}, {.ini_register = (unsigned short)41736U, .ini_value = 1208434182U}, {.ini_register = (unsigned short)41740U, .ini_value = 1443580938U}, {.ini_register = (unsigned short)41744U, .ini_value = 1679450127U}, {.ini_register = (unsigned short)41748U, .ini_value = 2018471451U}, {.ini_register = (unsigned short)41752U, .ini_value = 2257550426U}, {.ini_register = (unsigned short)41756U, .ini_value = 2395965019U}, {.ini_register = (unsigned short)41760U, .ini_value = 2639238927U}, {.ini_register = (unsigned short)41764U, .ini_value = 2781847951U}, {.ini_register = (unsigned short)41768U, .ini_value = 3042946847U}, {.ini_register = (unsigned short)41772U, .ini_value = 3185555871U}, {.ini_register = (unsigned short)41776U, .ini_value = 3447703359U}, {.ini_register = (unsigned short)41780U, .ini_value = 3590312383U}, {.ini_register = (unsigned short)41784U}, {.ini_register = (unsigned short)41788U}, {.ini_register = (unsigned short)41792U}, {.ini_register = (unsigned short)41796U}, {.ini_register = (unsigned short)41800U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41804U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41808U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41812U, .ini_value = 262143U}, {.ini_register = (unsigned short)41816U, .ini_value = 2041096735U}, {.ini_register = (unsigned short)41820U, .ini_value = 107758095U}, {.ini_register = (unsigned short)41824U, .ini_value = 254288391U}, {.ini_register = (unsigned short)41828U, .ini_value = 392173189U}, {.ini_register = (unsigned short)41832U, .ini_value = 528486660U}, {.ini_register = (unsigned short)41836U, .ini_value = 933235715U}, {.ini_register = (unsigned short)41840U, .ini_value = 1069811843U}, {.ini_register = (unsigned short)41844U, .ini_value = 1472202755U}, {.ini_register = (unsigned short)41848U, .ini_value = 1607992962U}, {.ini_register = (unsigned short)41852U, .ini_value = 2145387650U}, {.ini_register = (unsigned short)41856U, .ini_value = 2134670266U}, {.ini_register = (unsigned short)41860U, .ini_value = 4080041968U}};
#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini_mode rf2425_ini_mode_end[22U] = {{.mode_register = (unsigned short)48U, .mode_value = {21U, 21U, 21U}}, {.mode_register = (unsigned short)32796U, .mode_value = {311268263U, 81793941U, 316674987U}}, {.mode_register = (unsigned short)38952U, .mode_value = {167903233U, 84017408U, 167903233U}}, {.mode_register = (unsigned short)38964U, .mode_value = {3598U, 3598U, 3598U}}, {.mode_register = (unsigned short)38968U, .mode_value = {3U, 11U, 11U}}, {.mode_register = (unsigned short)38980U, .mode_value = {326243868U, 326244130U, 326243362U}}, {.mode_register = (unsigned short)38984U, .mode_value = {1636961U, 1677925U, 1677925U}}, {.mode_register = (unsigned short)38992U, .mode_value = {211334368U, 211333338U, 211333338U}}, {.mode_register = (unsigned short)39000U, .mode_value = {2127039790U, 2127039790U, 2127039790U}}, {.mode_register = (unsigned short)39004U, .mode_value = {825843806U, 825843806U, 825843806U}}, {.mode_register = (unsigned short)39020U, .mode_value = {84717697U, 84717697U, 84717697U}}, {.mode_register = (unsigned short)39188U, .mode_value = {2000U, 1100U, 2200U}}, {.mode_register = (unsigned short)39236U, .mode_value = {4156035072U, 4156034304U, 4156035072U}}, {.mode_register = (unsigned short)41476U}, {.mode_register = (unsigned short)41480U, .mode_value = {3602802568U, 3493750664U, 3493750664U}}, {.mode_register = (unsigned short)41484U, .mode_value = {320U, 5423424U, 5423424U}}, {.mode_register = (unsigned short)41500U, .mode_value = {411271178U, 409174026U, 411271178U}}, {.mode_register = (unsigned short)41764U, .mode_value = {2815403983U, 2815403983U, 2815403983U}}, {.mode_register = (unsigned short)41768U, .mode_value = {2815403983U, 2815403983U, 2815403983U}}, {.mode_register = (unsigned short)41772U, .mode_value = {2815403983U, 2815403983U, 2815403983U}}, {.mode_register = (unsigned short)41776U, .mode_value = {2815403983U, 2815403983U, 2815403983U}}, {.mode_register = (unsigned short)41780U, .mode_value = {2815403983U, 2815403983U, 2815403983U}}};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf2425_ini_common_end[77U] = {{.ini_register = (unsigned short)4656U, .ini_value = 992U}, {.ini_register = (unsigned short)32864U, .ini_value = 15U}, {.ini_register = (unsigned short)32924U}, {.ini_register = (unsigned short)32928U}, {.ini_register = (unsigned short)33048U}, {.ini_register = (unsigned short)33052U}, {.ini_register = (unsigned short)33056U}, {.ini_register = (unsigned short)33060U}, {.ini_register = (unsigned short)33064U}, {.ini_register = (unsigned short)33068U}, {.ini_register = (unsigned short)33072U}, {.ini_register = (unsigned short)33076U}, {.ini_register = (unsigned short)33080U}, {.ini_register = (unsigned short)33084U}, {.ini_register = (unsigned short)33088U, .ini_value = 2147484665U}, {.ini_register = (unsigned short)33092U}, {.ini_register = (unsigned short)38920U}, {.ini_register = (unsigned short)38956U, .ini_value = 40960U}, {.ini_register = (unsigned short)38972U, .ini_value = 2098176U}, {.ini_register = (unsigned short)38988U, .ini_value = 310649660U}, {.ini_register = (unsigned short)39024U, .ini_value = 31U}, {.ini_register = (unsigned short)39028U, .ini_value = 128U}, {.ini_register = (unsigned short)39032U, .ini_value = 14U}, {.ini_register = (unsigned short)39256U, .ini_value = 532479U}, {.ini_register = (unsigned short)39296U}, {.ini_register = (unsigned short)39300U, .ini_value = 41943040U}, {.ini_register = (unsigned short)39328U}, {.ini_register = (unsigned short)39388U, .ini_value = 4273658856U}, {.ini_register = (unsigned short)39392U}, {.ini_register = (unsigned short)39396U, .ini_value = 2863311530U}, {.ini_register = (unsigned short)39400U, .ini_value = 1011246200U}, {.ini_register = (unsigned short)39404U, .ini_value = 170U}, {.ini_register = (unsigned short)39408U, .ini_value = 12U}, {.ini_register = (unsigned short)39412U, .ini_value = 255U}, {.ini_register = (unsigned short)39416U, .ini_value = 20U}, {.ini_register = (unsigned short)41512U, .ini_value = 2485U}, {.ini_register = (unsigned short)41524U, .ini_value = 538976288U}, {.ini_register = (unsigned short)41528U, .ini_value = 538976288U}, {.ini_register = (unsigned short)41532U, .ini_value = 2479393199U}, {.ini_register = (unsigned short)41548U, .ini_value = 1U}, {.ini_register = (unsigned short)41552U, .ini_value = 40960U}, {.ini_register = (unsigned short)41556U}, {.ini_register = (unsigned short)41560U, .ini_value = 214389632U}, {.ini_register = (unsigned short)41564U, .ini_value = 252645121U}, {.ini_register = (unsigned short)41568U, .ini_value = 1600720641U}, {.ini_register = (unsigned short)41572U, .ini_value = 4295185U}, {.ini_register = (unsigned short)41576U}, {.ini_register = (unsigned short)41580U, .ini_value = 204521830U}, {.ini_register = (unsigned short)41584U, .ini_value = 8521760U}, {.ini_register = (unsigned short)41588U, .ini_value = 135937194U}, {.ini_register = (unsigned short)41592U, .ini_value = 484915662U}, {.ini_register = (unsigned short)41596U, .ini_value = 85393870U}, {.ini_register = (unsigned short)41728U, .ini_value = 369164288U}, {.ini_register = (unsigned short)41732U, .ini_value = 738403330U}, {.ini_register = (unsigned short)41736U, .ini_value = 1212366402U}, {.ini_register = (unsigned short)41740U, .ini_value = 1510952971U}, {.ini_register = (unsigned short)41744U, .ini_value = 1816879690U}, {.ini_register = (unsigned short)41748U, .ini_value = 2123068554U}, {.ini_register = (unsigned short)41752U, .ini_value = 2530184395U}, {.ini_register = (unsigned short)41756U, .ini_value = 2739903759U}, {.ini_register = (unsigned short)41760U, .ini_value = 2815403407U}, {.ini_register = (unsigned short)41800U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41804U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41808U, .ini_value = 1073741823U}, {.ini_register = (unsigned short)41812U, .ini_value = 262143U}, {.ini_register = (unsigned short)41816U, .ini_value = 2041096735U}, {.ini_register = (unsigned short)41820U, .ini_value = 107758095U}, {.ini_register = (unsigned short)41824U, .ini_value = 254288391U}, {.ini_register = (unsigned short)41828U, .ini_value = 392173189U}, {.ini_register = (unsigned short)41832U, .ini_value = 528486660U}, {.ini_register = (unsigned short)41836U, .ini_value = 933235715U}, {.ini_register = (unsigned short)41840U, .ini_value = 1069811843U}, {.ini_register = (unsigned short)41844U, .ini_value = 1472202755U}, {.ini_register = (unsigned short)41848U, .ini_value = 1607992962U}, {.ini_register = (unsigned short)41852U, .ini_value = 2145387650U}, {.ini_register = (unsigned short)41856U, .ini_value = 2134670266U}, {.ini_register = (unsigned short)41860U, .ini_value = 4080041968U}};
#line 1236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf5111_ini_bbgain[64U] = {{.ini_register = (unsigned short)39680U}, {.ini_register = (unsigned short)39684U, .ini_value = 32U}, {.ini_register = (unsigned short)39688U, .ini_value = 16U}, {.ini_register = (unsigned short)39692U, .ini_value = 48U}, {.ini_register = (unsigned short)39696U, .ini_value = 8U}, {.ini_register = (unsigned short)39700U, .ini_value = 40U}, {.ini_register = (unsigned short)39704U, .ini_value = 4U}, {.ini_register = (unsigned short)39708U, .ini_value = 36U}, {.ini_register = (unsigned short)39712U, .ini_value = 20U}, {.ini_register = (unsigned short)39716U, .ini_value = 52U}, {.ini_register = (unsigned short)39720U, .ini_value = 12U}, {.ini_register = (unsigned short)39724U, .ini_value = 44U}, {.ini_register = (unsigned short)39728U, .ini_value = 2U}, {.ini_register = (unsigned short)39732U, .ini_value = 34U}, {.ini_register = (unsigned short)39736U, .ini_value = 18U}, {.ini_register = (unsigned short)39740U, .ini_value = 50U}, {.ini_register = (unsigned short)39744U, .ini_value = 10U}, {.ini_register = (unsigned short)39748U, .ini_value = 42U}, {.ini_register = (unsigned short)39752U, .ini_value = 6U}, {.ini_register = (unsigned short)39756U, .ini_value = 38U}, {.ini_register = (unsigned short)39760U, .ini_value = 22U}, {.ini_register = (unsigned short)39764U, .ini_value = 54U}, {.ini_register = (unsigned short)39768U, .ini_value = 14U}, {.ini_register = (unsigned short)39772U, .ini_value = 46U}, {.ini_register = (unsigned short)39776U, .ini_value = 1U}, {.ini_register = (unsigned short)39780U, .ini_value = 33U}, {.ini_register = (unsigned short)39784U, .ini_value = 17U}, {.ini_register = (unsigned short)39788U, .ini_value = 49U}, {.ini_register = (unsigned short)39792U, .ini_value = 9U}, {.ini_register = (unsigned short)39796U, .ini_value = 41U}, {.ini_register = (unsigned short)39800U, .ini_value = 5U}, {.ini_register = (unsigned short)39804U, .ini_value = 37U}, {.ini_register = (unsigned short)39808U, .ini_value = 21U}, {.ini_register = (unsigned short)39812U, .ini_value = 53U}, {.ini_register = (unsigned short)39816U, .ini_value = 13U}, {.ini_register = (unsigned short)39820U, .ini_value = 45U}, {.ini_register = (unsigned short)39824U, .ini_value = 3U}, {.ini_register = (unsigned short)39828U, .ini_value = 35U}, {.ini_register = (unsigned short)39832U, .ini_value = 19U}, {.ini_register = (unsigned short)39836U, .ini_value = 51U}, {.ini_register = (unsigned short)39840U, .ini_value = 11U}, {.ini_register = (unsigned short)39844U, .ini_value = 43U}, {.ini_register = (unsigned short)39848U, .ini_value = 43U}, {.ini_register = (unsigned short)39852U, .ini_value = 43U}, {.ini_register = (unsigned short)39856U, .ini_value = 43U}, {.ini_register = (unsigned short)39860U, .ini_value = 43U}, {.ini_register = (unsigned short)39864U, .ini_value = 43U}, {.ini_register = (unsigned short)39868U, .ini_value = 43U}, {.ini_register = (unsigned short)39872U, .ini_value = 43U}, {.ini_register = (unsigned short)39876U, .ini_value = 43U}, {.ini_register = (unsigned short)39880U, .ini_value = 43U}, {.ini_register = (unsigned short)39884U, .ini_value = 43U}, {.ini_register = (unsigned short)39888U, .ini_value = 43U}, {.ini_register = (unsigned short)39892U, .ini_value = 43U}, {.ini_register = (unsigned short)39896U, .ini_value = 43U}, {.ini_register = (unsigned short)39900U, .ini_value = 43U}, {.ini_register = (unsigned short)39904U, .ini_value = 43U}, {.ini_register = (unsigned short)39908U, .ini_value = 43U}, {.ini_register = (unsigned short)39912U, .ini_value = 43U}, {.ini_register = (unsigned short)39916U, .ini_value = 43U}, {.ini_register = (unsigned short)39920U, .ini_value = 43U}, {.ini_register = (unsigned short)39924U, .ini_value = 43U}, {.ini_register = (unsigned short)39928U, .ini_value = 2U}, {.ini_register = (unsigned short)39932U, .ini_value = 22U}};
#line 1304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static struct ath5k_ini rf5112_ini_bbgain[64U] = {{.ini_register = (unsigned short)39680U}, {.ini_register = (unsigned short)39684U, .ini_value = 1U}, {.ini_register = (unsigned short)39688U, .ini_value = 2U}, {.ini_register = (unsigned short)39692U, .ini_value = 3U}, {.ini_register = (unsigned short)39696U, .ini_value = 4U}, {.ini_register = (unsigned short)39700U, .ini_value = 5U}, {.ini_register = (unsigned short)39704U, .ini_value = 8U}, {.ini_register = (unsigned short)39708U, .ini_value = 9U}, {.ini_register = (unsigned short)39712U, .ini_value = 10U}, {.ini_register = (unsigned short)39716U, .ini_value = 11U}, {.ini_register = (unsigned short)39720U, .ini_value = 12U}, {.ini_register = (unsigned short)39724U, .ini_value = 13U}, {.ini_register = (unsigned short)39728U, .ini_value = 16U}, {.ini_register = (unsigned short)39732U, .ini_value = 17U}, {.ini_register = (unsigned short)39736U, .ini_value = 18U}, {.ini_register = (unsigned short)39740U, .ini_value = 19U}, {.ini_register = (unsigned short)39744U, .ini_value = 20U}, {.ini_register = (unsigned short)39748U, .ini_value = 21U}, {.ini_register = (unsigned short)39752U, .ini_value = 24U}, {.ini_register = (unsigned short)39756U, .ini_value = 25U}, {.ini_register = (unsigned short)39760U, .ini_value = 26U}, {.ini_register = (unsigned short)39764U, .ini_value = 27U}, {.ini_register = (unsigned short)39768U, .ini_value = 28U}, {.ini_register = (unsigned short)39772U, .ini_value = 29U}, {.ini_register = (unsigned short)39776U, .ini_value = 32U}, {.ini_register = (unsigned short)39780U, .ini_value = 33U}, {.ini_register = (unsigned short)39784U, .ini_value = 34U}, {.ini_register = (unsigned short)39788U, .ini_value = 35U}, {.ini_register = (unsigned short)39792U, .ini_value = 36U}, {.ini_register = (unsigned short)39796U, .ini_value = 37U}, {.ini_register = (unsigned short)39800U, .ini_value = 40U}, {.ini_register = (unsigned short)39804U, .ini_value = 41U}, {.ini_register = (unsigned short)39808U, .ini_value = 42U}, {.ini_register = (unsigned short)39812U, .ini_value = 43U}, {.ini_register = (unsigned short)39816U, .ini_value = 44U}, {.ini_register = (unsigned short)39820U, .ini_value = 45U}, {.ini_register = (unsigned short)39824U, .ini_value = 48U}, {.ini_register = (unsigned short)39828U, .ini_value = 49U}, {.ini_register = (unsigned short)39832U, .ini_value = 50U}, {.ini_register = (unsigned short)39836U, .ini_value = 51U}, {.ini_register = (unsigned short)39840U, .ini_value = 52U}, {.ini_register = (unsigned short)39844U, .ini_value = 53U}, {.ini_register = (unsigned short)39848U, .ini_value = 53U}, {.ini_register = (unsigned short)39852U, .ini_value = 53U}, {.ini_register = (unsigned short)39856U, .ini_value = 53U}, {.ini_register = (unsigned short)39860U, .ini_value = 53U}, {.ini_register = (unsigned short)39864U, .ini_value = 53U}, {.ini_register = (unsigned short)39868U, .ini_value = 53U}, {.ini_register = (unsigned short)39872U, .ini_value = 53U}, {.ini_register = (unsigned short)39876U, .ini_value = 53U}, {.ini_register = (unsigned short)39880U, .ini_value = 53U}, {.ini_register = (unsigned short)39884U, .ini_value = 53U}, {.ini_register = (unsigned short)39888U, .ini_value = 53U}, {.ini_register = (unsigned short)39892U, .ini_value = 53U}, {.ini_register = (unsigned short)39896U, .ini_value = 53U}, {.ini_register = (unsigned short)39900U, .ini_value = 53U}, {.ini_register = (unsigned short)39904U, .ini_value = 53U}, {.ini_register = (unsigned short)39908U, .ini_value = 53U}, {.ini_register = (unsigned short)39912U, .ini_value = 53U}, {.ini_register = (unsigned short)39916U, .ini_value = 53U}, {.ini_register = (unsigned short)39920U, .ini_value = 53U}, {.ini_register = (unsigned short)39924U, .ini_value = 53U}, {.ini_register = (unsigned short)39928U, .ini_value = 16U}, {.ini_register = (unsigned short)39932U, .ini_value = 26U}};
#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static void ath5k_hw_ini_registers(struct ath5k_hw *ah, unsigned int size, struct ath5k_ini *ini_regs, bool skip_pcu)
{
  #line 1383 
  unsigned int i;
  #line 1386 
  i = 0U;
  #line 1386 
  while (i < size) {
    #line 1389 
    if (((int)skip_pcu != 0 && (int)(ini_regs + (unsigned long)i)->ini_register < 0) && (unsigned int)(ini_regs + (unsigned long)i)->ini_register <= 36863U) 
      #line 1392 
      goto __Cont;
    #line 1394 
    switch ((unsigned int)(ini_regs + (unsigned long)i)->ini_mode) {
      #line 1395 
      case (unsigned int)1: 
                            #line 1395 
      ;
      #line 1397 
      ath5k_hw_reg_read(ah,(unsigned short)((int)(ini_regs + (unsigned long)i)->ini_register));
      #line 1398 
      break;
      #line 1399 
      case (unsigned int)0: 
                            #line 1399 
      ;
      #line 1400 
      default: 
               #line 1400 
      ;
      #line 1401 
      if ((i & 63U) != 0U) 
                           #line 1401 
                           __const_udelay(4295UL);
      #line 1402 
      ath5k_hw_reg_write(ah,(ini_regs + (unsigned long)i)->ini_value,(unsigned short)((int)(ini_regs + (unsigned long)i)->ini_register));
    }
    #line 1386 
    __Cont: 
            #line 1386 
    i ++;
  }
  #line 1406 
  return;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
static void ath5k_hw_ini_mode_registers(struct ath5k_hw *ah, unsigned int size, struct ath5k_ini_mode *ini_mode, u8 mode)
{
  #line 1420 
  unsigned int i;
  #line 1422 
  i = 0U;
  #line 1422 
  while (i < size) {
    #line 1423 
    if ((i & 63U) != 0U) 
                         #line 1423 
                         __const_udelay(4295UL);
    #line 1424 
    ath5k_hw_reg_write(ah,(ini_mode + (unsigned long)i)->mode_value[(int)mode],(unsigned short)((int)(ini_mode + (unsigned long)i)->mode_register));
    #line 1422 
    i ++;
  }
  #line 1427 
  return;
}

#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/initvals.c"
int ath5k_hw_write_initvals(struct ath5k_hw *ah, u8 mode, bool skip_pcu)
{
  #line 1447 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) {
    #line 1450 
    ath5k_hw_ini_mode_registers(ah,24U,(struct ath5k_ini_mode *)(& ar5212_ini_mode_start),(unsigned char)((int)mode));
    #line 1457 
    ath5k_hw_ini_registers(ah,191U,(struct ath5k_ini *)(& ar5212_ini_common_start),(_Bool)((bool)((int)skip_pcu) != 0));
    #line 1461 
    switch ((unsigned int)ah->ah_radio) {
      #line 1462 
      case (unsigned int)1: 
                            #line 1462 
      ;
      #line 1464 
      ath5k_hw_ini_mode_registers(ah,14U,(struct ath5k_ini_mode *)(& rf5111_ini_mode_end),(unsigned char)((int)mode));
      #line 1468 
      ath5k_hw_ini_registers(ah,14U,(struct ath5k_ini *)(& rf5111_ini_common_end),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1473 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5111_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1477 
      break;
      #line 1478 
      case (unsigned int)2: 
                            #line 1478 
      ;
      #line 1480 
      ath5k_hw_ini_mode_registers(ah,16U,(struct ath5k_ini_mode *)(& rf5112_ini_mode_end),(unsigned char)((int)mode));
      #line 1484 
      ath5k_hw_ini_registers(ah,11U,(struct ath5k_ini *)(& rf5112_ini_common_end),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1488 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5112_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1492 
      break;
      #line 1493 
      case (unsigned int)4: 
                            #line 1493 
      ;
      #line 1495 
      ath5k_hw_ini_mode_registers(ah,30U,(struct ath5k_ini_mode *)(& rf5413_ini_mode_end),(unsigned char)((int)mode));
      #line 1499 
      ath5k_hw_ini_registers(ah,70U,(struct ath5k_ini *)(& rf5413_ini_common_end),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1503 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5112_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1507 
      break;
      #line 1508 
      case (unsigned int)5: 
                            #line 1508 
      ;
      #line 1509 
      case (unsigned int)3: 
                            #line 1509 
      ;
      #line 1511 
      ath5k_hw_ini_mode_registers(ah,16U,(struct ath5k_ini_mode *)(& rf2413_ini_mode_end),(unsigned char)((int)mode));
      #line 1515 
      ath5k_hw_ini_registers(ah,81U,(struct ath5k_ini *)(& rf2413_ini_common_end),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1520 
      if (ah->ah_radio == (unsigned int)AR5K_RF2316) {
        #line 1521 
        ath5k_hw_reg_write(ah,16384U,(unsigned short)38920);
        #line 1523 
        ath5k_hw_reg_write(ah,136019114U,(unsigned short)41588);
      }
      #line 1527 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5112_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1530 
      break;
      #line 1531 
      case (unsigned int)6: 
                            #line 1531 
      ;
      #line 1533 
      ath5k_hw_ini_mode_registers(ah,16U,(struct ath5k_ini_mode *)(& rf2413_ini_mode_end),(unsigned char)((int)mode));
      #line 1537 
      ath5k_hw_ini_registers(ah,77U,(struct ath5k_ini *)(& rf2425_ini_common_end),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1542 
      ath5k_hw_reg_write(ah,1575525U,(unsigned short)38984);
      #line 1545 
      ath5k_hw_reg_write(ah,16384U,(unsigned short)38920);
      #line 1546 
      ;
      #line 1546 
      ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)41580) & 4294967280U) | 10U,(unsigned short)41580);
      #line 1548 
      ath5k_hw_reg_write(ah,2147483816U,(unsigned short)33088);
      #line 1549 
      ath5k_hw_reg_write(ah,255U,(unsigned short)39256);
      #line 1551 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5112_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1554 
      break;
      #line 1555 
      case (unsigned int)7: 
                            #line 1555 
      ;
      #line 1557 
      ath5k_hw_ini_mode_registers(ah,22U,(struct ath5k_ini_mode *)(& rf2425_ini_mode_end),(unsigned char)((int)mode));
      #line 1561 
      ath5k_hw_ini_registers(ah,77U,(struct ath5k_ini *)(& rf2425_ini_common_end),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1565 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5112_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1568 
      break;
      #line 1569 
      default: 
               #line 1569 
      ;
      #line 1570 
      return -22;
    }
  }
  else 
    #line 1575 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) {
      #line 1578 
      if ((unsigned int)mode > 2U) {
        #line 1579 
        if (net_ratelimit() != 0) 
                                  #line 1579 
                                  _ath5k_printk(ah,(char *)"\001",(char *)"unsupported channel mode: %d\n",(int)mode);
        #line 1580 
        return -22;
      }
      #line 1584 
      ath5k_hw_ini_mode_registers(ah,34U,(struct ath5k_ini_mode *)(& ar5211_ini_mode),(unsigned char)((int)mode));
      #line 1590 
      ath5k_hw_ini_registers(ah,116U,(struct ath5k_ini *)(& ar5211_ini),(_Bool)((bool)((int)skip_pcu) != 0));
      #line 1596 
      ath5k_hw_ini_registers(ah,64U,(struct ath5k_ini *)(& rf5111_ini_bbgain),(_Bool)((bool)((int)skip_pcu) != 0));
    }
    else 
      #line 1599 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 1600 
                                                       ath5k_hw_ini_registers(ah,203U,(struct ath5k_ini *)(& ar5210_ini),(_Bool)((bool)((int)skip_pcu) != 0));
  #line 1604 
  return 0;
}

#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/ath5k.h"
#line 1524 
void ath5k_hw_dma_init(struct ath5k_hw *ah);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
int ath5k_hw_register_timeout(struct ath5k_hw *ah, u32 reg, u32 flag, u32 val, bool is_set)
{
  #line 70 
  int i;
  #line 71 
  u32 data;
  #line 82 
  int tmp;
  #line 73 
  i = 20000;
  #line 73 
  while (i > 0) {
    #line 74 
    data = ath5k_hw_reg_read(ah,(unsigned short)((int)((unsigned short)reg)));
    #line 75 
    if ((int)is_set != 0 && (data & flag) != 0U) 
                                                 #line 76 
                                                 break;
    else 
      #line 77 
      if ((data & flag) == val) 
                                #line 78 
                                break;
    #line 79 
    __const_udelay(64425UL);
    #line 73 
    i --;
  }
  #line 82 
  if (i <= 0) 
              #line 82 
              tmp = -11; else 
                              #line 82 
                              tmp = 0;
  #line 82 
  return tmp;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
unsigned int ath5k_hw_htoclock(struct ath5k_hw *ah, unsigned int usec)
{
  #line 103 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 104 
  return common->clockrate * usec;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
unsigned int ath5k_hw_clocktoh(struct ath5k_hw *ah, unsigned int clock)
{
  #line 120 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 121 
  return clock / common->clockrate;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static void ath5k_hw_init_core_clock(struct ath5k_hw *ah)
{
  #line 136 
  u32 usec_reg;
  #line 136 
  u32 txlat;
  #line 136 
  u32 rxlat;
  #line 136 
  u32 usec;
  #line 136 
  u32 clock;
  #line 136 
  u32 sclock;
  #line 136 
  u32 txf2txs;
  #line 257 
  int tmp_1;
  #line 134 
  struct ieee80211_channel *channel = ah->ah_current_channel;
  #line 135 
  struct ath_common *common = ath5k_hw_common(ah);
  #line 141 
  switch ((int)channel->hw_value) {
    #line 142 
    case 0: 
            #line 142 
    ;
    #line 143 
    clock = 40U;
    #line 144 
    break;
    #line 145 
    case 1: 
            #line 145 
    ;
    #line 146 
    clock = 22U;
    #line 147 
    break;
    #line 148 
    case 2: 
            #line 148 
    ;
    #line 149 
    default: 
             #line 149 
    ;
    #line 150 
    clock = 44U;
    #line 151 
    break;
  }
  #line 156 
  switch ((int)ah->ah_bwmode) {
    #line 157 
    case 3: 
            #line 157 
    ;
    #line 158 
    clock *= 2U;
    #line 159 
    break;
    #line 160 
    case 2: 
            #line 160 
    ;
    #line 161 
    clock /= 2U;
    #line 162 
    break;
    #line 163 
    case 1: 
            #line 163 
    ;
    #line 164 
    clock /= 4U;
    #line 165 
    break;
    #line 166 
    default: 
             #line 166 
    ;
    #line 167 
    break;
  }
  #line 170 
  common->clockrate = clock;
  #line 176 
  usec = clock + 4294967295U;
  #line 177 
  usec &= 127U;
  #line 180 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 181 
    ;
    #line 181 
    ;
    #line 181 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)4336) & 4293919743U) | ((clock << 10) & 1047552U),(unsigned short)4336);
  }
  #line 189 
  if ((unsigned int)ah->ah_radio + 4294967294U <= 4U) 
                                                      #line 192 
                                                      sclock = 39U; else 
                                                                    #line 194 
                                                                    sclock = 31U;
  #line 195 
  sclock = (sclock << 7) & 16256U;
  #line 200 
  usec_reg = ath5k_hw_reg_read(ah,(unsigned short)32796);
  #line 201 
  txlat = (usec_reg >> 14) & 511U;
  #line 202 
  rxlat = (usec_reg >> 23) & 63U;
  #line 207 
  txf2txs = 14U;
  #line 214 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 216 
    txlat = 54U;
    #line 217 
    rxlat = 29U;
  }
  #line 220 
  if (ah->ah_mac_srev <= 63U) {
    #line 228 
    txlat = (txlat << 14) & 1032192U;
    #line 229 
    rxlat = (rxlat << 20) & 66060288U;
  }
  else 
    #line 231 
    switch ((int)ah->ah_bwmode) {
      #line 232 
      case 2: 
              #line 232 
      ;
      #line 233 
      txlat = (txlat * 2U << 14) & 8372224U;
      #line 235 
      rxlat = 528482304U;
      #line 237 
      txf2txs = 12U;
      #line 238 
      break;
      #line 239 
      case 1: 
              #line 239 
      ;
      #line 240 
      txlat = (txlat * 4U << 14) & 8372224U;
      #line 242 
      rxlat = 528482304U;
      #line 244 
      txf2txs = 13U;
      #line 245 
      break;
      #line 246 
      case 3: 
              #line 246 
      ;
      #line 247 
      txlat = 32U;
      #line 248 
      rxlat = (rxlat / 2U << 23) & 528482304U;
      #line 250 
      txf2txs = 14U;
      #line 251 
      break;
      #line 252 
      default: 
               #line 252 
      ;
      #line 253 
      break;
    }
  #line 256 
  usec_reg = ((usec | sclock) | txlat) | rxlat;
  #line 257 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 257 
                                                   tmp_1 = 32800; else 
                                                                    #line 257 
                                                                    tmp_1 = 32796;
  #line 257 
  ;
  #line 257 
  ;
  #line 257 
  ath5k_hw_reg_write(ah,usec_reg,(unsigned short)tmp_1);
  #line 260 
  if (ah->ah_radio == (unsigned int)AR5K_RF5112) {
    #line 261 
    ;
    #line 261 
    ;
    #line 261 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38948) & 4294967280U) | (txf2txs & 15U),(unsigned short)38948);
  }
  #line 262 
  return;
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static void ath5k_hw_set_sleep_clock(struct ath5k_hw *ah, bool enable)
{
  #line 284 
  u32 scal;
  #line 284 
  u32 spending;
  #line 284 
  u32 sclock;
  #line 283 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 288 
  if (((((int)ee->ee_misc1 >> 14) & 1) != 0 || (((int)ee->ee_misc1 >> 15) & 1) != 0) && (int)enable != 0) {
    #line 293 
    ;
    #line 293 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)32796) & 4294951039U) | 128U,(unsigned short)32796);
    #line 295 
    ;
    #line 295 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)33028) & 4294967040U) | 61U,(unsigned short)33028);
    #line 299 
    ath5k_hw_reg_write(ah,31U,(unsigned short)39024);
    #line 301 
    if (((ah->ah_radio == (unsigned int)AR5K_RF5112 || ah->ah_radio == (unsigned int)AR5K_RF5413) || ah->ah_radio == (unsigned int)AR5K_RF2316) || (unsigned int)ah->ah_mac_version == 15U) 
      #line 305 
      spending = 20U; else 
                           #line 307 
                           spending = 24U;
    #line 308 
    ath5k_hw_reg_write(ah,spending,(unsigned short)39416);
    #line 310 
    if ((ah->ah_radio == (unsigned int)AR5K_RF5112 || ah->ah_radio == (unsigned int)AR5K_RF5413) || (unsigned int)ah->ah_mac_version == 15U) {
      #line 313 
      ath5k_hw_reg_write(ah,38U,(unsigned short)39028);
      #line 314 
      ath5k_hw_reg_write(ah,13U,(unsigned short)39032);
      #line 315 
      ath5k_hw_reg_write(ah,7U,(unsigned short)39408);
      #line 316 
      ath5k_hw_reg_write(ah,63U,(unsigned short)39412);
      #line 317 
      ;
      #line 317 
      ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)16400) & 4244635647U) | 33554432U,(unsigned short)16400);
    }
    else {
      #line 320 
      ath5k_hw_reg_write(ah,10U,(unsigned short)39028);
      #line 321 
      ath5k_hw_reg_write(ah,12U,(unsigned short)39032);
      #line 322 
      ath5k_hw_reg_write(ah,3U,(unsigned short)39408);
      #line 323 
      ath5k_hw_reg_write(ah,32U,(unsigned short)39412);
      #line 324 
      ;
      #line 324 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | 50331648U,(unsigned short)16400);
    }
    #line 329 
    ;
    #line 329 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | 2U,(unsigned short)16400);
  }
  else {
    #line 336 
    ;
    #line 336 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) & 4294967293U,(unsigned short)16400);
    #line 339 
    ;
    #line 339 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) & 4244635647U,(unsigned short)16400);
    #line 343 
    ath5k_hw_reg_write(ah,31U,(unsigned short)39024);
    #line 344 
    ath5k_hw_reg_write(ah,127U,(unsigned short)39028);
    #line 346 
    if ((unsigned int)ah->ah_mac_version == 15U) 
                                                 #line 347 
                                                 scal = 10U;
    else 
      #line 348 
      if ((int)ee->ee_is_hb63 != 0) 
                                    #line 349 
                                    scal = 50U; else 
                                                     #line 351 
                                                     scal = 14U;
    #line 352 
    ath5k_hw_reg_write(ah,scal,(unsigned short)39032);
    #line 354 
    ath5k_hw_reg_write(ah,12U,(unsigned short)39408);
    #line 355 
    ath5k_hw_reg_write(ah,255U,(unsigned short)39412);
    #line 357 
    if (((ah->ah_radio == (unsigned int)AR5K_RF5112 || ah->ah_radio == (unsigned int)AR5K_RF5413) || ah->ah_radio == (unsigned int)AR5K_RF2316) || (unsigned int)ah->ah_mac_version == 15U) 
      #line 361 
      spending = 20U; else 
                           #line 363 
                           spending = 24U;
    #line 364 
    ath5k_hw_reg_write(ah,spending,(unsigned short)39416);
    #line 367 
    ;
    #line 367 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)33028) & 4294967040U) | 1U,(unsigned short)33028);
    #line 369 
    if (((ah->ah_radio == (unsigned int)AR5K_RF5112 || ah->ah_radio == (unsigned int)AR5K_RF5413) || ah->ah_radio == (unsigned int)AR5K_RF2316) || ah->ah_radio == (unsigned int)AR5K_RF2317) 
      #line 373 
      sclock = 39U; else 
                         #line 375 
                         sclock = 31U;
    #line 376 
    ;
    #line 376 
    ;
    #line 376 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)32796) & 4294951039U) | ((sclock << 7) & 16256U),(unsigned short)32796);
  }
  #line 378 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static int ath5k_hw_nic_reset(struct ath5k_hw *ah, u32 val)
{
  #line 399 
  int ret;
  #line 400 
  unsigned int tmp;
  #line 400 
  if (val != 0U) 
                 #line 400 
                 tmp = val; else 
                                 #line 400 
                                 tmp = 4294967295U;
  #line 400 
  u32 mask = tmp;
  #line 403 
  ath5k_hw_reg_read(ah,(unsigned short)12);
  #line 408 
  ath5k_hw_reg_write(ah,val,(unsigned short)16384);
  #line 411 
  usleep_range(15UL,20UL);
  #line 413 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 414 
    val &= 15U;
    #line 416 
    mask &= 15U;
  }
  else {
    #line 419 
    val &= 3U;
    #line 420 
    mask &= 3U;
  }
  #line 423 
  ret = ath5k_hw_register_timeout(ah,16384U,mask,val,(_Bool)0);
  #line 430 
  if ((val & 1U) == 0U) 
                        #line 431 
                        ath5k_hw_reg_write(ah,0U,(unsigned short)20);
  #line 433 
  return ret;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static int ath5k_hw_wisoc_reset(struct ath5k_hw *ah, u32 flags)
{
  #line 448 
  unsigned int tmp;
  #line 449 
  u32 *reg;
  #line 450 
  u32 regval;
  #line 448 
  if (flags != 0U) 
                   #line 448 
                   tmp = flags; else 
                                     #line 448 
                                     tmp = 4294967295U;
  #line 448 
  u32 mask = tmp;
  #line 451 
  u32 val = 0U;
  #line 454 
  if ((unsigned int)ah->devid > 133U) {
    #line 455 
    reg = (u32 *)2969567236U;
    #line 456 
    if ((mask & 1U) != 0U) 
                           #line 457 
                           val |= 1U;
    #line 458 
    if ((mask & 2U) != 0U) 
                           #line 459 
                           val |= 2U;
  }
  else {
    #line 462 
    void *__mptr;
    #line 461 
    reg = (u32 *)3154128928U;
    #line 462 
    __mptr = (void *)ah->dev;
    #line 462 
    ;
    #line 462 
    if (((struct platform_device *)(__mptr + 18446744073709551600U))->id == 0) {
      #line 463 
      if ((mask & 1U) != 0U) 
                             #line 464 
                             val |= 8192U;
      #line 465 
      if ((mask & 2U) != 0U) 
                             #line 466 
                             val |= 16388U;
    }
    else {
      #line 469 
      if ((mask & 1U) != 0U) 
                             #line 470 
                             val |= 131072U;
      #line 471 
      if ((mask & 2U) != 0U) 
                             #line 472 
                             val |= 262656U;
    }
  }
  #line 478 
  regval = ioread32((void *)reg);
  #line 479 
  iowrite32(regval | val,(void *)reg);
  #line 480 
  regval = ioread32((void *)reg);
  #line 481 
  __const_udelay(429500UL);
  #line 484 
  iowrite32(~ val & regval,(void *)reg);
  #line 485 
  regval = ioread32((void *)reg);
  #line 492 
  if ((flags & 1U) == 0U) 
                          #line 493 
                          ath5k_hw_reg_write(ah,0U,(unsigned short)20);
  #line 495 
  return 0;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static int ath5k_hw_set_power_mode(struct ath5k_hw *ah, enum ath5k_power_mode mode, bool set_chip, u16 sleep_duration)
{
  #line 517 
  unsigned int i;
  #line 518 
  u32 staid;
  #line 518 
  u32 data;
  #line 520 
  staid = ath5k_hw_reg_read(ah,(unsigned short)32772);
  #line 522 
  switch ((unsigned int)mode) {
    #line 523 
    case (unsigned int)1: 
                          #line 523 
    ;
    #line 524 
    staid &= 4292870143U;
    #line 526 
    case (unsigned int)4: 
                          #line 526 
    ;
    #line 527 
    if ((int)set_chip != 0) 
                            #line 528 
                            ath5k_hw_reg_write(ah,(unsigned int)((int)sleep_duration | 131072),(unsigned short)16388);
    #line 533 
    staid |= 262144U;
    #line 534 
    break;
    #line 536 
    case (unsigned int)3: 
                          #line 536 
    ;
    #line 537 
    if ((int)set_chip != 0) 
                            #line 538 
                            ath5k_hw_reg_write(ah,65536U,(unsigned short)16388);
    #line 541 
    staid |= 262144U;
    #line 542 
    break;
    #line 544 
    case (unsigned int)2: 
                          #line 544 
    ;
    #line 546 
    staid &= 4294705151U;
    #line 548 
    if (! set_chip) 
                    #line 549 
                    goto commit;
    #line 551 
    data = ath5k_hw_reg_read(ah,(unsigned short)16388);
    #line 556 
    if ((data & 4290772992U) != 0U) 
                                    #line 557 
                                    data = 0U; else 
                                                    #line 560 
                                                    data &= 4294770687U;
    #line 562 
    ath5k_hw_reg_write(ah,data,(unsigned short)16388);
    #line 564 
    usleep_range(15UL,20UL);
    #line 566 
    i = 200U;
    #line 566 
    while (i != 0U) {
      {
        #line 568 
        if ((ath5k_hw_reg_read(ah,(unsigned short)16400) & 65536U) == 0U) 
          #line 570 
          break;
        #line 573 
        usleep_range(50UL,75UL);
        #line 574 
        ath5k_hw_reg_write(ah,data,(unsigned short)16388);
      }
      #line 566 
      i --;
    }
    #line 579 
    if (i == 0U) 
                 #line 580 
                 return -5;
    #line 582 
    break;
    #line 584 
    default: 
             #line 584 
    ;
    #line 585 
    return -22;
  }
  #line 588 
  commit: 
          #line 588 
  ;
  #line 589 
  ath5k_hw_reg_write(ah,staid,(unsigned short)32772);
  #line 591 
  return 0;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
int ath5k_hw_on_hold(struct ath5k_hw *ah)
{
  #line 610 
  u32 bus_flags;
  #line 611 
  int ret;
  #line 609 
  struct pci_dev *pdev = ah->pdev;
  #line 613 
  if (ath5k_get_bus_type(ah) == (unsigned int)ATH_AHB) 
                                                       #line 614 
                                                       return 0;
  #line 617 
  ret = ath5k_hw_set_power_mode(ah,(enum ath5k_power_mode)AR5K_PM_AWAKE,(_Bool)1,(unsigned short)0);
  #line 618 
  if (ret != 0) {
    #line 619 
    if (net_ratelimit() != 0) 
                              #line 619 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to wakeup the MAC Chip\n");
    #line 620 
    return ret;
  }
  #line 631 
  if (pdev != (struct pci_dev *)0) {
    #line 631 
    if ((int)pci_is_pcie(pdev) != 0) 
                                     #line 631 
                                     bus_flags = 0U; else 
                                                          #line 631 
                                                          bus_flags = 16U;
  }
  else 
       #line 631 
       bus_flags = 16U;
  #line 633 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 634 
    ret = ath5k_hw_nic_reset(ah,31U);
    #line 637 
    usleep_range(2000UL,2500UL);
  }
  else 
       #line 639 
       ret = ath5k_hw_nic_reset(ah,bus_flags | 3U);
  #line 643 
  if (ret != 0) {
    #line 644 
    if (net_ratelimit() != 0) 
                              #line 644 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to put device on warm reset\n");
    #line 645 
    return -5;
  }
  #line 649 
  ret = ath5k_hw_set_power_mode(ah,(enum ath5k_power_mode)AR5K_PM_AWAKE,(_Bool)1,(unsigned short)0);
  #line 650 
  if (ret != 0) {
    #line 651 
    if (net_ratelimit() != 0) 
                              #line 651 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to put device on hold\n");
    #line 652 
    return ret;
  }
  #line 655 
  return ret;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
int ath5k_hw_nic_wakeup(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 672 
  u32 turbo;
  #line 672 
  u32 mode;
  #line 672 
  u32 clock;
  #line 672 
  u32 bus_flags;
  #line 673 
  int ret;
  #line 671 
  struct pci_dev *pdev = ah->pdev;
  #line 675 
  turbo = 0U;
  #line 676 
  mode = 0U;
  #line 677 
  clock = 0U;
  #line 679 
  if (ath5k_get_bus_type(ah) != (unsigned int)ATH_AHB) 
                                                       #line 679 
                                                       goto _LOR;
  else 
    #line 679 
    if (channel != (struct ieee80211_channel *)0) {
      #line 679 
      _LOR: {
              #line 681 
              ret = ath5k_hw_set_power_mode(ah,(enum ath5k_power_mode)AR5K_PM_AWAKE,(_Bool)1,(unsigned short)0);
              #line 682 
              if (ret != 0) {
                #line 683 
                if (net_ratelimit() != 0) 
                                          #line 683 
                                          _ath5k_printk(ah,(char *)"\001",(char *)"failed to wakeup the MAC Chip\n");
                #line 684 
                return ret;
              }
            }
    }
  #line 696 
  if (pdev != (struct pci_dev *)0) {
    #line 696 
    if ((int)pci_is_pcie(pdev) != 0) 
                                     #line 696 
                                     bus_flags = 0U; else 
                                                          #line 696 
                                                          bus_flags = 16U;
  }
  else 
       #line 696 
       bus_flags = 16U;
  #line 698 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 699 
    ret = ath5k_hw_nic_reset(ah,31U);
    #line 702 
    usleep_range(2000UL,2500UL);
  }
  else {
    #line 704 
    if (ath5k_get_bus_type(ah) == (unsigned int)ATH_AHB) 
                                                         #line 705 
                                                         ret = ath5k_hw_wisoc_reset(ah,3U); else 
                                                                    #line 708 
                                                                    ret = ath5k_hw_nic_reset(ah,bus_flags | 3U);
  }
  #line 712 
  if (ret != 0) {
    #line 713 
    if (net_ratelimit() != 0) 
                              #line 713 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to reset the MAC Chip\n");
    #line 714 
    return -5;
  }
  #line 718 
  ret = ath5k_hw_set_power_mode(ah,(enum ath5k_power_mode)AR5K_PM_AWAKE,(_Bool)1,(unsigned short)0);
  #line 719 
  if (ret != 0) {
    #line 720 
    if (net_ratelimit() != 0) 
                              #line 720 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to resume the MAC Chip\n");
    #line 721 
    return ret;
  }
  #line 727 
  if (ath5k_get_bus_type(ah) == (unsigned int)ATH_AHB) 
                                                       #line 728 
                                                       ret = ath5k_hw_wisoc_reset(ah,0U); else 
                                                                    #line 730 
                                                                    ret = ath5k_hw_nic_reset(ah,0U);
  #line 732 
  if (ret != 0) {
    #line 733 
    if (net_ratelimit() != 0) 
                              #line 733 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to warm reset the MAC Chip\n");
    #line 734 
    return -5;
  }
  #line 739 
  if (channel == (struct ieee80211_channel *)0) 
                                                #line 740 
                                                return 0;
  #line 742 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 747 
    if (ah->ah_radio > (unsigned int)AR5K_RF5111) {
      #line 748 
      mode = 8U;
      #line 749 
      clock = 64U;
    }
    else {
      #line 751 
      mode = 0U;
      #line 752 
      clock = 0U;
    }
    #line 755 
    if (channel->band == (unsigned int)NL80211_BAND_2GHZ) {
      #line 757 
      unsigned int tmp_7;
      #line 756 
      mode |= 2U;
      #line 757 
      if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                       #line 757 
                                                       tmp_7 = 25U; else 
                                                                    #line 757 
                                                                    tmp_7 = 171U;
      #line 757 
      clock = tmp_7 | clock;
      #line 759 
      if ((unsigned int)channel->hw_value == 1U) 
                                                 #line 760 
                                                 mode |= 1U;
      else 
        #line 769 
        if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                         #line 770 
                                                         mode = mode; else 
                                                                    #line 772 
                                                                    mode |= 4U;
    }
    else 
      #line 774 
      if (channel->band == (unsigned int)NL80211_BAND_5GHZ) {
        #line 775 
        mode = mode;
        #line 779 
        if (ah->ah_radio == (unsigned int)AR5K_RF5413) 
                                                       #line 780 
                                                       clock = 4U;
        else {
          #line 782 
          unsigned int tmp_8;
          #line 782 
          if (ah->ah_version == (unsigned int)AR5K_AR5211) 
                                                           #line 782 
                                                           tmp_8 = 24U; else 
                                                                    #line 782 
                                                                    tmp_8 = 170U;
          #line 782 
          clock = tmp_8 | clock;
        }
      }
      else {
        #line 784 
        if (net_ratelimit() != 0) 
                                  #line 784 
                                  _ath5k_printk(ah,(char *)"\001",(char *)"invalid radio frequency mode\n");
        #line 785 
        return -22;
      }
    #line 791 
    if ((unsigned int)ah->ah_bwmode == 3U) {
      #line 792 
      turbo = 1U;
      #line 793 
      if (ah->ah_radio != (unsigned int)AR5K_RF2425) 
                                                     #line 794 
                                                     turbo |= 2U;
    }
    else 
      #line 795 
      if ((unsigned int)ah->ah_bwmode != 0U) 
        #line 796 
        if (ah->ah_radio == (unsigned int)AR5K_RF5413) {
          #line 797 
          unsigned int tmp_10;
          #line 797 
          if ((unsigned int)ah->ah_bwmode == 2U) 
                                                 #line 797 
                                                 tmp_10 = 32U; else 
                                                                    #line 797 
                                                                    tmp_10 = 64U;
          #line 797 
          mode = tmp_10 | mode;
        }
        else 
          #line 800 
          if (ah->ah_version == (unsigned int)AR5K_AR5212) {
            #line 801 
            unsigned int tmp_11;
            #line 801 
            if ((unsigned int)ah->ah_bwmode == 2U) 
                                                   #line 801 
                                                   tmp_11 = 256U; else 
                                                                    #line 801 
                                                                    tmp_11 = 512U;
            #line 801 
            clock = tmp_11 | clock;
          }
  }
  else 
    #line 810 
    if ((unsigned int)ah->ah_bwmode == 3U) 
                                           #line 811 
                                           ath5k_hw_reg_write(ah,1U,(unsigned short)38916);
  #line 815 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 818 
    ;
    #line 818 
    if (ath5k_hw_reg_read(ah,(unsigned short)39036) != clock) {
      #line 819 
      ath5k_hw_reg_write(ah,clock,(unsigned short)39036);
      #line 820 
      usleep_range(300UL,350UL);
    }
    #line 824 
    ath5k_hw_reg_write(ah,mode,(unsigned short)41472);
    #line 825 
    ath5k_hw_reg_write(ah,turbo,(unsigned short)38916);
  }
  #line 828 
  return 0;
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static void ath5k_hw_tweak_initval_settings(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 851 
  if (ah->ah_version == (unsigned int)AR5K_AR5212 && (unsigned int)ah->ah_phy_revision > 65U) {
    #line 855 
    ath5k_hw_reg_write(ah,172034U,(unsigned short)38956);
    #line 867 
    ;
    #line 867 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)41512) & 4294966783U,(unsigned short)41512);
    #line 870 
    ;
    #line 870 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)41512) & 4294837247U) | 2048U,(unsigned short)41512);
    #line 874 
    ath5k_hw_reg_write(ah,15U,(unsigned short)32864);
  }
  #line 878 
  if ((unsigned int)ah->ah_phy_revision > 66U) 
                                               #line 879 
                                               ath5k_hw_reg_write(ah,0U,(unsigned short)41556);
  #line 882 
  if ((unsigned int)ah->ah_phy_revision > 67U) {
    #line 883 
    ;
    #line 883 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)48) & 4294934527U,(unsigned short)48);
  }
  #line 887 
  if ((ah->ah_radio == (unsigned int)AR5K_RF5413 || ah->ah_radio == (unsigned int)AR5K_RF2317) || (unsigned int)ah->ah_mac_version == 15U) {
    #line 890 
    u32 fast_adc = 1U;
    #line 892 
    if (channel->center_freq == 2462U || channel->center_freq == 2467U) 
      #line 894 
      fast_adc = 0U;
    #line 897 
    ;
    #line 897 
    if (ath5k_hw_reg_read(ah,(unsigned short)41548) != fast_adc) 
                                                                 #line 898 
                                                                 ath5k_hw_reg_write(ah,fast_adc,(unsigned short)41548);
  }
  #line 903 
  if (ah->ah_radio == (unsigned int)AR5K_RF5112 && (unsigned int)ah->ah_radio_5ghz_revision <= 52U) {
    #line 906 
    u32 data;
    #line 913 
    int tmp_3;
    #line 907 
    ath5k_hw_reg_write(ah,0U,(unsigned short)41476);
    #line 909 
    if (channel->band == (unsigned int)NL80211_BAND_5GHZ) 
                                                          #line 910 
                                                          data = 4290252832U; else 
                                                                    #line 912 
                                                                    data = 4290252064U;
    #line 913 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 913 
                                                     tmp_3 = 38916; else 
                                                                    #line 913 
                                                                    tmp_3 = 39236;
    #line 913 
    ;
    #line 913 
    ;
    #line 913 
    ath5k_hw_reg_write(ah,data,(unsigned short)tmp_3);
  }
  #line 916 
  if (ah->ah_mac_srev <= 63U) {
    #line 918 
    ath5k_hw_reg_write(ah,0U,(unsigned short)92);
    #line 920 
    ath5k_hw_reg_write(ah,8U,(unsigned short)39032);
    #line 923 
    ;
    #line 923 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32840) | 1024U,(unsigned short)32840);
  }
  #line 927 
  if ((unsigned int)ah->ah_bwmode != 0U) {
    #line 931 
    if ((unsigned int)ah->ah_bwmode == 3U) {
      #line 933 
      ;
      #line 933 
      ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38980) & 4294967168U) | 37U,(unsigned short)38980);
      #line 940 
      if (ah->ah_version == (unsigned int)AR5K_AR5212) {
        #line 941 
        ;
        #line 941 
        ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)38980) & 4294951039U,(unsigned short)38980);
      }
      #line 945 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 947 
                                                       ath5k_hw_reg_write(ah,1862279203U,(unsigned short)38916);
    }
    else 
      #line 954 
      if (ah->ah_mac_srev + 4294967152U <= 16U) {
        #line 956 
        ;
        #line 956 
        ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39236) | 3U,(unsigned short)39236);
      }
  }
  else 
    #line 960 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                     #line 962 
                                                     ath5k_hw_reg_write(ah,1862275104U,(unsigned short)38916);
  #line 963 
  return;
}

#line 976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
static void ath5k_hw_commit_eeprom_settings(struct ath5k_hw *ah, struct ieee80211_channel *channel)
{
  #line 980 
  s16 cck_ofdm_pwr_delta;
  #line 981 
  u8 ee_mode;
  #line 979 
  struct ath5k_eeprom_info *ee = & ah->ah_capabilities.cap_eeprom;
  #line 984 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 985 
                                                   return;
  #line 987 
  ee_mode = (unsigned char)ath5k_eeprom_mode_from_channel(ah,channel);
  #line 990 
  if (channel->center_freq == 2484U) 
                                     #line 991 
                                     cck_ofdm_pwr_delta = (short)(((int)ee->ee_cck_ofdm_power_delta - (int)ee->ee_scaled_cck_delta) / 5); else 
                                                                    #line 995 
                                                                    cck_ofdm_pwr_delta = (short)((int)ee->ee_cck_ofdm_power_delta / 5);
  #line 1000 
  if ((unsigned int)ah->ah_phy_revision > 65U) 
    #line 1001 
    if ((unsigned int)channel->hw_value == 2U) 
                                               #line 1002 
                                               ath5k_hw_reg_write(ah,(unsigned int)(((- ((int)ee->ee_cck_ofdm_gain_delta) << 6) & 4032) | ((- ((int)cck_ofdm_pwr_delta) << 18) & 16515072)),(unsigned short)39244); else 
                                                                    #line 1009 
                                                                    ath5k_hw_reg_write(ah,0U,(unsigned short)39244);
  else {
    #line 1013 
    ah->ah_txpower.txp_cck_ofdm_pwr_delta = cck_ofdm_pwr_delta;
    #line 1014 
    ah->ah_txpower.txp_cck_ofdm_gainf_delta = (short)ee->ee_cck_ofdm_gain_delta;
  }
  #line 1020 
  ath5k_hw_set_antenna_switch(ah,(unsigned char)((int)ee_mode));
  #line 1023 
  ath5k_hw_reg_write(ah,(unsigned int)(((int)ee->ee_noise_floor_thr[(int)ee_mode] & 511) | 512),(unsigned short)39272);
  #line 1027 
  if ((unsigned int)ah->ah_bwmode == 3U && (unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 20479U) {
    #line 1030 
    ;
    #line 1030 
    ;
    #line 1030 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38980) & 4294951039U) | ((unsigned int)((int)ee->ee_switch_settling_turbo[(int)ee_mode] << 7) & 16256U),(unsigned short)38980);
    #line 1035 
    ;
    #line 1035 
    ;
    #line 1035 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38984) & 4294709247U) | ((unsigned int)((int)ee->ee_atn_tx_rx_turbo[(int)ee_mode] << 12) & 258048U),(unsigned short)38984);
    #line 1040 
    ;
    #line 1040 
    ;
    #line 1040 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38992) & 4294967040U) | ((unsigned int)ee->ee_adc_desired_size_turbo[(int)ee_mode] & 255U),(unsigned short)38992);
    #line 1044 
    ;
    #line 1044 
    ;
    #line 1044 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38992) & 4294902015U) | ((unsigned int)((int)ee->ee_pga_desired_size_turbo[(int)ee_mode] << 8) & 65535U),(unsigned short)38992);
    #line 1049 
    ;
    #line 1049 
    ;
    #line 1049 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)41484) & 4278452223U) | ((unsigned int)((int)ee->ee_margin_tx_rx_turbo[(int)ee_mode] << 18) & 16515072U),(unsigned short)41484);
  }
  else {
    #line 1055 
    ;
    #line 1055 
    ;
    #line 1055 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38980) & 4294951039U) | ((unsigned int)((int)ee->ee_switch_settling[(int)ee_mode] << 7) & 16256U),(unsigned short)38980);
    #line 1060 
    ;
    #line 1060 
    ;
    #line 1060 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38984) & 4294709247U) | ((unsigned int)((int)ee->ee_atn_tx_rx[(int)ee_mode] << 12) & 258048U),(unsigned short)38984);
    #line 1065 
    ;
    #line 1065 
    ;
    #line 1065 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38992) & 4294967040U) | ((unsigned int)ee->ee_adc_desired_size[(int)ee_mode] & 255U),(unsigned short)38992);
    #line 1069 
    ;
    #line 1069 
    ;
    #line 1069 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38992) & 4294902015U) | ((unsigned int)((int)ee->ee_pga_desired_size[(int)ee_mode] << 8) & 65535U),(unsigned short)38992);
    #line 1074 
    if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16384U) {
      #line 1075 
      ;
      #line 1075 
      ;
      #line 1075 
      ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)41484) & 4278452223U) | ((unsigned int)((int)ee->ee_margin_tx_rx[(int)ee_mode] << 18) & 16515072U),(unsigned short)41484);
    }
  }
  #line 1081 
  ath5k_hw_reg_write(ah,(unsigned int)(((((int)ee->ee_tx_end2xpa_disable[(int)ee_mode] << 24) | ((int)ee->ee_tx_end2xpa_disable[(int)ee_mode] << 16)) | ((int)ee->ee_tx_frm2xpa_enable[(int)ee_mode] << 8)) | (int)ee->ee_tx_frm2xpa_enable[(int)ee_mode]),(unsigned short)38964);
  #line 1088 
  ;
  #line 1088 
  ;
  #line 1088 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)38952) & 4294902015U) | ((unsigned int)((int)ee->ee_tx_end2xlna_enable[(int)ee_mode] << 8) & 65535U),(unsigned short)38952);
  #line 1093 
  ;
  #line 1093 
  ;
  #line 1093 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39012) & 4294447103U) | ((unsigned int)((int)ee->ee_thr_62[(int)ee_mode] << 12) & 520192U),(unsigned short)39012);
  #line 1100 
  if ((int)ath5k_hw_chan_has_spur_noise(ah,channel) != 0) {
    #line 1101 
    ;
    #line 1101 
    ;
    #line 1101 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39204) & 4294967041U) | ((unsigned int)(((int)ee->ee_false_detect[(int)ee_mode] + 2) << 1) & 255U),(unsigned short)39204);
  }
  else {
    #line 1106 
    ;
    #line 1106 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39204) & 4294967041U) | 4U,(unsigned short)39204);
  }
  #line 1112 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 16383U) {
    #line 1113 
    ;
    #line 1113 
    ;
    #line 1113 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39200) & 4294965279U) | ((unsigned int)((int)ee->ee_i_cal[(int)ee_mode] << 5) & 2016U),(unsigned short)39200);
    #line 1115 
    ;
    #line 1115 
    ;
    #line 1115 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)39200) & 4294967264U) | ((unsigned int)ee->ee_q_cal[(int)ee_mode] & 31U),(unsigned short)39200);
    #line 1117 
    ;
    #line 1117 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)39200) | 2048U,(unsigned short)39200);
  }
  #line 1121 
  if ((unsigned int)ah->ah_capabilities.cap_eeprom.ee_version > 20480U) 
    #line 1122 
    ath5k_hw_reg_write(ah,0U,(unsigned short)39392);
  #line 1123 
  return;
}

#line 1146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/reset.c"
int ath5k_hw_reset(struct ath5k_hw *ah, enum nl80211_iftype op_mode, struct ieee80211_channel *channel, bool fast, bool skip_pcu)
{
  #line 1149 
  u32 s_seq[10U];
  #line 1149 
  u32 s_led[3U];
  #line 1149 
  u32 tsf_up;
  #line 1149 
  u32 tsf_lo;
  #line 1150 
  u8 mode;
  #line 1151 
  int i;
  #line 1151 
  int ret;
  #line 1377 
  int tmp_11;
  #line 1377 
  int tmp_12;
  #line 1153 
  tsf_up = 0U;
  #line 1154 
  tsf_lo = 0U;
  #line 1155 
  mode = (unsigned char)0U;
  #line 1162 
  if (((int)fast != 0 && ah->ah_radio != (unsigned int)AR5K_RF2413) && ah->ah_radio != (unsigned int)AR5K_RF5413) 
    #line 1164 
    fast = (_Bool)0;
  #line 1169 
  if (ah->ah_version == (unsigned int)AR5K_AR5212) 
                                                   #line 1170 
                                                   ath5k_hw_set_sleep_clock(ah,(_Bool)0);
  #line 1172 
  mode = (unsigned char)channel->hw_value;
  #line 1173 
  switch ((int)mode) {
    #line 1174 
    case 0: 
            #line 1174 
    ;
    #line 1175 
    break;
    #line 1176 
    case 2: 
            #line 1176 
    ;
    #line 1177 
    if (ah->ah_version <= (unsigned int)AR5K_AR5211) {
      #line 1178 
      if (net_ratelimit() != 0) 
                                #line 1178 
                                _ath5k_printk(ah,(char *)"\001",(char *)"G mode not available on 5210/5211");
      #line 1180 
      return -22;
    }
    #line 1182 
    break;
    #line 1183 
    case 1: 
            #line 1183 
    ;
    #line 1184 
    if (ah->ah_version == (unsigned int)AR5K_AR5210) {
      #line 1185 
      if (net_ratelimit() != 0) 
                                #line 1185 
                                _ath5k_printk(ah,(char *)"\001",(char *)"B mode not available on 5210");
      #line 1187 
      return -22;
    }
    #line 1189 
    break;
    #line 1190 
    default: 
             #line 1190 
    ;
    #line 1191 
    if (net_ratelimit() != 0) 
                              #line 1191 
                              _ath5k_printk(ah,(char *)"\001",(char *)"invalid channel: %d\n",channel->center_freq);
    #line 1193 
    return -22;
  }
  #line 1200 
  if ((int)fast != 0) {
    #line 1201 
    ret = ath5k_hw_phy_init(ah,channel,(unsigned char)((int)mode),(_Bool)1);
    #line 1202 
    if (ret != 0) {
      #line 1203 
      if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
        #line 1203 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 1203 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_reset",1203);
      }
      #line 1207 
      ret = 0;
    }
    else {
      #line 1209 
      if ((long)((ah->debug.level & 1U) != 0U) != 0L) {
        #line 1209 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 1209 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_reset",1209);
      }
      #line 1211 
      return 0;
    }
  }
  #line 1218 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 1224 
    if (ah->ah_mac_srev <= 63U) {
      #line 1226 
      i = 0;
      #line 1226 
      while (i <= 9) {
        #line 1227 
        s_seq[i] = ath5k_hw_reg_read(ah,(unsigned short)((int)((unsigned int)((int)((unsigned short)i) << 2U) + 4416U)));
        #line 1226 
        i ++;
      }
    }
    else 
         #line 1231 
         s_seq[0] = ath5k_hw_reg_read(ah,(unsigned short)4416);
    #line 1248 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) {
      #line 1249 
      int tmp_4;
      #line 1250 
      int tmp_5;
      #line 1249 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 1249 
                                                       tmp_4 = 32880; else 
                                                                    #line 1249 
                                                                    tmp_4 = 32848;
      #line 1249 
      ;
      #line 1249 
      tsf_up = ath5k_hw_reg_read(ah,(unsigned short)tmp_4);
      #line 1250 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 1250 
                                                       tmp_5 = 32876; else 
                                                                    #line 1250 
                                                                    tmp_5 = 32844;
      #line 1250 
      ;
      #line 1250 
      tsf_lo = ath5k_hw_reg_read(ah,(unsigned short)tmp_5);
    }
  }
  #line 1256 
  s_led[0] = ath5k_hw_reg_read(ah,(unsigned short)16400) & 16646240U;
  #line 1258 
  s_led[1] = ath5k_hw_reg_read(ah,(unsigned short)16404);
  #line 1259 
  s_led[2] = ath5k_hw_reg_read(ah,(unsigned short)16408);
  #line 1267 
  if (ah->ah_version == (unsigned int)AR5K_AR5212 && ah->ah_radio <= (unsigned int)AR5K_RF5112) 
    #line 1269 
    if (! fast && ah->ah_rf_banks != (u32 *)0U) 
                                                #line 1270 
                                                ath5k_hw_gainf_calibrate(ah);
  #line 1274 
  ret = ath5k_hw_nic_wakeup(ah,channel);
  #line 1275 
  if (ret != 0) 
                #line 1276 
                return ret;
  #line 1279 
  if (ah->ah_mac_srev > 63U) 
                             #line 1280 
                             ath5k_hw_reg_write(ah,7U,(unsigned short)38912); else 
                                                                    #line 1282 
                                                                    ath5k_hw_reg_write(ah,71U,(unsigned short)38912);
  #line 1286 
  ret = ath5k_hw_write_initvals(ah,(unsigned char)((int)mode),(_Bool)((bool)((int)skip_pcu) != 0));
  #line 1287 
  if (ret != 0) 
                #line 1288 
                return ret;
  #line 1291 
  ath5k_hw_init_core_clock(ah);
  #line 1298 
  ath5k_hw_tweak_initval_settings(ah,channel);
  #line 1301 
  ath5k_hw_commit_eeprom_settings(ah,channel);
  #line 1309 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 1310 
    if (ah->ah_mac_srev <= 63U) {
      #line 1311 
      i = 0;
      #line 1311 
      while (i <= 9) {
        #line 1312 
        ath5k_hw_reg_write(ah,s_seq[i],(unsigned short)((int)((unsigned int)((int)((unsigned short)i) << 2U) + 4416U)));
        #line 1311 
        i ++;
      }
    }
    else 
         #line 1315 
         ath5k_hw_reg_write(ah,s_seq[0],(unsigned short)4416);
    #line 1319 
    if (ah->ah_version == (unsigned int)AR5K_AR5211) {
      #line 1320 
      int tmp_7;
      #line 1321 
      int tmp_8;
      #line 1320 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 1320 
                                                       tmp_7 = 32880; else 
                                                                    #line 1320 
                                                                    tmp_7 = 32848;
      #line 1320 
      ;
      #line 1320 
      ;
      #line 1320 
      ath5k_hw_reg_write(ah,tsf_up,(unsigned short)tmp_7);
      #line 1321 
      if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                       #line 1321 
                                                       tmp_8 = 32876; else 
                                                                    #line 1321 
                                                                    tmp_8 = 32844;
      #line 1321 
      ;
      #line 1321 
      ;
      #line 1321 
      ath5k_hw_reg_write(ah,tsf_lo,(unsigned short)tmp_8);
    }
  }
  #line 1326 
  ;
  #line 1326 
  ;
  #line 1326 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | s_led[0],(unsigned short)16400);
  #line 1329 
  ath5k_hw_reg_write(ah,s_led[1],(unsigned short)16404);
  #line 1330 
  ath5k_hw_reg_write(ah,s_led[2],(unsigned short)16408);
  #line 1335 
  ath5k_hw_pcu_init(ah,op_mode);
  #line 1340 
  ret = ath5k_hw_phy_init(ah,channel,(unsigned char)((int)mode),(_Bool)0);
  #line 1341 
  if (ret != 0) {
    #line 1342 
    if (net_ratelimit() != 0) 
                              #line 1342 
                              _ath5k_printk(ah,(char *)"\001",(char *)"failed to initialize PHY (%i) !\n",ret);
    #line 1344 
    return ret;
  }
  #line 1350 
  ret = ath5k_hw_init_queues(ah);
  #line 1351 
  if (ret != 0) 
                #line 1352 
                return ret;
  #line 1358 
  ath5k_hw_dma_init(ah);
  #line 1370 
  if (((int)ah->ah_use_32khz_clock != 0 && ah->ah_version == (unsigned int)AR5K_AR5212) && op_mode != (unsigned int)NL80211_IFTYPE_AP) 
    #line 1372 
    ath5k_hw_set_sleep_clock(ah,(_Bool)1);
  #line 1377 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 1377 
                                                   tmp_11 = 32804; else 
                                                                    #line 1377 
                                                                    tmp_11 = 32800;
  #line 1377 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 1377 
                                                   tmp_12 = 32804; else 
                                                                    #line 1377 
                                                                    tmp_12 = 32800;
  #line 1377 
  ;
  #line 1377 
  ;
  #line 1377 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)tmp_12) & 4286578687U,(unsigned short)tmp_11);
  #line 1378 
  ath5k_hw_reset_tsf(ah);
  #line 1379 
  return 0;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/gpio.c"
void ath5k_hw_set_ledstate(struct ath5k_hw *ah, unsigned int state)
{
  #line 55 
  u32 led;
  #line 57 
  u32 led_5210;
  #line 60 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 61 
    ;
    #line 61 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) & 4294049695U,(unsigned short)16400);
  }
  else {
    #line 64 
    ;
    #line 64 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) & 4294967199U,(unsigned short)16400);
  }
  #line 69 
  switch (state) {
    #line 70 
    case (unsigned int)1: 
                          #line 70 
    ;
    #line 71 
    case (unsigned int)2: 
                          #line 71 
    ;
    #line 72 
    led = 32U;
    #line 73 
    led_5210 = 4128U;
    #line 74 
    break;
    #line 76 
    case (unsigned int)0: 
                          #line 76 
    ;
    #line 77 
    led = 0U;
    #line 78 
    led_5210 = 32U;
    #line 79 
    break;
    #line 81 
    case (unsigned int)3: 
                          #line 81 
    ;
    #line 82 
    case (unsigned int)4: 
                          #line 82 
    ;
    #line 83 
    led = 64U;
    #line 84 
    led_5210 = 64U;
    #line 85 
    break;
    #line 87 
    default: 
             #line 87 
    ;
    #line 88 
    led = 131072U;
    #line 89 
    led_5210 = 32U;
    #line 90 
    break;
  }
  #line 94 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 95 
    ;
    #line 95 
    ;
    #line 95 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | led,(unsigned short)16400);
  }
  else {
    #line 97 
    ;
    #line 97 
    ;
    #line 97 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16400) | led_5210,(unsigned short)16400);
  }
  #line 98 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/gpio.c"
int ath5k_hw_set_gpio_input(struct ath5k_hw *ah, u32 gpio)
{
  #line 108 
  if (gpio > 5U) 
                 #line 109 
                 return -22;
  #line 111 
  ;
  #line 111 
  ;
  #line 111 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)16404) & (unsigned int)(~ (3 << gpio * 2U)),(unsigned short)16404);
  #line 115 
  return 0;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/gpio.c"
int ath5k_hw_set_gpio_output(struct ath5k_hw *ah, u32 gpio)
{
  #line 126 
  if (gpio > 5U) 
                 #line 127 
                 return -22;
  #line 129 
  ;
  #line 129 
  ;
  #line 129 
  ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)16404) & (unsigned int)(~ (3 << gpio * 2U))) | (unsigned int)(3 << gpio * 2U),(unsigned short)16404);
  #line 133 
  return 0;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/gpio.c"
u32 ath5k_hw_get_gpio(struct ath5k_hw *ah, u32 gpio)
{
  #line 144 
  if (gpio > 5U) 
                 #line 145 
                 return 4294967295U;
  #line 148 
  ;
  #line 148 
  return ((ath5k_hw_reg_read(ah,(unsigned short)16412) & 47U) >> gpio) & 1U;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/gpio.c"
int ath5k_hw_set_gpio(struct ath5k_hw *ah, u32 gpio, u32 val)
{
  #line 161 
  u32 data;
  #line 163 
  if (gpio > 5U) 
                 #line 164 
                 return -22;
  #line 167 
  data = ath5k_hw_reg_read(ah,(unsigned short)16408);
  #line 169 
  data = (unsigned int)(~ (1 << gpio)) & data;
  #line 170 
  data = ((val & 1U) << gpio) | data;
  #line 172 
  ath5k_hw_reg_write(ah,data,(unsigned short)16408);
  #line 174 
  return 0;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/gpio.c"
void ath5k_hw_set_gpio_intr(struct ath5k_hw *ah, unsigned int gpio, u32 interrupt_level)
{
  #line 192 
  u32 data;
  #line 205 
  unsigned int tmp_0;
  #line 194 
  if (gpio > 5U) 
                 #line 195 
                 return;
  #line 200 
  data = ((ath5k_hw_reg_read(ah,(unsigned short)16404) & ~ (((gpio << 12) | (unsigned int)(3 << gpio * 2U)) | 98304U)) | (gpio << 12)) | 32768U;
  #line 205 
  if (interrupt_level == 0U) 
                             #line 205 
                             tmp_0 = data | 65536U; else 
                                                         #line 205 
                                                         tmp_0 = data;
  #line 205 
  ;
  #line 205 
  ath5k_hw_reg_write(ah,tmp_0,(unsigned short)16404);
  #line 208 
  ah->ah_imr = (enum ath5k_int)((unsigned int)ah->ah_imr | 16777216U);
  #line 211 
  ;
  #line 211 
  ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)160) | 16777216U,(unsigned short)160);
  #line 212 
  return;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
void ath5k_hw_start_rx_dma(struct ath5k_hw *ah)
{
  #line 50 
  ath5k_hw_reg_write(ah,4U,(unsigned short)8);
  #line 51 
  ath5k_hw_reg_read(ah,(unsigned short)8);
  #line 52 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
static int ath5k_hw_stop_rx_dma(struct ath5k_hw *ah)
{
  #line 61 
  unsigned int i;
  #line 77 
  int tmp_1;
  #line 63 
  ath5k_hw_reg_write(ah,32U,(unsigned short)8);
  #line 68 
  i = 1000U;
  #line 68 
  while (1) {
    #line 68 
    if (i != 0U) {
      #line 68 
      if (! ((ath5k_hw_reg_read(ah,(unsigned short)8) & 4U) != 0U)) 
                                                                    #line 68 
                                                                    break;
    }
    else 
         #line 68 
         break;
    #line 71 
    __const_udelay(429500UL);
    #line 69 
    i --;
  }
  #line 73 
  if (i == 0U) 
    #line 74 
    if ((long)((ah->debug.level & 2048U) != 0U) != 0L) {
      #line 74 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 74 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_stop_rx_dma",74);
    }
  #line 77 
  if (i != 0U) 
               #line 77 
               tmp_1 = 0; else 
                               #line 77 
                               tmp_1 = -16;
  #line 77 
  return tmp_1;
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
u32 ath5k_hw_get_rxdp(struct ath5k_hw *ah)
{
  #line 87 
  return ath5k_hw_reg_read(ah,(unsigned short)12);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_set_rxdp(struct ath5k_hw *ah, u32 phys_addr)
{
  #line 100 
  if ((ath5k_hw_reg_read(ah,(unsigned short)8) & 4U) != 0U) {
    #line 101 
    if ((long)((ah->debug.level & 2048U) != 0U) != 0L) {
      #line 101 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 101 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_set_rxdp",101);
    }
    #line 103 
    return -5;
  }
  #line 106 
  ath5k_hw_reg_write(ah,phys_addr,(unsigned short)12);
  #line 107 
  return 0;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_start_tx_dma(struct ath5k_hw *ah, unsigned int queue)
{
  #line 132 
  u32 tx_queue;
  #line 134 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
    #line 134 
    return 0;
  #line 137 
  if (ah->ah_txq[queue].tqi_type == (unsigned int)AR5K_TX_QUEUE_INACTIVE) 
    #line 138 
    return -22;
  #line 140 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 141 
    tx_queue = ath5k_hw_reg_read(ah,(unsigned short)8);
    #line 146 
    switch ((unsigned int)ah->ah_txq[queue].tqi_type) {
      #line 147 
      case (unsigned int)1: 
                            #line 147 
      ;
      #line 148 
      tx_queue |= 1U;
      #line 149 
      break;
      #line 150 
      case (unsigned int)2: 
                            #line 150 
      ;
      #line 151 
      tx_queue |= 2U;
      #line 152 
      ath5k_hw_reg_write(ah,10U,(unsigned short)44);
      #line 154 
      break;
      #line 155 
      case (unsigned int)3: 
                            #line 155 
      ;
      #line 156 
      tx_queue |= 2U;
      #line 157 
      ath5k_hw_reg_write(ah,14U,(unsigned short)44);
      #line 159 
      break;
      #line 160 
      default: 
               #line 160 
      ;
      #line 161 
      return -22;
    }
    #line 164 
    ath5k_hw_reg_write(ah,tx_queue,(unsigned short)8);
    #line 165 
    ath5k_hw_reg_read(ah,(unsigned short)8);
  }
  else {
    #line 168 
    ;
    #line 168 
    if ((ath5k_hw_reg_read(ah,(unsigned short)2176) & (unsigned int)(1 << queue)) != 0U) 
      #line 169 
      return -5;
    #line 172 
    ath5k_hw_reg_write(ah,(unsigned int)(1 << queue),(unsigned short)2112);
  }
  #line 175 
  return 0;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
static int ath5k_hw_stop_tx_dma(struct ath5k_hw *ah, unsigned int queue)
{
  #line 191 
  u32 tx_queue;
  #line 191 
  u32 pending;
  #line 190 
  unsigned int i = 40U;
  #line 193 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
    #line 193 
    return 0;
  #line 196 
  if (ah->ah_txq[queue].tqi_type == (unsigned int)AR5K_TX_QUEUE_INACTIVE) 
    #line 197 
    return -22;
  #line 199 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 200 
    tx_queue = ath5k_hw_reg_read(ah,(unsigned short)8);
    #line 205 
    switch ((unsigned int)ah->ah_txq[queue].tqi_type) {
      #line 206 
      case (unsigned int)1: 
                            #line 206 
      ;
      #line 207 
      tx_queue |= 8U;
      #line 208 
      break;
      #line 209 
      case (unsigned int)2: 
                            #line 209 
      ;
      #line 210 
      case (unsigned int)3: 
                            #line 210 
      ;
      #line 212 
      tx_queue = tx_queue;
      #line 213 
      ath5k_hw_reg_write(ah,0U,(unsigned short)44);
      #line 214 
      break;
      #line 215 
      default: 
               #line 215 
      ;
      #line 216 
      return -22;
    }
    #line 220 
    ath5k_hw_reg_write(ah,tx_queue,(unsigned short)8);
    #line 221 
    ath5k_hw_reg_read(ah,(unsigned short)8);
  }
  else {
    #line 228 
    ;
    #line 228 
    ;
    #line 228 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                        (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) | 2048U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    #line 234 
    ath5k_hw_reg_write(ah,(unsigned int)(1 << queue),(unsigned short)2176);
    #line 237 
    i = 1000U;
    #line 237 
    while (1) {
      #line 237 
      if (i != 0U) {
        #line 237 
        ;
        #line 237 
        if (! ((ath5k_hw_reg_read(ah,(unsigned short)2112) & (unsigned int)(1 << queue)) != 0U)) 
          #line 237 
          break;
      }
      else 
           #line 237 
           break;
      #line 240 
      __const_udelay(429500UL);
      #line 238 
      i --;
    }
    #line 242 
    ;
    #line 242 
    if ((ath5k_hw_reg_read(ah,(unsigned short)2112) & (unsigned int)(1 << queue)) != 0U) 
      #line 243 
      if ((long)((ah->debug.level & 2048U) != 0U) != 0L) {
        #line 243 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 243 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_stop_tx_dma",243,queue);
      }
    #line 247 
    i = 1000U;
    #line 248 
    while (1) {
      {
        #line 249 
        pending = ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2560U))) & 3U;
        #line 252 
        __const_udelay(429500UL);
      }
      #line 253 
      i --;
      #line 253 
      if (i != 0U) {
        #line 253 
        if (! (pending != 0U)) 
                               #line 248 
                               break;
      }
      else 
           #line 248 
           break;
    }
    #line 257 
    if ((unsigned int)ah->ah_mac_version > 6U && pending != 0U) {
      #line 260 
      ath5k_hw_reg_write(ah,655460U,(unsigned short)33024);
      #line 266 
      ;
      #line 266 
      ath5k_hw_reg_write(ah,((ath5k_hw_reg_read(ah,(unsigned short)32844) >> 10) & 65535U) | 65536U,(unsigned short)33020);
      #line 274 
      ;
      #line 274 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32840) | 4194304U,(unsigned short)32840);
      #line 278 
      __const_udelay(1718000UL);
      #line 279 
      ;
      #line 279 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)33020) & 4294901759U,(unsigned short)33020);
      #line 283 
      i = 100U;
      #line 284 
      while (1) {
        {
          #line 285 
          pending = ath5k_hw_reg_read(ah,
                          (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2560U))) & 3U;
          #line 288 
          __const_udelay(429500UL);
        }
        #line 289 
        i --;
        #line 289 
        if (i != 0U) {
          #line 289 
          if (! (pending != 0U)) 
                                 #line 284 
                                 break;
        }
        else 
             #line 284 
             break;
      }
      #line 291 
      ;
      #line 291 
      ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,(unsigned short)32840) & 4290772991U,(unsigned short)32840);
      #line 294 
      if (pending != 0U) 
        #line 295 
        if ((long)((ah->debug.level & 2048U) != 0U) != 0L) {
          #line 295 
          if ((long)(net_ratelimit() != 0) != 0L) 
                                                  #line 295 
                                                  _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_stop_tx_dma",295,queue);
        }
    }
    #line 303 
    ;
    #line 303 
    ;
    #line 303 
    ath5k_hw_reg_write(ah,ath5k_hw_reg_read(ah,
                           (unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U))) & 4294965247U,(unsigned short)((int)((unsigned int)((int)((unsigned short)queue) << 2U) + 2496U)));
    #line 307 
    ath5k_hw_reg_write(ah,0U,(unsigned short)2176);
    #line 308 
    if (pending != 0U) {
      #line 309 
      if ((long)((ah->debug.level & 2048U) != 0U) != 0L) {
        #line 309 
        if ((long)(net_ratelimit() != 0) != 0L) 
                                                #line 309 
                                                _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_stop_tx_dma",309,queue,pending);
      }
      #line 312 
      return -16;
    }
  }
  #line 317 
  return 0;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_stop_beacon_queue(struct ath5k_hw *ah, unsigned int queue)
{
  #line 330 
  int ret;
  #line 331 
  ret = ath5k_hw_stop_tx_dma(ah,queue);
  #line 332 
  if (ret != 0) {
    #line 333 
    if ((long)((ah->debug.level & 2048U) != 0U) != 0L) {
      #line 333 
      if ((long)(net_ratelimit() != 0) != 0L) 
                                              #line 333 
                                              _ath5k_printk(ah,(char *)"\001",(char *)"(%s:%d): ",(char *)"ath5k_hw_stop_beacon_queue",333);
    }
    #line 335 
    return -5;
  }
  #line 337 
  return 0;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
u32 ath5k_hw_get_txdp(struct ath5k_hw *ah, unsigned int queue)
{
  #line 355 
  u16 tx_reg;
  #line 357 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
    #line 357 
    return 0U;
  #line 363 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
    #line 364 
    switch ((unsigned int)ah->ah_txq[queue].tqi_type) {
      #line 365 
      case (unsigned int)1: 
                            #line 365 
      ;
      #line 366 
      tx_reg = (unsigned short)0U;
      #line 367 
      break;
      #line 368 
      case (unsigned int)2: 
                            #line 368 
      ;
      #line 369 
      case (unsigned int)3: 
                            #line 369 
      ;
      #line 370 
      tx_reg = (unsigned short)4U;
      #line 371 
      break;
      #line 372 
      default: 
               #line 372 
      ;
      #line 373 
      return 4294967295U;
    }
  else 
       #line 376 
       tx_reg = (unsigned short)((unsigned int)((int)((unsigned short)queue) << 2U) + 2048U);
  #line 379 
  return ath5k_hw_reg_read(ah,(unsigned short)((int)tx_reg));
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_set_txdp(struct ath5k_hw *ah, unsigned int queue, u32 phys_addr)
{
  #line 398 
  u16 tx_reg;
  #line 400 
  if ((unsigned int)ah->ah_capabilities.cap_queues.q_tx_num <= queue) 
    #line 400 
    return 0;
  #line 406 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
    #line 407 
    switch ((unsigned int)ah->ah_txq[queue].tqi_type) {
      #line 408 
      case (unsigned int)1: 
                            #line 408 
      ;
      #line 409 
      tx_reg = (unsigned short)0U;
      #line 410 
      break;
      #line 411 
      case (unsigned int)2: 
                            #line 411 
      ;
      #line 412 
      case (unsigned int)3: 
                            #line 412 
      ;
      #line 413 
      tx_reg = (unsigned short)4U;
      #line 414 
      break;
      #line 415 
      default: 
               #line 415 
      ;
      #line 416 
      return -22;
    }
  else {
    #line 424 
    ;
    #line 424 
    if ((ath5k_hw_reg_read(ah,(unsigned short)2112) & (unsigned int)(1 << queue)) != 0U) 
      #line 425 
      return -5;
    #line 427 
    tx_reg = (unsigned short)((unsigned int)((int)((unsigned short)queue) << 2U) + 2048U);
  }
  #line 431 
  ath5k_hw_reg_write(ah,phys_addr,(unsigned short)((int)tx_reg));
  #line 433 
  return 0;
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_update_tx_triglevel(struct ath5k_hw *ah, bool increase)
{
  #line 455 
  u32 trigger_level;
  #line 455 
  u32 imr;
  #line 456 
  int ret = -5;
  #line 461 
  imr = (unsigned int)ath5k_hw_set_imr(ah,
                       (enum ath5k_int)((unsigned int)ah->ah_imr & 2147483647U));
  #line 463 
  trigger_level = (ath5k_hw_reg_read(ah,(unsigned short)48) >> 4) & 63U;
  #line 466 
  if (! increase) {
    #line 467 
    trigger_level --;
    #line 467 
    if (trigger_level == 0U) 
                             #line 468 
                             goto done;
  }
  else 
       #line 470 
       trigger_level = (37U - trigger_level) / 2U + trigger_level;
  #line 476 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) 
                                                   #line 477 
                                                   ath5k_hw_reg_write(ah,trigger_level,(unsigned short)32868);
  else {
    #line 479 
    ;
    #line 479 
    ;
    #line 479 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)48) & 4294966287U) | ((trigger_level << 4) & 1008U),(unsigned short)48);
  }
  #line 482 
  ret = 0;
  #line 484 
  done: 
        #line 484 
  ;
  #line 488 
  ath5k_hw_set_imr(ah,(enum ath5k_int)imr);
  #line 490 
  return ret;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
bool ath5k_hw_is_intr_pending(struct ath5k_hw *ah)
{
  #line 508 
  return (_Bool)(ath5k_hw_reg_read(ah,(unsigned short)16392) == 1U);
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_get_isr(struct ath5k_hw *ah, enum ath5k_int *interrupt_mask)
{
  #line 529 
  u32 data = 0U;
  #line 537 
  if (ah->ah_version == (unsigned int)AR5K_AR5210) {
    #line 538 
    u32 isr = 0U;
    #line 539 
    isr = ath5k_hw_reg_read(ah,(unsigned short)28);
    #line 540 
    if ((long)(isr == 4294967295U) != 0L) {
      #line 541 
      *interrupt_mask = (enum ath5k_int)isr;
      #line 542 
      return -19;
    }
    #line 549 
    *interrupt_mask = (enum ath5k_int)(((unsigned int)ah->ah_imr & isr) & 2164785151U);
    #line 552 
    if ((long)((isr & 7340032U) != 0U) != 0L) 
                                              #line 554 
                                              *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 524288U);
    #line 564 
    data = isr;
  }
  else {
    #line 566 
    u32 pisr = 0U;
    #line 567 
    u32 pisr_clear = 0U;
    #line 568 
    u32 sisr0 = 0U;
    #line 569 
    u32 sisr1 = 0U;
    #line 570 
    u32 sisr2 = 0U;
    #line 571 
    u32 sisr3 = 0U;
    #line 572 
    u32 sisr4 = 0U;
    #line 575 
    pisr = ath5k_hw_reg_read(ah,(unsigned short)128);
    #line 576 
    if ((long)(pisr == 4294967295U) != 0L) {
      #line 577 
      *interrupt_mask = (enum ath5k_int)pisr;
      #line 578 
      return -19;
    }
    #line 581 
    sisr0 = ath5k_hw_reg_read(ah,(unsigned short)132);
    #line 582 
    sisr1 = ath5k_hw_reg_read(ah,(unsigned short)136);
    #line 583 
    sisr2 = ath5k_hw_reg_read(ah,(unsigned short)140);
    #line 584 
    sisr3 = ath5k_hw_reg_read(ah,(unsigned short)144);
    #line 585 
    sisr4 = ath5k_hw_reg_read(ah,(unsigned short)148);
    #line 627 
    pisr_clear = pisr & 4051173375U;
    #line 638 
    ath5k_hw_reg_write(ah,sisr0,(unsigned short)132);
    #line 639 
    ath5k_hw_reg_write(ah,sisr1,(unsigned short)136);
    #line 640 
    ath5k_hw_reg_write(ah,sisr2,(unsigned short)140);
    #line 641 
    ath5k_hw_reg_write(ah,sisr3,(unsigned short)144);
    #line 642 
    ath5k_hw_reg_write(ah,sisr4,(unsigned short)148);
    #line 643 
    ath5k_hw_reg_write(ah,pisr_clear,(unsigned short)128);
    #line 645 
    ath5k_hw_reg_read(ah,(unsigned short)128);
    #line 651 
    *interrupt_mask = (enum ath5k_int)(((unsigned int)ah->ah_imr & pisr) & 2164785151U);
    #line 657 
    if ((pisr & 64U) != 0U) 
                            #line 658 
                            ah->ah_txq_isr_txok_all |= sisr0 & 1023U;
    #line 661 
    if ((pisr & 128U) != 0U) 
                             #line 662 
                             ah->ah_txq_isr_txok_all |= (sisr0 >> 16) & 1023U;
    #line 665 
    if ((pisr & 256U) != 0U) 
                             #line 666 
                             ah->ah_txq_isr_txok_all |= sisr1 & 1023U;
    #line 669 
    if ((pisr & 1024U) != 0U) 
                              #line 670 
                              ah->ah_txq_isr_txok_all |= (sisr1 >> 16) & 1023U;
    #line 676 
    if ((pisr & 2048U) != 0U) 
                              #line 677 
                              ah->ah_txq_isr_txurn |= sisr2 & 1023U;
    #line 683 
    if ((pisr & 8388608U) != 0U) 
                                 #line 684 
                                 *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 2097152U);
    #line 687 
    if ((pisr & 8388608U) != 0U) {
      #line 688 
      if ((sisr2 & 16777216U) != 0U) 
                                     #line 689 
                                     *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 2097152U);
      #line 690 
      if ((sisr2 & 536870912U) != 0U) 
                                      #line 691 
                                      *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 4194304U);
      #line 692 
      if ((sisr2 & 67108864U) != 0U) 
                                     #line 693 
                                     *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 8388608U);
      #line 694 
      if ((sisr2 & 134217728U) != 0U) 
                                      #line 695 
                                      *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 33554432U);
      #line 696 
      if ((sisr2 & 268435456U) != 0U) 
                                      #line 697 
                                      *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 67108864U);
    }
    #line 704 
    if ((long)((pisr & 524288U) != 0U) != 0L) 
                                              #line 705 
                                              *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 524288U);
    #line 708 
    if ((long)((pisr & 1048576U) != 0U) != 0L) 
                                               #line 709 
                                               *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 1048576U);
    #line 712 
    if ((long)((pisr & 33554432U) != 0U) != 0L) {
      #line 713 
      *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 134217728U);
      #line 714 
      ah->ah_txq_isr_qcborn |= sisr3 & 1023U;
    }
    #line 719 
    if ((long)((pisr & 67108864U) != 0U) != 0L) {
      #line 720 
      *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 268435456U);
      #line 721 
      ah->ah_txq_isr_qcburn |= (sisr3 >> 16) & 1023U;
    }
    #line 726 
    if ((long)((pisr & 134217728U) != 0U) != 0L) {
      #line 727 
      *interrupt_mask = (enum ath5k_int)((unsigned int)*interrupt_mask | 536870912U);
      #line 728 
      ah->ah_txq_isr_qtrig |= sisr4 & 1023U;
    }
    #line 732 
    data = pisr;
  }
  #line 739 
  if ((long)(*interrupt_mask == (unsigned int)0) != 0L) {
    #line 739 
    if ((long)(net_ratelimit() != 0) != 0L) 
                                            #line 740 
                                            printk((char *)"\001",(char *)"ath5k_hw_get_isr",data,(unsigned int)ah->ah_imr);
  }
  #line 742 
  return 0;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
enum ath5k_int ath5k_hw_set_imr(struct ath5k_hw *ah, enum ath5k_int new_mask)
{
  #line 757 
  enum ath5k_int old_mask;
  #line 757 
  enum ath5k_int int_mask;
  #line 759 
  old_mask = ah->ah_imr;
  #line 766 
  if (((unsigned int)old_mask & 2147483648U) != 0U) {
    #line 767 
    ath5k_hw_reg_write(ah,0U,(unsigned short)36);
    #line 768 
    ath5k_hw_reg_read(ah,(unsigned short)36);
  }
  #line 775 
  int_mask = (enum ath5k_int)((unsigned int)new_mask & 2164785151U);
  #line 777 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 779 
    u32 simr2 = ath5k_hw_reg_read(ah,(unsigned short)172) & 1023U;
    #line 783 
    if (((unsigned int)new_mask & 524288U) != 0U) {
      #line 784 
      int_mask = (enum ath5k_int)((unsigned int)int_mask | 524288U);
      #line 785 
      simr2 |= 458752U;
    }
    #line 790 
    if (((unsigned int)new_mask & 2097152U) != 0U) 
                                                   #line 791 
                                                   int_mask = (enum ath5k_int)((unsigned int)int_mask | 8388608U);
    #line 793 
    if (((unsigned int)new_mask & 2097152U) != 0U) 
                                                   #line 794 
                                                   simr2 |= 16777216U;
    #line 795 
    if (((unsigned int)new_mask & 4194304U) != 0U) 
                                                   #line 796 
                                                   simr2 |= 536870912U;
    #line 797 
    if (((unsigned int)new_mask & 8388608U) != 0U) 
                                                   #line 798 
                                                   simr2 |= 67108864U;
    #line 799 
    if (((unsigned int)new_mask & 33554432U) != 0U) 
                                                    #line 800 
                                                    simr2 |= 134217728U;
    #line 801 
    if (((unsigned int)new_mask & 67108864U) != 0U) 
                                                    #line 802 
                                                    simr2 |= 268435456U;
    #line 805 
    if (((unsigned int)new_mask & 1048576U) != 0U) 
                                                   #line 806 
                                                   int_mask = (enum ath5k_int)((unsigned int)int_mask | 1048576U);
    #line 810 
    ath5k_hw_reg_write(ah,(unsigned int)int_mask,(unsigned short)160);
    #line 811 
    ath5k_hw_reg_write(ah,simr2,(unsigned short)172);
  }
  else {
    #line 815 
    if (((unsigned int)new_mask & 524288U) != 0U) 
                                                  #line 816 
                                                  int_mask = (enum ath5k_int)((unsigned int)int_mask | 7864320U);
    #line 820 
    ath5k_hw_reg_write(ah,(unsigned int)int_mask,(unsigned short)32);
  }
  #line 825 
  if (((unsigned int)new_mask & 8U) == 0U) 
                                           #line 826 
                                           ath5k_hw_reg_write(ah,0U,(unsigned short)72);
  #line 829 
  ah->ah_imr = new_mask;
  #line 832 
  if (((unsigned int)new_mask & 2147483648U) != 0U) {
    #line 833 
    ath5k_hw_reg_write(ah,1U,(unsigned short)36);
    #line 834 
    ath5k_hw_reg_read(ah,(unsigned short)36);
  }
  #line 837 
  return old_mask;
}

#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
void ath5k_hw_dma_init(struct ath5k_hw *ah)
{
  #line 871 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 872 
    ;
    #line 872 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)48) & 4294967288U) | 5U,(unsigned short)48);
    #line 874 
    ;
    #line 874 
    ath5k_hw_reg_write(ah,(ath5k_hw_reg_read(ah,(unsigned short)52) & 4294967288U) | 5U,(unsigned short)52);
  }
  #line 879 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) 
                                                   #line 880 
                                                   ath5k_hw_set_imr(ah,ah->ah_imr);
  #line 881 
  return;
}

#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/ath/ath5k/dma.c"
int ath5k_hw_dma_stop(struct ath5k_hw *ah)
{
  #line 898 
  int i;
  #line 898 
  int qmax;
  #line 898 
  int err;
  #line 899 
  err = 0;
  #line 902 
  ath5k_hw_set_imr(ah,(enum ath5k_int)0);
  #line 905 
  err = ath5k_hw_stop_rx_dma(ah);
  #line 906 
  if (err != 0) 
                #line 907 
                return err;
  #line 911 
  if (ah->ah_version != (unsigned int)AR5K_AR5210) {
    #line 912 
    ath5k_hw_reg_write(ah,4294967295U,(unsigned short)128);
    #line 913 
    qmax = 10;
  }
  else {
    #line 916 
    ath5k_hw_reg_read(ah,(unsigned short)28);
    #line 917 
    qmax = 2;
  }
  #line 920 
  i = 0;
  #line 920 
  while (i < qmax) {
    #line 921 
    err = ath5k_hw_stop_tx_dma(ah,(unsigned int)i);
    #line 923 
    if (err != 0 && err != -22) 
                                #line 924 
                                return err;
    #line 920 
    i ++;
  }
  #line 927 
  return 0;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR_0(long error)
{
  #line 26 
  return (void *)error;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 135 
#line 309 
void emg_dispatch_deregister_7(struct ieee80211_hw *arg0);
#line 136 
#line 318 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 137 
#line 289 
void emg_dispatch_irq_deregister_5(int arg0);
#line 138 
#line 327 
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 139 
#line 341 
void emg_dispatch_register_10(struct seq_file *arg0, struct seq_operations *arg1);
#line 140 
#line 189 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 141 
#line 200 
void emg_dispatch_register_4(struct file_operations *arg0);
#line 142 
#line 298 
void emg_dispatch_register_6(struct ieee80211_hw *arg0);
#line 143 
#line 4243 
void *emg_entry_point_insmod(void *arg0);
#line 144 
#line 353 
void *emg_file_operations_character_driver_scenario_fops_ani(void *arg0);
#line 145 
#line 530 
void *emg_file_operations_character_driver_scenario_fops_antenna(void *arg0);
#line 146 
#line 707 
void *emg_file_operations_character_driver_scenario_fops_beacon(void *arg0);
#line 147 
#line 884 
void *emg_file_operations_character_driver_scenario_fops_debug(void *arg0);
#line 148 
#line 1061 
void *emg_file_operations_character_driver_scenario_fops_eeprom(void *arg0);
#line 149 
#line 1224 
void *emg_file_operations_character_driver_scenario_fops_frameerrors(void *arg0);
#line 150 
#line 1401 
void *emg_file_operations_character_driver_scenario_fops_misc(void *arg0);
#line 151 
#line 1566 
void *emg_file_operations_character_driver_scenario_fops_queue(void *arg0);
#line 152 
#line 1743 
void *emg_file_operations_character_driver_scenario_fops_registers(void *arg0);
#line 153 
#line 1920 
void *emg_file_operations_character_driver_scenario_fops_reset(void *arg0);
#line 157 
#line 2073 
void *emg_ieee80211_ieee80211_scenario_ath5k_hw_ops(void *arg0);
#line 158 
#line 2560 
void *emg_interrupt_interrupt_scenario_ath5k_intr(void *arg0);
#line 159 
#line 2623 
void *emg_pci_pci_scenario_ath5k_pci_driver(void *arg0);
#line 161 
#line 2801 
void *emg_pm_pm_ops_scenario_ath5k_pm_ops(void *arg0);
#line 164 
#line 3796 
void *emg_seq_operations_traverse_kernel_items_scenario_register_seq_ops(void *arg0);
#line 168 
#line 4272 
int main(void);
#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_pci_scenario_ath5k_pci_driver_26 *cf_arg_26;
  #line 192 
  cf_arg_26 = (struct emg_struct_pci_scenario_ath5k_pci_driver_26 *)ldv_xmalloc(16UL);
  #line 193 
  cf_arg_26->arg0 = arg0;
  #line 194 
  ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_pci_pci_scenario_ath5k_pci_driver,(void *)cf_arg_26);
  #line 195 
  __VERIFIER_assume(ret == 0);
  #line 196 
  return;
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_4(struct file_operations *arg0)
{
  #line 201 
  int ret;
  #line 202 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_14;
  #line 203 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_15;
  #line 204 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_16;
  #line 205 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_17;
  #line 206 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_18;
  #line 207 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_19;
  #line 208 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_20;
  #line 209 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_21;
  #line 210 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_22;
  #line 211 
  struct emg_struct_character_driver_scenario_fops_ani_14 *cf_arg_23;
  #line 212 
  switch (ldv_undef_int()) {
    #line 213 
    case 0: 
            #line 213 
    ;
    #line 214 
    cf_arg_14 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 215 
    cf_arg_14->arg0 = arg0;
    #line 216 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_ani,(void *)cf_arg_14);
    #line 217 
    __VERIFIER_assume(ret == 0);
    #line 218 
    break;
    #line 220 
    case 1: 
            #line 220 
    ;
    #line 221 
    cf_arg_15 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 222 
    cf_arg_15->arg0 = arg0;
    #line 223 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_antenna,(void *)cf_arg_15);
    #line 224 
    __VERIFIER_assume(ret == 0);
    #line 225 
    break;
    #line 227 
    case 2: 
            #line 227 
    ;
    #line 228 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 229 
    cf_arg_16->arg0 = arg0;
    #line 230 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_beacon,(void *)cf_arg_16);
    #line 231 
    __VERIFIER_assume(ret == 0);
    #line 232 
    break;
    #line 234 
    case 3: 
            #line 234 
    ;
    #line 235 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 236 
    cf_arg_17->arg0 = arg0;
    #line 237 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_debug,(void *)cf_arg_17);
    #line 238 
    __VERIFIER_assume(ret == 0);
    #line 239 
    break;
    #line 241 
    case 4: 
            #line 241 
    ;
    #line 242 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 243 
    cf_arg_18->arg0 = arg0;
    #line 244 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_eeprom,(void *)cf_arg_18);
    #line 245 
    __VERIFIER_assume(ret == 0);
    #line 246 
    break;
    #line 248 
    case 5: 
            #line 248 
    ;
    #line 249 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 250 
    cf_arg_19->arg0 = arg0;
    #line 251 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_frameerrors,(void *)cf_arg_19);
    #line 252 
    __VERIFIER_assume(ret == 0);
    #line 253 
    break;
    #line 255 
    case 6: 
            #line 255 
    ;
    #line 256 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 257 
    cf_arg_20->arg0 = arg0;
    #line 258 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_misc,(void *)cf_arg_20);
    #line 259 
    __VERIFIER_assume(ret == 0);
    #line 260 
    break;
    #line 262 
    case 7: 
            #line 262 
    ;
    #line 263 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 264 
    cf_arg_21->arg0 = arg0;
    #line 265 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_queue,(void *)cf_arg_21);
    #line 266 
    __VERIFIER_assume(ret == 0);
    #line 267 
    break;
    #line 269 
    case 8: 
            #line 269 
    ;
    #line 270 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 271 
    cf_arg_22->arg0 = arg0;
    #line 272 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_registers,(void *)cf_arg_22);
    #line 273 
    __VERIFIER_assume(ret == 0);
    #line 274 
    break;
    #line 276 
    case 9: 
            #line 276 
    ;
    #line 277 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_fops_ani_14 *)ldv_xmalloc(16UL);
    #line 278 
    cf_arg_23->arg0 = arg0;
    #line 279 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_reset,(void *)cf_arg_23);
    #line 280 
    __VERIFIER_assume(ret == 0);
    #line 281 
    break;
    #line 283 
    default: 
             #line 283 
    ;
    #line 283 
    __VERIFIER_assume(0);
  }
  #line 285 
  return;
}

#line 289  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 290 
  int ret;
  #line 291 
  struct emg_struct_free_irq_5 *cf_arg_25;
  #line 292 
  ret = pthread_join(emg_thread_25,(void **)0);
  #line 293 
  __VERIFIER_assume(ret == 0);
  #line 294 
  return;
}

#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_6(struct ieee80211_hw *arg0)
{
  #line 299 
  int ret;
  #line 300 
  struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 *cf_arg_24;
  #line 301 
  cf_arg_24 = (struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 *)ldv_xmalloc(16UL);
  #line 302 
  cf_arg_24->arg0 = arg0;
  #line 303 
  ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_ieee80211_ieee80211_scenario_ath5k_hw_ops,(void *)cf_arg_24);
  #line 304 
  __VERIFIER_assume(ret == 0);
  #line 305 
  return;
}

#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_7(struct ieee80211_hw *arg0)
{
  #line 310 
  int ret;
  #line 311 
  struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 *cf_arg_24;
  #line 312 
  ret = pthread_join(emg_thread_24,(void **)0);
  #line 313 
  __VERIFIER_assume(ret == 0);
  #line 314 
  return;
}

#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 319 
  int ret;
  #line 320 
  struct emg_struct_pci_scenario_ath5k_pci_driver_26 *cf_arg_26;
  #line 321 
  ret = pthread_join(emg_thread_26,(void **)0);
  #line 322 
  __VERIFIER_assume(ret == 0);
  #line 323 
  return;
}

#line 327  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_9(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 328 
  int ret;
  #line 329 
  struct emg_struct_interrupt_scenario_ath5k_intr_25 *cf_arg_25;
  #line 330 
  cf_arg_25 = (struct emg_struct_interrupt_scenario_ath5k_intr_25 *)ldv_xmalloc(40UL);
  #line 331 
  cf_arg_25->arg0 = arg0;
  #line 332 
  cf_arg_25->arg1 = arg1;
  #line 333 
  cf_arg_25->arg2 = arg2;
  #line 334 
  cf_arg_25->arg3 = arg3;
  #line 335 
  ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_ath5k_intr,(void *)cf_arg_25);
  #line 336 
  __VERIFIER_assume(ret == 0);
  #line 337 
  return;
}

#line 341  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_10(struct seq_file *arg0, struct seq_operations *arg1)
{
  #line 342 
  int ret;
  #line 343 
  struct emg_struct_traverse_kernel_items_scenario_register_seq_ops_28 *cf_arg_28;
  #line 344 
  cf_arg_28 = (struct emg_struct_traverse_kernel_items_scenario_register_seq_ops_28 *)ldv_xmalloc(24UL);
  #line 345 
  cf_arg_28->arg0 = arg0;
  #line 346 
  cf_arg_28->arg1 = arg1;
  #line 347 
  ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_register_seq_ops,(void *)cf_arg_28);
  #line 348 
  __VERIFIER_assume(ret == 0);
  #line 349 
  return;
}

#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_ani(void *arg0)
{
  #line 356 
  struct file_operations *emg_14_container;
  #line 357 
  long long emg_14_emg_param_1_0;
  #line 358 
  char *emg_14_emg_param_1_2;
  #line 359 
  char *emg_14_emg_param_1_4;
  #line 360 
  int emg_14_emg_param_2_1;
  #line 361 
  long long *emg_14_emg_param_3_3;
  #line 362 
  long long *emg_14_emg_param_3_5;
  #line 363 
  struct file *emg_14_resource_0;
  #line 364 
  struct inode *emg_14_resource_1;
  #line 365 
  int emg_14_ret;
  #line 366 
  unsigned long emg_14_size_cnt;
  #line 367 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 368 
  int emg_repeat_cnt_call_14 = 1;
  #line 369 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 371 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 375 
  emg_14_ret = ldv_undef_int();
  #line 376 
  emg_14_container = emg_alias_fops_ani;
  #line 377 
  emg_14_ret = ldv_undef_int();
  #line 379 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_ani);
  #line 381 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 382 
    emg_14_container = data->arg0;
    #line 383 
    ldv_free((void *)data);
  }
  #line 388 
  emg_14_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 389 
  emg_14_size_cnt = (unsigned long)ldv_undef_int();
  #line 393 
  goto emg_main_14;
  #line 397 
  return (void *)0;
  #line 400 
  emg_call_14: 
               #line 400 
  ;
  #line 401 
  if (ldv_undef_int() != 0) {
    #line 402 
    switch (ldv_undef_int()) {
      #line 403 
      case 0: 
              #line 403 
      ;
      #line 405 
      emg_14_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 405 
      emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
      #line 406 
      emg_14_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 406 
      emg_14_emg_param_3_3 = emg_14_emg_param_3_3;
      #line 410 
      emg_wrapper_read_file_ani(emg_14_resource_0,emg_14_emg_param_1_2,emg_14_size_cnt,emg_14_emg_param_3_3);
      #line 414 
      ldv_free((void *)emg_14_emg_param_1_2);
      #line 415 
      ldv_free((void *)emg_14_emg_param_3_3);
      #line 417 
      break;
      #line 419 
      case 1: 
              #line 419 
      ;
      #line 421 
      default_llseek(emg_14_resource_0,emg_14_emg_param_1_0,emg_14_emg_param_2_1);
      #line 423 
      break;
      #line 425 
      case 2: 
              #line 425 
      ;
      #line 432 
      __VERIFIER_assume(emg_14_size_cnt <= 2147479552UL);
      #line 433 
      emg_14_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 433 
      emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
      #line 434 
      emg_14_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 434 
      emg_14_emg_param_3_5 = emg_14_emg_param_3_5;
      #line 438 
      emg_wrapper_write_file_ani(emg_14_resource_0,emg_14_emg_param_1_4,emg_14_size_cnt,emg_14_emg_param_3_5);
      #line 442 
      ldv_free((void *)emg_14_emg_param_1_4);
      #line 443 
      ldv_free((void *)emg_14_emg_param_3_5);
      #line 445 
      break;
      #line 447 
      default: 
               #line 447 
      ;
      #line 447 
      __VERIFIER_assume(0);
    }
    #line 450 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 451 
      emg_repeat_cnt_call_14 --;
      #line 453 
      goto emg_call_14;
    }
    else 
         #line 455 
         __VERIFIER_assume(0);
  }
  else {
    #line 461 
    if (emg_14_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 462 
      (*(emg_14_container->release))(emg_14_resource_1,emg_14_resource_0);
    #line 466 
    if (emg_repeat_cnt_main_14_1 > 0) {
      #line 467 
      emg_repeat_cnt_main_14_1 --;
      #line 469 
      goto emg_main_14;
    }
    else 
         #line 471 
         __VERIFIER_assume(0);
  }
  #line 477 
  return (void *)0;
  #line 480 
  emg_main_14: 
               #line 480 
  ;
  #line 481 
  if (ldv_undef_int() != 0) {
    #line 483 
    emg_14_ret = (*emg_alias_simple_open)(emg_14_resource_1,emg_14_resource_0);
    #line 488 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 491 
    if (ldv_undef_int() != 0) {
      #line 493 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 497 
      goto emg_call_14;
    }
    else {
      #line 502 
      __VERIFIER_assume(emg_14_ret != 0);
      #line 505 
      if (emg_repeat_cnt_main_14_0 > 0) {
        #line 506 
        emg_repeat_cnt_main_14_0 --;
        #line 508 
        goto emg_main_14;
      }
      else 
           #line 510 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 517 
       ldv_free((void *)emg_14_resource_0);
  #line 525 
  return (void *)0;
}

#line 530  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_antenna(void *arg0)
{
  #line 533 
  struct file_operations *emg_15_container;
  #line 534 
  long long emg_15_emg_param_1_0;
  #line 535 
  char *emg_15_emg_param_1_2;
  #line 536 
  char *emg_15_emg_param_1_4;
  #line 537 
  int emg_15_emg_param_2_1;
  #line 538 
  long long *emg_15_emg_param_3_3;
  #line 539 
  long long *emg_15_emg_param_3_5;
  #line 540 
  struct file *emg_15_resource_0;
  #line 541 
  struct inode *emg_15_resource_1;
  #line 542 
  int emg_15_ret;
  #line 543 
  unsigned long emg_15_size_cnt;
  #line 544 
  int emg_repeat_cnt_call_15 = 1;
  #line 545 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 546 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 548 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 552 
  emg_15_ret = ldv_undef_int();
  #line 553 
  emg_15_container = emg_alias_fops_antenna;
  #line 554 
  emg_15_ret = ldv_undef_int();
  #line 556 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_antenna);
  #line 558 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 559 
    emg_15_container = data->arg0;
    #line 560 
    ldv_free((void *)data);
  }
  #line 565 
  emg_15_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 566 
  emg_15_size_cnt = (unsigned long)ldv_undef_int();
  #line 570 
  goto emg_main_15;
  #line 574 
  return (void *)0;
  #line 577 
  emg_call_15: 
               #line 577 
  ;
  #line 578 
  if (ldv_undef_int() != 0) {
    #line 579 
    switch (ldv_undef_int()) {
      #line 580 
      case 0: 
              #line 580 
      ;
      #line 582 
      emg_15_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 582 
      emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
      #line 583 
      emg_15_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 583 
      emg_15_emg_param_3_3 = emg_15_emg_param_3_3;
      #line 587 
      emg_wrapper_read_file_antenna(emg_15_resource_0,emg_15_emg_param_1_2,emg_15_size_cnt,emg_15_emg_param_3_3);
      #line 591 
      ldv_free((void *)emg_15_emg_param_1_2);
      #line 592 
      ldv_free((void *)emg_15_emg_param_3_3);
      #line 594 
      break;
      #line 596 
      case 1: 
              #line 596 
      ;
      #line 598 
      default_llseek(emg_15_resource_0,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
      #line 600 
      break;
      #line 602 
      case 2: 
              #line 602 
      ;
      #line 609 
      __VERIFIER_assume(emg_15_size_cnt <= 2147479552UL);
      #line 610 
      emg_15_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 610 
      emg_15_emg_param_1_4 = emg_15_emg_param_1_4;
      #line 611 
      emg_15_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 611 
      emg_15_emg_param_3_5 = emg_15_emg_param_3_5;
      #line 615 
      emg_wrapper_write_file_antenna(emg_15_resource_0,emg_15_emg_param_1_4,emg_15_size_cnt,emg_15_emg_param_3_5);
      #line 619 
      ldv_free((void *)emg_15_emg_param_1_4);
      #line 620 
      ldv_free((void *)emg_15_emg_param_3_5);
      #line 622 
      break;
      #line 624 
      default: 
               #line 624 
      ;
      #line 624 
      __VERIFIER_assume(0);
    }
    #line 627 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 628 
      emg_repeat_cnt_call_15 --;
      #line 630 
      goto emg_call_15;
    }
    else 
         #line 632 
         __VERIFIER_assume(0);
  }
  else {
    #line 638 
    if (emg_15_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 639 
      (*(emg_15_container->release))(emg_15_resource_1,emg_15_resource_0);
    #line 643 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 644 
      emg_repeat_cnt_main_15_0 --;
      #line 646 
      goto emg_main_15;
    }
    else 
         #line 648 
         __VERIFIER_assume(0);
  }
  #line 654 
  return (void *)0;
  #line 657 
  emg_main_15: 
               #line 657 
  ;
  #line 658 
  if (ldv_undef_int() != 0) {
    #line 660 
    emg_15_ret = (*emg_alias_simple_open)(emg_15_resource_1,emg_15_resource_0);
    #line 665 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 668 
    if (ldv_undef_int() != 0) {
      #line 670 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 674 
      goto emg_call_15;
    }
    else {
      #line 679 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 682 
      if (emg_repeat_cnt_main_15_1 > 0) {
        #line 683 
        emg_repeat_cnt_main_15_1 --;
        #line 685 
        goto emg_main_15;
      }
      else 
           #line 687 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 694 
       ldv_free((void *)emg_15_resource_0);
  #line 702 
  return (void *)0;
}

#line 707  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_beacon(void *arg0)
{
  #line 710 
  struct file_operations *emg_16_container;
  #line 711 
  long long emg_16_emg_param_1_0;
  #line 712 
  char *emg_16_emg_param_1_2;
  #line 713 
  char *emg_16_emg_param_1_4;
  #line 714 
  int emg_16_emg_param_2_1;
  #line 715 
  long long *emg_16_emg_param_3_3;
  #line 716 
  long long *emg_16_emg_param_3_5;
  #line 717 
  struct file *emg_16_resource_0;
  #line 718 
  struct inode *emg_16_resource_1;
  #line 719 
  int emg_16_ret;
  #line 720 
  unsigned long emg_16_size_cnt;
  #line 721 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 722 
  int emg_repeat_cnt_call_16 = 1;
  #line 723 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 725 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 729 
  emg_16_ret = ldv_undef_int();
  #line 730 
  emg_16_container = emg_alias_fops_beacon;
  #line 731 
  emg_16_ret = ldv_undef_int();
  #line 733 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_beacon);
  #line 735 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 736 
    emg_16_container = data->arg0;
    #line 737 
    ldv_free((void *)data);
  }
  #line 742 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 743 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 747 
  goto emg_main_16;
  #line 751 
  return (void *)0;
  #line 754 
  emg_call_16: 
               #line 754 
  ;
  #line 755 
  if (ldv_undef_int() != 0) {
    #line 756 
    switch (ldv_undef_int()) {
      #line 757 
      case 0: 
              #line 757 
      ;
      #line 759 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 759 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 760 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 760 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 764 
      emg_wrapper_read_file_beacon(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 768 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 769 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 771 
      break;
      #line 773 
      case 1: 
              #line 773 
      ;
      #line 775 
      default_llseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 777 
      break;
      #line 779 
      case 2: 
              #line 779 
      ;
      #line 786 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 787 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 787 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 788 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 788 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 792 
      emg_wrapper_write_file_beacon(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 796 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 797 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 799 
      break;
      #line 801 
      default: 
               #line 801 
      ;
      #line 801 
      __VERIFIER_assume(0);
    }
    #line 804 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 805 
      emg_repeat_cnt_call_16 --;
      #line 807 
      goto emg_call_16;
    }
    else 
         #line 809 
         __VERIFIER_assume(0);
  }
  else {
    #line 815 
    if (emg_16_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 816 
      (*(emg_16_container->release))(emg_16_resource_1,emg_16_resource_0);
    #line 820 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 821 
      emg_repeat_cnt_main_16_1 --;
      #line 823 
      goto emg_main_16;
    }
    else 
         #line 825 
         __VERIFIER_assume(0);
  }
  #line 831 
  return (void *)0;
  #line 834 
  emg_main_16: 
               #line 834 
  ;
  #line 835 
  if (ldv_undef_int() != 0) {
    #line 837 
    emg_16_ret = (*emg_alias_simple_open)(emg_16_resource_1,emg_16_resource_0);
    #line 842 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 845 
    if (ldv_undef_int() != 0) {
      #line 847 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 851 
      goto emg_call_16;
    }
    else {
      #line 856 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 859 
      if (emg_repeat_cnt_main_16_0 > 0) {
        #line 860 
        emg_repeat_cnt_main_16_0 --;
        #line 862 
        goto emg_main_16;
      }
      else 
           #line 864 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 871 
       ldv_free((void *)emg_16_resource_0);
  #line 879 
  return (void *)0;
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_debug(void *arg0)
{
  #line 887 
  struct file_operations *emg_17_container;
  #line 888 
  long long emg_17_emg_param_1_0;
  #line 889 
  char *emg_17_emg_param_1_2;
  #line 890 
  char *emg_17_emg_param_1_4;
  #line 891 
  int emg_17_emg_param_2_1;
  #line 892 
  long long *emg_17_emg_param_3_3;
  #line 893 
  long long *emg_17_emg_param_3_5;
  #line 894 
  struct file *emg_17_resource_0;
  #line 895 
  struct inode *emg_17_resource_1;
  #line 896 
  int emg_17_ret;
  #line 897 
  unsigned long emg_17_size_cnt;
  #line 898 
  int emg_repeat_cnt_call_17 = 1;
  #line 899 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 900 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 902 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 906 
  emg_17_ret = ldv_undef_int();
  #line 907 
  emg_17_container = emg_alias_fops_debug;
  #line 908 
  emg_17_ret = ldv_undef_int();
  #line 910 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_debug);
  #line 912 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 913 
    emg_17_container = data->arg0;
    #line 914 
    ldv_free((void *)data);
  }
  #line 919 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 920 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 924 
  goto emg_main_17;
  #line 928 
  return (void *)0;
  #line 931 
  emg_call_17: 
               #line 931 
  ;
  #line 932 
  if (ldv_undef_int() != 0) {
    #line 933 
    switch (ldv_undef_int()) {
      #line 934 
      case 0: 
              #line 934 
      ;
      #line 936 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 936 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 937 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 937 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 941 
      emg_wrapper_read_file_debug(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 945 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 946 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 948 
      break;
      #line 950 
      case 1: 
              #line 950 
      ;
      #line 952 
      default_llseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 954 
      break;
      #line 956 
      case 2: 
              #line 956 
      ;
      #line 963 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 964 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 964 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 965 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 965 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 969 
      emg_wrapper_write_file_debug(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 973 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 974 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 976 
      break;
      #line 978 
      default: 
               #line 978 
      ;
      #line 978 
      __VERIFIER_assume(0);
    }
    #line 981 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 982 
      emg_repeat_cnt_call_17 --;
      #line 984 
      goto emg_call_17;
    }
    else 
         #line 986 
         __VERIFIER_assume(0);
  }
  else {
    #line 992 
    if (emg_17_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 993 
      (*(emg_17_container->release))(emg_17_resource_1,emg_17_resource_0);
    #line 997 
    if (emg_repeat_cnt_main_17_1 > 0) {
      #line 998 
      emg_repeat_cnt_main_17_1 --;
      #line 1000 
      goto emg_main_17;
    }
    else 
         #line 1002 
         __VERIFIER_assume(0);
  }
  #line 1008 
  return (void *)0;
  #line 1011 
  emg_main_17: 
               #line 1011 
  ;
  #line 1012 
  if (ldv_undef_int() != 0) {
    #line 1014 
    emg_17_ret = (*emg_alias_simple_open)(emg_17_resource_1,emg_17_resource_0);
    #line 1019 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 1022 
    if (ldv_undef_int() != 0) {
      #line 1024 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 1028 
      goto emg_call_17;
    }
    else {
      #line 1033 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 1036 
      if (emg_repeat_cnt_main_17_0 > 0) {
        #line 1037 
        emg_repeat_cnt_main_17_0 --;
        #line 1039 
        goto emg_main_17;
      }
      else 
           #line 1041 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1048 
       ldv_free((void *)emg_17_resource_0);
  #line 1056 
  return (void *)0;
}

#line 1061  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_eeprom(void *arg0)
{
  #line 1064 
  struct file_operations *emg_18_container;
  #line 1065 
  char *emg_18_emg_param_1_0;
  #line 1066 
  char *emg_18_emg_param_1_2;
  #line 1067 
  long long *emg_18_emg_param_3_1;
  #line 1068 
  long long *emg_18_emg_param_3_3;
  #line 1069 
  struct file *emg_18_resource_0;
  #line 1070 
  struct inode *emg_18_resource_1;
  #line 1071 
  int emg_18_ret;
  #line 1072 
  unsigned long emg_18_size_cnt;
  #line 1073 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 1074 
  int emg_repeat_cnt_call_18 = 1;
  #line 1075 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 1077 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 1081 
  emg_18_ret = ldv_undef_int();
  #line 1082 
  emg_18_container = emg_alias_fops_eeprom;
  #line 1083 
  emg_18_ret = ldv_undef_int();
  #line 1085 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_eeprom);
  #line 1087 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 1088 
    emg_18_container = data->arg0;
    #line 1089 
    ldv_free((void *)data);
  }
  #line 1094 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1095 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 1099 
  goto emg_main_18;
  #line 1103 
  return (void *)0;
  #line 1106 
  emg_call_18: 
               #line 1106 
  ;
  #line 1107 
  if (ldv_undef_int() != 0) {
    #line 1108 
    if (ldv_undef_int() != 0) {
      #line 1110 
      emg_18_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1110 
      emg_18_emg_param_1_0 = emg_18_emg_param_1_0;
      #line 1111 
      emg_18_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1111 
      emg_18_emg_param_3_1 = emg_18_emg_param_3_1;
      #line 1115 
      emg_wrapper_read_file_eeprom(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_size_cnt,emg_18_emg_param_3_1);
      #line 1119 
      ldv_free((void *)emg_18_emg_param_1_0);
      #line 1120 
      ldv_free((void *)emg_18_emg_param_3_1);
    }
    else {
      #line 1129 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 1130 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1130 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 1131 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1131 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 1135 
      if (emg_18_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1136 
        (*(emg_18_container->write))(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 1141 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 1142 
      ldv_free((void *)emg_18_emg_param_3_3);
    }
    #line 1146 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 1147 
      emg_repeat_cnt_call_18 --;
      #line 1149 
      goto emg_call_18;
    }
    else 
         #line 1151 
         __VERIFIER_assume(0);
  }
  else {
    #line 1157 
    emg_wrapper_release_file_eeprom(emg_18_resource_1,emg_18_resource_0);
    #line 1160 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 1161 
      emg_repeat_cnt_main_18_1 --;
      #line 1163 
      goto emg_main_18;
    }
    else 
         #line 1165 
         __VERIFIER_assume(0);
  }
  #line 1171 
  return (void *)0;
  #line 1174 
  emg_main_18: 
               #line 1174 
  ;
  #line 1175 
  if (ldv_undef_int() != 0) {
    #line 1177 
    emg_18_ret = emg_wrapper_open_file_eeprom(emg_18_resource_1,emg_18_resource_0);
    #line 1182 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 1185 
    if (ldv_undef_int() != 0) {
      #line 1187 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 1191 
      goto emg_call_18;
    }
    else {
      #line 1196 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 1199 
      if (emg_repeat_cnt_main_18_0 > 0) {
        #line 1200 
        emg_repeat_cnt_main_18_0 --;
        #line 1202 
        goto emg_main_18;
      }
      else 
           #line 1204 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1211 
       ldv_free((void *)emg_18_resource_0);
  #line 1219 
  return (void *)0;
}

#line 1224  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_frameerrors(void *arg0)
{
  #line 1227 
  struct file_operations *emg_19_container;
  #line 1228 
  long long emg_19_emg_param_1_0;
  #line 1229 
  char *emg_19_emg_param_1_2;
  #line 1230 
  char *emg_19_emg_param_1_4;
  #line 1231 
  int emg_19_emg_param_2_1;
  #line 1232 
  long long *emg_19_emg_param_3_3;
  #line 1233 
  long long *emg_19_emg_param_3_5;
  #line 1234 
  struct file *emg_19_resource_0;
  #line 1235 
  struct inode *emg_19_resource_1;
  #line 1236 
  int emg_19_ret;
  #line 1237 
  unsigned long emg_19_size_cnt;
  #line 1238 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 1239 
  int emg_repeat_cnt_call_19 = 1;
  #line 1240 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 1242 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 1246 
  emg_19_ret = ldv_undef_int();
  #line 1247 
  emg_19_container = emg_alias_fops_frameerrors;
  #line 1248 
  emg_19_ret = ldv_undef_int();
  #line 1250 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_frameerrors);
  #line 1252 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 1253 
    emg_19_container = data->arg0;
    #line 1254 
    ldv_free((void *)data);
  }
  #line 1259 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1260 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 1264 
  goto emg_main_19;
  #line 1268 
  return (void *)0;
  #line 1271 
  emg_call_19: 
               #line 1271 
  ;
  #line 1272 
  if (ldv_undef_int() != 0) {
    #line 1273 
    switch (ldv_undef_int()) {
      #line 1274 
      case 0: 
              #line 1274 
      ;
      #line 1276 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1276 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 1277 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1277 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 1281 
      emg_wrapper_read_file_frameerrors(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 1285 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 1286 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 1288 
      break;
      #line 1290 
      case 1: 
              #line 1290 
      ;
      #line 1292 
      default_llseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 1294 
      break;
      #line 1296 
      case 2: 
              #line 1296 
      ;
      #line 1303 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 1304 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1304 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 1305 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1305 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 1309 
      emg_wrapper_write_file_frameerrors(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 1313 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 1314 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 1316 
      break;
      #line 1318 
      default: 
               #line 1318 
      ;
      #line 1318 
      __VERIFIER_assume(0);
    }
    #line 1321 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 1322 
      emg_repeat_cnt_call_19 --;
      #line 1324 
      goto emg_call_19;
    }
    else 
         #line 1326 
         __VERIFIER_assume(0);
  }
  else {
    #line 1332 
    if (emg_19_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1333 
      (*(emg_19_container->release))(emg_19_resource_1,emg_19_resource_0);
    #line 1337 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 1338 
      emg_repeat_cnt_main_19_1 --;
      #line 1340 
      goto emg_main_19;
    }
    else 
         #line 1342 
         __VERIFIER_assume(0);
  }
  #line 1348 
  return (void *)0;
  #line 1351 
  emg_main_19: 
               #line 1351 
  ;
  #line 1352 
  if (ldv_undef_int() != 0) {
    #line 1354 
    emg_19_ret = (*emg_alias_simple_open)(emg_19_resource_1,emg_19_resource_0);
    #line 1359 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 1362 
    if (ldv_undef_int() != 0) {
      #line 1364 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 1368 
      goto emg_call_19;
    }
    else {
      #line 1373 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 1376 
      if (emg_repeat_cnt_main_19_0 > 0) {
        #line 1377 
        emg_repeat_cnt_main_19_0 --;
        #line 1379 
        goto emg_main_19;
      }
      else 
           #line 1381 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1388 
       ldv_free((void *)emg_19_resource_0);
  #line 1396 
  return (void *)0;
}

#line 1401  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_misc(void *arg0)
{
  #line 1404 
  struct file_operations *emg_20_container;
  #line 1405 
  char *emg_20_emg_param_1_0;
  #line 1406 
  char *emg_20_emg_param_1_2;
  #line 1407 
  long long *emg_20_emg_param_3_1;
  #line 1408 
  long long *emg_20_emg_param_3_3;
  #line 1409 
  struct file *emg_20_resource_0;
  #line 1410 
  struct inode *emg_20_resource_1;
  #line 1411 
  int emg_20_ret;
  #line 1412 
  unsigned long emg_20_size_cnt;
  #line 1413 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1414 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1415 
  int emg_repeat_cnt_call_20 = 1;
  #line 1417 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 1421 
  emg_20_ret = ldv_undef_int();
  #line 1422 
  emg_20_container = emg_alias_fops_misc;
  #line 1423 
  emg_20_ret = ldv_undef_int();
  #line 1425 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_misc);
  #line 1427 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 1428 
    emg_20_container = data->arg0;
    #line 1429 
    ldv_free((void *)data);
  }
  #line 1434 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1435 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 1439 
  goto emg_main_20;
  #line 1443 
  return (void *)0;
  #line 1446 
  emg_call_20: 
               #line 1446 
  ;
  #line 1447 
  if (ldv_undef_int() != 0) {
    #line 1448 
    if (ldv_undef_int() != 0) {
      #line 1450 
      emg_20_emg_param_1_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1450 
      emg_20_emg_param_1_0 = emg_20_emg_param_1_0;
      #line 1451 
      emg_20_emg_param_3_1 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1451 
      emg_20_emg_param_3_1 = emg_20_emg_param_3_1;
      #line 1455 
      emg_wrapper_read_file_misc(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_size_cnt,emg_20_emg_param_3_1);
      #line 1459 
      ldv_free((void *)emg_20_emg_param_1_0);
      #line 1460 
      ldv_free((void *)emg_20_emg_param_3_1);
    }
    else {
      #line 1469 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 1470 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1470 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 1471 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1471 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 1475 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1476 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 1481 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 1482 
      ldv_free((void *)emg_20_emg_param_3_3);
    }
    #line 1486 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 1487 
      emg_repeat_cnt_call_20 --;
      #line 1489 
      goto emg_call_20;
    }
    else 
         #line 1491 
         __VERIFIER_assume(0);
  }
  else {
    #line 1497 
    if (emg_20_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1498 
      (*(emg_20_container->release))(emg_20_resource_1,emg_20_resource_0);
    #line 1502 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 1503 
      emg_repeat_cnt_main_20_1 --;
      #line 1505 
      goto emg_main_20;
    }
    else 
         #line 1507 
         __VERIFIER_assume(0);
  }
  #line 1513 
  return (void *)0;
  #line 1516 
  emg_main_20: 
               #line 1516 
  ;
  #line 1517 
  if (ldv_undef_int() != 0) {
    #line 1519 
    emg_20_ret = (*emg_alias_simple_open)(emg_20_resource_1,emg_20_resource_0);
    #line 1524 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1527 
    if (ldv_undef_int() != 0) {
      #line 1529 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1533 
      goto emg_call_20;
    }
    else {
      #line 1538 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 1541 
      if (emg_repeat_cnt_main_20_0 > 0) {
        #line 1542 
        emg_repeat_cnt_main_20_0 --;
        #line 1544 
        goto emg_main_20;
      }
      else 
           #line 1546 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1553 
       ldv_free((void *)emg_20_resource_0);
  #line 1561 
  return (void *)0;
}

#line 1566  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_queue(void *arg0)
{
  #line 1569 
  struct file_operations *emg_21_container;
  #line 1570 
  long long emg_21_emg_param_1_0;
  #line 1571 
  char *emg_21_emg_param_1_2;
  #line 1572 
  char *emg_21_emg_param_1_4;
  #line 1573 
  int emg_21_emg_param_2_1;
  #line 1574 
  long long *emg_21_emg_param_3_3;
  #line 1575 
  long long *emg_21_emg_param_3_5;
  #line 1576 
  struct file *emg_21_resource_0;
  #line 1577 
  struct inode *emg_21_resource_1;
  #line 1578 
  int emg_21_ret;
  #line 1579 
  unsigned long emg_21_size_cnt;
  #line 1580 
  int emg_repeat_cnt_call_21 = 1;
  #line 1581 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 1582 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 1584 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 1588 
  emg_21_ret = ldv_undef_int();
  #line 1589 
  emg_21_container = emg_alias_fops_queue;
  #line 1590 
  emg_21_ret = ldv_undef_int();
  #line 1592 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_queue);
  #line 1594 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 1595 
    emg_21_container = data->arg0;
    #line 1596 
    ldv_free((void *)data);
  }
  #line 1601 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1602 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 1606 
  goto emg_main_21;
  #line 1610 
  return (void *)0;
  #line 1613 
  emg_call_21: 
               #line 1613 
  ;
  #line 1614 
  if (ldv_undef_int() != 0) {
    #line 1615 
    switch (ldv_undef_int()) {
      #line 1616 
      case 0: 
              #line 1616 
      ;
      #line 1618 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1618 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 1619 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1619 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 1623 
      emg_wrapper_read_file_queue(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 1627 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 1628 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 1630 
      break;
      #line 1632 
      case 1: 
              #line 1632 
      ;
      #line 1634 
      default_llseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 1636 
      break;
      #line 1638 
      case 2: 
              #line 1638 
      ;
      #line 1645 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 1646 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1646 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 1647 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1647 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 1651 
      emg_wrapper_write_file_queue(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 1655 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 1656 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 1658 
      break;
      #line 1660 
      default: 
               #line 1660 
      ;
      #line 1660 
      __VERIFIER_assume(0);
    }
    #line 1663 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 1664 
      emg_repeat_cnt_call_21 --;
      #line 1666 
      goto emg_call_21;
    }
    else 
         #line 1668 
         __VERIFIER_assume(0);
  }
  else {
    #line 1674 
    if (emg_21_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 1675 
      (*(emg_21_container->release))(emg_21_resource_1,emg_21_resource_0);
    #line 1679 
    if (emg_repeat_cnt_main_21_1 > 0) {
      #line 1680 
      emg_repeat_cnt_main_21_1 --;
      #line 1682 
      goto emg_main_21;
    }
    else 
         #line 1684 
         __VERIFIER_assume(0);
  }
  #line 1690 
  return (void *)0;
  #line 1693 
  emg_main_21: 
               #line 1693 
  ;
  #line 1694 
  if (ldv_undef_int() != 0) {
    #line 1696 
    emg_21_ret = (*emg_alias_simple_open)(emg_21_resource_1,emg_21_resource_0);
    #line 1701 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 1704 
    if (ldv_undef_int() != 0) {
      #line 1706 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 1710 
      goto emg_call_21;
    }
    else {
      #line 1715 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 1718 
      if (emg_repeat_cnt_main_21_0 > 0) {
        #line 1719 
        emg_repeat_cnt_main_21_0 --;
        #line 1721 
        goto emg_main_21;
      }
      else 
           #line 1723 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1730 
       ldv_free((void *)emg_21_resource_0);
  #line 1738 
  return (void *)0;
}

#line 1743  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_registers(void *arg0)
{
  #line 1746 
  struct file_operations *emg_22_container;
  #line 1747 
  long long emg_22_emg_param_1_0;
  #line 1748 
  char *emg_22_emg_param_1_2;
  #line 1749 
  char *emg_22_emg_param_1_4;
  #line 1750 
  int emg_22_emg_param_2_1;
  #line 1751 
  long long *emg_22_emg_param_3_3;
  #line 1752 
  long long *emg_22_emg_param_3_5;
  #line 1753 
  struct file *emg_22_resource_0;
  #line 1754 
  struct inode *emg_22_resource_1;
  #line 1755 
  int emg_22_ret;
  #line 1756 
  unsigned long emg_22_size_cnt;
  #line 1757 
  int emg_repeat_cnt_call_22 = 1;
  #line 1758 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 1759 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 1761 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 1765 
  emg_22_ret = ldv_undef_int();
  #line 1766 
  emg_22_container = emg_alias_fops_registers;
  #line 1767 
  emg_22_ret = ldv_undef_int();
  #line 1769 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_registers);
  #line 1771 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 1772 
    emg_22_container = data->arg0;
    #line 1773 
    ldv_free((void *)data);
  }
  #line 1778 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1779 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 1783 
  goto emg_main_22;
  #line 1787 
  return (void *)0;
  #line 1790 
  emg_call_22: 
               #line 1790 
  ;
  #line 1791 
  if (ldv_undef_int() != 0) {
    #line 1792 
    switch (ldv_undef_int()) {
      #line 1793 
      case 0: 
              #line 1793 
      ;
      #line 1795 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1795 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 1796 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1796 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 1800 
      seq_read(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 1804 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 1805 
      ldv_free((void *)emg_22_emg_param_3_3);
      #line 1807 
      break;
      #line 1809 
      case 1: 
              #line 1809 
      ;
      #line 1811 
      seq_lseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
      #line 1813 
      break;
      #line 1815 
      case 2: 
              #line 1815 
      ;
      #line 1822 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 1823 
      emg_22_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1823 
      emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
      #line 1824 
      emg_22_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1824 
      emg_22_emg_param_3_5 = emg_22_emg_param_3_5;
      #line 1828 
      if (emg_22_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1829 
        (*(emg_22_container->write))(emg_22_resource_0,emg_22_emg_param_1_4,emg_22_size_cnt,emg_22_emg_param_3_5);
      #line 1834 
      ldv_free((void *)emg_22_emg_param_1_4);
      #line 1835 
      ldv_free((void *)emg_22_emg_param_3_5);
      #line 1837 
      break;
      #line 1839 
      default: 
               #line 1839 
      ;
      #line 1839 
      __VERIFIER_assume(0);
    }
    #line 1842 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 1843 
      emg_repeat_cnt_call_22 --;
      #line 1845 
      goto emg_call_22;
    }
    else 
         #line 1847 
         __VERIFIER_assume(0);
  }
  else {
    #line 1853 
    (*emg_alias_seq_release)(emg_22_resource_1,emg_22_resource_0);
    #line 1856 
    if (emg_repeat_cnt_main_22_0 > 0) {
      #line 1857 
      emg_repeat_cnt_main_22_0 --;
      #line 1859 
      goto emg_main_22;
    }
    else 
         #line 1861 
         __VERIFIER_assume(0);
  }
  #line 1867 
  return (void *)0;
  #line 1870 
  emg_main_22: 
               #line 1870 
  ;
  #line 1871 
  if (ldv_undef_int() != 0) {
    #line 1873 
    emg_22_ret = emg_wrapper_open_file_registers(emg_22_resource_1,emg_22_resource_0);
    #line 1878 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 1881 
    if (ldv_undef_int() != 0) {
      #line 1883 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 1887 
      goto emg_call_22;
    }
    else {
      #line 1892 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 1895 
      if (emg_repeat_cnt_main_22_1 > 0) {
        #line 1896 
        emg_repeat_cnt_main_22_1 --;
        #line 1898 
        goto emg_main_22;
      }
      else 
           #line 1900 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1907 
       ldv_free((void *)emg_22_resource_0);
  #line 1915 
  return (void *)0;
}

#line 1920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_reset(void *arg0)
{
  #line 1923 
  struct file_operations *emg_23_container;
  #line 1924 
  long long emg_23_emg_param_1_0;
  #line 1925 
  char *emg_23_emg_param_1_2;
  #line 1926 
  int emg_23_emg_param_2_1;
  #line 1927 
  long long *emg_23_emg_param_3_3;
  #line 1928 
  struct file *emg_23_resource_0;
  #line 1929 
  struct inode *emg_23_resource_1;
  #line 1930 
  int emg_23_ret;
  #line 1931 
  unsigned long emg_23_size_cnt;
  #line 1932 
  int emg_repeat_cnt_call_23 = 1;
  #line 1933 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 1934 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 1936 
  struct emg_struct_character_driver_scenario_fops_ani_14 *data = (struct emg_struct_character_driver_scenario_fops_ani_14 *)arg0;
  #line 1940 
  emg_23_ret = ldv_undef_int();
  #line 1941 
  emg_23_container = emg_alias_fops_reset;
  #line 1942 
  emg_23_ret = ldv_undef_int();
  #line 1944 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_reset);
  #line 1946 
  if (data != (struct emg_struct_character_driver_scenario_fops_ani_14 *)0) {
    #line 1947 
    emg_23_container = data->arg0;
    #line 1948 
    ldv_free((void *)data);
  }
  #line 1953 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1954 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 1958 
  goto emg_main_23;
  #line 1962 
  return (void *)0;
  #line 1965 
  emg_call_23: 
               #line 1965 
  ;
  #line 1966 
  if (ldv_undef_int() != 0) {
    #line 1967 
    if (ldv_undef_int() != 0) 
                              #line 1969 
                              noop_llseek(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_emg_param_2_1);
    else {
      #line 1978 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 1979 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1979 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 1980 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1980 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 1984 
      emg_wrapper_write_file_reset(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 1988 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 1989 
      ldv_free((void *)emg_23_emg_param_3_3);
    }
    #line 1993 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 1994 
      emg_repeat_cnt_call_23 --;
      #line 1996 
      goto emg_call_23;
    }
    else 
         #line 1998 
         __VERIFIER_assume(0);
  }
  else {
    #line 2004 
    if (emg_23_container->release != (int (*)(struct inode *, struct file *))0) 
      #line 2005 
      (*(emg_23_container->release))(emg_23_resource_1,emg_23_resource_0);
    #line 2009 
    if (emg_repeat_cnt_main_23_0 > 0) {
      #line 2010 
      emg_repeat_cnt_main_23_0 --;
      #line 2012 
      goto emg_main_23;
    }
    else 
         #line 2014 
         __VERIFIER_assume(0);
  }
  #line 2020 
  return (void *)0;
  #line 2023 
  emg_main_23: 
               #line 2023 
  ;
  #line 2024 
  if (ldv_undef_int() != 0) {
    #line 2026 
    emg_23_ret = (*emg_alias_simple_open)(emg_23_resource_1,emg_23_resource_0);
    #line 2031 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 2034 
    if (ldv_undef_int() != 0) {
      #line 2036 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 2040 
      goto emg_call_23;
    }
    else {
      #line 2045 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 2048 
      if (emg_repeat_cnt_main_23_1 > 0) {
        #line 2049 
        emg_repeat_cnt_main_23_1 --;
        #line 2051 
        goto emg_main_23;
      }
      else 
           #line 2053 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2060 
       ldv_free((void *)emg_23_resource_0);
  #line 2068 
  return (void *)0;
}

#line 2073  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_ieee80211_ieee80211_scenario_ath5k_hw_ops(void *arg0)
{
  #line 2076 
  struct ieee80211_ops *emg_24_container;
  #line 2077 
  struct ieee80211_vif *emg_24_emg_param_1_0;
  #line 2078 
  struct ieee80211_vif *emg_24_emg_param_1_1;
  #line 2079 
  unsigned int *emg_24_emg_param_1_11;
  #line 2080 
  unsigned int *emg_24_emg_param_1_13;
  #line 2081 
  struct ieee80211_low_level_stats *emg_24_emg_param_1_17;
  #line 2082 
  int emg_24_emg_param_1_18;
  #line 2083 
  struct ieee80211_vif *emg_24_emg_param_1_20;
  #line 2084 
  struct netdev_hw_addr_list *emg_24_emg_param_1_21;
  #line 2085 
  struct ieee80211_vif *emg_24_emg_param_1_22;
  #line 2086 
  struct ieee80211_vif *emg_24_emg_param_1_23;
  #line 2087 
  unsigned int emg_24_emg_param_1_24;
  #line 2088 
  short emg_24_emg_param_1_26;
  #line 2089 
  enum set_key_cmd *emg_24_emg_param_1_27;
  #line 2090 
  unsigned int emg_24_emg_param_1_31;
  #line 2091 
  struct ieee80211_vif *emg_24_emg_param_1_33;
  #line 2092 
  struct ieee80211_vif *emg_24_emg_param_1_35;
  #line 2093 
  struct ieee80211_vif *emg_24_emg_param_1_36;
  #line 2094 
  struct ieee80211_tx_control *emg_24_emg_param_1_38;
  #line 2095 
  struct ieee80211_vif *emg_24_emg_param_1_4;
  #line 2096 
  struct cfg80211_wowlan *emg_24_emg_param_1_40;
  #line 2097 
  unsigned int emg_24_emg_param_1_7;
  #line 2098 
  unsigned int emg_24_emg_param_1_8;
  #line 2099 
  unsigned int *emg_24_emg_param_2_12;
  #line 2100 
  unsigned int *emg_24_emg_param_2_14;
  #line 2101 
  struct survey_info *emg_24_emg_param_2_19;
  #line 2102 
  struct ieee80211_bss_conf *emg_24_emg_param_2_2;
  #line 2103 
  unsigned int emg_24_emg_param_2_25;
  #line 2104 
  struct ieee80211_vif *emg_24_emg_param_2_28;
  #line 2105 
  unsigned int emg_24_emg_param_2_32;
  #line 2106 
  unsigned long long emg_24_emg_param_2_34;
  #line 2107 
  unsigned char *emg_24_emg_param_2_37;
  #line 2108 
  struct sk_buff *emg_24_emg_param_2_39;
  #line 2109 
  unsigned short emg_24_emg_param_2_5;
  #line 2110 
  unsigned int *emg_24_emg_param_2_9;
  #line 2111 
  unsigned long long emg_24_emg_param_3_10;
  #line 2112 
  unsigned int *emg_24_emg_param_3_15;
  #line 2113 
  struct ieee80211_sta *emg_24_emg_param_3_29;
  #line 2114 
  unsigned int emg_24_emg_param_3_3;
  #line 2115 
  struct ieee80211_tx_queue_params *emg_24_emg_param_3_6;
  #line 2116 
  unsigned int *emg_24_emg_param_4_16;
  #line 2117 
  struct ieee80211_key_conf *emg_24_emg_param_4_30;
  #line 2118 
  struct ieee80211_hw *emg_24_resource;
  #line 2119 
  int emg_24_ret;
  #line 2120 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 2121 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 2122 
  int emg_repeat_cnt_started_24_0 = 1;
  #line 2123 
  int emg_repeat_cnt_started_24_1 = 1;
  #line 2125 
  struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 *data = (struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 *)arg0;
  #line 2129 
  emg_24_ret = ldv_undef_int();
  #line 2130 
  emg_24_container = & ath5k_hw_ops;
  #line 2131 
  emg_24_ret = ldv_undef_int();
  #line 2134 
  if (data != (struct emg_struct_ieee80211_scenario_ath5k_hw_ops_24 *)0) {
    #line 2135 
    emg_24_resource = data->arg0;
    #line 2136 
    ldv_free((void *)data);
  }
  #line 2141 
  goto emg_main_24;
  #line 2145 
  return (void *)0;
  #line 2148 
  emg_main_24: 
               #line 2148 
  ;
  #line 2149 
  if (ldv_undef_int() != 0) {
    #line 2152 
    rtnl_lock();
    #line 2156 
    emg_24_ret = emg_wrapper_ath5k_start(emg_24_resource);
    #line 2161 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 2162 
    rtnl_unlock();
    #line 2165 
    if (ldv_undef_int() != 0) {
      #line 2167 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 2171 
      goto emg_started_24;
    }
    else 
         #line 2176 
         __VERIFIER_assume(emg_24_ret != 0);
    #line 2180 
    if (emg_repeat_cnt_main_24_0 > 0) {
      #line 2181 
      emg_repeat_cnt_main_24_0 --;
      #line 2183 
      goto emg_main_24;
    }
    else 
         #line 2185 
         __VERIFIER_assume(0);
  }
  #line 2195 
  return (void *)0;
  #line 2198 
  emg_started_24: 
                  #line 2198 
  ;
  #line 2199 
  switch (ldv_undef_int()) {
    #line 2200 
    case 0: 
            #line 2200 
    ;
    #line 2202 
    emg_24_emg_param_1_38 = (struct ieee80211_tx_control *)ldv_xmalloc_unknown_size(0UL);
    #line 2202 
    emg_24_emg_param_1_38 = emg_24_emg_param_1_38;
    #line 2203 
    emg_24_emg_param_2_39 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 2203 
    emg_24_emg_param_2_39 = emg_24_emg_param_2_39;
    #line 2207 
    emg_wrapper_ath5k_tx(emg_24_resource,emg_24_emg_param_1_38,emg_24_emg_param_2_39);
    #line 2211 
    ldv_free((void *)emg_24_emg_param_1_38);
    #line 2212 
    ldv_free((void *)emg_24_emg_param_2_39);
    #line 2214 
    break;
    #line 2216 
    case 1: 
            #line 2216 
    ;
    #line 2218 
    emg_24_emg_param_1_36 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2218 
    emg_24_emg_param_1_36 = emg_24_emg_param_1_36;
    #line 2219 
    emg_24_emg_param_2_37 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 2219 
    emg_24_emg_param_2_37 = emg_24_emg_param_2_37;
    #line 2223 
    emg_wrapper_ath5k_sw_scan_start(emg_24_resource,emg_24_emg_param_1_36,emg_24_emg_param_2_37);
    #line 2227 
    ldv_free((void *)emg_24_emg_param_1_36);
    #line 2228 
    ldv_free((void *)emg_24_emg_param_2_37);
    #line 2230 
    break;
    #line 2232 
    case 2: 
            #line 2232 
    ;
    #line 2234 
    emg_24_emg_param_1_35 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2234 
    emg_24_emg_param_1_35 = emg_24_emg_param_1_35;
    #line 2238 
    emg_wrapper_ath5k_sw_scan_complete(emg_24_resource,emg_24_emg_param_1_35);
    #line 2242 
    ldv_free((void *)emg_24_emg_param_1_35);
    #line 2244 
    break;
    #line 2246 
    case 3: 
            #line 2246 
    ;
    #line 2248 
    emg_24_emg_param_1_33 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2248 
    emg_24_emg_param_1_33 = emg_24_emg_param_1_33;
    #line 2252 
    emg_wrapper_ath5k_set_tsf(emg_24_resource,emg_24_emg_param_1_33,emg_24_emg_param_2_34);
    #line 2256 
    ldv_free((void *)emg_24_emg_param_1_33);
    #line 2258 
    break;
    #line 2260 
    case 4: 
            #line 2260 
    ;
    #line 2262 
    emg_wrapper_ath5k_set_ringparam(emg_24_resource,emg_24_emg_param_1_31,emg_24_emg_param_2_32);
    #line 2264 
    break;
    #line 2266 
    case 5: 
            #line 2266 
    ;
    #line 2268 
    emg_24_emg_param_1_27 = (enum set_key_cmd *)ldv_xmalloc_unknown_size(0UL);
    #line 2268 
    emg_24_emg_param_1_27 = emg_24_emg_param_1_27;
    #line 2269 
    emg_24_emg_param_2_28 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2269 
    emg_24_emg_param_2_28 = emg_24_emg_param_2_28;
    #line 2270 
    emg_24_emg_param_3_29 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 2270 
    emg_24_emg_param_3_29 = emg_24_emg_param_3_29;
    #line 2271 
    emg_24_emg_param_4_30 = (struct ieee80211_key_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 2271 
    emg_24_emg_param_4_30 = emg_24_emg_param_4_30;
    #line 2275 
    emg_wrapper_ath5k_set_key(emg_24_resource,*emg_24_emg_param_1_27,emg_24_emg_param_2_28,emg_24_emg_param_3_29,emg_24_emg_param_4_30);
    #line 2279 
    ldv_free((void *)emg_24_emg_param_1_27);
    #line 2280 
    ldv_free((void *)emg_24_emg_param_2_28);
    #line 2281 
    ldv_free((void *)emg_24_emg_param_3_29);
    #line 2282 
    ldv_free((void *)emg_24_emg_param_4_30);
    #line 2284 
    break;
    #line 2286 
    case 6: 
            #line 2286 
    ;
    #line 2288 
    emg_wrapper_ath5k_set_coverage_class(emg_24_resource,(short)((int)emg_24_emg_param_1_26));
    #line 2290 
    break;
    #line 2292 
    case 7: 
            #line 2292 
    ;
    #line 2294 
    emg_wrapper_ath5k_set_antenna(emg_24_resource,emg_24_emg_param_1_24,emg_24_emg_param_2_25);
    #line 2296 
    break;
    #line 2298 
    case 8: 
            #line 2298 
    ;
    #line 2300 
    emg_24_emg_param_1_23 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2300 
    emg_24_emg_param_1_23 = emg_24_emg_param_1_23;
    #line 2304 
    emg_wrapper_ath5k_reset_tsf(emg_24_resource,emg_24_emg_param_1_23);
    #line 2308 
    ldv_free((void *)emg_24_emg_param_1_23);
    #line 2310 
    break;
    #line 2312 
    case 9: 
            #line 2312 
    ;
    #line 2314 
    emg_24_emg_param_1_22 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2314 
    emg_24_emg_param_1_22 = emg_24_emg_param_1_22;
    #line 2318 
    emg_wrapper_ath5k_remove_interface(emg_24_resource,emg_24_emg_param_1_22);
    #line 2322 
    ldv_free((void *)emg_24_emg_param_1_22);
    #line 2324 
    break;
    #line 2326 
    case 10: 
             #line 2326 
    ;
    #line 2328 
    emg_24_emg_param_1_21 = (struct netdev_hw_addr_list *)ldv_xmalloc_unknown_size(0UL);
    #line 2328 
    emg_24_emg_param_1_21 = emg_24_emg_param_1_21;
    #line 2332 
    emg_wrapper_ath5k_prepare_multicast(emg_24_resource,emg_24_emg_param_1_21);
    #line 2336 
    ldv_free((void *)emg_24_emg_param_1_21);
    #line 2338 
    break;
    #line 2340 
    case 11: 
             #line 2340 
    ;
    #line 2342 
    emg_24_emg_param_1_20 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2342 
    emg_24_emg_param_1_20 = emg_24_emg_param_1_20;
    #line 2346 
    emg_wrapper_ath5k_get_tsf(emg_24_resource,emg_24_emg_param_1_20);
    #line 2350 
    ldv_free((void *)emg_24_emg_param_1_20);
    #line 2352 
    break;
    #line 2354 
    case 12: 
             #line 2354 
    ;
    #line 2356 
    emg_24_emg_param_2_19 = (struct survey_info *)ldv_xmalloc_unknown_size(0UL);
    #line 2356 
    emg_24_emg_param_2_19 = emg_24_emg_param_2_19;
    #line 2360 
    emg_wrapper_ath5k_get_survey(emg_24_resource,emg_24_emg_param_1_18,emg_24_emg_param_2_19);
    #line 2364 
    ldv_free((void *)emg_24_emg_param_2_19);
    #line 2366 
    break;
    #line 2368 
    case 13: 
             #line 2368 
    ;
    #line 2370 
    emg_24_emg_param_1_17 = (struct ieee80211_low_level_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 2370 
    emg_24_emg_param_1_17 = emg_24_emg_param_1_17;
    #line 2374 
    emg_wrapper_ath5k_get_stats(emg_24_resource,emg_24_emg_param_1_17);
    #line 2378 
    ldv_free((void *)emg_24_emg_param_1_17);
    #line 2380 
    break;
    #line 2382 
    case 14: 
             #line 2382 
    ;
    #line 2384 
    emg_24_emg_param_1_13 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2384 
    emg_24_emg_param_1_13 = emg_24_emg_param_1_13;
    #line 2385 
    emg_24_emg_param_2_14 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2385 
    emg_24_emg_param_2_14 = emg_24_emg_param_2_14;
    #line 2386 
    emg_24_emg_param_3_15 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2386 
    emg_24_emg_param_3_15 = emg_24_emg_param_3_15;
    #line 2387 
    emg_24_emg_param_4_16 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2387 
    emg_24_emg_param_4_16 = emg_24_emg_param_4_16;
    #line 2391 
    emg_wrapper_ath5k_get_ringparam(emg_24_resource,emg_24_emg_param_1_13,emg_24_emg_param_2_14,emg_24_emg_param_3_15,emg_24_emg_param_4_16);
    #line 2395 
    ldv_free((void *)emg_24_emg_param_1_13);
    #line 2396 
    ldv_free((void *)emg_24_emg_param_2_14);
    #line 2397 
    ldv_free((void *)emg_24_emg_param_3_15);
    #line 2398 
    ldv_free((void *)emg_24_emg_param_4_16);
    #line 2400 
    break;
    #line 2402 
    case 15: 
             #line 2402 
    ;
    #line 2404 
    emg_24_emg_param_1_11 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2404 
    emg_24_emg_param_1_11 = emg_24_emg_param_1_11;
    #line 2405 
    emg_24_emg_param_2_12 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2405 
    emg_24_emg_param_2_12 = emg_24_emg_param_2_12;
    #line 2409 
    emg_wrapper_ath5k_get_antenna(emg_24_resource,emg_24_emg_param_1_11,emg_24_emg_param_2_12);
    #line 2413 
    ldv_free((void *)emg_24_emg_param_1_11);
    #line 2414 
    ldv_free((void *)emg_24_emg_param_2_12);
    #line 2416 
    break;
    #line 2418 
    case 16: 
             #line 2418 
    ;
    #line 2420 
    emg_24_emg_param_2_9 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 2420 
    emg_24_emg_param_2_9 = emg_24_emg_param_2_9;
    #line 2424 
    emg_wrapper_ath5k_configure_filter(emg_24_resource,emg_24_emg_param_1_8,emg_24_emg_param_2_9,emg_24_emg_param_3_10);
    #line 2428 
    ldv_free((void *)emg_24_emg_param_2_9);
    #line 2430 
    break;
    #line 2432 
    case 17: 
             #line 2432 
    ;
    #line 2434 
    emg_wrapper_ath5k_config(emg_24_resource,emg_24_emg_param_1_7);
    #line 2436 
    break;
    #line 2438 
    case 18: 
             #line 2438 
    ;
    #line 2440 
    emg_24_emg_param_1_4 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2440 
    emg_24_emg_param_1_4 = emg_24_emg_param_1_4;
    #line 2441 
    emg_24_emg_param_3_6 = (struct ieee80211_tx_queue_params *)ldv_xmalloc_unknown_size(0UL);
    #line 2441 
    emg_24_emg_param_3_6 = emg_24_emg_param_3_6;
    #line 2445 
    emg_wrapper_ath5k_conf_tx(emg_24_resource,emg_24_emg_param_1_4,(unsigned short)((int)emg_24_emg_param_2_5),emg_24_emg_param_3_6);
    #line 2449 
    ldv_free((void *)emg_24_emg_param_1_4);
    #line 2450 
    ldv_free((void *)emg_24_emg_param_3_6);
    #line 2452 
    break;
    #line 2454 
    case 19: 
             #line 2454 
    ;
    #line 2456 
    emg_24_emg_param_1_1 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2456 
    emg_24_emg_param_1_1 = emg_24_emg_param_1_1;
    #line 2457 
    emg_24_emg_param_2_2 = (struct ieee80211_bss_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 2457 
    emg_24_emg_param_2_2 = emg_24_emg_param_2_2;
    #line 2461 
    emg_wrapper_ath5k_bss_info_changed(emg_24_resource,emg_24_emg_param_1_1,emg_24_emg_param_2_2,emg_24_emg_param_3_3);
    #line 2465 
    ldv_free((void *)emg_24_emg_param_1_1);
    #line 2466 
    ldv_free((void *)emg_24_emg_param_2_2);
    #line 2468 
    break;
    #line 2470 
    case 20: 
             #line 2470 
    ;
    #line 2472 
    emg_24_emg_param_1_40 = (struct cfg80211_wowlan *)ldv_xmalloc_unknown_size(0UL);
    #line 2472 
    emg_24_emg_param_1_40 = emg_24_emg_param_1_40;
    #line 2476 
    if (emg_24_container->suspend != (int (*)(struct ieee80211_hw *, struct cfg80211_wowlan *))0) 
      #line 2477 
      (*(emg_24_container->suspend))(emg_24_resource,emg_24_emg_param_1_40);
    #line 2482 
    ldv_free((void *)emg_24_emg_param_1_40);
    #line 2486 
    if (emg_24_container->resume != (int (*)(struct ieee80211_hw *))0) 
      #line 2487 
      (*(emg_24_container->resume))(emg_24_resource);
    #line 2491 
    if (emg_repeat_cnt_started_24_0 > 0) {
      #line 2492 
      emg_repeat_cnt_started_24_0 --;
      #line 2494 
      goto emg_started_24;
    }
    else 
         #line 2496 
         __VERIFIER_assume(0);
    #line 2500 
    break;
    #line 2502 
    case 21: 
             #line 2502 
    ;
    #line 2504 
    emg_24_emg_param_1_0 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 2504 
    emg_24_emg_param_1_0 = emg_24_emg_param_1_0;
    #line 2508 
    emg_wrapper_ath5k_add_interface(emg_24_resource,emg_24_emg_param_1_0);
    #line 2512 
    ldv_free((void *)emg_24_emg_param_1_0);
    #line 2515 
    if (emg_repeat_cnt_started_24_1 > 0) {
      #line 2516 
      emg_repeat_cnt_started_24_1 --;
      #line 2518 
      goto emg_started_24;
    }
    else 
         #line 2520 
         __VERIFIER_assume(0);
    #line 2524 
    break;
    #line 2526 
    case 22: 
             #line 2526 
    ;
    #line 2529 
    rtnl_lock();
    #line 2533 
    ath5k_stop(emg_24_resource);
    #line 2538 
    rtnl_unlock();
    #line 2541 
    if (emg_repeat_cnt_main_24_1 > 0) {
      #line 2542 
      emg_repeat_cnt_main_24_1 --;
      #line 2544 
      goto emg_main_24;
    }
    else 
         #line 2546 
         __VERIFIER_assume(0);
    #line 2550 
    break;
    #line 2552 
    default: 
             #line 2552 
    ;
    #line 2552 
    __VERIFIER_assume(0);
  }
  #line 2555 
  return (void *)0;
}

#line 2560  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_ath5k_intr(void *arg0)
{
  #line 2563 
  enum irqreturn (*emg_25_callback)(int , void *);
  #line 2564 
  void *emg_25_data;
  #line 2565 
  int emg_25_line;
  #line 2566 
  enum irqreturn emg_25_ret_val;
  #line 2567 
  enum irqreturn (*emg_25_thread)(int , void *);
  #line 2569 
  struct emg_struct_interrupt_scenario_ath5k_intr_25 *data = (struct emg_struct_interrupt_scenario_ath5k_intr_25 *)arg0;
  #line 2572 
  emg_25_callback = & emg_wrapper_ath5k_intr;
  #line 2575 
  if (data != (struct emg_struct_interrupt_scenario_ath5k_intr_25 *)0) {
    #line 2576 
    emg_25_line = data->arg0;
    #line 2577 
    emg_25_callback = data->arg1;
    #line 2578 
    emg_25_thread = data->arg2;
    #line 2579 
    emg_25_data = data->arg3;
    #line 2580 
    ldv_free((void *)data);
  }
  #line 2586 
  ldv_switch_to_interrupt_context();
  #line 2590 
  emg_25_ret_val = emg_wrapper_ath5k_intr(emg_25_line,emg_25_data);
  #line 2595 
  ldv_switch_to_process_context();
  #line 2598 
  if (ldv_undef_int() != 0) {
    #line 2600 
    __VERIFIER_assume(emg_25_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 2604 
    if (emg_25_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 2605 
                                                              (*emg_25_thread)(emg_25_line,emg_25_data);
  }
  else 
       #line 2610 
       __VERIFIER_assume(emg_25_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 2618 
  return (void *)0;
}

#line 2623  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ath5k_pci_driver(void *arg0)
{
  #line 2626 
  int emg_26_choice;
  #line 2627 
  struct pci_driver *emg_26_container;
  #line 2628 
  struct pci_device_id *emg_26_device_id;
  #line 2629 
  struct pci_dev *emg_26_resource_0;
  #line 2630 
  struct pm_message emg_26_resource_1;
  #line 2631 
  int emg_26_ret;
  #line 2632 
  int emg_repeat_cnt_call_26_1 = 1;
  #line 2633 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 2634 
  int emg_repeat_cnt_call_26_0 = 1;
  #line 2635 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 2637 
  struct emg_struct_pci_scenario_ath5k_pci_driver_26 *data = (struct emg_struct_pci_scenario_ath5k_pci_driver_26 *)arg0;
  #line 2641 
  emg_26_choice = 0;
  #line 2642 
  emg_26_ret = ldv_undef_int();
  #line 2643 
  emg_26_choice = 0;
  #line 2644 
  emg_26_container = emg_alias_ath5k_pci_driver;
  #line 2645 
  emg_26_ret = ldv_undef_int();
  #line 2647 
  __VERIFIER_assume(data->arg0 == emg_alias_ath5k_pci_driver);
  #line 2649 
  if (data != (struct emg_struct_pci_scenario_ath5k_pci_driver_26 *)0) {
    #line 2650 
    emg_26_container = data->arg0;
    #line 2651 
    ldv_free((void *)data);
  }
  #line 2656 
  emg_26_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 2657 
  emg_26_choice = 0;
  #line 2658 
  emg_26_device_id = emg_26_container->id_table + (unsigned long)emg_26_choice;
  #line 2662 
  goto emg_main_26;
  #line 2666 
  return (void *)0;
  #line 2669 
  emg_call_26: 
               #line 2669 
  ;
  #line 2670 
  switch (ldv_undef_int()) {
    #line 2671 
    case 0: 
            #line 2671 
    ;
    #line 2676 
    if (emg_repeat_cnt_call_26_0 > 0) {
      #line 2677 
      emg_repeat_cnt_call_26_0 --;
      #line 2679 
      goto emg_call_26;
    }
    else 
         #line 2681 
         __VERIFIER_assume(0);
    #line 2685 
    break;
    #line 2687 
    case 1: 
            #line 2687 
    ;
    #line 2689 
    if (emg_26_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 2690 
      emg_26_ret = (*(emg_26_container->suspend))(emg_26_resource_0,emg_26_resource_1); else 
                                                                    #line 2692 
                                                                    emg_26_ret = ldv_undef_int();
    #line 2698 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 2702 
    if (emg_26_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 2703 
                                                                  (*(emg_26_container->resume))(emg_26_resource_0);
    #line 2707 
    if (emg_repeat_cnt_call_26_1 > 0) {
      #line 2708 
      emg_repeat_cnt_call_26_1 --;
      #line 2710 
      goto emg_call_26;
    }
    else 
         #line 2712 
         __VERIFIER_assume(0);
    #line 2716 
    break;
    #line 2718 
    case 2: 
            #line 2718 
    ;
    #line 2720 
    if (emg_26_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 2721 
      (*(emg_26_container->shutdown))(emg_26_resource_0);
    #line 2726 
    emg_wrapper_ath5k_pci_remove(emg_26_resource_0);
    #line 2729 
    if (emg_repeat_cnt_main_26_1 > 0) {
      #line 2730 
      emg_repeat_cnt_main_26_1 --;
      #line 2732 
      goto emg_main_26;
    }
    else 
         #line 2734 
         __VERIFIER_assume(0);
    #line 2738 
    break;
    #line 2740 
    default: 
             #line 2740 
    ;
    #line 2740 
    __VERIFIER_assume(0);
  }
  #line 2743 
  return (void *)0;
  #line 2746 
  emg_main_26: 
               #line 2746 
  ;
  #line 2747 
  if (ldv_undef_int() != 0) {
    #line 2750 
    ldv_pre_probe();
    #line 2754 
    emg_26_ret = emg_wrapper_ath5k_pci_probe(emg_26_resource_0,emg_26_device_id);
    #line 2759 
    emg_26_ret = ldv_post_probe(emg_26_ret);
    #line 2762 
    if (ldv_undef_int() != 0) {
      #line 2764 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 2768 
      goto emg_call_26;
    }
    else 
         #line 2773 
         __VERIFIER_assume(emg_26_ret != 0);
    #line 2777 
    if (emg_repeat_cnt_main_26_0 > 0) {
      #line 2778 
      emg_repeat_cnt_main_26_0 --;
      #line 2780 
      goto emg_main_26;
    }
    else 
         #line 2782 
         __VERIFIER_assume(0);
  }
  else 
       #line 2788 
       ldv_free((void *)emg_26_resource_0);
  #line 2796 
  return (void *)0;
}

#line 2801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_ath5k_pm_ops(void *arg0)
{
  #line 2804 
  struct device *emg_27_device;
  #line 2805 
  struct dev_pm_ops *emg_27_pm_ops;
  #line 2806 
  int emg_27_ret;
  #line 2807 
  int emg_repeat_cnt_flate_27 = 1;
  #line 2808 
  int emg_repeat_cnt_fnoirq_27 = 1;
  #line 2809 
  int emg_repeat_cnt_poff_27 = 1;
  #line 2810 
  int emg_repeat_cnt_fr_27 = 1;
  #line 2811 
  int emg_repeat_cnt_pno_irq_27 = 1;
  #line 2812 
  int emg_repeat_cnt_plate_27 = 1;
  #line 2813 
  int emg_repeat_cnt_sus_27 = 1;
  #line 2814 
  int emg_repeat_cnt_restnoirq_27 = 1;
  #line 2815 
  int emg_repeat_cnt_resnoirq_27 = 1;
  #line 2816 
  int emg_repeat_cnt_run_resume_27 = 1;
  #line 2817 
  int emg_repeat_cnt_th_27 = 1;
  #line 2818 
  int emg_repeat_cnt_no_irq_27 = 1;
  #line 2819 
  int emg_repeat_cnt_reste_27 = 1;
  #line 2820 
  int emg_repeat_cnt_tnoirq_27 = 1;
  #line 2821 
  int emg_repeat_cnt_res_27 = 1;
  #line 2822 
  int emg_repeat_cnt_reslate_27 = 1;
  #line 2823 
  int emg_repeat_cnt_slate_27 = 1;
  #line 2824 
  int emg_repeat_cnt_thlate_27 = 1;
  #line 2825 
  int emg_repeat_cnt_rest_27 = 1;
  #line 2828 
  emg_27_ret = ldv_undef_int();
  #line 2829 
  emg_27_pm_ops = emg_alias_ath5k_pm_ops;
  #line 2830 
  emg_27_ret = ldv_undef_int();
  #line 2836 
  goto emg_do_27;
  #line 2840 
  return (void *)0;
  #line 2843 
  emg_compl_27: 
                #line 2843 
  ;
  #line 2845 
  if (emg_27_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 2846 
                                                               (*(emg_27_pm_ops->complete))(emg_27_device);
  #line 2854 
  return (void *)0;
  #line 2857 
  emg_do_27: 
             #line 2857 
  ;
  #line 2858 
  switch (ldv_undef_int()) {
    #line 2859 
    case 0: 
            #line 2859 
    ;
    #line 2861 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 2865 
    goto emg_runt_27;
    #line 2870 
    case 1: 
            #line 2870 
    ;
    #line 2872 
    goto emg_normal_27;
    #line 2877 
    case 2: 
            #line 2877 
    ;
    #line 2881 
    break;
    #line 2883 
    default: 
             #line 2883 
    ;
    #line 2883 
    __VERIFIER_assume(0);
  }
  #line 2886 
  return (void *)0;
  #line 2889 
  emg_flate_27: 
                #line 2889 
  ;
  #line 2891 
  if (emg_27_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 2892 
                                                                 emg_27_ret = (*(emg_27_pm_ops->freeze_late))(emg_27_device); else 
                                                                    #line 2894 
                                                                    emg_27_ret = ldv_undef_int();
  #line 2900 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 2903 
  if (ldv_undef_int() != 0) {
    #line 2905 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 2909 
    goto emg_thlate_27;
  }
  else 
       #line 2914 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 2918 
  if (emg_repeat_cnt_flate_27 > 0) {
    #line 2919 
    emg_repeat_cnt_flate_27 --;
    #line 2921 
    goto emg_flate_27;
  }
  else 
       #line 2923 
       __VERIFIER_assume(0);
  #line 2928 
  return (void *)0;
  #line 2931 
  emg_fnoirq_27: 
                 #line 2931 
  ;
  #line 2933 
  if (emg_27_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 2934 
                                                                  emg_27_ret = (*(emg_27_pm_ops->freeze_noirq))(emg_27_device); else 
                                                                    #line 2936 
                                                                    emg_27_ret = ldv_undef_int();
  #line 2942 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 2945 
  if (ldv_undef_int() != 0) {
    #line 2947 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 2951 
    goto emg_tnoirq_27;
  }
  else 
       #line 2956 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 2960 
  if (emg_repeat_cnt_fnoirq_27 > 0) {
    #line 2961 
    emg_repeat_cnt_fnoirq_27 --;
    #line 2963 
    goto emg_fnoirq_27;
  }
  else 
       #line 2965 
       __VERIFIER_assume(0);
  #line 2970 
  return (void *)0;
  #line 2973 
  emg_fr_27: 
             #line 2973 
  ;
  #line 2975 
  emg_27_ret = emg_wrapper_ath5k_pci_suspend(emg_27_device);
  #line 2980 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 2983 
  if (ldv_undef_int() != 0) {
    #line 2985 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 2988 
    if (ldv_undef_int() != 0) 
                              #line 2990 
                              goto emg_fnoirq_27; else 
                                                       #line 2995 
                                                       goto emg_flate_27;
  }
  else {
    #line 3001 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3004 
    if (emg_repeat_cnt_fr_27 > 0) {
      #line 3005 
      emg_repeat_cnt_fr_27 --;
      #line 3007 
      goto emg_fr_27;
    }
    else 
         #line 3009 
         __VERIFIER_assume(0);
  }
  #line 3015 
  return (void *)0;
  #line 3018 
  emg_no_irq_27: 
                 #line 3018 
  ;
  #line 3020 
  if (emg_27_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 3021 
                                                                   emg_27_ret = (*(emg_27_pm_ops->suspend_noirq))(emg_27_device); else 
                                                                    #line 3023 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3029 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3032 
  if (ldv_undef_int() != 0) {
    #line 3034 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3038 
    goto emg_resnoirq_27;
  }
  else 
       #line 3043 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3047 
  if (emg_repeat_cnt_no_irq_27 > 0) {
    #line 3048 
    emg_repeat_cnt_no_irq_27 --;
    #line 3050 
    goto emg_no_irq_27;
  }
  else 
       #line 3052 
       __VERIFIER_assume(0);
  #line 3057 
  return (void *)0;
  #line 3060 
  emg_normal_27: 
                 #line 3060 
  ;
  #line 3062 
  if (emg_27_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 3063 
                                                             emg_27_ret = (*(emg_27_pm_ops->prepare))(emg_27_device); else 
                                                                    #line 3065 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3071 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3074 
  if (ldv_undef_int() != 0) {
    #line 3076 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3079 
    switch (ldv_undef_int()) {
      #line 3080 
      case 0: 
              #line 3080 
      ;
      #line 3082 
      goto emg_sus_27;
      #line 3087 
      case 1: 
              #line 3087 
      ;
      #line 3089 
      goto emg_fr_27;
      #line 3094 
      case 2: 
              #line 3094 
      ;
      #line 3096 
      goto emg_poff_27;
      #line 3101 
      default: 
               #line 3101 
      ;
      #line 3101 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 3105 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3113 
  return (void *)0;
  #line 3116 
  emg_plate_27: 
                #line 3116 
  ;
  #line 3118 
  if (emg_27_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 3119 
                                                                   emg_27_ret = (*(emg_27_pm_ops->poweroff_late))(emg_27_device); else 
                                                                    #line 3121 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3127 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3130 
  if (ldv_undef_int() != 0) {
    #line 3132 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3136 
    goto emg_reste_27;
  }
  else 
       #line 3141 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3145 
  if (emg_repeat_cnt_plate_27 > 0) {
    #line 3146 
    emg_repeat_cnt_plate_27 --;
    #line 3148 
    goto emg_plate_27;
  }
  else 
       #line 3150 
       __VERIFIER_assume(0);
  #line 3155 
  return (void *)0;
  #line 3158 
  emg_pno_irq_27: 
                  #line 3158 
  ;
  #line 3160 
  if (emg_27_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 3161 
                                                                    emg_27_ret = (*(emg_27_pm_ops->poweroff_noirq))(emg_27_device); else 
                                                                    #line 3163 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3169 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3172 
  if (ldv_undef_int() != 0) {
    #line 3174 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3178 
    goto emg_restnoirq_27;
  }
  else 
       #line 3183 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3187 
  if (emg_repeat_cnt_pno_irq_27 > 0) {
    #line 3188 
    emg_repeat_cnt_pno_irq_27 --;
    #line 3190 
    goto emg_pno_irq_27;
  }
  else 
       #line 3192 
       __VERIFIER_assume(0);
  #line 3197 
  return (void *)0;
  #line 3200 
  emg_poff_27: 
               #line 3200 
  ;
  #line 3202 
  emg_27_ret = emg_wrapper_ath5k_pci_suspend(emg_27_device);
  #line 3207 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3210 
  if (ldv_undef_int() != 0) {
    #line 3212 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3215 
    if (ldv_undef_int() != 0) 
                              #line 3217 
                              goto emg_pno_irq_27; else 
                                                        #line 3222 
                                                        goto emg_plate_27;
  }
  else {
    #line 3228 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3231 
    if (emg_repeat_cnt_poff_27 > 0) {
      #line 3232 
      emg_repeat_cnt_poff_27 --;
      #line 3234 
      goto emg_poff_27;
    }
    else 
         #line 3236 
         __VERIFIER_assume(0);
  }
  #line 3242 
  return (void *)0;
  #line 3245 
  emg_res_27: 
              #line 3245 
  ;
  #line 3247 
  emg_27_ret = emg_wrapper_ath5k_pci_resume(emg_27_device);
  #line 3252 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3255 
  if (ldv_undef_int() != 0) {
    #line 3257 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3261 
    goto emg_compl_27;
  }
  else {
    #line 3266 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3269 
    if (emg_repeat_cnt_res_27 > 0) {
      #line 3270 
      emg_repeat_cnt_res_27 --;
      #line 3272 
      goto emg_res_27;
    }
    else 
         #line 3274 
         __VERIFIER_assume(0);
  }
  #line 3280 
  return (void *)0;
  #line 3283 
  emg_reslate_27: 
                  #line 3283 
  ;
  #line 3285 
  if (emg_27_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 3286 
                                                                  emg_27_ret = (*(emg_27_pm_ops->resume_early))(emg_27_device); else 
                                                                    #line 3288 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3294 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3297 
  if (ldv_undef_int() != 0) {
    #line 3299 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3303 
    goto emg_res_27;
  }
  else 
       #line 3308 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3312 
  if (emg_repeat_cnt_reslate_27 > 0) {
    #line 3313 
    emg_repeat_cnt_reslate_27 --;
    #line 3315 
    goto emg_reslate_27;
  }
  else 
       #line 3317 
       __VERIFIER_assume(0);
  #line 3322 
  return (void *)0;
  #line 3325 
  emg_resnoirq_27: 
                   #line 3325 
  ;
  #line 3327 
  if (emg_27_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 3328 
                                                                  emg_27_ret = (*(emg_27_pm_ops->resume_noirq))(emg_27_device); else 
                                                                    #line 3330 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3336 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3339 
  if (ldv_undef_int() != 0) {
    #line 3341 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3345 
    goto emg_res_27;
  }
  else 
       #line 3350 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3354 
  if (emg_repeat_cnt_resnoirq_27 > 0) {
    #line 3355 
    emg_repeat_cnt_resnoirq_27 --;
    #line 3357 
    goto emg_resnoirq_27;
  }
  else 
       #line 3359 
       __VERIFIER_assume(0);
  #line 3364 
  return (void *)0;
  #line 3367 
  emg_rest_27: 
               #line 3367 
  ;
  #line 3369 
  emg_27_ret = emg_wrapper_ath5k_pci_resume(emg_27_device);
  #line 3374 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3377 
  if (ldv_undef_int() != 0) {
    #line 3379 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3383 
    goto emg_compl_27;
  }
  else {
    #line 3388 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3391 
    if (emg_repeat_cnt_rest_27 > 0) {
      #line 3392 
      emg_repeat_cnt_rest_27 --;
      #line 3394 
      goto emg_rest_27;
    }
    else 
         #line 3396 
         __VERIFIER_assume(0);
  }
  #line 3402 
  return (void *)0;
  #line 3405 
  emg_reste_27: 
                #line 3405 
  ;
  #line 3407 
  if (emg_27_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 3408 
                                                                   emg_27_ret = (*(emg_27_pm_ops->restore_early))(emg_27_device); else 
                                                                    #line 3410 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3416 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3419 
  if (ldv_undef_int() != 0) {
    #line 3421 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3425 
    goto emg_rest_27;
  }
  else 
       #line 3430 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3434 
  if (emg_repeat_cnt_reste_27 > 0) {
    #line 3435 
    emg_repeat_cnt_reste_27 --;
    #line 3437 
    goto emg_reste_27;
  }
  else 
       #line 3439 
       __VERIFIER_assume(0);
  #line 3444 
  return (void *)0;
  #line 3447 
  emg_restnoirq_27: 
                    #line 3447 
  ;
  #line 3449 
  if (emg_27_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 3450 
                                                                   emg_27_ret = (*(emg_27_pm_ops->restore_noirq))(emg_27_device); else 
                                                                    #line 3452 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3458 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3461 
  if (ldv_undef_int() != 0) {
    #line 3463 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3467 
    goto emg_rest_27;
  }
  else 
       #line 3472 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3476 
  if (emg_repeat_cnt_restnoirq_27 > 0) {
    #line 3477 
    emg_repeat_cnt_restnoirq_27 --;
    #line 3479 
    goto emg_restnoirq_27;
  }
  else 
       #line 3481 
       __VERIFIER_assume(0);
  #line 3486 
  return (void *)0;
  #line 3489 
  emg_run_resume_27: 
                     #line 3489 
  ;
  #line 3491 
  if (emg_27_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 3492 
                                                                    emg_27_ret = (*(emg_27_pm_ops->runtime_resume))(emg_27_device); else 
                                                                    #line 3494 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3500 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3501 
  if (emg_27_ret != 0) 
                       #line 3502 
                       emg_runtime_lowpower = 0;
  #line 3505 
  if (ldv_undef_int() != 0) 
                            #line 3507 
                            __VERIFIER_assume(emg_27_ret == 0);
  else {
    #line 3511 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3514 
    if (emg_repeat_cnt_run_resume_27 > 0) {
      #line 3515 
      emg_repeat_cnt_run_resume_27 --;
      #line 3517 
      goto emg_run_resume_27;
    }
    else 
         #line 3519 
         __VERIFIER_assume(0);
  }
  #line 3529 
  return (void *)0;
  #line 3532 
  emg_runt_27: 
               #line 3532 
  ;
  #line 3533 
  if (ldv_undef_int() != 0) {
    #line 3535 
    if (emg_27_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 3536 
                                                                    emg_27_ret = (*(emg_27_pm_ops->runtime_idle))(emg_27_device); else 
                                                                    #line 3538 
                                                                    emg_27_ret = ldv_undef_int();
    #line 3544 
    emg_27_ret = ldv_post_probe(emg_27_ret);
  }
  else {
    #line 3548 
    if (emg_27_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 3549 
      emg_27_ret = (*(emg_27_pm_ops->runtime_suspend))(emg_27_device); else 
                                                                    #line 3551 
                                                                    emg_27_ret = ldv_undef_int();
    #line 3557 
    emg_27_ret = ldv_post_probe(emg_27_ret);
    #line 3558 
    if (emg_27_ret != 0) 
                         #line 3559 
                         emg_runtime_lowpower = 1;
    #line 3562 
    if (ldv_undef_int() != 0) {
      #line 3564 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 3568 
      goto emg_run_resume_27;
    }
    else 
         #line 3573 
         __VERIFIER_assume(emg_27_ret != 0);
  }
  #line 3582 
  return (void *)0;
  #line 3585 
  emg_slate_27: 
                #line 3585 
  ;
  #line 3587 
  if (emg_27_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 3588 
                                                                  emg_27_ret = (*(emg_27_pm_ops->suspend_late))(emg_27_device); else 
                                                                    #line 3590 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3596 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3599 
  if (ldv_undef_int() != 0) {
    #line 3601 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3605 
    goto emg_reslate_27;
  }
  else 
       #line 3610 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3614 
  if (emg_repeat_cnt_slate_27 > 0) {
    #line 3615 
    emg_repeat_cnt_slate_27 --;
    #line 3617 
    goto emg_slate_27;
  }
  else 
       #line 3619 
       __VERIFIER_assume(0);
  #line 3624 
  return (void *)0;
  #line 3627 
  emg_sus_27: 
              #line 3627 
  ;
  #line 3629 
  emg_27_ret = emg_wrapper_ath5k_pci_suspend(emg_27_device);
  #line 3634 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3637 
  if (ldv_undef_int() != 0) {
    #line 3639 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3642 
    if (ldv_undef_int() != 0) 
                              #line 3644 
                              goto emg_no_irq_27; else 
                                                       #line 3649 
                                                       goto emg_slate_27;
  }
  else {
    #line 3655 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3658 
    if (emg_repeat_cnt_sus_27 > 0) {
      #line 3659 
      emg_repeat_cnt_sus_27 --;
      #line 3661 
      goto emg_sus_27;
    }
    else 
         #line 3663 
         __VERIFIER_assume(0);
  }
  #line 3669 
  return (void *)0;
  #line 3672 
  emg_th_27: 
             #line 3672 
  ;
  #line 3674 
  emg_27_ret = emg_wrapper_ath5k_pci_resume(emg_27_device);
  #line 3679 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3682 
  if (ldv_undef_int() != 0) {
    #line 3684 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3688 
    goto emg_compl_27;
  }
  else {
    #line 3693 
    __VERIFIER_assume(emg_27_ret != 0);
    #line 3696 
    if (emg_repeat_cnt_th_27 > 0) {
      #line 3697 
      emg_repeat_cnt_th_27 --;
      #line 3699 
      goto emg_th_27;
    }
    else 
         #line 3701 
         __VERIFIER_assume(0);
  }
  #line 3707 
  return (void *)0;
  #line 3710 
  emg_thlate_27: 
                 #line 3710 
  ;
  #line 3712 
  if (emg_27_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 3713 
                                                                emg_27_ret = (*(emg_27_pm_ops->thaw_early))(emg_27_device); else 
                                                                    #line 3715 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3721 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3724 
  if (ldv_undef_int() != 0) {
    #line 3726 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3730 
    goto emg_th_27;
  }
  else 
       #line 3735 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3739 
  if (emg_repeat_cnt_thlate_27 > 0) {
    #line 3740 
    emg_repeat_cnt_thlate_27 --;
    #line 3742 
    goto emg_thlate_27;
  }
  else 
       #line 3744 
       __VERIFIER_assume(0);
  #line 3749 
  return (void *)0;
  #line 3752 
  emg_tnoirq_27: 
                 #line 3752 
  ;
  #line 3754 
  if (emg_27_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 3755 
                                                                emg_27_ret = (*(emg_27_pm_ops->thaw_noirq))(emg_27_device); else 
                                                                    #line 3757 
                                                                    emg_27_ret = ldv_undef_int();
  #line 3763 
  emg_27_ret = ldv_post_probe(emg_27_ret);
  #line 3766 
  if (ldv_undef_int() != 0) {
    #line 3768 
    __VERIFIER_assume(emg_27_ret == 0);
    #line 3772 
    goto emg_th_27;
  }
  else 
       #line 3777 
       __VERIFIER_assume(emg_27_ret != 0);
  #line 3781 
  if (emg_repeat_cnt_tnoirq_27 > 0) {
    #line 3782 
    emg_repeat_cnt_tnoirq_27 --;
    #line 3784 
    goto emg_tnoirq_27;
  }
  else 
       #line 3786 
       __VERIFIER_assume(0);
  #line 3791 
  return (void *)0;
}

#line 3796  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_register_seq_ops(void *arg0)
{
  #line 3799 
  long long *emg_28_index;
  #line 3800 
  struct seq_operations *emg_28_ops;
  #line 3801 
  long long *emg_28_ret;
  #line 3802 
  struct seq_file *emg_28_seq_file;
  #line 3803 
  int emg_28_show_ret;
  #line 3804 
  int emg_repeat_cnt_outer_loop_28_1 = 1;
  #line 3805 
  int emg_repeat_cnt_outer_loop_28_0 = 1;
  #line 3806 
  int emg_repeat_cnt_inner_loop_28 = 1;
  #line 3808 
  struct emg_struct_traverse_kernel_items_scenario_register_seq_ops_28 *data = (struct emg_struct_traverse_kernel_items_scenario_register_seq_ops_28 *)arg0;
  #line 3812 
  emg_28_show_ret = ldv_undef_int();
  #line 3813 
  emg_28_ops = emg_alias_register_seq_ops;
  #line 3814 
  emg_28_show_ret = ldv_undef_int();
  #line 3816 
  __VERIFIER_assume(data->arg1 == emg_alias_register_seq_ops);
  #line 3818 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_register_seq_ops_28 *)0) {
    #line 3819 
    emg_28_seq_file = data->arg0;
    #line 3820 
    emg_28_ops = data->arg1;
    #line 3821 
    ldv_free((void *)data);
  }
  #line 3826 
  emg_28_index = (long long *)ldv_xmalloc(8UL);
  #line 3830 
  goto emg_outer_loop_28;
  #line 3834 
  return (void *)0;
  #line 3837 
  emg_inner_loop_28: 
                     #line 3837 
  ;
  #line 3838 
  if (ldv_undef_int() != 0) {
    #line 3840 
    int tmp_1;
    #line 3840 
    if (ldv_is_err_or_null((void *)emg_28_ret)) 
                                                #line 3840 
                                                tmp_1 = 0; else 
                                                                #line 3840 
                                                                tmp_1 = 1;
    #line 3840 
    __VERIFIER_assume(tmp_1);
    #line 3844 
    emg_28_show_ret = emg_wrapper_reg_show(emg_28_seq_file,(void *)emg_28_ret);
    #line 3847 
    if (ldv_undef_int() != 0) {
      #line 3849 
      __VERIFIER_assume(emg_28_show_ret >= 0);
      #line 3853 
      emg_28_ret = (long long *)emg_wrapper_reg_next(emg_28_seq_file,(void *)emg_28_ret,emg_28_index);
      #line 3856 
      if (emg_repeat_cnt_inner_loop_28 > 0) {
        #line 3857 
        emg_repeat_cnt_inner_loop_28 --;
        #line 3859 
        goto emg_inner_loop_28;
      }
      else 
           #line 3861 
           __VERIFIER_assume(0);
    }
    else {
      #line 3868 
      emg_28_seq_file->index = *emg_28_index;
      #line 3872 
      emg_wrapper_reg_stop(emg_28_seq_file,(void *)emg_28_ret);
      #line 3877 
      emg_28_seq_file->index = *emg_28_index;
      #line 3880 
      if (emg_repeat_cnt_outer_loop_28_0 > 0) {
        #line 3881 
        emg_repeat_cnt_outer_loop_28_0 --;
        #line 3883 
        goto emg_outer_loop_28;
      }
      else 
           #line 3885 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 3892 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_28_ret));
    #line 3897 
    emg_28_seq_file->index = *emg_28_index;
    #line 3901 
    emg_wrapper_reg_stop(emg_28_seq_file,(void *)emg_28_ret);
    #line 3906 
    emg_28_seq_file->index = *emg_28_index;
    #line 3909 
    if (emg_repeat_cnt_outer_loop_28_1 > 0) {
      #line 3910 
      emg_repeat_cnt_outer_loop_28_1 --;
      #line 3912 
      goto emg_outer_loop_28;
    }
    else 
         #line 3914 
         __VERIFIER_assume(0);
  }
  #line 3920 
  return (void *)0;
  #line 3923 
  emg_outer_loop_28: 
                     #line 3923 
  ;
  #line 3924 
  if (ldv_undef_int() != 0) {
    #line 3927 
    *emg_28_index = 0LL;
    #line 3931 
    emg_28_ret = (long long *)emg_wrapper_reg_start(emg_28_seq_file,emg_28_index);
    #line 3935 
    goto emg_inner_loop_28;
  }
  else 
       #line 3940 
       ldv_free((void *)emg_28_index);
  #line 3948 
  return (void *)0;
}

#line 3953  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 3956 
  struct pci_driver *emg_2_pci_driver;
  #line 3958 
  emg_2_pci_driver = emg_alias_ath5k_pci_driver;
  #line 3959 
  if (ldv_undef_int() != 0) {
    #line 3961 
    emg_2_pci_driver = arg0;
    #line 3965 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 3969 
    return 0;
  }
  else {
    #line 3973 
    return ldv_undef_int_negative();
  }
}

#line 3981  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 3984 
  struct dentry *emg_3_dentry;
  #line 3985 
  struct inode *emg_3_inode;
  #line 3987 
  if (ldv_undef_int() != 0) {
    #line 3989 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 3990 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 3991 
    emg_3_inode->i_mode = (unsigned short)16877U;
    #line 3992 
    emg_3_dentry->d_parent = arg1;
    #line 3993 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 3994 
    return emg_3_dentry;
  }
  else {
    #line 3998 
    return (struct dentry *)ERR_PTR_0(-19L);
  }
}

#line 4006  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 4009 
  struct dentry *emg_4_dentry;
  #line 4010 
  struct file_operations *emg_4_file_operations;
  #line 4011 
  struct inode *emg_4_inode;
  #line 4013 
  if (ldv_undef_int() != 0) {
    #line 4015 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 4016 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 4017 
    emg_4_inode->i_mode = arg1;
    #line 4018 
    emg_4_dentry->d_parent = arg2;
    #line 4019 
    emg_4_inode->i_private = arg3;
    #line 4020 
    emg_4_file_operations = arg4;
    #line 4021 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 4022 
    ldv_save_allocated_memory_to_list((void *)emg_4_dentry);
    #line 4026 
    emg_dispatch_register_4(emg_4_file_operations);
    #line 4030 
    return emg_4_dentry;
  }
  else {
    #line 4034 
    return (struct dentry *)ERR_PTR_0(-19L);
  }
}

#line 4042  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 4045 
  int emg_5_line;
  #line 4048 
  emg_5_line = (int)arg0;
  #line 4052 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 4053 
  ;
  #line 4053 
  return (void *)0;
}

#line 4059  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1)
{
  #line 4062 
  struct ieee80211_hw *emg_6_ieee80211_hw;
  #line 4063 
  struct ieee80211_ops *emg_6_ieee80211_ops;
  #line 4065 
  emg_6_ieee80211_ops = & ath5k_hw_ops;
  #line 4066 
  if (ldv_undef_int() != 0) {
    #line 4068 
    emg_6_ieee80211_ops = arg1;
    #line 4069 
    emg_6_ieee80211_hw = (struct ieee80211_hw *)ldv_xmalloc(184UL);
    #line 4073 
    emg_dispatch_register_6(emg_6_ieee80211_hw);
    #line 4077 
    return emg_6_ieee80211_hw;
  }
  else 
       #line 4081 
       return (struct ieee80211_hw *)0;
}

#line 4089  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0)
{
  #line 4092 
  struct ieee80211_hw *emg_7_ieee80211_hw;
  #line 4095 
  emg_dispatch_deregister_7(emg_7_ieee80211_hw);
  #line 4099 
  ldv_free((void *)emg_7_ieee80211_hw);
  #line 4102 
  return;
}

#line 4107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 4110 
  struct pci_driver *emg_8_pci_driver;
  #line 4112 
  emg_8_pci_driver = emg_alias_ath5k_pci_driver;
  #line 4114 
  emg_8_pci_driver = arg0;
  #line 4118 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 4121 
  return;
}

#line 4126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 4129 
  enum irqreturn (*emg_9_callback)(int , void *);
  #line 4130 
  void *emg_9_data;
  #line 4131 
  int emg_9_line;
  #line 4132 
  enum irqreturn (*emg_9_thread)(int , void *);
  #line 4134 
  emg_9_callback = & emg_wrapper_ath5k_intr;
  #line 4135 
  if (ldv_undef_int() != 0) {
    #line 4137 
    emg_9_line = (int)arg0;
    #line 4138 
    emg_9_callback = arg1;
    #line 4139 
    emg_9_thread = (enum irqreturn (*)(int , void *))0;
    #line 4140 
    emg_9_data = arg4;
    #line 4144 
    emg_dispatch_irq_register_9(emg_9_line,emg_9_callback,emg_9_thread,emg_9_data);
    #line 4148 
    return 0;
  }
  else {
    #line 4152 
    return ldv_undef_int_negative();
  }
}

#line 4160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
int emg_seq_open(struct file *arg0, struct seq_operations *arg1)
{
  #line 4163 
  struct file *emg_10_file;
  #line 4164 
  struct seq_operations *emg_10_ops;
  #line 4165 
  struct seq_file *emg_10_seq_file;
  #line 4167 
  emg_10_ops = emg_alias_register_seq_ops;
  #line 4169 
  emg_10_seq_file = (struct seq_file *)ldv_xmalloc(256UL);
  #line 4170 
  emg_10_ops = arg1;
  #line 4171 
  emg_10_file->private_data = (void *)emg_10_seq_file;
  #line 4175 
  emg_dispatch_register_10(emg_10_seq_file,emg_10_ops);
  #line 4176 
  ;
  #line 4176 
  return 0;
}

#line 4182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_hi_schedule(struct tasklet_struct *arg0)
{
  #line 4185 
  unsigned long emg_11_emg_param_0_0;
  #line 4186 
  struct tasklet_struct *emg_11_tasklet_struct;
  #line 4189 
  emg_11_tasklet_struct = arg0;
  #line 4193 
  if (emg_11_tasklet_struct->count.counter == 0) 
    #line 4194 
    if (emg_11_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 4195 
                                                                    (*(emg_11_tasklet_struct->func))(emg_11_emg_param_0_0);
  #line 4200 
  return;
}

#line 4205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 4210 
  arg0->func = arg1;
  #line 4211 
  arg0->data = arg2;
  #line 4212 
  arg0->count.counter = 0;
  #line 4215 
  return;
}

#line 4220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 4223 
  unsigned long emg_13_emg_param_0_0;
  #line 4224 
  struct tasklet_struct *emg_13_tasklet_struct;
  #line 4227 
  emg_13_tasklet_struct = arg0;
  #line 4231 
  if (emg_13_tasklet_struct->count.counter == 0) 
    #line 4232 
    if (emg_13_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 4233 
                                                                    (*(emg_13_tasklet_struct->func))(emg_13_emg_param_0_0);
  #line 4238 
  return;
}

#line 4243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 4246 
  int emg_1_ret;
  #line 4249 
  emg_1_ret = emg_ath5k_pci_driver_init();
  #line 4250 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 4253 
  if (ldv_undef_int() != 0) {
    #line 4255 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 4259 
    emg_ath5k_pci_driver_exit();
  }
  else 
       #line 4263 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 4267 
  return (void *)0;
}

#line 4272  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/ath/ath5k/ath5k.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 4274 
  ldv_initialize();
  #line 4276 
  emg_entry_point_insmod((void *)0);
  #line 4278 
  return 0;
}

