/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_69 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_149 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 325 
struct poll_table_struct;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 892 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
typedef enum irqreturn irqreturn_t;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_269 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_269 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_307 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_307 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_309 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_314 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_315 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_313 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_314 _addr_bnd ;
   struct __anonstruct__addr_pkey_315 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_312 {
   void *_addr ;
   union __anonunion_313 __anonCompField___anonstruct__sigfault_312_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_316 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_317 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_308 _kill ;
   struct __anonstruct__timer_309 _timer ;
   struct __anonstruct__rt_310 _rt ;
   struct __anonstruct__sigchld_311 _sigchld ;
   struct __anonstruct__sigfault_312 _sigfault ;
   struct __anonstruct__sigpoll_316 _sigpoll ;
   struct __anonstruct__sigsys_317 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_322 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_322 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_327 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_327 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_329 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_329 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 248 
struct acpi_device;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_436 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_435 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_436 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_435 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pci.h"
struct pci_sysdata {
   int domain ;
   int node ;
   struct acpi_device *companion ;
   void *iommu ;
   void *fwnode ;
   bool vmd_domain ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_11220 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_11220 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_524 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_525 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_526 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_527 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_524 ports ;
   struct __anonstruct_icmpt_525 icmpt ;
   struct __anonstruct_dnports_526 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_527 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_528 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_528 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_653 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_652 {
   struct __anonstruct_653 __anonCompField___anonunion_652_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_652 __anonCompField_sock_cgroup_data_154 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15271 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15272 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15271 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15272 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
struct mfd_cell;
#line 535 
struct property_entry;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device_info {
   struct device *parent ;
   struct fwnode_handle *fwnode ;
   bool of_node_reused ;
   char *name ;
   int id ;
   struct resource *res ;
   unsigned int num_res ;
   void *data ;
   size_t size_data ;
   u64 dma_mask ;
   struct property_entry *properties ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_703 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_703 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_704 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_704 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_708 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_710 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_711 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_709 {
   struct __anonstruct_elv_710 elv ;
   struct __anonstruct_flush_711 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_712 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_707 __anonCompField_request_164 ;
   union __anonunion_708 __anonCompField_request_165 ;
   union __anonunion_709 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_712 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_729 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_728 {
   void *validation_data ;
   struct __anonstruct_729 __anonCompField___anonunion_728_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_728 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_803 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_804 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_802 {
   struct __anonstruct_803 __anonCompField___anonunion_802_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_804 __anonCompField___anonunion_802_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_802 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_806 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_806 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_819 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_819 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_841 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_841 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_843 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   __addrpair skc_addrpair ;
   struct __anonstruct_843 __anonCompField___anonunion_842_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_844 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_846 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   __portpair skc_portpair ;
   struct __anonstruct_846 __anonCompField___anonunion_845_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_844 __anonCompField_sock_common_179 ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_847 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_848 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_849 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_850 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_851 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_852 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_853 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_852 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_853 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_854 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_889 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_889 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_platform.h"
enum dev_prop_type {
    DEV_PROP_U8 = 0,
    DEV_PROP_U16 = 1,
    DEV_PROP_U32 = 2,
    DEV_PROP_U64 = 3,
    DEV_PROP_STRING = 4
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
union __anonunion_value_962 {
   u8 u8_data ;
   u16 u16_data ;
   u32 u32_data ;
   u64 u64_data ;
   char *str ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
union __anonunion_961 {
   void *pointer ;
   union __anonunion_value_962 value ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
struct property_entry {
   char *name ;
   size_t length ;
   bool is_array ;
   enum dev_prop_type type ;
   union __anonunion_961 __anonCompField_property_entry_191 ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct fcram_hash_ipv4 {
   u64 header ;
   u64 addrs ;
   u64 ports ;
   u64 action ;
};
#line 2732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct rx_pkt_hdr1 {
   u8 hwrsvd1 ;
   u8 tcammatch ;
   u8 hwrsvd2 : 2 ;
   u8 hashit : 1 ;
   u8 exact : 1 ;
   u8 hzfvld : 1 ;
   u8 hashsidx : 3 ;
   u8 zcrsvd ;
   u8 hwrsvd3 : 4 ;
   u8 zflowid0 : 4 ;
   u8 zflowid1 ;
   u8 hashval2_0 ;
   u8 hashval2_1 ;
   u8 hwrsvd4 : 4 ;
   u8 hashval1_0 : 4 ;
   u8 hashval1_1 ;
   u8 hashval1_2 ;
   u8 hwrsvd5 ;
   u8 hwrsvd6 ;
   u8 usrdata_0 ;
   u8 usrdata_1 ;
   u8 usrdata_2 ;
   u8 usrdata_3 ;
   u8 usrdata_4 ;
};
#line 2801  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct tx_pkt_hdr {
   __le64 flags ;
   __le64 resv ;
};
#line 2834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct tx_buff_info {
   struct sk_buff *skb ;
   u64 mapping ;
};
#line 2839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct txdma_mailbox {
   __le64 tx_dma_pre_st ;
   __le64 tx_cs ;
   __le64 tx_ring_kick ;
   __le64 tx_ring_hdl ;
   __le64 resv1 ;
   __le32 tx_rng_err_logl ;
   __le32 tx_rng_err_logh ;
   __le64 resv2[2U] ;
} __attribute__((__aligned__(64)));
#line 2853 
struct niu;
#line 2853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct tx_ring_info {
   struct tx_buff_info tx_buffs[256U] ;
   struct niu *np ;
   u64 tx_cs ;
   int pending ;
   int prod ;
   int cons ;
   int wrap_bit ;
   u16 last_pkt_cnt ;
   u16 tx_channel ;
   u16 mark_counter ;
   u16 mark_freq ;
   u16 mark_pending ;
   u16 __pad ;
   struct txdma_mailbox *mbox ;
   __le64 *descr ;
   u64 tx_packets ;
   u64 tx_bytes ;
   u64 tx_errors ;
   u64 mbox_dma ;
   u64 descr_dma ;
   int max_burst ;
};
#line 2888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct rxdma_mailbox {
   __le64 rx_dma_ctl_stat ;
   __le64 rbr_stat ;
   __le32 rbr_hdl ;
   __le32 rbr_hdh ;
   __le64 resv1 ;
   __le32 rcrstat_c ;
   __le32 rcrstat_b ;
   __le64 rcrstat_a ;
   __le64 resv2[2U] ;
} __attribute__((__aligned__(64)));
#line 2907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct rx_ring_info {
   struct niu *np ;
   int rx_channel ;
   u16 rbr_block_size ;
   u16 rbr_blocks_per_page ;
   u16 rbr_sizes[4U] ;
   unsigned int rcr_index ;
   unsigned int rcr_table_size ;
   unsigned int rbr_index ;
   unsigned int rbr_pending ;
   unsigned int rbr_refill_pending ;
   unsigned int rbr_kick_thresh ;
   unsigned int rbr_table_size ;
   struct page **rxhash ;
   struct rxdma_mailbox *mbox ;
   __le64 *rcr ;
   __le32 *rbr ;
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 rx_dropped ;
   u64 rx_errors ;
   u64 mbox_dma ;
   u64 rcr_dma ;
   u64 rbr_dma ;
   int nonsyn_window ;
   int nonsyn_threshold ;
   int syn_window ;
   int syn_threshold ;
   int rcr_pkt_threshold ;
   int rcr_timeout ;
};
#line 2984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_vpd {
   char model[32U] ;
   char board_model[16U] ;
   char version[64U] ;
   char phy_type[8U] ;
   u8 mac_num ;
   u8 __pad ;
   u8 local_mac[6U] ;
   int fcode_major ;
   int fcode_minor ;
};
#line 2996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_altmac_rdc {
   u8 alt_mac_num ;
   u8 rdc_num ;
   u8 mac_pref ;
};
#line 3002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_vlan_rdc {
   u8 rdc_num ;
   u8 vlan_pref ;
};
#line 3007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_classifier {
   struct niu_altmac_rdc alt_mac_mappings[16U] ;
   struct niu_vlan_rdc vlan_mappings[4096U] ;
   u16 tcam_top ;
   u16 tcam_sz ;
   u16 tcam_valid_entries ;
   u16 num_alt_mac_mappings ;
   u32 h1_init ;
   u16 h2_init ;
};
#line 3023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct rdc_table {
   u8 rxdma_channel[16U] ;
};
#line 3027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_rdc_tables {
   struct rdc_table tables[8U] ;
   int first_table_num ;
   int num_tables ;
};
#line 3038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct phy_probe_info {
   u32 phy_id[3U][4U] ;
   u8 phy_port[3U][4U] ;
   u8 cur[3U] ;
   struct device_attribute phy_port_attrs[12U] ;
   struct device_attribute phy_type_attrs[12U] ;
   struct device_attribute phy_id_attrs[12U] ;
};
#line 3048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_tcam_entry {
   u8 valid ;
   u64 key[4U] ;
   u64 key_mask[4U] ;
   u64 assoc_data ;
};
#line 3056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct __anonstruct_pci_963 {
   int domain ;
   int bus ;
   int device ;
};
#line 3056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
union niu_parent_id {
   struct __anonstruct_pci_963 pci ;
   struct device_node *of ;
};
#line 3066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_parent {
   struct platform_device *plat_dev ;
   int index ;
   union niu_parent_id id ;
   struct niu *ports[4U] ;
   atomic_t refcnt ;
   struct list_head list ;
   spinlock_t lock ;
   u32 flags ;
   u32 port_phy ;
   u8 rxchan_per_port[4U] ;
   u8 txchan_per_port[4U] ;
   struct niu_rdc_tables rdc_group_cfg[4U] ;
   u8 rdc_default[4U] ;
   u8 ldg_map[69U] ;
   u8 plat_type ;
   u8 num_ports ;
   u16 tcam_num_entries ;
   int rxdma_clock_divider ;
   struct phy_probe_info phy_probe_info ;
   struct niu_tcam_entry tcam[256U] ;
   u64 l2_cls[2U] ;
   u64 l3_cls[4U] ;
   u64 tcam_key[12U] ;
   u64 flow_key[12U] ;
   u16 l3_cls_refcnt[4U] ;
   u8 l3_cls_pid[4U] ;
};
#line 3128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_ops {
   void *(*alloc_coherent)(struct device *, size_t , u64 *, gfp_t ) ;
   void (*free_coherent)(struct device *, size_t , void *, u64 ) ;
   u64 (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction ) ;
   void (*unmap_page)(struct device *, u64 , size_t , enum dma_data_direction ) ;
   u64 (*map_single)(struct device *, void *, size_t , enum dma_data_direction ) ;
   void (*unmap_single)(struct device *, u64 , size_t , enum dma_data_direction ) ;
};
#line 3145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_link_config {
   u32 supported ;
   u32 advertising ;
   u16 speed ;
   u8 duplex ;
   u8 autoneg ;
   u32 active_advertising ;
   u16 active_speed ;
   u8 active_duplex ;
   u8 active_autoneg ;
   u8 loopback_mode ;
};
#line 3169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_ldg {
   struct napi_struct napi ;
   struct niu *np ;
   u8 ldg_num ;
   u8 timer ;
   u64 v0 ;
   u64 v1 ;
   u64 v2 ;
   unsigned int irq ;
};
#line 3178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_xmac_stats {
   u64 tx_frames ;
   u64 tx_bytes ;
   u64 tx_fifo_errors ;
   u64 tx_overflow_errors ;
   u64 tx_max_pkt_size_errors ;
   u64 tx_underflow_errors ;
   u64 rx_local_faults ;
   u64 rx_remote_faults ;
   u64 rx_link_faults ;
   u64 rx_align_errors ;
   u64 rx_frags ;
   u64 rx_mcasts ;
   u64 rx_bcasts ;
   u64 rx_hist_cnt1 ;
   u64 rx_hist_cnt2 ;
   u64 rx_hist_cnt3 ;
   u64 rx_hist_cnt4 ;
   u64 rx_hist_cnt5 ;
   u64 rx_hist_cnt6 ;
   u64 rx_hist_cnt7 ;
   u64 rx_octets ;
   u64 rx_code_violations ;
   u64 rx_len_errors ;
   u64 rx_crc_errors ;
   u64 rx_underflows ;
   u64 rx_overflows ;
   u64 pause_off_state ;
   u64 pause_on_state ;
   u64 pause_received ;
};
#line 3212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_bmac_stats {
   u64 tx_underflow_errors ;
   u64 tx_max_pkt_size_errors ;
   u64 tx_bytes ;
   u64 tx_frames ;
   u64 rx_overflows ;
   u64 rx_frames ;
   u64 rx_align_errors ;
   u64 rx_crc_errors ;
   u64 rx_len_errors ;
   u64 pause_off_state ;
   u64 pause_on_state ;
   u64 pause_received ;
};
#line 3229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
union niu_mac_stats {
   struct niu_xmac_stats xmac ;
   struct niu_bmac_stats bmac ;
};
#line 3234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu_phy_ops {
   int (*serdes_init)(struct niu *) ;
   int (*xcvr_init)(struct niu *) ;
   int (*link_status)(struct niu *, int *) ;
};
#line 3241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
struct niu {
   void *regs ;
   struct net_device *dev ;
   struct pci_dev *pdev ;
   struct device *device ;
   struct niu_parent *parent ;
   u32 flags ;
   u32 msg_enable ;
   char irq_name[43U][22U] ;
   spinlock_t lock ;
   struct niu_ops *ops ;
   union niu_mac_stats mac_stats ;
   struct rx_ring_info *rx_rings ;
   struct tx_ring_info *tx_rings ;
   int num_rx_rings ;
   int num_tx_rings ;
   struct niu_ldg ldg[64U] ;
   int num_ldg ;
   void *mac_regs ;
   unsigned long ipp_off ;
   unsigned long pcs_off ;
   unsigned long xpcs_off ;
   struct timer_list timer ;
   u64 orig_led_state ;
   struct niu_phy_ops *phy_ops ;
   int phy_addr ;
   struct niu_link_config link_config ;
   struct work_struct reset_task ;
   u8 port ;
   u8 mac_xcvr ;
   struct niu_classifier clas ;
   struct niu_vpd vpd ;
   u32 eeprom_len ;
   struct platform_device *op ;
   void *vir_regs_1 ;
   void *vir_regs_2 ;
};
#line 2286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
struct niu_phy_template {
   struct niu_phy_ops *ops ;
   u32 phy_addr_base ;
};
#line 6228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
union __anonunion___u_965 {
   struct rx_ring_info *__val ;
   char __c[1U] ;
};
#line 6259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
union __anonunion___u_967 {
   struct tx_ring_info *__val ;
   char __c[1U] ;
};
#line 7656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_xmac_stat_keys_968 {
   char string[32U] ;
};
#line 7692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_bmac_stat_keys_969 {
   char string[32U] ;
};
#line 7711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_rxchan_stat_keys_970 {
   char string[32U] ;
};
#line 7723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
struct __anonstruct_niu_txchan_stat_keys_971 {
   char string[32U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2754 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2754 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2755 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2755 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2771 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2771 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2775 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2775 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2776 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2777 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2776 __anonCompField_media_link_90 ;
   union __anonunion_2777 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2779 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2778 {
   struct __anonstruct_dev_2779 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2778 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2793 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2794 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2792 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2793 i2c ;
   struct __anonstruct_custom_2794 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2792 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3695 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3695 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_niu_interrupt_19 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_devattr_instance_show_num_ports_14 {
   struct device *arg0 ;
   struct device_attribute *arg1 ;
   int signal_pending ;
};
#line 36  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_niu_pci_driver_21 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 4  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
#line 4 
void ldv_atomic_add(int i, atomic_t *v);
#line 7 
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  #line 45 
  unsigned long res;
  #line 46 
  ldv_inline_asm();
  #line 51 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 *p)
{
  #line 50 
  return *p;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 49 
#line 980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static size_t cif_strlen(char *s);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_69 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 60 
#line 343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void atomic_add(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 29 
#line 29 
void _raw_spin_lock_irq(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 41 
#line 41 
void _raw_spin_unlock_irq(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_lock_irq_lock_of_niu(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock_irq_lock_of_niu(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 996  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_niu(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_niu_parent(spinlock_t *lock, unsigned long flags);
#line 26 
#line 1073 
static void cif_mutex_lock_niu_parent_lock(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 987 
static void cif___ldv_spin_lock_lock_of_niu(spinlock_t *lock);
#line 35 
#line 1005 
static void cif___ldv_spin_lock_lock_of_niu_parent(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_mutex_unlock_niu_parent_lock(struct mutex *lock);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 80 
extern u64 jiffies_64;
#line 81 
#line 81 
extern unsigned long jiffies;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 182 
#line 182 
void add_timer(struct timer_list *);
#line 188 
#line 1057  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 1119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static bool cif_flush_work(struct work_struct *work);
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 461 
bool cancel_work_sync(struct work_struct *);
#line 554 
#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_149 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 209 
#line 209 
void iounmap(void *);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 262 
int sysfs_create_link(struct kobject *, struct kobject *, char *);
#line 267 
#line 267 
void sysfs_remove_link(struct kobject *, char *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1023  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_platdata(struct device *dev)
{
  #line 1583 
  return dev->platform_data;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 637  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1094 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_add(struct page *page, int nr)
{
  #line 93 
  atomic_add(nr,& page->_refcount);
  #line 94 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 95 
                                                                   __page_ref_mod(page,nr);
  #line 96 
  return;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pci.h"
__inline static int pci_domain_nr(struct pci_bus *bus)
{
  #line 41 
  struct pci_sysdata *sd = (struct pci_sysdata *)bus->sysdata;
  #line 43 
  return sd->domain;
}

#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1019 
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1117 
#line 1117 
struct sk_buff *skb_realloc_headroom(struct sk_buff *, unsigned int);
#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff *skb)
{
  #line 2551 
  ;
  #line 2551 
  return (int)((unsigned int)skb->__anonCompField_sk_buff_98.__anonCompField___anonunion_540_97.csum_start - skb_headroom(skb));
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb)
{
  #line 2706 
  if (skb->__anonCompField_sk_buff_96.__anonCompField___anonunion_538_95.destructor != (void (*)(struct sk_buff *))0) {
    #line 2707 
    (*(skb->__anonCompField_sk_buff_96.__anonCompField___anonunion_538_95.destructor))(skb);
    #line 2708 
    skb->__anonCompField_sk_buff_96.__anonCompField___anonunion_538_95.destructor = (void (*)(struct sk_buff *))0;
    #line 2709 
    skb->__anonCompField_sk_buff_93.sk = (struct sock *)0;
  }
  else 
    #line 2711 
    if ((long)(skb->__anonCompField_sk_buff_93.sk != (struct sock *)0) != 0L) {
      #line 2712 
      ldv_inline_asm();
      #line 2713 
      ldv_inline_asm();
      #line 2714 
      ldv_inline_asm();
      #line 2711 
      ;
    }
  #line 2714 
  return;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  #line 3926 
  if ((unsigned int)debug_value > 31U) 
                                       #line 3927 
                                       return (unsigned int)default_msg_enable_bits;
  #line 3928 
  if (debug_value == 0) 
                        #line 3929 
                        return 0U;
  #line 3931 
  return (1U << debug_value) + 4294967295U;
}

#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4131 
#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4741 
void netdev_printk(char *, struct net_device *, char * , ...);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  #line 532 
  return skb_put_padto(skb,60U);
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 47 
void platform_device_unregister(struct platform_device *);
#line 94 
#line 94 
struct platform_device *platform_device_register_full(struct platform_device_info *);
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static struct platform_device *platform_device_register_resndata(struct device *parent, char *name, int id, struct resource *res, unsigned int num, void *data, size_t size)
{
  #line 116 
  struct platform_device_info pdevinfo = {.parent = parent, .fwnode = (struct fwnode_handle *)0, .of_node_reused = (_Bool)0, .name = name, .id = id, .res = res, .num_res = num, .data = data, .size_data = size, .dma_mask = 0ULL, .properties = (struct property_entry *)0};
  #line 127 
  return platform_device_register_full(& pdevinfo);
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static struct platform_device *platform_device_register_simple(char *name, int id, struct resource *res, unsigned int num)
{
  #line 156 
  return platform_device_register_resndata((struct device *)0,name,id,res,num,
                                        (void *)0,0UL);
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_adv_to_ethtool_adv_t(u32 adv)
{
  #line 172 
  u32 result = 0U;
  #line 174 
  if ((adv & 32U) != 0U) 
                         #line 175 
                         result |= 1U;
  #line 176 
  if ((adv & 64U) != 0U) 
                         #line 177 
                         result |= 2U;
  #line 178 
  if ((adv & 128U) != 0U) 
                          #line 179 
                          result |= 4U;
  #line 180 
  if ((adv & 256U) != 0U) 
                          #line 181 
                          result |= 8U;
  #line 182 
  if ((adv & 1024U) != 0U) 
                           #line 183 
                           result |= 8192U;
  #line 184 
  if ((adv & 2048U) != 0U) 
                           #line 185 
                           result |= 16384U;
  #line 187 
  return result;
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u32 mii_ctrl1000_to_ethtool_adv_t(u32 adv)
{
  #line 242 
  u32 result = 0U;
  #line 244 
  if ((adv & 256U) != 0U) 
                          #line 245 
                          result |= 16U;
  #line 246 
  if ((adv & 512U) != 0U) 
                          #line 247 
                          result |= 32U;
  #line 249 
  return result;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 2882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.h"
__inline static u32 niu_tx_avail(struct tx_ring_info *tp)
{
  #line 2884 
  return (unsigned int)(tp->pending - ((tp->prod - tp->cons) & 255));
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static char version[27U] = {(char)'n', (char)'i', (char)'u'};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct pci_device_id niu_pci_tbl[2U] = {{.vendor = 4238U, .device = 43981U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
struct pci_device_id __mod_pci__niu_pci_tbl_device_table[2U];
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_debug;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int debug = -1;
#line 99 
#line 2350 
static int serdes_init_10g_serdes(struct niu *np);
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __niu_wait_bits_clear_mac(struct niu *np, unsigned long reg, u64 bits, int limit, int delay)
{
  #line 104 
  while (1) {
    #line 104 
    limit --;
    #line 104 
    if (! (limit >= 0)) 
                        #line 104 
                        break;
    {
      #line 105 
      u64 val = readq(np->mac_regs + reg);
      #line 107 
      if ((val & bits) == 0ULL) 
                                #line 108 
                                break;
      #line 109 
      if (0 != 0) 
        #line 109 
        if (delay > 19999) 
                           #line 109 
                           __bad_udelay(); else 
                                                #line 109 
                                                __const_udelay((unsigned long)delay * 4295UL);
      else 
           #line 109 
           __udelay((unsigned long)delay);
    }
  }
  #line 111 
  if (limit < 0) 
                 #line 112 
                 return -19;
  #line 113 
  return 0;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __niu_set_and_wait_clear_mac(struct niu *np, unsigned long reg, u64 bits, int limit, int delay, char *reg_name)
{
  #line 120 
  int err;
  #line 122 
  writeq(bits,np->mac_regs + reg);
  #line 123 
  err = __niu_wait_bits_clear_mac(np,reg,bits,limit,delay);
  #line 124 
  if (err != 0) {
    #line 125 
    ;
    #line 125 
    ;
    #line 125 
    ;
    #line 125 
    netdev_err(np->dev,(char *)"bits (%llx) of register %s would not clear, val[%llx]\n",bits,reg_name,readq(np->mac_regs + reg));
  }
  #line 128 
  return err;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __niu_wait_bits_clear_ipp(struct niu *np, unsigned long reg, u64 bits, int limit, int delay)
{
  #line 139 
  while (1) {
    #line 139 
    limit --;
    #line 139 
    if (! (limit >= 0)) 
                        #line 139 
                        break;
    {
      #line 140 
      u64 val = readq(np->regs + (np->ipp_off + reg));
      #line 142 
      if ((val & bits) == 0ULL) 
                                #line 143 
                                break;
      #line 144 
      if (0 != 0) 
        #line 144 
        if (delay > 19999) 
                           #line 144 
                           __bad_udelay(); else 
                                                #line 144 
                                                __const_udelay((unsigned long)delay * 4295UL);
      else 
           #line 144 
           __udelay((unsigned long)delay);
    }
  }
  #line 146 
  if (limit < 0) 
                 #line 147 
                 return -19;
  #line 148 
  return 0;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __niu_set_and_wait_clear_ipp(struct niu *np, unsigned long reg, u64 bits, int limit, int delay, char *reg_name)
{
  #line 155 
  int err;
  #line 156 
  u64 val;
  #line 158 
  val = readq(np->regs + (np->ipp_off + reg));
  #line 159 
  val |= bits;
  #line 160 
  writeq(val,np->regs + (np->ipp_off + reg));
  #line 162 
  err = __niu_wait_bits_clear_ipp(np,reg,bits,limit,delay);
  #line 163 
  if (err != 0) {
    #line 164 
    ;
    #line 164 
    ;
    #line 164 
    ;
    #line 164 
    netdev_err(np->dev,(char *)"bits (%llx) of register %s would not clear, val[%llx]\n",bits,reg_name,readq(np->regs + (np->ipp_off + reg)));
  }
  #line 167 
  return err;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __niu_wait_bits_clear(struct niu *np, unsigned long reg, u64 bits, int limit, int delay)
{
  #line 178 
  while (1) {
    #line 178 
    limit --;
    #line 178 
    if (! (limit >= 0)) 
                        #line 178 
                        break;
    {
      #line 179 
      u64 val = readq(np->regs + reg);
      #line 181 
      if ((val & bits) == 0ULL) 
                                #line 182 
                                break;
      #line 183 
      if (0 != 0) 
        #line 183 
        if (delay > 19999) 
                           #line 183 
                           __bad_udelay(); else 
                                                #line 183 
                                                __const_udelay((unsigned long)delay * 4295UL);
      else 
           #line 183 
           __udelay((unsigned long)delay);
    }
  }
  #line 185 
  if (limit < 0) 
                 #line 186 
                 return -19;
  #line 187 
  return 0;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __niu_set_and_wait_clear(struct niu *np, unsigned long reg, u64 bits, int limit, int delay, char *reg_name)
{
  #line 199 
  int err;
  #line 201 
  writeq(bits,np->regs + reg);
  #line 202 
  err = __niu_wait_bits_clear(np,reg,bits,limit,delay);
  #line 203 
  if (err != 0) {
    #line 204 
    ;
    #line 204 
    ;
    #line 204 
    ;
    #line 204 
    netdev_err(np->dev,(char *)"bits (%llx) of register %s would not clear, val[%llx]\n",bits,reg_name,readq(np->regs + reg));
  }
  #line 207 
  return err;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_ldg_rearm(struct niu *np, struct niu_ldg *lp, int on)
{
  #line 217 
  u64 val = (unsigned long long)lp->timer;
  #line 219 
  if (on != 0) 
               #line 220 
               val |= 2147483648ULL;
  #line 222 
  writeq(val,np->regs + ((unsigned long)lp->ldg_num * 8192UL + 8388632UL));
  #line 223 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ldn_irq_enable(struct niu *np, int ldn, int on)
{
  #line 227 
  unsigned long mask_reg;
  #line 227 
  unsigned long bits;
  #line 228 
  u64 val;
  #line 230 
  if ((unsigned int)ldn > 68U) 
                               #line 231 
                               return -22;
  #line 233 
  if (ldn <= 63) {
    #line 234 
    mask_reg = ((unsigned long)ldn + 1280UL) * 8192UL;
    #line 235 
    bits = 3UL;
  }
  else {
    #line 237 
    mask_reg = ((unsigned long)(ldn + -64) + 1408UL) * 8192UL;
    #line 238 
    bits = 3UL;
  }
  #line 241 
  val = readq(np->regs + mask_reg);
  #line 242 
  if (on != 0) 
               #line 243 
               val = (unsigned long long)(~ bits) & val; else 
                                                              #line 245 
                                                              val |= (unsigned long long)bits;
  #line 246 
  writeq(val,np->regs + mask_reg);
  #line 248 
  return 0;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_enable_ldn_in_ldg(struct niu *np, struct niu_ldg *lp, int on)
{
  #line 254 
  int i;
  #line 253 
  struct niu_parent *parent = np->parent;
  #line 256 
  i = 0;
  #line 256 
  while (i <= 68) {
    {
      #line 257 
      int err;
      #line 259 
      if ((int)parent->ldg_map[i] != (int)lp->ldg_num) 
                                                       #line 260 
                                                       goto __Cont;
      #line 262 
      err = niu_ldn_irq_enable(np,i,on);
      #line 263 
      if (err != 0) 
                    #line 264 
                    return err;
    }
    #line 256 
    __Cont: 
            #line 256 
    i ++;
  }
  #line 266 
  return 0;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_enable_interrupts(struct niu *np, int on)
{
  #line 271 
  int i;
  #line 273 
  i = 0;
  #line 273 
  while (np->num_ldg > i) {
    {
      #line 275 
      int err;
      #line 274 
      struct niu_ldg *lp = & np->ldg[i];
      #line 277 
      err = niu_enable_ldn_in_ldg(np,lp,on);
      #line 278 
      if (err != 0) 
                    #line 279 
                    return err;
    }
    #line 273 
    i ++;
  }
  #line 281 
  i = 0;
  #line 281 
  while (np->num_ldg > i) {
    #line 282 
    niu_ldg_rearm(np,& np->ldg[i],on);
    #line 281 
    i ++;
  }
  #line 284 
  return 0;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u32 phy_encode(u32 type, int port)
{
  #line 289 
  return type << port * 2;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u32 phy_decode(u32 val, int port)
{
  #line 294 
  return (val >> port * 2) & 3U;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mdio_wait(struct niu *np)
{
  #line 300 
  u64 val;
  #line 299 
  int limit = 1000;
  #line 302 
  while (1) {
    #line 302 
    limit --;
    #line 302 
    if (! (limit > 0)) 
                       #line 302 
                       break;
    #line 303 
    val = readq(np->regs + 1663000UL);
    #line 304 
    if ((val & 65536ULL) != 0ULL) 
                                  #line 305 
                                  return (int)val & 65535;
    #line 307 
    __const_udelay(42950UL);
  }
  #line 310 
  return -19;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mdio_read(struct niu *np, int port, int dev, int reg)
{
  #line 315 
  int err;
  #line 317 
  writeq((unsigned long long)((((port << 23) | (dev << 18)) | 131072) | reg),np->regs + 1663000UL);
  #line 318 
  err = mdio_wait(np);
  #line 319 
  if (err < 0) 
               #line 320 
               return err;
  #line 322 
  writeq((unsigned long long)((((port << 23) | 805306368) | (dev << 18)) | 131072),np->regs + 1663000UL);
  #line 323 
  return mdio_wait(np);
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mdio_write(struct niu *np, int port, int dev, int reg, int data)
{
  #line 328 
  int err;
  #line 330 
  writeq((unsigned long long)((((port << 23) | (dev << 18)) | 131072) | reg),np->regs + 1663000UL);
  #line 331 
  err = mdio_wait(np);
  #line 332 
  if (err < 0) 
               #line 333 
               return err;
  #line 335 
  writeq((unsigned long long)(((((port << 23) | 268435456) | (dev << 18)) | 131072) | data),np->regs + 1663000UL);
  #line 336 
  err = mdio_wait(np);
  #line 337 
  if (err < 0) 
               #line 338 
               return err;
  #line 340 
  return 0;
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mii_read(struct niu *np, int port, int reg)
{
  #line 345 
  writeq((unsigned long long)((((port << 23) | 1610612736) | (reg << 18)) | 131072),np->regs + 1663000UL);
  #line 346 
  return mdio_wait(np);
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mii_write(struct niu *np, int port, int reg, int data)
{
  #line 351 
  int err;
  #line 353 
  writeq((unsigned long long)(((((port << 23) | 1342177280) | (reg << 18)) | 131072) | data),np->regs + 1663000UL);
  #line 354 
  err = mdio_wait(np);
  #line 355 
  if (err < 0) 
               #line 356 
               return err;
  #line 358 
  return 0;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr2_set_tx_cfg(struct niu *np, unsigned long channel, u32 val)
{
  #line 363 
  int err;
  #line 365 
  err = mdio_write(np,(int)np->port,30,(int)((channel + 8256UL) * (unsigned long)4U),(int)val & 65535);
  #line 368 
  if (err == 0) 
                #line 369 
                err = mdio_write(np,(int)np->port,30,(int)(channel * (unsigned long)4U + (unsigned long)33025U),(int)(val >> 16));
  #line 372 
  return err;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr2_set_rx_cfg(struct niu *np, unsigned long channel, u32 val)
{
  #line 377 
  int err;
  #line 379 
  err = mdio_write(np,(int)np->port,30,(int)((channel + 8264UL) * (unsigned long)4U),(int)val & 65535);
  #line 382 
  if (err == 0) 
                #line 383 
                err = mdio_write(np,(int)np->port,30,(int)(channel * (unsigned long)4U + (unsigned long)33057U),(int)(val >> 16));
  #line 386 
  return err;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_niu_10g_fiber(struct niu *np)
{
  #line 393 
  u32 tx_cfg;
  #line 393 
  u32 rx_cfg;
  #line 394 
  unsigned long i;
  #line 392 
  struct niu_link_config *lp = & np->link_config;
  #line 396 
  tx_cfg = 3585U;
  #line 397 
  rx_cfg = 561409U;
  #line 401 
  if ((unsigned int)lp->loopback_mode == 1U) {
    #line 402 
    u16 test_cfg = (unsigned short)128U;
    #line 404 
    mdio_write(np,(int)np->port,30,32772,(int)test_cfg);
    #line 407 
    tx_cfg |= 2U;
    #line 408 
    rx_cfg |= 2U;
  }
  #line 412 
  i = 0UL;
  #line 412 
  while (i <= 3UL) {
    {
      #line 413 
      int err = esr2_set_tx_cfg(np,i,tx_cfg);
      #line 414 
      if (err != 0) 
                    #line 415 
                    return err;
    }
    #line 412 
    i ++;
  }
  #line 418 
  i = 0UL;
  #line 418 
  while (i <= 3UL) {
    {
      #line 419 
      int err_0 = esr2_set_rx_cfg(np,i,rx_cfg);
      #line 420 
      if (err_0 != 0) 
                      #line 421 
                      return err_0;
    }
    #line 418 
    i ++;
  }
  #line 424 
  return 0;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_niu_1g_serdes(struct niu *np)
{
  #line 430 
  u16 pll_cfg;
  #line 430 
  u16 pll_sts;
  #line 432 
  u64 mask;
  #line 432 
  u64 val;
  #line 433 
  u32 tx_cfg;
  #line 433 
  u32 rx_cfg;
  #line 434 
  unsigned long i;
  #line 435 
  int err;
  #line 429 
  struct niu_link_config *lp = & np->link_config;
  #line 431 
  int max_retry = 100;
  #line 432 
  u64 sig = sig;
  #line 437 
  tx_cfg = 3617U;
  #line 439 
  rx_cfg = 37153U;
  #line 443 
  if ((unsigned int)np->port == 0U) 
                                    #line 444 
                                    rx_cfg |= 524288U;
  #line 446 
  if ((unsigned int)lp->loopback_mode == 1U) {
    #line 447 
    u16 test_cfg = (unsigned short)128U;
    #line 449 
    mdio_write(np,(int)np->port,30,32772,(int)test_cfg);
    #line 452 
    tx_cfg |= 2U;
    #line 453 
    rx_cfg |= 2U;
  }
  #line 457 
  pll_cfg = (unsigned short)9U;
  #line 459 
  err = mdio_write(np,(int)np->port,30,32768,(int)pll_cfg);
  #line 461 
  if (err != 0) {
    #line 462 
    netdev_err(np->dev,(char *)"NIU Port %d %s() mdio write to ESR2_TI_PLL_CFG_L failed\n",(int)np->port,(char *)"serdes_init_niu_1g_serdes");
    #line 464 
    return err;
  }
  #line 467 
  pll_sts = (unsigned short)1U;
  #line 469 
  err = mdio_write(np,(int)np->port,30,32770,(int)pll_sts);
  #line 471 
  if (err != 0) {
    #line 472 
    netdev_err(np->dev,(char *)"NIU Port %d %s() mdio write to ESR2_TI_PLL_STS_L failed\n",(int)np->port,(char *)"serdes_init_niu_1g_serdes");
    #line 474 
    return err;
  }
  #line 477 
  __const_udelay(859000UL);
  #line 480 
  i = 0UL;
  #line 480 
  while (i <= 3UL) {
    #line 481 
    err = esr2_set_tx_cfg(np,i,tx_cfg);
    #line 482 
    if (err != 0) 
                  #line 483 
                  return err;
    #line 480 
    i ++;
  }
  #line 486 
  i = 0UL;
  #line 486 
  while (i <= 3UL) {
    #line 487 
    err = esr2_set_rx_cfg(np,i,rx_cfg);
    #line 488 
    if (err != 0) 
                  #line 489 
                  return err;
    #line 486 
    i ++;
  }
  #line 492 
  switch ((int)np->port) {
    #line 493 
    case 0: 
            #line 493 
    ;
    #line 494 
    val = 805306368ULL;
    #line 495 
    mask = val;
    #line 496 
    break;
    #line 498 
    case 1: 
            #line 498 
    ;
    #line 499 
    val = 201326592ULL;
    #line 500 
    mask = val;
    #line 501 
    break;
    #line 503 
    default: 
             #line 503 
    ;
    #line 504 
    return -22;
  }
  #line 507 
  while (1) {
    #line 507 
    int tmp_0;
    #line 507 
    tmp_0 = max_retry;
    #line 507 
    max_retry --;
    #line 507 
    ;
    #line 507 
    if (! (tmp_0 != 0)) 
                        #line 507 
                        break;
    #line 508 
    sig = readq(np->regs + 1656832UL);
    #line 509 
    if ((sig & mask) == val) 
                             #line 510 
                             break;
    {
      #line 512 
      unsigned long __ms = 500UL;
      #line 512 
      while (1) {
        #line 512 
        unsigned long tmp;
        #line 512 
        tmp = __ms;
        #line 512 
        __ms --;
        #line 512 
        ;
        #line 512 
        if (! (tmp != 0UL)) 
                            #line 512 
                            break;
        #line 512 
        __const_udelay(4295000UL);
      }
    }
  }
  #line 515 
  if ((sig & mask) != val) {
    #line 516 
    netdev_err(np->dev,(char *)"Port %u signal bits [%08x] are not [%08x]\n",(int)np->port,(int)(sig & mask),(int)val);
    #line 518 
    return -19;
  }
  #line 521 
  return 0;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_niu_10g_serdes(struct niu *np)
{
  #line 527 
  u32 tx_cfg;
  #line 527 
  u32 rx_cfg;
  #line 527 
  u32 pll_cfg;
  #line 527 
  u32 pll_sts;
  #line 529 
  u64 mask;
  #line 529 
  u64 val;
  #line 530 
  unsigned long i;
  #line 531 
  int err;
  #line 526 
  struct niu_link_config *lp = & np->link_config;
  #line 528 
  int max_retry = 100;
  #line 529 
  u64 sig = sig;
  #line 533 
  tx_cfg = 3585U;
  #line 534 
  rx_cfg = 561409U;
  #line 538 
  if ((unsigned int)lp->loopback_mode == 1U) {
    #line 539 
    u16 test_cfg = (unsigned short)128U;
    #line 541 
    mdio_write(np,(int)np->port,30,32772,(int)test_cfg);
    #line 544 
    tx_cfg |= 2U;
    #line 545 
    rx_cfg |= 2U;
  }
  #line 549 
  pll_cfg = 11U;
  #line 551 
  err = mdio_write(np,(int)np->port,30,32768,(int)pll_cfg & 65535);
  #line 553 
  if (err != 0) {
    #line 554 
    netdev_err(np->dev,(char *)"NIU Port %d %s() mdio write to ESR2_TI_PLL_CFG_L failed\n",(int)np->port,(char *)"serdes_init_niu_10g_serdes");
    #line 556 
    return err;
  }
  #line 559 
  pll_sts = 1U;
  #line 561 
  err = mdio_write(np,(int)np->port,30,32770,(int)pll_sts & 65535);
  #line 563 
  if (err != 0) {
    #line 564 
    netdev_err(np->dev,(char *)"NIU Port %d %s() mdio write to ESR2_TI_PLL_STS_L failed\n",(int)np->port,(char *)"serdes_init_niu_10g_serdes");
    #line 566 
    return err;
  }
  #line 569 
  __const_udelay(859000UL);
  #line 572 
  i = 0UL;
  #line 572 
  while (i <= 3UL) {
    #line 573 
    err = esr2_set_tx_cfg(np,i,tx_cfg);
    #line 574 
    if (err != 0) 
                  #line 575 
                  return err;
    #line 572 
    i ++;
  }
  #line 578 
  i = 0UL;
  #line 578 
  while (i <= 3UL) {
    #line 579 
    err = esr2_set_rx_cfg(np,i,rx_cfg);
    #line 580 
    if (err != 0) 
                  #line 581 
                  return err;
    #line 578 
    i ++;
  }
  #line 586 
  switch ((int)np->port) {
    #line 587 
    case 0: 
            #line 587 
    ;
    #line 588 
    mask = 870318095ULL;
    #line 589 
    val = 870318080ULL;
    #line 596 
    break;
    #line 598 
    case 1: 
            #line 598 
    ;
    #line 599 
    mask = 203358448ULL;
    #line 600 
    val = 203358208ULL;
    #line 607 
    break;
    #line 609 
    default: 
             #line 609 
    ;
    #line 610 
    return -22;
  }
  #line 613 
  while (1) {
    #line 613 
    int tmp_0;
    #line 613 
    tmp_0 = max_retry;
    #line 613 
    max_retry --;
    #line 613 
    ;
    #line 613 
    if (! (tmp_0 != 0)) 
                        #line 613 
                        break;
    #line 614 
    sig = readq(np->regs + 1656832UL);
    #line 615 
    if ((sig & mask) == val) 
                             #line 616 
                             break;
    {
      #line 618 
      unsigned long __ms = 500UL;
      #line 618 
      while (1) {
        #line 618 
        unsigned long tmp;
        #line 618 
        tmp = __ms;
        #line 618 
        __ms --;
        #line 618 
        ;
        #line 618 
        if (! (tmp != 0UL)) 
                            #line 618 
                            break;
        #line 618 
        __const_udelay(4295000UL);
      }
    }
  }
  #line 621 
  if ((sig & mask) != val) {
    #line 622 
    printk((char *)"\001",(int)np->port,(int)(sig & mask),(int)val);
    #line 626 
    err = serdes_init_niu_1g_serdes(np);
    #line 627 
    if (err == 0) {
      #line 628 
      np->flags &= 4294705151U;
      #line 629 
      np->mac_xcvr = (unsigned char)2U;
    }
    else {
      #line 631 
      netdev_err(np->dev,(char *)"Port %u 10G/1G SERDES Link Failed\n",(int)np->port);
      #line 633 
      return -19;
    }
  }
  #line 636 
  return 0;
}

#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr_read_rxtx_ctrl(struct niu *np, unsigned long chan, u32 *val)
{
  #line 641 
  int err;
  #line 643 
  err = mdio_read(np,(int)np->port,30,(int)((chan + 8UL) * (unsigned long)16U));
  #line 644 
  if (err >= 0) {
    #line 645 
    *val = (unsigned int)err & 65535U;
    #line 646 
    err = mdio_read(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)129U));
    #line 648 
    if (err >= 0) 
                  #line 649 
                  *val |= (unsigned int)(err << 16);
    #line 650 
    err = 0;
  }
  #line 652 
  return err;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr_read_glue0(struct niu *np, unsigned long chan, u32 *val)
{
  #line 657 
  int err;
  #line 659 
  err = mdio_read(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)136U));
  #line 661 
  if (err >= 0) {
    #line 662 
    *val = (unsigned int)err & 65535U;
    #line 663 
    err = mdio_read(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)137U));
    #line 665 
    if (err >= 0) {
      #line 666 
      *val |= (unsigned int)(err << 16);
      #line 667 
      err = 0;
    }
  }
  #line 670 
  return err;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr_read_reset(struct niu *np, u32 *val)
{
  #line 675 
  int err;
  #line 677 
  err = mdio_read(np,(int)np->port,30,2);
  #line 679 
  if (err >= 0) {
    #line 680 
    *val = (unsigned int)err & 65535U;
    #line 681 
    err = mdio_read(np,(int)np->port,30,3);
    #line 683 
    if (err >= 0) {
      #line 684 
      *val |= (unsigned int)(err << 16);
      #line 685 
      err = 0;
    }
  }
  #line 688 
  return err;
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr_write_rxtx_ctrl(struct niu *np, unsigned long chan, u32 val)
{
  #line 693 
  int err;
  #line 695 
  err = mdio_write(np,(int)np->port,30,(int)((chan + 8UL) * (unsigned long)16U),(int)val & 65535);
  #line 697 
  if (err == 0) 
                #line 698 
                err = mdio_write(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)129U),(int)(val >> 16));
  #line 700 
  return err;
}

#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr_write_glue0(struct niu *np, unsigned long chan, u32 val)
{
  #line 705 
  int err;
  #line 707 
  err = mdio_write(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)136U),(int)val & 65535);
  #line 709 
  if (err == 0) 
                #line 710 
                err = mdio_write(np,(int)np->port,30,(int)(chan * (unsigned long)16U + (unsigned long)137U),(int)(val >> 16));
  #line 712 
  return err;
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int esr_reset(struct niu *np)
{
  #line 718 
  int err;
  #line 717 
  u32 reset = reset;
  #line 720 
  err = mdio_write(np,(int)np->port,30,2,0);
  #line 722 
  if (err != 0) 
                #line 723 
                return err;
  #line 724 
  err = mdio_write(np,(int)np->port,30,3,65535);
  #line 726 
  if (err != 0) 
                #line 727 
                return err;
  #line 728 
  __const_udelay(859000UL);
  #line 730 
  err = mdio_write(np,(int)np->port,30,2,65535);
  #line 732 
  if (err != 0) 
                #line 733 
                return err;
  #line 734 
  __const_udelay(859000UL);
  #line 736 
  err = mdio_write(np,(int)np->port,30,3,0);
  #line 738 
  if (err != 0) 
                #line 739 
                return err;
  #line 740 
  __const_udelay(859000UL);
  #line 742 
  err = esr_read_reset(np,& reset);
  #line 743 
  if (err != 0) 
                #line 744 
                return err;
  #line 745 
  if (reset != 0U) {
    #line 746 
    netdev_err(np->dev,(char *)"Port %u ESR_RESET did not clear [%08x]\n",(int)np->port,reset);
    #line 748 
    return -19;
  }
  #line 751 
  return 0;
}

#line 754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_10g(struct niu *np)
{
  #line 757 
  unsigned long ctrl_reg;
  #line 757 
  unsigned long test_cfg_reg;
  #line 757 
  unsigned long i;
  #line 758 
  u64 ctrl_val;
  #line 758 
  u64 test_cfg_val;
  #line 758 
  u64 sig;
  #line 758 
  u64 mask;
  #line 758 
  u64 val;
  #line 759 
  int err;
  #line 756 
  struct niu_link_config *lp = & np->link_config;
  #line 761 
  switch ((int)np->port) {
    #line 762 
    case 0: 
            #line 762 
    ;
    #line 763 
    ctrl_reg = 1654808UL;
    #line 764 
    test_cfg_reg = 1654816UL;
    #line 765 
    break;
    #line 766 
    case 1: 
            #line 766 
    ;
    #line 767 
    ctrl_reg = 1654832UL;
    #line 768 
    test_cfg_reg = 1654840UL;
    #line 769 
    break;
    #line 771 
    default: 
             #line 771 
    ;
    #line 772 
    return -22;
  }
  #line 774 
  ctrl_val = 38385375ULL;
  #line 786 
  test_cfg_val = 0ULL;
  #line 788 
  if ((unsigned int)lp->loopback_mode == 1U) 
                                             #line 789 
                                             test_cfg_val |= 170ULL;
  #line 799 
  writeq(ctrl_val,np->regs + ctrl_reg);
  #line 800 
  writeq(test_cfg_val,np->regs + test_cfg_reg);
  #line 803 
  i = 0UL;
  #line 803 
  while (i <= 3UL) {
    {
      #line 804 
      u32 rxtx_ctrl;
      #line 804 
      u32 glue0;
      #line 806 
      err = esr_read_rxtx_ctrl(np,i,& rxtx_ctrl);
      #line 807 
      if (err != 0) 
                    #line 808 
                    return err;
      #line 809 
      err = esr_read_glue0(np,i,& glue0);
      #line 810 
      if (err != 0) 
                    #line 811 
                    return err;
      #line 813 
      rxtx_ctrl &= 4282384383U;
      #line 814 
      rxtx_ctrl |= 8388609U;
      #line 817 
      glue0 &= 4177522688U;
      #line 820 
      glue0 |= 50343935U;
      #line 826 
      err = esr_write_rxtx_ctrl(np,i,rxtx_ctrl);
      #line 827 
      if (err != 0) 
                    #line 828 
                    return err;
      #line 829 
      err = esr_write_glue0(np,i,glue0);
      #line 830 
      if (err != 0) 
                    #line 831 
                    return err;
    }
    #line 803 
    i ++;
  }
  #line 834 
  err = esr_reset(np);
  #line 835 
  if (err != 0) 
                #line 836 
                return err;
  #line 838 
  sig = readq(np->regs + 1656832UL);
  #line 839 
  switch ((int)np->port) {
    #line 840 
    case 0: 
            #line 840 
    ;
    #line 841 
    mask = 870318095ULL;
    #line 842 
    val = 870318080ULL;
    #line 849 
    break;
    #line 851 
    case 1: 
            #line 851 
    ;
    #line 852 
    mask = 203358448ULL;
    #line 853 
    val = 203358208ULL;
    #line 860 
    break;
    #line 862 
    default: 
             #line 862 
    ;
    #line 863 
    return -22;
  }
  #line 866 
  if ((sig & mask) != val) {
    #line 867 
    if ((np->flags & 16777216U) != 0U) {
      #line 868 
      np->flags &= 4261412863U;
      #line 869 
      return 0;
    }
    #line 871 
    netdev_err(np->dev,(char *)"Port %u signal bits [%08x] are not [%08x]\n",(int)np->port,(int)(sig & mask),(int)val);
    #line 873 
    return -19;
  }
  #line 875 
  if ((np->flags & 16777216U) != 0U) 
                                     #line 876 
                                     np->flags |= 33554432U;
  #line 877 
  return 0;
}

#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_1g(struct niu *np)
{
  #line 882 
  u64 val;
  #line 884 
  val = readq(np->regs + 1654824UL);
  #line 885 
  val &= 18446744073709551611ULL;
  #line 886 
  switch ((int)np->port) {
    #line 887 
    case 0: 
            #line 887 
    ;
    #line 888 
    val |= 8ULL;
    #line 889 
    break;
    #line 890 
    case 1: 
            #line 890 
    ;
    #line 891 
    val |= 16ULL;
    #line 892 
    break;
    #line 893 
    case 2: 
            #line 893 
    ;
    #line 894 
    val |= 32ULL;
    #line 895 
    break;
    #line 896 
    case 3: 
            #line 896 
    ;
    #line 897 
    val |= 64ULL;
    #line 898 
    break;
    #line 899 
    default: 
             #line 899 
    ;
    #line 900 
    return -22;
  }
  #line 902 
  writeq(val,np->regs + 1654824UL);
  #line 904 
  return 0;
}

#line 907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_1g_serdes(struct niu *np)
{
  #line 910 
  unsigned long ctrl_reg;
  #line 910 
  unsigned long test_cfg_reg;
  #line 910 
  unsigned long pll_cfg;
  #line 910 
  unsigned long i;
  #line 911 
  u64 ctrl_val;
  #line 911 
  u64 test_cfg_val;
  #line 911 
  u64 sig;
  #line 911 
  u64 mask;
  #line 911 
  u64 val;
  #line 912 
  int err;
  #line 913 
  u64 reset_val;
  #line 913 
  u64 val_rd;
  #line 909 
  struct niu_link_config *lp = & np->link_config;
  #line 915 
  val = 121ULL;
  #line 918 
  switch ((int)np->port) {
    #line 919 
    case 0: 
            #line 919 
    ;
    #line 920 
    reset_val = 1ULL;
    #line 921 
    ctrl_reg = 1654808UL;
    #line 922 
    test_cfg_reg = 1654816UL;
    #line 923 
    pll_cfg = 1654800UL;
    #line 924 
    break;
    #line 925 
    case 1: 
            #line 925 
    ;
    #line 926 
    reset_val = 2ULL;
    #line 927 
    ctrl_reg = 1654832UL;
    #line 928 
    test_cfg_reg = 1654840UL;
    #line 929 
    pll_cfg = 1654824UL;
    #line 930 
    break;
    #line 932 
    default: 
             #line 932 
    ;
    #line 933 
    return -22;
  }
  #line 935 
  ctrl_val = 38385375ULL;
  #line 947 
  test_cfg_val = 0ULL;
  #line 949 
  if ((unsigned int)lp->loopback_mode == 1U) 
                                             #line 950 
                                             test_cfg_val |= 170ULL;
  #line 960 
  writeq(reset_val,np->regs + 1654784UL);
  {
    #line 961 
    unsigned long __ms = 20UL;
    #line 961 
    while (1) {
      #line 961 
      unsigned long tmp;
      #line 961 
      tmp = __ms;
      #line 961 
      __ms --;
      #line 961 
      ;
      #line 961 
      if (! (tmp != 0UL)) 
                          #line 961 
                          break;
      #line 961 
      __const_udelay(4295000UL);
    }
  }
  #line 962 
  val_rd = readq(np->regs + 1654784UL);
  #line 963 
  val_rd = ~ reset_val & val_rd;
  #line 964 
  writeq(val,np->regs + pll_cfg);
  #line 965 
  writeq(ctrl_val,np->regs + ctrl_reg);
  #line 966 
  writeq(test_cfg_val,np->regs + test_cfg_reg);
  #line 967 
  writeq(val_rd,np->regs + 1654784UL);
  {
    #line 968 
    unsigned long __ms_0 = 2000UL;
    #line 968 
    while (1) {
      #line 968 
      unsigned long tmp_0;
      #line 968 
      tmp_0 = __ms_0;
      #line 968 
      __ms_0 --;
      #line 968 
      ;
      #line 968 
      if (! (tmp_0 != 0UL)) 
                            #line 968 
                            break;
      #line 968 
      __const_udelay(4295000UL);
    }
  }
  #line 971 
  i = 0UL;
  #line 971 
  while (i <= 3UL) {
    {
      #line 972 
      u32 rxtx_ctrl;
      #line 972 
      u32 glue0;
      #line 974 
      err = esr_read_rxtx_ctrl(np,i,& rxtx_ctrl);
      #line 975 
      if (err != 0) 
                    #line 976 
                    return err;
      #line 977 
      err = esr_read_glue0(np,i,& glue0);
      #line 978 
      if (err != 0) 
                    #line 979 
                    return err;
      #line 981 
      rxtx_ctrl &= 4282384383U;
      #line 982 
      rxtx_ctrl |= 8388609U;
      #line 985 
      glue0 &= 4177522688U;
      #line 988 
      glue0 |= 50343935U;
      #line 994 
      err = esr_write_rxtx_ctrl(np,i,rxtx_ctrl);
      #line 995 
      if (err != 0) 
                    #line 996 
                    return err;
      #line 997 
      err = esr_write_glue0(np,i,glue0);
      #line 998 
      if (err != 0) 
                    #line 999 
                    return err;
    }
    #line 971 
    i ++;
  }
  #line 1003 
  sig = readq(np->regs + 1656832UL);
  #line 1004 
  switch ((int)np->port) {
    #line 1005 
    case 0: 
            #line 1005 
    ;
    #line 1006 
    val = 805306368ULL;
    #line 1007 
    mask = val;
    #line 1008 
    break;
    #line 1010 
    case 1: 
            #line 1010 
    ;
    #line 1011 
    val = 201326592ULL;
    #line 1012 
    mask = val;
    #line 1013 
    break;
    #line 1015 
    default: 
             #line 1015 
    ;
    #line 1016 
    return -22;
  }
  #line 1019 
  if ((sig & mask) != val) {
    #line 1020 
    netdev_err(np->dev,(char *)"Port %u signal bits [%08x] are not [%08x]\n",(int)np->port,(int)(sig & mask),(int)val);
    #line 1022 
    return -19;
  }
  #line 1025 
  return 0;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_1g_serdes(struct niu *np, int *link_up_p)
{
  #line 1031 
  int link_up;
  #line 1032 
  u64 val;
  #line 1033 
  u16 current_speed;
  #line 1034 
  unsigned long flags;
  #line 1035 
  u8 current_duplex;
  #line 1030 
  struct niu_link_config *lp = & np->link_config;
  #line 1037 
  link_up = 0;
  #line 1038 
  current_speed = (unsigned short)65535U;
  #line 1039 
  current_duplex = (unsigned char)255U;
  #line 1041 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 1043 
  val = readq(np->regs + (np->pcs_off + 1572872UL));
  #line 1045 
  if ((val & 4ULL) != 0ULL) {
    #line 1046 
    link_up = 1;
    #line 1047 
    current_speed = (unsigned short)1000U;
    #line 1048 
    current_duplex = (unsigned char)1U;
  }
  #line 1051 
  lp->active_speed = current_speed;
  #line 1052 
  lp->active_duplex = current_duplex;
  #line 1053 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 1055 
  *link_up_p = link_up;
  #line 1056 
  return 0;
}

#line 1059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_serdes(struct niu *np, int *link_up_p)
{
  #line 1061 
  unsigned long flags;
  #line 1065 
  u64 val;
  #line 1065 
  u64 val2;
  #line 1066 
  u16 current_speed;
  #line 1067 
  u8 current_duplex;
  #line 1062 
  struct niu_link_config *lp = & np->link_config;
  #line 1063 
  int link_up = 0;
  #line 1064 
  int link_ok = 1;
  #line 1069 
  if ((np->flags & 262144U) == 0U) {
    #line 1070 
    return link_status_1g_serdes(np,link_up_p);
  }
  #line 1072 
  current_speed = (unsigned short)65535U;
  #line 1073 
  current_duplex = (unsigned char)255U;
  #line 1074 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 1076 
  val = readq(np->regs + (np->xpcs_off + 1572928UL));
  #line 1077 
  val2 = readq(np->mac_regs + 440UL);
  #line 1078 
  if ((val2 & 16777216ULL) != 0ULL) 
                                    #line 1079 
                                    link_ok = 0;
  #line 1081 
  if ((val & 4096ULL) != 0ULL && link_ok != 0) {
    #line 1082 
    link_up = 1;
    #line 1083 
    current_speed = (unsigned short)10000U;
    #line 1084 
    current_duplex = (unsigned char)1U;
  }
  #line 1086 
  lp->active_speed = current_speed;
  #line 1087 
  lp->active_duplex = current_duplex;
  #line 1088 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 1089 
  *link_up_p = link_up;
  #line 1090 
  return 0;
}

#line 1093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_mii(struct niu *np, int *link_up_p)
{
  #line 1096 
  int err;
  #line 1097 
  int bmsr;
  #line 1097 
  int advert;
  #line 1097 
  int ctrl1000;
  #line 1097 
  int stat1000;
  #line 1097 
  int lpa;
  #line 1097 
  int bmcr;
  #line 1097 
  int estatus;
  #line 1098 
  int supported;
  #line 1098 
  int advertising;
  #line 1098 
  int active_speed;
  #line 1098 
  int active_duplex;
  #line 1095 
  struct niu_link_config *lp = & np->link_config;
  #line 1100 
  err = mii_read(np,np->phy_addr,0);
  #line 1101 
  if ((long)(err < 0) != 0L) 
                             #line 1102 
                             return err;
  #line 1103 
  bmcr = err;
  #line 1105 
  err = mii_read(np,np->phy_addr,1);
  #line 1106 
  if ((long)(err < 0) != 0L) 
                             #line 1107 
                             return err;
  #line 1108 
  bmsr = err;
  #line 1110 
  err = mii_read(np,np->phy_addr,4);
  #line 1111 
  if ((long)(err < 0) != 0L) 
                             #line 1112 
                             return err;
  #line 1113 
  advert = err;
  #line 1115 
  err = mii_read(np,np->phy_addr,5);
  #line 1116 
  if ((long)(err < 0) != 0L) 
                             #line 1117 
                             return err;
  #line 1118 
  lpa = err;
  #line 1120 
  if ((long)((bmsr & 256) != 0) != 0L) {
    #line 1121 
    err = mii_read(np,np->phy_addr,15);
    #line 1122 
    if ((long)(err < 0) != 0L) 
                               #line 1123 
                               return err;
    #line 1124 
    estatus = err;
    #line 1126 
    err = mii_read(np,np->phy_addr,9);
    #line 1127 
    if ((long)(err < 0) != 0L) 
                               #line 1128 
                               return err;
    #line 1129 
    ctrl1000 = err;
    #line 1131 
    err = mii_read(np,np->phy_addr,10);
    #line 1132 
    if ((long)(err < 0) != 0L) 
                               #line 1133 
                               return err;
    #line 1134 
    stat1000 = err;
  }
  else {
    #line 1136 
    stat1000 = 0;
    #line 1136 
    ctrl1000 = stat1000;
    #line 1136 
    estatus = ctrl1000;
  }
  #line 1138 
  supported = 0;
  #line 1139 
  if ((bmsr & 8) != 0) 
                       #line 1140 
                       supported |= 64;
  #line 1141 
  if ((bmsr & 2048) != 0) 
                          #line 1142 
                          supported |= 1;
  #line 1143 
  if ((bmsr & 4096) != 0) 
                          #line 1144 
                          supported |= 2;
  #line 1145 
  if ((bmsr & 8192) != 0) 
                          #line 1146 
                          supported |= 4;
  #line 1147 
  if ((bmsr & 16384) != 0) 
                           #line 1148 
                           supported |= 8;
  #line 1149 
  if ((estatus & 4096) != 0) 
                             #line 1150 
                             supported |= 16;
  #line 1151 
  if ((estatus & 8192) != 0) 
                             #line 1152 
                             supported |= 32;
  #line 1153 
  lp->supported = (unsigned int)supported;
  #line 1155 
  advertising = (int)mii_adv_to_ethtool_adv_t((unsigned int)advert);
  #line 1156 
  advertising = (int)(mii_ctrl1000_to_ethtool_adv_t((unsigned int)ctrl1000) | (unsigned int)advertising);
  #line 1158 
  if ((bmcr & 4096) != 0) {
    #line 1159 
    int neg;
    #line 1159 
    int neg1000;
    #line 1161 
    lp->active_autoneg = (unsigned char)1U;
    #line 1162 
    advertising |= 64;
    #line 1164 
    neg = advert & lpa;
    #line 1165 
    neg1000 = (ctrl1000 << 2) & stat1000;
    #line 1167 
    if ((neg1000 & 3072) != 0) 
                               #line 1168 
                               active_speed = 1000;
    else 
      #line 1169 
      if ((neg & 896) != 0) 
                            #line 1170 
                            active_speed = 100;
      else 
        #line 1171 
        if ((neg & 96) != 0) 
                             #line 1172 
                             active_speed = 10; else 
                                                     #line 1174 
                                                     active_speed = 65535;
    #line 1176 
    if ((neg1000 & 2048) != 0 || (neg & 320) != 0) 
                                                   #line 1177 
                                                   active_duplex = 1;
    else 
      #line 1178 
      if (active_speed != 65535) 
                                 #line 1179 
                                 active_duplex = 0; else 
                                                         #line 1181 
                                                         active_duplex = 255;
  }
  else {
    #line 1183 
    lp->active_autoneg = (unsigned char)0U;
    #line 1185 
    if ((bmcr & 64) != 0 && (bmcr & 8192) == 0) 
                                                #line 1186 
                                                active_speed = 1000;
    else 
      #line 1187 
      if ((bmcr & 8192) != 0) 
                              #line 1188 
                              active_speed = 100; else 
                                                       #line 1190 
                                                       active_speed = 10;
    #line 1192 
    if ((bmcr & 256) != 0) 
                           #line 1193 
                           active_duplex = 1; else 
                                                   #line 1195 
                                                   active_duplex = 0;
  }
  #line 1198 
  lp->active_advertising = (unsigned int)advertising;
  #line 1199 
  lp->active_speed = (unsigned short)active_speed;
  #line 1200 
  lp->active_duplex = (unsigned char)active_duplex;
  #line 1201 
  *link_up_p = (bmsr & 4) != 0;
  #line 1203 
  return 0;
}

#line 1206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_1g_rgmii(struct niu *np, int *link_up_p)
{
  #line 1209 
  u16 current_speed;
  #line 1209 
  u16 bmsr;
  #line 1210 
  unsigned long flags;
  #line 1211 
  u8 current_duplex;
  #line 1212 
  int err;
  #line 1212 
  int link_up;
  #line 1208 
  struct niu_link_config *lp = & np->link_config;
  #line 1214 
  link_up = 0;
  #line 1215 
  current_speed = (unsigned short)65535U;
  #line 1216 
  current_duplex = (unsigned char)255U;
  #line 1218 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 1220 
  err = mii_read(np,np->phy_addr,1);
  #line 1221 
  if (err < 0) 
               #line 1222 
               goto out;
  #line 1224 
  bmsr = (unsigned short)err;
  #line 1225 
  if (((int)bmsr & 4) != 0) {
    #line 1226 
    link_up = 1;
    #line 1227 
    current_speed = (unsigned short)1000U;
    #line 1228 
    current_duplex = (unsigned char)1U;
  }
  #line 1230 
  lp->active_speed = current_speed;
  #line 1231 
  lp->active_duplex = current_duplex;
  #line 1232 
  err = 0;
  #line 1234 
  out: 
       #line 1234 
  ;
  #line 1235 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 1237 
  *link_up_p = link_up;
  #line 1238 
  return err;
}

#line 1241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_1g(struct niu *np, int *link_up_p)
{
  #line 1244 
  unsigned long flags;
  #line 1245 
  int err;
  #line 1243 
  struct niu_link_config *lp = & np->link_config;
  #line 1247 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 1249 
  err = link_status_mii(np,link_up_p);
  #line 1250 
  lp->supported |= 128U;
  #line 1251 
  lp->active_advertising |= 128U;
  #line 1253 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 1254 
  return err;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int bcm8704_reset(struct niu *np)
{
  #line 1259 
  int err;
  #line 1259 
  int limit;
  #line 1261 
  err = mdio_read(np,np->phy_addr,4,0);
  #line 1263 
  if (err < 0 || err == 65535) 
                               #line 1264 
                               return err;
  #line 1265 
  err |= 32768;
  #line 1266 
  err = mdio_write(np,np->phy_addr,4,0,err);
  #line 1268 
  if (err != 0) 
                #line 1269 
                return err;
  #line 1271 
  limit = 1000;
  #line 1272 
  while (1) {
    #line 1272 
    limit --;
    #line 1272 
    if (! (limit >= 0)) 
                        #line 1272 
                        break;
    #line 1273 
    err = mdio_read(np,np->phy_addr,4,0);
    #line 1275 
    if (err < 0) 
                 #line 1276 
                 return err;
    #line 1277 
    if ((err & 32768) == 0) 
                            #line 1278 
                            break;
  }
  #line 1280 
  if (limit < 0) {
    #line 1281 
    netdev_err(np->dev,(char *)"Port %u PHY will not reset (bmcr=%04x)\n",(int)np->port,err & 65535);
    #line 1283 
    return -19;
  }
  #line 1285 
  return 0;
}

#line 1291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int bcm8704_user_dev3_readback(struct niu *np, int reg)
{
  #line 1293 
  int err = mdio_read(np,np->phy_addr,3,reg);
  #line 1294 
  if (err < 0) 
               #line 1295 
               return err;
  #line 1296 
  err = mdio_read(np,np->phy_addr,3,reg);
  #line 1297 
  if (err < 0) 
               #line 1298 
               return err;
  #line 1299 
  return 0;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int bcm8706_init_user_dev3(struct niu *np)
{
  #line 1304 
  int err;
  #line 1307 
  err = mdio_read(np,np->phy_addr,3,51208);
  #line 1309 
  if (err < 0) 
               #line 1310 
               return err;
  #line 1311 
  err &= -97;
  #line 1312 
  err |= 96;
  #line 1313 
  err |= 16;
  #line 1314 
  err = mdio_write(np,np->phy_addr,3,51208,err);
  #line 1316 
  if (err != 0) 
                #line 1317 
                return err;
  {
    #line 1319 
    unsigned long __ms = 1000UL;
    #line 1319 
    while (1) {
      #line 1319 
      unsigned long tmp;
      #line 1319 
      tmp = __ms;
      #line 1319 
      __ms --;
      #line 1319 
      ;
      #line 1319 
      if (! (tmp != 0UL)) 
                          #line 1319 
                          break;
      #line 1319 
      __const_udelay(4295000UL);
    }
  }
  #line 1321 
  return 0;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int bcm8704_init_user_dev3(struct niu *np)
{
  #line 1326 
  int err;
  #line 1328 
  err = mdio_write(np,np->phy_addr,3,51200,32703);
  #line 1339 
  if (err != 0) 
                #line 1340 
                return err;
  #line 1342 
  err = mdio_write(np,np->phy_addr,3,51203,356);
  #line 1348 
  if (err != 0) 
                #line 1349 
                return err;
  #line 1351 
  err = bcm8704_user_dev3_readback(np,51200);
  #line 1352 
  if (err != 0) 
                #line 1353 
                return err;
  #line 1354 
  err = bcm8704_user_dev3_readback(np,51203);
  #line 1355 
  if (err != 0) 
                #line 1356 
                return err;
  #line 1358 
  err = mdio_read(np,np->phy_addr,3,51208);
  #line 1360 
  if (err < 0) 
               #line 1361 
               return err;
  #line 1362 
  err &= -97;
  #line 1363 
  err |= 96;
  #line 1364 
  err = mdio_write(np,np->phy_addr,3,51208,err);
  #line 1366 
  if (err != 0) 
                #line 1367 
                return err;
  {
    #line 1369 
    unsigned long __ms = 1000UL;
    #line 1369 
    while (1) {
      #line 1369 
      unsigned long tmp;
      #line 1369 
      tmp = __ms;
      #line 1369 
      __ms --;
      #line 1369 
      ;
      #line 1369 
      if (! (tmp != 0UL)) 
                          #line 1369 
                          break;
      #line 1369 
      __const_udelay(4295000UL);
    }
  }
  #line 1371 
  return 0;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mrvl88x2011_act_led(struct niu *np, int val)
{
  #line 1376 
  int err;
  #line 1378 
  err = mdio_read(np,np->phy_addr,2,33542);
  #line 1380 
  if (err < 0) 
               #line 1381 
               return err;
  #line 1383 
  err &= -113;
  #line 1384 
  err = (val << 4) | err;
  #line 1386 
  return mdio_write(np,np->phy_addr,2,33542,err);
}

#line 1390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mrvl88x2011_led_blink_rate(struct niu *np, int rate)
{
  #line 1392 
  int err;
  #line 1394 
  err = mdio_read(np,np->phy_addr,2,33539);
  #line 1396 
  if (err >= 0) {
    #line 1397 
    err &= -113;
    #line 1398 
    err = (rate << 4) | err;
    #line 1400 
    err = mdio_write(np,np->phy_addr,2,33539,err);
  }
  #line 1404 
  return err;
}

#line 1407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g_mrvl88x2011(struct niu *np)
{
  #line 1409 
  int err;
  #line 1412 
  err = mrvl88x2011_led_blink_rate(np,2);
  #line 1413 
  if (err != 0) 
                #line 1414 
                return err;
  #line 1417 
  err = mrvl88x2011_act_led(np,0);
  #line 1418 
  if (err != 0) 
                #line 1419 
                return err;
  #line 1421 
  err = mdio_read(np,np->phy_addr,3,33536);
  #line 1423 
  if (err < 0) 
               #line 1424 
               return err;
  #line 1426 
  err |= 1;
  #line 1428 
  err = mdio_write(np,np->phy_addr,3,33536,err);
  #line 1430 
  if (err < 0) 
               #line 1431 
               return err;
  #line 1433 
  err = mdio_read(np,np->phy_addr,1,0);
  #line 1435 
  if (err < 0) 
               #line 1436 
               return err;
  #line 1438 
  if ((unsigned int)np->link_config.loopback_mode == 2U) 
                                                         #line 1439 
                                                         err |= 1; else 
                                                                    #line 1441 
                                                                    err &= -2;
  #line 1443 
  err = mdio_write(np,np->phy_addr,1,0,err);
  #line 1445 
  if (err < 0) 
               #line 1446 
               return err;
  #line 1449 
  return mdio_write(np,np->phy_addr,1,9,0);
}

#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_diag_bcm870x(struct niu *np)
{
  #line 1456 
  u16 analog_stat0;
  #line 1456 
  u16 tx_alarm_status;
  #line 1457 
  int err = 0;
  #line 1460 
  err = mdio_read(np,np->phy_addr,1,10);
  #line 1462 
  if (err < 0) 
               #line 1463 
               return err;
  #line 1464 
  printk((char *)"\001",(int)np->port,err);
  #line 1466 
  err = mdio_read(np,np->phy_addr,3,32);
  #line 1467 
  if (err < 0) 
               #line 1468 
               return err;
  #line 1469 
  printk((char *)"\001",(int)np->port,err);
  #line 1471 
  err = mdio_read(np,np->phy_addr,4,20);
  #line 1473 
  if (err < 0) 
               #line 1474 
               return err;
  #line 1475 
  printk((char *)"\001",(int)np->port,err);
  #line 1479 
  err = mdio_read(np,np->phy_addr,3,51204);
  #line 1481 
  if (err < 0) 
               #line 1482 
               return err;
  #line 1483 
  err = mdio_read(np,np->phy_addr,3,51204);
  #line 1485 
  if (err < 0) 
               #line 1486 
               return err;
  #line 1487 
  analog_stat0 = (unsigned short)err;
  #line 1489 
  err = mdio_read(np,np->phy_addr,3,36868);
  #line 1491 
  if (err < 0) 
               #line 1492 
               return err;
  #line 1493 
  err = mdio_read(np,np->phy_addr,3,36868);
  #line 1495 
  if (err < 0) 
               #line 1496 
               return err;
  #line 1497 
  tx_alarm_status = (unsigned short)err;
  #line 1499 
  if ((unsigned int)analog_stat0 != 1020U) 
    #line 1500 
    if ((unsigned int)analog_stat0 == 17340U && (unsigned int)tx_alarm_status != 0U) 
      #line 1501 
      printk((char *)"\001",(int)np->port);
    else 
      #line 1503 
      if ((unsigned int)analog_stat0 == 25500U) 
                                                #line 1504 
                                                printk((char *)"\001",(int)np->port);
  #line 1509 
  return 0;
}

#line 1512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_10g_set_lb_bcm870x(struct niu *np)
{
  #line 1515 
  int err;
  #line 1514 
  struct niu_link_config *lp = & np->link_config;
  #line 1517 
  err = mdio_read(np,np->phy_addr,2,0);
  #line 1519 
  if (err < 0) 
               #line 1520 
               return err;
  #line 1522 
  err &= -16385;
  #line 1524 
  if ((unsigned int)lp->loopback_mode == 2U) 
                                             #line 1525 
                                             err |= 16384;
  #line 1527 
  err = mdio_write(np,np->phy_addr,2,0,err);
  #line 1529 
  if (err != 0) 
                #line 1530 
                return err;
  #line 1532 
  return 0;
}

#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g_bcm8706(struct niu *np)
{
  #line 1538 
  u64 val;
  #line 1537 
  int err = 0;
  #line 1540 
  if ((np->flags & 16777216U) != 0U && (np->flags & 33554432U) == 0U) 
    #line 1542 
    return err;
  #line 1544 
  val = readq(np->mac_regs + 96UL);
  #line 1545 
  val &= 18446744073705357311ULL;
  #line 1546 
  val |= 2097152ULL;
  #line 1547 
  writeq(val,np->mac_regs + 96UL);
  #line 1549 
  val = readq(np->regs + 1663008UL);
  #line 1550 
  val |= 32768ULL;
  #line 1551 
  writeq(val,np->regs + 1663008UL);
  #line 1553 
  err = bcm8704_reset(np);
  #line 1554 
  if (err != 0) 
                #line 1555 
                return err;
  #line 1557 
  err = xcvr_10g_set_lb_bcm870x(np);
  #line 1558 
  if (err != 0) 
                #line 1559 
                return err;
  #line 1561 
  err = bcm8706_init_user_dev3(np);
  #line 1562 
  if (err != 0) 
                #line 1563 
                return err;
  #line 1565 
  err = xcvr_diag_bcm870x(np);
  #line 1566 
  if (err != 0) 
                #line 1567 
                return err;
  #line 1569 
  return 0;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g_bcm8704(struct niu *np)
{
  #line 1574 
  int err;
  #line 1576 
  err = bcm8704_reset(np);
  #line 1577 
  if (err != 0) 
                #line 1578 
                return err;
  #line 1580 
  err = bcm8704_init_user_dev3(np);
  #line 1581 
  if (err != 0) 
                #line 1582 
                return err;
  #line 1584 
  err = xcvr_10g_set_lb_bcm870x(np);
  #line 1585 
  if (err != 0) 
                #line 1586 
                return err;
  #line 1588 
  err = xcvr_diag_bcm870x(np);
  #line 1589 
  if (err != 0) 
                #line 1590 
                return err;
  #line 1592 
  return 0;
}

#line 1595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_10g(struct niu *np)
{
  #line 1597 
  int phy_id;
  #line 1597 
  int err;
  #line 1598 
  u64 val;
  #line 1600 
  val = readq(np->mac_regs + 96UL);
  #line 1601 
  val &= 18446744073705357311ULL;
  #line 1602 
  val |= 2097152ULL;
  #line 1603 
  writeq(val,np->mac_regs + 96UL);
  #line 1606 
  val = readq(np->regs + 1663008UL);
  #line 1607 
  val |= 32768ULL;
  #line 1608 
  writeq(val,np->regs + 1663008UL);
  #line 1610 
  phy_id = (int)phy_decode((np->parent)->port_phy,(int)np->port);
  #line 1611 
  phy_id = (int)(np->parent)->phy_probe_info.phy_id[phy_id][(int)np->port];
  #line 1614 
  switch ((unsigned int)phy_id & 4294963440U) {
    #line 1615 
    case (unsigned int)21037088: 
                                 #line 1615 
    ;
    #line 1616 
    err = xcvr_init_10g_mrvl88x2011(np);
    #line 1617 
    break;
    #line 1619 
    default: 
             #line 1619 
    ;
    #line 1620 
    err = xcvr_init_10g_bcm8704(np);
    #line 1621 
    break;
  }
  #line 1624 
  return err;
}

#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mii_reset(struct niu *np)
{
  #line 1629 
  int limit;
  #line 1629 
  int err;
  #line 1631 
  err = mii_write(np,np->phy_addr,0,32768);
  #line 1632 
  if (err != 0) 
                #line 1633 
                return err;
  #line 1635 
  limit = 1000;
  #line 1636 
  while (1) {
    #line 1636 
    limit --;
    #line 1636 
    if (! (limit >= 0)) 
                        #line 1636 
                        break;
    #line 1637 
    __const_udelay(2147500UL);
    #line 1638 
    err = mii_read(np,np->phy_addr,0);
    #line 1639 
    if (err < 0) 
                 #line 1640 
                 return err;
    #line 1641 
    if ((err & 32768) == 0) 
                            #line 1642 
                            break;
  }
  #line 1644 
  if (limit < 0) {
    #line 1645 
    netdev_err(np->dev,(char *)"Port %u MII would not reset, bmcr[%04x]\n",(int)np->port,err);
    #line 1647 
    return -19;
  }
  #line 1650 
  return 0;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_1g_rgmii(struct niu *np)
{
  #line 1655 
  int err;
  #line 1656 
  u64 val;
  #line 1657 
  u16 bmcr;
  #line 1657 
  u16 bmsr;
  #line 1657 
  u16 estat;
  #line 1659 
  val = readq(np->regs + 1663008UL);
  #line 1660 
  val &= 18446744073709518847ULL;
  #line 1661 
  writeq(val,np->regs + 1663008UL);
  #line 1663 
  err = mii_reset(np);
  #line 1664 
  if (err != 0) 
                #line 1665 
                return err;
  #line 1667 
  err = mii_read(np,np->phy_addr,1);
  #line 1668 
  if (err < 0) 
               #line 1669 
               return err;
  #line 1670 
  bmsr = (unsigned short)err;
  #line 1672 
  estat = (unsigned short)0U;
  #line 1673 
  if (((int)bmsr & 256) != 0) {
    #line 1674 
    err = mii_read(np,np->phy_addr,15);
    #line 1675 
    if (err < 0) 
                 #line 1676 
                 return err;
    #line 1677 
    estat = (unsigned short)err;
  }
  #line 1680 
  bmcr = (unsigned short)0U;
  #line 1681 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  #line 1682 
  if (err != 0) 
                #line 1683 
                return err;
  #line 1685 
  if (((int)bmsr & 256) != 0) {
    #line 1686 
    u16 ctrl1000 = (unsigned short)0U;
    #line 1688 
    if (((int)estat & 8192) != 0) 
                                  #line 1689 
                                  ctrl1000 = (unsigned short)((unsigned int)ctrl1000 | 512U);
    #line 1690 
    err = mii_write(np,np->phy_addr,9,(int)ctrl1000);
    #line 1691 
    if (err != 0) 
                  #line 1692 
                  return err;
  }
  #line 1695 
  bmcr = (unsigned short)320U;
  #line 1697 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  #line 1698 
  if (err != 0) 
                #line 1699 
                return err;
  #line 1701 
  err = mii_read(np,np->phy_addr,0);
  #line 1702 
  if (err < 0) 
               #line 1703 
               return err;
  #line 1704 
  bmcr = (unsigned short)mii_read(np,np->phy_addr,0);
  #line 1706 
  err = mii_read(np,np->phy_addr,1);
  #line 1707 
  if (err < 0) 
               #line 1708 
               return err;
  #line 1710 
  return 0;
}

#line 1713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int mii_init_common(struct niu *np)
{
  #line 1716 
  u16 bmcr;
  #line 1716 
  u16 bmsr;
  #line 1716 
  u16 adv;
  #line 1716 
  u16 estat;
  #line 1717 
  int err;
  #line 1715 
  struct niu_link_config *lp = & np->link_config;
  #line 1719 
  err = mii_reset(np);
  #line 1720 
  if (err != 0) 
                #line 1721 
                return err;
  #line 1723 
  err = mii_read(np,np->phy_addr,1);
  #line 1724 
  if (err < 0) 
               #line 1725 
               return err;
  #line 1726 
  bmsr = (unsigned short)err;
  #line 1728 
  estat = (unsigned short)0U;
  #line 1729 
  if (((int)bmsr & 256) != 0) {
    #line 1730 
    err = mii_read(np,np->phy_addr,15);
    #line 1731 
    if (err < 0) 
                 #line 1732 
                 return err;
    #line 1733 
    estat = (unsigned short)err;
  }
  #line 1736 
  bmcr = (unsigned short)0U;
  #line 1737 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  #line 1738 
  if (err != 0) 
                #line 1739 
                return err;
  #line 1741 
  if ((unsigned int)lp->loopback_mode == 2U) {
    #line 1742 
    bmcr = (unsigned short)((unsigned int)bmcr | 16384U);
    #line 1743 
    if ((unsigned int)lp->active_speed == 1000U) 
                                                 #line 1744 
                                                 bmcr = (unsigned short)((unsigned int)bmcr | 64U);
    #line 1745 
    if ((unsigned int)lp->active_duplex == 1U) 
                                               #line 1746 
                                               bmcr = (unsigned short)((unsigned int)bmcr | 256U);
  }
  #line 1749 
  if ((unsigned int)lp->loopback_mode == 1U) {
    #line 1750 
    u16 aux;
    #line 1752 
    aux = (unsigned short)33792U;
    #line 1754 
    err = mii_write(np,np->phy_addr,24,(int)aux);
    #line 1755 
    if (err != 0) 
                  #line 1756 
                  return err;
  }
  #line 1759 
  if ((unsigned int)lp->autoneg != 0U) {
    #line 1760 
    u16 ctrl1000;
    #line 1762 
    adv = (unsigned short)1025U;
    #line 1763 
    if (((int)bmsr & 2048) != 0 && ((unsigned long)lp->advertising & 1UL) != 0UL) 
      #line 1765 
      adv = (unsigned short)((unsigned int)adv | 32U);
    #line 1766 
    if (((int)bmsr & 4096) != 0 && ((unsigned long)lp->advertising & 2UL) != 0UL) 
      #line 1768 
      adv = (unsigned short)((unsigned int)adv | 64U);
    #line 1769 
    if (((int)bmsr & 8192) != 0 && ((unsigned long)lp->advertising & 4UL) != 0UL) 
      #line 1771 
      adv = (unsigned short)((unsigned int)adv | 128U);
    #line 1772 
    if (((int)bmsr & 16384) != 0 && ((unsigned long)lp->advertising & 8UL) != 0UL) 
      #line 1774 
      adv = (unsigned short)((unsigned int)adv | 256U);
    #line 1775 
    err = mii_write(np,np->phy_addr,4,(int)adv);
    #line 1776 
    if (err != 0) 
                  #line 1777 
                  return err;
    #line 1779 
    if ((long)(((int)bmsr & 256) != 0) != 0L) {
      #line 1780 
      ctrl1000 = (unsigned short)0U;
      #line 1781 
      if (((int)estat & 4096) != 0 && ((unsigned long)lp->advertising & 16UL) != 0UL) 
        #line 1783 
        ctrl1000 = (unsigned short)((unsigned int)ctrl1000 | 256U);
      #line 1784 
      if (((int)estat & 8192) != 0 && ((unsigned long)lp->advertising & 32UL) != 0UL) 
        #line 1786 
        ctrl1000 = (unsigned short)((unsigned int)ctrl1000 | 512U);
      #line 1787 
      err = mii_write(np,np->phy_addr,9,(int)ctrl1000);
      #line 1789 
      if (err != 0) 
                    #line 1790 
                    return err;
    }
    #line 1793 
    bmcr = (unsigned short)((unsigned int)bmcr | 4608U);
  }
  else {
    #line 1796 
    int fulldpx;
    #line 1798 
    if ((unsigned int)lp->duplex == 1U) {
      #line 1799 
      bmcr = (unsigned short)((unsigned int)bmcr | 256U);
      #line 1800 
      fulldpx = 1;
    }
    else 
      #line 1801 
      if ((unsigned int)lp->duplex == 0U) 
                                          #line 1802 
                                          fulldpx = 0; else 
                                                            #line 1804 
                                                            return -22;
    #line 1806 
    if ((unsigned int)lp->speed == 1000U) {
      #line 1809 
      if (fulldpx != 0 && ((int)estat & 8192) == 0 || fulldpx == 0 && ((int)estat & 4096) == 0) 
        #line 1811 
        return -22;
      #line 1812 
      bmcr = (unsigned short)((unsigned int)bmcr | 64U);
    }
    else 
      #line 1813 
      if ((unsigned int)lp->speed == 100U) {
        #line 1814 
        if (fulldpx != 0 && ((int)bmsr & 16384) == 0 || fulldpx == 0 && ((int)bmsr & 8192) == 0) 
          #line 1816 
          return -22;
        #line 1817 
        bmcr = (unsigned short)((unsigned int)bmcr | 8192U);
      }
      else 
        #line 1818 
        if ((unsigned int)lp->speed == 10U) {
          #line 1819 
          if (fulldpx != 0 && ((int)bmsr & 4096) == 0 || fulldpx == 0 && ((int)bmsr & 2048) == 0) 
            #line 1821 
            return -22;
        }
        else 
             #line 1823 
             return -22;
  }
  #line 1826 
  err = mii_write(np,np->phy_addr,0,(int)bmcr);
  #line 1827 
  if (err != 0) 
                #line 1828 
                return err;
  #line 1845 
  return 0;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int xcvr_init_1g(struct niu *np)
{
  #line 1850 
  u64 val;
  #line 1853 
  val = readq(np->regs + 1663008UL);
  #line 1854 
  val &= 18446744073709518847ULL;
  #line 1855 
  writeq(val,np->regs + 1663008UL);
  #line 1857 
  return mii_init_common(np);
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_xcvr_init(struct niu *np)
{
  #line 1863 
  int err;
  #line 1862 
  struct niu_phy_ops *ops = np->phy_ops;
  #line 1865 
  err = 0;
  #line 1866 
  if (ops->xcvr_init != (int (*)(struct niu *))0) 
                                                  #line 1867 
                                                  err = (*(ops->xcvr_init))(np);
  #line 1869 
  return err;
}

#line 1872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_serdes_init(struct niu *np)
{
  #line 1875 
  int err;
  #line 1874 
  struct niu_phy_ops *ops = np->phy_ops;
  #line 1877 
  err = 0;
  #line 1878 
  if (ops->serdes_init != (int (*)(struct niu *))0) 
                                                    #line 1879 
                                                    err = (*(ops->serdes_init))(np);
  #line 1881 
  return err;
}

#line 1884 
#line 5358 
static void niu_init_xif(struct niu *np);
#line 1885 
#line 5252 
static void niu_handle_led(struct niu *np, int status);
#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_link_status_common(struct niu *np, int link_up)
{
  #line 1891 
  unsigned long flags;
  #line 1889 
  struct niu_link_config *lp = & np->link_config;
  #line 1890 
  struct net_device *dev = np->dev;
  #line 1893 
  if (netif_carrier_ok(dev)) {
    #line 1893 
    _LAND: 
    #line 1907 
    if ((int)netif_carrier_ok(dev) != 0) 
      #line 1907 
      if (link_up == 0) {
        #line 1908 
        if ((np->msg_enable & 4U) != 0U) 
                                         #line 1908 
                                         netdev_warn(dev,(char *)"Link is down\n");
        #line 1909 
        cif___ldv_spin_lock_lock_of_niu(& np->lock);
        #line 1910 
        niu_handle_led(np,0);
        #line 1911 
        cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
        #line 1912 
        netif_carrier_off(dev);
      }
  }
  else 
    #line 1893 
    if (link_up != 0) {
      #line 1894 
      if ((np->msg_enable & 4U) != 0U) {
        #line 1894 
        char *tmp_0;
        #line 1894 
        char *tmp_1;
        #line 1894 
        char *tmp;
        #line 1894 
        char *tmp_2;
        #line 1894 
        if ((unsigned int)lp->active_duplex == 1U) 
                                                   #line 1894 
                                                   tmp = (char *)"full"; else 
                                                                    #line 1894 
                                                                    tmp = (char *)"half";
        #line 1894 
        if ((unsigned int)lp->active_speed != 10000U) {
          #line 1894 
          if ((unsigned int)lp->active_speed != 1000U) {
            #line 1894 
            if ((unsigned int)lp->active_speed == 100U) 
                                                        #line 1894 
                                                        tmp_0 = (char *)"100Mbit/sec"; else 
                                                                    #line 1894 
                                                                    tmp_0 = (char *)"10Mbit/sec";
            #line 1894 
            tmp_1 = tmp_0;
          }
          else 
               #line 1894 
               tmp_1 = (char *)"1Gb/sec";
          #line 1894 
          tmp_2 = tmp_1;
        }
        else 
             #line 1894 
             tmp_2 = (char *)"10Gb/sec";
        #line 1894 
        ;
        #line 1894 
        netdev_info(dev,(char *)"Link is up at %s, %s duplex\n",tmp_2,tmp);
      }
      #line 1901 
      cif___ldv_spin_lock_lock_of_niu(& np->lock);
      #line 1902 
      niu_init_xif(np);
      #line 1903 
      niu_handle_led(np,1);
      #line 1904 
      cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
      #line 1906 
      netif_carrier_on(dev);
    }
    else 
         #line 1893 
         goto _LAND;
  #line 1915 
  return 0;
}

#line 1918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_mrvl(struct niu *np, int *link_up_p)
{
  #line 1920 
  int err;
  #line 1920 
  int link_up;
  #line 1920 
  int pma_status;
  #line 1920 
  int pcs_status;
  #line 1966 
  int tmp;
  #line 1922 
  link_up = 0;
  #line 1924 
  err = mdio_read(np,np->phy_addr,1,8);
  #line 1926 
  if (err < 0) 
               #line 1927 
               goto out;
  #line 1930 
  err = mdio_read(np,np->phy_addr,1,1);
  #line 1932 
  if (err < 0) 
               #line 1933 
               goto out;
  #line 1935 
  pma_status = (err >> 2) & 1;
  #line 1938 
  err = mdio_read(np,np->phy_addr,3,1);
  #line 1940 
  if (err < 0) 
               #line 1941 
               goto out;
  #line 1943 
  err = mdio_read(np,np->phy_addr,3,1);
  #line 1945 
  if (err < 0) 
               #line 1946 
               goto out;
  #line 1948 
  pcs_status = (err >> 2) & 1;
  #line 1951 
  err = mdio_read(np,np->phy_addr,4,24);
  #line 1953 
  if (err < 0) 
               #line 1954 
               goto out;
  #line 1956 
  if (err == 7183) 
                   #line 1960 
                   link_up = (pma_status != 0 && pcs_status != 0) != 0;
  #line 1962 
  np->link_config.active_speed = (unsigned short)10000U;
  #line 1963 
  np->link_config.active_duplex = (unsigned char)1U;
  #line 1964 
  err = 0;
  #line 1965 
  out: 
       #line 1965 
  ;
  #line 1966 
  if (link_up != 0) 
                    #line 1966 
                    tmp = 5; else 
                                  #line 1966 
                                  tmp = 0;
  #line 1966 
  ;
  #line 1966 
  mrvl88x2011_act_led(np,tmp);
  #line 1970 
  *link_up_p = link_up;
  #line 1971 
  return err;
}

#line 1974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_bcm8706(struct niu *np, int *link_up_p)
{
  #line 1976 
  int err;
  #line 1976 
  int link_up;
  #line 1977 
  link_up = 0;
  #line 1979 
  err = mdio_read(np,np->phy_addr,1,10);
  #line 1981 
  if (err < 0 || err == 65535) 
                               #line 1982 
                               goto out;
  #line 1983 
  if ((err & 1) == 0) {
    #line 1984 
    err = 0;
    #line 1985 
    goto out;
  }
  #line 1988 
  err = mdio_read(np,np->phy_addr,2,32);
  #line 1990 
  if (err < 0) 
               #line 1991 
               goto out;
  #line 1993 
  if ((err & 1) == 0) {
    #line 1994 
    err = 0;
    #line 1995 
    goto out;
  }
  #line 1998 
  err = mdio_read(np,np->phy_addr,4,24);
  #line 2000 
  if (err < 0) 
               #line 2001 
               goto out;
  #line 2002 
  if (err != 7183) {
    #line 2009 
    err = 0;
    #line 2010 
    np->link_config.active_speed = (unsigned short)65535U;
    #line 2011 
    np->link_config.active_duplex = (unsigned char)255U;
    #line 2012 
    goto out;
  }
  #line 2015 
  link_up = 1;
  #line 2016 
  np->link_config.active_speed = (unsigned short)10000U;
  #line 2017 
  np->link_config.active_duplex = (unsigned char)1U;
  #line 2018 
  err = 0;
  #line 2020 
  out: 
       #line 2020 
  ;
  #line 2021 
  *link_up_p = link_up;
  #line 2022 
  return err;
}

#line 2025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_bcom(struct niu *np, int *link_up_p)
{
  #line 2027 
  int err;
  #line 2027 
  int link_up;
  #line 2029 
  link_up = 0;
  #line 2031 
  err = mdio_read(np,np->phy_addr,1,10);
  #line 2033 
  if (err < 0) 
               #line 2034 
               goto out;
  #line 2035 
  if ((err & 1) == 0) {
    #line 2036 
    err = 0;
    #line 2037 
    goto out;
  }
  #line 2040 
  err = mdio_read(np,np->phy_addr,2,32);
  #line 2042 
  if (err < 0) 
               #line 2043 
               goto out;
  #line 2044 
  if ((err & 1) == 0) {
    #line 2045 
    err = 0;
    #line 2046 
    goto out;
  }
  #line 2049 
  err = mdio_read(np,np->phy_addr,4,24);
  #line 2051 
  if (err < 0) 
               #line 2052 
               goto out;
  #line 2054 
  if (err != 5135) {
    #line 2060 
    err = 0;
    #line 2061 
    goto out;
  }
  #line 2064 
  link_up = 1;
  #line 2065 
  np->link_config.active_speed = (unsigned short)10000U;
  #line 2066 
  np->link_config.active_duplex = (unsigned char)1U;
  #line 2067 
  err = 0;
  #line 2069 
  out: 
       #line 2069 
  ;
  #line 2070 
  *link_up_p = link_up;
  #line 2071 
  return err;
}

#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_10g(struct niu *np, int *link_up_p)
{
  #line 2076 
  unsigned long flags;
  #line 2077 
  int err = -22;
  #line 2079 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 2081 
  if ((unsigned int)np->link_config.loopback_mode == 0U) {
    #line 2082 
    int phy_id;
    #line 2084 
    phy_id = (int)phy_decode((np->parent)->port_phy,(int)np->port);
    #line 2085 
    phy_id = (int)(np->parent)->phy_probe_info.phy_id[phy_id][(int)np->port];
    #line 2088 
    switch ((unsigned int)phy_id & 4294963440U) {
      #line 2089 
      case (unsigned int)21037088: 
                                   #line 2089 
      ;
      #line 2090 
      err = link_status_10g_mrvl(np,link_up_p);
      #line 2091 
      break;
      #line 2093 
      default: 
               #line 2093 
      ;
      #line 2094 
      err = link_status_10g_bcom(np,link_up_p);
      #line 2095 
      break;
    }
  }
  #line 2099 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 2101 
  return err;
}

#line 2104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_10g_phy_present(struct niu *np)
{
  #line 2106 
  u64 sig;
  #line 2106 
  u64 mask;
  #line 2106 
  u64 val;
  #line 2108 
  sig = readq(np->regs + 1656832UL);
  #line 2109 
  switch ((int)np->port) {
    #line 2110 
    case 0: 
            #line 2110 
    ;
    #line 2111 
    mask = 870318095ULL;
    #line 2112 
    val = 870318080ULL;
    #line 2119 
    break;
    #line 2121 
    case 1: 
            #line 2121 
    ;
    #line 2122 
    mask = 203358448ULL;
    #line 2123 
    val = 203358208ULL;
    #line 2130 
    break;
    #line 2132 
    default: 
             #line 2132 
    ;
    #line 2133 
    return 0;
  }
  #line 2136 
  if ((sig & mask) != val) 
                           #line 2137 
                           return 0;
  #line 2138 
  return 1;
}

#line 2141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int link_status_10g_hotplug(struct niu *np, int *link_up_p)
{
  #line 2143 
  unsigned long flags;
  #line 2145 
  int phy_present;
  #line 2146 
  int phy_present_prev;
  #line 2144 
  int err = 0;
  #line 2148 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 2150 
  if ((unsigned int)np->link_config.loopback_mode == 0U) {
    #line 2151 
    phy_present_prev = (int)(np->flags >> 25) & 1;
    #line 2153 
    phy_present = niu_10g_phy_present(np);
    #line 2154 
    if (phy_present != phy_present_prev) 
      #line 2156 
      if (phy_present != 0) {
        #line 2158 
        np->flags |= 33554432U;
        #line 2159 
        if ((np->phy_ops)->xcvr_init != (int (*)(struct niu *))0) 
                                                                  #line 2160 
                                                                  err = (*((np->phy_ops)->xcvr_init))(np);
        #line 2161 
        if (err != 0) {
          #line 2162 
          err = mdio_read(np,np->phy_addr,4,0);
          #line 2164 
          if (err == 65535) 
                            #line 2166 
                            goto out;
          #line 2169 
          np->flags &= 4261412863U;
        }
      }
      else {
        #line 2172 
        np->flags &= 4261412863U;
        #line 2173 
        *link_up_p = 0;
        #line 2174 
        if ((np->msg_enable & 4U) != 0U) 
                                         #line 2174 
                                         netdev_warn(np->dev,(char *)"Hotplug PHY Removed\n");
      }
    #line 2178 
    out: 
         #line 2178 
    ;
    #line 2179 
    if ((np->flags & 33554432U) != 0U) {
      #line 2180 
      err = link_status_10g_bcm8706(np,link_up_p);
      #line 2181 
      if (err == 65535) {
        #line 2183 
        *link_up_p = 1;
        #line 2184 
        np->link_config.active_speed = (unsigned short)10000U;
        #line 2185 
        np->link_config.active_duplex = (unsigned char)1U;
      }
    }
  }
  #line 2190 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 2192 
  return 0;
}

#line 2195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_link_status(struct niu *np, int *link_up_p)
{
  #line 2198 
  int err;
  #line 2197 
  struct niu_phy_ops *ops = np->phy_ops;
  #line 2200 
  err = 0;
  #line 2201 
  if (ops->link_status != (int (*)(struct niu *, int *))0) 
                                                           #line 2202 
                                                           err = (*(ops->link_status))(np,link_up_p);
  #line 2204 
  return err;
}

#line 2207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_timer(struct timer_list *t)
{
  #line 2209 
  void *__mptr;
  #line 2210 
  unsigned long off;
  #line 2211 
  int err;
  #line 2211 
  int link_up;
  #line 2209 
  __mptr = (void *)t;
  #line 2209 
  struct niu *np = ((struct niu *)(__mptr + 18446744073709522080U));
  #line 2213 
  err = niu_link_status(np,& link_up);
  #line 2214 
  if (err == 0) 
                #line 2215 
                niu_link_status_common(np,link_up);
  #line 2217 
  if ((int)netif_carrier_ok(np->dev) != 0) 
                                           #line 2218 
                                           off = 1250UL; else 
                                                              #line 2220 
                                                              off = 250UL;
  #line 2221 
  np->timer.expires = jiffies + off;
  #line 2223 
  add_timer(& np->timer);
  #line 2224 
  return;
}

#line 2226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_10g_serdes = {.serdes_init = & serdes_init_10g_serdes, .link_status = & link_status_10g_serdes};
#line 2231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_10g_serdes_niu = {.serdes_init = & serdes_init_niu_10g_serdes, .link_status = & link_status_10g_serdes};
#line 2236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_1g_serdes_niu = {.serdes_init = & serdes_init_niu_1g_serdes, .link_status = & link_status_1g_serdes};
#line 2241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_1g_rgmii = {.xcvr_init = & xcvr_init_1g_rgmii, .link_status = & link_status_1g_rgmii};
#line 2246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_10g_fiber_niu = {.serdes_init = & serdes_init_niu_10g_fiber, .xcvr_init = & xcvr_init_10g, .link_status = & link_status_10g};
#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_10g_fiber = {.serdes_init = & serdes_init_10g, .xcvr_init = & xcvr_init_10g, .link_status = & link_status_10g};
#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_10g_fiber_hotplug = {.serdes_init = & serdes_init_10g, .xcvr_init = & xcvr_init_10g_bcm8706, .link_status = & link_status_10g_hotplug};
#line 2264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_niu_10g_hotplug = {.serdes_init = & serdes_init_niu_10g_fiber, .xcvr_init = & xcvr_init_10g_bcm8706, .link_status = & link_status_10g_hotplug};
#line 2270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_10g_copper = {.serdes_init = & serdes_init_10g, .link_status = & link_status_10g};
#line 2275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_1g_fiber = {.serdes_init = & serdes_init_1g, .xcvr_init = & xcvr_init_1g, .link_status = & link_status_1g};
#line 2281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_ops phy_ops_1g_copper = {.xcvr_init = & xcvr_init_1g, .link_status = & link_status_1g};
#line 2291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_niu_10g_fiber = {.ops = & phy_ops_10g_fiber_niu, .phy_addr_base = 16U};
#line 2296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_niu_10g_serdes = {.ops = & phy_ops_10g_serdes_niu};
#line 2301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_niu_1g_serdes = {.ops = & phy_ops_1g_serdes_niu};
#line 2306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_10g_fiber = {.ops = & phy_ops_10g_fiber, .phy_addr_base = 8U};
#line 2311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_10g_fiber_hotplug = {.ops = & phy_ops_10g_fiber_hotplug, .phy_addr_base = 8U};
#line 2316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_niu_10g_hotplug = {.ops = & phy_ops_niu_10g_hotplug, .phy_addr_base = 8U};
#line 2321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_10g_copper = {.ops = & phy_ops_10g_copper, .phy_addr_base = 10U};
#line 2326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_1g_fiber = {.ops = & phy_ops_1g_fiber};
#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_1g_copper = {.ops = & phy_ops_1g_copper};
#line 2336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_1g_rgmii = {.ops = & phy_ops_1g_rgmii};
#line 2341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_phy_template phy_template_10g_serdes = {.ops = & phy_ops_10g_serdes};
#line 2346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_atca_port_num[4U] = {[2] = 11, 10};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int serdes_init_10g_serdes(struct niu *np)
{
  #line 2353 
  unsigned long ctrl_reg;
  #line 2353 
  unsigned long test_cfg_reg;
  #line 2353 
  unsigned long pll_cfg;
  #line 2353 
  unsigned long i;
  #line 2354 
  u64 ctrl_val;
  #line 2354 
  u64 test_cfg_val;
  #line 2354 
  u64 sig;
  #line 2354 
  u64 mask;
  #line 2354 
  u64 val;
  #line 2352 
  struct niu_link_config *lp = & np->link_config;
  #line 2356 
  switch ((int)np->port) {
    #line 2357 
    case 0: 
            #line 2357 
    ;
    #line 2358 
    ctrl_reg = 1654808UL;
    #line 2359 
    test_cfg_reg = 1654816UL;
    #line 2360 
    pll_cfg = 1654800UL;
    #line 2361 
    break;
    #line 2362 
    case 1: 
            #line 2362 
    ;
    #line 2363 
    ctrl_reg = 1654832UL;
    #line 2364 
    test_cfg_reg = 1654840UL;
    #line 2365 
    pll_cfg = 1654824UL;
    #line 2366 
    break;
    #line 2368 
    default: 
             #line 2368 
    ;
    #line 2369 
    return -22;
  }
  #line 2371 
  ctrl_val = 38385375ULL;
  #line 2383 
  test_cfg_val = 0ULL;
  #line 2385 
  if ((unsigned int)lp->loopback_mode == 1U) 
                                             #line 2386 
                                             test_cfg_val |= 170ULL;
  #line 2396 
  esr_reset(np);
  #line 2397 
  writeq(4ULL,np->regs + pll_cfg);
  #line 2398 
  writeq(ctrl_val,np->regs + ctrl_reg);
  #line 2399 
  writeq(test_cfg_val,np->regs + test_cfg_reg);
  #line 2402 
  i = 0UL;
  #line 2402 
  while (i <= 3UL) {
    {
      #line 2403 
      u32 rxtx_ctrl;
      #line 2403 
      u32 glue0;
      #line 2404 
      int err;
      #line 2406 
      err = esr_read_rxtx_ctrl(np,i,& rxtx_ctrl);
      #line 2407 
      if (err != 0) 
                    #line 2408 
                    return err;
      #line 2409 
      err = esr_read_glue0(np,i,& glue0);
      #line 2410 
      if (err != 0) 
                    #line 2411 
                    return err;
      #line 2413 
      rxtx_ctrl &= 4282384383U;
      #line 2414 
      rxtx_ctrl |= 8388609U;
      #line 2417 
      glue0 &= 4177522688U;
      #line 2420 
      glue0 |= 50343935U;
      #line 2426 
      err = esr_write_rxtx_ctrl(np,i,rxtx_ctrl);
      #line 2427 
      if (err != 0) 
                    #line 2428 
                    return err;
      #line 2429 
      err = esr_write_glue0(np,i,glue0);
      #line 2430 
      if (err != 0) 
                    #line 2431 
                    return err;
    }
    #line 2402 
    i ++;
  }
  #line 2435 
  sig = readq(np->regs + 1656832UL);
  #line 2436 
  switch ((int)np->port) {
    #line 2437 
    case 0: 
            #line 2437 
    ;
    #line 2438 
    mask = 870318095ULL;
    #line 2439 
    val = 870318080ULL;
    #line 2446 
    break;
    #line 2448 
    case 1: 
            #line 2448 
    ;
    #line 2449 
    mask = 203358448ULL;
    #line 2450 
    val = 203358208ULL;
    #line 2457 
    break;
    #line 2459 
    default: 
             #line 2459 
    ;
    #line 2460 
    return -22;
  }
  #line 2463 
  if ((sig & mask) != val) {
    #line 2464 
    int err_0;
    #line 2465 
    err_0 = serdes_init_1g_serdes(np);
    #line 2466 
    if (err_0 == 0) {
      #line 2467 
      np->flags &= 4294705151U;
      #line 2468 
      np->mac_xcvr = (unsigned char)2U;
    }
    else {
      #line 2470 
      netdev_err(np->dev,(char *)"Port %u 10G/1G SERDES Link Failed\n",(int)np->port);
      #line 2472 
      return -19;
    }
  }
  #line 2476 
  return 0;
}

#line 2479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_determine_phy_disposition(struct niu *np)
{
  #line 2483 
  struct niu_phy_template *tp;
  #line 2481 
  struct niu_parent *parent = np->parent;
  #line 2482 
  u8 plat_type = parent->plat_type;
  #line 2484 
  u32 phy_addr_off = 0U;
  #line 2486 
  if ((unsigned int)plat_type == 2U) 
    #line 2487 
    switch (np->flags & 917504U) {
      #line 2491 
      case (unsigned int)786432: 
                                 #line 2491 
      ;
      #line 2493 
      tp = & phy_template_niu_10g_serdes;
      #line 2494 
      break;
      #line 2495 
      case (unsigned int)524288: 
                                 #line 2495 
      ;
      #line 2497 
      tp = & phy_template_niu_1g_serdes;
      #line 2498 
      break;
      #line 2499 
      case (unsigned int)393216: 
                                 #line 2499 
      ;
      #line 2501 
      default: 
               #line 2501 
      ;
      #line 2502 
      if ((np->flags & 16777216U) != 0U) {
        #line 2503 
        tp = & phy_template_niu_10g_hotplug;
        #line 2504 
        if ((unsigned int)np->port == 0U) 
                                          #line 2505 
                                          phy_addr_off = 8U;
        #line 2506 
        if ((unsigned int)np->port == 1U) 
                                          #line 2507 
                                          phy_addr_off = 12U;
      }
      else {
        #line 2509 
        tp = & phy_template_niu_10g_fiber;
        #line 2510 
        phy_addr_off = (unsigned int)np->port + phy_addr_off;
      }
      #line 2512 
      break;
    }
  else 
    #line 2515 
    switch (np->flags & 917504U) {
      #line 2519 
      case (unsigned int)0: 
                            #line 2519 
      ;
      #line 2521 
      tp = & phy_template_1g_copper;
      #line 2522 
      if ((unsigned int)plat_type == 3U) 
                                         #line 2523 
                                         phy_addr_off = 10U;
      else 
        #line 2524 
        if ((unsigned int)plat_type == 4U) 
                                           #line 2525 
                                           phy_addr_off = 26U;
      #line 2527 
      phy_addr_off = ((unsigned int)np->port ^ 3U) + phy_addr_off;
      #line 2528 
      break;
      #line 2530 
      case (unsigned int)262144: 
                                 #line 2530 
      ;
      #line 2532 
      tp = & phy_template_10g_copper;
      #line 2533 
      break;
      #line 2535 
      case (unsigned int)131072: 
                                 #line 2535 
      ;
      #line 2537 
      tp = & phy_template_1g_fiber;
      #line 2538 
      break;
      #line 2540 
      case (unsigned int)393216: 
                                 #line 2540 
      ;
      #line 2542 
      tp = & phy_template_10g_fiber;
      #line 2543 
      if ((unsigned int)plat_type + 253U <= 1U) 
                                                #line 2545 
                                                phy_addr_off = 8U;
      #line 2546 
      phy_addr_off = (unsigned int)np->port + phy_addr_off;
      #line 2547 
      if ((np->flags & 16777216U) != 0U) {
        #line 2548 
        tp = & phy_template_10g_fiber_hotplug;
        #line 2549 
        if ((unsigned int)np->port == 0U) 
                                          #line 2550 
                                          phy_addr_off = 8U;
        #line 2551 
        if ((unsigned int)np->port == 1U) 
                                          #line 2552 
                                          phy_addr_off = 12U;
      }
      #line 2554 
      break;
      #line 2556 
      case (unsigned int)786432: 
                                 #line 2556 
      ;
      #line 2557 
      case (unsigned int)655360: 
                                 #line 2557 
      ;
      #line 2558 
      case (unsigned int)524288: 
                                 #line 2558 
      ;
      #line 2559 
      switch ((int)np->port) {
        #line 2560 
        case 0: 
                #line 2560 
        ;
        #line 2561 
        case 1: 
                #line 2561 
        ;
        #line 2562 
        tp = & phy_template_10g_serdes;
        #line 2563 
        break;
        #line 2564 
        case 2: 
                #line 2564 
        ;
        #line 2565 
        case 3: 
                #line 2565 
        ;
        #line 2566 
        tp = & phy_template_1g_rgmii;
        #line 2567 
        break;
        #line 2568 
        default: 
                 #line 2568 
        ;
        #line 2569 
        return -22;
      }
      #line 2571 
      phy_addr_off = (unsigned int)niu_atca_port_num[(int)np->port];
      #line 2572 
      break;
      #line 2574 
      default: 
               #line 2574 
      ;
      #line 2575 
      return -22;
    }
  #line 2579 
  np->phy_ops = tp->ops;
  #line 2580 
  np->phy_addr = (int)(tp->phy_addr_base + phy_addr_off);
  #line 2582 
  return 0;
}

#line 2585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_link(struct niu *np)
{
  #line 2588 
  int err;
  #line 2588 
  int ignore;
  #line 2587 
  struct niu_parent *parent = np->parent;
  #line 2590 
  if ((unsigned int)parent->plat_type == 2U) {
    #line 2591 
    err = niu_xcvr_init(np);
    #line 2592 
    if (err != 0) 
                  #line 2593 
                  return err;
    #line 2594 
    msleep(200U);
  }
  #line 2596 
  err = niu_serdes_init(np);
  #line 2597 
  if (err != 0 && (np->flags & 16777216U) == 0U) 
                                                 #line 2598 
                                                 return err;
  #line 2599 
  msleep(200U);
  #line 2600 
  err = niu_xcvr_init(np);
  #line 2601 
  if (err == 0 || (np->flags & 16777216U) != 0U) 
                                                 #line 2602 
                                                 niu_link_status(np,& ignore);
  #line 2603 
  return 0;
}

#line 2606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_primary_mac(struct niu *np, unsigned char *addr)
{
  #line 2608 
  u16 reg0 = (unsigned short)(((int)*(addr + 4U) << 8) | (int)*(addr + 5U));
  #line 2609 
  u16 reg1 = (unsigned short)(((int)*(addr + 2U) << 8) | (int)*(addr + 3U));
  #line 2610 
  u16 reg2 = (unsigned short)(((int)*addr << 8) | (int)*(addr + 1U));
  #line 2612 
  if ((np->flags & 65536U) != 0U) {
    #line 2613 
    writeq((unsigned long long)reg0,np->mac_regs + 160UL);
    #line 2614 
    writeq((unsigned long long)reg1,np->mac_regs + 168UL);
    #line 2615 
    writeq((unsigned long long)reg2,np->mac_regs + 176UL);
  }
  else {
    #line 2617 
    writeq((unsigned long long)reg0,np->mac_regs + 256UL);
    #line 2618 
    writeq((unsigned long long)reg1,np->mac_regs + 264UL);
    #line 2619 
    writeq((unsigned long long)reg2,np->mac_regs + 272UL);
  }
  #line 2621 
  return;
}

#line 2623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_num_alt_addr(struct niu *np)
{
  #line 2625 
  if ((np->flags & 65536U) != 0U) 
                                  #line 2626 
                                  return 16; else 
                                                  #line 2628 
                                                  return 6;
}

#line 2631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_alt_mac(struct niu *np, int index, unsigned char *addr)
{
  #line 2633 
  u16 reg0 = (unsigned short)(((int)*(addr + 4U) << 8) | (int)*(addr + 5U));
  #line 2634 
  u16 reg1 = (unsigned short)(((int)*(addr + 2U) << 8) | (int)*(addr + 3U));
  #line 2635 
  u16 reg2 = (unsigned short)(((int)*addr << 8) | (int)*(addr + 1U));
  #line 2637 
  ;
  #line 2637 
  if (niu_num_alt_addr(np) <= index) 
                                     #line 2638 
                                     return -22;
  #line 2640 
  if ((np->flags & 65536U) != 0U) {
    #line 2641 
    writeq((unsigned long long)reg0,np->mac_regs + ((unsigned long)index * 24UL + 536UL));
    #line 2642 
    writeq((unsigned long long)reg1,np->mac_regs + ((unsigned long)index * 24UL + 544UL));
    #line 2643 
    writeq((unsigned long long)reg2,np->mac_regs + ((unsigned long)index * 24UL + 552UL));
  }
  else {
    #line 2645 
    writeq((unsigned long long)reg0,np->mac_regs + ((unsigned long)index * 24UL + 280UL));
    #line 2646 
    writeq((unsigned long long)reg1,np->mac_regs + ((unsigned long)index * 24UL + 288UL));
    #line 2647 
    writeq((unsigned long long)reg2,np->mac_regs + ((unsigned long)index * 24UL + 296UL));
  }
  #line 2650 
  return 0;
}

#line 2653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_enable_alt_mac(struct niu *np, int index, int on)
{
  #line 2655 
  unsigned long reg;
  #line 2656 
  u64 val;
  #line 2656 
  u64 mask;
  #line 2658 
  ;
  #line 2658 
  if (niu_num_alt_addr(np) <= index) 
                                     #line 2659 
                                     return -22;
  #line 2661 
  if ((np->flags & 65536U) != 0U) {
    #line 2662 
    reg = 520UL;
    #line 2663 
    mask = (unsigned long long)(1 << index);
  }
  else {
    #line 2665 
    reg = 1016UL;
    #line 2666 
    mask = (unsigned long long)(1 << (index + 1));
  }
  #line 2669 
  val = readq(np->mac_regs + reg);
  #line 2670 
  if (on != 0) 
               #line 2671 
               val |= mask; else 
                                 #line 2673 
                                 val = ~ mask & val;
  #line 2674 
  writeq(val,np->mac_regs + reg);
  #line 2676 
  return 0;
}

#line 2679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void __set_rdc_table_num_hw(struct niu *np, unsigned long reg, int num, int mac_pref)
{
  #line 2682 
  u64 val = readq(np->mac_regs + reg);
  #line 2683 
  val &= 18446744073709551352ULL;
  #line 2684 
  val = (unsigned long long)num | val;
  #line 2685 
  if (mac_pref != 0) 
                     #line 2686 
                     val |= 256ULL;
  #line 2687 
  writeq(val,np->mac_regs + reg);
  #line 2688 
  return;
}

#line 2690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int __set_rdc_table_num(struct niu *np, int xmac_index, int bmac_index, int rdc_table_num, int mac_pref)
{
  #line 2694 
  unsigned long reg;
  #line 2696 
  if (((unsigned long long)rdc_table_num & 18446744073709551608ULL) != 0ULL) 
    #line 2697 
    return -22;
  #line 2698 
  if ((np->flags & 65536U) != 0U) 
                                  #line 2699 
                                  reg = ((unsigned long)xmac_index + 288UL) * 8UL; else 
                                                                    #line 2701 
                                                                    reg = ((unsigned long)bmac_index + 128UL) * 8UL;
  #line 2702 
  __set_rdc_table_num_hw(np,reg,rdc_table_num,mac_pref);
  #line 2703 
  return 0;
}

#line 2706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_primary_mac_rdc_table(struct niu *np, int table_num, int mac_pref)
{
  #line 2709 
  return __set_rdc_table_num(np,17,0,table_num,mac_pref);
}

#line 2712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_multicast_mac_rdc_table(struct niu *np, int table_num, int mac_pref)
{
  #line 2715 
  return __set_rdc_table_num(np,16,8,table_num,mac_pref);
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_alt_mac_rdc_table(struct niu *np, int idx, int table_num, int mac_pref)
{
  #line 2721 
  ;
  #line 2721 
  if (niu_num_alt_addr(np) <= idx) 
                                   #line 2722 
                                   return -22;
  #line 2723 
  return __set_rdc_table_num(np,idx,idx + 1,table_num,mac_pref);
}

#line 2726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 vlan_entry_set_parity(u64 reg_val)
{
  #line 2728 
  u64 port01_mask;
  #line 2729 
  u64 port23_mask;
  #line 2734 
  int tmp_0;
  #line 2739 
  int tmp_2;
  #line 2731 
  port01_mask = 255ULL;
  #line 2732 
  port23_mask = 65280ULL;
  #line 2734 
  if (0 != 0) 
              #line 2734 
              tmp_0 = ((unsigned long)((((unsigned int)((((((((((reg_val & port01_mask) & 1ULL) != 0ULL) + (((reg_val & port01_mask) & 2ULL) != 0ULL)) + (((reg_val & port01_mask) & 4ULL) != 0ULL)) + (((reg_val & port01_mask) & 8ULL) != 0ULL)) + (((reg_val & port01_mask) & 16ULL) != 0ULL)) + (((reg_val & port01_mask) & 32ULL) != 0ULL)) + (((reg_val & port01_mask) & 64ULL) != 0ULL)) + (((reg_val & port01_mask) & 128ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port01_mask) & 256ULL) != 0ULL) + (((reg_val & port01_mask) & 512ULL) != 0ULL)) + (((reg_val & port01_mask) & 1024ULL) != 0ULL)) + (((reg_val & port01_mask) & 2048ULL) != 0ULL)) + (((reg_val & port01_mask) & 4096ULL) != 0ULL)) + (((reg_val & port01_mask) & 8192ULL) != 0ULL)) + (((reg_val & port01_mask) & 16384ULL) != 0ULL)) + (((reg_val & port01_mask) & 32768ULL) != 0ULL))) + ((unsigned int)((((((((((reg_val & port01_mask) & 65536ULL) != 0ULL) + (((reg_val & port01_mask) & 131072ULL) != 0ULL)) + (((reg_val & port01_mask) & 262144ULL) != 0ULL)) + (((reg_val & port01_mask) & 524288ULL) != 0ULL)) + (((reg_val & port01_mask) & 1048576ULL) != 0ULL)) + (((reg_val & port01_mask) & 2097152ULL) != 0ULL)) + (((reg_val & port01_mask) & 4194304ULL) != 0ULL)) + (((reg_val & port01_mask) & 8388608ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port01_mask) & 16777216ULL) != 0ULL) + (((reg_val & port01_mask) & 33554432ULL) != 0ULL)) + (((reg_val & port01_mask) & 67108864ULL) != 0ULL)) + (((reg_val & port01_mask) & 134217728ULL) != 0ULL)) + (((reg_val & port01_mask) & 268435456ULL) != 0ULL)) + (((reg_val & port01_mask) & 536870912ULL) != 0ULL)) + (((reg_val & port01_mask) & 1073741824ULL) != 0ULL)) + (((reg_val & port01_mask) & 2147483648ULL) != 0ULL)))) + (((unsigned int)((((((((((reg_val & port01_mask) & 4294967296ULL) != 0ULL) + (((reg_val & port01_mask) & 8589934592ULL) != 0ULL)) + (((reg_val & port01_mask) & 17179869184ULL) != 0ULL)) + (((reg_val & port01_mask) & 34359738368ULL) != 0ULL)) + (((reg_val & port01_mask) & 68719476736ULL) != 0ULL)) + (((reg_val & port01_mask) & 137438953472ULL) != 0ULL)) + (((reg_val & port01_mask) & 274877906944ULL) != 0ULL)) + (((reg_val & port01_mask) & 549755813888ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port01_mask) & 1099511627776ULL) != 0ULL) + (((reg_val & port01_mask) & 2199023255552ULL) != 0ULL)) + (((reg_val & port01_mask) & 4398046511104ULL) != 0ULL)) + (((reg_val & port01_mask) & 8796093022208ULL) != 0ULL)) + (((reg_val & port01_mask) & 17592186044416ULL) != 0ULL)) + (((reg_val & port01_mask) & 35184372088832ULL) != 0ULL)) + (((reg_val & port01_mask) & 70368744177664ULL) != 0ULL)) + (((reg_val & port01_mask) & 140737488355328ULL) != 0ULL))) + ((unsigned int)((((((((((reg_val & port01_mask) & 281474976710656ULL) != 0ULL) + (((reg_val & port01_mask) & 562949953421312ULL) != 0ULL)) + (((reg_val & port01_mask) & 1125899906842624ULL) != 0ULL)) + (((reg_val & port01_mask) & 2251799813685248ULL) != 0ULL)) + (((reg_val & port01_mask) & 4503599627370496ULL) != 0ULL)) + (((reg_val & port01_mask) & 9007199254740992ULL) != 0ULL)) + (((reg_val & port01_mask) & 18014398509481984ULL) != 0ULL)) + (((reg_val & port01_mask) & 36028797018963968ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port01_mask) & 72057594037927936ULL) != 0ULL) + (((reg_val & port01_mask) & 144115188075855872ULL) != 0ULL)) + (((reg_val & port01_mask) & 288230376151711744ULL) != 0ULL)) + (((reg_val & port01_mask) & 576460752303423488ULL) != 0ULL)) + (((reg_val & port01_mask) & 1152921504606846976ULL) != 0ULL)) + (((reg_val & port01_mask) & 2305843009213693952ULL) != 0ULL)) + (((reg_val & port01_mask) & 4611686018427387904ULL) != 0ULL)) + (((reg_val & port01_mask) & 9223372036854775808ULL) != 0ULL))))) & 1UL) != 0UL;
  else {
    #line 2734 
    tmp_0 = (__arch_hweight64(reg_val & port01_mask) & 1UL) != 0UL;
  }
  #line 2734 
  if (tmp_0) 
             #line 2735 
             reg_val |= 65536ULL; else 
                                       #line 2737 
                                       reg_val &= 18446744073709486079ULL;
  #line 2739 
  if (0 != 0) 
              #line 2739 
              tmp_2 = ((unsigned long)((((unsigned int)((((((((((reg_val & port23_mask) & 1ULL) != 0ULL) + (((reg_val & port23_mask) & 2ULL) != 0ULL)) + (((reg_val & port23_mask) & 4ULL) != 0ULL)) + (((reg_val & port23_mask) & 8ULL) != 0ULL)) + (((reg_val & port23_mask) & 16ULL) != 0ULL)) + (((reg_val & port23_mask) & 32ULL) != 0ULL)) + (((reg_val & port23_mask) & 64ULL) != 0ULL)) + (((reg_val & port23_mask) & 128ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port23_mask) & 256ULL) != 0ULL) + (((reg_val & port23_mask) & 512ULL) != 0ULL)) + (((reg_val & port23_mask) & 1024ULL) != 0ULL)) + (((reg_val & port23_mask) & 2048ULL) != 0ULL)) + (((reg_val & port23_mask) & 4096ULL) != 0ULL)) + (((reg_val & port23_mask) & 8192ULL) != 0ULL)) + (((reg_val & port23_mask) & 16384ULL) != 0ULL)) + (((reg_val & port23_mask) & 32768ULL) != 0ULL))) + ((unsigned int)((((((((((reg_val & port23_mask) & 65536ULL) != 0ULL) + (((reg_val & port23_mask) & 131072ULL) != 0ULL)) + (((reg_val & port23_mask) & 262144ULL) != 0ULL)) + (((reg_val & port23_mask) & 524288ULL) != 0ULL)) + (((reg_val & port23_mask) & 1048576ULL) != 0ULL)) + (((reg_val & port23_mask) & 2097152ULL) != 0ULL)) + (((reg_val & port23_mask) & 4194304ULL) != 0ULL)) + (((reg_val & port23_mask) & 8388608ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port23_mask) & 16777216ULL) != 0ULL) + (((reg_val & port23_mask) & 33554432ULL) != 0ULL)) + (((reg_val & port23_mask) & 67108864ULL) != 0ULL)) + (((reg_val & port23_mask) & 134217728ULL) != 0ULL)) + (((reg_val & port23_mask) & 268435456ULL) != 0ULL)) + (((reg_val & port23_mask) & 536870912ULL) != 0ULL)) + (((reg_val & port23_mask) & 1073741824ULL) != 0ULL)) + (((reg_val & port23_mask) & 2147483648ULL) != 0ULL)))) + (((unsigned int)((((((((((reg_val & port23_mask) & 4294967296ULL) != 0ULL) + (((reg_val & port23_mask) & 8589934592ULL) != 0ULL)) + (((reg_val & port23_mask) & 17179869184ULL) != 0ULL)) + (((reg_val & port23_mask) & 34359738368ULL) != 0ULL)) + (((reg_val & port23_mask) & 68719476736ULL) != 0ULL)) + (((reg_val & port23_mask) & 137438953472ULL) != 0ULL)) + (((reg_val & port23_mask) & 274877906944ULL) != 0ULL)) + (((reg_val & port23_mask) & 549755813888ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port23_mask) & 1099511627776ULL) != 0ULL) + (((reg_val & port23_mask) & 2199023255552ULL) != 0ULL)) + (((reg_val & port23_mask) & 4398046511104ULL) != 0ULL)) + (((reg_val & port23_mask) & 8796093022208ULL) != 0ULL)) + (((reg_val & port23_mask) & 17592186044416ULL) != 0ULL)) + (((reg_val & port23_mask) & 35184372088832ULL) != 0ULL)) + (((reg_val & port23_mask) & 70368744177664ULL) != 0ULL)) + (((reg_val & port23_mask) & 140737488355328ULL) != 0ULL))) + ((unsigned int)((((((((((reg_val & port23_mask) & 281474976710656ULL) != 0ULL) + (((reg_val & port23_mask) & 562949953421312ULL) != 0ULL)) + (((reg_val & port23_mask) & 1125899906842624ULL) != 0ULL)) + (((reg_val & port23_mask) & 2251799813685248ULL) != 0ULL)) + (((reg_val & port23_mask) & 4503599627370496ULL) != 0ULL)) + (((reg_val & port23_mask) & 9007199254740992ULL) != 0ULL)) + (((reg_val & port23_mask) & 18014398509481984ULL) != 0ULL)) + (((reg_val & port23_mask) & 36028797018963968ULL) != 0ULL)) + (unsigned int)((((((((((reg_val & port23_mask) & 72057594037927936ULL) != 0ULL) + (((reg_val & port23_mask) & 144115188075855872ULL) != 0ULL)) + (((reg_val & port23_mask) & 288230376151711744ULL) != 0ULL)) + (((reg_val & port23_mask) & 576460752303423488ULL) != 0ULL)) + (((reg_val & port23_mask) & 1152921504606846976ULL) != 0ULL)) + (((reg_val & port23_mask) & 2305843009213693952ULL) != 0ULL)) + (((reg_val & port23_mask) & 4611686018427387904ULL) != 0ULL)) + (((reg_val & port23_mask) & 9223372036854775808ULL) != 0ULL))))) & 1UL) != 0UL;
  else {
    #line 2739 
    tmp_2 = (__arch_hweight64(reg_val & port23_mask) & 1UL) != 0UL;
  }
  #line 2739 
  if (tmp_2) 
             #line 2740 
             reg_val |= 131072ULL; else 
                                        #line 2742 
                                        reg_val &= 18446744073709420543ULL;
  #line 2744 
  return reg_val;
}

#line 2747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void vlan_tbl_write(struct niu *np, unsigned long index, int port, int vpr, int rdc_table)
{
  #line 2750 
  u64 reg_val = readq(np->regs + (index + 458752UL) * 8UL);
  #line 2752 
  reg_val = ~ (15ULL << port * 4) & reg_val;
  #line 2755 
  if (vpr != 0) 
                #line 2756 
                reg_val = (8ULL << port * 4) | reg_val;
  #line 2758 
  reg_val = (unsigned long long)(rdc_table << port * 4) | reg_val;
  #line 2760 
  reg_val = vlan_entry_set_parity(reg_val);
  #line 2762 
  writeq(reg_val,np->regs + (index + 458752UL) * 8UL);
  #line 2763 
  return;
}

#line 2765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void vlan_tbl_clear(struct niu *np)
{
  #line 2767 
  int i;
  #line 2769 
  i = 0;
  #line 2769 
  while (i <= 4095) {
    #line 2770 
    writeq(0ULL,np->regs + ((unsigned long)i + 458752UL) * 8UL);
    #line 2769 
    i ++;
  }
  #line 2771 
  return;
}

#line 2773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_wait_bit(struct niu *np, u64 bit)
{
  #line 2775 
  int limit = 1000;
  #line 2777 
  while (1) {
    #line 2777 
    limit --;
    #line 2777 
    if (! (limit > 0)) 
                       #line 2777 
                       break;
    {
      #line 2778 
      ;
      #line 2778 
      if ((readq(np->regs + 3801296UL) & bit) != 0ULL) 
                                                       #line 2779 
                                                       break;
      #line 2780 
      __const_udelay(4295UL);
    }
  }
  #line 2782 
  if (limit <= 0) 
                  #line 2783 
                  return -19;
  #line 2785 
  return 0;
}

#line 2788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_flush(struct niu *np, int index)
{
  #line 2790 
  writeq(0ULL,np->regs + 3801232UL);
  #line 2791 
  writeq(255ULL,np->regs + 3801264UL);
  #line 2792 
  writeq((unsigned long long)index,np->regs + 3801296UL);
  #line 2794 
  return tcam_wait_bit(np,131072ULL);
}

#line 2819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_write(struct niu *np, int index, u64 *key, u64 *mask)
{
  #line 2822 
  writeq(*key,np->regs + 3801232UL);
  #line 2823 
  writeq(*(key + 1U),np->regs + 3801240UL);
  #line 2824 
  writeq(*(key + 2U),np->regs + 3801248UL);
  #line 2825 
  writeq(*(key + 3U),np->regs + 3801256UL);
  #line 2826 
  writeq(*mask,np->regs + 3801264UL);
  #line 2827 
  writeq(*(mask + 1U),np->regs + 3801272UL);
  #line 2828 
  writeq(*(mask + 2U),np->regs + 3801280UL);
  #line 2829 
  writeq(*(mask + 3U),np->regs + 3801288UL);
  #line 2830 
  writeq((unsigned long long)index,np->regs + 3801296UL);
  #line 2832 
  return tcam_wait_bit(np,131072ULL);
}

#line 2849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_assoc_write(struct niu *np, int index, u64 assoc_data)
{
  #line 2851 
  writeq(assoc_data,np->regs + 3801240UL);
  #line 2852 
  writeq((unsigned long long)(index | 1048576),np->regs + 3801296UL);
  #line 2854 
  return tcam_wait_bit(np,131072ULL);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void tcam_enable(struct niu *np, int on)
{
  #line 2859 
  u64 val = readq(np->regs + 3801344UL);
  #line 2861 
  if (on != 0) 
               #line 2862 
               val &= 18446744073642442751ULL; else 
                                                    #line 2864 
                                                    val |= 67108864ULL;
  #line 2865 
  writeq(val,np->regs + 3801344UL);
  #line 2866 
  return;
}

#line 2868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void tcam_set_lat_and_ratio(struct niu *np, u64 latency, u64 ratio)
{
  #line 2870 
  u64 val = readq(np->regs + 3801344UL);
  #line 2872 
  val &= 18446744073708507133ULL;
  #line 2875 
  val = (latency << 16) | val;
  #line 2876 
  val = (ratio << 12) | val;
  #line 2877 
  writeq(val,np->regs + 3801344UL);
  #line 2879 
  val = readq(np->regs + 3801344UL);
  #line 2880 
  val |= 2ULL;
  #line 2881 
  writeq(val,np->regs + 3801344UL);
  #line 2882 
  return;
}

#line 2884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_user_eth_class_enable(struct niu *np, unsigned long class, int on)
{
  #line 2887 
  unsigned long reg;
  #line 2888 
  u64 val;
  #line 2890 
  if (class + 18446744073709551614UL > 1UL) 
                                            #line 2892 
                                            return -22;
  #line 2894 
  reg = (class + 475134UL) * 8UL;
  #line 2895 
  val = readq(np->regs + reg);
  #line 2896 
  if (on != 0) 
               #line 2897 
               val |= 65536ULL; else 
                                     #line 2899 
                                     val &= 18446744073709486079ULL;
  #line 2900 
  writeq(val,np->regs + reg);
  #line 2902 
  return 0;
}

#line 2927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_user_ip_class_enable(struct niu *np, unsigned long class, int on)
{
  #line 2930 
  unsigned long reg;
  #line 2931 
  u64 val;
  #line 2933 
  if (class + 18446744073709551612UL > 3UL) 
                                            #line 2935 
                                            return -22;
  #line 2937 
  reg = (class + 475134UL) * 8UL;
  #line 2938 
  val = readq(np->regs + reg);
  #line 2939 
  if (on != 0) 
               #line 2940 
               val |= 33554432ULL; else 
                                        #line 2942 
                                        val &= 18446744073675997183ULL;
  #line 2943 
  writeq(val,np->regs + reg);
  #line 2945 
  return 0;
}

#line 2948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_user_ip_class_set(struct niu *np, unsigned long class, int ipv6, u64 protocol_id, u64 tos_mask, u64 tos_val)
{
  #line 2952 
  unsigned long reg;
  #line 2953 
  u64 val;
  #line 2955 
  if (((class + 18446744073709551612UL > 3UL || (protocol_id & 18446744073709551360ULL) != 0ULL) || (tos_mask & 18446744073709551360ULL) != 0ULL) || (tos_val & 18446744073709551360ULL) != 0ULL) 
    #line 2960 
    return -22;
  #line 2962 
  reg = (class + 475134UL) * 8UL;
  #line 2963 
  val = readq(np->regs + reg);
  #line 2964 
  val &= 18446744073675997184ULL;
  #line 2966 
  if (ipv6 != 0) 
                 #line 2967 
                 val |= 16777216ULL;
  #line 2968 
  val = (protocol_id << 16) | val;
  #line 2969 
  val = (tos_mask << 8) | val;
  #line 2970 
  val |= tos_val;
  #line 2971 
  writeq(val,np->regs + reg);
  #line 2973 
  return 0;
}

#line 2976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_early_init(struct niu *np)
{
  #line 2978 
  unsigned long i;
  #line 2979 
  int err;
  #line 2981 
  tcam_enable(np,0);
  #line 2982 
  tcam_set_lat_and_ratio(np,4ULL,10ULL);
  #line 2985 
  i = 2UL;
  #line 2985 
  while (i <= 3UL) {
    #line 2986 
    err = tcam_user_eth_class_enable(np,i,0);
    #line 2987 
    if (err != 0) 
                  #line 2988 
                  return err;
    #line 2985 
    i ++;
  }
  #line 2990 
  i = 4UL;
  #line 2990 
  while (i <= 7UL) {
    #line 2991 
    err = tcam_user_ip_class_enable(np,i,0);
    #line 2992 
    if (err != 0) 
                  #line 2993 
                  return err;
    #line 2990 
    i ++;
  }
  #line 2996 
  return 0;
}

#line 2999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int tcam_flush_all(struct niu *np)
{
  #line 3001 
  unsigned long i;
  #line 3003 
  i = 0UL;
  #line 3003 
  while ((unsigned long)(np->parent)->tcam_num_entries > i) {
    {
      #line 3004 
      int err = tcam_flush(np,(int)i);
      #line 3005 
      if (err != 0) 
                    #line 3006 
                    return err;
    }
    #line 3003 
    i ++;
  }
  #line 3008 
  return 0;
}

#line 3011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 hash_addr_regval(unsigned long index, unsigned long num_entries)
{
  #line 3013 
  unsigned long long tmp;
  #line 3013 
  if (num_entries == 1UL) 
                          #line 3013 
                          tmp = 8388608ULL; else 
                                                 #line 3013 
                                                 tmp = 0ULL;
  #line 3013 
  ;
  #line 3013 
  return tmp | (unsigned long long)index;
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int hash_write(struct niu *np, unsigned long partition, unsigned long index, unsigned long num_entries, u64 *data)
{
  #line 3041 
  unsigned long i;
  #line 3040 
  u64 val = hash_addr_regval(index,num_entries);
  #line 3043 
  if (partition > 7UL || num_entries * 8UL + index > 8388608UL) 
                                                                #line 3045 
                                                                return -22;
  #line 3047 
  writeq(val,np->regs + (partition + 384UL) * 8192UL);
  #line 3048 
  i = 0UL;
  #line 3048 
  while (i < num_entries) {
    #line 3049 
    writeq(*(data + i),np->regs + (partition * 8192UL + 3145736UL));
    #line 3048 
    i ++;
  }
  #line 3051 
  return 0;
}

#line 3054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void fflp_reset(struct niu *np)
{
  #line 3056 
  u64 val;
  #line 3058 
  writeq(4194304ULL,np->regs + 3801344UL);
  #line 3059 
  __const_udelay(42950UL);
  #line 3060 
  writeq(0ULL,np->regs + 3801344UL);
  #line 3062 
  val = 2ULL;
  #line 3063 
  writeq(val,np->regs + 3801344UL);
  #line 3064 
  return;
}

#line 3066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void fflp_set_timings(struct niu *np)
{
  #line 3068 
  u64 val = readq(np->regs + 3801344UL);
  #line 3070 
  val &= 18446744073709551613ULL;
  #line 3071 
  val |= 2560ULL;
  #line 3072 
  writeq(val,np->regs + 3801344UL);
  #line 3074 
  val = readq(np->regs + 3801344UL);
  #line 3075 
  val |= 2ULL;
  #line 3076 
  writeq(val,np->regs + 3801344UL);
  #line 3078 
  val = readq(np->regs + 3801360UL);
  #line 3079 
  val &= 18446744069414584320ULL;
  #line 3080 
  val |= 33554432ULL;
  #line 3081 
  val |= 512ULL;
  #line 3082 
  writeq(val,np->regs + 3801360UL);
  #line 3083 
  return;
}

#line 3085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int fflp_set_partition(struct niu *np, u64 partition, u64 mask, u64 base, int enable)
{
  #line 3088 
  unsigned long reg;
  #line 3089 
  u64 val;
  #line 3091 
  if ((partition > 7ULL || (mask & 18446744073709551584ULL) != 0ULL) || (base & 18446744073709551584ULL) != 0ULL) 
    #line 3094 
    return -22;
  #line 3096 
  reg = (unsigned long)((partition + 491534ULL) * 8ULL);
  #line 3098 
  val = readq(np->regs + reg);
  #line 3099 
  val &= 18446744073709478112ULL;
  #line 3100 
  val = (mask << 8) | val;
  #line 3101 
  val |= base;
  #line 3102 
  if (enable != 0) 
                   #line 3103 
                   val |= 65536ULL;
  #line 3104 
  writeq(val,np->regs + reg);
  #line 3106 
  return 0;
}

#line 3109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int fflp_disable_all_partitions(struct niu *np)
{
  #line 3111 
  unsigned long i;
  #line 3113 
  i = 0UL;
  #line 3113 
  while (i <= 7UL) {
    {
      #line 3114 
      int err = fflp_set_partition(np,0ULL,0ULL,0ULL,0);
      #line 3115 
      if (err != 0) 
                    #line 3116 
                    return err;
    }
    #line 3113 
    i ++;
  }
  #line 3118 
  return 0;
}

#line 3121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void fflp_llcsnap_enable(struct niu *np, int on)
{
  #line 3123 
  u64 val = readq(np->regs + 3801344UL);
  #line 3125 
  if (on != 0) 
               #line 3126 
               val |= 1ULL; else 
                                 #line 3128 
                                 val &= 18446744073709551614ULL;
  #line 3129 
  writeq(val,np->regs + 3801344UL);
  #line 3130 
  return;
}

#line 3132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void fflp_errors_enable(struct niu *np, int on)
{
  #line 3134 
  u64 val = readq(np->regs + 3801344UL);
  #line 3136 
  if (on != 0) 
               #line 3137 
               val &= 18446744073709551611ULL; else 
                                                    #line 3139 
                                                    val |= 4ULL;
  #line 3140 
  writeq(val,np->regs + 3801344UL);
  #line 3141 
  return;
}

#line 3143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int fflp_hash_clear(struct niu *np)
{
  #line 3145 
  struct fcram_hash_ipv4 ent;
  #line 3146 
  unsigned long i;
  #line 3149 
  memset((void *)(& ent),0,32UL);
  #line 3150 
  ent.header = 4611686018427387904ULL;
  #line 3152 
  i = 0UL;
  #line 3152 
  while (i <= 8388607UL) {
    {
      #line 3153 
      int err = hash_write(np,0UL,i,1UL,(u64 *)(& ent));
      #line 3154 
      if (err != 0) 
                    #line 3155 
                    return err;
    }
    #line 3152 
    i += 32UL;
  }
  #line 3157 
  return 0;
}

#line 3160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int fflp_early_init(struct niu *np)
{
  #line 3162 
  struct niu_parent *parent;
  #line 3163 
  unsigned long flags;
  #line 3164 
  int err;
  #line 3166 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 3168 
  parent = np->parent;
  #line 3169 
  err = 0;
  #line 3170 
  if ((parent->flags & 1U) == 0U) {
    #line 3171 
    if ((unsigned int)(np->parent)->plat_type != 2U) {
      #line 3172 
      fflp_reset(np);
      #line 3173 
      fflp_set_timings(np);
      #line 3174 
      err = fflp_disable_all_partitions(np);
      #line 3175 
      if (err != 0) {
        #line 3176 
        if ((np->msg_enable & 2U) != 0U) 
                                         #line 3176 
                                         netdev_printk((char *)"\001",np->dev,(char *)"fflp_disable_all_partitions failed, err=%d\n",err);
        #line 3179 
        goto out;
      }
    }
    #line 3183 
    err = tcam_early_init(np);
    #line 3184 
    if (err != 0) {
      #line 3185 
      if ((np->msg_enable & 2U) != 0U) 
                                       #line 3185 
                                       netdev_printk((char *)"\001",np->dev,(char *)"tcam_early_init failed, err=%d\n",err);
      #line 3187 
      goto out;
    }
    #line 3189 
    fflp_llcsnap_enable(np,1);
    #line 3190 
    fflp_errors_enable(np,0);
    #line 3191 
    writeq(0ULL,np->regs + 3932256UL);
    #line 3192 
    writeq(0ULL,np->regs + 3932264UL);
    #line 3194 
    err = tcam_flush_all(np);
    #line 3195 
    if (err != 0) {
      #line 3196 
      if ((np->msg_enable & 2U) != 0U) 
                                       #line 3196 
                                       netdev_printk((char *)"\001",np->dev,(char *)"tcam_flush_all failed, err=%d\n",err);
      #line 3198 
      goto out;
    }
    #line 3200 
    if ((unsigned int)(np->parent)->plat_type != 2U) {
      #line 3201 
      err = fflp_hash_clear(np);
      #line 3202 
      if (err != 0) {
        #line 3203 
        if ((np->msg_enable & 2U) != 0U) 
                                         #line 3203 
                                         netdev_printk((char *)"\001",np->dev,(char *)"fflp_hash_clear failed, err=%d\n",err);
        #line 3206 
        goto out;
      }
    }
    #line 3210 
    vlan_tbl_clear(np);
    #line 3212 
    parent->flags |= 1U;
  }
  #line 3214 
  out: 
       #line 3214 
  ;
  #line 3215 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 3216 
  return err;
}

#line 3219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_flow_key(struct niu *np, unsigned long class_code, u64 key)
{
  #line 3221 
  if (class_code + 18446744073709551612UL > 11UL) 
                                                  #line 3223 
                                                  return -22;
  #line 3225 
  writeq(key,np->regs + (class_code + 491516UL) * 8UL);
  #line 3226 
  return 0;
}

#line 3229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_tcam_key(struct niu *np, unsigned long class_code, u64 key)
{
  #line 3231 
  if (class_code + 18446744073709551612UL > 11UL) 
                                                  #line 3233 
                                                  return -22;
  #line 3235 
  writeq(key,np->regs + (class_code + 475138UL) * 8UL);
  #line 3236 
  return 0;
}

#line 3240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u16 tcam_get_index(struct niu *np, u16 idx)
{
  #line 3243 
  if ((int)idx >= (int)np->clas.tcam_sz + -1) 
                                              #line 3244 
                                              idx = (unsigned short)0U;
  #line 3245 
  return (unsigned short)((unsigned int)np->clas.tcam_top + ((unsigned int)idx + 1U) * (unsigned int)((unsigned short)(np->parent)->num_ports));
}

#line 3248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u16 tcam_get_size(struct niu *np)
{
  #line 3251 
  return (unsigned short)((unsigned int)np->clas.tcam_sz + 65535U);
}

#line 3254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u16 tcam_get_valid_entry_cnt(struct niu *np)
{
  #line 3257 
  return (unsigned short)((unsigned int)np->clas.tcam_valid_entries + 65535U);
}

#line 3260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_rx_skb_append(struct sk_buff *skb, struct page *page, u32 offset, u32 size, u32 truesize)
{
  #line 3263 
  ;
  #line 3263 
  ;
  #line 3263 
  ;
  #line 3263 
  ;
  #line 3263 
  skb_fill_page_desc(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,page,(int)offset,(int)size);
  #line 3265 
  skb->len += size;
  #line 3266 
  skb->data_len += size;
  #line 3267 
  skb->truesize += truesize;
  #line 3268 
  return;
}

#line 3270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static unsigned int niu_hash_rxaddr(struct rx_ring_info *rp, u64 a)
{
  #line 3272 
  a >>= 12;
  #line 3273 
  a = (a >> 7) ^ a;
  #line 3275 
  return (unsigned int)a & 127U;
}

#line 3278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct page *niu_find_rxpage(struct rx_ring_info *rp, u64 addr, struct page ***link)
{
  #line 3282 
  struct page *p;
  #line 3282 
  struct page **pp;
  #line 3281 
  unsigned int h = niu_hash_rxaddr(rp,addr);
  #line 3284 
  addr &= 18446744073709547520ULL;
  #line 3285 
  pp = rp->rxhash + (unsigned long)h;
  #line 3286 
  while (1) {
    #line 3286 
    p = *pp;
    #line 3286 
    if (! (p != (struct page *)0)) 
                                   #line 3286 
                                   break;
    #line 3287 
    if (p->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == (unsigned long)addr) {
      #line 3288 
      *link = pp;
      #line 3289 
      goto found;
    }
    #line 3286 
    pp = (struct page **)(& p->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping);
  }
  #line 3293 
  ldv_inline_asm();
  #line 3294 
  ldv_inline_asm();
  #line 3295 
  ldv_inline_asm();
  #line 3292 
  ;
  #line 3294 
  found: 
         #line 3294 
  ;
  #line 3295 
  return p;
}

#line 3298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_hash_page(struct rx_ring_info *rp, struct page *page, u64 base)
{
  #line 3300 
  unsigned int h = niu_hash_rxaddr(rp,base);
  #line 3302 
  page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index = (unsigned long)base;
  #line 3303 
  page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping = (struct address_space *)*(rp->rxhash + (unsigned long)h);
  #line 3304 
  *(rp->rxhash + (unsigned long)h) = page;
  #line 3305 
  return;
}

#line 3307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rbr_add_page(struct niu *np, struct rx_ring_info *rp, gfp_t mask, int start_index)
{
  #line 3310 
  struct page *page;
  #line 3311 
  u64 addr;
  #line 3312 
  int i;
  #line 3314 
  page = alloc_pages(mask,0U);
  #line 3315 
  if (page == (struct page *)0) 
                                #line 3316 
                                return -12;
  #line 3318 
  addr = (*((np->ops)->map_page))(np->device,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 3320 
  if (addr == 0ULL) {
    #line 3321 
    __free_pages(page,0U);
    #line 3322 
    return -12;
  }
  #line 3325 
  niu_hash_page(rp,page,addr);
  #line 3326 
  if ((unsigned int)rp->rbr_blocks_per_page > 1U) 
                                                  #line 3327 
                                                  page_ref_add(page,(int)rp->rbr_blocks_per_page + -1);
  #line 3329 
  i = 0;
  #line 3329 
  while ((int)rp->rbr_blocks_per_page > i) {
    {
      #line 3330 
      __le32 *rbr = rp->rbr + (unsigned long)(start_index + i);
      #line 3332 
      *rbr = (unsigned int)(addr >> 12);
      #line 3333 
      addr = (unsigned long long)rp->rbr_block_size + addr;
    }
    #line 3329 
    i ++;
  }
  #line 3336 
  return 0;
}

#line 3339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_rbr_refill(struct niu *np, struct rx_ring_info *rp, gfp_t mask)
{
  #line 3341 
  int index = (int)rp->rbr_index;
  #line 3343 
  (rp->rbr_pending) ++;
  #line 3344 
  if (rp->rbr_pending % (unsigned int)rp->rbr_blocks_per_page == 0U) {
    #line 3345 
    int err = niu_rbr_add_page(np,rp,mask,index);
    #line 3347 
    if ((long)(err != 0) != 0L) {
      #line 3348 
      (rp->rbr_pending) --;
      #line 3349 
      return;
    }
    #line 3352 
    rp->rbr_index += (unsigned int)rp->rbr_blocks_per_page;
    #line 3353 
    if ((long)(rp->rbr_index > rp->rbr_table_size) != 0L) {
      #line 3354 
      ldv_inline_asm();
      #line 3355 
      ldv_inline_asm();
      #line 3356 
      ldv_inline_asm();
      #line 3353 
      ;
    }
    #line 3354 
    if (rp->rbr_index == rp->rbr_table_size) 
                                             #line 3355 
                                             rp->rbr_index = 0U;
    #line 3357 
    if (rp->rbr_pending >= rp->rbr_kick_thresh) {
      #line 3358 
      writeq((unsigned long long)rp->rbr_pending,np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291488UL));
      #line 3359 
      rp->rbr_pending = 0U;
    }
  }
  #line 3362 
  return;
}

#line 3364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rx_pkt_ignore(struct niu *np, struct rx_ring_info *rp)
{
  #line 3366 
  unsigned int index = rp->rcr_index;
  #line 3367 
  int num_rcr = 0;
  #line 3369 
  (rp->rx_dropped) ++;
  #line 3370 
  while (1) {
    {
      #line 3371 
      struct page *page;
      #line 3371 
      struct page **link;
      #line 3372 
      u64 addr;
      #line 3372 
      u64 val;
      #line 3373 
      u32 rcr_size;
      #line 3375 
      num_rcr ++;
      #line 3377 
      val = __le64_to_cpup(rp->rcr + (unsigned long)index);
      #line 3378 
      addr = (val << 6) & 17592186044352ULL;
      #line 3380 
      page = niu_find_rxpage(rp,addr,& link);
      #line 3382 
      rcr_size = (unsigned int)rp->rbr_sizes[(val >> 38) & 3ULL];
      #line 3384 
      if ((page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index - (unsigned long)rcr_size) + 4096UL == (unsigned long)addr) {
        #line 3385 
        *link = (struct page *)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping;
        #line 3386 
        (*((np->ops)->unmap_page))(np->device,(unsigned long long)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 3388 
        page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index = 0UL;
        #line 3389 
        page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping = (struct address_space *)0;
        #line 3390 
        __free_pages(page,0U);
        #line 3391 
        (rp->rbr_refill_pending) ++;
      }
      #line 3394 
      if (index + 1U < rp->rcr_table_size) 
                                           #line 3394 
                                           index ++; else 
                                                          #line 3394 
                                                          index = 0U;
      #line 3395 
      if ((val & 9223372036854775808ULL) == 0ULL) 
                                                  #line 3396 
                                                  break;
    }
  }
  #line 3399 
  rp->rcr_index = index;
  #line 3401 
  return num_rcr;
}

#line 3404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_process_rx_pkt(struct napi_struct *napi, struct niu *np, struct rx_ring_info *rp)
{
  #line 3471 
  int __UNIQUE_ID___x542;
  #line 3471 
  int tmp_0;
  #line 3408 
  struct rx_pkt_hdr1 *rh;
  #line 3409 
  struct sk_buff *skb;
  #line 3410 
  int len;
  #line 3410 
  int num_rcr;
  #line 3407 
  unsigned int index = rp->rcr_index;
  #line 3412 
  skb = netdev_alloc_skb(np->dev,128U);
  #line 3413 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 3414 
    return niu_rx_pkt_ignore(np,rp);
  }
  #line 3416 
  num_rcr = 0;
  #line 3417 
  while (1) {
    {
      #line 3418 
      struct page *page;
      #line 3418 
      struct page **link;
      #line 3419 
      u32 rcr_size;
      #line 3419 
      u32 append_size;
      #line 3420 
      u64 addr;
      #line 3420 
      u64 val;
      #line 3420 
      u64 off;
      #line 3422 
      num_rcr ++;
      #line 3424 
      val = __le64_to_cpup(rp->rcr + (unsigned long)index);
      #line 3426 
      len = (int)(val >> 40) & 16383;
      #line 3428 
      append_size = (unsigned int)(len + 18);
      #line 3430 
      addr = (val << 6) & 17592186044352ULL;
      #line 3432 
      page = niu_find_rxpage(rp,addr,& link);
      #line 3434 
      rcr_size = (unsigned int)rp->rbr_sizes[(val >> 38) & 3ULL];
      #line 3437 
      off = addr & 4095ULL;
      #line 3438 
      if (num_rcr == 1) {
        #line 3439 
        int ptype;
        #line 3441 
        ptype = (int)(val >> 61);
        #line 3442 
        if ((unsigned int)ptype + 4294967295U <= 1U && (val & 828662331436171264ULL) == 0ULL) 
          #line 3446 
          skb->ip_summed = (unsigned char)1U; else 
                                                   #line 3448 
                                                   skb_checksum_none_assert(skb);
      }
      else 
        #line 3449 
        if ((val & 9223372036854775808ULL) == 0ULL) 
                                                    #line 3450 
                                                    append_size -= skb->len;
      #line 3452 
      niu_rx_skb_append(skb,page,(unsigned int)off,append_size,rcr_size);
      #line 3453 
      if ((page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index + (unsigned long)rp->rbr_block_size) - (unsigned long)rcr_size == (unsigned long)addr) {
        #line 3454 
        *link = (struct page *)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping;
        #line 3455 
        (*((np->ops)->unmap_page))(np->device,(unsigned long long)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 3457 
        page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index = 0UL;
        #line 3458 
        page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping = (struct address_space *)0;
        #line 3459 
        (rp->rbr_refill_pending) ++;
      }
      else 
           #line 3461 
           get_page(page);
      #line 3463 
      if (index + 1U < rp->rcr_table_size) 
                                           #line 3463 
                                           index ++; else 
                                                          #line 3463 
                                                          index = 0U;
      #line 3464 
      if ((val & 9223372036854775808ULL) == 0ULL) 
                                                  #line 3465 
                                                  break;
    }
  }
  #line 3468 
  rp->rcr_index = index;
  #line 3470 
  len = (int)((unsigned int)len + 18U);
  {
    #line 3471 
    __UNIQUE_ID___x542 = len;
    #line 3471 
    int __UNIQUE_ID___y543 = 36;
    #line 3471 
    if (__UNIQUE_ID___x542 < __UNIQUE_ID___y543) 
                                                 #line 3471 
                                                 tmp_0 = __UNIQUE_ID___x542; else 
                                                                    #line 3471 
                                                                    tmp_0 = __UNIQUE_ID___y543;
    }
  #line 3471 
  len = tmp_0;
  #line 3472 
  __pskb_pull_tail(skb,len);
  #line 3474 
  rh = (struct rx_pkt_hdr1 *)skb->data;
  #line 3475 
  if (((np->dev)->features & 274877906944ULL) != 0ULL) 
                                                       #line 3476 
                                                       skb_set_hash(skb,((((unsigned int)rh->hashval2_0 << 24) | ((unsigned int)rh->hashval2_1 << 16)) | ((unsigned int)rh->hashval1_1 << 8)) | (unsigned int)rh->hashval1_2,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  #line 3482 
  skb_pull(skb,18U);
  #line 3484 
  (rp->rx_packets) ++;
  #line 3485 
  rp->rx_bytes += (unsigned long long)skb->len;
  #line 3487 
  skb->protocol = eth_type_trans(skb,np->dev);
  #line 3488 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)rp->rx_channel)));
  #line 3489 
  napi_gro_receive(napi,skb);
  #line 3491 
  return num_rcr;
}

#line 3494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rbr_fill(struct niu *np, struct rx_ring_info *rp, gfp_t mask)
{
  #line 3497 
  int err;
  #line 3496 
  int blocks_per_page = (int)rp->rbr_blocks_per_page;
  #line 3497 
  int index = (int)rp->rbr_index;
  #line 3499 
  err = 0;
  #line 3500 
  while (rp->rbr_table_size - (unsigned int)blocks_per_page > (unsigned int)index) {
    #line 3501 
    err = niu_rbr_add_page(np,rp,mask,index);
    #line 3502 
    if ((long)(err != 0) != 0L) 
                                #line 3503 
                                break;
    #line 3505 
    index += blocks_per_page;
  }
  #line 3508 
  rp->rbr_index = (unsigned int)index;
  #line 3509 
  return err;
}

#line 3512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_rbr_free(struct niu *np, struct rx_ring_info *rp)
{
  #line 3514 
  int i;
  #line 3516 
  i = 0;
  #line 3516 
  while (i <= 127) {
    {
      #line 3517 
      struct page *page;
      #line 3519 
      page = *(rp->rxhash + (unsigned long)i);
      #line 3520 
      while (page != (struct page *)0) {
        #line 3521 
        struct page *next = (struct page *)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping;
        #line 3522 
        u64 base = (unsigned long long)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index;
        #line 3524 
        (*((np->ops)->unmap_page))(np->device,base,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
        #line 3526 
        page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index = 0UL;
        #line 3527 
        page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping = (struct address_space *)0;
        #line 3529 
        __free_pages(page,0U);
        #line 3531 
        page = next;
      }
    }
    #line 3516 
    i ++;
  }
  #line 3535 
  i = 0;
  #line 3535 
  while (rp->rbr_table_size > (unsigned int)i) {
    #line 3536 
    *(rp->rbr + (unsigned long)i) = 0U;
    #line 3535 
    i ++;
  }
  #line 3537 
  rp->rbr_index = 0U;
  #line 3538 
  return;
}

#line 3540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int release_tx_packet(struct niu *np, struct tx_ring_info *rp, int idx)
{
  #line 3544 
  struct tx_pkt_hdr *tp;
  #line 3545 
  u64 tx_flags;
  #line 3546 
  int i;
  #line 3546 
  int len;
  #line 3542 
  struct tx_buff_info *tb = & rp->tx_buffs[idx];
  #line 3543 
  struct sk_buff *skb = tb->skb;
  #line 3548 
  tp = (struct tx_pkt_hdr *)skb->data;
  #line 3549 
  tx_flags = __le64_to_cpup(& tp->flags);
  #line 3551 
  (rp->tx_packets) ++;
  #line 3552 
  rp->tx_bytes += ((tx_flags >> 16) & 16383ULL) - (tx_flags & 7ULL) / 2ULL;
  #line 3555 
  len = (int)skb_headlen(skb);
  #line 3556 
  (*((np->ops)->unmap_single))(np->device,tb->mapping,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
  #line 3559 
  if ((*(rp->descr + (unsigned long)idx) & 4611686018427387904ULL) != 0ULL) 
    #line 3560 
    rp->mark_pending = (u16)((int)rp->mark_pending - 1);
  #line 3562 
  tb->skb = (struct sk_buff *)0;
  #line 3563 
  while (1) {
    #line 3564 
    if (idx + 1 < rp->pending) 
                               #line 3564 
                               idx ++; else 
                                            #line 3564 
                                            idx = 0;
    #line 3565 
    len += -4076;
    #line 3566 
    if (! (len > 0)) 
                     #line 3563 
                     break;
  }
  #line 3568 
  i = 0;
  #line 3568 
  while (1) {
    #line 3568 
    ;
    #line 3568 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 3568 
      break;
    {
      #line 3569 
      tb = & rp->tx_buffs[idx];
      #line 3570 
      if ((long)(tb->skb != (struct sk_buff *)0) != 0L) {
        #line 3571 
        ldv_inline_asm();
        #line 3572 
        ldv_inline_asm();
        #line 3573 
        ldv_inline_asm();
        #line 3570 
        ;
      }
      #line 3571 
      ;
      #line 3571 
      ;
      #line 3571 
      (*((np->ops)->unmap_page))(np->device,tb->mapping,(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 3574 
      if (idx + 1 < rp->pending) 
                                 #line 3574 
                                 idx ++; else 
                                              #line 3574 
                                              idx = 0;
    }
    #line 3568 
    i ++;
  }
  #line 3577 
  consume_skb(skb);
  #line 3579 
  return idx;
}

#line 3584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_tx_work(struct niu *np, struct tx_ring_info *rp)
{
  #line 3586 
  struct netdev_queue *txq;
  #line 3587 
  u16 pkt_cnt;
  #line 3587 
  u16 tmp;
  #line 3588 
  int cons;
  #line 3588 
  int index;
  #line 3589 
  u64 cs;
  #line 3591 
  index = (int)((rp - np->tx_rings) / 4208L);
  #line 3592 
  txq = netdev_get_tx_queue(np->dev,(unsigned int)index);
  #line 3594 
  cs = rp->tx_cs;
  #line 3595 
  if ((long)((cs & 49152ULL) == 0ULL) != 0L) 
                                             #line 3596 
                                             goto out;
  #line 3598 
  pkt_cnt = (unsigned short)((unsigned int)((unsigned short)(cs >> 48)) & 4095U);
  #line 3598 
  tmp = pkt_cnt;
  #line 3599 
  pkt_cnt = (unsigned short)((unsigned int)((int)pkt_cnt - (int)rp->last_pkt_cnt) & 4095U);
  #line 3602 
  rp->last_pkt_cnt = tmp;
  #line 3604 
  cons = rp->cons;
  #line 3606 
  if ((np->msg_enable & 1024U) != 0U) 
                                      #line 3606 
                                      netdev_printk((char *)"\001",np->dev,(char *)"%s() pkt_cnt[%u] cons[%d]\n",(char *)"niu_tx_work",(int)pkt_cnt,cons);
  #line 3609 
  while (1) {
    #line 3609 
    u16 tmp_0;
    #line 3609 
    tmp_0 = pkt_cnt;
    #line 3609 
    pkt_cnt = (u16)((int)pkt_cnt - 1);
    #line 3609 
    ;
    #line 3609 
    if (! ((unsigned int)tmp_0 != 0U)) 
                                       #line 3609 
                                       break;
    #line 3610 
    cons = release_tx_packet(np,rp,cons);
  }
  #line 3612 
  rp->cons = cons;
  #line 3613 
  ldv_inline_asm();
  #line 3615 
  out: 
       #line 3615 
  ;
  #line 3616 
  if ((long)((int)netif_tx_queue_stopped(txq) != 0) != 0L) {
    #line 3616 
    ;
    #line 3616 
    if ((long)(niu_tx_avail(rp) > (unsigned int)(rp->pending / 4)) != 0L) {
      #line 3618 
      int pscr_ret__;
      #line 3618 
      __this_cpu_preempt_check((char *)"read");
      {
        #line 3618 
        void *__vpp_verify = (void *)0;
        #line 3618 
        void *tmp_2 = __vpp_verify;
      }
      #line 3618 
      switch (4UL) {
        #line 3618 
        int pfo_ret___1;
        #line 3618 
        int pfo_ret___2;
        #line 3618 
        int pfo_ret__;
        #line 3618 
        int pfo_ret___0;
        #line 3618 
        case (unsigned long)1: 
                               #line 3618 
        ;
        #line 3618 
        switch (4UL) {
          #line 3618 
          case (unsigned long)1: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)2: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)4: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)8: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          default: 
                   #line 3618 
          ;
          #line 3618 
          __bad_percpu_size();
        }
        #line 3618 
        pscr_ret__ = pfo_ret__;
        #line 3618 
        break;
        #line 3618 
        case (unsigned long)2: 
                               #line 3618 
        ;
        #line 3618 
        switch (4UL) {
          #line 3618 
          case (unsigned long)1: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)2: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)4: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)8: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          default: 
                   #line 3618 
          ;
          #line 3618 
          __bad_percpu_size();
        }
        #line 3618 
        pscr_ret__ = pfo_ret___0;
        #line 3618 
        break;
        #line 3618 
        case (unsigned long)4: 
                               #line 3618 
        ;
        #line 3618 
        switch (4UL) {
          #line 3618 
          case (unsigned long)1: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)2: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)4: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)8: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          default: 
                   #line 3618 
          ;
          #line 3618 
          __bad_percpu_size();
        }
        #line 3618 
        pscr_ret__ = pfo_ret___1;
        #line 3618 
        break;
        #line 3618 
        case (unsigned long)8: 
                               #line 3618 
        ;
        #line 3618 
        switch (4UL) {
          #line 3618 
          case (unsigned long)1: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)2: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)4: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          case (unsigned long)8: 
                                 #line 3618 
          ;
          #line 3619 
          ldv_inline_asm();
          #line 3618 
          break;
          #line 3618 
          default: 
                   #line 3618 
          ;
          #line 3618 
          __bad_percpu_size();
        }
        #line 3618 
        pscr_ret__ = pfo_ret___2;
        #line 3618 
        break;
        #line 3618 
        default: 
                 #line 3618 
        ;
        #line 3618 
        __bad_size_call_parameter();
        #line 3618 
        break;
      }
      #line 3618 
      ;
      #line 3618 
      __netif_tx_lock(txq,pscr_ret__);
      #line 3619 
      if ((int)netif_tx_queue_stopped(txq) != 0) {
        #line 3619 
        ;
        #line 3619 
        if (niu_tx_avail(rp) > (unsigned int)(rp->pending / 4)) 
                                                                #line 3621 
                                                                netif_tx_wake_queue(txq);
      }
      #line 3622 
      __netif_tx_unlock(txq);
    }
  }
  #line 3624 
  return;
}

#line 3626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
__inline static void niu_sync_rx_discard_stats(struct niu *np, struct rx_ring_info *rp, int limit)
{
  #line 3642 
  u32 misc;
  #line 3642 
  u32 wred;
  #line 3641 
  int rx_channel = rp->rx_channel;
  #line 3649 
  misc = (unsigned int)readq(np->regs + ((unsigned long)rx_channel * 512UL + 6291600UL));
  #line 3650 
  if ((long)(((unsigned long long)misc & 65535ULL) > (unsigned long long)limit) != 0L) {
    #line 3651 
    writeq(0ULL,np->regs + ((unsigned long)rx_channel * 512UL + 6291600UL));
    #line 3652 
    rp->rx_errors += (unsigned long long)misc & 65535ULL;
    #line 3654 
    if ((long)(((unsigned long long)misc & 65536ULL) != 0ULL) != 0L) 
      #line 3655 
      _dev_err(np->device,(char *)"rx-%d: Counter overflow RXMISC discard\n",rx_channel);
    #line 3658 
    if ((np->msg_enable & 64U) != 0U) 
                                      #line 3658 
                                      netdev_printk((char *)"\001",np->dev,(char *)"rx-%d: MISC drop=%u over=%u\n",rx_channel,misc,misc - (unsigned int)limit);
  }
  #line 3664 
  wred = (unsigned int)readq(np->regs + ((unsigned long)rx_channel * 64UL + 7012360UL));
  #line 3665 
  if ((long)(((unsigned long long)wred & 65535ULL) > (unsigned long long)limit) != 0L) {
    #line 3666 
    writeq(0ULL,np->regs + ((unsigned long)rx_channel * 64UL + 7012360UL));
    #line 3667 
    rp->rx_dropped += (unsigned long long)wred & 65535ULL;
    #line 3669 
    if ((long)(((unsigned long long)wred & 65536ULL) != 0ULL) != 0L) 
      #line 3670 
      _dev_err(np->device,(char *)"rx-%d: Counter overflow WRED discard\n",rx_channel);
    #line 3672 
    if ((np->msg_enable & 64U) != 0U) 
                                      #line 3672 
                                      netdev_printk((char *)"\001",np->dev,(char *)"rx-%d: WRED drop=%u over=%u\n",rx_channel,wred,wred - (unsigned int)limit);
  }
  #line 3674 
  return;
}

#line 3678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rx_work(struct napi_struct *napi, struct niu *np, struct rx_ring_info *rp, int budget)
{
  #line 3700 
  int __UNIQUE_ID___x545;
  #line 3700 
  int tmp_0;
  #line 3681 
  int qlen;
  #line 3683 
  u64 stat;
  #line 3681 
  int rcr_done = 0;
  #line 3681 
  int work_done = 0;
  #line 3682 
  struct rxdma_mailbox *mbox = rp->mbox;
  #line 3686 
  stat = readq(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL));
  #line 3687 
  qlen = (int)readq(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291536UL)) & 65535;
  #line 3692 
  mbox->rx_dma_ctl_stat = 0ULL;
  #line 3693 
  mbox->rcrstat_a = 0ULL;
  #line 3695 
  if ((np->msg_enable & 2048U) != 0U) 
                                      #line 3695 
                                      netdev_printk((char *)"\001",np->dev,(char *)"%s(chan[%d]), stat[%llx] qlen=%d\n",(char *)"niu_rx_work",rp->rx_channel,stat,qlen);
  #line 3699 
  work_done = 0;
  #line 3699 
  rcr_done = work_done;
  {
    #line 3700 
    __UNIQUE_ID___x545 = qlen;
    #line 3700 
    int __UNIQUE_ID___y546 = budget;
    #line 3700 
    if (__UNIQUE_ID___x545 < __UNIQUE_ID___y546) 
                                                 #line 3700 
                                                 tmp_0 = __UNIQUE_ID___x545; else 
                                                                    #line 3700 
                                                                    tmp_0 = __UNIQUE_ID___y546;
    }
  #line 3700 
  qlen = tmp_0;
  #line 3701 
  while (work_done < qlen) {
    #line 3702 
    rcr_done = niu_process_rx_pkt(napi,np,rp) + rcr_done;
    #line 3703 
    work_done ++;
  }
  #line 3706 
  if (rp->rbr_refill_pending >= rp->rbr_kick_thresh) {
    #line 3707 
    unsigned int i;
    #line 3709 
    i = 0U;
    #line 3709 
    while (rp->rbr_refill_pending > i) {
      #line 3710 
      niu_rbr_refill(np,rp,2592U);
      #line 3709 
      i ++;
    }
    #line 3711 
    rp->rbr_refill_pending = 0U;
  }
  #line 3714 
  stat = ((unsigned long long)work_done | ((unsigned long long)rcr_done << 16)) | 140737488355328ULL;
  #line 3718 
  writeq(stat,np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL));
  #line 3721 
  if (qlen > 10) 
                 #line 3722 
                 niu_sync_rx_discard_stats(np,rp,32767);
  #line 3724 
  return work_done;
}

#line 3727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_poll_core(struct niu *np, struct niu_ldg *lp, int budget)
{
  #line 3732 
  int i;
  #line 3729 
  u64 v0 = lp->v0;
  #line 3730 
  u32 tx_vec = (unsigned int)(v0 >> 32);
  #line 3731 
  u32 rx_vec = (unsigned int)v0;
  #line 3732 
  int work_done = 0;
  #line 3734 
  if ((np->msg_enable & 512U) != 0U) 
                                     #line 3734 
                                     netdev_printk((char *)"\001",np->dev,(char *)"%s() v0[%016llx]\n",(char *)"niu_poll_core",v0);
  #line 3737 
  i = 0;
  #line 3737 
  while (np->num_tx_rings > i) {
    {
      #line 3738 
      struct tx_ring_info *rp = np->tx_rings + (unsigned long)i;
      #line 3739 
      if (((unsigned int)(1 << (int)rp->tx_channel) & tx_vec) != 0U) 
        #line 3740 
        niu_tx_work(np,rp);
      #line 3741 
      writeq(0ULL,np->regs + ((unsigned long)((int)rp->tx_channel + 32) + 1280UL) * 8192UL);
    }
    #line 3737 
    i ++;
  }
  #line 3744 
  i = 0;
  #line 3744 
  while (np->num_rx_rings > i) {
    {
      #line 3745 
      struct rx_ring_info *rp_0 = np->rx_rings + (unsigned long)i;
      #line 3747 
      if (((unsigned int)(1 << rp_0->rx_channel) & rx_vec) != 0U) {
        #line 3748 
        int this_work_done;
        #line 3750 
        this_work_done = niu_rx_work(& lp->napi,np,rp_0,budget);
        #line 3753 
        budget -= this_work_done;
        #line 3754 
        work_done += this_work_done;
      }
      #line 3756 
      writeq(0ULL,np->regs + ((unsigned long)rp_0->rx_channel + 1280UL) * 8192UL);
    }
    #line 3744 
    i ++;
  }
  #line 3759 
  return work_done;
}

#line 3762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_poll(struct napi_struct *napi, int budget)
{
  #line 3764 
  void *__mptr;
  #line 3766 
  int work_done;
  #line 3764 
  __mptr = (void *)napi;
  #line 3764 
  struct niu_ldg *lp = ((struct niu_ldg *)__mptr);
  #line 3765 
  struct niu *np = lp->np;
  #line 3768 
  work_done = niu_poll_core(np,lp,budget);
  #line 3770 
  if (work_done < budget) {
    #line 3771 
    napi_complete_done(napi,work_done);
    #line 3772 
    niu_ldg_rearm(np,lp,1);
  }
  #line 3774 
  return work_done;
}

#line 3777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_log_rxchan_errors(struct niu *np, struct rx_ring_info *rp, u64 stat)
{
  #line 3780 
  netdev_err(np->dev,(char *)"RX channel %u errors ( ",rp->rx_channel);
  #line 3782 
  if ((stat & 9007199254740992ULL) != 0ULL) 
                                            #line 3783 
                                            printk((char *)"\001");
  #line 3784 
  if ((stat & 4503599627370496ULL) != 0ULL) 
                                            #line 3785 
                                            printk((char *)"\001");
  #line 3786 
  if ((stat & 2251799813685248ULL) != 0ULL) 
                                            #line 3787 
                                            printk((char *)"\001");
  #line 3788 
  if ((stat & 1125899906842624ULL) != 0ULL) 
                                            #line 3789 
                                            printk((char *)"\001");
  #line 3790 
  if ((stat & 562949953421312ULL) != 0ULL) 
                                           #line 3791 
                                           printk((char *)"\001");
  #line 3792 
  if ((stat & 17592186044416ULL) != 0ULL) 
                                          #line 3793 
                                          printk((char *)"\001");
  #line 3794 
  if ((stat & 8796093022208ULL) != 0ULL) 
                                         #line 3795 
                                         printk((char *)"\001");
  #line 3796 
  if ((stat & 274877906944ULL) != 0ULL) 
                                        #line 3797 
                                        printk((char *)"\001");
  #line 3798 
  if ((stat & 137438953472ULL) != 0ULL) 
                                        #line 3799 
                                        printk((char *)"\001");
  #line 3800 
  if ((stat & 68719476736ULL) != 0ULL) 
                                       #line 3801 
                                       printk((char *)"\001");
  #line 3802 
  if ((stat & 17179869184ULL) != 0ULL) 
                                       #line 3803 
                                       printk((char *)"\001");
  #line 3804 
  if ((stat & 8589934592ULL) != 0ULL) 
                                      #line 3805 
                                      printk((char *)"\001");
  #line 3806 
  if ((stat & 4294967296ULL) != 0ULL) 
                                      #line 3807 
                                      printk((char *)"\001");
  #line 3808 
  if ((stat & 281474976710656ULL) != 0ULL) 
                                           #line 3809 
                                           printk((char *)"\001");
  #line 3811 
  printk((char *)"\001");
  #line 3812 
  return;
}

#line 3814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rx_error(struct niu *np, struct rx_ring_info *rp)
{
  #line 3816 
  u64 stat = readq(np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL));
  #line 3817 
  int err = 0;
  #line 3820 
  if ((stat & 17759822912946176ULL) != 0ULL) 
                                             #line 3822 
                                             err = -22;
  #line 3824 
  if (err != 0) {
    #line 3825 
    netdev_err(np->dev,(char *)"RX channel %u error, stat[%llx]\n",rp->rx_channel,stat);
    #line 3829 
    niu_log_rxchan_errors(np,rp,stat);
  }
  #line 3832 
  writeq(stat & 395308789923840ULL,np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL));
  #line 3835 
  return err;
}

#line 3838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_log_txchan_errors(struct niu *np, struct tx_ring_info *rp, u64 cs)
{
  #line 3841 
  netdev_err(np->dev,(char *)"TX channel %u errors ( ",(int)rp->tx_channel);
  #line 3843 
  if ((cs & 128ULL) != 0ULL) 
                             #line 3844 
                             printk((char *)"\001");
  #line 3845 
  if ((cs & 64ULL) != 0ULL) 
                            #line 3846 
                            printk((char *)"\001");
  #line 3847 
  if ((cs & 32ULL) != 0ULL) 
                            #line 3848 
                            printk((char *)"\001");
  #line 3849 
  if ((cs & 16ULL) != 0ULL) 
                            #line 3850 
                            printk((char *)"\001");
  #line 3851 
  if ((cs & 8ULL) != 0ULL) 
                           #line 3852 
                           printk((char *)"\001");
  #line 3853 
  if ((cs & 4ULL) != 0ULL) 
                           #line 3854 
                           printk((char *)"\001");
  #line 3855 
  if ((cs & 2ULL) != 0ULL) 
                           #line 3856 
                           printk((char *)"\001");
  #line 3857 
  if ((cs & 1ULL) != 0ULL) 
                           #line 3858 
                           printk((char *)"\001");
  #line 3860 
  printk((char *)"\001");
  #line 3861 
  return;
}

#line 3863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_tx_error(struct niu *np, struct tx_ring_info *rp)
{
  #line 3865 
  u64 cs;
  #line 3865 
  u64 logh;
  #line 3865 
  u64 logl;
  #line 3867 
  cs = readq(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553640UL));
  #line 3868 
  logh = readq(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553672UL));
  #line 3869 
  logl = readq(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553680UL));
  #line 3871 
  netdev_err(np->dev,(char *)"TX channel %u error, cs[%llx] logh[%llx] logl[%llx]\n",(int)rp->tx_channel,cs,logh,logl);
  #line 3877 
  niu_log_txchan_errors(np,rp,cs);
  #line 3879 
  return -19;
}

#line 3882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_mif_interrupt(struct niu *np)
{
  #line 3884 
  u64 mif_status = readq(np->regs + 1663040UL);
  #line 3885 
  int phy_mdint = 0;
  #line 3887 
  if ((np->flags & 65536U) != 0U) {
    #line 3888 
    u64 xrxmac_stat = readq(np->mac_regs + 40UL);
    #line 3890 
    if ((xrxmac_stat & 65536ULL) != 0ULL) 
                                          #line 3891 
                                          phy_mdint = 1;
  }
  #line 3894 
  netdev_err(np->dev,(char *)"MIF interrupt, stat[%llx] phy_mdint(%d)\n",mif_status,phy_mdint);
  #line 3897 
  return -19;
}

#line 3900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_xmac_interrupt(struct niu *np)
{
  #line 3903 
  u64 val;
  #line 3902 
  struct niu_xmac_stats *mp = & np->mac_stats.xmac;
  #line 3905 
  val = readq(np->mac_regs + 32UL);
  #line 3906 
  if ((val & 2048ULL) != 0ULL) 
                               #line 3907 
                               mp->tx_frames += 4294967295ULL;
  #line 3908 
  if ((val & 1024ULL) != 0ULL) 
                               #line 3909 
                               mp->tx_bytes += 4294967295ULL;
  #line 3910 
  if ((val & 16ULL) != 0ULL) 
                             #line 3911 
                             (mp->tx_fifo_errors) ++;
  #line 3912 
  if ((val & 8ULL) != 0ULL) 
                            #line 3913 
                            (mp->tx_overflow_errors) ++;
  #line 3914 
  if ((val & 4ULL) != 0ULL) 
                            #line 3915 
                            (mp->tx_max_pkt_size_errors) ++;
  #line 3916 
  if ((val & 2ULL) != 0ULL) 
                            #line 3917 
                            (mp->tx_underflow_errors) ++;
  #line 3919 
  val = readq(np->mac_regs + 40UL);
  #line 3920 
  if ((val & 524288ULL) != 0ULL) 
                                 #line 3921 
                                 (mp->rx_local_faults) ++;
  #line 3922 
  if ((val & 262144ULL) != 0ULL) 
                                 #line 3923 
                                 (mp->rx_remote_faults) ++;
  #line 3924 
  if ((val & 131072ULL) != 0ULL) 
                                 #line 3925 
                                 mp->rx_link_faults += 255ULL;
  #line 3926 
  if ((val & 65536ULL) != 0ULL) 
                                #line 3927 
                                mp->rx_align_errors += 255ULL;
  #line 3928 
  if ((val & 32768ULL) != 0ULL) 
                                #line 3929 
                                mp->rx_frags += 2097151ULL;
  #line 3930 
  if ((val & 16384ULL) != 0ULL) 
                                #line 3931 
                                mp->rx_mcasts += 2097151ULL;
  #line 3932 
  if ((val & 8192ULL) != 0ULL) 
                               #line 3933 
                               mp->rx_bcasts += 2097151ULL;
  #line 3934 
  if ((val & 8192ULL) != 0ULL) 
                               #line 3935 
                               mp->rx_bcasts += 2097151ULL;
  #line 3936 
  if ((val & 128ULL) != 0ULL) 
                              #line 3937 
                              mp->rx_hist_cnt1 += 2097151ULL;
  #line 3938 
  if ((val & 256ULL) != 0ULL) 
                              #line 3939 
                              mp->rx_hist_cnt2 += 2097151ULL;
  #line 3940 
  if ((val & 512ULL) != 0ULL) 
                              #line 3941 
                              mp->rx_hist_cnt3 += 1048575ULL;
  #line 3942 
  if ((val & 1024ULL) != 0ULL) 
                               #line 3943 
                               mp->rx_hist_cnt4 += 524287ULL;
  #line 3944 
  if ((val & 2048ULL) != 0ULL) 
                               #line 3945 
                               mp->rx_hist_cnt5 += 262143ULL;
  #line 3946 
  if ((val & 4096ULL) != 0ULL) 
                               #line 3947 
                               mp->rx_hist_cnt6 += 65535ULL;
  #line 3948 
  if ((val & 1048576ULL) != 0ULL) 
                                  #line 3949 
                                  mp->rx_hist_cnt7 += 134217727ULL;
  #line 3950 
  if ((val & 64ULL) != 0ULL) 
                             #line 3951 
                             mp->rx_octets += 4294967295ULL;
  #line 3952 
  if ((val & 32ULL) != 0ULL) 
                             #line 3953 
                             mp->rx_code_violations += 255ULL;
  #line 3954 
  if ((val & 16ULL) != 0ULL) 
                             #line 3955 
                             mp->rx_len_errors += 255ULL;
  #line 3956 
  if ((val & 8ULL) != 0ULL) 
                            #line 3957 
                            mp->rx_crc_errors += 255ULL;
  #line 3958 
  if ((val & 4ULL) != 0ULL) 
                            #line 3959 
                            (mp->rx_underflows) ++;
  #line 3960 
  if ((val & 2ULL) != 0ULL) 
                            #line 3961 
                            (mp->rx_overflows) ++;
  #line 3963 
  val = readq(np->mac_regs + 48UL);
  #line 3964 
  if ((val & 4ULL) != 0ULL) 
                            #line 3965 
                            (mp->pause_off_state) ++;
  #line 3966 
  if ((val & 2ULL) != 0ULL) 
                            #line 3967 
                            (mp->pause_on_state) ++;
  #line 3968 
  if ((val & 1ULL) != 0ULL) 
                            #line 3969 
                            (mp->pause_received) ++;
  #line 3970 
  return;
}

#line 3972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_bmac_interrupt(struct niu *np)
{
  #line 3975 
  u64 val;
  #line 3974 
  struct niu_bmac_stats *mp = & np->mac_stats.bmac;
  #line 3977 
  val = readq(np->mac_regs + 32UL);
  #line 3978 
  if ((val & 2ULL) != 0ULL) 
                            #line 3979 
                            (mp->tx_underflow_errors) ++;
  #line 3980 
  if ((val & 4ULL) != 0ULL) 
                            #line 3981 
                            (mp->tx_max_pkt_size_errors) ++;
  #line 3982 
  if ((val & 1024ULL) != 0ULL) 
                               #line 3983 
                               mp->tx_bytes += 4294967295ULL;
  #line 3984 
  if ((val & 2048ULL) != 0ULL) 
                               #line 3985 
                               mp->tx_frames += 4294967295ULL;
  #line 3987 
  val = readq(np->mac_regs + 40UL);
  #line 3988 
  if ((val & 2ULL) != 0ULL) 
                            #line 3989 
                            (mp->rx_overflows) ++;
  #line 3990 
  if ((val & 4ULL) != 0ULL) 
                            #line 3991 
                            mp->rx_frames += 65535ULL;
  #line 3992 
  if ((val & 8ULL) != 0ULL) 
                            #line 3993 
                            mp->rx_align_errors += 65535ULL;
  #line 3994 
  if ((val & 16ULL) != 0ULL) 
                             #line 3995 
                             mp->rx_crc_errors += 65535ULL;
  #line 3996 
  if ((val & 32ULL) != 0ULL) 
                             #line 3997 
                             mp->rx_len_errors += 65535ULL;
  #line 3999 
  val = readq(np->mac_regs + 48UL);
  #line 4000 
  if ((val & 4ULL) != 0ULL) 
                            #line 4001 
                            (mp->pause_off_state) ++;
  #line 4002 
  if ((val & 2ULL) != 0ULL) 
                            #line 4003 
                            (mp->pause_on_state) ++;
  #line 4004 
  if ((val & 1ULL) != 0ULL) 
                            #line 4005 
                            (mp->pause_received) ++;
  #line 4006 
  return;
}

#line 4008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_mac_interrupt(struct niu *np)
{
  #line 4010 
  if ((np->flags & 65536U) != 0U) 
                                  #line 4011 
                                  niu_xmac_interrupt(np); else 
                                                               #line 4013 
                                                               niu_bmac_interrupt(np);
  #line 4015 
  return 0;
}

#line 4018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_log_device_error(struct niu *np, u64 stat)
{
  #line 4020 
  netdev_err(np->dev,(char *)"Core device errors ( ");
  #line 4022 
  if ((stat & 1024ULL) != 0ULL) 
                                #line 4023 
                                printk((char *)"\001");
  #line 4024 
  if ((stat & 512ULL) != 0ULL) 
                               #line 4025 
                               printk((char *)"\001");
  #line 4026 
  if ((stat & 256ULL) != 0ULL) 
                               #line 4027 
                               printk((char *)"\001");
  #line 4028 
  if ((stat & 128ULL) != 0ULL) 
                               #line 4029 
                               printk((char *)"\001");
  #line 4030 
  if ((stat & 64ULL) != 0ULL) 
                              #line 4031 
                              printk((char *)"\001");
  #line 4032 
  if ((stat & 32ULL) != 0ULL) 
                              #line 4033 
                              printk((char *)"\001");
  #line 4034 
  if ((stat & 16ULL) != 0ULL) 
                              #line 4035 
                              printk((char *)"\001");
  #line 4036 
  if ((stat & 8ULL) != 0ULL) 
                             #line 4037 
                             printk((char *)"\001");
  #line 4038 
  if ((stat & 4ULL) != 0ULL) 
                             #line 4039 
                             printk((char *)"\001");
  #line 4040 
  if ((stat & 2ULL) != 0ULL) 
                             #line 4041 
                             printk((char *)"\001");
  #line 4042 
  if ((stat & 1ULL) != 0ULL) 
                             #line 4043 
                             printk((char *)"\001");
  #line 4045 
  printk((char *)"\001");
  #line 4046 
  return;
}

#line 4048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_device_error(struct niu *np)
{
  #line 4050 
  u64 stat = readq(np->regs + 524440UL);
  #line 4052 
  netdev_err(np->dev,(char *)"Core device error, stat[%llx]\n",stat);
  #line 4055 
  niu_log_device_error(np,stat);
  #line 4057 
  return -19;
}

#line 4060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_slowpath_interrupt(struct niu *np, struct niu_ldg *lp, u64 v0, u64 v1, u64 v2)
{
  #line 4064 
  int i;
  #line 4064 
  int err = 0;
  #line 4066 
  lp->v0 = v0;
  #line 4067 
  lp->v1 = v1;
  #line 4068 
  lp->v2 = v2;
  #line 4070 
  if ((v1 & 4294967295ULL) != 0ULL) {
    #line 4071 
    u32 rx_vec = (unsigned int)v1;
    #line 4073 
    i = 0;
    #line 4073 
    while (np->num_rx_rings > i) {
      {
        #line 4074 
        struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
        #line 4076 
        if (((unsigned int)(1 << rp->rx_channel) & rx_vec) != 0U) {
          #line 4077 
          int r = niu_rx_error(np,rp);
          #line 4078 
          if (r != 0) 
                      #line 4079 
                      err = r;
          else 
            #line 4081 
            if (v0 == 0ULL) 
                            #line 4082 
                            writeq(140737488355328ULL,np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL));
        }
      }
      #line 4073 
      i ++;
    }
  }
  #line 4088 
  if ((v1 & 9223372032559808512ULL) != 0ULL) {
    #line 4089 
    u32 tx_vec = (unsigned int)(v1 >> 32) & 2147483647U;
    #line 4091 
    i = 0;
    #line 4091 
    while (np->num_tx_rings > i) {
      {
        #line 4092 
        struct tx_ring_info *rp_0 = np->tx_rings + (unsigned long)i;
        #line 4094 
        if (((unsigned int)(1 << (int)rp_0->tx_channel) & tx_vec) != 0U) {
          #line 4095 
          int r_0 = niu_tx_error(np,rp_0);
          #line 4096 
          if (r_0 != 0) 
                        #line 4097 
                        err = r_0;
        }
      }
      #line 4091 
      i ++;
    }
  }
  #line 4101 
  if (((v0 | v1) & 9223372036854775808ULL) != 0ULL) {
    #line 4102 
    int r_1 = niu_mif_interrupt(np);
    #line 4103 
    if (r_1 != 0) 
                  #line 4104 
                  err = r_1;
  }
  #line 4106 
  if (v2 != 0ULL) {
    #line 4107 
    if ((v2 & 495ULL) != 0ULL) {
      #line 4108 
      int r_2 = niu_mac_interrupt(np);
      #line 4109 
      if (r_2 != 0) 
                    #line 4110 
                    err = r_2;
    }
    #line 4112 
    if ((v2 & 528ULL) != 0ULL) {
      #line 4113 
      int r_3 = niu_device_error(np);
      #line 4114 
      if (r_3 != 0) 
                    #line 4115 
                    err = r_3;
    }
  }
  #line 4119 
  if (err != 0) 
                #line 4120 
                niu_enable_interrupts(np,0);
  #line 4122 
  return err;
}

#line 4125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_rxchan_intr(struct niu *np, struct rx_ring_info *rp, int ldn)
{
  #line 4129 
  u64 stat_write;
  #line 4128 
  struct rxdma_mailbox *mbox = rp->mbox;
  #line 4129 
  u64 stat = __le64_to_cpup(& mbox->rx_dma_ctl_stat);
  #line 4131 
  stat_write = 105553116266496ULL;
  #line 4133 
  writeq(stat_write,np->regs + ((unsigned long)rp->rx_channel * 512UL + 6291568UL));
  #line 4135 
  if ((np->msg_enable & 512U) != 0U) 
                                     #line 4135 
                                     netdev_printk((char *)"\001",np->dev,(char *)"%s() stat[%llx]\n",(char *)"niu_rxchan_intr",stat);
  #line 4136 
  return;
}

#line 4139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_txchan_intr(struct niu *np, struct tx_ring_info *rp, int ldn)
{
  #line 4142 
  rp->tx_cs = readq(np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553640UL));
  #line 4144 
  if ((np->msg_enable & 512U) != 0U) 
                                     #line 4144 
                                     netdev_printk((char *)"\001",np->dev,(char *)"%s() cs[%llx]\n",(char *)"niu_txchan_intr",rp->tx_cs);
  #line 4145 
  return;
}

#line 4148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void __niu_fastpath_interrupt(struct niu *np, int ldg, u64 v0)
{
  #line 4151 
  u32 rx_vec;
  #line 4151 
  u32 tx_vec;
  #line 4152 
  int i;
  #line 4150 
  struct niu_parent *parent = np->parent;
  #line 4154 
  tx_vec = (unsigned int)(v0 >> 32);
  #line 4155 
  rx_vec = (unsigned int)v0;
  #line 4157 
  i = 0;
  #line 4157 
  while (np->num_rx_rings > i) {
    {
      #line 4158 
      struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
      #line 4159 
      int ldn = rp->rx_channel;
      #line 4161 
      if ((int)parent->ldg_map[ldn] != ldg) 
                                            #line 4162 
                                            goto __Cont;
      #line 4164 
      writeq(3ULL,np->regs + ((unsigned long)ldn + 1280UL) * 8192UL);
      #line 4165 
      if (((unsigned int)(1 << rp->rx_channel) & rx_vec) != 0U) 
                                                                #line 4166 
                                                                niu_rxchan_intr(np,rp,ldn);
    }
    #line 4157 
    __Cont: 
            #line 4157 
    i ++;
  }
  #line 4169 
  i = 0;
  #line 4169 
  while (np->num_tx_rings > i) {
    {
      #line 4170 
      struct tx_ring_info *rp_0 = np->tx_rings + (unsigned long)i;
      #line 4171 
      int ldn_0 = (int)rp_0->tx_channel + 32;
      #line 4173 
      if ((int)parent->ldg_map[ldn_0] != ldg) 
                                              #line 4174 
                                              goto __Cont_0;
      #line 4176 
      writeq(3ULL,np->regs + ((unsigned long)ldn_0 + 1280UL) * 8192UL);
      #line 4177 
      if (((unsigned int)(1 << (int)rp_0->tx_channel) & tx_vec) != 0U) 
        #line 4178 
        niu_txchan_intr(np,rp_0,ldn_0);
    }
    #line 4169 
    __Cont_0: 
              #line 4169 
    i ++;
  }
  #line 4180 
  return;
}

#line 4182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_schedule_napi(struct niu *np, struct niu_ldg *lp, u64 v0, u64 v1, u64 v2)
{
  #line 4185 
  if ((long)((int)napi_schedule_prep(& lp->napi) != 0) != 0L) {
    #line 4186 
    lp->v0 = v0;
    #line 4187 
    lp->v1 = v1;
    #line 4188 
    lp->v2 = v2;
    #line 4189 
    __niu_fastpath_interrupt(np,(int)lp->ldg_num,v0);
    #line 4190 
    __napi_schedule(& lp->napi);
  }
  #line 4192 
  return;
}

#line 4194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static irqreturn_t niu_interrupt(int irq, void *dev_id)
{
  #line 4199 
  unsigned long flags;
  #line 4200 
  u64 v0;
  #line 4200 
  u64 v1;
  #line 4200 
  u64 v2;
  #line 4196 
  struct niu_ldg *lp = (struct niu_ldg *)dev_id;
  #line 4197 
  struct niu *np = lp->np;
  #line 4198 
  int ldg = (int)lp->ldg_num;
  #line 4202 
  if ((np->msg_enable & 512U) != 0U) 
                                     #line 4203 
                                     printk((char *)"\001",(char *)"niu_interrupt",lp,ldg);
  #line 4206 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 4208 
  v0 = readq(np->regs + ((unsigned long)ldg + 1024UL) * 8192UL);
  #line 4209 
  v1 = readq(np->regs + ((unsigned long)ldg * 8192UL + 8388616UL));
  #line 4210 
  v2 = readq(np->regs + ((unsigned long)ldg * 8192UL + 8388624UL));
  #line 4212 
  if ((np->msg_enable & 512U) != 0U) 
                                     #line 4213 
                                     printk((char *)"\001",v0,v1,v2);
  #line 4218 
  if ((long)((v0 == 0ULL && v1 == 0ULL) != 0) != 0L && (long)(v2 == 0ULL) != 0L) {
    #line 4219 
    cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
    #line 4220 
    return IRQ_NONE;
  }
  #line 4223 
  if ((long)((v0 & 9223372036854775808ULL) != 0ULL) != 0L || (long)((v1 != 0ULL || v2 != 0ULL) != 0) != 0L) {
    #line 4224 
    int err = niu_slowpath_interrupt(np,lp,v0,v1,v2);
    #line 4225 
    if (err != 0) 
                  #line 4226 
                  goto out;
  }
  #line 4228 
  if ((long)((v0 & 9223372036854775807ULL) != 0ULL) != 0L) 
                                                           #line 4229 
                                                           niu_schedule_napi(np,lp,v0,v1,v2); else 
                                                                    #line 4231 
                                                                    niu_ldg_rearm(np,lp,1);
  #line 4232 
  out: 
       #line 4232 
  ;
  #line 4233 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 4235 
  return IRQ_HANDLED;
}

#line 4238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_free_rx_ring_info(struct niu *np, struct rx_ring_info *rp)
{
  #line 4240 
  if (rp->mbox != (struct rxdma_mailbox *)0) {
    #line 4241 
    (*((np->ops)->free_coherent))(np->device,64UL,(void *)rp->mbox,rp->mbox_dma);
    #line 4244 
    rp->mbox = (struct rxdma_mailbox *)0;
  }
  #line 4246 
  if (rp->rcr != (__le64 *)0ULL) {
    #line 4247 
    (*((np->ops)->free_coherent))(np->device,2048UL,(void *)rp->rcr,rp->rcr_dma);
    #line 4250 
    rp->rcr = (__le64 *)0ULL;
    #line 4251 
    rp->rcr_table_size = 0U;
    #line 4252 
    rp->rcr_index = 0U;
  }
  #line 4254 
  if (rp->rbr != (__le32 *)0U) {
    #line 4255 
    niu_rbr_free(np,rp);
    #line 4257 
    (*((np->ops)->free_coherent))(np->device,512UL,(void *)rp->rbr,rp->rbr_dma);
    #line 4260 
    rp->rbr = (__le32 *)0U;
    #line 4261 
    rp->rbr_table_size = 0U;
    #line 4262 
    rp->rbr_index = 0U;
  }
  #line 4264 
  kfree((void *)rp->rxhash);
  #line 4265 
  rp->rxhash = (struct page **)0;
  #line 4266 
  return;
}

#line 4268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_free_tx_ring_info(struct niu *np, struct tx_ring_info *rp)
{
  #line 4270 
  if (rp->mbox != (struct txdma_mailbox *)0) {
    #line 4271 
    (*((np->ops)->free_coherent))(np->device,64UL,(void *)rp->mbox,rp->mbox_dma);
    #line 4274 
    rp->mbox = (struct txdma_mailbox *)0;
  }
  #line 4276 
  if (rp->descr != (__le64 *)0ULL) {
    #line 4277 
    int i;
    #line 4279 
    i = 0;
    #line 4279 
    while (i <= 255) {
      #line 4280 
      if (rp->tx_buffs[i].skb != (struct sk_buff *)0) 
                                                      #line 4281 
                                                      release_tx_packet(np,rp,i);
      #line 4279 
      i ++;
    }
    #line 4284 
    (*((np->ops)->free_coherent))(np->device,2048UL,(void *)rp->descr,rp->descr_dma);
    #line 4287 
    rp->descr = (__le64 *)0ULL;
    #line 4288 
    rp->pending = 0;
    #line 4289 
    rp->prod = 0;
    #line 4290 
    rp->cons = 0;
    #line 4291 
    rp->wrap_bit = 0;
  }
  #line 4293 
  return;
}

#line 4295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_free_channels(struct niu *np)
{
  #line 4297 
  int i;
  #line 4299 
  if (np->rx_rings != (struct rx_ring_info *)0) {
    #line 4300 
    i = 0;
    #line 4300 
    while (np->num_rx_rings > i) {
      {
        #line 4301 
        struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
        #line 4303 
        niu_free_rx_ring_info(np,rp);
      }
      #line 4300 
      i ++;
    }
    #line 4305 
    kfree((void *)np->rx_rings);
    #line 4306 
    np->rx_rings = (struct rx_ring_info *)0;
    #line 4307 
    np->num_rx_rings = 0;
  }
  #line 4310 
  if (np->tx_rings != (struct tx_ring_info *)0) {
    #line 4311 
    i = 0;
    #line 4311 
    while (np->num_tx_rings > i) {
      {
        #line 4312 
        struct tx_ring_info *rp_0 = np->tx_rings + (unsigned long)i;
        #line 4314 
        niu_free_tx_ring_info(np,rp_0);
      }
      #line 4311 
      i ++;
    }
    #line 4316 
    kfree((void *)np->tx_rings);
    #line 4317 
    np->tx_rings = (struct tx_ring_info *)0;
    #line 4318 
    np->num_tx_rings = 0;
  }
  #line 4320 
  return;
}

#line 4322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_alloc_rx_ring_info(struct niu *np, struct rx_ring_info *rp)
{
  #line 4327 
  rp->rxhash = (struct page **)kcalloc(128UL,8UL,3264U);
  #line 4329 
  if (rp->rxhash == (struct page **)0) 
                                       #line 4330 
                                       return -12;
  #line 4332 
  rp->mbox = (struct rxdma_mailbox *)(*((np->ops)->alloc_coherent))(np->device,64UL,& rp->mbox_dma,3264U);
  #line 4335 
  if (rp->mbox == (struct rxdma_mailbox *)0) 
                                             #line 4336 
                                             return -12;
  #line 4337 
  if (((unsigned long)rp->mbox & 63UL) != 0UL) {
    #line 4338 
    netdev_err(np->dev,(char *)"Coherent alloc gives misaligned RXDMA mailbox %p\n",rp->mbox);
    #line 4340 
    return -22;
  }
  #line 4343 
  rp->rcr = (__le64 *)(*((np->ops)->alloc_coherent))(np->device,2048UL,& rp->rcr_dma,3264U);
  #line 4346 
  if (rp->rcr == (__le64 *)0ULL) 
                                 #line 4347 
                                 return -12;
  #line 4348 
  if (((unsigned long)rp->rcr & 63UL) != 0UL) {
    #line 4349 
    netdev_err(np->dev,(char *)"Coherent alloc gives misaligned RXDMA RCR table %p\n",rp->rcr);
    #line 4351 
    return -22;
  }
  #line 4353 
  rp->rcr_table_size = 256U;
  #line 4354 
  rp->rcr_index = 0U;
  #line 4356 
  rp->rbr = (__le32 *)(*((np->ops)->alloc_coherent))(np->device,512UL,& rp->rbr_dma,3264U);
  #line 4359 
  if (rp->rbr == (__le32 *)0U) 
                               #line 4360 
                               return -12;
  #line 4361 
  if (((unsigned long)rp->rbr & 63UL) != 0UL) {
    #line 4362 
    netdev_err(np->dev,(char *)"Coherent alloc gives misaligned RXDMA RBR table %p\n",rp->rbr);
    #line 4364 
    return -22;
  }
  #line 4366 
  rp->rbr_table_size = 128U;
  #line 4367 
  rp->rbr_index = 0U;
  #line 4368 
  rp->rbr_pending = 0U;
  #line 4370 
  return 0;
}

#line 4373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_max_burst(struct niu *np, struct tx_ring_info *rp)
{
  #line 4375 
  int mtu = (int)(np->dev)->mtu;
  #line 4380 
  rp->max_burst = mtu + 32;
  #line 4381 
  if (rp->max_burst > 4096) 
                            #line 4382 
                            rp->max_burst = 4096;
  #line 4383 
  return;
}

#line 4385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_alloc_tx_ring_info(struct niu *np, struct tx_ring_info *rp)
{
  #line 4390 
  rp->mbox = (struct txdma_mailbox *)(*((np->ops)->alloc_coherent))(np->device,64UL,& rp->mbox_dma,3264U);
  #line 4393 
  if (rp->mbox == (struct txdma_mailbox *)0) 
                                             #line 4394 
                                             return -12;
  #line 4395 
  if (((unsigned long)rp->mbox & 63UL) != 0UL) {
    #line 4396 
    netdev_err(np->dev,(char *)"Coherent alloc gives misaligned TXDMA mailbox %p\n",rp->mbox);
    #line 4398 
    return -22;
  }
  #line 4401 
  rp->descr = (__le64 *)(*((np->ops)->alloc_coherent))(np->device,2048UL,& rp->descr_dma,3264U);
  #line 4404 
  if (rp->descr == (__le64 *)0ULL) 
                                   #line 4405 
                                   return -12;
  #line 4406 
  if (((unsigned long)rp->descr & 63UL) != 0UL) {
    #line 4407 
    netdev_err(np->dev,(char *)"Coherent alloc gives misaligned TXDMA descr table %p\n",rp->descr);
    #line 4409 
    return -22;
  }
  #line 4412 
  rp->pending = 256;
  #line 4413 
  rp->prod = 0;
  #line 4414 
  rp->cons = 0;
  #line 4415 
  rp->wrap_bit = 0;
  #line 4418 
  rp->mark_freq = (unsigned short)(rp->pending / 4);
  #line 4420 
  niu_set_max_burst(np,rp);
  #line 4422 
  return 0;
}

#line 4425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_size_rbr(struct niu *np, struct rx_ring_info *rp)
{
  #line 4427 
  u16 bss;
  #line 4429 
  bss = (unsigned short)12U;
  #line 4431 
  rp->rbr_block_size = (unsigned short)(1 << (int)bss);
  #line 4432 
  rp->rbr_blocks_per_page = (unsigned short)(1 << (12 - (int)bss));
  #line 4434 
  rp->rbr_sizes[0] = (unsigned short)256U;
  #line 4435 
  rp->rbr_sizes[1] = (unsigned short)1024U;
  #line 4436 
  if ((np->dev)->mtu > 1500U) 
    #line 4437 
    switch (4096UL) {
      #line 4438 
      case (unsigned long)4096: 
                                #line 4438 
      ;
      #line 4439 
      rp->rbr_sizes[2] = (unsigned short)4096U;
      #line 4440 
      break;
      #line 4442 
      default: 
               #line 4442 
      ;
      #line 4443 
      rp->rbr_sizes[2] = (unsigned short)8192U;
      #line 4444 
      break;
    }
  else 
       #line 4447 
       rp->rbr_sizes[2] = (unsigned short)2048U;
  #line 4449 
  rp->rbr_sizes[3] = rp->rbr_block_size;
  #line 4450 
  return;
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_alloc_channels(struct niu *np)
{
  #line 4455 
  int first_rx_channel;
  #line 4455 
  int first_tx_channel;
  #line 4456 
  int num_rx_rings;
  #line 4456 
  int num_tx_rings;
  #line 4457 
  struct rx_ring_info *rx_rings;
  #line 4458 
  struct tx_ring_info *tx_rings;
  #line 4459 
  int i;
  #line 4459 
  int port;
  #line 4459 
  int err;
  #line 4454 
  struct niu_parent *parent = np->parent;
  #line 4461 
  port = (int)np->port;
  #line 4462 
  first_tx_channel = 0;
  #line 4462 
  first_rx_channel = first_tx_channel;
  #line 4463 
  i = 0;
  #line 4463 
  while (i < port) {
    #line 4464 
    first_rx_channel = (int)parent->rxchan_per_port[i] + first_rx_channel;
    #line 4465 
    first_tx_channel = (int)parent->txchan_per_port[i] + first_tx_channel;
    #line 4463 
    i ++;
  }
  #line 4468 
  num_rx_rings = (int)parent->rxchan_per_port[port];
  #line 4469 
  num_tx_rings = (int)parent->txchan_per_port[port];
  #line 4471 
  rx_rings = (struct rx_ring_info *)kcalloc((unsigned long)num_rx_rings,168UL,3264U);
  #line 4473 
  err = -12;
  #line 4474 
  if (rx_rings == (struct rx_ring_info *)0) 
                                            #line 4475 
                                            goto out_err;
  #line 4477 
  np->num_rx_rings = num_rx_rings;
  #line 4478 
  ldv_inline_asm();
  #line 4479 
  np->rx_rings = rx_rings;
  #line 4481 
  netif_set_real_num_rx_queues(np->dev,(unsigned int)num_rx_rings);
  #line 4483 
  i = 0;
  #line 4483 
  while (np->num_rx_rings > i) {
    {
      #line 4484 
      struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
      #line 4486 
      rp->np = np;
      #line 4487 
      rp->rx_channel = first_rx_channel + i;
      #line 4489 
      err = niu_alloc_rx_ring_info(np,rp);
      #line 4490 
      if (err != 0) 
                    #line 4491 
                    goto out_err;
      #line 4493 
      niu_size_rbr(np,rp);
      #line 4496 
      rp->nonsyn_window = 64;
      #line 4497 
      rp->nonsyn_threshold = (int)(rp->rcr_table_size + 4294967232U);
      #line 4498 
      rp->syn_window = 64;
      #line 4499 
      rp->syn_threshold = (int)(rp->rcr_table_size + 4294967232U);
      #line 4500 
      rp->rcr_pkt_threshold = 16;
      #line 4501 
      rp->rcr_timeout = 8;
      #line 4502 
      rp->rbr_kick_thresh = 16U;
      #line 4503 
      if (rp->rbr_kick_thresh < (unsigned int)rp->rbr_blocks_per_page) 
        #line 4504 
        rp->rbr_kick_thresh = (unsigned int)rp->rbr_blocks_per_page;
      #line 4506 
      err = niu_rbr_fill(np,rp,3264U);
      #line 4507 
      if (err != 0) 
                    #line 4508 
                    return err;
    }
    #line 4483 
    i ++;
  }
  #line 4511 
  tx_rings = (struct tx_ring_info *)kcalloc((unsigned long)num_tx_rings,4208UL,3264U);
  #line 4513 
  err = -12;
  #line 4514 
  if (tx_rings == (struct tx_ring_info *)0) 
                                            #line 4515 
                                            goto out_err;
  #line 4517 
  np->num_tx_rings = num_tx_rings;
  #line 4518 
  ldv_inline_asm();
  #line 4519 
  np->tx_rings = tx_rings;
  #line 4521 
  netif_set_real_num_tx_queues(np->dev,(unsigned int)num_tx_rings);
  #line 4523 
  i = 0;
  #line 4523 
  while (np->num_tx_rings > i) {
    {
      #line 4524 
      struct tx_ring_info *rp_0 = np->tx_rings + (unsigned long)i;
      #line 4526 
      rp_0->np = np;
      #line 4527 
      rp_0->tx_channel = (unsigned short)((int)((unsigned short)first_tx_channel) + (int)((unsigned short)i));
      #line 4529 
      err = niu_alloc_tx_ring_info(np,rp_0);
      #line 4530 
      if (err != 0) 
                    #line 4531 
                    goto out_err;
    }
    #line 4523 
    i ++;
  }
  #line 4534 
  return 0;
  #line 4536 
  out_err: 
           #line 4536 
  ;
  #line 4537 
  niu_free_channels(np);
  #line 4538 
  return err;
}

#line 4541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_tx_cs_sng_poll(struct niu *np, int channel)
{
  #line 4543 
  int limit = 1000;
  #line 4545 
  while (1) {
    #line 4545 
    limit --;
    #line 4545 
    if (! (limit > 0)) 
                       #line 4545 
                       break;
    {
      #line 4546 
      u64 val = readq(np->regs + ((unsigned long)channel * 512UL + 6553640UL));
      #line 4547 
      if ((val & 134217728ULL) != 0ULL) 
                                        #line 4548 
                                        return 0;
    }
  }
  #line 4550 
  return -19;
}

#line 4553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_tx_channel_stop(struct niu *np, int channel)
{
  #line 4555 
  u64 val = readq(np->regs + ((unsigned long)channel * 512UL + 6553640UL));
  #line 4557 
  val |= 268435456ULL;
  #line 4558 
  writeq(val,np->regs + ((unsigned long)channel * 512UL + 6553640UL));
  #line 4560 
  return niu_tx_cs_sng_poll(np,channel);
}

#line 4563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_tx_cs_reset_poll(struct niu *np, int channel)
{
  #line 4565 
  int limit = 1000;
  #line 4567 
  while (1) {
    #line 4567 
    limit --;
    #line 4567 
    if (! (limit > 0)) 
                       #line 4567 
                       break;
    {
      #line 4568 
      u64 val = readq(np->regs + ((unsigned long)channel * 512UL + 6553640UL));
      #line 4569 
      if ((val & 2147483648ULL) == 0ULL) 
                                         #line 4570 
                                         return 0;
    }
  }
  #line 4572 
  return -19;
}

#line 4575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_tx_channel_reset(struct niu *np, int channel)
{
  #line 4578 
  int err;
  #line 4577 
  u64 val = readq(np->regs + ((unsigned long)channel * 512UL + 6553640UL));
  #line 4580 
  val |= 2147483648ULL;
  #line 4581 
  writeq(val,np->regs + ((unsigned long)channel * 512UL + 6553640UL));
  #line 4583 
  err = niu_tx_cs_reset_poll(np,channel);
  #line 4584 
  if (err == 0) 
                #line 4585 
                writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 6553624UL));
  #line 4587 
  return err;
}

#line 4590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_tx_channel_lpage_init(struct niu *np, int channel)
{
  #line 4592 
  u64 val;
  #line 4594 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077896UL));
  #line 4595 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077904UL));
  #line 4596 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077912UL));
  #line 4597 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077920UL));
  #line 4598 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077928UL));
  #line 4599 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077936UL));
  #line 4600 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 7077944UL));
  #line 4602 
  val = (unsigned long long)np->port << 2;
  #line 4603 
  val |= 3ULL;
  #line 4604 
  writeq(val,np->regs + ((unsigned long)channel + 13824UL) * 512UL);
  #line 4608 
  return 0;
}

#line 4611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_txc_enable_port(struct niu *np, int on)
{
  #line 4613 
  unsigned long flags;
  #line 4614 
  u64 val;
  #line 4614 
  u64 mask;
  #line 4616 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 4617 
  val = readq(np->regs + 7995392UL);
  #line 4618 
  mask = 1ULL << (int)np->port;
  #line 4619 
  if (on != 0) 
               #line 4620 
               val = (mask | val) | 16ULL;
  else {
    #line 4622 
    val = ~ mask & val;
    #line 4623 
    if ((val & 18446744073709551599ULL) == 0ULL) 
                                                 #line 4624 
                                                 val &= 18446744073709551599ULL;
  }
  #line 4626 
  writeq(val,np->regs + 7995392UL);
  #line 4627 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 4628 
  return;
}

#line 4630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_txc_set_imask(struct niu *np, u64 imask)
{
  #line 4632 
  unsigned long flags;
  #line 4633 
  u64 val;
  #line 4635 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 4636 
  val = readq(np->regs + 7996464UL);
  #line 4637 
  val = (unsigned long long)(~ (63 << (int)np->port * 8)) & val;
  #line 4638 
  val = (imask << (int)np->port * 8) | val;
  #line 4639 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 4640 
  return;
}

#line 4642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_txc_port_dma_enable(struct niu *np, int on)
{
  #line 4644 
  u64 val = 0ULL;
  #line 4646 
  if (on != 0) {
    #line 4647 
    int i;
    #line 4649 
    i = 0;
    #line 4649 
    while (np->num_tx_rings > i) {
      #line 4650 
      val = (unsigned long long)(1 << (int)(np->tx_rings + (unsigned long)i)->tx_channel) | val;
      #line 4649 
      i ++;
    }
  }
  #line 4652 
  writeq(val,np->regs + ((unsigned long)np->port * 256UL + 7995432UL));
  #line 4653 
  return;
}

#line 4655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_one_tx_channel(struct niu *np, struct tx_ring_info *rp)
{
  #line 4657 
  int err;
  #line 4658 
  u64 val;
  #line 4658 
  u64 ring_len;
  #line 4657 
  int channel = (int)rp->tx_channel;
  #line 4660 
  err = niu_tx_channel_stop(np,channel);
  #line 4661 
  if (err != 0) 
                #line 4662 
                return err;
  #line 4664 
  err = niu_tx_channel_reset(np,channel);
  #line 4665 
  if (err != 0) 
                #line 4666 
                return err;
  #line 4668 
  err = niu_tx_channel_lpage_init(np,channel);
  #line 4669 
  if (err != 0) 
                #line 4670 
                return err;
  #line 4672 
  writeq((unsigned long long)rp->max_burst,np->regs + ((unsigned long)channel + 1920UL) * 4096UL);
  #line 4673 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 6553632UL));
  #line 4675 
  if ((rp->descr_dma & 18446726481523507263ULL) != 0ULL) {
    #line 4677 
    netdev_err(np->dev,(char *)"TX ring channel %d DMA addr (%llx) is not aligned\n",channel,rp->descr_dma);
    #line 4679 
    return -22;
  }
  #line 4687 
  ring_len = (unsigned long long)(rp->pending / 8);
  #line 4689 
  val = (ring_len << 48) | rp->descr_dma;
  #line 4691 
  writeq(val,np->regs + ((unsigned long)channel + 12800UL) * 512UL);
  #line 4693 
  if (((rp->mbox_dma >> 32) & 18446744073709547520ULL) != 0ULL || ((unsigned long long)((unsigned int)rp->mbox_dma) & 18446744069414584383ULL) != 0ULL) {
    #line 4695 
    netdev_err(np->dev,(char *)"TX ring channel %d MBOX addr (%llx) has invalid bits\n",channel,rp->mbox_dma);
    #line 4697 
    return -22;
  }
  #line 4699 
  writeq(rp->mbox_dma >> 32,np->regs + ((unsigned long)channel * 512UL + 6553648UL));
  #line 4700 
  writeq(rp->mbox_dma & 4294967232ULL,np->regs + ((unsigned long)channel * 512UL + 6553656UL));
  #line 4702 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 6553640UL));
  #line 4704 
  rp->last_pkt_cnt = (unsigned short)0U;
  #line 4706 
  return 0;
}

#line 4709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_rdc_groups(struct niu *np)
{
  #line 4712 
  int i;
  #line 4711 
  struct niu_rdc_tables *tp = & (np->parent)->rdc_group_cfg[(int)np->port];
  #line 4712 
  int first_table_num = tp->first_table_num;
  #line 4714 
  i = 0;
  #line 4714 
  while (tp->num_tables > i) {
    {
      #line 4717 
      int slot;
      #line 4715 
      struct rdc_table *tbl = & tp->tables[i];
      #line 4716 
      int this_table = first_table_num + i;
      #line 4719 
      slot = 0;
      #line 4719 
      while (slot <= 15) {
        #line 4720 
        writeq((unsigned long long)tbl->rxdma_channel[slot],np->regs + (((unsigned long)this_table + 45568UL) * 16UL + (unsigned long)slot) * 8UL);
        #line 4719 
        slot ++;
      }
    }
    #line 4714 
    i ++;
  }
  #line 4724 
  writeq((unsigned long long)(np->parent)->rdc_default[(int)np->port],np->regs + ((unsigned long)np->port + 851969UL) * 8UL);
  #line 4725 
  return;
}

#line 4727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_drr_weight(struct niu *np)
{
  #line 4730 
  u64 val;
  #line 4729 
  int type = (int)phy_decode((np->parent)->port_phy,(int)np->port);
  #line 4732 
  switch (type) {
    #line 4733 
    case 1: 
            #line 4733 
    ;
    #line 4734 
    val = 1024ULL;
    #line 4735 
    break;
    #line 4737 
    case 2: 
            #line 4737 
    ;
    #line 4738 
    default: 
             #line 4738 
    ;
    #line 4739 
    val = 102ULL;
    #line 4740 
    break;
  }
  #line 4742 
  writeq(val,np->regs + ((unsigned long)np->port + 851973UL) * 8UL);
  #line 4743 
  return;
}

#line 4745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_hostinfo(struct niu *np)
{
  #line 4749 
  int i;
  #line 4749 
  int err;
  #line 4747 
  struct niu_parent *parent = np->parent;
  #line 4748 
  struct niu_rdc_tables *tp = & parent->rdc_group_cfg[(int)np->port];
  #line 4749 
  int num_alt = niu_num_alt_addr(np);
  #line 4750 
  int first_rdc_table = tp->first_table_num;
  #line 4752 
  err = niu_set_primary_mac_rdc_table(np,first_rdc_table,1);
  #line 4753 
  if (err != 0) 
                #line 4754 
                return err;
  #line 4756 
  err = niu_set_multicast_mac_rdc_table(np,first_rdc_table,1);
  #line 4757 
  if (err != 0) 
                #line 4758 
                return err;
  #line 4760 
  i = 0;
  #line 4760 
  while (i < num_alt) {
    #line 4761 
    err = niu_set_alt_mac_rdc_table(np,i,first_rdc_table,1);
    #line 4762 
    if (err != 0) 
                  #line 4763 
                  return err;
    #line 4760 
    i ++;
  }
  #line 4766 
  return 0;
}

#line 4769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rx_channel_reset(struct niu *np, int channel)
{
  #line 4771 
  return __niu_set_and_wait_clear(np,
                                 ((unsigned long)channel + 12288UL) * 512UL,
                                 1073741824ULL,1000,10,(char *)"RXDMA_CFIG1");
}

#line 4776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_rx_channel_lpage_init(struct niu *np, int channel)
{
  #line 4778 
  u64 val;
  #line 4780 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946824UL));
  #line 4781 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946832UL));
  #line 4782 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946840UL));
  #line 4783 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946848UL));
  #line 4784 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946856UL));
  #line 4785 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946864UL));
  #line 4786 
  writeq(0ULL,np->regs + ((unsigned long)channel * 64UL + 6946872UL));
  #line 4788 
  val = (unsigned long long)np->port << 2;
  #line 4789 
  val |= 3ULL;
  #line 4790 
  writeq(val,np->regs + ((unsigned long)channel + 108544UL) * 64UL);
  #line 4792 
  return 0;
}

#line 4795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_rx_channel_wred_init(struct niu *np, struct rx_ring_info *rp)
{
  #line 4797 
  u64 val;
  #line 4799 
  val = (((unsigned long long)rp->nonsyn_window | ((unsigned long long)rp->nonsyn_threshold << 4)) | ((unsigned long long)rp->syn_window << 16)) | ((unsigned long long)rp->syn_threshold << 20);
  #line 4803 
  writeq(val,np->regs + ((unsigned long)rp->rx_channel + 109568UL) * 64UL);
  #line 4804 
  return;
}

#line 4806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_compute_rbr_cfig_b(struct rx_ring_info *rp, u64 *ret)
{
  #line 4808 
  u64 val = 0ULL;
  #line 4810 
  *ret = 0ULL;
  #line 4811 
  switch ((int)rp->rbr_block_size) {
    #line 4812 
    case 4096: 
               #line 4812 
    ;
    #line 4813 
    val = val;
    #line 4814 
    break;
    #line 4815 
    case 8192: 
               #line 4815 
    ;
    #line 4816 
    val |= 16777216ULL;
    #line 4817 
    break;
    #line 4818 
    case 16384: 
                #line 4818 
    ;
    #line 4819 
    val |= 33554432ULL;
    #line 4820 
    break;
    #line 4821 
    case 32768: 
                #line 4821 
    ;
    #line 4822 
    val |= 50331648ULL;
    #line 4823 
    break;
    #line 4824 
    default: 
             #line 4824 
    ;
    #line 4825 
    return -22;
  }
  #line 4827 
  val |= 8388608ULL;
  #line 4828 
  switch ((int)rp->rbr_sizes[2]) {
    #line 4829 
    case 2048: 
               #line 4829 
    ;
    #line 4830 
    val = val;
    #line 4831 
    break;
    #line 4832 
    case 4096: 
               #line 4832 
    ;
    #line 4833 
    val |= 65536ULL;
    #line 4834 
    break;
    #line 4835 
    case 8192: 
               #line 4835 
    ;
    #line 4836 
    val |= 131072ULL;
    #line 4837 
    break;
    #line 4838 
    case 16384: 
                #line 4838 
    ;
    #line 4839 
    val |= 196608ULL;
    #line 4840 
    break;
    #line 4842 
    default: 
             #line 4842 
    ;
    #line 4843 
    return -22;
  }
  #line 4845 
  val |= 32768ULL;
  #line 4846 
  switch ((int)rp->rbr_sizes[1]) {
    #line 4847 
    case 1024: 
               #line 4847 
    ;
    #line 4848 
    val = val;
    #line 4849 
    break;
    #line 4850 
    case 2048: 
               #line 4850 
    ;
    #line 4851 
    val |= 256ULL;
    #line 4852 
    break;
    #line 4853 
    case 4096: 
               #line 4853 
    ;
    #line 4854 
    val |= 512ULL;
    #line 4855 
    break;
    #line 4856 
    case 8192: 
               #line 4856 
    ;
    #line 4857 
    val |= 768ULL;
    #line 4858 
    break;
    #line 4860 
    default: 
             #line 4860 
    ;
    #line 4861 
    return -22;
  }
  #line 4863 
  val |= 128ULL;
  #line 4864 
  switch ((int)rp->rbr_sizes[0]) {
    #line 4865 
    case 256: 
              #line 4865 
    ;
    #line 4866 
    val = val;
    #line 4867 
    break;
    #line 4868 
    case 512: 
              #line 4868 
    ;
    #line 4869 
    val |= 1ULL;
    #line 4870 
    break;
    #line 4871 
    case 1024: 
               #line 4871 
    ;
    #line 4872 
    val |= 2ULL;
    #line 4873 
    break;
    #line 4874 
    case 2048: 
               #line 4874 
    ;
    #line 4875 
    val |= 3ULL;
    #line 4876 
    break;
    #line 4878 
    default: 
             #line 4878 
    ;
    #line 4879 
    return -22;
  }
  #line 4882 
  *ret = val;
  #line 4883 
  return 0;
}

#line 4886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_enable_rx_channel(struct niu *np, int channel, int on)
{
  #line 4889 
  int limit;
  #line 4888 
  u64 val = readq(np->regs + ((unsigned long)channel + 12288UL) * 512UL);
  #line 4891 
  if (on != 0) 
               #line 4892 
               val |= 2147483648ULL; else 
                                          #line 4894 
                                          val &= 18446744071562067967ULL;
  #line 4895 
  writeq(val,np->regs + ((unsigned long)channel + 12288UL) * 512UL);
  #line 4897 
  limit = 1000;
  #line 4898 
  while (1) {
    #line 4898 
    limit --;
    #line 4898 
    if (! (limit > 0)) 
                       #line 4898 
                       break;
    {
      #line 4899 
      if ((readq(np->regs + ((unsigned long)channel + 12288UL) * 512UL) & 536870912ULL) != 0ULL) 
        #line 4900 
        break;
      #line 4901 
      __const_udelay(42950UL);
    }
  }
  #line 4903 
  if (limit <= 0) 
                  #line 4904 
                  return -19;
  #line 4905 
  return 0;
}

#line 4908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_one_rx_channel(struct niu *np, struct rx_ring_info *rp)
{
  #line 4910 
  int err;
  #line 4911 
  u64 val;
  #line 4910 
  int channel = rp->rx_channel;
  #line 4913 
  err = niu_rx_channel_reset(np,channel);
  #line 4914 
  if (err != 0) 
                #line 4915 
                return err;
  #line 4917 
  err = niu_rx_channel_lpage_init(np,channel);
  #line 4918 
  if (err != 0) 
                #line 4919 
                return err;
  #line 4921 
  niu_rx_channel_wred_init(np,rp);
  #line 4923 
  writeq(8ULL,np->regs + ((unsigned long)channel * 512UL + 6291560UL));
  #line 4924 
  writeq(246324964360192ULL,np->regs + ((unsigned long)channel * 512UL + 6291568UL));
  #line 4929 
  writeq(rp->mbox_dma >> 32,np->regs + ((unsigned long)channel + 12288UL) * 512UL);
  #line 4930 
  writeq((rp->mbox_dma & 4294967232ULL) | 1ULL,np->regs + ((unsigned long)channel * 512UL + 6291464UL));
  #line 4933 
  writeq(((unsigned long long)rp->rbr_table_size << 48) | (rp->rbr_dma & 17592186044352ULL),np->regs + ((unsigned long)channel * 512UL + 6291472UL));
  #line 4936 
  err = niu_compute_rbr_cfig_b(rp,& val);
  #line 4937 
  if (err != 0) 
                #line 4938 
                return err;
  #line 4939 
  writeq(val,np->regs + ((unsigned long)channel * 512UL + 6291480UL));
  #line 4940 
  writeq(((unsigned long long)rp->rcr_table_size << 48) | (rp->rcr_dma & 17592186044352ULL),np->regs + ((unsigned long)channel * 512UL + 6291520UL));
  #line 4943 
  writeq((((unsigned long long)rp->rcr_pkt_threshold << 16) | (unsigned long long)rp->rcr_timeout) | 32768ULL,np->regs + ((unsigned long)channel * 512UL + 6291528UL));
  #line 4948 
  err = niu_enable_rx_channel(np,channel,1);
  #line 4949 
  if (err != 0) 
                #line 4950 
                return err;
  #line 4952 
  writeq((unsigned long long)rp->rbr_index,np->regs + ((unsigned long)channel * 512UL + 6291488UL));
  #line 4954 
  val = readq(np->regs + ((unsigned long)channel * 512UL + 6291568UL));
  #line 4955 
  val |= 34359738368ULL;
  #line 4956 
  writeq(val,np->regs + ((unsigned long)channel * 512UL + 6291568UL));
  #line 4958 
  return 0;
}

#line 4961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_rx_channels(struct niu *np)
{
  #line 4963 
  unsigned long flags;
  #line 4965 
  int err;
  #line 4965 
  int i;
  #line 4964 
  u64 seed = jiffies_64;
  #line 4967 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 4968 
  writeq((unsigned long long)(np->parent)->rxdma_clock_divider,np->regs + 6815744UL);
  #line 4969 
  writeq((seed & 65535ULL) | 65536ULL,np->regs + 6815848UL);
  #line 4970 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 4974 
  niu_init_rdc_groups(np);
  #line 4975 
  niu_init_drr_weight(np);
  #line 4977 
  err = niu_init_hostinfo(np);
  #line 4978 
  if (err != 0) 
                #line 4979 
                return err;
  #line 4981 
  i = 0;
  #line 4981 
  while (np->num_rx_rings > i) {
    {
      #line 4982 
      struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
      #line 4984 
      err = niu_init_one_rx_channel(np,rp);
      #line 4985 
      if (err != 0) 
                    #line 4986 
                    return err;
    }
    #line 4981 
    i ++;
  }
  #line 4989 
  return 0;
}

#line 4992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_ip_frag_rule(struct niu *np)
{
  #line 4996 
  struct niu_tcam_entry *tp;
  #line 4997 
  int index;
  #line 4997 
  int err;
  #line 4994 
  struct niu_parent *parent = np->parent;
  #line 4995 
  struct niu_classifier *cp = & np->clas;
  #line 4999 
  index = (int)cp->tcam_top;
  #line 5000 
  tp = & parent->tcam[index];
  #line 5005 
  memset((void *)tp,0,80UL);
  #line 5006 
  tp->key[1] = 288230376151711744ULL;
  #line 5007 
  tp->key_mask[1] = 288230376151711744ULL;
  #line 5008 
  tp->assoc_data = 1024ULL;
  #line 5010 
  err = tcam_write(np,index,(u64 *)(& tp->key),(u64 *)(& tp->key_mask));
  #line 5011 
  if (err != 0) 
                #line 5012 
                return err;
  #line 5013 
  err = tcam_assoc_write(np,index,tp->assoc_data);
  #line 5014 
  if (err != 0) 
                #line 5015 
                return err;
  #line 5016 
  tp->valid = (unsigned char)1U;
  #line 5017 
  cp->tcam_valid_entries = (u16)((int)cp->tcam_valid_entries + 1);
  #line 5019 
  return 0;
}

#line 5022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_classifier_hw(struct niu *np)
{
  #line 5026 
  int i;
  #line 5026 
  int err;
  #line 5024 
  struct niu_parent *parent = np->parent;
  #line 5025 
  struct niu_classifier *cp = & np->clas;
  #line 5028 
  writeq((unsigned long long)cp->h1_init,np->regs + 3932256UL);
  #line 5029 
  writeq((unsigned long long)cp->h2_init,np->regs + 3932264UL);
  #line 5031 
  err = niu_init_hostinfo(np);
  #line 5032 
  if (err != 0) 
                #line 5033 
                return err;
  #line 5035 
  i = 0;
  #line 5035 
  while (i <= 4095) {
    {
      #line 5036 
      struct niu_vlan_rdc *vp = & cp->vlan_mappings[i];
      #line 5038 
      vlan_tbl_write(np,(unsigned long)i,(int)np->port,(int)vp->vlan_pref,(int)vp->rdc_num);
    }
    #line 5035 
    i ++;
  }
  #line 5042 
  i = 0;
  #line 5042 
  while ((int)cp->num_alt_mac_mappings > i) {
    {
      #line 5043 
      struct niu_altmac_rdc *ap = & cp->alt_mac_mappings[i];
      #line 5045 
      err = niu_set_alt_mac_rdc_table(np,(int)ap->alt_mac_num,(int)ap->rdc_num,(int)ap->mac_pref);
      #line 5047 
      if (err != 0) 
                    #line 5048 
                    return err;
    }
    #line 5042 
    i ++;
  }
  #line 5051 
  i = 4;
  #line 5051 
  while (i <= 15) {
    {
      #line 5052 
      int index = i + -4;
      #line 5054 
      err = niu_set_tcam_key(np,(unsigned long)i,parent->tcam_key[index]);
      #line 5055 
      if (err != 0) 
                    #line 5056 
                    return err;
      #line 5057 
      err = niu_set_flow_key(np,(unsigned long)i,parent->flow_key[index]);
      #line 5058 
      if (err != 0) 
                    #line 5059 
                    return err;
    }
    #line 5051 
    i ++;
  }
  #line 5062 
  err = niu_set_ip_frag_rule(np);
  #line 5063 
  if (err != 0) 
                #line 5064 
                return err;
  #line 5066 
  tcam_enable(np,1);
  #line 5068 
  return 0;
}

#line 5071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_zcp_write(struct niu *np, int index, u64 *data)
{
  #line 5073 
  writeq(*data,np->regs + 5767256UL);
  #line 5074 
  writeq(*(data + 1U),np->regs + 5767264UL);
  #line 5075 
  writeq(*(data + 2U),np->regs + 5767272UL);
  #line 5076 
  writeq(*(data + 3U),np->regs + 5767280UL);
  #line 5077 
  writeq(*(data + 4U),np->regs + 5767288UL);
  #line 5078 
  writeq(131071ULL,np->regs + 5767296UL);
  #line 5079 
  writeq((unsigned long long)(((int)np->port + 16) << 12),np->regs + 5767304UL);
  #line 5084 
  return __niu_wait_bits_clear(np,5767304UL,2147483648ULL,1000,100);
}

#line 5088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_zcp_read(struct niu *np, int index, u64 *data)
{
  #line 5090 
  int err;
  #line 5092 
  err = __niu_wait_bits_clear(np,5767304UL,2147483648ULL,1000,100);
  #line 5094 
  if (err != 0) {
    #line 5095 
    ;
    #line 5095 
    netdev_err(np->dev,(char *)"ZCP read busy won\'t clear, ZCP_RAM_ACC[%llx]\n",readq(np->regs + 5767304UL));
    #line 5097 
    return err;
  }
  #line 5100 
  writeq((unsigned long long)((((int)np->port + 16) << 12) | 1073741824),np->regs + 5767304UL);
  #line 5105 
  err = __niu_wait_bits_clear(np,5767304UL,2147483648ULL,1000,100);
  #line 5107 
  if (err != 0) {
    #line 5108 
    ;
    #line 5108 
    netdev_err(np->dev,(char *)"ZCP read busy2 won\'t clear, ZCP_RAM_ACC[%llx]\n",readq(np->regs + 5767304UL));
    #line 5110 
    return err;
  }
  #line 5113 
  *data = readq(np->regs + 5767256UL);
  #line 5114 
  *(data + 1U) = readq(np->regs + 5767264UL);
  #line 5115 
  *(data + 2U) = readq(np->regs + 5767272UL);
  #line 5116 
  *(data + 3U) = readq(np->regs + 5767280UL);
  #line 5117 
  *(data + 4U) = readq(np->regs + 5767288UL);
  #line 5119 
  return 0;
}

#line 5122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_zcp_cfifo_reset(struct niu *np)
{
  #line 5124 
  u64 val = readq(np->regs + 5767320UL);
  #line 5126 
  val = (unsigned long long)(1 << (int)np->port) | val;
  #line 5127 
  writeq(val,np->regs + 5767320UL);
  #line 5128 
  __const_udelay(42950UL);
  #line 5130 
  val = (unsigned long long)(~ (1 << (int)np->port)) & val;
  #line 5131 
  writeq(val,np->regs + 5767320UL);
  #line 5132 
  return;
}

#line 5134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_zcp(struct niu *np)
{
  #line 5136 
  u64 data[5U];
  #line 5136 
  u64 rbuf[5U];
  #line 5137 
  int i;
  #line 5137 
  int max;
  #line 5137 
  int err;
  #line 5139 
  if ((unsigned int)(np->parent)->plat_type != 2U) 
    #line 5140 
    if ((unsigned int)np->port <= 1U) 
                                      #line 5141 
                                      max = 2048; else 
                                                       #line 5143 
                                                       max = 1024;
  else 
       #line 5145 
       max = 1024;
  #line 5147 
  data[0] = 0ULL;
  #line 5148 
  data[1] = 0ULL;
  #line 5149 
  data[2] = 0ULL;
  #line 5150 
  data[3] = 0ULL;
  #line 5151 
  data[4] = 0ULL;
  #line 5153 
  i = 0;
  #line 5153 
  while (i < max) {
    #line 5154 
    err = niu_zcp_write(np,i,(u64 *)(& data));
    #line 5155 
    if (err != 0) 
                  #line 5156 
                  return err;
    #line 5157 
    err = niu_zcp_read(np,i,(u64 *)(& rbuf));
    #line 5158 
    if (err != 0) 
                  #line 5159 
                  return err;
    #line 5153 
    i ++;
  }
  #line 5162 
  niu_zcp_cfifo_reset(np);
  #line 5163 
  writeq(0ULL,np->regs + ((unsigned long)np->port + 720916UL) * 8UL);
  #line 5164 
  writeq(65535ULL,np->regs + 5767176UL);
  #line 5165 
  readq(np->regs + 5767176UL);
  #line 5166 
  writeq(65535ULL,np->regs + 5767184UL);
  #line 5168 
  return 0;
}

#line 5171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_ipp_write(struct niu *np, int index, u64 *data)
{
  #line 5173 
  u64 val = readq(np->regs + (np->ipp_off + 2621440UL));
  #line 5175 
  writeq(val | 32ULL,np->regs + (np->ipp_off + 2621440UL));
  #line 5176 
  writeq((unsigned long long)index,np->regs + (np->ipp_off + 2621720UL));
  #line 5177 
  writeq(*data,np->regs + (np->ipp_off + 2621672UL));
  #line 5178 
  writeq(*(data + 1U),np->regs + (np->ipp_off + 2621680UL));
  #line 5179 
  writeq(*(data + 2U),np->regs + (np->ipp_off + 2621688UL));
  #line 5180 
  writeq(*(data + 3U),np->regs + (np->ipp_off + 2621696UL));
  #line 5181 
  writeq(*(data + 4U),np->regs + (np->ipp_off + 2621704UL));
  #line 5182 
  writeq(val & 18446744073709551583ULL,np->regs + (np->ipp_off + 2621440UL));
  #line 5183 
  return;
}

#line 5185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_ipp_read(struct niu *np, int index, u64 *data)
{
  #line 5187 
  writeq((unsigned long long)index,np->regs + (np->ipp_off + 2621712UL));
  #line 5188 
  *data = readq(np->regs + (np->ipp_off + 2621632UL));
  #line 5189 
  *(data + 1U) = readq(np->regs + (np->ipp_off + 2621640UL));
  #line 5190 
  *(data + 2U) = readq(np->regs + (np->ipp_off + 2621648UL));
  #line 5191 
  *(data + 3U) = readq(np->regs + (np->ipp_off + 2621656UL));
  #line 5192 
  *(data + 4U) = readq(np->regs + (np->ipp_off + 2621664UL));
  #line 5193 
  return;
}

#line 5195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ipp_reset(struct niu *np)
{
  #line 5197 
  return __niu_set_and_wait_clear_ipp(np,2621440UL,2147483648ULL,1000,100,
                                     (char *)"IPP_CFIG");
}

#line 5201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_ipp(struct niu *np)
{
  #line 5203 
  u64 data[5U];
  #line 5203 
  u64 rbuf[5U];
  #line 5203 
  u64 val;
  #line 5204 
  int i;
  #line 5204 
  int max;
  #line 5204 
  int err;
  #line 5206 
  if ((unsigned int)(np->parent)->plat_type != 2U) 
    #line 5207 
    if ((unsigned int)np->port <= 1U) 
                                      #line 5208 
                                      max = 2048; else 
                                                       #line 5210 
                                                       max = 1024;
  else 
       #line 5212 
       max = 1024;
  #line 5214 
  data[0] = 0ULL;
  #line 5215 
  data[1] = 0ULL;
  #line 5216 
  data[2] = 0ULL;
  #line 5217 
  data[3] = 0ULL;
  #line 5218 
  data[4] = 0ULL;
  #line 5220 
  i = 0;
  #line 5220 
  while (i < max) {
    #line 5221 
    niu_ipp_write(np,i,(u64 *)(& data));
    #line 5222 
    niu_ipp_read(np,i,(u64 *)(& rbuf));
    #line 5220 
    i ++;
  }
  #line 5225 
  readq(np->regs + (np->ipp_off + 2621504UL));
  #line 5226 
  readq(np->regs + (np->ipp_off + 2621504UL));
  #line 5228 
  err = niu_ipp_reset(np);
  #line 5229 
  if (err != 0) 
                #line 5230 
                return err;
  #line 5232 
  readq(np->regs + (np->ipp_off + 2621472UL));
  #line 5233 
  readq(np->regs + (np->ipp_off + 2621480UL));
  #line 5234 
  readq(np->regs + (np->ipp_off + 2621488UL));
  #line 5236 
  readq(np->regs + (np->ipp_off + 2621504UL));
  #line 5238 
  writeq(18446744073709551360ULL,np->regs + (np->ipp_off + 2621512UL));
  #line 5240 
  val = readq(np->regs + (np->ipp_off + 2621440UL));
  #line 5241 
  val &= 18446744073675997439ULL;
  #line 5242 
  val |= 33554205ULL;
  #line 5247 
  writeq(val,np->regs + (np->ipp_off + 2621440UL));
  #line 5249 
  return 0;
}

#line 5252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_handle_led(struct niu *np, int status)
{
  #line 5254 
  u64 val;
  #line 5255 
  val = readq(np->mac_regs + 96UL);
  #line 5257 
  if ((np->flags & 262144U) != 0U && (np->flags & 131072U) != 0U) 
    #line 5259 
    if (status != 0) {
      #line 5260 
      val |= 4194304ULL;
      #line 5261 
      val &= 18446744073707454463ULL;
    }
    else {
      #line 5263 
      val |= 2097152ULL;
      #line 5264 
      val &= 18446744073705357311ULL;
    }
  #line 5268 
  writeq(val,np->mac_regs + 96UL);
  #line 5269 
  return;
}

#line 5271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_xif_xmac(struct niu *np)
{
  #line 5274 
  u64 val;
  #line 5273 
  struct niu_link_config *lp = & np->link_config;
  #line 5276 
  if ((np->flags & 524288U) != 0U) {
    #line 5277 
    val = readq(np->regs + 1663008UL);
    #line 5278 
    val |= 65536ULL;
    #line 5279 
    writeq(val,np->regs + 1663008UL);
  }
  #line 5282 
  val = readq(np->mac_regs + 96UL);
  #line 5283 
  val &= 18446744073701163007ULL;
  #line 5285 
  val |= 16777216ULL;
  #line 5287 
  if ((unsigned int)lp->loopback_mode == 2U) {
    #line 5288 
    val &= 18446744073701163007ULL;
    #line 5289 
    val |= 33554432ULL;
  }
  else 
       #line 5291 
       val &= 18446744073675997183ULL;
  #line 5294 
  if ((np->flags & 262144U) != 0U) 
                                   #line 5295 
                                   val &= 18446744073642442751ULL;
  else {
    #line 5297 
    val |= 67108864ULL;
    #line 5298 
    if ((np->flags & 131072U) == 0U && (np->flags & 524288U) == 0U) 
                                                                    #line 5300 
                                                                    val |= 1073741824ULL; else 
                                                                    #line 5302 
                                                                    val &= 18446744072635809791ULL;
  }
  #line 5305 
  val &= 18446744073172680703ULL;
  #line 5307 
  if ((unsigned int)lp->active_speed == 100U) 
                                              #line 5308 
                                              val |= 2147483648ULL; else 
                                                                    #line 5310 
                                                                    val &= 18446744071562067967ULL;
  #line 5312 
  writeq(val,np->mac_regs + 96UL);
  #line 5314 
  val = readq(np->mac_regs + 96UL);
  #line 5315 
  val &= 18446744073306898431ULL;
  #line 5316 
  if ((np->flags & 262144U) != 0U) 
                                   #line 5317 
                                   val = val;
  else 
    #line 5319 
    if ((unsigned int)lp->active_speed == 1000U) 
                                                 #line 5320 
                                                 val |= 134217728ULL; else 
                                                                    #line 5322 
                                                                    val |= 268435456ULL;
  #line 5325 
  writeq(val,np->mac_regs + 96UL);
  #line 5326 
  return;
}

#line 5328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_xif_bmac(struct niu *np)
{
  #line 5331 
  u64 val;
  #line 5330 
  struct niu_link_config *lp = & np->link_config;
  #line 5333 
  val = 1ULL;
  #line 5335 
  if ((unsigned int)lp->loopback_mode == 2U) 
                                             #line 5336 
                                             val |= 2ULL; else 
                                                               #line 5338 
                                                               val &= 18446744073709551613ULL;
  #line 5340 
  if ((unsigned int)lp->active_speed == 1000U) 
                                               #line 5341 
                                               val |= 8ULL; else 
                                                                 #line 5343 
                                                                 val &= 18446744073709551607ULL;
  #line 5345 
  val &= 18446744073709551519ULL;
  #line 5348 
  if (((np->flags & 262144U) == 0U && (np->flags & 131072U) == 0U) && (unsigned int)lp->active_speed == 100U) 
    #line 5351 
    val |= 128ULL; else 
                        #line 5353 
                        val &= 18446744073709551487ULL;
  #line 5355 
  writeq(val,np->mac_regs + 120UL);
  #line 5356 
  return;
}

#line 5358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_xif(struct niu *np)
{
  #line 5360 
  if ((np->flags & 65536U) != 0U) 
                                  #line 5361 
                                  niu_init_xif_xmac(np); else 
                                                              #line 5363 
                                                              niu_init_xif_bmac(np);
  #line 5364 
  return;
}

#line 5366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pcs_mii_reset(struct niu *np)
{
  #line 5368 
  int limit = 1000;
  #line 5369 
  u64 val = readq(np->regs + (np->pcs_off + 1572864UL));
  #line 5370 
  val |= 32768ULL;
  #line 5371 
  writeq(val,np->regs + (np->pcs_off + 1572864UL));
  #line 5372 
  while (1) {
    #line 5372 
    limit --;
    #line 5372 
    if (limit >= 0) {
      #line 5372 
      if (! ((val & 32768ULL) != 0ULL)) 
                                        #line 5372 
                                        break;
    }
    else 
         #line 5372 
         break;
    #line 5373 
    __const_udelay(429500UL);
    #line 5374 
    val = readq(np->regs + (np->pcs_off + 1572864UL));
  }
  #line 5376 
  return;
}

#line 5378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_xpcs_reset(struct niu *np)
{
  #line 5380 
  int limit = 1000;
  #line 5381 
  u64 val = readq(np->regs + (np->xpcs_off + 1572864UL));
  #line 5382 
  val |= 32768ULL;
  #line 5383 
  writeq(val,np->regs + (np->xpcs_off + 1572864UL));
  #line 5384 
  while (1) {
    #line 5384 
    limit --;
    #line 5384 
    if (limit >= 0) {
      #line 5384 
      if (! ((val & 32768ULL) != 0ULL)) 
                                        #line 5384 
                                        break;
    }
    else 
         #line 5384 
         break;
    #line 5385 
    __const_udelay(429500UL);
    #line 5386 
    val = readq(np->regs + (np->xpcs_off + 1572864UL));
  }
  #line 5388 
  return;
}

#line 5390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_pcs(struct niu *np)
{
  #line 5393 
  u64 val;
  #line 5392 
  struct niu_link_config *lp = & np->link_config;
  #line 5395 
  switch (np->flags & 917504U) {
    #line 5398 
    case (unsigned int)131072: 
                               #line 5398 
    ;
    #line 5400 
    writeq(65ULL,np->regs + (np->pcs_off + 1572896UL));
    #line 5401 
    writeq(0ULL,np->regs + (np->pcs_off + 1573024UL));
    #line 5402 
    niu_pcs_mii_reset(np);
    #line 5403 
    break;
    #line 5405 
    case (unsigned int)262144: 
                               #line 5405 
    ;
    #line 5406 
    case (unsigned int)393216: 
                               #line 5406 
    ;
    #line 5407 
    case (unsigned int)786432: 
                               #line 5407 
    ;
    #line 5409 
    if ((np->flags & 65536U) == 0U) 
                                    #line 5410 
                                    return -22;
    #line 5413 
    val = readq(np->mac_regs + 96UL);
    #line 5414 
    val &= 18446744073172680703ULL;
    #line 5415 
    writeq(val,np->mac_regs + 96UL);
    #line 5417 
    niu_xpcs_reset(np);
    #line 5419 
    val = readq(np->regs + (np->xpcs_off + 1572864UL));
    #line 5420 
    if ((unsigned int)lp->loopback_mode == 1U) 
                                               #line 5421 
                                               val |= 16384ULL; else 
                                                                  #line 5423 
                                                                  val &= 18446744073709535231ULL;
    #line 5424 
    writeq(val,np->regs + (np->xpcs_off + 1572864UL));
    #line 5426 
    writeq(0ULL,np->regs + (np->xpcs_off + 1572984UL));
    #line 5427 
    readq(np->regs + (np->xpcs_off + 1572992UL));
    #line 5428 
    readq(np->regs + (np->xpcs_off + 1573000UL));
    #line 5429 
    break;
    #line 5432 
    case (unsigned int)524288: 
                               #line 5432 
    ;
    #line 5434 
    niu_pcs_mii_reset(np);
    #line 5435 
    writeq(65ULL,np->regs + (np->pcs_off + 1572896UL));
    #line 5436 
    writeq(0ULL,np->regs + (np->pcs_off + 1573024UL));
    #line 5437 
    break;
    #line 5439 
    case (unsigned int)0: 
                          #line 5439 
    ;
    #line 5441 
    case (unsigned int)655360: 
                               #line 5441 
    ;
    #line 5443 
    writeq(2ULL,np->regs + (np->pcs_off + 1573024UL));
    #line 5444 
    niu_pcs_mii_reset(np);
    #line 5445 
    break;
    #line 5447 
    default: 
             #line 5447 
    ;
    #line 5448 
    return -22;
  }
  #line 5451 
  return 0;
}

#line 5454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_reset_tx_xmac(struct niu *np)
{
  #line 5456 
  return __niu_set_and_wait_clear_mac(np,0UL,3ULL,1000,100,
                                     (char *)"XTXMAC_SW_RST");
}

#line 5462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_reset_tx_bmac(struct niu *np)
{
  #line 5464 
  int limit;
  #line 5466 
  writeq(1ULL,np->mac_regs);
  #line 5467 
  limit = 1000;
  #line 5468 
  while (1) {
    #line 5468 
    limit --;
    #line 5468 
    if (! (limit >= 0)) 
                        #line 5468 
                        break;
    {
      #line 5469 
      if ((readq(np->mac_regs) & 1ULL) == 0ULL) 
                                                #line 5470 
                                                break;
      #line 5471 
      __const_udelay(429500UL);
    }
  }
  #line 5473 
  if (limit < 0) {
    #line 5474 
    ;
    #line 5474 
    ;
    #line 5474 
    _dev_err(np->device,(char *)"Port %u TX BMAC would not reset, BTXMAC_SW_RST[%llx]\n",(int)np->port,readq(np->mac_regs));
    #line 5477 
    return -19;
  }
  #line 5480 
  return 0;
}

#line 5483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_reset_tx_mac(struct niu *np)
{
  #line 5485 
  if ((np->flags & 65536U) != 0U) {
    #line 5486 
    return niu_reset_tx_xmac(np);
  }
  else {
    #line 5488 
    return niu_reset_tx_bmac(np);
  }
}

#line 5491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_tx_xmac(struct niu *np, u64 min, u64 max)
{
  #line 5493 
  u64 val;
  #line 5495 
  val = readq(np->mac_regs + 136UL);
  #line 5496 
  val &= 18446744072636857344ULL;
  #line 5498 
  val = (min << 20) | val;
  #line 5499 
  val |= min;
  #line 5500 
  writeq(val,np->mac_regs + 136UL);
  #line 5502 
  writeq(max,np->mac_regs + 144UL);
  #line 5504 
  writeq(18446744073709551615ULL,np->mac_regs + 64UL);
  #line 5506 
  val = readq(np->mac_regs + 128UL);
  #line 5507 
  if ((np->flags & 262144U) != 0U) {
    #line 5508 
    val &= 18446744073709551608ULL;
    #line 5509 
    val |= 3ULL;
  }
  else {
    #line 5511 
    val &= 18446744073709486335ULL;
    #line 5512 
    val |= 2560ULL;
  }
  #line 5514 
  writeq(val,np->mac_regs + 128UL);
  #line 5516 
  val = readq(np->mac_regs + 96UL);
  #line 5517 
  val &= 18446744073709551600ULL;
  #line 5521 
  writeq(val,np->mac_regs + 96UL);
  #line 5523 
  writeq(0ULL,np->mac_regs + 368UL);
  #line 5524 
  writeq(0ULL,np->mac_regs + 376UL);
  #line 5525 
  return;
}

#line 5527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_tx_bmac(struct niu *np, u64 min, u64 max)
{
  #line 5529 
  u64 val;
  #line 5531 
  writeq(min,np->mac_regs + 160UL);
  #line 5532 
  writeq(max,np->mac_regs + 168UL);
  #line 5534 
  writeq(18446744073709551615ULL,np->mac_regs + 64UL);
  #line 5535 
  writeq(34824ULL,np->mac_regs + 200UL);
  #line 5536 
  writeq(7ULL,np->mac_regs + 176UL);
  #line 5538 
  val = readq(np->mac_regs + 96UL);
  #line 5539 
  val &= 18446744073709551612ULL;
  #line 5541 
  writeq(val,np->mac_regs + 96UL);
  #line 5542 
  return;
}

#line 5544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_tx_mac(struct niu *np)
{
  #line 5546 
  u64 min;
  #line 5546 
  u64 max;
  #line 5548 
  min = 64ULL;
  #line 5549 
  if ((np->dev)->mtu > 1500U) 
                              #line 5550 
                              max = 9216ULL; else 
                                                  #line 5552 
                                                  max = 1522ULL;
  #line 5557 
  if ((long)((min & 7ULL) != 0ULL) != 0L) {
    #line 5558 
    ldv_inline_asm();
    #line 5559 
    ldv_inline_asm();
    #line 5560 
    ldv_inline_asm();
    #line 5557 
    ;
  }
  #line 5559 
  if ((np->flags & 65536U) != 0U) 
                                  #line 5560 
                                  niu_init_tx_xmac(np,min,max); else 
                                                                  #line 5562 
                                                                  niu_init_tx_bmac(np,min,max);
  #line 5563 
  return;
}

#line 5565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_reset_rx_xmac(struct niu *np)
{
  #line 5567 
  int limit;
  #line 5569 
  writeq(3ULL,np->mac_regs + 8UL);
  #line 5571 
  limit = 1000;
  #line 5572 
  while (1) {
    #line 5572 
    limit --;
    #line 5572 
    if (! (limit >= 0)) 
                        #line 5572 
                        break;
    {
      #line 5573 
      if ((readq(np->mac_regs + 8UL) & 3ULL) == 0ULL) 
                                                      #line 5575 
                                                      break;
      #line 5576 
      __const_udelay(429500UL);
    }
  }
  #line 5578 
  if (limit < 0) {
    #line 5579 
    ;
    #line 5579 
    ;
    #line 5579 
    _dev_err(np->device,(char *)"Port %u RX XMAC would not reset, XRXMAC_SW_RST[%llx]\n",(int)np->port,readq(np->mac_regs + 8UL));
    #line 5582 
    return -19;
  }
  #line 5585 
  return 0;
}

#line 5588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_reset_rx_bmac(struct niu *np)
{
  #line 5590 
  int limit;
  #line 5592 
  writeq(1ULL,np->mac_regs + 8UL);
  #line 5593 
  limit = 1000;
  #line 5594 
  while (1) {
    #line 5594 
    limit --;
    #line 5594 
    if (! (limit >= 0)) 
                        #line 5594 
                        break;
    {
      #line 5595 
      if ((readq(np->mac_regs + 8UL) & 1ULL) == 0ULL) 
                                                      #line 5596 
                                                      break;
      #line 5597 
      __const_udelay(429500UL);
    }
  }
  #line 5599 
  if (limit < 0) {
    #line 5600 
    ;
    #line 5600 
    ;
    #line 5600 
    _dev_err(np->device,(char *)"Port %u RX BMAC would not reset, BRXMAC_SW_RST[%llx]\n",(int)np->port,readq(np->mac_regs + 8UL));
    #line 5603 
    return -19;
  }
  #line 5606 
  return 0;
}

#line 5609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_reset_rx_mac(struct niu *np)
{
  #line 5611 
  if ((np->flags & 65536U) != 0U) {
    #line 5612 
    return niu_reset_rx_xmac(np);
  }
  else {
    #line 5614 
    return niu_reset_rx_bmac(np);
  }
}

#line 5617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_rx_xmac(struct niu *np)
{
  #line 5622 
  unsigned long i;
  #line 5623 
  u64 val;
  #line 5619 
  struct niu_parent *parent = np->parent;
  #line 5620 
  struct niu_rdc_tables *tp = & parent->rdc_group_cfg[(int)np->port];
  #line 5621 
  int first_rdc_table = tp->first_table_num;
  #line 5625 
  writeq(0ULL,np->mac_regs + 2072UL);
  #line 5626 
  writeq(0ULL,np->mac_regs + 2080UL);
  #line 5627 
  writeq(0ULL,np->mac_regs + 2088UL);
  #line 5628 
  writeq(0ULL,np->mac_regs + 2096UL);
  #line 5629 
  writeq(0ULL,np->mac_regs + 2104UL);
  #line 5630 
  i = 0UL;
  #line 5630 
  while (i <= 15UL) {
    #line 5631 
    writeq(0ULL,np->mac_regs + (i + 264UL) * 8UL);
    #line 5630 
    i ++;
  }
  #line 5632 
  writeq(18446744073709551615ULL,np->mac_regs + 72UL);
  #line 5633 
  niu_set_primary_mac_rdc_table(np,first_rdc_table,1);
  #line 5634 
  niu_set_multicast_mac_rdc_table(np,first_rdc_table,1);
  #line 5636 
  val = readq(np->mac_regs + 96UL);
  #line 5637 
  val &= 18446744073707487487ULL;
  #line 5649 
  val |= 32768ULL;
  #line 5650 
  writeq(val,np->mac_regs + 96UL);
  #line 5652 
  writeq(0ULL,np->mac_regs + 256UL);
  #line 5653 
  writeq(0ULL,np->mac_regs + 264UL);
  #line 5654 
  writeq(0ULL,np->mac_regs + 272UL);
  #line 5655 
  writeq(0ULL,np->mac_regs + 280UL);
  #line 5656 
  writeq(0ULL,np->mac_regs + 288UL);
  #line 5657 
  writeq(0ULL,np->mac_regs + 296UL);
  #line 5658 
  writeq(0ULL,np->mac_regs + 304UL);
  #line 5659 
  writeq(0ULL,np->mac_regs + 312UL);
  #line 5660 
  writeq(0ULL,np->mac_regs + 320UL);
  #line 5661 
  writeq(0ULL,np->mac_regs + 328UL);
  #line 5662 
  writeq(0ULL,np->mac_regs + 392UL);
  #line 5663 
  writeq(0ULL,np->mac_regs + 336UL);
  #line 5664 
  writeq(0ULL,np->mac_regs + 344UL);
  #line 5665 
  writeq(0ULL,np->mac_regs + 352UL);
  #line 5666 
  writeq(0ULL,np->mac_regs + 384UL);
  #line 5667 
  return;
}

#line 5669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_rx_bmac(struct niu *np)
{
  #line 5674 
  unsigned long i;
  #line 5675 
  u64 val;
  #line 5671 
  struct niu_parent *parent = np->parent;
  #line 5672 
  struct niu_rdc_tables *tp = & parent->rdc_group_cfg[(int)np->port];
  #line 5673 
  int first_rdc_table = tp->first_table_num;
  #line 5677 
  writeq(0ULL,np->mac_regs + 664UL);
  #line 5678 
  writeq(0ULL,np->mac_regs + 672UL);
  #line 5679 
  writeq(0ULL,np->mac_regs + 680UL);
  #line 5680 
  writeq(0ULL,np->mac_regs + 688UL);
  #line 5681 
  writeq(0ULL,np->mac_regs + 696UL);
  #line 5682 
  i = 0UL;
  #line 5682 
  while (i <= 15UL) {
    #line 5683 
    writeq(0ULL,np->mac_regs + (i + 88UL) * 8UL);
    #line 5682 
    i ++;
  }
  #line 5684 
  niu_set_primary_mac_rdc_table(np,first_rdc_table,1);
  #line 5685 
  niu_set_multicast_mac_rdc_table(np,first_rdc_table,1);
  #line 5686 
  writeq(18446744073709551615ULL,np->mac_regs + 72UL);
  #line 5688 
  val = readq(np->mac_regs + 104UL);
  #line 5689 
  val &= 18446744073709551392ULL;
  #line 5696 
  val |= 32ULL;
  #line 5697 
  writeq(val,np->mac_regs + 104UL);
  #line 5699 
  val = readq(np->mac_regs + 1016UL);
  #line 5700 
  val |= 1ULL;
  #line 5701 
  writeq(val,np->mac_regs + 1016UL);
  #line 5702 
  return;
}

#line 5704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_init_rx_mac(struct niu *np)
{
  #line 5706 
  niu_set_primary_mac(np,(np->dev)->dev_addr);
  #line 5708 
  if ((np->flags & 65536U) != 0U) 
                                  #line 5709 
                                  niu_init_rx_xmac(np); else 
                                                             #line 5711 
                                                             niu_init_rx_bmac(np);
  #line 5712 
  return;
}

#line 5714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_tx_xmac(struct niu *np, int on)
{
  #line 5716 
  u64 val = readq(np->mac_regs + 96UL);
  #line 5718 
  if (on != 0) 
               #line 5719 
               val |= 1ULL; else 
                                 #line 5721 
                                 val &= 18446744073709551614ULL;
  #line 5722 
  writeq(val,np->mac_regs + 96UL);
  #line 5723 
  return;
}

#line 5725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_tx_bmac(struct niu *np, int on)
{
  #line 5727 
  u64 val = readq(np->mac_regs + 96UL);
  #line 5729 
  if (on != 0) 
               #line 5730 
               val |= 1ULL; else 
                                 #line 5732 
                                 val &= 18446744073709551614ULL;
  #line 5733 
  writeq(val,np->mac_regs + 96UL);
  #line 5734 
  return;
}

#line 5736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_tx_mac(struct niu *np, int on)
{
  #line 5738 
  if ((np->flags & 65536U) != 0U) 
                                  #line 5739 
                                  niu_enable_tx_xmac(np,on); else 
                                                                  #line 5741 
                                                                  niu_enable_tx_bmac(np,on);
  #line 5742 
  return;
}

#line 5744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_rx_xmac(struct niu *np, int on)
{
  #line 5746 
  u64 val = readq(np->mac_regs + 96UL);
  #line 5748 
  val &= 18446744073709518335ULL;
  #line 5751 
  if ((np->flags & 2097152U) != 0U) 
                                    #line 5752 
                                    val |= 32768ULL;
  #line 5753 
  if ((np->flags & 1048576U) != 0U) 
                                    #line 5754 
                                    val |= 512ULL;
  #line 5756 
  if (on != 0) 
               #line 5757 
               val |= 256ULL; else 
                                   #line 5759 
                                   val &= 18446744073709551359ULL;
  #line 5760 
  writeq(val,np->mac_regs + 96UL);
  #line 5761 
  return;
}

#line 5763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_rx_bmac(struct niu *np, int on)
{
  #line 5765 
  u64 val = readq(np->mac_regs + 104UL);
  #line 5767 
  val &= 18446744073709551575ULL;
  #line 5770 
  if ((np->flags & 2097152U) != 0U) 
                                    #line 5771 
                                    val |= 32ULL;
  #line 5772 
  if ((np->flags & 1048576U) != 0U) 
                                    #line 5773 
                                    val |= 8ULL;
  #line 5775 
  if (on != 0) 
               #line 5776 
               val |= 1ULL; else 
                                 #line 5778 
                                 val &= 18446744073709551614ULL;
  #line 5779 
  writeq(val,np->mac_regs + 104UL);
  #line 5780 
  return;
}

#line 5782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_rx_mac(struct niu *np, int on)
{
  #line 5784 
  if ((np->flags & 65536U) != 0U) 
                                  #line 5785 
                                  niu_enable_rx_xmac(np,on); else 
                                                                  #line 5787 
                                                                  niu_enable_rx_bmac(np,on);
  #line 5788 
  return;
}

#line 5790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_mac(struct niu *np)
{
  #line 5792 
  int err;
  #line 5794 
  niu_init_xif(np);
  #line 5795 
  err = niu_init_pcs(np);
  #line 5796 
  if (err != 0) 
                #line 5797 
                return err;
  #line 5799 
  err = niu_reset_tx_mac(np);
  #line 5800 
  if (err != 0) 
                #line 5801 
                return err;
  #line 5802 
  niu_init_tx_mac(np);
  #line 5803 
  err = niu_reset_rx_mac(np);
  #line 5804 
  if (err != 0) 
                #line 5805 
                return err;
  #line 5806 
  niu_init_rx_mac(np);
  #line 5813 
  niu_init_tx_mac(np);
  #line 5814 
  niu_enable_tx_mac(np,1);
  #line 5816 
  niu_enable_rx_mac(np,1);
  #line 5818 
  return 0;
}

#line 5821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_stop_one_tx_channel(struct niu *np, struct tx_ring_info *rp)
{
  #line 5823 
  niu_tx_channel_stop(np,(int)rp->tx_channel);
  #line 5824 
  return;
}

#line 5826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_stop_tx_channels(struct niu *np)
{
  #line 5828 
  int i;
  #line 5830 
  i = 0;
  #line 5830 
  while (np->num_tx_rings > i) {
    {
      #line 5831 
      struct tx_ring_info *rp = np->tx_rings + (unsigned long)i;
      #line 5833 
      niu_stop_one_tx_channel(np,rp);
    }
    #line 5830 
    i ++;
  }
  #line 5835 
  return;
}

#line 5837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_reset_one_tx_channel(struct niu *np, struct tx_ring_info *rp)
{
  #line 5839 
  niu_tx_channel_reset(np,(int)rp->tx_channel);
  #line 5840 
  return;
}

#line 5842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_reset_tx_channels(struct niu *np)
{
  #line 5844 
  int i;
  #line 5846 
  i = 0;
  #line 5846 
  while (np->num_tx_rings > i) {
    {
      #line 5847 
      struct tx_ring_info *rp = np->tx_rings + (unsigned long)i;
      #line 5849 
      niu_reset_one_tx_channel(np,rp);
    }
    #line 5846 
    i ++;
  }
  #line 5851 
  return;
}

#line 5853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_stop_one_rx_channel(struct niu *np, struct rx_ring_info *rp)
{
  #line 5855 
  niu_enable_rx_channel(np,rp->rx_channel,0);
  #line 5856 
  return;
}

#line 5858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_stop_rx_channels(struct niu *np)
{
  #line 5860 
  int i;
  #line 5862 
  i = 0;
  #line 5862 
  while (np->num_rx_rings > i) {
    {
      #line 5863 
      struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
      #line 5865 
      niu_stop_one_rx_channel(np,rp);
    }
    #line 5862 
    i ++;
  }
  #line 5867 
  return;
}

#line 5869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_reset_one_rx_channel(struct niu *np, struct rx_ring_info *rp)
{
  #line 5871 
  int channel = rp->rx_channel;
  #line 5873 
  niu_rx_channel_reset(np,channel);
  #line 5874 
  writeq(4161535ULL,np->regs + ((unsigned long)channel * 512UL + 6291560UL));
  #line 5875 
  writeq(0ULL,np->regs + ((unsigned long)channel * 512UL + 6291568UL));
  #line 5876 
  niu_enable_rx_channel(np,channel,0);
  #line 5877 
  return;
}

#line 5879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_reset_rx_channels(struct niu *np)
{
  #line 5881 
  int i;
  #line 5883 
  i = 0;
  #line 5883 
  while (np->num_rx_rings > i) {
    {
      #line 5884 
      struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
      #line 5886 
      niu_reset_one_rx_channel(np,rp);
    }
    #line 5883 
    i ++;
  }
  #line 5888 
  return;
}

#line 5890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_disable_ipp(struct niu *np)
{
  #line 5892 
  u64 rd;
  #line 5892 
  u64 wr;
  #line 5892 
  u64 val;
  #line 5893 
  int limit;
  #line 5895 
  rd = readq(np->regs + (np->ipp_off + 2621712UL));
  #line 5896 
  wr = readq(np->regs + (np->ipp_off + 2621720UL));
  #line 5897 
  limit = 100;
  #line 5898 
  while (1) {
    #line 5898 
    limit --;
    #line 5898 
    if (limit >= 0) {
      #line 5898 
      if (! (rd != wr)) 
                        #line 5898 
                        break;
    }
    else 
         #line 5898 
         break;
    #line 5899 
    rd = readq(np->regs + (np->ipp_off + 2621712UL));
    #line 5900 
    wr = readq(np->regs + (np->ipp_off + 2621720UL));
  }
  #line 5902 
  if (limit < 0 && (rd != 0ULL && wr != 1ULL)) {
    #line 5904 
    ;
    #line 5904 
    netdev_err(np->dev,(char *)"IPP would not quiesce, rd_ptr[%llx] wr_ptr[%llx]\n",readq(np->regs + (np->ipp_off + 2621712UL)),readq(np->regs + (np->ipp_off + 2621720UL)));
  }
  #line 5909 
  val = readq(np->regs + (np->ipp_off + 2621440UL));
  #line 5910 
  val &= 18446744073709551586ULL;
  #line 5914 
  writeq(val,np->regs + (np->ipp_off + 2621440UL));
  #line 5916 
  niu_ipp_reset(np);
  #line 5917 
  return;
}

#line 5919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_hw(struct niu *np)
{
  #line 5921 
  int i;
  #line 5921 
  int err;
  #line 5923 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5923 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize TXC\n");
  #line 5924 
  niu_txc_enable_port(np,1);
  #line 5925 
  niu_txc_port_dma_enable(np,1);
  #line 5926 
  niu_txc_set_imask(np,0ULL);
  #line 5928 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5928 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize TX channels\n");
  #line 5929 
  i = 0;
  #line 5929 
  while (np->num_tx_rings > i) {
    {
      #line 5930 
      struct tx_ring_info *rp = np->tx_rings + (unsigned long)i;
      #line 5932 
      err = niu_init_one_tx_channel(np,rp);
      #line 5933 
      if (err != 0) 
                    #line 5934 
                    return err;
    }
    #line 5929 
    i ++;
  }
  #line 5937 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5937 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize RX channels\n");
  #line 5938 
  err = niu_init_rx_channels(np);
  #line 5939 
  if (err != 0) 
                #line 5940 
                goto out_uninit_tx_channels;
  #line 5942 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5942 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize classifier\n");
  #line 5943 
  err = niu_init_classifier_hw(np);
  #line 5944 
  if (err != 0) 
                #line 5945 
                goto out_uninit_rx_channels;
  #line 5947 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5947 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize ZCP\n");
  #line 5948 
  err = niu_init_zcp(np);
  #line 5949 
  if (err != 0) 
                #line 5950 
                goto out_uninit_rx_channels;
  #line 5952 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5952 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize IPP\n");
  #line 5953 
  err = niu_init_ipp(np);
  #line 5954 
  if (err != 0) 
                #line 5955 
                goto out_uninit_rx_channels;
  #line 5957 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5957 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Initialize MAC\n");
  #line 5958 
  err = niu_init_mac(np);
  #line 5959 
  if (err != 0) 
                #line 5960 
                goto out_uninit_ipp;
  #line 5962 
  return 0;
  #line 5964 
  out_uninit_ipp: 
                  #line 5964 
  ;
  #line 5965 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5965 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Uninit IPP\n");
  #line 5966 
  niu_disable_ipp(np);
  #line 5968 
  out_uninit_rx_channels: 
                          #line 5968 
  ;
  #line 5969 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5969 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Uninit RX channels\n");
  #line 5970 
  niu_stop_rx_channels(np);
  #line 5971 
  niu_reset_rx_channels(np);
  #line 5973 
  out_uninit_tx_channels: 
                          #line 5973 
  ;
  #line 5974 
  if ((np->msg_enable & 32U) != 0U) 
                                    #line 5974 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Uninit TX channels\n");
  #line 5975 
  niu_stop_tx_channels(np);
  #line 5976 
  niu_reset_tx_channels(np);
  #line 5978 
  return err;
}

#line 5981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_stop_hw(struct niu *np)
{
  #line 5983 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 5983 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Disable interrupts\n");
  #line 5984 
  niu_enable_interrupts(np,0);
  #line 5986 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 5986 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Disable RX MAC\n");
  #line 5987 
  niu_enable_rx_mac(np,0);
  #line 5989 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 5989 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Disable IPP\n");
  #line 5990 
  niu_disable_ipp(np);
  #line 5992 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 5992 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Stop TX channels\n");
  #line 5993 
  niu_stop_tx_channels(np);
  #line 5995 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 5995 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Stop RX channels\n");
  #line 5996 
  niu_stop_rx_channels(np);
  #line 5998 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 5998 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Reset TX channels\n");
  #line 5999 
  niu_reset_tx_channels(np);
  #line 6001 
  if ((np->msg_enable & 16U) != 0U) 
                                    #line 6001 
                                    netdev_printk((char *)"\001",np->dev,(char *)"Reset RX channels\n");
  #line 6002 
  niu_reset_rx_channels(np);
  #line 6003 
  return;
}

#line 6005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_irq_name(struct niu *np)
{
  #line 6008 
  int i;
  #line 6007 
  int port = (int)np->port;
  #line 6008 
  int j = 1;
  #line 6010 
  sprintf((char *)(& np->irq_name[0]),(char *)"%s:MAC",(char *)(& (np->dev)->name));
  #line 6012 
  if (port == 0) {
    #line 6013 
    sprintf((char *)(& np->irq_name[1]),(char *)"%s:MIF",(char *)(& (np->dev)->name));
    #line 6014 
    sprintf((char *)(& np->irq_name[2]),(char *)"%s:SYSERR",(char *)(& (np->dev)->name));
    #line 6015 
    j = 3;
  }
  #line 6018 
  i = 0;
  #line 6018 
  while (np->num_ldg - j > i) {
    #line 6019 
    if (np->num_rx_rings > i) 
                              #line 6020 
                              sprintf((char *)(& np->irq_name[i + j]),(char *)"%s-rx-%d",(char *)(& (np->dev)->name),i);
    else 
      #line 6022 
      if (np->num_tx_rings + np->num_rx_rings > i) 
                                                   #line 6023 
                                                   sprintf((char *)(& np->irq_name[i + j]),(char *)"%s-tx-%d",(char *)(& (np->dev)->name),i - np->num_rx_rings);
    #line 6018 
    i ++;
  }
  #line 6025 
  return;
}

#line 6028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_request_irq(struct niu *np)
{
  #line 6030 
  int i;
  #line 6030 
  int j;
  #line 6030 
  int err;
  #line 6032 
  niu_set_irq_name(np);
  #line 6034 
  err = 0;
  #line 6035 
  i = 0;
  #line 6035 
  while (np->num_ldg > i) {
    {
      #line 6036 
      struct niu_ldg *lp = & np->ldg[i];
      #line 6038 
      err = cif_request_irq(lp->irq,& niu_interrupt,128UL,(char *)(& np->irq_name[i]),(void *)lp);
      #line 6040 
      if (err != 0) 
                    #line 6041 
                    goto out_free_irqs;
    }
    #line 6035 
    i ++;
  }
  #line 6045 
  return 0;
  #line 6047 
  out_free_irqs: 
                 #line 6047 
  ;
  #line 6048 
  j = 0;
  #line 6048 
  while (j < i) {
    {
      #line 6049 
      struct niu_ldg *lp_0 = & np->ldg[j];
      #line 6051 
      cif_free_irq(lp_0->irq,(void *)lp_0);
    }
    #line 6048 
    j ++;
  }
  #line 6053 
  return err;
}

#line 6056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_free_irq(struct niu *np)
{
  #line 6058 
  int i;
  #line 6060 
  i = 0;
  #line 6060 
  while (np->num_ldg > i) {
    {
      #line 6061 
      struct niu_ldg *lp = & np->ldg[i];
      #line 6063 
      cif_free_irq(lp->irq,(void *)lp);
    }
    #line 6060 
    i ++;
  }
  #line 6065 
  return;
}

#line 6067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_enable_napi(struct niu *np)
{
  #line 6069 
  int i;
  #line 6071 
  i = 0;
  #line 6071 
  while (np->num_ldg > i) {
    #line 6072 
    napi_enable(& np->ldg[i].napi);
    #line 6071 
    i ++;
  }
  #line 6073 
  return;
}

#line 6075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_disable_napi(struct niu *np)
{
  #line 6077 
  int i;
  #line 6079 
  i = 0;
  #line 6079 
  while (np->num_ldg > i) {
    #line 6080 
    napi_disable(& np->ldg[i].napi);
    #line 6079 
    i ++;
  }
  #line 6081 
  return;
}

#line 6083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_open(struct net_device *dev)
{
  #line 6086 
  int err;
  #line 6085 
  struct niu *np = netdev_priv(dev);
  #line 6088 
  netif_carrier_off(dev);
  #line 6090 
  err = niu_alloc_channels(np);
  #line 6091 
  if (err != 0) 
                #line 6092 
                goto out_err;
  #line 6094 
  err = niu_enable_interrupts(np,0);
  #line 6095 
  if (err != 0) 
                #line 6096 
                goto out_free_channels;
  #line 6098 
  err = niu_request_irq(np);
  #line 6099 
  if (err != 0) 
                #line 6100 
                goto out_free_channels;
  #line 6102 
  niu_enable_napi(np);
  #line 6104 
  cif_spin_lock_irq_lock_of_niu(& np->lock);
  #line 6106 
  err = niu_init_hw(np);
  #line 6107 
  if (err == 0) {
    {
      #line 6108 
      struct lock_class_key __key;
      #line 6108 
      init_timer_key(& np->timer,& niu_timer,0U,(char *)"(&np->timer)",& __key);
    }
    #line 6109 
    np->timer.expires = jiffies + 250UL;
    #line 6111 
    err = niu_enable_interrupts(np,1);
    #line 6112 
    if (err != 0) 
                  #line 6113 
                  niu_stop_hw(np);
  }
  #line 6116 
  cif_spin_unlock_irq_lock_of_niu(& np->lock);
  #line 6118 
  if (err != 0) {
    #line 6119 
    niu_disable_napi(np);
    #line 6120 
    goto out_free_irq;
  }
  #line 6123 
  netif_tx_start_all_queues(dev);
  #line 6125 
  if ((unsigned int)np->link_config.loopback_mode != 0U) 
                                                         #line 6126 
                                                         netif_carrier_on(dev);
  #line 6128 
  add_timer(& np->timer);
  #line 6130 
  return 0;
  #line 6132 
  out_free_irq: 
                #line 6132 
  ;
  #line 6133 
  niu_free_irq(np);
  #line 6135 
  out_free_channels: 
                     #line 6135 
  ;
  #line 6136 
  niu_free_channels(np);
  #line 6138 
  out_err: 
           #line 6138 
  ;
  #line 6139 
  return err;
}

#line 6142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_full_shutdown(struct niu *np, struct net_device *dev)
{
  #line 6144 
  cancel_work_sync(& np->reset_task);
  #line 6146 
  niu_disable_napi(np);
  #line 6147 
  netif_tx_stop_all_queues(dev);
  #line 6149 
  cif_del_timer_sync(& np->timer);
  #line 6151 
  cif_spin_lock_irq_lock_of_niu(& np->lock);
  #line 6153 
  niu_stop_hw(np);
  #line 6155 
  cif_spin_unlock_irq_lock_of_niu(& np->lock);
  #line 6156 
  return;
}

#line 6158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_close(struct net_device *dev)
{
  #line 6160 
  struct niu *np = netdev_priv(dev);
  #line 6162 
  niu_full_shutdown(np,dev);
  #line 6164 
  niu_free_irq(np);
  #line 6166 
  niu_free_channels(np);
  #line 6168 
  niu_handle_led(np,0);
  #line 6170 
  return 0;
}

#line 6173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_sync_xmac_stats(struct niu *np)
{
  #line 6175 
  struct niu_xmac_stats *mp = & np->mac_stats.xmac;
  #line 6177 
  mp->tx_frames += readq(np->mac_regs + 368UL);
  #line 6178 
  mp->tx_bytes += readq(np->mac_regs + 376UL);
  #line 6180 
  mp->rx_link_faults += readq(np->mac_regs + 384UL);
  #line 6181 
  mp->rx_align_errors += readq(np->mac_regs + 360UL);
  #line 6182 
  mp->rx_frags += readq(np->mac_regs + 280UL);
  #line 6183 
  mp->rx_mcasts += readq(np->mac_regs + 272UL);
  #line 6184 
  mp->rx_bcasts += readq(np->mac_regs + 264UL);
  #line 6185 
  mp->rx_hist_cnt1 += readq(np->mac_regs + 288UL);
  #line 6186 
  mp->rx_hist_cnt2 += readq(np->mac_regs + 296UL);
  #line 6187 
  mp->rx_hist_cnt3 += readq(np->mac_regs + 304UL);
  #line 6188 
  mp->rx_hist_cnt4 += readq(np->mac_regs + 312UL);
  #line 6189 
  mp->rx_hist_cnt5 += readq(np->mac_regs + 320UL);
  #line 6190 
  mp->rx_hist_cnt6 += readq(np->mac_regs + 328UL);
  #line 6191 
  mp->rx_hist_cnt7 += readq(np->mac_regs + 392UL);
  #line 6192 
  mp->rx_octets += readq(np->mac_regs + 256UL);
  #line 6193 
  mp->rx_code_violations += readq(np->mac_regs + 352UL);
  #line 6194 
  mp->rx_len_errors += readq(np->mac_regs + 336UL);
  #line 6195 
  mp->rx_crc_errors += readq(np->mac_regs + 344UL);
  #line 6196 
  return;
}

#line 6198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_sync_bmac_stats(struct niu *np)
{
  #line 6200 
  struct niu_bmac_stats *mp = & np->mac_stats.bmac;
  #line 6202 
  mp->tx_bytes += readq(np->mac_regs + 1096UL);
  #line 6203 
  mp->tx_frames += readq(np->mac_regs + 1104UL);
  #line 6205 
  mp->rx_frames += readq(np->mac_regs + 880U);
  #line 6206 
  mp->rx_align_errors += readq(np->mac_regs + 896U);
  #line 6207 
  mp->rx_crc_errors += readq(np->mac_regs + 896U);
  #line 6208 
  mp->rx_len_errors += readq(np->mac_regs + 912U);
  #line 6209 
  return;
}

#line 6211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_sync_mac_stats(struct niu *np)
{
  #line 6213 
  if ((np->flags & 65536U) != 0U) 
                                  #line 6214 
                                  niu_sync_xmac_stats(np); else 
                                                                #line 6216 
                                                                niu_sync_bmac_stats(np);
  #line 6217 
  return;
}

#line 6219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_rx_stats(struct niu *np, struct rtnl_link_stats64 *stats)
{
  #line 6229 
  union __anonunion___u_965 __u;
  #line 6222 
  u64 pkts;
  #line 6222 
  u64 dropped;
  #line 6222 
  u64 errors;
  #line 6222 
  u64 bytes;
  #line 6223 
  struct rx_ring_info *rx_rings;
  #line 6224 
  int i;
  #line 6226 
  bytes = 0ULL;
  #line 6226 
  errors = bytes;
  #line 6226 
  dropped = errors;
  #line 6226 
  pkts = dropped;
  #line 6228 
  __read_once_size((void *)(& np->rx_rings),(void *)(& __u.__c),8);
  #line 6228 
  rx_rings = (__u.__val);
  #line 6229 
  if (rx_rings == (struct rx_ring_info *)0) 
                                            #line 6230 
                                            goto no_rings;
  #line 6232 
  i = 0;
  #line 6232 
  while (np->num_rx_rings > i) {
    {
      #line 6233 
      struct rx_ring_info *rp = rx_rings + (unsigned long)i;
      #line 6235 
      niu_sync_rx_discard_stats(np,rp,0);
      #line 6237 
      pkts = rp->rx_packets + pkts;
      #line 6238 
      bytes = rp->rx_bytes + bytes;
      #line 6239 
      dropped = rp->rx_dropped + dropped;
      #line 6240 
      errors = rp->rx_errors + errors;
    }
    #line 6232 
    i ++;
  }
  #line 6243 
  no_rings: 
            #line 6243 
  ;
  #line 6244 
  stats->rx_packets = pkts;
  #line 6245 
  stats->rx_bytes = bytes;
  #line 6246 
  stats->rx_dropped = dropped;
  #line 6247 
  stats->rx_errors = errors;
  #line 6248 
  return;
}

#line 6250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_tx_stats(struct niu *np, struct rtnl_link_stats64 *stats)
{
  #line 6260 
  union __anonunion___u_967 __u;
  #line 6253 
  u64 pkts;
  #line 6253 
  u64 errors;
  #line 6253 
  u64 bytes;
  #line 6254 
  struct tx_ring_info *tx_rings;
  #line 6255 
  int i;
  #line 6257 
  bytes = 0ULL;
  #line 6257 
  errors = bytes;
  #line 6257 
  pkts = errors;
  #line 6259 
  __read_once_size((void *)(& np->tx_rings),(void *)(& __u.__c),8);
  #line 6259 
  tx_rings = (__u.__val);
  #line 6260 
  if (tx_rings == (struct tx_ring_info *)0) 
                                            #line 6261 
                                            goto no_rings;
  #line 6263 
  i = 0;
  #line 6263 
  while (np->num_tx_rings > i) {
    {
      #line 6264 
      struct tx_ring_info *rp = tx_rings + (unsigned long)i;
      #line 6266 
      pkts = rp->tx_packets + pkts;
      #line 6267 
      bytes = rp->tx_bytes + bytes;
      #line 6268 
      errors = rp->tx_errors + errors;
    }
    #line 6263 
    i ++;
  }
  #line 6271 
  no_rings: 
            #line 6271 
  ;
  #line 6272 
  stats->tx_packets = pkts;
  #line 6273 
  stats->tx_bytes = bytes;
  #line 6274 
  stats->tx_errors = errors;
  #line 6275 
  return;
}

#line 6277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  #line 6280 
  struct niu *np = netdev_priv(dev);
  #line 6282 
  if ((int)netif_running(dev) != 0) {
    #line 6283 
    niu_get_rx_stats(np,stats);
    #line 6284 
    niu_get_tx_stats(np,stats);
  }
  #line 6286 
  return;
}

#line 6288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_load_hash_xmac(struct niu *np, u16 *hash)
{
  #line 6290 
  int i;
  #line 6292 
  i = 0;
  #line 6292 
  while (i <= 15) {
    #line 6293 
    writeq((unsigned long long)*(hash + (unsigned long)i),np->mac_regs + ((unsigned long)i + 264UL) * 8UL);
    #line 6292 
    i ++;
  }
  #line 6294 
  return;
}

#line 6296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_load_hash_bmac(struct niu *np, u16 *hash)
{
  #line 6298 
  int i;
  #line 6300 
  i = 0;
  #line 6300 
  while (i <= 15) {
    #line 6301 
    writeq((unsigned long long)*(hash + (unsigned long)i),np->mac_regs + ((unsigned long)i + 88UL) * 8UL);
    #line 6300 
    i ++;
  }
  #line 6302 
  return;
}

#line 6304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_load_hash(struct niu *np, u16 *hash)
{
  #line 6306 
  if ((np->flags & 65536U) != 0U) 
                                  #line 6307 
                                  niu_load_hash_xmac(np,hash); else 
                                                                    #line 6309 
                                                                    niu_load_hash_bmac(np,hash);
  #line 6310 
  return;
}

#line 6312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_rx_mode(struct net_device *dev)
{
  #line 6315 
  int i;
  #line 6315 
  int alt_cnt;
  #line 6315 
  int err;
  #line 6316 
  struct netdev_hw_addr *ha;
  #line 6317 
  unsigned long flags;
  #line 6314 
  struct niu *np = netdev_priv(dev);
  #line 6318 
  u16 hash[16U] = {(unsigned short)0U};
  #line 6320 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 6321 
  niu_enable_rx_mac(np,0);
  #line 6323 
  np->flags &= 4291821567U;
  #line 6324 
  if ((dev->flags & 256U) != 0U) 
                                 #line 6325 
                                 np->flags |= 1048576U;
  #line 6326 
  if ((dev->flags & 512U) != 0U || dev->mc.count != 0) 
                                                       #line 6327 
                                                       np->flags |= 2097152U;
  #line 6329 
  alt_cnt = dev->uc.count;
  #line 6330 
  ;
  #line 6330 
  if (niu_num_alt_addr(np) < alt_cnt) {
    #line 6331 
    alt_cnt = 0;
    #line 6332 
    np->flags |= 1048576U;
  }
  #line 6335 
  if (alt_cnt != 0) {
    #line 6338 
    void *__mptr;
    #line 6336 
    int index = 0;
    #line 6338 
    __mptr = (void *)dev->uc.list.next;
    #line 6338 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 6338 
    while (& ha->list != & dev->uc.list) {
      #line 6338 
      void *__mptr_0;
      #line 6339 
      err = niu_set_alt_mac(np,index,(unsigned char *)(& ha->addr));
      #line 6340 
      if (err != 0) 
                    #line 6341 
                    netdev_warn(dev,(char *)"Error %d adding alt mac %d\n",err,index);
      #line 6343 
      err = niu_enable_alt_mac(np,index,1);
      #line 6344 
      if (err != 0) 
                    #line 6345 
                    netdev_warn(dev,(char *)"Error %d enabling alt mac %d\n",err,index);
      #line 6348 
      index ++;
      #line 6338 
      __mptr_0 = (void *)ha->list.next;
      #line 6338 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  else {
    #line 6351 
    int alt_start;
    #line 6352 
    if ((np->flags & 65536U) != 0U) 
                                    #line 6353 
                                    alt_start = 0; else 
                                                        #line 6355 
                                                        alt_start = 1;
    #line 6356 
    i = alt_start;
    #line 6356 
    while (1) {
      #line 6356 
      ;
      #line 6356 
      if (! (niu_num_alt_addr(np) > i)) 
                                        #line 6356 
                                        break;
      #line 6357 
      err = niu_enable_alt_mac(np,i,0);
      #line 6358 
      if (err != 0) 
                    #line 6359 
                    netdev_warn(dev,(char *)"Error %d disabling alt mac %d\n",err,i);
      #line 6356 
      i ++;
    }
  }
  #line 6363 
  if ((dev->flags & 512U) != 0U) {
    #line 6364 
    i = 0;
    #line 6364 
    while (i <= 15) {
      #line 6365 
      hash[i] = (unsigned short)65535U;
      #line 6364 
      i ++;
    }
  }
  else 
    #line 6366 
    if (dev->mc.count != 0) {
      #line 6367 
      void *__mptr_1;
      #line 6367 
      __mptr_1 = (void *)dev->mc.list.next;
      #line 6367 
      ha = ((struct netdev_hw_addr *)__mptr_1);
      #line 6367 
      while (& ha->list != & dev->mc.list) {
        #line 6367 
        void *__mptr_2;
        {
          #line 6368 
          u32 crc = crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
          #line 6370 
          crc >>= 24;
          #line 6371 
          hash[crc >> 4] = (unsigned short)((int)hash[crc >> 4] | (1 << (~ crc & 15U)));
        }
        #line 6367 
        __mptr_2 = (void *)ha->list.next;
        #line 6367 
        ha = ((struct netdev_hw_addr *)__mptr_2);
      }
    }
  #line 6375 
  if ((np->flags & 2097152U) != 0U) 
                                    #line 6376 
                                    niu_load_hash(np,(u16 *)(& hash));
  #line 6378 
  niu_enable_rx_mac(np,1);
  #line 6379 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 6380 
  return;
}

#line 6382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_mac_addr(struct net_device *dev, void *p)
{
  #line 6386 
  unsigned long flags;
  #line 6384 
  struct niu *np = netdev_priv(dev);
  #line 6385 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 6388 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 6389 
                                                      return -99;
  #line 6391 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),6UL);
  #line 6393 
  if (! netif_running(dev)) 
                            #line 6394 
                            return 0;
  #line 6396 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 6397 
  niu_enable_rx_mac(np,0);
  #line 6398 
  niu_set_primary_mac(np,dev->dev_addr);
  #line 6399 
  niu_enable_rx_mac(np,1);
  #line 6400 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 6402 
  return 0;
}

#line 6405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 6407 
  return -95;
}

#line 6410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_netif_stop(struct niu *np)
{
  #line 6412 
  netif_trans_update(np->dev);
  #line 6414 
  niu_disable_napi(np);
  #line 6416 
  netif_tx_disable(np->dev);
  #line 6417 
  return;
}

#line 6419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_netif_start(struct niu *np)
{
  #line 6425 
  netif_tx_wake_all_queues(np->dev);
  #line 6427 
  niu_enable_napi(np);
  #line 6429 
  niu_enable_interrupts(np,1);
  #line 6430 
  return;
}

#line 6432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_reset_buffers(struct niu *np)
{
  #line 6434 
  int i;
  #line 6434 
  int j;
  #line 6434 
  int k;
  #line 6434 
  int err;
  #line 6436 
  if (np->rx_rings != (struct rx_ring_info *)0) {
    #line 6437 
    i = 0;
    #line 6437 
    while (np->num_rx_rings > i) {
      {
        #line 6438 
        struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
        #line 6440 
        j = 0;
        #line 6440 
        k = 0;
        #line 6440 
        while (j <= 127) {
          {
            #line 6441 
            struct page *page;
            #line 6443 
            page = *(rp->rxhash + (unsigned long)j);
            #line 6444 
            while (page != (struct page *)0) {
              #line 6449 
              int tmp;
              #line 6445 
              struct page *next = (struct page *)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.mapping;
              #line 6447 
              u64 base = (unsigned long long)page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index;
              #line 6448 
              base >>= 12;
              #line 6449 
              tmp = k;
              #line 6449 
              k ++;
              #line 6449 
              *(rp->rbr + (unsigned long)tmp) = (unsigned int)base;
              #line 6450 
              page = next;
            }
          }
          #line 6440 
          j ++;
        }
        #line 6453 
        while (k <= 127) {
          #line 6454 
          err = niu_rbr_add_page(np,rp,2592U,k);
          #line 6455 
          if ((long)(err != 0) != 0L) 
                                      #line 6456 
                                      break;
          #line 6453 
          k ++;
        }
        #line 6459 
        rp->rbr_index = rp->rbr_table_size + 4294967295U;
        #line 6460 
        rp->rcr_index = 0U;
        #line 6461 
        rp->rbr_pending = 0U;
        #line 6462 
        rp->rbr_refill_pending = 0U;
      }
      #line 6437 
      i ++;
    }
  }
  #line 6465 
  if (np->tx_rings != (struct tx_ring_info *)0) {
    #line 6466 
    i = 0;
    #line 6466 
    while (np->num_tx_rings > i) {
      {
        #line 6467 
        struct tx_ring_info *rp_0 = np->tx_rings + (unsigned long)i;
        #line 6469 
        j = 0;
        #line 6469 
        while (j <= 255) {
          #line 6470 
          if (rp_0->tx_buffs[j].skb != (struct sk_buff *)0) 
                                                            #line 6471 
                                                            release_tx_packet(np,rp_0,j);
          #line 6469 
          j ++;
        }
        #line 6474 
        rp_0->pending = 256;
        #line 6475 
        rp_0->prod = 0;
        #line 6476 
        rp_0->cons = 0;
        #line 6477 
        rp_0->wrap_bit = 0;
      }
      #line 6466 
      i ++;
    }
  }
  #line 6480 
  return;
}

#line 6482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_reset_task(struct work_struct *work)
{
  #line 6484 
  void *__mptr;
  #line 6485 
  unsigned long flags;
  #line 6486 
  int err;
  #line 6484 
  __mptr = (void *)work;
  #line 6484 
  struct niu *np = ((struct niu *)(__mptr + 18446744073709521944U));
  #line 6488 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 6489 
  if (! netif_running(np->dev)) {
    #line 6490 
    cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
    #line 6491 
    return;
  }
  #line 6494 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 6496 
  cif_del_timer_sync(& np->timer);
  #line 6498 
  niu_netif_stop(np);
  #line 6500 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 6502 
  niu_stop_hw(np);
  #line 6504 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 6506 
  niu_reset_buffers(np);
  #line 6508 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 6510 
  err = niu_init_hw(np);
  #line 6511 
  if (err == 0) {
    #line 6512 
    np->timer.expires = jiffies + 250UL;
    #line 6513 
    add_timer(& np->timer);
    #line 6514 
    niu_netif_start(np);
  }
  #line 6517 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 6518 
  return;
}

#line 6520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_tx_timeout(struct net_device *dev)
{
  #line 6522 
  struct niu *np = netdev_priv(dev);
  #line 6524 
  _dev_err(np->device,(char *)"%s: Transmit timed out, resetting\n",(char *)(& dev->name));
  #line 6527 
  cif_schedule_work(& np->reset_task);
  #line 6528 
  return;
}

#line 6530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_txd(struct tx_ring_info *rp, int index, u64 mapping, u64 len, u64 mark, u64 n_frags)
{
  #line 6534 
  __le64 *desc = rp->descr + (unsigned long)index;
  #line 6536 
  *desc = (((n_frags << 58) | mark) | (len << 44)) | (mapping & 17592186044415ULL);
  #line 6537 
  return;
}

#line 6542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 niu_compute_tx_flags(struct sk_buff *skb, struct ethhdr *ehdr, u64 pad_bytes, u64 len)
{
  #line 6545 
  u16 eth_proto;
  #line 6545 
  u16 eth_proto_inner;
  #line 6546 
  u64 csum_bits;
  #line 6546 
  u64 l3off;
  #line 6546 
  u64 ihl;
  #line 6546 
  u64 ret;
  #line 6547 
  u8 ip_proto;
  #line 6548 
  int ipv6;
  #line 6598 
  unsigned long long tmp_5;
  #line 6599 
  unsigned long long tmp_6;
  #line 6600 
  unsigned long long tmp_7;
  #line 6550 
  eth_proto = __builtin_bswap16((unsigned short)((int)ehdr->h_proto));
  #line 6551 
  eth_proto_inner = eth_proto;
  #line 6552 
  if ((unsigned int)eth_proto == 33024U) {
    #line 6553 
    struct vlan_ethhdr *vp = (struct vlan_ethhdr *)ehdr;
    #line 6554 
    __be16 val = vp->h_vlan_encapsulated_proto;
    #line 6556 
    eth_proto_inner = __builtin_bswap16((unsigned short)((int)val));
  }
  #line 6559 
  ihl = 0ULL;
  #line 6559 
  ipv6 = 0;
  #line 6560 
  switch ((int)skb->protocol) {
    #line 6561 
    case 8: 
            #line 6561 
    ;
    #line 6562 
    ip_proto = ip_hdr(skb)->protocol;
    #line 6563 
    ihl = (unsigned long long)ip_hdr(skb)->ihl;
    #line 6564 
    break;
    #line 6565 
    case 56710: 
                #line 6565 
    ;
    #line 6566 
    ip_proto = ipv6_hdr(skb)->nexthdr;
    #line 6567 
    ihl = 10ULL;
    #line 6568 
    ipv6 = 1;
    #line 6569 
    break;
    #line 6570 
    default: 
             #line 6570 
    ;
    #line 6571 
    ihl = 0ULL;
    #line 6571 
    ip_proto = (unsigned char)0U;
    #line 6572 
    break;
  }
  #line 6575 
  csum_bits = 0ULL;
  #line 6576 
  if ((unsigned int)skb->ip_summed == 3U) {
    #line 6577 
    u64 start;
    #line 6577 
    u64 stuff;
    #line 6579 
    if ((unsigned int)ip_proto != 6U) {
      #line 6579 
      unsigned long long tmp_2;
      #line 6579 
      if ((unsigned int)ip_proto == 17U) 
                                         #line 6579 
                                         tmp_2 = 9223372036854775808ULL; else 
                                                                    #line 6579 
                                                                    tmp_2 = 13835058055282163712ULL;
      #line 6579 
      csum_bits = tmp_2;
    }
    else 
         #line 6579 
         csum_bits = 4611686018427387904ULL;
    #line 6584 
    start = ((unsigned long long)skb_checksum_start_offset(skb) - pad_bytes) + 18446744073709551600ULL;
    #line 6586 
    stuff = (unsigned long long)skb->__anonCompField_sk_buff_98.__anonCompField___anonunion_540_97.csum_offset + start;
    #line 6588 
    csum_bits = (start / 2ULL << 40) | csum_bits;
    #line 6589 
    csum_bits = (stuff / 2ULL << 32) | csum_bits;
  }
  #line 6592 
  l3off = ((unsigned long long)skb_network_offset(skb) - pad_bytes) + 18446744073709551600ULL;
  #line 6598 
  if ((unsigned int)eth_proto_inner <= 1535U) 
                                              #line 6598 
                                              tmp_5 = 144115188075855872ULL; else 
                                                                    #line 6598 
                                                                    tmp_5 = 0ULL;
  #line 6599 
  if ((unsigned int)eth_proto == 33024U) 
                                         #line 6599 
                                         tmp_6 = 72057594037927936ULL; else 
                                                                    #line 6599 
                                                                    tmp_6 = 0ULL;
  #line 6600 
  if (ipv6 != 0) 
                 #line 6600 
                 tmp_7 = 2305843009213693952ULL; else 
                                                      #line 6600 
                                                      tmp_7 = 0ULL;
  #line 6595 
  ret = ((((((pad_bytes / 2ULL | (len << 16)) | (l3off / 2ULL << 48)) | (ihl << 52)) | tmp_5) | tmp_6) | tmp_7) | csum_bits;
  #line 6604 
  return ret;
}

#line 6607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static netdev_tx_t niu_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 6611 
  unsigned long align;
  #line 6611 
  unsigned long headroom;
  #line 6612 
  struct netdev_queue *txq;
  #line 6613 
  struct tx_ring_info *rp;
  #line 6614 
  struct tx_pkt_hdr *tp;
  #line 6615 
  unsigned int len;
  #line 6615 
  unsigned int nfg;
  #line 6616 
  struct ethhdr *ehdr;
  #line 6617 
  int prod;
  #line 6617 
  int i;
  #line 6617 
  int tlen;
  #line 6618 
  u64 mapping;
  #line 6618 
  u64 mrk;
  #line 6610 
  struct niu *np = netdev_priv(dev);
  #line 6620 
  i = (int)skb_get_queue_mapping(skb);
  #line 6621 
  rp = np->tx_rings + (unsigned long)i;
  #line 6622 
  txq = netdev_get_tx_queue(dev,(unsigned int)i);
  #line 6624 
  ;
  #line 6624 
  if (niu_tx_avail(rp) <= (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1)) {
    #line 6625 
    netif_tx_stop_queue(txq);
    #line 6626 
    _dev_err(np->device,(char *)"%s: BUG! Tx ring full when queue awake!\n",(char *)(& dev->name));
    #line 6627 
    (rp->tx_errors) ++;
    #line 6628 
    return NETDEV_TX_BUSY;
  }
  #line 6631 
  if (eth_skb_pad(skb) != 0) 
                             #line 6632 
                             goto out;
  #line 6634 
  len = 31U;
  #line 6635 
  ;
  #line 6635 
  if (skb_headroom(skb) < len) {
    #line 6636 
    struct sk_buff *skb_new;
    #line 6638 
    skb_new = skb_realloc_headroom(skb,len);
    #line 6639 
    if (skb_new == (struct sk_buff *)0) 
                                        #line 6640 
                                        goto out_drop;
    #line 6641 
    kfree_skb(skb);
    #line 6642 
    skb = skb_new;
  }
  else 
       #line 6644 
       skb_orphan(skb);
  #line 6646 
  align = (unsigned long)skb->data & 15UL;
  #line 6647 
  headroom = align + 16UL;
  #line 6649 
  ehdr = (struct ethhdr *)skb->data;
  #line 6650 
  tp = (struct tx_pkt_hdr *)skb_push(skb,(unsigned int)headroom);
  #line 6652 
  len = skb->len + 4294967280U;
  #line 6653 
  tp->flags = niu_compute_tx_flags(skb,ehdr,(unsigned long long)align,(unsigned long long)len);
  #line 6654 
  tp->resv = 0ULL;
  #line 6656 
  len = skb_headlen(skb);
  #line 6657 
  mapping = (*((np->ops)->map_single))(np->device,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
  #line 6660 
  prod = rp->prod;
  #line 6662 
  rp->tx_buffs[prod].skb = skb;
  #line 6663 
  rp->tx_buffs[prod].mapping = mapping;
  #line 6665 
  mrk = 9223372036854775808ULL;
  #line 6666 
  rp->mark_counter = (u16)((int)rp->mark_counter + 1);
  #line 6666 
  ;
  #line 6666 
  if ((int)rp->mark_counter == (int)rp->mark_freq) {
    #line 6667 
    rp->mark_counter = (unsigned short)0U;
    #line 6668 
    mrk |= 4611686018427387904ULL;
    #line 6669 
    rp->mark_pending = (u16)((int)rp->mark_pending + 1);
  }
  #line 6672 
  tlen = (int)len;
  #line 6673 
  nfg = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 6674 
  while (tlen > 0) {
    #line 6675 
    tlen += -4076;
    #line 6676 
    nfg ++;
  }
  #line 6679 
  while (len != 0U) {
    #line 6680 
    unsigned int this_len = len;
    #line 6682 
    if (this_len > 4076U) 
                          #line 6683 
                          this_len = 4076U;
    #line 6685 
    niu_set_txd(rp,prod,mapping,(unsigned long long)this_len,mrk,(unsigned long long)nfg);
    #line 6686 
    nfg = 0U;
    #line 6686 
    mrk = 0ULL;
    #line 6688 
    if (prod + 1 < rp->pending) 
                                #line 6688 
                                prod ++; else 
                                              #line 6688 
                                              prod = 0;
    #line 6689 
    mapping = (unsigned long long)this_len + mapping;
    #line 6690 
    len -= this_len;
  }
  #line 6693 
  i = 0;
  #line 6693 
  while (1) {
    #line 6693 
    ;
    #line 6693 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 6693 
      break;
    {
      #line 6694 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 6696 
      len = skb_frag_size(frag);
      #line 6697 
      ;
      #line 6697 
      ;
      #line 6697 
      mapping = (*((np->ops)->map_page))(np->device,skb_frag_page(frag),(unsigned long)skb_frag_off(frag),(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 6701 
      rp->tx_buffs[prod].skb = (struct sk_buff *)0;
      #line 6702 
      rp->tx_buffs[prod].mapping = mapping;
      #line 6704 
      niu_set_txd(rp,prod,mapping,(unsigned long long)len,0ULL,0ULL);
      #line 6706 
      if (prod + 1 < rp->pending) 
                                  #line 6706 
                                  prod ++; else 
                                                #line 6706 
                                                prod = 0;
    }
    #line 6693 
    i ++;
  }
  #line 6709 
  if (rp->prod > prod) 
                       #line 6710 
                       rp->wrap_bit ^= 524288;
  #line 6711 
  rp->prod = prod;
  #line 6713 
  writeq((unsigned long long)(rp->wrap_bit | (prod << 3)),np->regs + ((unsigned long)rp->tx_channel * 512UL + 6553624UL));
  #line 6715 
  if ((long)(niu_tx_avail(rp) <= 18U) != 0L) {
    #line 6716 
    netif_tx_stop_queue(txq);
    #line 6717 
    ;
    #line 6717 
    if (niu_tx_avail(rp) > (unsigned int)(rp->pending / 4)) 
                                                            #line 6718 
                                                            netif_tx_wake_queue(txq);
  }
  #line 6721 
  out: 
       #line 6721 
  ;
  #line 6722 
  return NETDEV_TX_OK;
  #line 6724 
  out_drop: 
            #line 6724 
  ;
  #line 6725 
  (rp->tx_errors) ++;
  #line 6726 
  kfree_skb(skb);
  #line 6727 
  goto out;
}

#line 6730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 6733 
  int err;
  #line 6733 
  int orig_jumbo;
  #line 6733 
  int new_jumbo;
  #line 6732 
  struct niu *np = netdev_priv(dev);
  #line 6735 
  orig_jumbo = dev->mtu > 1500U;
  #line 6736 
  new_jumbo = new_mtu > 1500;
  #line 6738 
  dev->mtu = (unsigned int)new_mtu;
  #line 6740 
  if (netif_running(dev)) {
    #line 6740 
    if (orig_jumbo == new_jumbo) 
                                 #line 6742 
                                 return 0;
  }
  else 
       #line 6742 
       return 0;
  #line 6744 
  niu_full_shutdown(np,dev);
  #line 6746 
  niu_free_channels(np);
  #line 6748 
  niu_enable_napi(np);
  #line 6750 
  err = niu_alloc_channels(np);
  #line 6751 
  if (err != 0) 
                #line 6752 
                return err;
  #line 6754 
  cif_spin_lock_irq_lock_of_niu(& np->lock);
  #line 6756 
  err = niu_init_hw(np);
  #line 6757 
  if (err == 0) {
    {
      #line 6758 
      struct lock_class_key __key;
      #line 6758 
      init_timer_key(& np->timer,& niu_timer,0U,(char *)"(&np->timer)",& __key);
    }
    #line 6759 
    np->timer.expires = jiffies + 250UL;
    #line 6761 
    err = niu_enable_interrupts(np,1);
    #line 6762 
    if (err != 0) 
                  #line 6763 
                  niu_stop_hw(np);
  }
  #line 6766 
  cif_spin_unlock_irq_lock_of_niu(& np->lock);
  #line 6768 
  if (err == 0) {
    #line 6769 
    netif_tx_start_all_queues(dev);
    #line 6770 
    if ((unsigned int)np->link_config.loopback_mode != 0U) 
                                                           #line 6771 
                                                           netif_carrier_on(dev);
    #line 6773 
    add_timer(& np->timer);
  }
  #line 6776 
  return err;
}

#line 6779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 6782 
  struct niu *np = netdev_priv(dev);
  #line 6783 
  struct niu_vpd *vpd = & np->vpd;
  #line 6785 
  strlcpy((char *)(& info->driver),(char *)"niu",32UL);
  #line 6786 
  strlcpy((char *)(& info->version),(char *)"1.1",32UL);
  #line 6787 
  snprintf((char *)(& info->fw_version),32UL,(char *)"%d.%d",vpd->fcode_major,vpd->fcode_minor);
  #line 6789 
  if ((unsigned int)(np->parent)->plat_type != 2U) {
    #line 6790 
    ;
    #line 6790 
    strlcpy((char *)(& info->bus_info),pci_name(np->pdev),32UL);
  }
  #line 6791 
  return;
}

#line 6794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 6798 
  struct niu_link_config *lp;
  #line 6797 
  struct niu *np = netdev_priv(dev);
  #line 6800 
  lp = & np->link_config;
  #line 6802 
  memset((void *)cmd,0,96UL);
  #line 6803 
  cmd->base.phy_address = (unsigned char)np->phy_addr;
  #line 6804 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),lp->supported);
  #line 6806 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),lp->active_advertising);
  #line 6808 
  cmd->base.autoneg = lp->active_autoneg;
  #line 6809 
  cmd->base.speed = (unsigned int)lp->active_speed;
  #line 6810 
  cmd->base.duplex = lp->active_duplex;
  #line 6811 
  if ((np->flags & 131072U) != 0U) 
                                   #line 6811 
                                   cmd->base.port = (unsigned char)3U; else 
                                                                    #line 6811 
                                                                    cmd->base.port = (unsigned char)0U;
  #line 6813 
  return 0;
}

#line 6816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 6819 
  struct niu *np = netdev_priv(dev);
  #line 6820 
  struct niu_link_config *lp = & np->link_config;
  #line 6822 
  ethtool_convert_link_mode_to_legacy_u32(& lp->advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 6824 
  lp->speed = (unsigned short)cmd->base.speed;
  #line 6825 
  lp->duplex = cmd->base.duplex;
  #line 6826 
  lp->autoneg = cmd->base.autoneg;
  #line 6827 
  return niu_init_link(np);
}

#line 6830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u32 niu_get_msglevel(struct net_device *dev)
{
  #line 6832 
  struct niu *np = netdev_priv(dev);
  #line 6833 
  return np->msg_enable;
}

#line 6836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_msglevel(struct net_device *dev, u32 value)
{
  #line 6838 
  struct niu *np = netdev_priv(dev);
  #line 6839 
  np->msg_enable = value;
  #line 6840 
  return;
}

#line 6842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_nway_reset(struct net_device *dev)
{
  #line 6844 
  struct niu *np = netdev_priv(dev);
  #line 6846 
  if ((unsigned int)np->link_config.autoneg != 0U) {
    #line 6847 
    return niu_init_link(np);
  }
  #line 6849 
  return 0;
}

#line 6852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_eeprom_len(struct net_device *dev)
{
  #line 6854 
  struct niu *np = netdev_priv(dev);
  #line 6856 
  return (int)np->eeprom_len;
}

#line 6859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 6863 
  u32 offset;
  #line 6863 
  u32 len;
  #line 6863 
  u32 val;
  #line 6862 
  struct niu *np = netdev_priv(dev);
  #line 6865 
  offset = eeprom->offset;
  #line 6866 
  len = eeprom->len;
  #line 6868 
  if (offset + len < offset) 
                             #line 6869 
                             return -22;
  #line 6870 
  if (np->eeprom_len <= offset) 
                                #line 6871 
                                return -22;
  #line 6872 
  if (offset + len > np->eeprom_len) {
    #line 6873 
    eeprom->len = (np->eeprom_len - offset);
    #line 6873 
    len = (np->eeprom_len - offset);
  }
  #line 6875 
  if ((offset & 3U) != 0U) {
    #line 6876 
    u32 b_offset;
    #line 6876 
    u32 b_count;
    #line 6878 
    b_offset = offset & 3U;
    #line 6879 
    b_count = 4U - b_offset;
    #line 6880 
    if (b_count > len) 
                       #line 6881 
                       b_count = len;
    #line 6883 
    val = (unsigned int)readq(np->regs + ((unsigned long)((offset - b_offset) / 4U) + 1671172UL) * 8UL);
    #line 6884 
    memcpy((void *)data,(void *)((char *)(& val) + (unsigned long)b_offset),(unsigned long)b_count);
    #line 6885 
    data += (unsigned long)b_count;
    #line 6886 
    len -= b_count;
    #line 6887 
    offset += b_count;
  }
  #line 6889 
  while (len > 3U) {
    #line 6890 
    val = (unsigned int)readq(np->regs + ((unsigned long)(offset / 4U) + 1671172UL) * 8UL);
    #line 6891 
    memcpy((void *)data,(void *)(& val),4UL);
    #line 6892 
    data += 4U;
    #line 6893 
    len += 4294967292U;
    #line 6894 
    offset += 4U;
  }
  #line 6896 
  if (len != 0U) {
    #line 6897 
    val = (unsigned int)readq(np->regs + ((unsigned long)(offset / 4U) + 1671172UL) * 8UL);
    #line 6898 
    memcpy((void *)data,(void *)(& val),(unsigned long)len);
  }
  #line 6900 
  return 0;
}

#line 6903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_ethflow_to_l3proto(int flow_type, u8 *pid)
{
  #line 6905 
  switch (flow_type) {
    #line 6906 
    case 1: 
            #line 6906 
    ;
    #line 6907 
    case 5: 
            #line 6907 
    ;
    #line 6908 
    *pid = (unsigned char)6U;
    #line 6909 
    break;
    #line 6910 
    case 2: 
            #line 6910 
    ;
    #line 6911 
    case 6: 
            #line 6911 
    ;
    #line 6912 
    *pid = (unsigned char)17U;
    #line 6913 
    break;
    #line 6914 
    case 3: 
            #line 6914 
    ;
    #line 6915 
    case 7: 
            #line 6915 
    ;
    #line 6916 
    *pid = (unsigned char)132U;
    #line 6917 
    break;
    #line 6918 
    case 9: 
            #line 6918 
    ;
    #line 6919 
    case 11: 
             #line 6919 
    ;
    #line 6920 
    *pid = (unsigned char)51U;
    #line 6921 
    break;
    #line 6922 
    case 10: 
             #line 6922 
    ;
    #line 6923 
    case 12: 
             #line 6923 
    ;
    #line 6924 
    *pid = (unsigned char)50U;
    #line 6925 
    break;
    #line 6926 
    default: 
             #line 6926 
    ;
    #line 6927 
    *pid = (unsigned char)0U;
    #line 6928 
    break;
  }
  #line 6930 
  return;
}

#line 6932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_class_to_ethflow(u64 class, int *flow_type)
{
  #line 6934 
  switch (class) {
    #line 6935 
    case (u64)8: 
                 #line 6935 
    ;
    #line 6936 
    *flow_type = 1;
    #line 6937 
    break;
    #line 6938 
    case (u64)9: 
                 #line 6938 
    ;
    #line 6939 
    *flow_type = 2;
    #line 6940 
    break;
    #line 6941 
    case (u64)10: 
                  #line 6941 
    ;
    #line 6942 
    *flow_type = 9;
    #line 6943 
    break;
    #line 6944 
    case (u64)11: 
                  #line 6944 
    ;
    #line 6945 
    *flow_type = 3;
    #line 6946 
    break;
    #line 6947 
    case (u64)12: 
                  #line 6947 
    ;
    #line 6948 
    *flow_type = 5;
    #line 6949 
    break;
    #line 6950 
    case (u64)13: 
                  #line 6950 
    ;
    #line 6951 
    *flow_type = 6;
    #line 6952 
    break;
    #line 6953 
    case (u64)14: 
                  #line 6953 
    ;
    #line 6954 
    *flow_type = 11;
    #line 6955 
    break;
    #line 6956 
    case (u64)15: 
                  #line 6956 
    ;
    #line 6957 
    *flow_type = 7;
    #line 6958 
    break;
    #line 6959 
    case (u64)4: 
                 #line 6959 
    ;
    #line 6960 
    case (u64)5: 
                 #line 6960 
    ;
    #line 6961 
    case (u64)6: 
                 #line 6961 
    ;
    #line 6962 
    case (u64)7: 
                 #line 6962 
    ;
    #line 6963 
    *flow_type = 13;
    #line 6964 
    break;
    #line 6965 
    default: 
             #line 6965 
    ;
    #line 6966 
    return -22;
  }
  #line 6969 
  return 0;
}

#line 6972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ethflow_to_class(int flow_type, u64 *class)
{
  #line 6974 
  switch (flow_type) {
    #line 6975 
    case 1: 
            #line 6975 
    ;
    #line 6976 
    *class = 8ULL;
    #line 6977 
    break;
    #line 6978 
    case 2: 
            #line 6978 
    ;
    #line 6979 
    *class = 9ULL;
    #line 6980 
    break;
    #line 6981 
    case 4: 
            #line 6981 
    ;
    #line 6982 
    case 9: 
            #line 6982 
    ;
    #line 6983 
    case 10: 
             #line 6983 
    ;
    #line 6984 
    *class = 10ULL;
    #line 6985 
    break;
    #line 6986 
    case 3: 
            #line 6986 
    ;
    #line 6987 
    *class = 11ULL;
    #line 6988 
    break;
    #line 6989 
    case 5: 
            #line 6989 
    ;
    #line 6990 
    *class = 12ULL;
    #line 6991 
    break;
    #line 6992 
    case 6: 
            #line 6992 
    ;
    #line 6993 
    *class = 13ULL;
    #line 6994 
    break;
    #line 6995 
    case 8: 
            #line 6995 
    ;
    #line 6996 
    case 11: 
             #line 6996 
    ;
    #line 6997 
    case 12: 
             #line 6997 
    ;
    #line 6998 
    *class = 14ULL;
    #line 6999 
    break;
    #line 7000 
    case 7: 
            #line 7000 
    ;
    #line 7001 
    *class = 15ULL;
    #line 7002 
    break;
    #line 7003 
    default: 
             #line 7003 
    ;
    #line 7004 
    return 0;
  }
  #line 7007 
  return 1;
}

#line 7010  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 niu_flowkey_to_ethflow(u64 flow_key)
{
  #line 7012 
  u64 ethflow = 0ULL;
  #line 7014 
  if ((flow_key & 256ULL) != 0ULL) 
                                   #line 7015 
                                   ethflow |= 2ULL;
  #line 7016 
  if ((flow_key & 128ULL) != 0ULL) 
                                   #line 7017 
                                   ethflow |= 4ULL;
  #line 7018 
  if ((flow_key & 64ULL) != 0ULL) 
                                  #line 7019 
                                  ethflow |= 16ULL;
  #line 7020 
  if ((flow_key & 32ULL) != 0ULL) 
                                  #line 7021 
                                  ethflow |= 32ULL;
  #line 7022 
  if ((flow_key & 16ULL) != 0ULL) 
                                  #line 7023 
                                  ethflow |= 8ULL;
  #line 7024 
  if ((flow_key & 8ULL) != 0ULL) 
                                 #line 7025 
                                 ethflow |= 64ULL;
  #line 7026 
  if ((flow_key & 2ULL) != 0ULL) 
                                 #line 7027 
                                 ethflow |= 128ULL;
  #line 7029 
  return ethflow;
}

#line 7033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ethflow_to_flowkey(u64 ethflow, u64 *flow_key)
{
  #line 7035 
  u64 key = 0ULL;
  #line 7037 
  if ((ethflow & 2ULL) != 0ULL) 
                                #line 7038 
                                key |= 256ULL;
  #line 7039 
  if ((ethflow & 4ULL) != 0ULL) 
                                #line 7040 
                                key |= 128ULL;
  #line 7041 
  if ((ethflow & 16ULL) != 0ULL) 
                                 #line 7042 
                                 key |= 64ULL;
  #line 7043 
  if ((ethflow & 32ULL) != 0ULL) 
                                 #line 7044 
                                 key |= 32ULL;
  #line 7045 
  if ((ethflow & 8ULL) != 0ULL) 
                                #line 7046 
                                key |= 16ULL;
  #line 7047 
  if ((ethflow & 64ULL) != 0ULL) 
                                 #line 7048 
                                 key |= 8ULL;
  #line 7049 
  if ((ethflow & 128ULL) != 0ULL) 
                                  #line 7050 
                                  key |= 2ULL;
  #line 7052 
  *flow_key = key;
  #line 7054 
  return 1;
}

#line 7058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_hash_opts(struct niu *np, struct ethtool_rxnfc *nfc)
{
  #line 7060 
  u64 class;
  #line 7062 
  nfc->data = 0ULL;
  #line 7064 
  if (niu_ethflow_to_class((int)nfc->flow_type,& class) == 0) 
                                                              #line 7065 
                                                              return -22;
  #line 7067 
  if (((np->parent)->tcam_key[class + 18446744073709551612ULL] & 8ULL) != 0ULL) 
    #line 7069 
    nfc->data = 18446744071562067968ULL; else 
                                              #line 7071 
                                              nfc->data = niu_flowkey_to_ethflow((np->parent)->flow_key[class + 18446744073709551612ULL]);
  #line 7073 
  return 0;
}

#line 7076  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_ip4fs_from_tcam_key(struct niu_tcam_entry *tp, struct ethtool_rx_flow_spec *fsp)
{
  #line 7079 
  u32 tmp;
  #line 7080 
  u16 prt;
  #line 7082 
  tmp = (unsigned int)(tp->key[3] >> 32);
  #line 7083 
  fsp->h_u.tcp_ip4_spec.ip4src = __builtin_bswap32(tmp);
  #line 7085 
  tmp = (unsigned int)tp->key[3];
  #line 7086 
  fsp->h_u.tcp_ip4_spec.ip4dst = __builtin_bswap32(tmp);
  #line 7088 
  tmp = (unsigned int)(tp->key_mask[3] >> 32);
  #line 7089 
  fsp->m_u.tcp_ip4_spec.ip4src = __builtin_bswap32(tmp);
  #line 7091 
  tmp = (unsigned int)tp->key_mask[3];
  #line 7092 
  fsp->m_u.tcp_ip4_spec.ip4dst = __builtin_bswap32(tmp);
  #line 7094 
  fsp->h_u.tcp_ip4_spec.tos = (unsigned char)(tp->key[2] >> 40);
  #line 7096 
  fsp->m_u.tcp_ip4_spec.tos = (unsigned char)(tp->key_mask[2] >> 40);
  #line 7099 
  switch (fsp->flow_type) {
    #line 7100 
    case (__u32)1: 
                   #line 7100 
    ;
    #line 7101 
    case (__u32)2: 
                   #line 7101 
    ;
    #line 7102 
    case (__u32)3: 
                   #line 7102 
    ;
    #line 7103 
    prt = (unsigned short)(tp->key[2] >> 16);
    #line 7105 
    fsp->h_u.tcp_ip4_spec.psrc = __builtin_bswap16((unsigned short)((int)prt));
    #line 7107 
    prt = (unsigned short)tp->key[2];
    #line 7109 
    fsp->h_u.tcp_ip4_spec.pdst = __builtin_bswap16((unsigned short)((int)prt));
    #line 7111 
    prt = (unsigned short)(tp->key_mask[2] >> 16);
    #line 7113 
    fsp->m_u.tcp_ip4_spec.psrc = __builtin_bswap16((unsigned short)((int)prt));
    #line 7115 
    prt = (unsigned short)tp->key_mask[2];
    #line 7117 
    fsp->m_u.tcp_ip4_spec.pdst = __builtin_bswap16((unsigned short)((int)prt));
    #line 7118 
    break;
    #line 7119 
    case (__u32)9: 
                   #line 7119 
    ;
    #line 7120 
    case (__u32)10: 
                    #line 7120 
    ;
    #line 7121 
    tmp = (unsigned int)tp->key[2];
    #line 7123 
    fsp->h_u.ah_ip4_spec.spi = __builtin_bswap32(tmp);
    #line 7125 
    tmp = (unsigned int)tp->key_mask[2];
    #line 7127 
    fsp->m_u.ah_ip4_spec.spi = __builtin_bswap32(tmp);
    #line 7128 
    break;
    #line 7129 
    case (__u32)13: 
                    #line 7129 
    ;
    #line 7130 
    tmp = (unsigned int)tp->key[2];
    #line 7132 
    fsp->h_u.usr_ip4_spec.l4_4_bytes = __builtin_bswap32(tmp);
    #line 7134 
    tmp = (unsigned int)tp->key_mask[2];
    #line 7136 
    fsp->m_u.usr_ip4_spec.l4_4_bytes = __builtin_bswap32(tmp);
    #line 7138 
    fsp->h_u.usr_ip4_spec.proto = (unsigned char)(tp->key[2] >> 32);
    #line 7141 
    fsp->m_u.usr_ip4_spec.proto = (unsigned char)(tp->key_mask[2] >> 32);
    #line 7145 
    fsp->h_u.usr_ip4_spec.ip_ver = (unsigned char)1U;
    #line 7146 
    break;
    #line 7147 
    default: 
             #line 7147 
    ;
    #line 7148 
    break;
  }
  #line 7150 
  return;
}

#line 7152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_ethtool_tcam_entry(struct niu *np, struct ethtool_rxnfc *nfc)
{
  #line 7156 
  struct niu_tcam_entry *tp;
  #line 7158 
  u16 idx;
  #line 7159 
  u64 class;
  #line 7155 
  struct niu_parent *parent = np->parent;
  #line 7157 
  struct ethtool_rx_flow_spec *fsp = & nfc->fs;
  #line 7160 
  int ret = 0;
  #line 7162 
  idx = tcam_get_index(np,(unsigned short)((int)((unsigned short)nfc->fs.location)));
  #line 7164 
  tp = & parent->tcam[(int)idx];
  #line 7165 
  if ((unsigned int)tp->valid == 0U) {
    #line 7166 
    netdev_info(np->dev,(char *)"niu%d: entry [%d] invalid for idx[%d]\n",parent->index,(int)((unsigned short)nfc->fs.location),(int)idx);
    #line 7168 
    return -22;
  }
  #line 7172 
  class = (tp->key[0] >> 3) & 31ULL;
  #line 7174 
  ret = niu_class_to_ethflow(class,(int *)(& fsp->flow_type));
  #line 7175 
  if (ret < 0) {
    #line 7176 
    netdev_info(np->dev,(char *)"niu%d: niu_class_to_ethflow failed\n",parent->index);
    #line 7178 
    goto out;
  }
  #line 7181 
  if (fsp->flow_type == 9U || fsp->flow_type == 11U) {
    #line 7182 
    u32 proto = (unsigned int)(tp->key[2] >> 32) & 255U;
    #line 7184 
    if (proto == 50U) 
      #line 7185 
      if (fsp->flow_type == 9U) 
                                #line 7186 
                                fsp->flow_type = 10U; else 
                                                           #line 7188 
                                                           fsp->flow_type = 12U;
  }
  #line 7192 
  switch (fsp->flow_type) {
    #line 7193 
    case (__u32)1: 
                   #line 7193 
    ;
    #line 7194 
    case (__u32)2: 
                   #line 7194 
    ;
    #line 7195 
    case (__u32)3: 
                   #line 7195 
    ;
    #line 7196 
    case (__u32)9: 
                   #line 7196 
    ;
    #line 7197 
    case (__u32)10: 
                    #line 7197 
    ;
    #line 7198 
    niu_get_ip4fs_from_tcam_key(tp,fsp);
    #line 7199 
    break;
    #line 7200 
    case (__u32)5: 
                   #line 7200 
    ;
    #line 7201 
    case (__u32)6: 
                   #line 7201 
    ;
    #line 7202 
    case (__u32)7: 
                   #line 7202 
    ;
    #line 7203 
    case (__u32)11: 
                    #line 7203 
    ;
    #line 7204 
    case (__u32)12: 
                    #line 7204 
    ;
    #line 7206 
    ret = -22;
    #line 7207 
    break;
    #line 7208 
    case (__u32)13: 
                    #line 7208 
    ;
    #line 7209 
    niu_get_ip4fs_from_tcam_key(tp,fsp);
    #line 7210 
    break;
    #line 7211 
    default: 
             #line 7211 
    ;
    #line 7212 
    ret = -22;
    #line 7213 
    break;
  }
  #line 7216 
  if (ret < 0) 
               #line 7217 
               goto out;
  #line 7219 
  if ((tp->assoc_data & 4096ULL) != 0ULL) 
                                          #line 7220 
                                          fsp->ring_cookie = 18446744073709551615ULL; else 
                                                                    #line 7222 
                                                                    fsp->ring_cookie = (tp->assoc_data >> 2) & 31ULL;
  #line 7226 
  nfc->data = (unsigned long long)tcam_get_size(np);
  #line 7227 
  out: 
       #line 7227 
  ;
  #line 7228 
  return ret;
}

#line 7231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_ethtool_tcam_all(struct niu *np, struct ethtool_rxnfc *nfc, u32 *rule_locs)
{
  #line 7236 
  struct niu_tcam_entry *tp;
  #line 7237 
  int i;
  #line 7237 
  int idx;
  #line 7237 
  int cnt;
  #line 7238 
  unsigned long flags;
  #line 7235 
  struct niu_parent *parent = np->parent;
  #line 7239 
  int ret = 0;
  #line 7242 
  nfc->data = (unsigned long long)tcam_get_size(np);
  #line 7244 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 7245 
  cnt = 0;
  #line 7245 
  i = 0;
  #line 7245 
  while ((unsigned long long)i < nfc->data) {
    {
      #line 7246 
      idx = (int)tcam_get_index(np,(unsigned short)((int)((unsigned short)i)));
      #line 7247 
      tp = & parent->tcam[idx];
      #line 7248 
      if ((unsigned int)tp->valid == 0U) 
                                         #line 7249 
                                         goto __Cont;
      #line 7250 
      if (nfc->__anonCompField_ethtool_rxnfc_103.rule_cnt == (unsigned int)cnt) {
        #line 7251 
        ret = -90;
        #line 7252 
        break;
      }
      #line 7254 
      *(rule_locs + (unsigned long)cnt) = (unsigned int)i;
      #line 7255 
      cnt ++;
    }
    #line 7245 
    __Cont: 
            #line 7245 
    i ++;
  }
  #line 7257 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 7259 
  nfc->__anonCompField_ethtool_rxnfc_103.rule_cnt = (unsigned int)cnt;
  #line 7261 
  return ret;
}

#line 7264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_nfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  #line 7267 
  struct niu *np = netdev_priv(dev);
  #line 7268 
  int ret = 0;
  #line 7270 
  switch (cmd->cmd) {
    #line 7271 
    case (__u32)41: 
                    #line 7271 
    ;
    #line 7272 
    ret = niu_get_hash_opts(np,cmd);
    #line 7273 
    break;
    #line 7274 
    case (__u32)45: 
                    #line 7274 
    ;
    #line 7275 
    cmd->data = (unsigned long long)np->num_rx_rings;
    #line 7276 
    break;
    #line 7277 
    case (__u32)46: 
                    #line 7277 
    ;
    #line 7278 
    cmd->__anonCompField_ethtool_rxnfc_103.rule_cnt = (unsigned int)tcam_get_valid_entry_cnt(np);
    #line 7279 
    break;
    #line 7280 
    case (__u32)47: 
                    #line 7280 
    ;
    #line 7281 
    ret = niu_get_ethtool_tcam_entry(np,cmd);
    #line 7282 
    break;
    #line 7283 
    case (__u32)48: 
                    #line 7283 
    ;
    #line 7284 
    ret = niu_get_ethtool_tcam_all(np,cmd,rule_locs);
    #line 7285 
    break;
    #line 7286 
    default: 
             #line 7286 
    ;
    #line 7287 
    ret = -22;
    #line 7288 
    break;
  }
  #line 7291 
  return ret;
}

#line 7294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_hash_opts(struct niu *np, struct ethtool_rxnfc *nfc)
{
  #line 7296 
  u64 class;
  #line 7298 
  unsigned long flags;
  #line 7297 
  u64 flow_key = 0ULL;
  #line 7300 
  if (niu_ethflow_to_class((int)nfc->flow_type,& class) == 0) 
                                                              #line 7301 
                                                              return -22;
  #line 7303 
  if (class + 18446744073709551612ULL > 11ULL) 
                                               #line 7305 
                                               return -22;
  #line 7307 
  if ((nfc->data & 18446744071562067968ULL) != 0ULL) {
    #line 7308 
    cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
    #line 7309 
    flow_key = (np->parent)->tcam_key[class + 18446744073709551612ULL];
    #line 7311 
    flow_key |= 8ULL;
    #line 7312 
    writeq(flow_key,np->regs + (class + 475138ULL) * 8ULL);
    #line 7313 
    (np->parent)->tcam_key[class + 18446744073709551612ULL] = flow_key;
    #line 7314 
    cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
    #line 7315 
    return 0;
  }
  else 
    #line 7318 
    if (((np->parent)->tcam_key[class + 18446744073709551612ULL] & 8ULL) != 0ULL) {
      #line 7320 
      cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
      #line 7321 
      flow_key = (np->parent)->tcam_key[class + 18446744073709551612ULL];
      #line 7323 
      flow_key &= 18446744073709551607ULL;
      #line 7324 
      writeq(flow_key,np->regs + (class + 475138ULL) * 8ULL);
      #line 7326 
      (np->parent)->tcam_key[class + 18446744073709551612ULL] = flow_key;
      #line 7328 
      cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
    }
  #line 7332 
  if (niu_ethflow_to_flowkey(nfc->data,& flow_key) == 0) 
                                                         #line 7333 
                                                         return -22;
  #line 7335 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 7336 
  writeq(flow_key,np->regs + (class + 491516ULL) * 8ULL);
  #line 7337 
  (np->parent)->flow_key[class + 18446744073709551612ULL] = flow_key;
  #line 7338 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 7340 
  return 0;
}

#line 7343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_tcamkey_from_ip4fs(struct ethtool_rx_flow_spec *fsp, struct niu_tcam_entry *tp, int l2_rdc_tab, u64 class)
{
  #line 7348 
  u32 sip;
  #line 7348 
  u32 dip;
  #line 7348 
  u32 sipm;
  #line 7348 
  u32 dipm;
  #line 7348 
  u32 spi;
  #line 7348 
  u32 spim;
  #line 7349 
  u16 sport;
  #line 7349 
  u16 dport;
  #line 7349 
  u16 spm;
  #line 7349 
  u16 dpm;
  #line 7347 
  u8 pid = (unsigned char)0U;
  #line 7351 
  sip = __builtin_bswap32(fsp->h_u.tcp_ip4_spec.ip4src);
  #line 7352 
  sipm = __builtin_bswap32(fsp->m_u.tcp_ip4_spec.ip4src);
  #line 7353 
  dip = __builtin_bswap32(fsp->h_u.tcp_ip4_spec.ip4dst);
  #line 7354 
  dipm = __builtin_bswap32(fsp->m_u.tcp_ip4_spec.ip4dst);
  #line 7356 
  tp->key[0] = class << 3;
  #line 7357 
  tp->key_mask[0] = 248ULL;
  #line 7358 
  tp->key[1] = (unsigned long long)l2_rdc_tab << 59;
  #line 7359 
  tp->key_mask[1] = 17870283321406128128ULL;
  #line 7361 
  tp->key[3] = (unsigned long long)sip << 32;
  #line 7362 
  tp->key[3] |= (unsigned long long)dip;
  #line 7364 
  tp->key_mask[3] = (unsigned long long)sipm << 32;
  #line 7365 
  tp->key_mask[3] |= (unsigned long long)dipm;
  #line 7367 
  tp->key[2] |= (unsigned long long)fsp->h_u.tcp_ip4_spec.tos << 40;
  #line 7369 
  tp->key_mask[2] |= (unsigned long long)fsp->m_u.tcp_ip4_spec.tos << 40;
  #line 7371 
  switch (fsp->flow_type) {
    #line 7372 
    case (__u32)1: 
                   #line 7372 
    ;
    #line 7373 
    case (__u32)2: 
                   #line 7373 
    ;
    #line 7374 
    case (__u32)3: 
                   #line 7374 
    ;
    #line 7375 
    sport = __builtin_bswap16((unsigned short)((int)fsp->h_u.tcp_ip4_spec.psrc));
    #line 7376 
    spm = __builtin_bswap16((unsigned short)((int)fsp->m_u.tcp_ip4_spec.psrc));
    #line 7377 
    dport = __builtin_bswap16((unsigned short)((int)fsp->h_u.tcp_ip4_spec.pdst));
    #line 7378 
    dpm = __builtin_bswap16((unsigned short)((int)fsp->m_u.tcp_ip4_spec.pdst));
    #line 7380 
    tp->key[2] |= ((unsigned long long)sport << 16) | (unsigned long long)dport;
    #line 7381 
    tp->key_mask[2] |= ((unsigned long long)spm << 16) | (unsigned long long)dpm;
    #line 7382 
    niu_ethflow_to_l3proto((int)fsp->flow_type,& pid);
    #line 7383 
    break;
    #line 7384 
    case (__u32)9: 
                   #line 7384 
    ;
    #line 7385 
    case (__u32)10: 
                    #line 7385 
    ;
    #line 7386 
    spi = __builtin_bswap32(fsp->h_u.ah_ip4_spec.spi);
    #line 7387 
    spim = __builtin_bswap32(fsp->m_u.ah_ip4_spec.spi);
    #line 7389 
    tp->key[2] |= (unsigned long long)spi;
    #line 7390 
    tp->key_mask[2] |= (unsigned long long)spim;
    #line 7391 
    niu_ethflow_to_l3proto((int)fsp->flow_type,& pid);
    #line 7392 
    break;
    #line 7393 
    case (__u32)13: 
                    #line 7393 
    ;
    #line 7394 
    spi = __builtin_bswap32(fsp->h_u.usr_ip4_spec.l4_4_bytes);
    #line 7395 
    spim = __builtin_bswap32(fsp->m_u.usr_ip4_spec.l4_4_bytes);
    #line 7397 
    tp->key[2] |= (unsigned long long)spi;
    #line 7398 
    tp->key_mask[2] |= (unsigned long long)spim;
    #line 7399 
    pid = fsp->h_u.usr_ip4_spec.proto;
    #line 7400 
    break;
    #line 7401 
    default: 
             #line 7401 
    ;
    #line 7402 
    break;
  }
  #line 7405 
  tp->key[2] |= (unsigned long long)pid << 32;
  #line 7406 
  if ((unsigned int)pid != 0U) 
                               #line 7407 
                               tp->key_mask[2] |= 1095216660480ULL;
  #line 7408 
  return;
}

#line 7411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_add_ethtool_tcam_entry(struct niu *np, struct ethtool_rxnfc *nfc)
{
  #line 7415 
  struct niu_tcam_entry *tp;
  #line 7419 
  u16 idx;
  #line 7420 
  u64 class;
  #line 7421 
  unsigned long flags;
  #line 7422 
  int err;
  #line 7422 
  int ret;
  #line 7414 
  struct niu_parent *parent = np->parent;
  #line 7416 
  struct ethtool_rx_flow_spec *fsp = & nfc->fs;
  #line 7417 
  struct niu_rdc_tables *rdc_table = & parent->rdc_group_cfg[(int)np->port];
  #line 7418 
  int l2_rdc_table = rdc_table->first_table_num;
  #line 7424 
  ret = 0;
  #line 7426 
  idx = (unsigned short)nfc->fs.location;
  #line 7427 
  ;
  #line 7427 
  if ((int)tcam_get_size(np) <= (int)idx) 
                                          #line 7428 
                                          return -22;
  #line 7430 
  if (fsp->flow_type == 13U) {
    #line 7431 
    int i;
    #line 7432 
    int add_usr_cls = 0;
    #line 7433 
    struct ethtool_usrip4_spec *uspec = & fsp->h_u.usr_ip4_spec;
    #line 7434 
    struct ethtool_usrip4_spec *umask = & fsp->m_u.usr_ip4_spec;
    #line 7436 
    if ((unsigned int)uspec->ip_ver != 1U) 
                                           #line 7437 
                                           return -22;
    #line 7439 
    cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
    #line 7441 
    i = 0;
    #line 7441 
    while (i <= 3) {
      #line 7442 
      if (parent->l3_cls[i] != 0ULL) {
        #line 7443 
        if ((int)uspec->proto == (int)parent->l3_cls_pid[i]) {
          #line 7444 
          class = parent->l3_cls[i];
          #line 7445 
          parent->l3_cls_refcnt[i] = (u16)((int)parent->l3_cls_refcnt[i] + 1);
          #line 7446 
          add_usr_cls = 1;
          #line 7447 
          break;
        }
      }
      else {
        #line 7451 
        switch (i) {
          #line 7452 
          case 0: 
                  #line 7452 
          ;
          #line 7453 
          class = 4ULL;
          #line 7454 
          break;
          #line 7455 
          case 1: 
                  #line 7455 
          ;
          #line 7456 
          class = 5ULL;
          #line 7457 
          break;
          #line 7458 
          case 2: 
                  #line 7458 
          ;
          #line 7459 
          class = 6ULL;
          #line 7460 
          break;
          #line 7461 
          case 3: 
                  #line 7461 
          ;
          #line 7462 
          class = 7ULL;
          #line 7463 
          break;
          #line 7464 
          default: 
                   #line 7464 
          ;
          #line 7465 
          class = 0ULL;
          #line 7466 
          break;
        }
        #line 7468 
        ret = tcam_user_ip_class_set(np,(unsigned long)class,0,(unsigned long long)uspec->proto,(unsigned long long)uspec->tos,(unsigned long long)umask->tos);
        #line 7472 
        if (ret != 0) 
                      #line 7473 
                      goto out;
        #line 7475 
        ret = tcam_user_ip_class_enable(np,(unsigned long)class,1);
        #line 7476 
        if (ret != 0) 
                      #line 7477 
                      goto out;
        #line 7478 
        parent->l3_cls[i] = class;
        #line 7479 
        parent->l3_cls_pid[i] = uspec->proto;
        #line 7480 
        parent->l3_cls_refcnt[i] = (u16)((int)parent->l3_cls_refcnt[i] + 1);
        #line 7481 
        add_usr_cls = 1;
        #line 7482 
        break;
      }
      #line 7441 
      i ++;
    }
    #line 7485 
    if (add_usr_cls == 0) {
      #line 7486 
      netdev_info(np->dev,(char *)"niu%d: %s(): Could not find/insert class for pid %d\n",parent->index,(char *)"niu_add_ethtool_tcam_entry",(int)uspec->proto);
      #line 7488 
      ret = -22;
      #line 7489 
      goto out;
    }
    #line 7491 
    cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  }
  else {
    #line 7493 
    if (niu_ethflow_to_class((int)fsp->flow_type,& class) == 0) 
                                                                #line 7494 
                                                                return -22;
  }
  #line 7498 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 7500 
  idx = tcam_get_index(np,(unsigned short)((int)idx));
  #line 7501 
  tp = & parent->tcam[(int)idx];
  #line 7503 
  memset((void *)tp,0,80UL);
  #line 7506 
  switch (fsp->flow_type) {
    #line 7507 
    case (__u32)1: 
                   #line 7507 
    ;
    #line 7508 
    case (__u32)2: 
                   #line 7508 
    ;
    #line 7509 
    case (__u32)3: 
                   #line 7509 
    ;
    #line 7510 
    case (__u32)9: 
                   #line 7510 
    ;
    #line 7511 
    case (__u32)10: 
                    #line 7511 
    ;
    #line 7512 
    niu_get_tcamkey_from_ip4fs(fsp,tp,l2_rdc_table,class);
    #line 7513 
    break;
    #line 7514 
    case (__u32)5: 
                   #line 7514 
    ;
    #line 7515 
    case (__u32)6: 
                   #line 7515 
    ;
    #line 7516 
    case (__u32)7: 
                   #line 7516 
    ;
    #line 7517 
    case (__u32)11: 
                    #line 7517 
    ;
    #line 7518 
    case (__u32)12: 
                    #line 7518 
    ;
    #line 7520 
    netdev_info(np->dev,(char *)"niu%d: In %s(): flow %d for IPv6 not implemented\n",parent->index,(char *)"niu_add_ethtool_tcam_entry",fsp->flow_type);
    #line 7522 
    ret = -22;
    #line 7523 
    goto out;
    #line 7524 
    case (__u32)13: 
                    #line 7524 
    ;
    #line 7525 
    niu_get_tcamkey_from_ip4fs(fsp,tp,l2_rdc_table,class);
    #line 7526 
    break;
    #line 7527 
    default: 
             #line 7527 
    ;
    #line 7528 
    netdev_info(np->dev,(char *)"niu%d: In %s(): Unknown flow type %d\n",parent->index,(char *)"niu_add_ethtool_tcam_entry",fsp->flow_type);
    #line 7530 
    ret = -22;
    #line 7531 
    goto out;
  }
  #line 7535 
  if (fsp->ring_cookie == 18446744073709551615ULL) 
                                                   #line 7536 
                                                   tp->assoc_data = 4096ULL;
  else {
    #line 7538 
    if (fsp->ring_cookie >= (unsigned long long)np->num_rx_rings) {
      #line 7539 
      netdev_info(np->dev,(char *)"niu%d: In %s(): Invalid RX ring %lld\n",parent->index,(char *)"niu_add_ethtool_tcam_entry",(long long)fsp->ring_cookie);
      #line 7542 
      ret = -22;
      #line 7543 
      goto out;
    }
    #line 7545 
    tp->assoc_data = (fsp->ring_cookie << 2) | 1024ULL;
  }
  #line 7550 
  err = tcam_write(np,(int)idx,(u64 *)(& tp->key),(u64 *)(& tp->key_mask));
  #line 7551 
  if (err != 0) {
    #line 7552 
    ret = -22;
    #line 7553 
    goto out;
  }
  #line 7555 
  err = tcam_assoc_write(np,(int)idx,tp->assoc_data);
  #line 7556 
  if (err != 0) {
    #line 7557 
    ret = -22;
    #line 7558 
    goto out;
  }
  #line 7562 
  tp->valid = (unsigned char)1U;
  #line 7563 
  np->clas.tcam_valid_entries = (u16)((int)np->clas.tcam_valid_entries + 1);
  #line 7564 
  out: 
       #line 7564 
  ;
  #line 7565 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 7567 
  return ret;
}

#line 7570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_del_ethtool_tcam_entry(struct niu *np, u32 loc)
{
  #line 7573 
  struct niu_tcam_entry *tp;
  #line 7574 
  u16 idx;
  #line 7575 
  unsigned long flags;
  #line 7576 
  u64 class;
  #line 7572 
  struct niu_parent *parent = np->parent;
  #line 7577 
  int ret = 0;
  #line 7579 
  ;
  #line 7579 
  if ((unsigned int)tcam_get_size(np) <= loc) 
                                              #line 7580 
                                              return -22;
  #line 7582 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 7584 
  idx = tcam_get_index(np,(unsigned short)((int)((unsigned short)loc)));
  #line 7585 
  tp = & parent->tcam[(int)idx];
  #line 7588 
  class = (tp->key[0] >> 3) & 31ULL;
  #line 7591 
  if (class + 18446744073709551612ULL <= 3ULL) {
    #line 7592 
    int i;
    #line 7593 
    i = 0;
    #line 7593 
    while (i <= 3) {
      #line 7594 
      if (parent->l3_cls[i] == class) {
        #line 7595 
        parent->l3_cls_refcnt[i] = (u16)((int)parent->l3_cls_refcnt[i] - 1);
        #line 7596 
        if ((unsigned int)parent->l3_cls_refcnt[i] == 0U) {
          #line 7598 
          ret = tcam_user_ip_class_enable(np,(unsigned long)class,0);
          #line 7601 
          if (ret != 0) 
                        #line 7602 
                        goto out;
          #line 7603 
          parent->l3_cls[i] = 0ULL;
          #line 7604 
          parent->l3_cls_pid[i] = (unsigned char)0U;
        }
        #line 7606 
        break;
      }
      #line 7593 
      i ++;
    }
    #line 7609 
    if (i == 4) {
      #line 7610 
      netdev_info(np->dev,(char *)"niu%d: In %s(): Usr class 0x%llx not found\n",parent->index,(char *)"niu_del_ethtool_tcam_entry",class);
      #line 7613 
      ret = -22;
      #line 7614 
      goto out;
    }
  }
  #line 7618 
  ret = tcam_flush(np,(int)idx);
  #line 7619 
  if (ret != 0) 
                #line 7620 
                goto out;
  #line 7623 
  tp->valid = (unsigned char)0U;
  #line 7624 
  np->clas.tcam_valid_entries = (u16)((int)np->clas.tcam_valid_entries - 1);
  #line 7625 
  out: 
       #line 7625 
  ;
  #line 7626 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 7628 
  return ret;
}

#line 7631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_nfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  #line 7633 
  struct niu *np = netdev_priv(dev);
  #line 7634 
  int ret = 0;
  #line 7636 
  switch (cmd->cmd) {
    #line 7637 
    case (__u32)42: 
                    #line 7637 
    ;
    #line 7638 
    ret = niu_set_hash_opts(np,cmd);
    #line 7639 
    break;
    #line 7640 
    case (__u32)50: 
                    #line 7640 
    ;
    #line 7641 
    ret = niu_add_ethtool_tcam_entry(np,cmd);
    #line 7642 
    break;
    #line 7643 
    case (__u32)49: 
                    #line 7643 
    ;
    #line 7644 
    ret = niu_del_ethtool_tcam_entry(np,cmd->fs.location);
    #line 7645 
    break;
    #line 7646 
    default: 
             #line 7646 
    ;
    #line 7647 
    ret = -22;
    #line 7648 
    break;
  }
  #line 7651 
  return ret;
}

#line 7656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_xmac_stat_keys_968 niu_xmac_stat_keys[29U] = {{.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'t', (char)'e', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'g', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'1'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'2'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'3'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'4'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'5'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'6'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'i', (char)'s', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'7'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'o', (char)'d', (char)'e', (char)'_', (char)'v', (char)'i', (char)'o', (char)'l', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'f', (char)'f', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'n', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}};
#line 7692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_bmac_stat_keys_969 niu_bmac_stat_keys[12U] = {{.string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'f', (char)'f', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'o', (char)'n', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e'}}, {.string = {(char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}};
#line 7711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_rxchan_stat_keys_970 niu_rxchan_stat_keys[5U] = {{.string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d'}}, {.string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}};
#line 7723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct __anonstruct_niu_txchan_stat_keys_971 niu_txchan_stat_keys[4U] = {{.string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}};
#line 7732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 7735 
  int i;
  #line 7734 
  struct niu *np = netdev_priv(dev);
  #line 7737 
  if (stringset != 1U) 
                       #line 7738 
                       return;
  #line 7740 
  if ((np->flags & 65536U) != 0U) {
    #line 7741 
    memcpy((void *)data,(void *)(& niu_xmac_stat_keys),928UL);
    #line 7743 
    data += 928UL;
  }
  else {
    #line 7745 
    memcpy((void *)data,(void *)(& niu_bmac_stat_keys),384UL);
    #line 7747 
    data += 384UL;
  }
  #line 7749 
  i = 0;
  #line 7749 
  while (np->num_rx_rings > i) {
    #line 7750 
    memcpy((void *)data,(void *)(& niu_rxchan_stat_keys),160UL);
    #line 7752 
    data += 160UL;
    #line 7749 
    i ++;
  }
  #line 7754 
  i = 0;
  #line 7754 
  while (np->num_tx_rings > i) {
    #line 7755 
    memcpy((void *)data,(void *)(& niu_txchan_stat_keys),128UL);
    #line 7757 
    data += 128UL;
    #line 7754 
    i ++;
  }
  #line 7759 
  return;
}

#line 7761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_sset_count(struct net_device *dev, int stringset)
{
  #line 7771 
  unsigned int tmp_0;
  #line 7763 
  struct niu *np = netdev_priv(dev);
  #line 7765 
  if (stringset != 1) 
                      #line 7766 
                      return -22;
  #line 7771 
  if ((np->flags & 65536U) != 0U) 
                                  #line 7771 
                                  tmp_0 = 29U; else 
                                                    #line 7771 
                                                    tmp_0 = 12U;
  #line 7771 
  ;
  #line 7771 
  return (int)((unsigned long)tmp_0 + ((unsigned long)np->num_tx_rings * (unsigned long)4U + (unsigned long)np->num_rx_rings * (unsigned long)5U));
}

#line 7775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 7779 
  int i;
  #line 7778 
  struct niu *np = netdev_priv(dev);
  #line 7781 
  niu_sync_mac_stats(np);
  #line 7782 
  if ((np->flags & 65536U) != 0U) {
    #line 7783 
    memcpy((void *)data,(void *)(& np->mac_stats.xmac),232UL);
    #line 7785 
    data += 29UL;
  }
  else {
    #line 7787 
    memcpy((void *)data,(void *)(& np->mac_stats.bmac),96UL);
    #line 7789 
    data += 12UL;
  }
  #line 7791 
  i = 0;
  #line 7791 
  while (np->num_rx_rings > i) {
    {
      #line 7792 
      struct rx_ring_info *rp = np->rx_rings + (unsigned long)i;
      #line 7794 
      niu_sync_rx_discard_stats(np,rp,0);
      #line 7796 
      *data = (unsigned long long)rp->rx_channel;
      #line 7797 
      *(data + 1U) = rp->rx_packets;
      #line 7798 
      *(data + 2U) = rp->rx_bytes;
      #line 7799 
      *(data + 3U) = rp->rx_dropped;
      #line 7800 
      *(data + 4U) = rp->rx_errors;
      #line 7801 
      data += 5U;
    }
    #line 7791 
    i ++;
  }
  #line 7803 
  i = 0;
  #line 7803 
  while (np->num_tx_rings > i) {
    {
      #line 7804 
      struct tx_ring_info *rp_0 = np->tx_rings + (unsigned long)i;
      #line 7806 
      *data = (unsigned long long)rp_0->tx_channel;
      #line 7807 
      *(data + 1U) = rp_0->tx_packets;
      #line 7808 
      *(data + 2U) = rp_0->tx_bytes;
      #line 7809 
      *(data + 3U) = rp_0->tx_errors;
      #line 7810 
      data += 4U;
    }
    #line 7803 
    i ++;
  }
  #line 7812 
  return;
}

#line 7814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 niu_led_state_save(struct niu *np)
{
  #line 7816 
  if ((np->flags & 65536U) != 0U) {
    #line 7817 
    return readq(np->mac_regs + 96UL);
  }
  else {
    #line 7819 
    return readq(np->mac_regs + 120UL);
  }
}

#line 7822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_led_state_restore(struct niu *np, u64 val)
{
  #line 7824 
  if ((np->flags & 65536U) != 0U) 
                                  #line 7825 
                                  writeq(val,np->mac_regs + 96UL); else 
                                                                    #line 7827 
                                                                    writeq(val,np->mac_regs + 120UL);
  #line 7828 
  return;
}

#line 7830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_force_led(struct niu *np, int on)
{
  #line 7832 
  u64 val;
  #line 7832 
  u64 reg;
  #line 7832 
  u64 bit;
  #line 7834 
  if ((np->flags & 65536U) != 0U) {
    #line 7835 
    reg = 96ULL;
    #line 7836 
    bit = 2097152ULL;
  }
  else {
    #line 7838 
    reg = 120ULL;
    #line 7839 
    bit = 32ULL;
  }
  #line 7842 
  val = readq(np->mac_regs + reg);
  #line 7843 
  if (on != 0) 
               #line 7844 
               val |= bit; else 
                                #line 7846 
                                val = ~ bit & val;
  #line 7847 
  writeq(val,np->mac_regs + reg);
  #line 7848 
  return;
}

#line 7850  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 7854 
  struct niu *np = netdev_priv(dev);
  #line 7856 
  if (! netif_running(dev)) 
                            #line 7857 
                            return -11;
  #line 7859 
  switch ((unsigned int)state) {
    #line 7860 
    case (unsigned int)1: 
                          #line 7860 
    ;
    #line 7861 
    np->orig_led_state = niu_led_state_save(np);
    #line 7862 
    return 1;
    #line 7864 
    case (unsigned int)2: 
                          #line 7864 
    ;
    #line 7865 
    niu_force_led(np,1);
    #line 7866 
    break;
    #line 7868 
    case (unsigned int)3: 
                          #line 7868 
    ;
    #line 7869 
    niu_force_led(np,0);
    #line 7870 
    break;
    #line 7872 
    case (unsigned int)0: 
                          #line 7872 
    ;
    #line 7873 
    niu_led_state_restore(np,np->orig_led_state);
  }
  #line 7876 
  return 0;
}

#line 7879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct ethtool_ops niu_ethtool_ops = {.get_drvinfo = & niu_get_drvinfo, .get_msglevel = & niu_get_msglevel, .set_msglevel = & niu_set_msglevel, .nway_reset = & niu_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & niu_get_eeprom_len, .get_eeprom = & niu_get_eeprom, .get_strings = & niu_get_strings, .set_phys_id = & niu_set_phys_id, .get_ethtool_stats = & niu_get_ethtool_stats, .get_sset_count = & niu_get_sset_count, .get_rxnfc = & niu_get_nfc, .set_rxnfc = & niu_set_nfc, .get_link_ksettings = & niu_get_link_ksettings, .set_link_ksettings = & niu_set_link_ksettings};
#line 7897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ldg_assign_ldn(struct niu *np, struct niu_parent *parent, int ldg, int ldn)
{
  #line 7900 
  if ((unsigned int)ldg > 63U) 
                               #line 7901 
                               return -22;
  #line 7902 
  if ((unsigned int)ldn > 68U) 
                               #line 7903 
                               return -22;
  #line 7905 
  parent->ldg_map[ldn] = (unsigned char)ldg;
  #line 7907 
  if ((unsigned int)(np->parent)->plat_type == 2U) {
    #line 7913 
    ;
    #line 7913 
    if (readq(np->regs + ((unsigned long)ldn + 81920UL) * 8UL) != (unsigned long long)ldg) {
      #line 7914 
      ;
      #line 7914 
      ;
      #line 7914 
      ;
      #line 7914 
      ;
      #line 7914 
      _dev_err(np->device,(char *)"Port %u, mis-matched LDG assignment for ldn %d, should be %d is %llu\n",(int)np->port,ldn,ldg,readq(np->regs + ((unsigned long)ldn + 81920UL) * 8UL));
      #line 7917 
      return -22;
    }
  }
  else 
       #line 7920 
       writeq((unsigned long long)ldg,np->regs + ((unsigned long)ldn + 81920UL) * 8UL);
  #line 7922 
  return 0;
}

#line 7925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_ldg_timer_res(struct niu *np, int res)
{
  #line 7927 
  if ((unsigned int)res > 1048575U) 
                                    #line 7928 
                                    return -22;
  #line 7931 
  writeq((unsigned long long)res,np->regs + 524296UL);
  #line 7933 
  return 0;
}

#line 7936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_set_ldg_sid(struct niu *np, int ldg, int func, int vector)
{
  #line 7938 
  if (((unsigned int)ldg > 63U || (unsigned int)func > 3U) || (unsigned int)vector > 31U) 
    #line 7941 
    return -22;
  #line 7943 
  writeq((unsigned long long)((func << 5) | vector),np->regs + ((unsigned long)ldg + 73792UL) * 8UL);
  #line 7945 
  return 0;
}

#line 7948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_eeprom_read(struct niu *np, u32 addr)
{
  #line 7950 
  u64 frame;
  #line 7952 
  int limit;
  #line 7950 
  u64 frame_base = (unsigned long long)((addr << 8) | 2147483648U);
  #line 7954 
  if (addr > 262143U) 
                      #line 7955 
                      return -22;
  #line 7957 
  frame = frame_base;
  #line 7958 
  writeq(frame,np->regs + 13369352UL);
  #line 7959 
  limit = 64;
  #line 7960 
  while (1) {
    #line 7965 
    int tmp;
    #line 7961 
    __const_udelay(21475UL);
    #line 7962 
    frame = readq(np->regs + 13369352UL);
    #line 7963 
    if ((frame & 1073741824ULL) != 0ULL) 
                                         #line 7964 
                                         break;
    #line 7965 
    tmp = limit;
    #line 7965 
    limit --;
    #line 7965 
    ;
    #line 7965 
    if (! (tmp != 0)) 
                      #line 7960 
                      break;
  }
  #line 7966 
  if ((frame & 1073741824ULL) == 0ULL) {
    #line 7967 
    _dev_err(np->device,(char *)"EEPROM read timeout frame[%llx]\n",frame);
    #line 7969 
    return -19;
  }
  #line 7972 
  frame = frame_base;
  #line 7973 
  writeq(frame,np->regs + 13369352UL);
  #line 7974 
  limit = 64;
  #line 7975 
  while (1) {
    #line 7980 
    int tmp_0;
    #line 7976 
    __const_udelay(21475UL);
    #line 7977 
    frame = readq(np->regs + 13369352UL);
    #line 7978 
    if ((frame & 1073741824ULL) != 0ULL) 
                                         #line 7979 
                                         break;
    #line 7980 
    tmp_0 = limit;
    #line 7980 
    limit --;
    #line 7980 
    ;
    #line 7980 
    if (! (tmp_0 != 0)) 
                        #line 7975 
                        break;
  }
  #line 7981 
  if ((frame & 1073741824ULL) == 0ULL) {
    #line 7982 
    _dev_err(np->device,(char *)"EEPROM read timeout frame[%llx]\n",frame);
    #line 7984 
    return -19;
  }
  #line 7987 
  frame = readq(np->regs + 13369352UL);
  #line 7988 
  return (int)frame & 255;
}

#line 7991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_eeprom_read16(struct niu *np, u32 off)
{
  #line 7994 
  u16 val;
  #line 7993 
  int err = niu_pci_eeprom_read(np,off);
  #line 7996 
  if (err < 0) 
               #line 7997 
               return err;
  #line 7998 
  val = (unsigned short)((int)((unsigned short)err) << 8U);
  #line 7999 
  err = niu_pci_eeprom_read(np,off + 1U);
  #line 8000 
  if (err < 0) 
               #line 8001 
               return err;
  #line 8002 
  val = (unsigned short)((err & 255) | (int)val);
  #line 8004 
  return (int)val;
}

#line 8007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_eeprom_read16_swp(struct niu *np, u32 off)
{
  #line 8010 
  u16 val;
  #line 8009 
  int err = niu_pci_eeprom_read(np,off);
  #line 8012 
  if (err < 0) 
               #line 8013 
               return err;
  #line 8015 
  val = (unsigned short)((unsigned int)((unsigned short)err) & 255U);
  #line 8016 
  err = niu_pci_eeprom_read(np,off + 1U);
  #line 8017 
  if (err < 0) 
               #line 8018 
               return err;
  #line 8020 
  val = (unsigned short)((err << 8) | (int)val);
  #line 8022 
  return (int)val;
}

#line 8025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_vpd_get_propname(struct niu *np, u32 off, char *namebuf, int namebuf_len)
{
  #line 8028 
  int i;
  #line 8030 
  i = 0;
  #line 8030 
  while (i < namebuf_len) {
    {
      #line 8034 
      char *tmp_0;
      #line 8031 
      int err = niu_pci_eeprom_read(np,off + (unsigned int)i);
      #line 8032 
      if (err < 0) 
                   #line 8033 
                   return err;
      #line 8034 
      tmp_0 = namebuf;
      #line 8034 
      namebuf ++;
      #line 8034 
      *tmp_0 = (char)err;
      #line 8035 
      if (err == 0) 
                    #line 8036 
                    break;
    }
    #line 8030 
    i ++;
  }
  #line 8038 
  if (i >= namebuf_len) 
                        #line 8039 
                        return -22;
  #line 8041 
  return i + 1;
}

#line 8044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_vpd_parse_version(struct niu *np)
{
  #line 8049 
  int i;
  #line 8046 
  struct niu_vpd *vpd = & np->vpd;
  #line 8047 
  int len = (int)(cif_strlen((char *)(& vpd->version)) + (size_t)1U);
  #line 8048 
  char *s = (char *)(& vpd->version);
  #line 8051 
  i = 0;
  #line 8051 
  while (len + -5 > i) {
    #line 8052 
    if (cif_strncmp(s + (unsigned long)i,(char *)"FCode ",6UL) == 0) 
      #line 8053 
      break;
    #line 8051 
    i ++;
  }
  #line 8055 
  if (len + -5 <= i) 
                     #line 8056 
                     return;
  #line 8058 
  s += (unsigned long)i + (unsigned long)5U;
  #line 8059 
  sscanf(s,(char *)"%d.%d",& vpd->fcode_major,& vpd->fcode_minor);
  #line 8061 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8061 
                                   netdev_printk((char *)"\001",np->dev,(char *)"VPD_SCAN: FCODE major(%d) minor(%d)\n",vpd->fcode_major,vpd->fcode_minor);
  #line 8064 
  if (vpd->fcode_major > 3 || vpd->fcode_major == 3 && vpd->fcode_minor > 3) 
    #line 8067 
    np->flags |= 8388608U;
  #line 8068 
  return;
}

#line 8071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_vpd_scan_props(struct niu *np, u32 start, u32 end)
{
  #line 8073 
  unsigned int found_mask = 0U;
  #line 8082 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8082 
                                   netdev_printk((char *)"\001",np->dev,(char *)"VPD_SCAN: start[%x] end[%x]\n",start,end);
  #line 8084 
  while (start < end) {
    #line 8085 
    int len;
    #line 8085 
    int err;
    #line 8085 
    int prop_len;
    #line 8086 
    char namebuf[64U];
    #line 8087 
    u8 *prop_buf;
    #line 8088 
    int max_len;
    #line 8090 
    if (found_mask == 63U) {
      #line 8091 
      niu_vpd_parse_version(np);
      #line 8092 
      return 1;
    }
    #line 8095 
    err = niu_pci_eeprom_read(np,start + 2U);
    #line 8096 
    if (err < 0) 
                 #line 8097 
                 return err;
    #line 8098 
    len = err;
    #line 8099 
    start += 3U;
    #line 8101 
    prop_len = niu_pci_eeprom_read(np,start + 4U);
    #line 8102 
    if (prop_len < 0) 
                      #line 8103 
                      return prop_len;
    #line 8104 
    err = niu_pci_vpd_get_propname(np,start + 5U,(char *)(& namebuf),64);
    #line 8105 
    if (err < 0) 
                 #line 8106 
                 return err;
    #line 8108 
    prop_buf = (u8 *)0U;
    #line 8109 
    max_len = 0;
    #line 8110 
    if (cif_strcmp((char *)(& namebuf),(char *)"model") == 0) {
      #line 8111 
      prop_buf = (u8 *)(& np->vpd.model);
      #line 8112 
      max_len = 32;
      #line 8113 
      found_mask |= 1U;
    }
    else {
      #line 8114 
      if (cif_strcmp((char *)(& namebuf),(char *)"board-model") == 0) {
        #line 8115 
        prop_buf = (u8 *)(& np->vpd.board_model);
        #line 8116 
        max_len = 16;
        #line 8117 
        found_mask |= 2U;
      }
      else {
        #line 8118 
        if (cif_strcmp((char *)(& namebuf),(char *)"version") == 0) {
          #line 8119 
          prop_buf = (u8 *)(& np->vpd.version);
          #line 8120 
          max_len = 64;
          #line 8121 
          found_mask |= 4U;
        }
        else {
          #line 8122 
          if (cif_strcmp((char *)(& namebuf),(char *)"local-mac-address") == 0) {
            #line 8123 
            prop_buf = (u8 *)(& np->vpd.local_mac);
            #line 8124 
            max_len = 6;
            #line 8125 
            found_mask |= 8U;
          }
          else {
            #line 8126 
            if (cif_strcmp((char *)(& namebuf),(char *)"num-mac-addresses") == 0) {
              #line 8127 
              prop_buf = & np->vpd.mac_num;
              #line 8128 
              max_len = 1;
              #line 8129 
              found_mask |= 16U;
            }
            else {
              #line 8130 
              if (cif_strcmp((char *)(& namebuf),(char *)"phy-type") == 0) {
                #line 8131 
                prop_buf = (u8 *)(& np->vpd.phy_type);
                #line 8132 
                max_len = 8;
                #line 8133 
                found_mask |= 32U;
              }
            }
          }
        }
      }
    }
    #line 8136 
    if (max_len != 0 && prop_len > max_len) {
      #line 8137 
      _dev_err(np->device,(char *)"Property \'%s\' length (%d) is too long\n",(char *)(& namebuf),prop_len);
      #line 8138 
      return -22;
    }
    #line 8141 
    if (prop_buf != (u8 *)0U) {
      #line 8143 
      int i;
      #line 8142 
      u32 off = (start + (unsigned int)err) + 5U;
      #line 8145 
      if ((np->msg_enable & 2U) != 0U) 
                                       #line 8145 
                                       netdev_printk((char *)"\001",np->dev,(char *)"VPD_SCAN: Reading in property [%s] len[%d]\n",(char *)(& namebuf),prop_len);
      #line 8148 
      i = 0;
      #line 8148 
      while (i < prop_len) {
        #line 8149 
        err = niu_pci_eeprom_read(np,off + (unsigned int)i);
        #line 8150 
        if (err >= 0) 
                      #line 8151 
                      *prop_buf = (unsigned char)err;
        #line 8152 
        prop_buf ++;
        #line 8148 
        i ++;
      }
    }
    #line 8156 
    start += (unsigned int)len;
  }
  #line 8159 
  return 0;
}

#line 8163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pci_vpd_fetch(struct niu *np, u32 start)
{
  #line 8165 
  u32 offset;
  #line 8166 
  int err;
  #line 8168 
  err = niu_pci_eeprom_read16_swp(np,start + 1U);
  #line 8169 
  if (err < 0) 
               #line 8170 
               return;
  #line 8172 
  offset = (unsigned int)(err + 3);
  #line 8174 
  while (start + offset <= 1048575U) {
    #line 8176 
    u32 end;
    #line 8175 
    u32 here = start + offset;
    #line 8178 
    err = niu_pci_eeprom_read(np,here);
    #line 8179 
    if (err != 144) 
                    #line 8180 
                    return;
    #line 8182 
    err = niu_pci_eeprom_read16_swp(np,here + 1U);
    #line 8183 
    if (err < 0) 
                 #line 8184 
                 return;
    #line 8186 
    here = (start + offset) + 3U;
    #line 8187 
    end = (start + offset) + (unsigned int)err;
    #line 8189 
    offset += (unsigned int)err;
    #line 8191 
    err = niu_pci_vpd_scan_props(np,here,end);
    #line 8192 
    if (err < 0 || err == 1) 
                             #line 8193 
                             return;
  }
  #line 8195 
  return;
}

#line 8198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u32 niu_pci_vpd_offset(struct niu *np)
{
  #line 8200 
  u32 ret;
  #line 8201 
  int err;
  #line 8200 
  u32 start = 0U;
  #line 8200 
  u32 end = 1048576U;
  #line 8203 
  while (start < end) {
    #line 8204 
    ret = start;
    #line 8207 
    err = niu_pci_eeprom_read16(np,start);
    #line 8208 
    if (err != 21930) 
                      #line 8209 
                      return 0U;
    #line 8212 
    err = niu_pci_eeprom_read16(np,start + 23U);
    #line 8213 
    if (err < 0) 
                 #line 8214 
                 return 0U;
    #line 8215 
    start += (unsigned int)err;
    #line 8218 
    err = niu_pci_eeprom_read16(np,start);
    #line 8219 
    if (err != 20547) 
                      #line 8220 
                      return 0U;
    #line 8221 
    err = niu_pci_eeprom_read16(np,start + 2U);
    #line 8222 
    if (err != 18770) 
                      #line 8223 
                      return 0U;
    #line 8226 
    err = niu_pci_eeprom_read(np,start + 20U);
    #line 8227 
    if (err < 0) 
                 #line 8228 
                 return 0U;
    #line 8229 
    if (err != 1) {
      #line 8230 
      err = niu_pci_eeprom_read(np,ret + 2U);
      #line 8231 
      if (err < 0) 
                   #line 8232 
                   return 0U;
      #line 8234 
      start = (unsigned int)(err * 512) + ret;
      #line 8235 
      continue;
    }
    #line 8238 
    err = niu_pci_eeprom_read16_swp(np,start + 8U);
    #line 8239 
    if (err < 0) 
                 #line 8240 
                 return (unsigned int)err;
    #line 8241 
    ret += (unsigned int)err;
    #line 8243 
    err = niu_pci_eeprom_read(np,ret);
    #line 8244 
    if (err != 130) 
                    #line 8245 
                    return 0U;
    #line 8247 
    return ret;
  }
  #line 8250 
  return 0U;
}

#line 8253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_phy_type_prop_decode(struct niu *np, char *phy_prop)
{
  #line 8255 
  if (cif_strcmp(phy_prop,(char *)"mif") == 0) {
    #line 8257 
    np->flags &= 4294574079U;
    #line 8259 
    np->mac_xcvr = (unsigned char)1U;
  }
  else {
    #line 8260 
    if (cif_strcmp(phy_prop,(char *)"xgf") == 0) {
      #line 8262 
      np->flags |= 393216U;
      #line 8264 
      np->mac_xcvr = (unsigned char)3U;
    }
    else {
      #line 8265 
      if (cif_strcmp(phy_prop,(char *)"pcs") == 0) {
        #line 8267 
        np->flags &= 4294705151U;
        #line 8268 
        np->flags |= 131072U;
        #line 8269 
        np->mac_xcvr = (unsigned char)2U;
      }
      else {
        #line 8270 
        if (cif_strcmp(phy_prop,(char *)"xgc") == 0) {
          #line 8272 
          np->flags |= 262144U;
          #line 8273 
          np->flags &= 4294836223U;
          #line 8274 
          np->mac_xcvr = (unsigned char)3U;
        }
        else {
          #line 8275 
          if (cif_strcmp(phy_prop,(char *)"xgsd") == 0) 
                                                        #line 8275 
                                                        goto _LOR;
          else {
            #line 8275 
            if (cif_strcmp(phy_prop,(char *)"gsd") == 0) {
              #line 8275 
              _LOR: {
                      #line 8277 
                      np->flags |= 262144U;
                      #line 8278 
                      np->flags &= 4294836223U;
                      #line 8279 
                      np->flags |= 524288U;
                      #line 8280 
                      np->mac_xcvr = (unsigned char)3U;
                    }
            }
            else 
                 #line 8282 
                 return -22;
          }
        }
      }
    }
  }
  #line 8284 
  return 0;
}

#line 8287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_vpd_get_nports(struct niu *np)
{
  #line 8289 
  int ports = 0;
  #line 8291 
  if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-qgc") == 0) 
    #line 8291 
    goto _LOR;
  else {
    #line 8291 
    if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-qgc-pem") == 0) 
      #line 8291 
      goto _LOR;
    else {
      #line 8292 
      if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-neptune") == 0) 
        #line 8291 
        goto _LOR;
      else {
        #line 8293 
        if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,CP3260") == 0) 
          #line 8291 
          goto _LOR;
        else {
          #line 8294 
          if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,CP3220") == 0) 
            #line 8291 
            _LOR: 
                  #line 8296 
                  ports = 4;
          else {
            #line 8297 
            if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-2xgf") == 0) 
              #line 8301 
              ports = 2;
            else {
              #line 8297 
              if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-2xgf-pem") == 0) 
                #line 8301 
                ports = 2;
              else {
                #line 8298 
                if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-rfem") == 0) 
                  #line 8301 
                  ports = 2;
                else {
                  #line 8299 
                  if (cif_strcmp((char *)(& np->vpd.model),(char *)"SysKonnect,pcie-2xgf") == 0) 
                    #line 8301 
                    ports = 2;
                }
              }
            }
          }
        }
      }
    }
  }
  #line 8304 
  return ports;
}

#line 8307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pci_vpd_validate(struct niu *np)
{
  #line 8311 
  u8 val8;
  #line 8309 
  struct net_device *dev = np->dev;
  #line 8310 
  struct niu_vpd *vpd = & np->vpd;
  #line 8313 
  if (! is_valid_ether_addr(& vpd->local_mac[0])) {
    #line 8314 
    _dev_err(np->device,(char *)"VPD MAC invalid, falling back to SPROM\n");
    #line 8316 
    np->flags &= 4286578687U;
    #line 8317 
    return;
  }
  #line 8320 
  if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,CP3220") == 0) 
    #line 8320 
    goto _LOR;
  else {
    #line 8320 
    if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,CP3260") == 0) {
      #line 8320 
      _LOR: {
              #line 8322 
              np->flags |= 262144U;
              #line 8323 
              np->flags &= 4294836223U;
              #line 8324 
              np->flags |= 524288U;
              #line 8325 
              np->mac_xcvr = (unsigned char)2U;
              #line 8326 
              if ((unsigned int)np->port > 1U) {
                #line 8327 
                np->flags |= 131072U;
                #line 8328 
                np->flags &= 4294705151U;
              }
              #line 8330 
              if ((np->flags & 262144U) != 0U) 
                                               #line 8331 
                                               np->mac_xcvr = (unsigned char)3U;
            }
    }
    else {
      #line 8332 
      if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-rfem") == 0) 
        #line 8333 
        np->flags |= 17170432U;
      else {
        #line 8335 
        if (niu_phy_type_prop_decode(np,(char *)(& np->vpd.phy_type)) != 0) {
          #line 8336 
          _dev_err(np->device,(char *)"Illegal phy string [%s]\n",(char *)(& np->vpd.phy_type));
          #line 8338 
          _dev_err(np->device,(char *)"Falling back to SPROM\n");
          #line 8339 
          np->flags &= 4286578687U;
          #line 8340 
          return;
        }
      }
    }
  }
  #line 8343 
  memcpy((void *)dev->dev_addr,(void *)(& vpd->local_mac),6UL);
  #line 8345 
  val8 = *(dev->dev_addr + 5U);
  #line 8346 
  *(dev->dev_addr + 5U) = (unsigned char)((int)*(dev->dev_addr + 5U) + (int)np->port);
  #line 8347 
  if ((int)*(dev->dev_addr + 5U) < (int)val8) 
                                              #line 8348 
                                              *(dev->dev_addr + 4U) = (unsigned char)((int)*(dev->dev_addr + 4U) + 1);
  #line 8349 
  return;
}

#line 8351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_probe_sprom(struct niu *np)
{
  #line 8354 
  int len;
  #line 8354 
  int i;
  #line 8355 
  u64 val;
  #line 8355 
  u64 sum;
  #line 8356 
  u8 val8;
  #line 8353 
  struct net_device *dev = np->dev;
  #line 8358 
  val = readq(np->regs + 13369544UL) & 4294901760ULL;
  #line 8359 
  val >>= 16;
  #line 8360 
  len = (int)(val / 4ULL);
  #line 8362 
  np->eeprom_len = (unsigned int)len;
  #line 8364 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8364 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: Image size %llu\n",val);
  #line 8367 
  sum = 0ULL;
  #line 8368 
  i = 0;
  #line 8368 
  while (i < len) {
    #line 8369 
    val = readq(np->regs + ((unsigned long)i + 1671172UL) * 8UL);
    #line 8370 
    sum = (val & 255ULL) + sum;
    #line 8371 
    sum = ((val >> 8) & 255ULL) + sum;
    #line 8372 
    sum = ((val >> 16) & 255ULL) + sum;
    #line 8373 
    sum = ((val >> 24) & 255ULL) + sum;
    #line 8368 
    i ++;
  }
  #line 8375 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8375 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: Checksum %x\n",(int)sum & 255);
  #line 8377 
  if ((sum & 255ULL) != 171ULL) {
    #line 8378 
    _dev_err(np->device,(char *)"Bad SPROM checksum (%x, should be 0xab)\n",(int)sum & 255);
    #line 8379 
    return -22;
  }
  #line 8382 
  val = readq(np->regs + 13369520UL);
  #line 8383 
  switch ((int)np->port) {
    #line 8384 
    case 0: 
            #line 8384 
    ;
    #line 8385 
    val8 = (unsigned char)(val >> 24);
    #line 8387 
    break;
    #line 8388 
    case 1: 
            #line 8388 
    ;
    #line 8389 
    val8 = (unsigned char)(val >> 16);
    #line 8391 
    break;
    #line 8392 
    case 2: 
            #line 8392 
    ;
    #line 8393 
    val8 = (unsigned char)(val >> 8);
    #line 8395 
    break;
    #line 8396 
    case 3: 
            #line 8396 
    ;
    #line 8397 
    val8 = (unsigned char)val;
    #line 8399 
    break;
    #line 8400 
    default: 
             #line 8400 
    ;
    #line 8401 
    _dev_err(np->device,(char *)"Bogus port number %u\n",(int)np->port);
    #line 8403 
    return -22;
  }
  #line 8405 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8405 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: PHY type %x\n",(int)val8);
  #line 8408 
  switch ((int)val8) {
    #line 8409 
    case 3: 
            #line 8409 
    ;
    #line 8411 
    np->flags &= 4294574079U;
    #line 8413 
    np->mac_xcvr = (unsigned char)1U;
    #line 8414 
    break;
    #line 8416 
    case 2: 
            #line 8416 
    ;
    #line 8418 
    np->flags &= 4294705151U;
    #line 8419 
    np->flags |= 131072U;
    #line 8420 
    np->mac_xcvr = (unsigned char)2U;
    #line 8421 
    break;
    #line 8423 
    case 1: 
            #line 8423 
    ;
    #line 8425 
    np->flags |= 262144U;
    #line 8426 
    np->flags &= 4294836223U;
    #line 8427 
    np->mac_xcvr = (unsigned char)3U;
    #line 8428 
    break;
    #line 8430 
    case 0: 
            #line 8430 
    ;
    #line 8432 
    np->flags |= 393216U;
    #line 8434 
    np->mac_xcvr = (unsigned char)3U;
    #line 8435 
    break;
    #line 8437 
    default: 
             #line 8437 
    ;
    #line 8438 
    _dev_err(np->device,(char *)"Bogus SPROM phy type %u\n",(int)val8);
    #line 8439 
    return -22;
  }
  #line 8442 
  val = readq(np->regs + 13369376UL);
  #line 8443 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8443 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: MAC_ADDR0[%08llx]\n",val);
  #line 8445 
  *(dev->dev_addr) = (unsigned char)val;
  #line 8446 
  *(dev->dev_addr + 1U) = (unsigned char)(val >> 8);
  #line 8447 
  *(dev->dev_addr + 2U) = (unsigned char)(val >> 16);
  #line 8448 
  *(dev->dev_addr + 3U) = (unsigned char)(val >> 24);
  #line 8450 
  val = readq(np->regs + 13369384UL);
  #line 8451 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8451 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: MAC_ADDR1[%08llx]\n",val);
  #line 8453 
  *(dev->dev_addr + 4U) = (unsigned char)val;
  #line 8454 
  *(dev->dev_addr + 5U) = (unsigned char)(val >> 8);
  #line 8456 
  if (! is_valid_ether_addr(dev->dev_addr)) {
    #line 8457 
    _dev_err(np->device,(char *)"SPROM MAC address invalid [ %pM ]\n",dev->dev_addr);
    #line 8459 
    return -22;
  }
  #line 8462 
  val8 = *(dev->dev_addr + 5U);
  #line 8463 
  *(dev->dev_addr + 5U) = (unsigned char)((int)*(dev->dev_addr + 5U) + (int)np->port);
  #line 8464 
  if ((int)*(dev->dev_addr + 5U) < (int)val8) 
                                              #line 8465 
                                              *(dev->dev_addr + 4U) = (unsigned char)((int)*(dev->dev_addr + 4U) + 1);
  #line 8467 
  val = readq(np->regs + 13369408UL);
  #line 8468 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8468 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: MOD_STR_LEN[%llu]\n",val);
  #line 8470 
  if (val > 31ULL) 
                   #line 8471 
                   return -22;
  #line 8473 
  i = 0;
  #line 8473 
  while ((unsigned long long)i < val) {
    {
      #line 8474 
      u64 tmp_1 = readq(np->regs + ((unsigned long)(i / 4 + 5) + 1671172UL) * 8UL);
      #line 8476 
      np->vpd.model[i + 3] = (char)tmp_1;
      #line 8477 
      np->vpd.model[i + 2] = (char)(tmp_1 >> 8);
      #line 8478 
      np->vpd.model[i + 1] = (char)(tmp_1 >> 16);
      #line 8479 
      np->vpd.model[i] = (char)(tmp_1 >> 24);
    }
    #line 8473 
    i += 4;
  }
  #line 8481 
  np->vpd.model[val] = (char)0;
  #line 8483 
  val = readq(np->regs + 13369480UL);
  #line 8484 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8484 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: BD_MOD_STR_LEN[%llu]\n",val);
  #line 8486 
  if (val > 15ULL) 
                   #line 8487 
                   return -22;
  #line 8489 
  i = 0;
  #line 8489 
  while ((unsigned long long)i < val) {
    {
      #line 8490 
      u64 tmp_2 = readq(np->regs + ((unsigned long)(i / 4 + 14) + 1671172UL) * 8UL);
      #line 8492 
      np->vpd.board_model[i + 3] = (char)tmp_2;
      #line 8493 
      np->vpd.board_model[i + 2] = (char)(tmp_2 >> 8);
      #line 8494 
      np->vpd.board_model[i + 1] = (char)(tmp_2 >> 16);
      #line 8495 
      np->vpd.board_model[i] = (char)(tmp_2 >> 24);
    }
    #line 8489 
    i += 4;
  }
  #line 8497 
  np->vpd.board_model[val] = (char)0;
  #line 8499 
  np->vpd.mac_num = (unsigned char)readq(np->regs + 13369392UL);
  #line 8501 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 8501 
                                   netdev_printk((char *)"\001",np->dev,(char *)"SPROM: NUM_PORTS_MACS[%d]\n",(int)np->vpd.mac_num);
  #line 8504 
  return 0;
}

#line 8507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_and_validate_port(struct niu *np)
{
  #line 8509 
  struct niu_parent *parent = np->parent;
  #line 8511 
  if ((unsigned int)np->port <= 1U) 
                                    #line 8512 
                                    np->flags |= 65536U;
  #line 8514 
  if ((unsigned int)parent->num_ports == 0U) 
    #line 8515 
    if ((unsigned int)parent->plat_type == 2U) 
                                               #line 8516 
                                               parent->num_ports = (unsigned char)2U;
    else {
      #line 8518 
      parent->num_ports = (unsigned char)niu_pci_vpd_get_nports(np);
      #line 8519 
      if ((unsigned int)parent->num_ports == 0U) {
        #line 8523 
        parent->num_ports = (unsigned char)readq(np->regs + 13369392UL);
        #line 8529 
        if ((unsigned int)parent->num_ports == 0U) 
                                                   #line 8530 
                                                   parent->num_ports = (unsigned char)4U;
      }
    }
  #line 8535 
  if ((int)np->port >= (int)parent->num_ports) 
                                               #line 8536 
                                               return -19;
  #line 8538 
  return 0;
}

#line 8541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int phy_record(struct niu_parent *parent, struct phy_probe_info *p, int dev_id_1, int dev_id_2, u8 phy_port, int type)
{
  #line 8561 
  char *tmp;
  #line 8545 
  u8 idx;
  #line 8561 
  char *tmp_0;
  #line 8544 
  u32 id = (unsigned int)((dev_id_1 << 16) | dev_id_2);
  #line 8547 
  if (dev_id_1 < 0 || dev_id_2 < 0) 
                                    #line 8548 
                                    return 0;
  #line 8549 
  if ((unsigned int)type <= 1U) {
    #line 8553 
    if ((id & 4294963440U) != 2121776U && (id & 4294963440U) != 21037088U) 
      #line 8555 
      return 0;
  }
  else 
    #line 8557 
    if ((id & 4294963440U) != 2121904U) 
                                        #line 8558 
                                        return 0;
  #line 8561 
  ;
  #line 8561 
  if (type != 0) {
    #line 8561 
    if (type == 1) 
                   #line 8561 
                   tmp = (char *)"PCS"; else 
                                             #line 8561 
                                             tmp = (char *)"MII";
    #line 8561 
    tmp_0 = tmp;
  }
  else 
       #line 8561 
       tmp_0 = (char *)"PMA/PMD";
  #line 8561 
  ;
  #line 8561 
  ;
  #line 8561 
  printk((char *)"\001",parent->index,id,tmp_0,(int)phy_port);
  #line 8567 
  if ((unsigned int)p->cur[type] > 3U) {
    #line 8568 
    printk((char *)"\001");
    #line 8569 
    return -22;
  }
  #line 8571 
  idx = p->cur[type];
  #line 8572 
  p->phy_id[type][(int)idx] = id;
  #line 8573 
  p->phy_port[type][(int)idx] = phy_port;
  #line 8574 
  p->cur[type] = (unsigned char)((unsigned int)idx + 1U);
  #line 8575 
  return 0;
}

#line 8578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int port_has_10g(struct phy_probe_info *p, int port)
{
  #line 8580 
  int i;
  #line 8582 
  i = 0;
  #line 8582 
  while ((int)p->cur[0] > i) {
    #line 8583 
    if ((int)p->phy_port[0][i] == port) 
                                        #line 8584 
                                        return 1;
    #line 8582 
    i ++;
  }
  #line 8586 
  i = 0;
  #line 8586 
  while ((int)p->cur[1] > i) {
    #line 8587 
    if ((int)p->phy_port[1][i] == port) 
                                        #line 8588 
                                        return 1;
    #line 8586 
    i ++;
  }
  #line 8591 
  return 0;
}

#line 8594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int count_10g_ports(struct phy_probe_info *p, int *lowest)
{
  #line 8596 
  int port;
  #line 8596 
  int cnt;
  #line 8598 
  cnt = 0;
  #line 8599 
  *lowest = 32;
  #line 8600 
  port = 8;
  #line 8600 
  while (port <= 31) {
    #line 8601 
    if (port_has_10g(p,port) != 0) {
      #line 8602 
      if (cnt == 0) 
                    #line 8603 
                    *lowest = port;
      #line 8604 
      cnt ++;
    }
    #line 8600 
    port ++;
  }
  #line 8608 
  return cnt;
}

#line 8611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int count_1g_ports(struct phy_probe_info *p, int *lowest)
{
  #line 8613 
  *lowest = 32;
  #line 8614 
  if ((unsigned int)p->cur[2] != 0U) 
                                     #line 8615 
                                     *lowest = (int)p->phy_port[2][0];
  #line 8617 
  return (int)p->cur[2];
}

#line 8620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_n2_divide_channels(struct niu_parent *parent)
{
  #line 8623 
  int i;
  #line 8622 
  int num_ports = (int)parent->num_ports;
  #line 8625 
  i = 0;
  #line 8625 
  while (i < num_ports) {
    #line 8626 
    parent->rxchan_per_port[i] = (unsigned char)(16 / num_ports);
    #line 8627 
    parent->txchan_per_port[i] = (unsigned char)(16 / num_ports);
    #line 8629 
    printk((char *)"\001",parent->index,i,(int)parent->rxchan_per_port[i],(int)parent->txchan_per_port[i]);
    #line 8625 
    i ++;
  }
  #line 8631 
  return;
}

#line 8636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_divide_channels(struct niu_parent *parent, int num_10g, int num_1g)
{
  #line 8640 
  int rx_chans_per_10g;
  #line 8640 
  int rx_chans_per_1g;
  #line 8641 
  int tx_chans_per_10g;
  #line 8641 
  int tx_chans_per_1g;
  #line 8642 
  int i;
  #line 8642 
  int tot_rx;
  #line 8642 
  int tot_tx;
  #line 8639 
  int num_ports = (int)parent->num_ports;
  #line 8644 
  if (num_10g == 0 || num_1g == 0) {
    #line 8645 
    rx_chans_per_1g = 16 / num_ports;
    #line 8645 
    rx_chans_per_10g = rx_chans_per_1g;
    #line 8647 
    tx_chans_per_1g = 24 / num_ports;
    #line 8647 
    tx_chans_per_10g = tx_chans_per_1g;
  }
  else {
    #line 8650 
    rx_chans_per_1g = 2;
    #line 8651 
    rx_chans_per_10g = (16 - rx_chans_per_1g * num_1g) / num_10g;
    #line 8655 
    tx_chans_per_1g = 4;
    #line 8656 
    tx_chans_per_10g = (24 - tx_chans_per_1g * num_1g) / num_10g;
  }
  #line 8661 
  tot_tx = 0;
  #line 8661 
  tot_rx = tot_tx;
  #line 8662 
  i = 0;
  #line 8662 
  while (i < num_ports) {
    {
      #line 8663 
      int type = (int)phy_decode(parent->port_phy,i);
      #line 8665 
      if (type == 1) {
        #line 8666 
        parent->rxchan_per_port[i] = (unsigned char)rx_chans_per_10g;
        #line 8667 
        parent->txchan_per_port[i] = (unsigned char)tx_chans_per_10g;
      }
      else {
        #line 8669 
        parent->rxchan_per_port[i] = (unsigned char)rx_chans_per_1g;
        #line 8670 
        parent->txchan_per_port[i] = (unsigned char)tx_chans_per_1g;
      }
      #line 8672 
      printk((char *)"\001",parent->index,i,(int)parent->rxchan_per_port[i],(int)parent->txchan_per_port[i]);
      #line 8676 
      tot_rx = (int)parent->rxchan_per_port[i] + tot_rx;
      #line 8677 
      tot_tx = (int)parent->txchan_per_port[i] + tot_tx;
    }
    #line 8662 
    i ++;
  }
  #line 8680 
  if (tot_rx > 16) {
    #line 8681 
    printk((char *)"\001",parent->index,tot_rx);
    #line 8683 
    i = 0;
    #line 8683 
    while (i < num_ports) {
      #line 8684 
      parent->rxchan_per_port[i] = (unsigned char)1U;
      #line 8683 
      i ++;
    }
  }
  #line 8686 
  if (tot_tx > 24) {
    #line 8687 
    printk((char *)"\001",parent->index,tot_tx);
    #line 8689 
    i = 0;
    #line 8689 
    while (i < num_ports) {
      #line 8690 
      parent->txchan_per_port[i] = (unsigned char)1U;
      #line 8689 
      i ++;
    }
  }
  #line 8692 
  if (tot_rx <= 15 || tot_tx <= 23) 
                                    #line 8693 
                                    printk((char *)"\001",parent->index,tot_rx,tot_tx);
  #line 8694 
  return;
}

#line 8698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_divide_rdc_groups(struct niu_parent *parent, int num_10g, int num_1g)
{
  #line 8701 
  int i;
  #line 8702 
  int rdc_group;
  #line 8702 
  int rdc_groups_per_port;
  #line 8703 
  int rdc_channel_base;
  #line 8701 
  int num_ports = (int)parent->num_ports;
  #line 8705 
  rdc_group = 0;
  #line 8706 
  rdc_groups_per_port = 8 / num_ports;
  #line 8708 
  rdc_channel_base = 0;
  #line 8710 
  i = 0;
  #line 8710 
  while (i < num_ports) {
    {
      #line 8712 
      int grp;
      #line 8713 
      int this_channel_offset;
      #line 8711 
      struct niu_rdc_tables *tp = & parent->rdc_group_cfg[i];
      #line 8712 
      int num_channels = (int)parent->rxchan_per_port[i];
      #line 8715 
      tp->first_table_num = rdc_group;
      #line 8716 
      tp->num_tables = rdc_groups_per_port;
      #line 8717 
      this_channel_offset = 0;
      #line 8718 
      grp = 0;
      #line 8718 
      while (tp->num_tables > grp) {
        {
          #line 8720 
          int slot;
          #line 8719 
          struct rdc_table *rt = & tp->tables[grp];
          #line 8722 
          printk((char *)"\001",parent->index,i,tp->first_table_num + grp);
          #line 8724 
          slot = 0;
          #line 8724 
          while (slot <= 15) {
            #line 8725 
            rt->rxdma_channel[slot] = (unsigned char)((int)((unsigned char)rdc_channel_base) + (int)((unsigned char)this_channel_offset));
            #line 8728 
            printk((char *)"\001",(int)rt->rxdma_channel[slot]);
            #line 8730 
            this_channel_offset ++;
            #line 8730 
            ;
            #line 8730 
            if (this_channel_offset == num_channels) 
                                                     #line 8731 
                                                     this_channel_offset = 0;
            #line 8724 
            slot ++;
          }
          #line 8733 
          printk((char *)"\001");
        }
        #line 8718 
        grp ++;
      }
      #line 8736 
      parent->rdc_default[i] = (unsigned char)rdc_channel_base;
      #line 8738 
      rdc_channel_base += num_channels;
      #line 8739 
      rdc_group += rdc_groups_per_port;
    }
    #line 8710 
    i ++;
  }
  #line 8741 
  return;
}

#line 8743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int fill_phy_probe_info(struct niu *np, struct niu_parent *parent, struct phy_probe_info *info)
{
  #line 8746 
  unsigned long flags;
  #line 8747 
  int port;
  #line 8747 
  int err;
  #line 8749 
  memset((void *)info,0,2080UL);
  #line 8752 
  cif___ldv_spin_lock_lock_of_niu_parent(& (np->parent)->lock);
  #line 8753 
  err = 0;
  #line 8754 
  port = 8;
  #line 8754 
  while (port <= 31) {
    {
      #line 8755 
      int dev_id_1;
      #line 8755 
      int dev_id_2;
      #line 8757 
      dev_id_1 = mdio_read(np,port,1,2);
      #line 8759 
      dev_id_2 = mdio_read(np,port,1,3);
      #line 8761 
      err = phy_record(parent,info,dev_id_1,dev_id_2,(unsigned char)((int)((unsigned char)port)),0);
      #line 8763 
      if (err != 0) 
                    #line 8764 
                    break;
      #line 8765 
      dev_id_1 = mdio_read(np,port,3,2);
      #line 8767 
      dev_id_2 = mdio_read(np,port,3,3);
      #line 8769 
      err = phy_record(parent,info,dev_id_1,dev_id_2,(unsigned char)((int)((unsigned char)port)),1);
      #line 8771 
      if (err != 0) 
                    #line 8772 
                    break;
      #line 8773 
      dev_id_1 = mii_read(np,port,2);
      #line 8774 
      dev_id_2 = mii_read(np,port,3);
      #line 8775 
      err = phy_record(parent,info,dev_id_1,dev_id_2,(unsigned char)((int)((unsigned char)port)),2);
      #line 8777 
      if (err != 0) 
                    #line 8778 
                    break;
    }
    #line 8754 
    port ++;
  }
  #line 8780 
  cif_spin_unlock_irqrestore_lock_of_niu_parent(& (np->parent)->lock,flags);
  #line 8782 
  return err;
}

#line 8785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int walk_phys(struct niu *np, struct niu_parent *parent)
{
  #line 8788 
  int lowest_10g;
  #line 8788 
  int lowest_1g;
  #line 8789 
  int num_10g;
  #line 8789 
  int num_1g;
  #line 8790 
  u32 val;
  #line 8791 
  int err;
  #line 8787 
  struct phy_probe_info *info = & parent->phy_probe_info;
  #line 8793 
  num_1g = 0;
  #line 8793 
  num_10g = num_1g;
  #line 8795 
  if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,CP3220") == 0) 
    #line 8795 
    goto _LOR;
  else {
    #line 8795 
    if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,CP3260") == 0) {
      #line 8795 
      _LOR: {
              #line 8797 
              num_10g = 0;
              #line 8798 
              num_1g = 2;
              #line 8799 
              parent->plat_type = (unsigned char)8U;
              #line 8800 
              parent->num_ports = (unsigned char)4U;
              #line 8801 
              val = ((phy_encode(2U,0) | phy_encode(2U,1)) | phy_encode(2U,2)) | phy_encode(2U,3);
            }
    }
    else {
      #line 8805 
      if (cif_strcmp((char *)(& np->vpd.model),(char *)"SUNW,pcie-rfem") == 0) {
        #line 8806 
        num_10g = 2;
        #line 8807 
        num_1g = 0;
        #line 8808 
        parent->num_ports = (unsigned char)2U;
        #line 8809 
        val = phy_encode(1U,0) | phy_encode(1U,1);
      }
      else 
        #line 8811 
        if ((np->flags & 524288U) != 0U && (unsigned int)parent->plat_type == 2U) 
          #line 8814 
          if ((np->flags & 262144U) != 0U) {
            #line 8815 
            val = phy_encode(1U,0) | phy_encode(1U,1);
          }
          else {
            #line 8818 
            val = phy_encode(2U,0) | phy_encode(2U,1);
          }
        else {
          #line 8822 
          err = fill_phy_probe_info(np,parent,info);
          #line 8823 
          if (err != 0) 
                        #line 8824 
                        return err;
          #line 8826 
          num_10g = count_10g_ports(info,& lowest_10g);
          #line 8827 
          num_1g = count_1g_ports(info,& lowest_1g);
          #line 8829 
          switch ((num_10g << 4) | num_1g) {
            #line 8830 
            case 36: 
                     #line 8830 
            ;
            #line 8831 
            if (lowest_1g == 10) 
                                 #line 8832 
                                 parent->plat_type = (unsigned char)3U;
            else 
              #line 8833 
              if (lowest_1g == 26) 
                                   #line 8834 
                                   parent->plat_type = (unsigned char)4U; else 
                                                                    #line 8836 
                                                                    goto unknown_vg_1g_port;
            #line 8839 
            case 34: 
                     #line 8839 
            ;
            #line 8840 
            val = ((phy_encode(1U,0) | phy_encode(1U,1)) | phy_encode(2U,2)) | phy_encode(2U,3);
            #line 8844 
            break;
            #line 8846 
            case 32: 
                     #line 8846 
            ;
            #line 8847 
            val = phy_encode(1U,0) | phy_encode(1U,1);
            #line 8849 
            break;
            #line 8851 
            case 16: 
                     #line 8851 
            ;
            #line 8852 
            val = phy_encode(1U,(int)np->port);
            #line 8853 
            break;
            #line 8855 
            case 20: 
                     #line 8855 
            ;
            #line 8856 
            if (lowest_1g == 10) 
                                 #line 8857 
                                 parent->plat_type = (unsigned char)3U;
            else 
              #line 8858 
              if (lowest_1g == 26) 
                                   #line 8859 
                                   parent->plat_type = (unsigned char)4U; else 
                                                                    #line 8861 
                                                                    goto unknown_vg_1g_port;
            #line 8864 
            case 19: 
                     #line 8864 
            ;
            #line 8865 
            if ((lowest_10g & 7) == 0) {
              #line 8866 
              val = ((phy_encode(1U,0) | phy_encode(2U,1)) | phy_encode(2U,2)) | phy_encode(2U,3);
            }
            else {
              #line 8871 
              val = ((phy_encode(2U,0) | phy_encode(1U,1)) | phy_encode(2U,2)) | phy_encode(2U,3);
            }
            #line 8875 
            break;
            #line 8877 
            case 4: 
                    #line 8877 
            ;
            #line 8878 
            if (lowest_1g == 10) 
                                 #line 8879 
                                 parent->plat_type = (unsigned char)3U;
            else 
              #line 8880 
              if (lowest_1g == 26) 
                                   #line 8881 
                                   parent->plat_type = (unsigned char)4U; else 
                                                                    #line 8883 
                                                                    goto unknown_vg_1g_port;
            #line 8885 
            val = ((phy_encode(2U,0) | phy_encode(2U,1)) | phy_encode(2U,2)) | phy_encode(2U,3);
            #line 8889 
            break;
            #line 8891 
            default: 
                     #line 8891 
            ;
            #line 8892 
            printk((char *)"\001",num_10g,num_1g);
            #line 8894 
            return -22;
          }
        }
    }
  }
  #line 8898 
  parent->port_phy = val;
  #line 8900 
  if ((unsigned int)parent->plat_type == 2U) 
                                             #line 8901 
                                             niu_n2_divide_channels(parent); else 
                                                                    #line 8903 
                                                                    niu_divide_channels(parent,num_10g,num_1g);
  #line 8905 
  niu_divide_rdc_groups(parent,num_10g,num_1g);
  #line 8907 
  return 0;
  #line 8909 
  unknown_vg_1g_port: 
                      #line 8909 
  ;
  #line 8910 
  printk((char *)"\001",lowest_1g);
  #line 8911 
  return -22;
}

#line 8914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_probe_ports(struct niu *np)
{
  #line 8917 
  int err;
  #line 8917 
  int i;
  #line 8916 
  struct niu_parent *parent = np->parent;
  #line 8919 
  if (parent->port_phy == 0U) {
    #line 8920 
    err = walk_phys(np,parent);
    #line 8921 
    if (err != 0) 
                  #line 8922 
                  return err;
    #line 8924 
    niu_set_ldg_timer_res(np,2);
    #line 8925 
    i = 0;
    #line 8925 
    while (i <= 68) {
      #line 8926 
      niu_ldn_irq_enable(np,i,0);
      #line 8925 
      i ++;
    }
  }
  #line 8929 
  if (parent->port_phy == 4294967295U) 
                                       #line 8930 
                                       return -22;
  #line 8932 
  return 0;
}

#line 8935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_classifier_swstate_init(struct niu *np)
{
  #line 8937 
  struct niu_classifier *cp = & np->clas;
  #line 8939 
  cp->tcam_top = (unsigned short)np->port;
  #line 8940 
  cp->tcam_sz = (unsigned short)((int)(np->parent)->tcam_num_entries / (int)(np->parent)->num_ports);
  #line 8941 
  cp->h1_init = 4294967295U;
  #line 8942 
  cp->h2_init = (unsigned short)65535U;
  #line 8944 
  return fflp_early_init(np);
}

#line 8947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_link_config_init(struct niu *np)
{
  #line 8949 
  struct niu_link_config *lp = & np->link_config;
  #line 8951 
  lp->advertising = 4223U;
  #line 8959 
  lp->active_speed = ((unsigned short)65535U);
  #line 8959 
  lp->speed = ((unsigned short)65535U);
  #line 8960 
  lp->duplex = (unsigned char)1U;
  #line 8961 
  lp->active_duplex = (unsigned char)255U;
  #line 8962 
  lp->autoneg = (unsigned char)1U;
  #line 8968 
  lp->loopback_mode = (unsigned char)0U;
  #line 8969 
  return;
}

#line 8972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init_mac_ipp_pcs_base(struct niu *np)
{
  #line 8974 
  switch ((int)np->port) {
    #line 8975 
    case 0: 
            #line 8975 
    ;
    #line 8976 
    np->mac_regs = np->regs + 1572864UL;
    #line 8977 
    np->ipp_off = 0UL;
    #line 8978 
    np->pcs_off = 16384UL;
    #line 8979 
    np->xpcs_off = 8192UL;
    #line 8980 
    break;
    #line 8982 
    case 1: 
            #line 8982 
    ;
    #line 8983 
    np->mac_regs = np->regs + 1597440UL;
    #line 8984 
    np->ipp_off = 32768UL;
    #line 8985 
    np->pcs_off = 40960UL;
    #line 8986 
    np->xpcs_off = 32768UL;
    #line 8987 
    break;
    #line 8989 
    case 2: 
            #line 8989 
    ;
    #line 8990 
    np->mac_regs = np->regs + 1622016UL;
    #line 8991 
    np->ipp_off = 16384UL;
    #line 8992 
    np->pcs_off = 57344UL;
    #line 8993 
    np->xpcs_off = 18446744073709551615UL;
    #line 8994 
    break;
    #line 8996 
    case 3: 
            #line 8996 
    ;
    #line 8997 
    np->mac_regs = np->regs + 1638400UL;
    #line 8998 
    np->ipp_off = 49152UL;
    #line 8999 
    np->pcs_off = 73728UL;
    #line 9000 
    np->xpcs_off = 18446744073709551615UL;
    #line 9001 
    break;
    #line 9003 
    default: 
             #line 9003 
    ;
    #line 9004 
    _dev_err(np->device,(char *)"Port %u is invalid, cannot compute MAC block offset\n",(int)np->port);
    #line 9005 
    return -22;
  }
  #line 9008 
  return 0;
}

#line 9011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_try_msix(struct niu *np, u8 *ldg_num_map)
{
  #line 9013 
  struct msix_entry msi_vec[64U];
  #line 9016 
  int i;
  #line 9016 
  int num_irqs;
  #line 9017 
  u8 first_ldg;
  #line 9024 
  int tmp;
  #line 9014 
  struct niu_parent *parent = np->parent;
  #line 9015 
  struct pci_dev *pdev = np->pdev;
  #line 9019 
  first_ldg = (unsigned char)((int)((unsigned char)(64 / (int)parent->num_ports)) * (int)np->port);
  #line 9020 
  i = 0;
  #line 9020 
  while (64 / (int)parent->num_ports > i) {
    #line 9021 
    *(ldg_num_map + (unsigned long)i) = (unsigned char)((int)((unsigned char)i) + (int)first_ldg);
    #line 9020 
    i ++;
  }
  #line 9024 
  if ((unsigned int)np->port == 0U) 
                                    #line 9024 
                                    tmp = 3; else 
                                                  #line 9024 
                                                  tmp = 1;
  #line 9023 
  num_irqs = ((int)parent->rxchan_per_port[(int)np->port] + (int)parent->txchan_per_port[(int)np->port]) + tmp;
  #line 9026 
  if ((long)(64 / (int)parent->num_ports < num_irqs) != 0L) {
    #line 9027 
    ldv_inline_asm();
    #line 9028 
    ldv_inline_asm();
    #line 9029 
    ldv_inline_asm();
    #line 9026 
    ;
  }
  #line 9028 
  i = 0;
  #line 9028 
  while (i < num_irqs) {
    #line 9029 
    msi_vec[i].vector = 0U;
    #line 9030 
    msi_vec[i].entry = (unsigned short)i;
    #line 9028 
    i ++;
  }
  #line 9033 
  num_irqs = pci_enable_msix_range(pdev,(struct msix_entry *)(& msi_vec),1,num_irqs);
  #line 9034 
  if (num_irqs < 0) {
    #line 9035 
    np->flags &= 4290772991U;
    #line 9036 
    return;
  }
  #line 9039 
  np->flags |= 4194304U;
  #line 9040 
  i = 0;
  #line 9040 
  while (i < num_irqs) {
    #line 9041 
    np->ldg[i].irq = msi_vec[i].vector;
    #line 9040 
    i ++;
  }
  #line 9042 
  np->num_ldg = num_irqs;
  #line 9043 
  return;
}

#line 9045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_n2_irq_init(struct niu *np, u8 *ldg_num_map)
{
  #line 9065 
  return -22;
}

#line 9069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_ldg_init(struct niu *np)
{
  #line 9072 
  u8 ldg_num_map[64U];
  #line 9073 
  int first_chan;
  #line 9073 
  int num_chan;
  #line 9074 
  int i;
  #line 9074 
  int err;
  #line 9074 
  int ldg_rotor;
  #line 9075 
  u8 port;
  #line 9071 
  struct niu_parent *parent = np->parent;
  #line 9077 
  np->num_ldg = 1;
  #line 9078 
  np->ldg[0].irq = (unsigned int)(np->dev)->irq;
  #line 9079 
  if ((unsigned int)parent->plat_type == 2U) {
    #line 9080 
    err = niu_n2_irq_init(np,(u8 *)(& ldg_num_map));
    #line 9081 
    if (err != 0) 
                  #line 9082 
                  return err;
  }
  else 
       #line 9084 
       niu_try_msix(np,(u8 *)(& ldg_num_map));
  #line 9086 
  port = np->port;
  #line 9087 
  i = 0;
  #line 9087 
  while (np->num_ldg > i) {
    {
      #line 9088 
      struct niu_ldg *lp = & np->ldg[i];
      #line 9090 
      netif_napi_add(np->dev,& lp->napi,& niu_poll,64);
      #line 9092 
      lp->np = np;
      #line 9093 
      lp->ldg_num = ldg_num_map[i];
      #line 9094 
      lp->timer = (unsigned char)2U;
      #line 9100 
      if ((unsigned int)(np->parent)->plat_type != 2U) {
        #line 9101 
        err = niu_set_ldg_sid(np,(int)lp->ldg_num,(int)port,i);
        #line 9102 
        if (err != 0) 
                      #line 9103 
                      return err;
      }
    }
    #line 9087 
    i ++;
  }
  #line 9118 
  ldg_rotor = 0;
  #line 9120 
  err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],(int)port + 64);
  #line 9122 
  if (err != 0) 
                #line 9123 
                return err;
  #line 9125 
  ldg_rotor ++;
  #line 9126 
  if (np->num_ldg == ldg_rotor) 
                                #line 9127 
                                ldg_rotor = 0;
  #line 9129 
  if ((unsigned int)port == 0U) {
    #line 9130 
    err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],63);
    #line 9133 
    if (err != 0) 
                  #line 9134 
                  return err;
    #line 9136 
    ldg_rotor ++;
    #line 9137 
    if (np->num_ldg == ldg_rotor) 
                                  #line 9138 
                                  ldg_rotor = 0;
    #line 9140 
    err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],68);
    #line 9143 
    if (err != 0) 
                  #line 9144 
                  return err;
    #line 9146 
    ldg_rotor ++;
    #line 9147 
    if (np->num_ldg == ldg_rotor) 
                                  #line 9148 
                                  ldg_rotor = 0;
  }
  #line 9152 
  first_chan = 0;
  #line 9153 
  i = 0;
  #line 9153 
  while ((int)port > i) {
    #line 9154 
    first_chan = (int)parent->rxchan_per_port[i] + first_chan;
    #line 9153 
    i ++;
  }
  #line 9155 
  num_chan = (int)parent->rxchan_per_port[(int)port];
  #line 9157 
  i = first_chan;
  #line 9157 
  while (first_chan + num_chan > i) {
    #line 9158 
    err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],i);
    #line 9161 
    if (err != 0) 
                  #line 9162 
                  return err;
    #line 9163 
    ldg_rotor ++;
    #line 9164 
    if (np->num_ldg == ldg_rotor) 
                                  #line 9165 
                                  ldg_rotor = 0;
    #line 9157 
    i ++;
  }
  #line 9168 
  first_chan = 0;
  #line 9169 
  i = 0;
  #line 9169 
  while ((int)port > i) {
    #line 9170 
    first_chan = (int)parent->txchan_per_port[i] + first_chan;
    #line 9169 
    i ++;
  }
  #line 9171 
  num_chan = (int)parent->txchan_per_port[(int)port];
  #line 9172 
  i = first_chan;
  #line 9172 
  while (first_chan + num_chan > i) {
    #line 9173 
    err = niu_ldg_assign_ldn(np,parent,(int)ldg_num_map[ldg_rotor],i + 32);
    #line 9176 
    if (err != 0) 
                  #line 9177 
                  return err;
    #line 9178 
    ldg_rotor ++;
    #line 9179 
    if (np->num_ldg == ldg_rotor) 
                                  #line 9180 
                                  ldg_rotor = 0;
    #line 9172 
    i ++;
  }
  #line 9183 
  return 0;
}

#line 9186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_ldg_free(struct niu *np)
{
  #line 9188 
  if ((np->flags & 4194304U) != 0U) 
                                    #line 9189 
                                    pci_disable_msix(np->pdev);
  #line 9190 
  return;
}

#line 9192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_of_props(struct niu *np)
{
  #line 9253 
  return -22;
}

#line 9257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_get_invariants(struct niu *np)
{
  #line 9259 
  int err;
  #line 9259 
  int have_props;
  #line 9260 
  u32 offset;
  #line 9262 
  err = niu_get_of_props(np);
  #line 9263 
  if (err == -19) 
                  #line 9264 
                  return err;
  #line 9266 
  have_props = err == 0;
  #line 9268 
  err = niu_init_mac_ipp_pcs_base(np);
  #line 9269 
  if (err != 0) 
                #line 9270 
                return err;
  #line 9272 
  if (have_props != 0) {
    #line 9273 
    err = niu_get_and_validate_port(np);
    #line 9274 
    if (err != 0) 
                  #line 9275 
                  return err;
  }
  else {
    #line 9278 
    if ((unsigned int)(np->parent)->plat_type == 2U) 
                                                     #line 9279 
                                                     return -22;
    #line 9281 
    writeq(1ULL,np->regs + 13369344UL);
    #line 9282 
    offset = niu_pci_vpd_offset(np);
    #line 9283 
    if ((np->msg_enable & 2U) != 0U) 
                                     #line 9283 
                                     netdev_printk((char *)"\001",np->dev,(char *)"%s() VPD offset [%08x]\n",(char *)"niu_get_invariants",offset);
    #line 9285 
    if (offset != 0U) 
                      #line 9286 
                      niu_pci_vpd_fetch(np,offset);
    #line 9287 
    writeq(0ULL,np->regs + 13369344UL);
    #line 9289 
    if ((np->flags & 8388608U) != 0U) {
      #line 9290 
      niu_pci_vpd_validate(np);
      #line 9291 
      err = niu_get_and_validate_port(np);
      #line 9292 
      if (err != 0) 
                    #line 9293 
                    return err;
    }
    #line 9296 
    if ((np->flags & 8388608U) == 0U) {
      #line 9297 
      err = niu_get_and_validate_port(np);
      #line 9298 
      if (err != 0) 
                    #line 9299 
                    return err;
      #line 9300 
      err = niu_pci_probe_sprom(np);
      #line 9301 
      if (err != 0) 
                    #line 9302 
                    return err;
    }
  }
  #line 9306 
  err = niu_probe_ports(np);
  #line 9307 
  if (err != 0) 
                #line 9308 
                return err;
  #line 9310 
  niu_ldg_init(np);
  #line 9312 
  niu_classifier_swstate_init(np);
  #line 9313 
  niu_link_config_init(np);
  #line 9315 
  err = niu_determine_phy_disposition(np);
  #line 9316 
  if (err == 0) 
                #line 9317 
                err = niu_init_link(np);
  #line 9319 
  return err;
}

#line 9322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct list_head niu_parent_list = {.next = & niu_parent_list, .prev = & niu_parent_list};
#line 9323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct mutex niu_parent_lock = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"niu_parent_lock.wait_lock"}}}}, .wait_list = {.next = & niu_parent_lock.wait_list, .prev = & niu_parent_lock.wait_list}, .magic = (void *)(& niu_parent_lock), .dep_map = {.name = (char *)"niu_parent_lock"}};
#line 9324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_parent_index;
#line 9326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static ssize_t show_port_phy(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 9329 
  void *__mptr;
  #line 9333 
  int i;
  #line 9329 
  __mptr = (void *)dev;
  #line 9329 
  struct platform_device *plat_dev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 9330 
  struct niu_parent *p = dev_get_platdata(& plat_dev->dev);
  #line 9331 
  u32 port_phy = p->port_phy;
  #line 9332 
  char *orig_buf = buf;
  #line 9335 
  if (port_phy + 4294967295U > 4294967293U) 
                                            #line 9337 
                                            return 0L;
  #line 9339 
  i = 0;
  #line 9339 
  while ((int)p->num_ports > i) {
    {
      #line 9340 
      char *type_str;
      #line 9341 
      int type;
      #line 9348 
      char *tmp_2;
      #line 9343 
      type = (int)phy_decode(port_phy,i);
      #line 9344 
      if (type == 1) 
                     #line 9345 
                     type_str = (char *)"10G"; else 
                                                    #line 9347 
                                                    type_str = (char *)"1G";
      #line 9348 
      ;
      #line 9348 
      if (i == 0) 
                  #line 9348 
                  tmp_2 = (char *)"%s"; else 
                                             #line 9348 
                                             tmp_2 = (char *)" %s";
      #line 9350 
      buf += (unsigned long)sprintf(buf,tmp_2,type_str);
    }
    #line 9339 
    i ++;
  }
  #line 9352 
  buf += (unsigned long)sprintf(buf,(char *)"\n");
  #line 9353 
  return buf - orig_buf;
}

#line 9356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static ssize_t show_plat_type(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 9359 
  void *__mptr;
  #line 9361 
  char *type_str;
  #line 9359 
  __mptr = (void *)dev;
  #line 9359 
  struct platform_device *plat_dev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 9360 
  struct niu_parent *p = dev_get_platdata(& plat_dev->dev);
  #line 9363 
  switch ((int)p->plat_type) {
    #line 9364 
    case 1: 
            #line 9364 
    ;
    #line 9365 
    type_str = (char *)"atlas";
    #line 9366 
    break;
    #line 9367 
    case 2: 
            #line 9367 
    ;
    #line 9368 
    type_str = (char *)"niu";
    #line 9369 
    break;
    #line 9370 
    case 3: 
            #line 9370 
    ;
    #line 9371 
    type_str = (char *)"vf_p0";
    #line 9372 
    break;
    #line 9373 
    case 4: 
            #line 9373 
    ;
    #line 9374 
    type_str = (char *)"vf_p1";
    #line 9375 
    break;
    #line 9376 
    default: 
             #line 9376 
    ;
    #line 9377 
    type_str = (char *)"unknown";
    #line 9378 
    break;
  }
  #line 9381 
  return (long)sprintf(buf,(char *)"%s\n",type_str);
}

#line 9384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static ssize_t __show_chan_per_port(struct device *dev, struct device_attribute *attr, char *buf, int rx)
{
  #line 9388 
  void *__mptr;
  #line 9391 
  u8 *arr;
  #line 9392 
  int i;
  #line 9388 
  __mptr = (void *)dev;
  #line 9388 
  struct platform_device *plat_dev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 9389 
  struct niu_parent *p = dev_get_platdata(& plat_dev->dev);
  #line 9390 
  char *orig_buf = buf;
  #line 9394 
  if (rx != 0) 
               #line 9394 
               arr = (u8 *)(& p->rxchan_per_port); else 
                                                        #line 9394 
                                                        arr = (u8 *)(& p->txchan_per_port);
  #line 9396 
  i = 0;
  #line 9396 
  while ((int)p->num_ports > i) {
    #line 9397 
    char *tmp_1;
    #line 9397 
    ;
    #line 9397 
    if (i == 0) 
                #line 9397 
                tmp_1 = (char *)"%d"; else 
                                           #line 9397 
                                           tmp_1 = (char *)" %d";
    #line 9399 
    buf += (unsigned long)sprintf(buf,tmp_1,(int)*(arr + (unsigned long)i));
    #line 9396 
    i ++;
  }
  #line 9401 
  buf += (unsigned long)sprintf(buf,(char *)"\n");
  #line 9403 
  return buf - orig_buf;
}

#line 9406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static ssize_t show_rxchan_per_port(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 9409 
  return __show_chan_per_port(dev,attr,buf,1);
}

#line 9412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static ssize_t show_txchan_per_port(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 9415 
  return __show_chan_per_port(dev,attr,buf,1);
}

#line 9418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static ssize_t show_num_ports(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 9421 
  void *__mptr;
  #line 9421 
  __mptr = (void *)dev;
  #line 9421 
  struct platform_device *plat_dev = ((struct platform_device *)(__mptr + 18446744073709551600U));
  #line 9422 
  struct niu_parent *p = dev_get_platdata(& plat_dev->dev);
  #line 9424 
  return (long)sprintf(buf,(char *)"%d\n",(int)p->num_ports);
}

#line 9427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct device_attribute niu_parent_attributes[6U] = {{.attr = {.name = (char *)"port_phy", .mode = (unsigned short)292U}, .show = & show_port_phy}, {.attr = {.name = (char *)"plat_type", .mode = (unsigned short)292U}, .show = & show_plat_type}, {.attr = {.name = (char *)"rxchan_per_port", .mode = (unsigned short)292U}, .show = & show_rxchan_per_port}, {.attr = {.name = (char *)"txchan_per_port", .mode = (unsigned short)292U}, .show = & show_txchan_per_port}, {.attr = {.name = (char *)"num_ports", .mode = (unsigned short)292U}, .show = & show_num_ports}};
#line 9436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_parent *niu_new_parent(struct niu *np, union niu_parent_id *id, u8 ptype)
{
  #line 9439 
  struct platform_device *plat_dev;
  #line 9440 
  struct niu_parent *p;
  #line 9441 
  int i;
  #line 9459 
  int tmp_2;
  #line 9443 
  plat_dev = platform_device_register_simple((char *)"niu-board",niu_parent_index,(struct resource *)0,0U);
  #line 9445 
  if ((int)IS_ERR((void *)plat_dev) != 0) 
                                          #line 9446 
                                          return (struct niu_parent *)0;
  #line 9448 
  i = 0;
  #line 9448 
  while (niu_parent_attributes[i].attr.name != (char *)0) {
    {
      #line 9449 
      int err = cif_device_create_file(& plat_dev->dev,& niu_parent_attributes[i]);
      #line 9451 
      if (err != 0) 
                    #line 9452 
                    goto fail_unregister;
    }
    #line 9448 
    i ++;
  }
  #line 9455 
  p = (struct niu_parent *)kzalloc(23624UL,3264U);
  #line 9456 
  if (p == (struct niu_parent *)0) 
                                   #line 9457 
                                   goto fail_unregister;
  #line 9459 
  tmp_2 = niu_parent_index;
  #line 9459 
  niu_parent_index ++;
  #line 9459 
  p->index = tmp_2;
  #line 9461 
  plat_dev->dev.platform_data = (void *)p;
  #line 9462 
  p->plat_dev = plat_dev;
  #line 9464 
  memcpy((void *)(& p->id),(void *)id,16UL);
  #line 9465 
  p->plat_type = ptype;
  #line 9466 
  INIT_LIST_HEAD(& p->list);
  #line 9467 
  atomic_set(& p->refcnt,0);
  #line 9468 
  list_add(& p->list,& niu_parent_list);
  #line 9469 
  spinlock_check(& p->lock);
  {
    #line 9469 
    struct lock_class_key __key;
    #line 9469 
    __raw_spin_lock_init(& p->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&p->lock)->rlock",& __key);
  }
  #line 9471 
  p->rxdma_clock_divider = 7500;
  #line 9473 
  p->tcam_num_entries = (unsigned short)256U;
  #line 9474 
  if ((unsigned int)p->plat_type == 2U) 
                                        #line 9475 
                                        p->tcam_num_entries = (unsigned short)128U;
  #line 9477 
  i = 4;
  #line 9477 
  while (i <= 15) {
    {
      #line 9478 
      int index = i + -4;
      #line 9480 
      p->tcam_key[index] = 4ULL;
      #line 9481 
      p->flow_key[index] = 122ULL;
    }
    #line 9477 
    i ++;
  }
  #line 9490 
  i = 0;
  #line 9490 
  while (i <= 68) {
    #line 9491 
    p->ldg_map[i] = (unsigned char)255U;
    #line 9490 
    i ++;
  }
  #line 9493 
  return p;
  #line 9495 
  fail_unregister: 
                   #line 9495 
  ;
  #line 9496 
  platform_device_unregister(plat_dev);
  #line 9497 
  return (struct niu_parent *)0;
}

#line 9500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_parent *niu_get_parent(struct niu *np, union niu_parent_id *id, u8 ptype)
{
  #line 9508 
  void *__mptr;
  #line 9503 
  struct niu_parent *p;
  #line 9503 
  struct niu_parent *tmp;
  #line 9504 
  int port = (int)np->port;
  #line 9506 
  cif_mutex_lock_niu_parent_lock(& niu_parent_lock);
  #line 9507 
  p = (struct niu_parent *)0;
  #line 9508 
  __mptr = (void *)niu_parent_list.next;
  #line 9508 
  tmp = ((struct niu_parent *)(__mptr + 18446744073709551544U));
  #line 9508 
  while (& tmp->list != & niu_parent_list) {
    #line 9508 
    void *__mptr_0;
    #line 9509 
    if (memcmp((void *)id,(void *)(& tmp->id),16UL) == 0) {
      #line 9510 
      p = tmp;
      #line 9511 
      break;
    }
    #line 9508 
    __mptr_0 = (void *)tmp->list.next;
    #line 9508 
    tmp = ((struct niu_parent *)(__mptr_0 + 18446744073709551544U));
  }
  #line 9514 
  if (p == (struct niu_parent *)0) 
                                   #line 9515 
                                   p = niu_new_parent(np,id,(unsigned char)((int)ptype));
  #line 9517 
  if (p != (struct niu_parent *)0) {
    #line 9518 
    char port_name[8U];
    #line 9519 
    int err;
    #line 9521 
    sprintf((char *)(& port_name),(char *)"port%d",port);
    #line 9522 
    err = sysfs_create_link(& (p->plat_dev)->dev.kobj,& (np->device)->kobj,(char *)(& port_name));
    #line 9525 
    if (err == 0) {
      #line 9526 
      p->ports[port] = np;
      #line 9527 
      atomic_inc(& p->refcnt);
    }
  }
  #line 9530 
  cif_mutex_unlock_niu_parent_lock(& niu_parent_lock);
  #line 9532 
  return p;
}

#line 9535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_put_parent(struct niu *np)
{
  #line 9539 
  char port_name[8U];
  #line 9537 
  struct niu_parent *p = np->parent;
  #line 9538 
  u8 port = np->port;
  #line 9541 
  if ((long)(p == (struct niu_parent *)0) != 0L || (long)(p->ports[(int)port] != np) != 0L) {
    #line 9542 
    ldv_inline_asm();
    #line 9543 
    ldv_inline_asm();
    #line 9544 
    ldv_inline_asm();
    #line 9541 
    ;
  }
  #line 9543 
  if ((np->msg_enable & 2U) != 0U) 
                                   #line 9543 
                                   netdev_printk((char *)"\001",np->dev,(char *)"%s() port[%u]\n",(char *)"niu_put_parent",(int)port);
  #line 9546 
  sprintf((char *)(& port_name),(char *)"port%d",(int)port);
  #line 9548 
  cif_mutex_lock_niu_parent_lock(& niu_parent_lock);
  #line 9550 
  sysfs_remove_link(& (p->plat_dev)->dev.kobj,(char *)(& port_name));
  #line 9552 
  p->ports[(int)port] = (struct niu *)0;
  #line 9553 
  np->parent = (struct niu_parent *)0;
  #line 9555 
  if ((int)atomic_dec_and_test(& p->refcnt) != 0) {
    #line 9556 
    list_del(& p->list);
    #line 9557 
    platform_device_unregister(p->plat_dev);
  }
  #line 9560 
  cif_mutex_unlock_niu_parent_lock(& niu_parent_lock);
  #line 9561 
  return;
}

#line 9563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void *niu_pci_alloc_coherent(struct device *dev, size_t size, u64 *handle, gfp_t flag)
{
  #line 9566 
  dma_addr_t dh;
  #line 9567 
  void *ret;
  #line 9569 
  ret = dma_alloc_coherent(dev,size,& dh,flag);
  #line 9570 
  if (ret != (void *)0) 
                        #line 9571 
                        *handle = dh;
  #line 9572 
  return ret;
}

#line 9575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pci_free_coherent(struct device *dev, size_t size, void *cpu_addr, u64 handle)
{
  #line 9578 
  dma_free_coherent(dev,size,cpu_addr,handle);
  #line 9579 
  return;
}

#line 9581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 niu_pci_map_page(struct device *dev, struct page *page, unsigned long offset, size_t size, enum dma_data_direction direction)
{
  #line 9585 
  return dma_map_page_attrs(dev,page,offset,size,direction,0UL);
}

#line 9588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pci_unmap_page(struct device *dev, u64 dma_address, size_t size, enum dma_data_direction direction)
{
  #line 9591 
  dma_unmap_page_attrs(dev,dma_address,size,direction,0UL);
  #line 9592 
  return;
}

#line 9594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static u64 niu_pci_map_single(struct device *dev, void *cpu_addr, size_t size, enum dma_data_direction direction)
{
  #line 9598 
  return dma_map_single_attrs(dev,cpu_addr,size,direction,0UL);
}

#line 9601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pci_unmap_single(struct device *dev, u64 dma_address, size_t size, enum dma_data_direction direction)
{
  #line 9605 
  dma_unmap_single_attrs(dev,dma_address,size,direction,0UL);
  #line 9606 
  return;
}

#line 9608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct niu_ops niu_pci_ops = {.alloc_coherent = & niu_pci_alloc_coherent, .free_coherent = & niu_pci_free_coherent, .map_page = & niu_pci_map_page, .unmap_page = & niu_pci_unmap_page, .map_single = & niu_pci_map_single, .unmap_single = & niu_pci_unmap_single};
#line 9617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_driver_version(void)
{
  #line 9619 
  int niu_version_printed;
  #line 9621 
  int tmp;
  #line 9621 
  tmp = niu_version_printed;
  #line 9621 
  niu_version_printed ++;
  #line 9621 
  ;
  #line 9621 
  if (tmp == 0) 
                #line 9622 
                printk((char *)"\001",(char *)(& version));
  #line 9623 
  return;
}

#line 9625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct net_device *niu_alloc_and_init(struct device *gen_dev, struct pci_dev *pdev, struct platform_device *op, struct niu_ops *ops, u8 port)
{
  #line 9630 
  struct net_device *dev;
  #line 9631 
  struct niu *np;
  #line 9633 
  dev = cif_alloc_etherdev_mqs(38176,24U,24U);
  #line 9634 
  if (dev == (struct net_device *)0) 
                                     #line 9635 
                                     return (struct net_device *)0;
  #line 9637 
  dev->dev.parent = gen_dev;
  #line 9639 
  np = (struct niu *)netdev_priv(dev);
  #line 9640 
  np->dev = dev;
  #line 9641 
  np->pdev = pdev;
  #line 9642 
  np->op = op;
  #line 9643 
  np->device = gen_dev;
  #line 9644 
  np->ops = ops;
  #line 9646 
  np->msg_enable = (unsigned int)niu_debug;
  #line 9648 
  spinlock_check(& np->lock);
  {
    #line 9648 
    struct lock_class_key __key;
    #line 9648 
    __raw_spin_lock_init(& np->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&np->lock)->rlock",& __key);
  }
  {
    #line 9649 
    struct lock_class_key __key_0;
    #line 9649 
    __init_work(& np->reset_task,0);
    #line 9649 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 9649 
    np->reset_task.data = __constr_expr_41;
    #line 9649 
    lockdep_init_map(& np->reset_task.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 9649 
    INIT_LIST_HEAD(& np->reset_task.entry);
    #line 9649 
    np->reset_task.func = & niu_reset_task;
  }
  #line 9651 
  np->port = port;
  #line 9653 
  return dev;
}

#line 9656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct net_device_ops niu_netdev_ops = {.ndo_open = & niu_open, .ndo_stop = & niu_close, .ndo_start_xmit = & niu_start_xmit, .ndo_set_rx_mode = & niu_set_rx_mode, .ndo_set_mac_address = & niu_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & niu_ioctl, .ndo_change_mtu = & niu_change_mtu, .ndo_tx_timeout = & niu_tx_timeout, .ndo_get_stats64 = & niu_get_stats};
#line 9669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_assign_netdev_ops(struct net_device *dev)
{
  #line 9671 
  dev->netdev_ops = & niu_netdev_ops;
  #line 9672 
  dev->ethtool_ops = & niu_ethtool_ops;
  #line 9673 
  dev->watchdog_timeo = 1250;
  #line 9674 
  return;
}

#line 9676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_device_announce(struct niu *np)
{
  #line 9678 
  struct net_device *dev = np->dev;
  #line 9680 
  printk((char *)"\001",(char *)(& dev->name),dev->dev_addr);
  #line 9682 
  if ((unsigned int)(np->parent)->plat_type == 8U) {
    #line 9683 
    char *tmp;
    #line 9683 
    char *tmp_0;
    #line 9683 
    char *tmp_1;
    #line 9683 
    char *tmp_2;
    #line 9683 
    char *tmp_3;
    #line 9683 
    ;
    #line 9683 
    if ((unsigned int)np->mac_xcvr != 1U) {
      #line 9683 
      if ((unsigned int)np->mac_xcvr == 2U) 
                                            #line 9683 
                                            tmp = (char *)"PCS"; else 
                                                                   #line 9683 
                                                                   tmp = (char *)"XPCS";
      #line 9683 
      tmp_0 = tmp;
    }
    else 
         #line 9683 
         tmp_0 = (char *)"MII";
    #line 9683 
    if ((np->flags & 131072U) != 0U) 
                                     #line 9683 
                                     tmp_1 = (char *)"RGMII FIBER"; else 
                                                                    #line 9683 
                                                                    tmp_1 = (char *)"SERDES";
    #line 9683 
    if ((np->flags & 262144U) != 0U) 
                                     #line 9683 
                                     tmp_2 = (char *)"10G"; else 
                                                                 #line 9683 
                                                                 tmp_2 = (char *)"1G";
    #line 9683 
    if ((np->flags & 65536U) != 0U) 
                                    #line 9683 
                                    tmp_3 = (char *)"XMAC"; else 
                                                                 #line 9683 
                                                                 tmp_3 = (char *)"BMAC";
    #line 9683 
    ;
    #line 9683 
    printk((char *)"\001",(char *)(& dev->name),tmp_3,tmp_2,tmp_1,tmp_0,(char *)(& np->vpd.phy_type));
  }
  else {
    #line 9692 
    char *tmp_4;
    #line 9692 
    char *tmp_6;
    #line 9692 
    char *tmp_5;
    #line 9692 
    char *tmp_7;
    #line 9692 
    char *tmp_8;
    #line 9692 
    char *tmp_9;
    #line 9692 
    ;
    #line 9692 
    if ((unsigned int)np->mac_xcvr != 1U) {
      #line 9692 
      if ((unsigned int)np->mac_xcvr == 2U) 
                                            #line 9692 
                                            tmp_4 = (char *)"PCS"; else 
                                                                    #line 9692 
                                                                    tmp_4 = (char *)"XPCS";
      #line 9692 
      tmp_5 = tmp_4;
    }
    else 
         #line 9692 
         tmp_5 = (char *)"MII";
    #line 9692 
    if ((np->flags & 131072U) == 0U) {
      #line 9692 
      if ((np->flags & 524288U) != 0U) 
                                       #line 9692 
                                       tmp_6 = (char *)"SERDES"; else 
                                                                   #line 9692 
                                                                   tmp_6 = (char *)"COPPER";
      #line 9692 
      tmp_7 = tmp_6;
    }
    else 
         #line 9692 
         tmp_7 = (char *)"FIBER";
    #line 9692 
    if ((np->flags & 262144U) != 0U) 
                                     #line 9692 
                                     tmp_8 = (char *)"10G"; else 
                                                                 #line 9692 
                                                                 tmp_8 = (char *)"1G";
    #line 9692 
    if ((np->flags & 65536U) != 0U) 
                                    #line 9692 
                                    tmp_9 = (char *)"XMAC"; else 
                                                                 #line 9692 
                                                                 tmp_9 = (char *)"BMAC";
    #line 9692 
    ;
    #line 9692 
    printk((char *)"\001",(char *)(& dev->name),tmp_9,tmp_8,tmp_7,tmp_5,(char *)(& np->vpd.phy_type));
  }
  #line 9693 
  return;
}

#line 9705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_set_basic_features(struct net_device *dev)
{
  #line 9707 
  dev->hw_features = 274877906953ULL;
  #line 9708 
  dev->features = (dev->features | dev->hw_features) | 549755813888ULL;
  #line 9709 
  return;
}

#line 9711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_pci_init_one(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 9714 
  union niu_parent_id parent_id;
  #line 9715 
  struct net_device *dev;
  #line 9716 
  struct niu *np;
  #line 9717 
  int err;
  #line 9718 
  u64 dma_mask;
  #line 9720 
  niu_driver_version();
  #line 9722 
  err = pci_enable_device(pdev);
  #line 9723 
  if (err != 0) {
    #line 9724 
    _dev_err(& pdev->dev,(char *)"Cannot enable PCI device, aborting\n");
    #line 9725 
    return err;
  }
  #line 9728 
  if ((pdev->resource[0].flags & 512UL) == 0UL || (pdev->resource[2].flags & 512UL) == 0UL) {
    #line 9730 
    _dev_err(& pdev->dev,(char *)"Cannot find proper PCI device base addresses, aborting\n");
    #line 9731 
    err = -19;
    #line 9732 
    goto err_out_disable_pdev;
  }
  #line 9735 
  err = pci_request_regions(pdev,(char *)"niu");
  #line 9736 
  if (err != 0) {
    #line 9737 
    _dev_err(& pdev->dev,(char *)"Cannot obtain PCI resources, aborting\n");
    #line 9738 
    goto err_out_disable_pdev;
  }
  #line 9741 
  if (! pci_is_pcie(pdev)) {
    #line 9742 
    _dev_err(& pdev->dev,(char *)"Cannot find PCI Express capability, aborting\n");
    #line 9743 
    err = -19;
    #line 9744 
    goto err_out_free_res;
  }
  #line 9747 
  dev = niu_alloc_and_init(& pdev->dev,pdev,(struct platform_device *)0,& niu_pci_ops,(unsigned char)((int)((unsigned char)pdev->devfn) & 7));
  #line 9749 
  if (dev == (struct net_device *)0) {
    #line 9750 
    err = -12;
    #line 9751 
    goto err_out_free_res;
  }
  #line 9753 
  np = (struct niu *)netdev_priv(dev);
  #line 9755 
  memset((void *)(& parent_id),0,16UL);
  #line 9756 
  parent_id.pci.domain = pci_domain_nr(pdev->bus);
  #line 9757 
  parent_id.pci.bus = (int)(pdev->bus)->number;
  #line 9758 
  parent_id.pci.device = (int)(pdev->devfn >> 3) & 31;
  #line 9760 
  np->parent = niu_get_parent(np,& parent_id,(unsigned char)1);
  #line 9762 
  if (np->parent == (struct niu_parent *)0) {
    #line 9763 
    err = -12;
    #line 9764 
    goto err_out_free_dev;
  }
  #line 9767 
  pcie_capability_clear_and_set_word(pdev,8,(unsigned short)2048,(unsigned short)31);
  #line 9773 
  dma_mask = 17592186044415ULL;
  #line 9774 
  err = pci_set_dma_mask(pdev,dma_mask);
  #line 9775 
  if (err == 0) {
    #line 9776 
    dev->features |= 32ULL;
    #line 9777 
    err = pci_set_consistent_dma_mask(pdev,dma_mask);
    #line 9778 
    if (err != 0) {
      #line 9779 
      _dev_err(& pdev->dev,(char *)"Unable to obtain 44 bit DMA for consistent allocations, aborting\n");
      #line 9780 
      goto err_out_release_parent;
    }
  }
  #line 9783 
  if (err != 0) {
    #line 9784 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 9785 
    if (err != 0) {
      #line 9786 
      _dev_err(& pdev->dev,(char *)"No usable DMA configuration, aborting\n");
      #line 9787 
      goto err_out_release_parent;
    }
  }
  #line 9791 
  niu_set_basic_features(dev);
  #line 9793 
  dev->priv_flags |= 4096U;
  #line 9795 
  np->regs = pci_ioremap_bar(pdev,0);
  #line 9796 
  if (np->regs == (void *)0) {
    #line 9797 
    _dev_err(& pdev->dev,(char *)"Cannot map device registers, aborting\n");
    #line 9798 
    err = -12;
    #line 9799 
    goto err_out_release_parent;
  }
  #line 9802 
  pci_set_master(pdev);
  #line 9803 
  pci_save_state(pdev);
  #line 9805 
  dev->irq = (int)pdev->irq;
  #line 9808 
  dev->min_mtu = 68U;
  #line 9809 
  dev->max_mtu = 9216U;
  #line 9811 
  niu_assign_netdev_ops(dev);
  #line 9813 
  err = niu_get_invariants(np);
  #line 9814 
  if (err != 0) {
    #line 9815 
    if (err != -19) 
                    #line 9816 
                    _dev_err(& pdev->dev,(char *)"Problem fetching invariants of chip, aborting\n");
    #line 9817 
    goto err_out_iounmap;
  }
  #line 9820 
  err = cif_register_netdev(dev);
  #line 9821 
  if (err != 0) {
    #line 9822 
    _dev_err(& pdev->dev,(char *)"Cannot register net device, aborting\n");
    #line 9823 
    goto err_out_iounmap;
  }
  #line 9826 
  pci_set_drvdata(pdev,(void *)dev);
  #line 9828 
  niu_device_announce(np);
  #line 9830 
  return 0;
  #line 9832 
  err_out_iounmap: 
                   #line 9832 
  ;
  #line 9833 
  if (np->regs != (void *)0) {
    #line 9834 
    iounmap(np->regs);
    #line 9835 
    np->regs = (void *)0;
  }
  #line 9838 
  err_out_release_parent: 
                          #line 9838 
  ;
  #line 9839 
  niu_put_parent(np);
  #line 9841 
  err_out_free_dev: 
                    #line 9841 
  ;
  #line 9842 
  cif_free_netdev(dev);
  #line 9844 
  err_out_free_res: 
                    #line 9844 
  ;
  #line 9845 
  pci_release_regions(pdev);
  #line 9847 
  err_out_disable_pdev: 
                        #line 9847 
  ;
  #line 9848 
  pci_disable_device(pdev);
  #line 9850 
  return err;
}

#line 9853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_pci_remove_one(struct pci_dev *pdev)
{
  #line 9855 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 9857 
  if (dev != (struct net_device *)0) {
    #line 9858 
    struct niu *np = netdev_priv(dev);
    #line 9860 
    cif_unregister_netdev(dev);
    #line 9861 
    if (np->regs != (void *)0) {
      #line 9862 
      iounmap(np->regs);
      #line 9863 
      np->regs = (void *)0;
    }
    #line 9866 
    niu_ldg_free(np);
    #line 9868 
    niu_put_parent(np);
    #line 9870 
    cif_free_netdev(dev);
    #line 9871 
    pci_release_regions(pdev);
    #line 9872 
    pci_disable_device(pdev);
  }
  #line 9874 
  return;
}

#line 9876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 9880 
  unsigned long flags;
  #line 9878 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 9879 
  struct niu *np = netdev_priv(dev);
  #line 9882 
  if (! netif_running(dev)) 
                            #line 9883 
                            return 0;
  #line 9885 
  cif_flush_work(& np->reset_task);
  #line 9886 
  niu_netif_stop(np);
  #line 9888 
  cif_del_timer_sync(& np->timer);
  #line 9890 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 9891 
  niu_enable_interrupts(np,0);
  #line 9892 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 9894 
  netif_device_detach(dev);
  #line 9896 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 9897 
  niu_stop_hw(np);
  #line 9898 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 9900 
  pci_save_state(pdev);
  #line 9902 
  return 0;
}

#line 9905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_resume(struct pci_dev *pdev)
{
  #line 9909 
  unsigned long flags;
  #line 9910 
  int err;
  #line 9907 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 9908 
  struct niu *np = netdev_priv(dev);
  #line 9912 
  if (! netif_running(dev)) 
                            #line 9913 
                            return 0;
  #line 9915 
  pci_restore_state(pdev);
  #line 9917 
  netif_device_attach(dev);
  #line 9919 
  cif___ldv_spin_lock_lock_of_niu(& np->lock);
  #line 9921 
  err = niu_init_hw(np);
  #line 9922 
  if (err == 0) {
    #line 9923 
    np->timer.expires = jiffies + 250UL;
    #line 9924 
    add_timer(& np->timer);
    #line 9925 
    niu_netif_start(np);
  }
  #line 9928 
  cif_spin_unlock_irqrestore_lock_of_niu(& np->lock,flags);
  #line 9930 
  return err;
}

#line 9933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static struct pci_driver niu_pci_driver = {.name = (char *)"niu", .id_table = (struct pci_device_id *)(& niu_pci_tbl), .probe = & niu_pci_init_one, .remove = & niu_pci_remove_one, .suspend = & niu_suspend, .resume = & niu_resume};
#line 10171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static int niu_init(void)
{
  #line 10173 
  int err = 0;
  #line 10177 
  niu_debug = (int)netif_msg_init(debug,7);
  #line 10183 
  if (err == 0) 
                #line 10184 
                err = cif___pci_register_driver(& niu_pci_driver,& __this_module,(char *)"niu");
  #line 10191 
  return err;
}

#line 10194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sun/niu.c"
static void niu_exit(void)
{
  #line 10196 
  cif_pci_unregister_driver(& niu_pci_driver);
  #line 10197 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
struct pci_driver *emg_alias_niu_pci_driver = & niu_pci_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
struct pci_device_id (*emg_alias_niu_pci_tbl)[2U] = & niu_pci_tbl;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1);
#line 102 
#line 102 
_Bool emg_flush_work(struct work_struct *arg0);
#line 103 
#line 103 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 104 
#line 104 
void emg_free_netdev(struct net_device *arg0);
#line 105 
#line 105 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 106 
#line 106 
int emg_register_netdev(struct net_device *arg0);
#line 107 
#line 107 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 108 
#line 108 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 109 
#line 109 
void emg_unregister_netdev(struct net_device *arg0);
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_change_mtu(struct net_device *arg0, int arg1)
{
  #line 114 
  return niu_change_mtu(arg0,arg1);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_close(struct net_device *arg0)
{
  #line 119 
  return niu_close(arg0);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 124 
  niu_get_drvinfo(arg0,arg1);
  #line 125 
  return;
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 129 
  return niu_get_eeprom(arg0,arg1,arg2);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_get_eeprom_len(struct net_device *arg0)
{
  #line 134 
  return niu_get_eeprom_len(arg0);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 139 
  niu_get_ethtool_stats(arg0,arg1,arg2);
  #line 140 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 144 
  return niu_get_link_ksettings(arg0,arg1);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
unsigned int emg_wrapper_niu_get_msglevel(struct net_device *arg0)
{
  #line 149 
  return niu_get_msglevel(arg0);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_get_nfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 154 
  return niu_get_nfc(arg0,arg1,arg2);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 159 
  return niu_get_sset_count(arg0,arg1);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_get_stats(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 164 
  niu_get_stats(arg0,arg1);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 169 
  niu_get_strings(arg0,arg1,arg2);
  #line 170 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
enum irqreturn emg_wrapper_niu_interrupt(int arg0, void *arg1)
{
  #line 174 
  return niu_interrupt(arg0,arg1);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 179 
  return niu_ioctl(arg0,arg1,arg2);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_nway_reset(struct net_device *arg0)
{
  #line 184 
  return niu_nway_reset(arg0);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_open(struct net_device *arg0)
{
  #line 189 
  return niu_open(arg0);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_pci_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 194 
  return niu_pci_init_one(arg0,arg1);
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_pci_remove_one(struct pci_dev *arg0)
{
  #line 199 
  niu_pci_remove_one(arg0);
  #line 200 
  return;
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_resume(struct pci_dev *arg0)
{
  #line 204 
  return niu_resume(arg0);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 209 
  return niu_set_link_ksettings(arg0,arg1);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 214 
  return niu_set_mac_addr(arg0,arg1);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 219 
  niu_set_msglevel(arg0,arg1);
  #line 220 
  return;
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_set_nfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 224 
  return niu_set_nfc(arg0,arg1);
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 229 
  return niu_set_phys_id(arg0,arg1);
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_set_rx_mode(struct net_device *arg0)
{
  #line 234 
  niu_set_rx_mode(arg0);
  #line 235 
  return;
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
enum netdev_tx emg_wrapper_niu_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 239 
  return niu_start_xmit(arg0,arg1);
}

#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_wrapper_niu_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 244 
  return niu_suspend(arg0,arg1);
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_wrapper_niu_tx_timeout(struct net_device *arg0)
{
  #line 249 
  niu_tx_timeout(arg0);
  #line 250 
  return;
}

#line 253  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
long emg_wrapper_show_num_ports(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 254 
  return show_num_ports(arg0,arg1,arg2);
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
long emg_wrapper_show_plat_type(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 259 
  return show_plat_type(arg0,arg1,arg2);
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
long emg_wrapper_show_port_phy(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 264 
  return show_port_phy(arg0,arg1,arg2);
}

#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
long emg_wrapper_show_rxchan_per_port(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 269 
  return show_rxchan_per_port(arg0,arg1,arg2);
}

#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
long emg_wrapper_show_txchan_per_port(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 274 
  return show_txchan_per_port(arg0,arg1,arg2);
}

#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
void emg_niu_exit(void)
{
  #line 279 
  niu_exit();
  #line 280 
  return;
}

#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
int emg_niu_init(void)
{
  #line 283 
  return niu_init();
}

#line 301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 304 
  ldv_set_bit(nr,addr);
  #line 305 
  return;
}

#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 311 
  ldv_clear_bit(nr,addr);
  #line 312 
  return;
}

#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 318 
  ldv_init_list_head(list);
  #line 319 
  return;
}

#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 325 
  return ldv_strncmp(cs,ct,count);
}

#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static size_t cif_strlen(char *s)
{
  #line 332 
  return ldv_strlen(s);
}

#line 343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void atomic_add(int i, atomic_t *v)
{
  #line 346 
  ldv_atomic_add(i,v);
  #line 347 
  return;
}

#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 367 
  ldv_atomic_inc(v);
  #line 368 
  return;
}

#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 402 
  return ldv_is_err(ptr);
}

#line 637  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 640 
  return ldv_kcalloc(n,size,flags);
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 661 
  return ldv_kzalloc(size,flags);
}

#line 719  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 722 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 724 
  spin_lock(lock);
  #line 725 
  return;
}

#line 759  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 762 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 764 
  spin_unlock(lock);
  #line 765 
  return;
}

#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 869 
  return emg_schedule_work(work);
}

#line 980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 983 
  return ldv_strcmp(cs,ct);
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif___ldv_spin_lock_lock_of_niu(spinlock_t *lock)
{
  #line 990 
  ldv_spin_model_lock((char *)"lock_of_niu");
  #line 992 
  __ldv_spin_lock(lock);
  #line 993 
  return;
}

#line 996  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_niu(spinlock_t *lock, unsigned long flags)
{
  #line 999 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  #line 1001 
  spin_unlock_irqrestore(lock,flags);
  #line 1002 
  return;
}

#line 1005  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif___ldv_spin_lock_lock_of_niu_parent(spinlock_t *lock)
{
  #line 1008 
  ldv_spin_model_lock((char *)"lock_of_niu_parent");
  #line 1010 
  __ldv_spin_lock(lock);
  #line 1011 
  return;
}

#line 1014  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_niu_parent(spinlock_t *lock, unsigned long flags)
{
  #line 1017 
  ldv_spin_model_unlock((char *)"lock_of_niu_parent");
  #line 1019 
  spin_unlock_irqrestore(lock,flags);
  #line 1020 
  return;
}

#line 1023  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1027 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1035 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_lock_irq_lock_of_niu(spinlock_t *lock)
{
  #line 1042 
  ldv_spin_model_lock((char *)"lock_of_niu");
  #line 1044 
  spin_lock_irq(lock);
  #line 1045 
  return;
}

#line 1048  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_spin_unlock_irq_lock_of_niu(spinlock_t *lock)
{
  #line 1051 
  ldv_spin_model_unlock((char *)"lock_of_niu");
  #line 1053 
  spin_unlock_irq(lock);
  #line 1054 
  return;
}

#line 1057  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 1061 
  return emg_del_timer_sync(timer);
}

#line 1065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry)
{
  #line 1069 
  return emg_device_create_file(device,entry);
}

#line 1073  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_mutex_lock_niu_parent_lock(struct mutex *lock)
{
  #line 1076 
  ldv_mutex_model_lock(lock,(char *)"niu_parent_lock");
  #line 1077 
  return;
}

#line 1080  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_mutex_unlock_niu_parent_lock(struct mutex *lock)
{
  #line 1083 
  ldv_mutex_model_unlock(lock,(char *)"niu_parent_lock");
  #line 1084 
  return;
}

#line 1087  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1091 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1095  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1099 
  return emg_register_netdev(dev);
}

#line 1103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1107 
  emg_free_netdev(dev);
  #line 1108 
  return;
}

#line 1111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1115 
  emg_unregister_netdev(dev);
  #line 1116 
  return;
}

#line 1119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static bool cif_flush_work(struct work_struct *work)
{
  #line 1123 
  return emg_flush_work(work);
}

#line 1127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1131 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/0/concurrency safety/weaver/niu.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1139 
  emg_pci_unregister_driver(dev);
  #line 1140 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 92  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
#line 248 
void *emg_devattr_devattr_instance_show_num_ports(void *arg0);
#line 93 
#line 328 
void *emg_devattr_devattr_instance_show_plat_type(void *arg0);
#line 94 
#line 408 
void *emg_devattr_devattr_instance_show_port_phy(void *arg0);
#line 95 
#line 488 
void *emg_devattr_devattr_instance_show_rxchan_per_port(void *arg0);
#line 96 
#line 568 
void *emg_devattr_devattr_instance_show_txchan_per_port(void *arg0);
#line 98 
#line 239 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 99 
#line 205 
void emg_dispatch_deregister_9(struct pci_driver *arg0);
#line 100 
#line 196 
void emg_dispatch_irq_deregister_7(int arg0);
#line 101 
#line 225 
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 102 
#line 214 
void emg_dispatch_register_10(struct net_device *arg0);
#line 103 
#line 131 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 104 
#line 142 
void emg_dispatch_register_5(struct device *arg0, struct device_attribute *arg1);
#line 105 
#line 1513 
void *emg_entry_point_insmod(void *arg0);
#line 109 
#line 648 
void *emg_interrupt_interrupt_scenario_niu_interrupt(void *arg0);
#line 110 
#line 711 
void *emg_net_random_allocationless_scenario_niu_get_drvinfo(void *arg0);
#line 111 
#line 1031 
void *emg_pci_pci_scenario_niu_pci_driver(void *arg0);
#line 117 
#line 1542 
int main(void);
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 132 
  int ret;
  #line 133 
  struct emg_struct_pci_scenario_niu_pci_driver_21 *cf_arg_21;
  #line 134 
  cf_arg_21 = (struct emg_struct_pci_scenario_niu_pci_driver_21 *)ldv_xmalloc(16UL);
  #line 135 
  cf_arg_21->arg0 = arg0;
  #line 136 
  ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_pci_pci_scenario_niu_pci_driver,(void *)cf_arg_21);
  #line 137 
  __VERIFIER_assume(ret == 0);
  #line 138 
  return;
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct device *arg0, struct device_attribute *arg1)
{
  #line 143 
  int ret;
  #line 144 
  struct emg_struct_devattr_instance_show_num_ports_14 *cf_arg_14;
  #line 145 
  struct emg_struct_devattr_instance_show_num_ports_14 *cf_arg_15;
  #line 146 
  struct emg_struct_devattr_instance_show_num_ports_14 *cf_arg_16;
  #line 147 
  struct emg_struct_devattr_instance_show_num_ports_14 *cf_arg_17;
  #line 148 
  struct emg_struct_devattr_instance_show_num_ports_14 *cf_arg_18;
  #line 149 
  switch (ldv_undef_int()) {
    #line 150 
    case 0: 
            #line 150 
    ;
    #line 151 
    cf_arg_14 = (struct emg_struct_devattr_instance_show_num_ports_14 *)ldv_xmalloc(24UL);
    #line 152 
    cf_arg_14->arg0 = arg0;
    #line 153 
    cf_arg_14->arg1 = arg1;
    #line 154 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_devattr_devattr_instance_show_num_ports,(void *)cf_arg_14);
    #line 155 
    __VERIFIER_assume(ret == 0);
    #line 156 
    break;
    #line 158 
    case 1: 
            #line 158 
    ;
    #line 159 
    cf_arg_15 = (struct emg_struct_devattr_instance_show_num_ports_14 *)ldv_xmalloc(24UL);
    #line 160 
    cf_arg_15->arg0 = arg0;
    #line 161 
    cf_arg_15->arg1 = arg1;
    #line 162 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_devattr_devattr_instance_show_plat_type,(void *)cf_arg_15);
    #line 163 
    __VERIFIER_assume(ret == 0);
    #line 164 
    break;
    #line 166 
    case 2: 
            #line 166 
    ;
    #line 167 
    cf_arg_16 = (struct emg_struct_devattr_instance_show_num_ports_14 *)ldv_xmalloc(24UL);
    #line 168 
    cf_arg_16->arg0 = arg0;
    #line 169 
    cf_arg_16->arg1 = arg1;
    #line 170 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_devattr_devattr_instance_show_port_phy,(void *)cf_arg_16);
    #line 171 
    __VERIFIER_assume(ret == 0);
    #line 172 
    break;
    #line 174 
    case 3: 
            #line 174 
    ;
    #line 175 
    cf_arg_17 = (struct emg_struct_devattr_instance_show_num_ports_14 *)ldv_xmalloc(24UL);
    #line 176 
    cf_arg_17->arg0 = arg0;
    #line 177 
    cf_arg_17->arg1 = arg1;
    #line 178 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_devattr_devattr_instance_show_rxchan_per_port,(void *)cf_arg_17);
    #line 179 
    __VERIFIER_assume(ret == 0);
    #line 180 
    break;
    #line 182 
    case 4: 
            #line 182 
    ;
    #line 183 
    cf_arg_18 = (struct emg_struct_devattr_instance_show_num_ports_14 *)ldv_xmalloc(24UL);
    #line 184 
    cf_arg_18->arg0 = arg0;
    #line 185 
    cf_arg_18->arg1 = arg1;
    #line 186 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_devattr_devattr_instance_show_txchan_per_port,(void *)cf_arg_18);
    #line 187 
    __VERIFIER_assume(ret == 0);
    #line 188 
    break;
    #line 190 
    default: 
             #line 190 
    ;
    #line 190 
    __VERIFIER_assume(0);
  }
  #line 192 
  return;
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_7(int arg0)
{
  #line 197 
  int ret;
  #line 198 
  struct emg_struct_free_irq_7 *cf_arg_19;
  #line 199 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 200 
  __VERIFIER_assume(ret == 0);
  #line 201 
  return;
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_9(struct pci_driver *arg0)
{
  #line 206 
  int ret;
  #line 207 
  struct emg_struct_pci_scenario_niu_pci_driver_21 *cf_arg_21;
  #line 208 
  ret = pthread_join(emg_thread_21,(void **)0);
  #line 209 
  __VERIFIER_assume(ret == 0);
  #line 210 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_10(struct net_device *arg0)
{
  #line 215 
  int ret;
  #line 216 
  struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 *cf_arg_20;
  #line 217 
  cf_arg_20 = (struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 *)ldv_xmalloc(16UL);
  #line 218 
  cf_arg_20->arg0 = arg0;
  #line 219 
  ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_niu_get_drvinfo,(void *)cf_arg_20);
  #line 220 
  __VERIFIER_assume(ret == 0);
  #line 221 
  return;
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 226 
  int ret;
  #line 227 
  struct emg_struct_interrupt_scenario_niu_interrupt_19 *cf_arg_19;
  #line 228 
  cf_arg_19 = (struct emg_struct_interrupt_scenario_niu_interrupt_19 *)ldv_xmalloc(40UL);
  #line 229 
  cf_arg_19->arg0 = arg0;
  #line 230 
  cf_arg_19->arg1 = arg1;
  #line 231 
  cf_arg_19->arg2 = arg2;
  #line 232 
  cf_arg_19->arg3 = arg3;
  #line 233 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_niu_interrupt,(void *)cf_arg_19);
  #line 234 
  __VERIFIER_assume(ret == 0);
  #line 235 
  return;
}

#line 239  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 240 
  int ret;
  #line 241 
  struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 *cf_arg_20;
  #line 242 
  ret = pthread_join(emg_thread_20,(void **)0);
  #line 243 
  __VERIFIER_assume(ret == 0);
  #line 244 
  return;
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_show_num_ports(void *arg0)
{
  #line 251 
  struct device_attribute *emg_14_devattr;
  #line 252 
  struct device *emg_14_device;
  #line 253 
  char *emg_14_emg_param_2_0;
  #line 254 
  char *emg_14_emg_param_2_1;
  #line 255 
  unsigned long emg_14_emg_param_3_2;
  #line 256 
  int emg_repeat_cnt_main_14 = 1;
  #line 258 
  struct emg_struct_devattr_instance_show_num_ports_14 *data = (struct emg_struct_devattr_instance_show_num_ports_14 *)arg0;
  #line 263 
  if (data != (struct emg_struct_devattr_instance_show_num_ports_14 *)0) {
    #line 264 
    emg_14_device = data->arg0;
    #line 265 
    emg_14_devattr = data->arg1;
    #line 266 
    ldv_free((void *)data);
  }
  #line 271 
  goto emg_main_14;
  #line 275 
  return (void *)0;
  #line 278 
  emg_main_14: 
               #line 278 
  ;
  #line 279 
  if (ldv_undef_int() != 0) {
    #line 280 
    if (ldv_undef_int() != 0) {
      #line 282 
      emg_14_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 282 
      emg_14_emg_param_2_0 = emg_14_emg_param_2_0;
      #line 286 
      emg_wrapper_show_num_ports(emg_14_device,emg_14_devattr,emg_14_emg_param_2_0);
      #line 290 
      ldv_free((void *)emg_14_emg_param_2_0);
    }
    else {
      #line 294 
      emg_14_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 294 
      emg_14_emg_param_2_1 = emg_14_emg_param_2_1;
      #line 298 
      if (emg_14_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0) 
        #line 299 
        (*(emg_14_devattr->store))(emg_14_device,emg_14_devattr,emg_14_emg_param_2_1,emg_14_emg_param_3_2);
      #line 304 
      ldv_free((void *)emg_14_emg_param_2_1);
    }
    #line 308 
    if (emg_repeat_cnt_main_14 > 0) {
      #line 309 
      emg_repeat_cnt_main_14 --;
      #line 311 
      goto emg_main_14;
    }
    else 
         #line 313 
         __VERIFIER_assume(0);
  }
  #line 323 
  return (void *)0;
}

#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_show_plat_type(void *arg0)
{
  #line 331 
  struct device_attribute *emg_15_devattr;
  #line 332 
  struct device *emg_15_device;
  #line 333 
  char *emg_15_emg_param_2_0;
  #line 334 
  char *emg_15_emg_param_2_1;
  #line 335 
  unsigned long emg_15_emg_param_3_2;
  #line 336 
  int emg_repeat_cnt_main_15 = 1;
  #line 338 
  struct emg_struct_devattr_instance_show_num_ports_14 *data = (struct emg_struct_devattr_instance_show_num_ports_14 *)arg0;
  #line 343 
  if (data != (struct emg_struct_devattr_instance_show_num_ports_14 *)0) {
    #line 344 
    emg_15_device = data->arg0;
    #line 345 
    emg_15_devattr = data->arg1;
    #line 346 
    ldv_free((void *)data);
  }
  #line 351 
  goto emg_main_15;
  #line 355 
  return (void *)0;
  #line 358 
  emg_main_15: 
               #line 358 
  ;
  #line 359 
  if (ldv_undef_int() != 0) {
    #line 360 
    if (ldv_undef_int() != 0) {
      #line 362 
      emg_15_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 362 
      emg_15_emg_param_2_0 = emg_15_emg_param_2_0;
      #line 366 
      emg_wrapper_show_plat_type(emg_15_device,emg_15_devattr,emg_15_emg_param_2_0);
      #line 370 
      ldv_free((void *)emg_15_emg_param_2_0);
    }
    else {
      #line 374 
      emg_15_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 374 
      emg_15_emg_param_2_1 = emg_15_emg_param_2_1;
      #line 378 
      if (emg_15_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0) 
        #line 379 
        (*(emg_15_devattr->store))(emg_15_device,emg_15_devattr,emg_15_emg_param_2_1,emg_15_emg_param_3_2);
      #line 384 
      ldv_free((void *)emg_15_emg_param_2_1);
    }
    #line 388 
    if (emg_repeat_cnt_main_15 > 0) {
      #line 389 
      emg_repeat_cnt_main_15 --;
      #line 391 
      goto emg_main_15;
    }
    else 
         #line 393 
         __VERIFIER_assume(0);
  }
  #line 403 
  return (void *)0;
}

#line 408  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_show_port_phy(void *arg0)
{
  #line 411 
  struct device_attribute *emg_16_devattr;
  #line 412 
  struct device *emg_16_device;
  #line 413 
  char *emg_16_emg_param_2_0;
  #line 414 
  char *emg_16_emg_param_2_1;
  #line 415 
  unsigned long emg_16_emg_param_3_2;
  #line 416 
  int emg_repeat_cnt_main_16 = 1;
  #line 418 
  struct emg_struct_devattr_instance_show_num_ports_14 *data = (struct emg_struct_devattr_instance_show_num_ports_14 *)arg0;
  #line 423 
  if (data != (struct emg_struct_devattr_instance_show_num_ports_14 *)0) {
    #line 424 
    emg_16_device = data->arg0;
    #line 425 
    emg_16_devattr = data->arg1;
    #line 426 
    ldv_free((void *)data);
  }
  #line 431 
  goto emg_main_16;
  #line 435 
  return (void *)0;
  #line 438 
  emg_main_16: 
               #line 438 
  ;
  #line 439 
  if (ldv_undef_int() != 0) {
    #line 440 
    if (ldv_undef_int() != 0) {
      #line 442 
      emg_16_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 442 
      emg_16_emg_param_2_0 = emg_16_emg_param_2_0;
      #line 446 
      emg_wrapper_show_port_phy(emg_16_device,emg_16_devattr,emg_16_emg_param_2_0);
      #line 450 
      ldv_free((void *)emg_16_emg_param_2_0);
    }
    else {
      #line 454 
      emg_16_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 454 
      emg_16_emg_param_2_1 = emg_16_emg_param_2_1;
      #line 458 
      if (emg_16_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0) 
        #line 459 
        (*(emg_16_devattr->store))(emg_16_device,emg_16_devattr,emg_16_emg_param_2_1,emg_16_emg_param_3_2);
      #line 464 
      ldv_free((void *)emg_16_emg_param_2_1);
    }
    #line 468 
    if (emg_repeat_cnt_main_16 > 0) {
      #line 469 
      emg_repeat_cnt_main_16 --;
      #line 471 
      goto emg_main_16;
    }
    else 
         #line 473 
         __VERIFIER_assume(0);
  }
  #line 483 
  return (void *)0;
}

#line 488  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_show_rxchan_per_port(void *arg0)
{
  #line 491 
  struct device_attribute *emg_17_devattr;
  #line 492 
  struct device *emg_17_device;
  #line 493 
  char *emg_17_emg_param_2_0;
  #line 494 
  char *emg_17_emg_param_2_1;
  #line 495 
  unsigned long emg_17_emg_param_3_2;
  #line 496 
  int emg_repeat_cnt_main_17 = 1;
  #line 498 
  struct emg_struct_devattr_instance_show_num_ports_14 *data = (struct emg_struct_devattr_instance_show_num_ports_14 *)arg0;
  #line 503 
  if (data != (struct emg_struct_devattr_instance_show_num_ports_14 *)0) {
    #line 504 
    emg_17_device = data->arg0;
    #line 505 
    emg_17_devattr = data->arg1;
    #line 506 
    ldv_free((void *)data);
  }
  #line 511 
  goto emg_main_17;
  #line 515 
  return (void *)0;
  #line 518 
  emg_main_17: 
               #line 518 
  ;
  #line 519 
  if (ldv_undef_int() != 0) {
    #line 520 
    if (ldv_undef_int() != 0) {
      #line 522 
      emg_17_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 522 
      emg_17_emg_param_2_0 = emg_17_emg_param_2_0;
      #line 526 
      emg_wrapper_show_rxchan_per_port(emg_17_device,emg_17_devattr,emg_17_emg_param_2_0);
      #line 530 
      ldv_free((void *)emg_17_emg_param_2_0);
    }
    else {
      #line 534 
      emg_17_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 534 
      emg_17_emg_param_2_1 = emg_17_emg_param_2_1;
      #line 538 
      if (emg_17_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0) 
        #line 539 
        (*(emg_17_devattr->store))(emg_17_device,emg_17_devattr,emg_17_emg_param_2_1,emg_17_emg_param_3_2);
      #line 544 
      ldv_free((void *)emg_17_emg_param_2_1);
    }
    #line 548 
    if (emg_repeat_cnt_main_17 > 0) {
      #line 549 
      emg_repeat_cnt_main_17 --;
      #line 551 
      goto emg_main_17;
    }
    else 
         #line 553 
         __VERIFIER_assume(0);
  }
  #line 563 
  return (void *)0;
}

#line 568  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_show_txchan_per_port(void *arg0)
{
  #line 571 
  struct device_attribute *emg_18_devattr;
  #line 572 
  struct device *emg_18_device;
  #line 573 
  char *emg_18_emg_param_2_0;
  #line 574 
  char *emg_18_emg_param_2_1;
  #line 575 
  unsigned long emg_18_emg_param_3_2;
  #line 576 
  int emg_repeat_cnt_main_18 = 1;
  #line 578 
  struct emg_struct_devattr_instance_show_num_ports_14 *data = (struct emg_struct_devattr_instance_show_num_ports_14 *)arg0;
  #line 583 
  if (data != (struct emg_struct_devattr_instance_show_num_ports_14 *)0) {
    #line 584 
    emg_18_device = data->arg0;
    #line 585 
    emg_18_devattr = data->arg1;
    #line 586 
    ldv_free((void *)data);
  }
  #line 591 
  goto emg_main_18;
  #line 595 
  return (void *)0;
  #line 598 
  emg_main_18: 
               #line 598 
  ;
  #line 599 
  if (ldv_undef_int() != 0) {
    #line 600 
    if (ldv_undef_int() != 0) {
      #line 602 
      emg_18_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 602 
      emg_18_emg_param_2_0 = emg_18_emg_param_2_0;
      #line 606 
      emg_wrapper_show_txchan_per_port(emg_18_device,emg_18_devattr,emg_18_emg_param_2_0);
      #line 610 
      ldv_free((void *)emg_18_emg_param_2_0);
    }
    else {
      #line 614 
      emg_18_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 614 
      emg_18_emg_param_2_1 = emg_18_emg_param_2_1;
      #line 618 
      if (emg_18_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0) 
        #line 619 
        (*(emg_18_devattr->store))(emg_18_device,emg_18_devattr,emg_18_emg_param_2_1,emg_18_emg_param_3_2);
      #line 624 
      ldv_free((void *)emg_18_emg_param_2_1);
    }
    #line 628 
    if (emg_repeat_cnt_main_18 > 0) {
      #line 629 
      emg_repeat_cnt_main_18 --;
      #line 631 
      goto emg_main_18;
    }
    else 
         #line 633 
         __VERIFIER_assume(0);
  }
  #line 643 
  return (void *)0;
}

#line 648  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_niu_interrupt(void *arg0)
{
  #line 651 
  enum irqreturn (*emg_19_callback)(int , void *);
  #line 652 
  void *emg_19_data;
  #line 653 
  int emg_19_line;
  #line 654 
  enum irqreturn emg_19_ret_val;
  #line 655 
  enum irqreturn (*emg_19_thread)(int , void *);
  #line 657 
  struct emg_struct_interrupt_scenario_niu_interrupt_19 *data = (struct emg_struct_interrupt_scenario_niu_interrupt_19 *)arg0;
  #line 660 
  emg_19_callback = & emg_wrapper_niu_interrupt;
  #line 663 
  if (data != (struct emg_struct_interrupt_scenario_niu_interrupt_19 *)0) {
    #line 664 
    emg_19_line = data->arg0;
    #line 665 
    emg_19_callback = data->arg1;
    #line 666 
    emg_19_thread = data->arg2;
    #line 667 
    emg_19_data = data->arg3;
    #line 668 
    ldv_free((void *)data);
  }
  #line 674 
  ldv_switch_to_interrupt_context();
  #line 678 
  emg_19_ret_val = emg_wrapper_niu_interrupt(emg_19_line,emg_19_data);
  #line 683 
  ldv_switch_to_process_context();
  #line 686 
  if (ldv_undef_int() != 0) {
    #line 688 
    __VERIFIER_assume(emg_19_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 692 
    if (emg_19_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 693 
                                                              (*emg_19_thread)(emg_19_line,emg_19_data);
  }
  else 
       #line 698 
       __VERIFIER_assume(emg_19_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 706 
  return (void *)0;
}

#line 711  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_niu_get_drvinfo(void *arg0)
{
  #line 714 
  struct net_device *emg_20_container;
  #line 715 
  struct sk_buff *emg_20_emg_param_0_16;
  #line 716 
  struct ethtool_drvinfo *emg_20_emg_param_1_0;
  #line 717 
  struct ethtool_eeprom *emg_20_emg_param_1_1;
  #line 718 
  int emg_20_emg_param_1_11;
  #line 719 
  struct ifreq *emg_20_emg_param_1_12;
  #line 720 
  struct rtnl_link_stats64 *emg_20_emg_param_1_14;
  #line 721 
  void *emg_20_emg_param_1_15;
  #line 722 
  struct ethtool_link_ksettings *emg_20_emg_param_1_17;
  #line 723 
  unsigned int emg_20_emg_param_1_18;
  #line 724 
  enum ethtool_phys_id_state *emg_20_emg_param_1_19;
  #line 725 
  struct ethtool_rxnfc *emg_20_emg_param_1_20;
  #line 726 
  struct ethtool_stats *emg_20_emg_param_1_3;
  #line 727 
  struct ethtool_link_ksettings *emg_20_emg_param_1_5;
  #line 728 
  struct ethtool_rxnfc *emg_20_emg_param_1_6;
  #line 729 
  int emg_20_emg_param_1_8;
  #line 730 
  unsigned int emg_20_emg_param_1_9;
  #line 731 
  unsigned char *emg_20_emg_param_2_10;
  #line 732 
  int emg_20_emg_param_2_13;
  #line 733 
  unsigned char *emg_20_emg_param_2_2;
  #line 734 
  unsigned long long *emg_20_emg_param_2_4;
  #line 735 
  unsigned int *emg_20_emg_param_2_7;
  #line 736 
  int emg_repeat_cnt_call_20 = 1;
  #line 738 
  struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 *data = (struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 *)arg0;
  #line 743 
  if (data != (struct emg_struct_random_allocationless_scenario_niu_get_drvinfo_20 *)0) {
    #line 744 
    emg_20_container = data->arg0;
    #line 745 
    ldv_free((void *)data);
  }
  #line 750 
  goto emg_call_20;
  #line 754 
  return (void *)0;
  #line 757 
  emg_call_20: 
               #line 757 
  ;
  #line 758 
  switch (ldv_undef_int()) {
    #line 759 
    case 0: 
            #line 759 
    ;
    #line 761 
    emg_20_emg_param_1_20 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 761 
    emg_20_emg_param_1_20 = emg_20_emg_param_1_20;
    #line 765 
    emg_wrapper_niu_set_nfc(emg_20_container,emg_20_emg_param_1_20);
    #line 769 
    ldv_free((void *)emg_20_emg_param_1_20);
    #line 771 
    break;
    #line 773 
    case 1: 
            #line 773 
    ;
    #line 775 
    emg_20_emg_param_1_19 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 775 
    emg_20_emg_param_1_19 = emg_20_emg_param_1_19;
    #line 779 
    emg_wrapper_niu_set_phys_id(emg_20_container,*emg_20_emg_param_1_19);
    #line 783 
    ldv_free((void *)emg_20_emg_param_1_19);
    #line 785 
    break;
    #line 787 
    case 2: 
            #line 787 
    ;
    #line 789 
    emg_wrapper_niu_set_msglevel(emg_20_container,emg_20_emg_param_1_18);
    #line 791 
    break;
    #line 793 
    case 3: 
            #line 793 
    ;
    #line 795 
    emg_20_emg_param_1_17 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 795 
    emg_20_emg_param_1_17 = emg_20_emg_param_1_17;
    #line 799 
    emg_wrapper_niu_set_link_ksettings(emg_20_container,emg_20_emg_param_1_17);
    #line 803 
    ldv_free((void *)emg_20_emg_param_1_17);
    #line 805 
    break;
    #line 807 
    case 4: 
            #line 807 
    ;
    #line 809 
    emg_wrapper_niu_nway_reset(emg_20_container);
    #line 811 
    break;
    #line 813 
    case 5: 
            #line 813 
    ;
    #line 815 
    (*emg_alias_eth_validate_addr)(emg_20_container);
    #line 817 
    break;
    #line 819 
    case 6: 
            #line 819 
    ;
    #line 821 
    emg_wrapper_niu_tx_timeout(emg_20_container);
    #line 823 
    break;
    #line 825 
    case 7: 
            #line 825 
    ;
    #line 827 
    emg_20_emg_param_0_16 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 827 
    emg_20_emg_param_0_16 = emg_20_emg_param_0_16;
    #line 831 
    emg_wrapper_niu_start_xmit(emg_20_emg_param_0_16,emg_20_container);
    #line 835 
    ldv_free((void *)emg_20_emg_param_0_16);
    #line 837 
    break;
    #line 839 
    case 8: 
            #line 839 
    ;
    #line 841 
    emg_wrapper_niu_set_rx_mode(emg_20_container);
    #line 843 
    break;
    #line 845 
    case 9: 
            #line 845 
    ;
    #line 847 
    emg_20_emg_param_1_15 = ldv_xmalloc_unknown_size(0UL);
    #line 847 
    emg_20_emg_param_1_15 = emg_20_emg_param_1_15;
    #line 851 
    emg_wrapper_niu_set_mac_addr(emg_20_container,emg_20_emg_param_1_15);
    #line 855 
    ldv_free(emg_20_emg_param_1_15);
    #line 857 
    break;
    #line 859 
    case 10: 
             #line 859 
    ;
    #line 861 
    emg_20_emg_param_1_14 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 861 
    emg_20_emg_param_1_14 = emg_20_emg_param_1_14;
    #line 865 
    emg_wrapper_niu_get_stats(emg_20_container,emg_20_emg_param_1_14);
    #line 869 
    ldv_free((void *)emg_20_emg_param_1_14);
    #line 871 
    break;
    #line 873 
    case 11: 
             #line 873 
    ;
    #line 875 
    emg_20_emg_param_1_12 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 875 
    emg_20_emg_param_1_12 = emg_20_emg_param_1_12;
    #line 879 
    emg_wrapper_niu_ioctl(emg_20_container,emg_20_emg_param_1_12,emg_20_emg_param_2_13);
    #line 883 
    ldv_free((void *)emg_20_emg_param_1_12);
    #line 885 
    break;
    #line 887 
    case 12: 
             #line 887 
    ;
    #line 889 
    emg_wrapper_niu_change_mtu(emg_20_container,emg_20_emg_param_1_11);
    #line 891 
    break;
    #line 893 
    case 13: 
             #line 893 
    ;
    #line 895 
    emg_20_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 895 
    emg_20_emg_param_2_10 = emg_20_emg_param_2_10;
    #line 899 
    emg_wrapper_niu_get_strings(emg_20_container,emg_20_emg_param_1_9,emg_20_emg_param_2_10);
    #line 903 
    ldv_free((void *)emg_20_emg_param_2_10);
    #line 905 
    break;
    #line 907 
    case 14: 
             #line 907 
    ;
    #line 909 
    emg_wrapper_niu_get_sset_count(emg_20_container,emg_20_emg_param_1_8);
    #line 911 
    break;
    #line 913 
    case 15: 
             #line 913 
    ;
    #line 915 
    emg_20_emg_param_1_6 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 915 
    emg_20_emg_param_1_6 = emg_20_emg_param_1_6;
    #line 916 
    emg_20_emg_param_2_7 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 916 
    emg_20_emg_param_2_7 = emg_20_emg_param_2_7;
    #line 920 
    emg_wrapper_niu_get_nfc(emg_20_container,emg_20_emg_param_1_6,emg_20_emg_param_2_7);
    #line 924 
    ldv_free((void *)emg_20_emg_param_1_6);
    #line 925 
    ldv_free((void *)emg_20_emg_param_2_7);
    #line 927 
    break;
    #line 929 
    case 16: 
             #line 929 
    ;
    #line 931 
    emg_wrapper_niu_get_msglevel(emg_20_container);
    #line 933 
    break;
    #line 935 
    case 17: 
             #line 935 
    ;
    #line 937 
    emg_20_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 937 
    emg_20_emg_param_1_5 = emg_20_emg_param_1_5;
    #line 941 
    emg_wrapper_niu_get_link_ksettings(emg_20_container,emg_20_emg_param_1_5);
    #line 945 
    ldv_free((void *)emg_20_emg_param_1_5);
    #line 947 
    break;
    #line 949 
    case 18: 
             #line 949 
    ;
    #line 951 
    ethtool_op_get_link(emg_20_container);
    #line 953 
    break;
    #line 955 
    case 19: 
             #line 955 
    ;
    #line 957 
    emg_20_emg_param_1_3 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 957 
    emg_20_emg_param_1_3 = emg_20_emg_param_1_3;
    #line 958 
    emg_20_emg_param_2_4 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 958 
    emg_20_emg_param_2_4 = emg_20_emg_param_2_4;
    #line 962 
    emg_wrapper_niu_get_ethtool_stats(emg_20_container,emg_20_emg_param_1_3,emg_20_emg_param_2_4);
    #line 966 
    ldv_free((void *)emg_20_emg_param_1_3);
    #line 967 
    ldv_free((void *)emg_20_emg_param_2_4);
    #line 969 
    break;
    #line 971 
    case 20: 
             #line 971 
    ;
    #line 973 
    emg_wrapper_niu_get_eeprom_len(emg_20_container);
    #line 975 
    break;
    #line 977 
    case 21: 
             #line 977 
    ;
    #line 979 
    emg_20_emg_param_1_1 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 979 
    emg_20_emg_param_1_1 = emg_20_emg_param_1_1;
    #line 980 
    emg_20_emg_param_2_2 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 980 
    emg_20_emg_param_2_2 = emg_20_emg_param_2_2;
    #line 984 
    emg_wrapper_niu_get_eeprom(emg_20_container,emg_20_emg_param_1_1,emg_20_emg_param_2_2);
    #line 988 
    ldv_free((void *)emg_20_emg_param_1_1);
    #line 989 
    ldv_free((void *)emg_20_emg_param_2_2);
    #line 991 
    break;
    #line 993 
    case 22: 
             #line 993 
    ;
    #line 995 
    emg_20_emg_param_1_0 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 995 
    emg_20_emg_param_1_0 = emg_20_emg_param_1_0;
    #line 999 
    emg_wrapper_niu_get_drvinfo(emg_20_container,emg_20_emg_param_1_0);
    #line 1003 
    ldv_free((void *)emg_20_emg_param_1_0);
    #line 1006 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 1007 
      emg_repeat_cnt_call_20 --;
      #line 1009 
      goto emg_call_20;
    }
    else 
         #line 1011 
         __VERIFIER_assume(0);
    #line 1015 
    break;
    #line 1017 
    case 23: 
             #line 1017 
    ;
    #line 1021 
    break;
    #line 1023 
    default: 
             #line 1023 
    ;
    #line 1023 
    __VERIFIER_assume(0);
  }
  #line 1026 
  return (void *)0;
}

#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_niu_pci_driver(void *arg0)
{
  #line 1034 
  int emg_21_choice;
  #line 1035 
  struct pci_driver *emg_21_container;
  #line 1036 
  struct pci_device_id *emg_21_device_id;
  #line 1037 
  struct pci_dev *emg_21_resource_0;
  #line 1038 
  struct pm_message emg_21_resource_1;
  #line 1039 
  int emg_21_ret;
  #line 1040 
  int emg_repeat_cnt_call_21_1 = 1;
  #line 1041 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 1042 
  int emg_repeat_cnt_call_21_0 = 1;
  #line 1043 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 1045 
  struct emg_struct_pci_scenario_niu_pci_driver_21 *data = (struct emg_struct_pci_scenario_niu_pci_driver_21 *)arg0;
  #line 1049 
  emg_21_choice = 0;
  #line 1050 
  emg_21_ret = ldv_undef_int();
  #line 1051 
  emg_21_choice = 0;
  #line 1052 
  emg_21_container = emg_alias_niu_pci_driver;
  #line 1053 
  emg_21_ret = ldv_undef_int();
  #line 1055 
  __VERIFIER_assume(data->arg0 == emg_alias_niu_pci_driver);
  #line 1057 
  if (data != (struct emg_struct_pci_scenario_niu_pci_driver_21 *)0) {
    #line 1058 
    emg_21_container = data->arg0;
    #line 1059 
    ldv_free((void *)data);
  }
  #line 1064 
  emg_21_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1065 
  emg_21_choice = __ldv_undef_int_range(0,1);
  #line 1066 
  emg_21_device_id = emg_21_container->id_table + (unsigned long)emg_21_choice;
  #line 1070 
  goto emg_main_21;
  #line 1074 
  return (void *)0;
  #line 1077 
  emg_call_21: 
               #line 1077 
  ;
  #line 1078 
  switch (ldv_undef_int()) {
    #line 1079 
    case 0: 
            #line 1079 
    ;
    #line 1084 
    if (emg_repeat_cnt_call_21_0 > 0) {
      #line 1085 
      emg_repeat_cnt_call_21_0 --;
      #line 1087 
      goto emg_call_21;
    }
    else 
         #line 1089 
         __VERIFIER_assume(0);
    #line 1093 
    break;
    #line 1095 
    case 1: 
            #line 1095 
    ;
    #line 1097 
    emg_21_ret = emg_wrapper_niu_suspend(emg_21_resource_0,emg_21_resource_1);
    #line 1102 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 1106 
    emg_wrapper_niu_resume(emg_21_resource_0);
    #line 1109 
    if (emg_repeat_cnt_call_21_1 > 0) {
      #line 1110 
      emg_repeat_cnt_call_21_1 --;
      #line 1112 
      goto emg_call_21;
    }
    else 
         #line 1114 
         __VERIFIER_assume(0);
    #line 1118 
    break;
    #line 1120 
    case 2: 
            #line 1120 
    ;
    #line 1122 
    if (emg_21_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1123 
      (*(emg_21_container->shutdown))(emg_21_resource_0);
    #line 1128 
    emg_wrapper_niu_pci_remove_one(emg_21_resource_0);
    #line 1131 
    if (emg_repeat_cnt_main_21_1 > 0) {
      #line 1132 
      emg_repeat_cnt_main_21_1 --;
      #line 1134 
      goto emg_main_21;
    }
    else 
         #line 1136 
         __VERIFIER_assume(0);
    #line 1140 
    break;
    #line 1142 
    default: 
             #line 1142 
    ;
    #line 1142 
    __VERIFIER_assume(0);
  }
  #line 1145 
  return (void *)0;
  #line 1148 
  emg_main_21: 
               #line 1148 
  ;
  #line 1149 
  if (ldv_undef_int() != 0) {
    #line 1152 
    ldv_pre_probe();
    #line 1156 
    emg_21_ret = emg_wrapper_niu_pci_init_one(emg_21_resource_0,emg_21_device_id);
    #line 1161 
    emg_21_ret = ldv_post_probe(emg_21_ret);
    #line 1164 
    if (ldv_undef_int() != 0) {
      #line 1166 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 1170 
      goto emg_call_21;
    }
    else 
         #line 1175 
         __VERIFIER_assume(emg_21_ret != 0);
    #line 1179 
    if (emg_repeat_cnt_main_21_0 > 0) {
      #line 1180 
      emg_repeat_cnt_main_21_0 --;
      #line 1182 
      goto emg_main_21;
    }
    else 
         #line 1184 
         __VERIFIER_assume(0);
  }
  else 
       #line 1190 
       ldv_free((void *)emg_21_resource_0);
  #line 1198 
  return (void *)0;
}

#line 1203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1206 
  struct pci_driver *emg_2_pci_driver;
  #line 1208 
  emg_2_pci_driver = emg_alias_niu_pci_driver;
  #line 1209 
  if (ldv_undef_int() != 0) {
    #line 1211 
    emg_2_pci_driver = arg0;
    #line 1215 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1219 
    return 0;
  }
  else {
    #line 1223 
    return ldv_undef_int_negative();
  }
}

#line 1231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1234 
  struct net_device *emg_3_netdev;
  #line 1236 
  if (ldv_undef_int() != 0) {
    #line 1238 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1242 
    return emg_3_netdev;
  }
  else 
       #line 1246 
       return (struct net_device *)0;
}

#line 1254  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1257 
  struct timer_list *emg_4_timer_list;
  #line 1260 
  emg_4_timer_list = arg0;
  #line 1261 
  ;
  #line 1261 
  return 0;
}

#line 1271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1274 
  struct device_attribute *emg_5_devattr;
  #line 1275 
  struct device *emg_5_device;
  #line 1277 
  if (ldv_undef_int() != 0) {
    #line 1279 
    emg_5_device = arg0;
    #line 1280 
    emg_5_devattr = arg1;
    #line 1284 
    emg_dispatch_register_5(emg_5_device,emg_5_devattr);
    #line 1288 
    return 0;
  }
  else {
    #line 1292 
    return ldv_undef_int_negative();
  }
}

#line 1300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_flush_work(struct work_struct *arg0)
{
  #line 1303 
  struct work_struct *emg_6_work_struct;
  #line 1305 
  if (ldv_undef_int() != 0) {
    #line 1307 
    emg_6_work_struct = arg0;
    #line 1311 
    if (emg_6_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1312 
      (*(emg_6_work_struct->func))(emg_6_work_struct);
    #line 1317 
    return (_Bool)1;
  }
  else 
       #line 1321 
       return (_Bool)0;
}

#line 1329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1332 
  int emg_7_line;
  #line 1335 
  emg_7_line = (int)arg0;
  #line 1339 
  emg_dispatch_irq_deregister_7(emg_7_line);
  #line 1340 
  ;
  #line 1340 
  return (void *)0;
}

#line 1346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1349 
  struct net_device *emg_8_netdev;
  #line 1352 
  emg_8_netdev = arg0;
  #line 1353 
  ldv_free((void *)emg_8_netdev);
  #line 1356 
  return;
}

#line 1361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1364 
  struct pci_driver *emg_9_pci_driver;
  #line 1366 
  emg_9_pci_driver = emg_alias_niu_pci_driver;
  #line 1368 
  emg_9_pci_driver = arg0;
  #line 1372 
  emg_dispatch_deregister_9(emg_9_pci_driver);
  #line 1375 
  return;
}

#line 1380  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1383 
  struct net_device *emg_10_netdev;
  #line 1384 
  int emg_10_ret;
  #line 1387 
  emg_10_ret = ldv_undef_int();
  #line 1388 
  emg_10_ret = ldv_undef_int();
  #line 1389 
  if (ldv_undef_int() != 0) {
    #line 1391 
    emg_10_netdev = arg0;
    #line 1395 
    emg_10_ret = emg_wrapper_niu_open(emg_10_netdev);
    #line 1398 
    if (ldv_undef_int() != 0) {
      #line 1400 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 1404 
      emg_dispatch_register_10(emg_10_netdev);
      #line 1408 
      return 0;
    }
    else {
      #line 1412 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 1413 
      ldv_failed_register_netdev();
      #line 1414 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1419 
    ldv_failed_register_netdev();
    #line 1420 
    return ldv_undef_int_negative();
  }
}

#line 1428  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1431 
  enum irqreturn (*emg_11_callback)(int , void *);
  #line 1432 
  void *emg_11_data;
  #line 1433 
  int emg_11_line;
  #line 1434 
  enum irqreturn (*emg_11_thread)(int , void *);
  #line 1436 
  emg_11_callback = & emg_wrapper_niu_interrupt;
  #line 1437 
  if (ldv_undef_int() != 0) {
    #line 1439 
    emg_11_line = (int)arg0;
    #line 1440 
    emg_11_callback = arg1;
    #line 1441 
    emg_11_thread = (enum irqreturn (*)(int , void *))0;
    #line 1442 
    emg_11_data = arg4;
    #line 1446 
    emg_dispatch_irq_register_11(emg_11_line,emg_11_callback,emg_11_thread,emg_11_data);
    #line 1450 
    return 0;
  }
  else {
    #line 1454 
    return ldv_undef_int_negative();
  }
}

#line 1462  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1465 
  struct work_struct *emg_12_work_struct;
  #line 1467 
  if (ldv_undef_int() != 0) {
    #line 1469 
    emg_12_work_struct = arg0;
    #line 1473 
    if (emg_12_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1474 
      (*(emg_12_work_struct->func))(emg_12_work_struct);
    #line 1479 
    return (_Bool)1;
  }
  else 
       #line 1483 
       return (_Bool)0;
}

#line 1491  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1494 
  struct net_device *emg_13_netdev;
  #line 1497 
  emg_13_netdev = arg0;
  #line 1501 
  emg_wrapper_niu_close(emg_13_netdev);
  #line 1505 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 1508 
  return;
}

#line 1513  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1516 
  int emg_1_ret;
  #line 1519 
  emg_1_ret = emg_niu_init();
  #line 1520 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1523 
  if (ldv_undef_int() != 0) {
    #line 1525 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1529 
    emg_niu_exit();
  }
  else 
       #line 1533 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1537 
  return (void *)0;
}

#line 1542  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sun/niu.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1544 
  ldv_initialize();
  #line 1546 
  emg_entry_point_insmod((void *)0);
  #line 1548 
  return 0;
}

