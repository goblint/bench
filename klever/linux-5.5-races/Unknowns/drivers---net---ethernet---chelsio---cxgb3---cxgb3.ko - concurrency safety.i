/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_69 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 178 
struct writeback_control;
#line 179 
struct bdi_writeback;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 101 
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 292 
struct poll_table_struct;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_415 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_414 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_415 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_414 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8871 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8871 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_504 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_506 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_508 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_510 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_512 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_514 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_516 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_518 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_520 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_522 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_698 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_697 {
   void *validation_data ;
   struct __anonstruct_698 __anonCompField___anonunion_697_160 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_697 __anonCompField_nla_policy_161 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
union __anonunion___u_706 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
union __anonunion___u_708 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_if_info {
   int prtad ;
   u32 mmds ;
   unsigned int mode_support ;
   struct net_device *dev ;
   int (*mdio_read)(struct net_device *, int , int , u16 ) ;
   int (*mdio_write)(struct net_device *, int , int , u16 , u16 ) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct cphy;
#line 145 
struct adapter;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mdio_ops {
   int (*read)(struct net_device *, int , int , u16 ) ;
   int (*write)(struct net_device *, int , int , u16 , u16 ) ;
   unsigned int mode_support ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct adapter_info {
   unsigned char nports0 ;
   unsigned char nports1 ;
   unsigned char phy_base_addr ;
   unsigned int gpio_out ;
   unsigned char gpio_intr[2U] ;
   unsigned long caps ;
   struct mdio_ops *mdio_ops ;
   char *desc ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mc5_stats {
   unsigned long parity_err ;
   unsigned long active_rgn_full ;
   unsigned long nfa_srch_err ;
   unsigned long unknown_cmd ;
   unsigned long reqq_parity_err ;
   unsigned long dispq_parity_err ;
   unsigned long del_act_empty ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mc7_stats {
   unsigned long corr_err ;
   unsigned long uncorr_err ;
   unsigned long parity_err ;
   unsigned long addr_err ;
};
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mac_stats {
   u64 tx_octets ;
   u64 tx_octets_bad ;
   u64 tx_frames ;
   u64 tx_mcast_frames ;
   u64 tx_bcast_frames ;
   u64 tx_pause ;
   u64 tx_deferred ;
   u64 tx_late_collisions ;
   u64 tx_total_collisions ;
   u64 tx_excess_collisions ;
   u64 tx_underrun ;
   u64 tx_len_errs ;
   u64 tx_mac_internal_errs ;
   u64 tx_excess_deferral ;
   u64 tx_fcs_errs ;
   u64 tx_frames_64 ;
   u64 tx_frames_65_127 ;
   u64 tx_frames_128_255 ;
   u64 tx_frames_256_511 ;
   u64 tx_frames_512_1023 ;
   u64 tx_frames_1024_1518 ;
   u64 tx_frames_1519_max ;
   u64 rx_octets ;
   u64 rx_octets_bad ;
   u64 rx_frames ;
   u64 rx_mcast_frames ;
   u64 rx_bcast_frames ;
   u64 rx_pause ;
   u64 rx_fcs_errs ;
   u64 rx_align_errs ;
   u64 rx_symbol_errs ;
   u64 rx_data_errs ;
   u64 rx_sequence_errs ;
   u64 rx_runt ;
   u64 rx_jabber ;
   u64 rx_short ;
   u64 rx_too_long ;
   u64 rx_mac_internal_errs ;
   u64 rx_frames_64 ;
   u64 rx_frames_65_127 ;
   u64 rx_frames_128_255 ;
   u64 rx_frames_256_511 ;
   u64 rx_frames_512_1023 ;
   u64 rx_frames_1024_1518 ;
   u64 rx_frames_1519_max ;
   u64 rx_cong_drops ;
   unsigned long tx_fifo_parity_err ;
   unsigned long rx_fifo_parity_err ;
   unsigned long tx_fifo_urun ;
   unsigned long rx_fifo_ovfl ;
   unsigned long serdes_signal_loss ;
   unsigned long xaui_pcs_ctc_err ;
   unsigned long xaui_pcs_align_change ;
   unsigned long num_toggled ;
   unsigned long num_resets ;
   unsigned long link_faults ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct tp_params {
   unsigned int nchan ;
   unsigned int pmrx_size ;
   unsigned int pmtx_size ;
   unsigned int cm_size ;
   unsigned int chan_rx_size ;
   unsigned int chan_tx_size ;
   unsigned int rx_pg_size ;
   unsigned int tx_pg_size ;
   unsigned int rx_num_pgs ;
   unsigned int tx_num_pgs ;
   unsigned int ntimer_qs ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct qset_params {
   unsigned int polling ;
   unsigned int coalesce_usecs ;
   unsigned int rspq_size ;
   unsigned int fl_size ;
   unsigned int jumbo_size ;
   unsigned int txq_size[3U] ;
   unsigned int cong_thres ;
   unsigned int vector ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct sge_params {
   unsigned int max_pkt_size ;
   struct qset_params qset[8U] ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mc5_params {
   unsigned int mode ;
   unsigned int nservers ;
   unsigned int nfilters ;
   unsigned int nroutes ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct vpd_params {
   unsigned int cclk ;
   unsigned int mclk ;
   unsigned int uclk ;
   unsigned int mdc ;
   unsigned int mem_timing ;
   u8 sn[17U] ;
   u8 eth_base[6U] ;
   u8 port_type[2U] ;
   unsigned short xauicfg[2U] ;
};
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct pci_params {
   unsigned int vpd_cap_addr ;
   unsigned short speed ;
   unsigned char width ;
   unsigned char variant ;
};
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct adapter_params {
   struct sge_params sge ;
   struct mc5_params mc5 ;
   struct tp_params tp ;
   struct vpd_params vpd ;
   struct pci_params pci ;
   struct adapter_info *info ;
   unsigned short mtus[16U] ;
   unsigned short a_wnd[32U] ;
   unsigned short b_wnd[32U] ;
   unsigned int nports ;
   unsigned int chan_map ;
   unsigned int stats_update_period ;
   unsigned int linkpoll_period ;
   unsigned int rev ;
   unsigned int offload ;
};
#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct link_config {
   unsigned int supported ;
   unsigned int advertising ;
   unsigned short requested_speed ;
   unsigned short speed ;
   unsigned char requested_duplex ;
   unsigned char duplex ;
   unsigned char requested_fc ;
   unsigned char fc ;
   unsigned char autoneg ;
   unsigned int link_ok ;
};
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mc5 {
   struct adapter *adapter ;
   unsigned int tcam_size ;
   unsigned char part_type ;
   unsigned char parity_enabled ;
   unsigned char mode ;
   struct mc5_stats stats ;
};
#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct mc7 {
   struct adapter *adapter ;
   unsigned int size ;
   unsigned int width ;
   unsigned int offset ;
   char *name ;
   struct mc7_stats stats ;
};
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct cmac {
   struct adapter *adapter ;
   unsigned int offset ;
   unsigned int nucast ;
   unsigned int tx_tcnt ;
   unsigned int tx_xcnt ;
   u64 tx_mcnt ;
   unsigned int rx_xcnt ;
   unsigned int rx_ocnt ;
   u64 rx_mcnt ;
   unsigned int toggle_cnt ;
   unsigned int txen ;
   u64 rx_pause ;
   struct mac_stats stats ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct cphy_ops {
   int (*reset)(struct cphy *, int ) ;
   int (*intr_enable)(struct cphy *) ;
   int (*intr_disable)(struct cphy *) ;
   int (*intr_clear)(struct cphy *) ;
   int (*intr_handler)(struct cphy *) ;
   int (*autoneg_enable)(struct cphy *) ;
   int (*autoneg_restart)(struct cphy *) ;
   int (*advertise)(struct cphy *, unsigned int ) ;
   int (*set_loopback)(struct cphy *, int , int , int ) ;
   int (*set_speed_duplex)(struct cphy *, int , int ) ;
   int (*get_link_status)(struct cphy *, int *, int *, int *, int *) ;
   int (*power_down)(struct cphy *, int ) ;
   u32 mmds ;
};
#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct cphy {
   u8 modtype ;
   short priv ;
   unsigned int caps ;
   struct adapter *adapter ;
   char *desc ;
   unsigned long fifo_errors ;
   struct cphy_ops *ops ;
   struct mdio_if_info mdio ;
   u16 phy_cache[1628U] ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_712 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_712 __anonCompField_pci_dev_162 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/proc_fs.h"
enum t3ctype {
    T3A = 0,
    T3B = 1,
    T3C = 2
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3cdev.h"
struct t3cdev {
   char name[16U] ;
   enum t3ctype type ;
   struct list_head ofld_dev_list ;
   struct net_device *lldev ;
   struct proc_dir_entry *proc_dir ;
   int (*send)(struct t3cdev *, struct sk_buff *) ;
   int (*recv)(struct t3cdev *, struct sk_buff **, int ) ;
   int (*ctl)(struct t3cdev *, unsigned int , void *) ;
   void (*neigh_update)(struct t3cdev *, struct neighbour *) ;
   void *priv ;
   void *l2opt ;
   void *l3opt ;
   void *l4opt ;
   void *ulp ;
   void *ulp_iscsi ;
};
#line 69 
struct sge_qset;
#line 70 
struct port_info;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct iscsi_config {
   __u8 mac_addr[6U] ;
   __u32 flags ;
   int (*send)(struct port_info *, struct sk_buff **) ;
   int (*recv)(struct port_info *, struct sk_buff *) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct port_info {
   struct adapter *adapter ;
   struct sge_qset *qs ;
   u8 port_id ;
   u8 nqsets ;
   u8 first_qset ;
   struct cphy phy ;
   struct cmac mac ;
   struct link_config link_config ;
   int activity ;
   __be32 iscsi_ipv4addr ;
   struct iscsi_config iscsic ;
   int link_fault ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct fl_pg_chunk {
   struct page *page ;
   void *va ;
   unsigned int offset ;
   unsigned long *p_cnt ;
   dma_addr_t mapping ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct sge_fl {
   unsigned int buf_size ;
   unsigned int credits ;
   unsigned int pend_cred ;
   unsigned int size ;
   unsigned int cidx ;
   unsigned int pidx ;
   unsigned int gen ;
   struct fl_pg_chunk pg_chunk ;
   unsigned int use_pages ;
   unsigned int order ;
   unsigned int alloc_size ;
   struct rx_desc *desc ;
   struct rx_sw_desc *sdesc ;
   dma_addr_t phys_addr ;
   unsigned int cntxt_id ;
   unsigned long empty ;
   unsigned long alloc_failed ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct sge_rspq {
   unsigned int credits ;
   unsigned int size ;
   unsigned int cidx ;
   unsigned int gen ;
   unsigned int polling ;
   unsigned int holdoff_tmr ;
   unsigned int next_holdoff ;
   unsigned int rx_recycle_buf ;
   struct rsp_desc *desc ;
   dma_addr_t phys_addr ;
   unsigned int cntxt_id ;
   spinlock_t lock ;
   struct sk_buff_head rx_queue ;
   struct sk_buff *pg_skb ;
   unsigned long offload_pkts ;
   unsigned long offload_bundles ;
   unsigned long eth_pkts ;
   unsigned long pure_rsps ;
   unsigned long imm_data ;
   unsigned long rx_drops ;
   unsigned long async_notif ;
   unsigned long empty ;
   unsigned long nomem ;
   unsigned long unhandled_irqs ;
   unsigned long starved ;
   unsigned long restarted ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct sge_txq {
   unsigned long flags ;
   unsigned int in_use ;
   unsigned int size ;
   unsigned int processed ;
   unsigned int cleaned ;
   unsigned int stop_thres ;
   unsigned int cidx ;
   unsigned int pidx ;
   unsigned int gen ;
   unsigned int unacked ;
   struct tx_desc *desc ;
   struct tx_sw_desc *sdesc ;
   spinlock_t lock ;
   unsigned int token ;
   dma_addr_t phys_addr ;
   struct sk_buff_head sendq ;
   struct tasklet_struct qresume_tsk ;
   unsigned int cntxt_id ;
   unsigned long stops ;
   unsigned long restarts ;
};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct sge_qset {
   struct adapter *adap ;
   struct napi_struct napi ;
   struct sge_rspq rspq ;
   struct sge_fl fl[2U] ;
   struct sge_txq txq[3U] ;
   int nomem ;
   void *lro_va ;
   struct net_device *netdev ;
   struct netdev_queue *tx_q ;
   unsigned long txq_stopped ;
   struct timer_list tx_reclaim_timer ;
   struct timer_list rx_reclaim_timer ;
   unsigned long port_stats[5U] ;
} __attribute__((__aligned__(64)));
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct sge {
   struct sge_qset qs[8U] ;
   spinlock_t reg_lock ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct __anonstruct_msix_info_713 {
   unsigned short vec ;
   char desc[22U] ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
struct adapter {
   struct t3cdev tdev ;
   struct list_head adapter_list ;
   void *regs ;
   struct pci_dev *pdev ;
   unsigned long registered_device_map ;
   unsigned long open_device_map ;
   unsigned long flags ;
   char *name ;
   int msg_enable ;
   unsigned int mmio_len ;
   struct adapter_params params ;
   unsigned int slow_intr_mask ;
   unsigned long irq_stats[3U] ;
   int msix_nvectors ;
   struct __anonstruct_msix_info_713 msix_info[9U] ;
   struct sge sge ;
   struct mc7 pmrx ;
   struct mc7 pmtx ;
   struct mc7 cm ;
   struct mc5 mc5 ;
   struct net_device *port[2U] ;
   unsigned int check_task_cnt ;
   struct delayed_work adap_check_task ;
   struct work_struct ext_intr_handler_task ;
   struct work_struct fatal_error_handler_task ;
   struct work_struct link_fault_handler_task ;
   struct work_struct db_full_task ;
   struct work_struct db_empty_task ;
   struct work_struct db_drop_task ;
   struct dentry *debugfs_root ;
   struct mutex mdio_lock ;
   spinlock_t stats_lock ;
   spinlock_t work_lock ;
   struct sk_buff *nofail_skb ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_714 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_714 __anonCompField_bdi_writeback_163 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_715 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_715 __anonCompField_bio_164 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_718 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_719 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_721 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_722 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_720 {
   struct __anonstruct_elv_721 elv ;
   struct __anonstruct_flush_722 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_723 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_718 __anonCompField_request_165 ;
   union __anonunion_719 __anonCompField_request_166 ;
   union __anonunion_720 __anonCompField_request_167 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_723 __anonCompField_request_168 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_742 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_742 __anonCompField_kernel_param_169 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_816 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_817 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_815 {
   struct __anonstruct_816 __anonCompField___anonunion_815_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_817 __anonCompField___anonunion_815_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_815 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_819 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_819 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_832 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_832 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_842 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_842 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_844 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   __addrpair skc_addrpair ;
   struct __anonstruct_844 __anonCompField___anonunion_843_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_847 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   __portpair skc_portpair ;
   struct __anonstruct_847 __anonCompField___anonunion_846_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_850 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_843 __anonCompField_sock_common_178 ;
   union __anonunion_845 __anonCompField_sock_common_179 ;
   union __anonunion_846 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_848 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_849 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_850 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_851 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_852 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_853 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_854 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_855 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_853 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_854 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_855 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_890 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_890 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_987 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_987 __anonCompField_inet_listen_hashbucket_196 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_990 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_990 __anonCompField_ip_ra_chain_197 ;
   struct callback_head rcu ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
struct l2t_entry {
   u16 state ;
   u16 idx ;
   u32 addr ;
   int ifindex ;
   u16 smt_idx ;
   u16 vlan ;
   struct neighbour *neigh ;
   struct l2t_entry *first ;
   struct l2t_entry *next ;
   struct sk_buff_head arpq ;
   spinlock_t lock ;
   atomic_t refcnt ;
   u8 dmac[6U] ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
struct l2t_data {
   unsigned int nentries ;
   struct l2t_entry *rover ;
   atomic_t nfree ;
   rwlock_t lock ;
   struct callback_head callback_head ;
   struct l2t_entry l2tab[] ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
struct l2t_skb_cb {
   void (*arp_failure_handler)(struct t3cdev *, struct sk_buff *) ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
union opcode_tid {
   __be32 opcode_tid ;
   __u8 opcode ;
};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct work_request_hdr {
   __be32 wr_hi ;
   __be32 wr_lo ;
};
#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_l2t_write_req {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be32 params ;
   __u8 rsvd[2U] ;
   __u8 dst_mac[6U] ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
union __anonunion___u_1045 {
   void *__val ;
   char __c[1U] ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
union __anonunion___u_1047 {
   void *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2477 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2479 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2481 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2531 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2533 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netevent.h"
struct netevent_redirect {
   struct dst_entry *old ;
   struct dst_entry *new ;
   struct neighbour *neigh ;
   void *daddr ;
};
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
enum sge_context_type {
    SGE_CNTXT_RDMA = 0,
    SGE_CNTXT_ETH = 2,
    SGE_CNTXT_OFLD = 4,
    SGE_CNTXT_CTRL = 5
};
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct tp_mib_stats {
   u32 ipInReceive_hi ;
   u32 ipInReceive_lo ;
   u32 ipInHdrErrors_hi ;
   u32 ipInHdrErrors_lo ;
   u32 ipInAddrErrors_hi ;
   u32 ipInAddrErrors_lo ;
   u32 ipInUnknownProtos_hi ;
   u32 ipInUnknownProtos_lo ;
   u32 ipInDiscards_hi ;
   u32 ipInDiscards_lo ;
   u32 ipInDelivers_hi ;
   u32 ipInDelivers_lo ;
   u32 ipOutRequests_hi ;
   u32 ipOutRequests_lo ;
   u32 ipOutDiscards_hi ;
   u32 ipOutDiscards_lo ;
   u32 ipOutNoRoutes_hi ;
   u32 ipOutNoRoutes_lo ;
   u32 ipReasmTimeout ;
   u32 ipReasmReqds ;
   u32 ipReasmOKs ;
   u32 ipReasmFails ;
   u32 reserved[8U] ;
   u32 tcpActiveOpens ;
   u32 tcpPassiveOpens ;
   u32 tcpAttemptFails ;
   u32 tcpEstabResets ;
   u32 tcpOutRsts ;
   u32 tcpCurrEstab ;
   u32 tcpInSegs_hi ;
   u32 tcpInSegs_lo ;
   u32 tcpOutSegs_hi ;
   u32 tcpOutSegs_lo ;
   u32 tcpRetransSeg_hi ;
   u32 tcpRetransSeg_lo ;
   u32 tcpInErrs_hi ;
   u32 tcpInErrs_lo ;
   u32 tcpRtoMin ;
   u32 tcpRtoMax ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
struct cxgb3_client;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ioctl.h"
struct ch_mem_range {
   uint32_t cmd ;
   uint32_t mem_id ;
   uint32_t addr ;
   uint32_t len ;
   uint32_t version ;
   uint8_t buf[0U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct tid_range {
   unsigned int base ;
   unsigned int num ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct mtutab {
   unsigned int size ;
   unsigned short *mtus ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct iff_mac {
   struct net_device *dev ;
   unsigned char *mac_addr ;
   u16 vlan_tag ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct iscsi_ipv4addr {
   struct net_device *dev ;
   __be32 ipv4addr ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct ddp_params {
   unsigned int llimit ;
   unsigned int ulimit ;
   unsigned int tag_mask ;
   struct pci_dev *pdev ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct adap_ports {
   unsigned int nports ;
   struct net_device *lldevs[2U] ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct ulp_iscsi_info {
   unsigned int offset ;
   unsigned int llimit ;
   unsigned int ulimit ;
   unsigned int tagmask ;
   u8 pgsz_factor[4U] ;
   unsigned int max_rxsz ;
   unsigned int max_txsz ;
   struct pci_dev *pdev ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct rdma_info {
   unsigned int tpt_base ;
   unsigned int tpt_top ;
   unsigned int pbl_base ;
   unsigned int pbl_top ;
   unsigned int rqt_base ;
   unsigned int rqt_top ;
   unsigned int udbell_len ;
   unsigned long udbell_physbase ;
   void *kdb_addr ;
   struct pci_dev *pdev ;
};
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct rdma_cq_op {
   unsigned int id ;
   unsigned int op ;
   unsigned int credits ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct rdma_cq_setup {
   unsigned int id ;
   unsigned long long base_addr ;
   unsigned int size ;
   unsigned int credits ;
   unsigned int credit_thres ;
   unsigned int ovfl_mode ;
};
#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct rdma_ctrlqp_setup {
   unsigned long long base_addr ;
   unsigned int size ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct ofld_page_info {
   unsigned int page_size ;
   unsigned int num ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ctl_defs.h"
struct ch_embedded_info {
   u32 fw_vers ;
   u32 tp_vers ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
union __anonunion___u_3506 {
   void *__val ;
   char __c[1U] ;
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct tcp_options {
   __be16 mss ;
   __u8 wsf ;
   __u8  ;
   __u8 ecn : 1 ;
   __u8 sack : 1 ;
   __u8 tstamp : 1 ;
};
#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_pass_accept_req {
   union opcode_tid ot ;
   __be16 local_port ;
   __be16 peer_port ;
   __be32 local_ip ;
   __be32 peer_ip ;
   __be32 tos_tid ;
   struct tcp_options tcp_options ;
   __u8 dst_mac[6U] ;
   __be16 vlan_tag ;
   __u8 src_mac[6U] ;
   __u8  ;
   __u8 addr_idx : 3 ;
   __u8 port_idx : 1 ;
   __u8 exact_match : 1 ;
   __u8 rsvd ;
   __be32 rcv_isn ;
   __be32 rsvd2 ;
};
#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_act_open_rpl {
   union opcode_tid ot ;
   __be16 local_port ;
   __be16 peer_port ;
   __be32 local_ip ;
   __be32 peer_ip ;
   __be32 atid ;
   __u8 rsvd[3U] ;
   __u8 status ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_act_establish {
   union opcode_tid ot ;
   __be16 local_port ;
   __be16 peer_port ;
   __be32 local_ip ;
   __be32 peer_ip ;
   __be32 tos_tid ;
   __be16 l2t_idx ;
   __be16 tcp_opt ;
   __be32 snd_isn ;
   __be32 rcv_isn ;
};
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_set_tcb_field {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __u8 reply ;
   __u8 cpu_idx ;
   __be16 word ;
   __be64 mask ;
   __be64 val ;
};
#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_abort_req_rss {
   union opcode_tid ot ;
   __be32 rsvd0 ;
   __u8 rsvd1 ;
   __u8 status ;
   __u8 rsvd2[6U] ;
};
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_abort_rpl {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be32 rsvd0 ;
   __u8 rsvd1 ;
   __u8 cmd ;
   __u8 rsvd2[6U] ;
};
#line 1155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_trace_pkt {
   __u8 opcode ;
   __u8 iff : 4 ;
   __u8  ;
   __u8 rsvd[4U] ;
   __be16 len ;
};
#line 1237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_l2t_write_rpl {
   union opcode_tid ot ;
   __u8 status ;
   __u8 rsvd[3U] ;
};
#line 1296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_smt_write_rpl {
   union opcode_tid ot ;
   __u8 status ;
   __u8 rsvd[3U] ;
};
#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_rte_write_rpl {
   union opcode_tid ot ;
   __u8 status ;
   __u8 rsvd[3U] ;
};
#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_tid_release {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be32 rsvd ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
typedef int (*cxgb3_cpl_handler_func)(struct t3cdev *, struct sk_buff *, void *);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
struct cxgb3_client {
   char *name ;
   void (*add)(struct t3cdev *) ;
   void (*remove)(struct t3cdev *) ;
   cxgb3_cpl_handler_func *handlers ;
   int (*redirect)(void *, struct dst_entry *, struct dst_entry *, struct l2t_entry *) ;
   struct list_head client_list ;
   void (*event_handler)(struct t3cdev *, u32 , u32 ) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
struct t3c_tid_entry {
   struct cxgb3_client *client ;
   void *ctx ;
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
typedef int (*cpl_handler_func)(struct t3cdev *, struct sk_buff *);
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
union listen_entry {
   struct t3c_tid_entry t3c_tid ;
   union listen_entry *next ;
};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
union active_open_entry {
   struct t3c_tid_entry t3c_tid ;
   union active_open_entry *next ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
struct tid_info {
   struct t3c_tid_entry *tid_tab ;
   unsigned int ntids ;
   atomic_t tids_in_use ;
   union listen_entry *stid_tab ;
   unsigned int nstids ;
   unsigned int stid_base ;
   union active_open_entry *atid_tab ;
   unsigned int natids ;
   unsigned int atid_base ;
   spinlock_t atid_lock ;
   union active_open_entry *afree ;
   unsigned int atids_in_use ;
   spinlock_t stid_lock ;
   union listen_entry *sfree ;
   unsigned int stids_in_use ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
struct t3c_data {
   struct list_head list_node ;
   struct t3cdev *dev ;
   unsigned int tx_max_chunk ;
   unsigned int max_wrs ;
   unsigned int nmtus ;
   unsigned short *mtus ;
   struct tid_info tid_maps ;
   struct t3c_tid_entry *tid_release_list ;
   spinlock_t tid_release_lock ;
   struct work_struct tid_release_task ;
   struct sk_buff *nofail_skb ;
   unsigned int release_list_incomplete ;
};
#line 1145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
union __anonunion___u_3509 {
   void *__val ;
   char __c[1U] ;
};
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
union __anonunion___u_3511 {
   void *__val ;
   char __c[1U] ;
};
#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
union __anonunion___u_3513 {
   void *__val ;
   char __c[1U] ;
};
#line 1303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
union __anonunion___u_3515 {
   void *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct addr_val_pair {
   unsigned int reg_addr ;
   unsigned int val ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct idt_bits {
   u16 ist : 3 ;
   u16 zero : 5 ;
   u16 type : 5 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
} __attribute__((__packed__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct gate_struct {
   u16 offset_low ;
   u16 segment ;
   struct idt_bits bits ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 reserved ;
} __attribute__((__packed__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct gate_desc;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__));
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long p4dval_t;
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_p4d_t_4280 {
   p4dval_t p4d ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_p4d_t_4280 p4d_t;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct flush_tlb_info;
#line 364 
struct mmu_gather;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_init_ops {
   unsigned int (*patch)(u8 , void *, unsigned long , unsigned int ) ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
   void (*flush)(void) ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_time_ops {
   unsigned long long (*sched_clock)(void) ;
   unsigned long long (*steal_clock)(int ) ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_cpu_ops {
   void (*io_delay)(void) ;
   unsigned long (*get_debugreg)(int ) ;
   void (*set_debugreg)(int , unsigned long ) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long ) ;
   void (*write_cr4)(unsigned long ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr *) ;
   void (*load_idt)(struct desc_ptr *) ;
   void (*set_ldt)(void *, unsigned int ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *, unsigned int ) ;
   void (*load_gs_index)(unsigned int ) ;
   void (*write_ldt_entry)(struct desc_struct *, int , void *) ;
   void (*write_gdt_entry)(struct desc_struct *, int , void *, int ) ;
   void (*write_idt_entry)(gate_desc *, int , gate_desc *) ;
   void (*alloc_ldt)(struct desc_struct *, unsigned int ) ;
   void (*free_ldt)(struct desc_struct *, unsigned int ) ;
   void (*load_sp0)(unsigned long ) ;
   void (*wbinvd)(void) ;
   void (*cpuid)(unsigned int *, unsigned int *, unsigned int *, unsigned int *) ;
   u64 (*read_msr)(unsigned int ) ;
   void (*write_msr)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_msr_safe)(unsigned int , int *) ;
   int (*write_msr_safe)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_pmc)(int ) ;
   void (*usergs_sysret64)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct *) ;
   void (*end_context_switch)(struct task_struct *) ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_mmu_ops {
   void (*flush_tlb_user)(void) ;
   void (*flush_tlb_kernel)(void) ;
   void (*flush_tlb_one_user)(unsigned long ) ;
   void (*flush_tlb_others)(struct cpumask *, struct flush_tlb_info *) ;
   void (*tlb_remove_table)(struct mmu_gather *, void *) ;
   void (*exit_mmap)(struct mm_struct *) ;
   struct paravirt_callee_save read_cr2 ;
   void (*write_cr2)(unsigned long ) ;
   unsigned long (*read_cr3)(void) ;
   void (*write_cr3)(unsigned long ) ;
   void (*activate_mm)(struct mm_struct *, struct mm_struct *) ;
   void (*dup_mmap)(struct mm_struct *, struct mm_struct *) ;
   int (*pgd_alloc)(struct mm_struct *) ;
   void (*pgd_free)(struct mm_struct *, pgd_t *) ;
   void (*alloc_pte)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pmd)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pud)(struct mm_struct *, unsigned long ) ;
   void (*alloc_p4d)(struct mm_struct *, unsigned long ) ;
   void (*release_pte)(unsigned long ) ;
   void (*release_pmd)(unsigned long ) ;
   void (*release_pud)(unsigned long ) ;
   void (*release_p4d)(unsigned long ) ;
   void (*set_pte)(pte_t *, pte_t ) ;
   void (*set_pte_at)(struct mm_struct *, unsigned long , pte_t *, pte_t ) ;
   void (*set_pmd)(pmd_t *, pmd_t ) ;
   pte_t (*ptep_modify_prot_start)(struct vm_area_struct *, unsigned long , pte_t *) ;
   void (*ptep_modify_prot_commit)(struct vm_area_struct *, unsigned long , pte_t *, pte_t ) ;
   struct paravirt_callee_save pte_val ;
   struct paravirt_callee_save make_pte ;
   struct paravirt_callee_save pgd_val ;
   struct paravirt_callee_save make_pgd ;
   void (*set_pud)(pud_t *, pud_t ) ;
   struct paravirt_callee_save pmd_val ;
   struct paravirt_callee_save make_pmd ;
   struct paravirt_callee_save pud_val ;
   struct paravirt_callee_save make_pud ;
   void (*set_p4d)(p4d_t *, p4d_t ) ;
   struct paravirt_callee_save p4d_val ;
   struct paravirt_callee_save make_p4d ;
   void (*set_pgd)(pgd_t *, pgd_t ) ;
   struct pv_lazy_ops lazy_mode ;
   void (*set_fixmap)(unsigned int , phys_addr_t , pgprot_t ) ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lock_ops {
   void (*queued_spin_lock_slowpath)(struct qspinlock *, u32 ) ;
   struct paravirt_callee_save queued_spin_unlock ;
   void (*wait)(u8 *, u8 ) ;
   void (*kick)(int ) ;
   struct paravirt_callee_save vcpu_is_preempted ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_patch_template {
   struct pv_init_ops init ;
   struct pv_time_ops time ;
   struct pv_cpu_ops cpu ;
   struct pv_irq_ops irq ;
   struct pv_mmu_ops mmu ;
   struct pv_lock_ops lock ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4292 {
   int __val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_4372 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4729 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4731 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4733 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4735 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4737 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4739 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4741 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4743 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4745 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_4747 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/sections.h"
typedef irqreturn_t (*irq_handler_t)(int , void *);
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_arp.h"
struct arphdr {
   __be16 ar_hrd ;
   __be16 ar_pro ;
   unsigned char ar_hln ;
   unsigned char ar_pln ;
   __be16 ar_op ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct sg_ent {
   __be32 len[2U] ;
   __be64 addr[2U] ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct rss_header {
   __u8 opcode ;
   __u8 cpu_idx : 6 ;
   __u8 hash_type : 2 ;
   __be16 cq_idx ;
   __be32 rss_hash_val ;
};
#line 1083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_tx_pkt {
   struct work_request_hdr wr ;
   __be32 cntrl ;
   __be32 len ;
};
#line 1089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_tx_pkt_lso {
   struct work_request_hdr wr ;
   __be32 cntrl ;
   __be32 len ;
   __be32 rsvd ;
   __be32 lso_info ;
};
#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_rx_pkt {
   __u8 opcode ;
   __u8 iff : 4 ;
   __u8 csum_valid : 1 ;
   __u8 ipmi_pkt : 1 ;
   __u8 vlan_valid : 1 ;
   __u8 fragment : 1 ;
   __be16 csum ;
   __be16 vlan ;
   __be16 len ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
struct tx_desc {
   __be64 flit[16U] ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
struct rx_desc {
   __be32 addr_lo ;
   __be32 len_gen ;
   __be32 gen2 ;
   __be32 addr_hi ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
struct tx_sw_desc {
   struct sk_buff *skb ;
   u8 eop ;
   u8 addr_idx ;
   u8 fragidx ;
   s8 sflit ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
union __anonunion_5192 {
   struct sk_buff *skb ;
   struct fl_pg_chunk pg_chunk ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
struct rx_sw_desc {
   union __anonunion_5192 __anonCompField_rx_sw_desc_192 ;
   dma_addr_t dma_addr ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
struct rsp_desc {
   struct rss_header rss_hdr ;
   __be32 flags ;
   __be32 len_cq ;
   u8 imm_data[47U] ;
   u8 intr_gen ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
struct deferred_unmap_info {
   struct pci_dev *pdev ;
   dma_addr_t addr[18U] ;
};
#line 579  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
typedef int ldv_func_ret_type;
#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
typedef int ldv_func_ret_type_0;
#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
typedef int ldv_func_ret_type_1;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u16 uint16_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
struct trace_params {
   u32 sip ;
   u32 sip_mask ;
   u32 dip ;
   u32 dip_mask ;
   u16 sport ;
   u16 sport_mask ;
   u16 dport ;
   u16 dport_mask ;
   u32 vlan : 12 ;
   u32 vlan_mask : 12 ;
   u32 intf : 4 ;
   u32 intf_mask : 4 ;
   u8 proto ;
   u8 proto_mask ;
};
#line 547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
struct port_type_info {
   int (*phy_prep)(struct cphy *, struct adapter *, int , struct mdio_ops *) ;
};
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
struct t3_vpd {
   u8 id_tag ;
   u8 id_len[2U] ;
   u8 id_data[16U] ;
   u8 vpdr_tag ;
   u8 vpdr_len[2U] ;
   u8 pn_kword[2U] ;
   u8 pn_len ;
   u8 pn_data[16U] ;
   u8 ec_kword[2U] ;
   u8 ec_len ;
   u8 ec_data[16U] ;
   u8 sn_kword[2U] ;
   u8 sn_len ;
   u8 sn_data[16U] ;
   u8 na_kword[2U] ;
   u8 na_len ;
   u8 na_data[12U] ;
   u8 cclk_kword[2U] ;
   u8 cclk_len ;
   u8 cclk_data[6U] ;
   u8 mclk_kword[2U] ;
   u8 mclk_len ;
   u8 mclk_data[6U] ;
   u8 uclk_kword[2U] ;
   u8 uclk_len ;
   u8 uclk_data[6U] ;
   u8 mdc_kword[2U] ;
   u8 mdc_len ;
   u8 mdc_data[6U] ;
   u8 mt_kword[2U] ;
   u8 mt_len ;
   u8 mt_data[2U] ;
   u8 xaui0cfg_kword[2U] ;
   u8 xaui0cfg_len ;
   u8 xaui0cfg_data[6U] ;
   u8 xaui1cfg_kword[2U] ;
   u8 xaui1cfg_len ;
   u8 xaui1cfg_data[6U] ;
   u8 port0_kword[2U] ;
   u8 port0_len ;
   u8 port0_data[2U] ;
   u8 port1_kword[2U] ;
   u8 port1_len ;
   u8 port1_data[2U] ;
   u8 port2_kword[2U] ;
   u8 port2_len ;
   u8 port2_data[2U] ;
   u8 port3_kword[2U] ;
   u8 port3_len ;
   u8 port3_data[2U] ;
   u8 rv_kword[2U] ;
   u8 rv_len ;
   u8 rv_data[1U] ;
   u32 pad ;
};
#line 1410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
struct intr_info {
   unsigned int mask ;
   char *msg ;
   short stat_idx ;
   unsigned short fatal ;
};
#line 3169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
struct mc7_timing_params {
   unsigned char ActToPreDly ;
   unsigned char ActToRdWrDly ;
   unsigned char PreCyc ;
   unsigned char RefCyc[5U] ;
   unsigned char BkCyc ;
   unsigned char WrToRdDly ;
   unsigned char RdToWrDly ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_6622 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_6622 key ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ioctl.h"
struct ch_reg {
   uint32_t cmd ;
   uint32_t addr ;
   uint32_t val ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ioctl.h"
struct ch_qset_params {
   uint32_t cmd ;
   uint32_t qset_idx ;
   int32_t txq_size[3U] ;
   int32_t rspq_size ;
   int32_t fl_size[2U] ;
   int32_t intr_lat ;
   int32_t polling ;
   int32_t lro ;
   int32_t cong_thres ;
   int32_t vector ;
   int32_t qnum ;
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ioctl.h"
struct ch_mtus {
   uint32_t cmd ;
   uint32_t nmtus ;
   uint16_t mtus[16U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ioctl.h"
struct ch_pm {
   uint32_t cmd ;
   uint32_t tx_pg_sz ;
   uint32_t tx_num_pg ;
   uint32_t rx_pg_sz ;
   uint32_t rx_num_pg ;
   uint32_t pm_total ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_ioctl.h"
struct ch_trace {
   uint32_t cmd ;
   uint32_t sip ;
   uint32_t sip_mask ;
   uint32_t dip ;
   uint32_t dip_mask ;
   uint16_t sport ;
   uint16_t sport_mask ;
   uint16_t dport ;
   uint16_t dport_mask ;
   uint32_t vlan : 12 ;
   uint32_t vlan_mask : 12 ;
   uint32_t intf : 4 ;
   uint32_t intf_mask : 4 ;
   uint8_t proto ;
   uint8_t proto_mask ;
   uint8_t invert_match : 1 ;
   uint8_t config_tx : 1 ;
   uint8_t config_rx : 1 ;
   uint8_t trace_tx : 1 ;
   uint8_t trace_rx : 1 ;
};
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct mngt_pktsched_wr {
   __be32 wr_hi ;
   __be32 wr_lo ;
   __u8 mngt_opcode ;
   __u8 rsvd[7U] ;
   __u8 sched ;
   __u8 idx ;
   __u8 min ;
   __u8 max ;
   __u8 binding ;
   __u8 rsvd1[3U] ;
};
#line 1278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_smt_write_req {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __u8 rsvd0 ;
   __u8 mtu_idx : 4 ;
   __u8 iff : 4 ;
   __be16 rsvd2 ;
   __be16 rsvd3 ;
   __u8 src_mac1[6U] ;
   __be16 rsvd4 ;
   __u8 src_mac0[6U] ;
};
#line 1360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_cpl.h"
struct cpl_rte_write_req {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __u8  ;
   __u8 write_tcam : 1 ;
   __u8 write_l2t_lut : 1 ;
   __u8 rsvd[3U] ;
   __be32 lut_params ;
   __be16 rsvd2 ;
   __be16 l2t_idx ;
   __be32 netmask ;
   __be32 faddr ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
struct reg_val {
   unsigned short mmd_addr ;
   unsigned short reg_addr ;
   unsigned short clear_bits ;
   unsigned short set_bits ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9822 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_9822 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9823 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_9823 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_9839 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_9839 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_9843 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_9843 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9844 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_9845 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_9844 __anonCompField_media_link_90 ;
   union __anonunion_9845 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_9847 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_9846 {
   struct __anonstruct_dev_9847 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_9846 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_9861 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_9862 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_9860 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_9861 i2c ;
   struct __anonstruct_custom_9862 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_9860 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_10763 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_10763 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_t3_async_intr_handler_18 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_get_coalesce_19 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_driver_20 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_3_21 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 11 
#line 11 
int ldv_atomic_add_return(int i, atomic_t *v);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static __u32 rol32(__u32 word, unsigned int shift)
{
  #line 102 
  return (word << (shift & 31U)) | (word >> (- shift & 31U));
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 61 
#line 61 
int memcmp(void *, void *, size_t);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_69 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_sub(int i, atomic_t *v)
{
  #line 189 
  int __ret;
  #line 189 
  __ret = - i;
  #line 189 
  switch (4UL) {
    #line 189 
    case (unsigned long)1: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)2: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)4: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    case (unsigned long)8: 
                           #line 189 
    ;
    #line 190 
    ldv_inline_asm();
    #line 189 
    break;
    #line 189 
    default: 
             #line 189 
    ;
    #line 189 
    __xadd_wrong_size();
  }
  #line 189 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 69 
#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static int atomic_add_return(int i, atomic_t *v);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_sub(int i, atomic_t *v)
{
  #line 199 
  kasan_check_read((void *)v,4U);
  #line 200 
  return arch_atomic_fetch_sub(i,v);
}

#line 237 
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void atomic_dec(atomic_t *v);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static bool IS_ERR(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock.h"
#line 18 
void __rwlock_init(rwlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock_api_smp.h"
#line 20 
void _raw_read_lock_bh(rwlock_t *);
#line 21 
#line 21 
void _raw_write_lock_bh(rwlock_t *);
#line 30 
#line 30 
void _raw_read_unlock(rwlock_t *);
#line 32 
#line 32 
void _raw_read_unlock_bh(rwlock_t *);
#line 33 
#line 33 
void _raw_write_unlock_bh(rwlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 852  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_lock_lock_of_l2t_entry(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_lock_bh_lock_of_l2t_entry(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 861  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_unlock_lock_of_l2t_entry(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_unlock_bh_lock_of_l2t_entry(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 221 
#line 221 
int rcu_read_lock_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 297 
#line 297 
extern int ( /* missing proto */ __builtin_add_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t __ab_c_size(size_t a, size_t b, size_t c)
{
  #line 297 
  size_t __a_0;
  #line 297 
  size_t __b_0;
  #line 297 
  size_t *__d_0;
  #line 295 
  size_t __a;
  #line 295 
  size_t __b;
  #line 295 
  size_t *__d;
  #line 293 
  size_t bytes;
  {
    #line 295 
    __a = a;
    #line 295 
    __b = b;
    #line 295 
    __d = & bytes;
    #line 295 
    int tmp = & __a == __d;
    }
  #line 295 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 296 
                                                return 18446744073709551615UL;
  {
    #line 297 
    __a_0 = bytes;
    #line 297 
    __b_0 = c;
    #line 297 
    __d_0 = & bytes;
    #line 297 
    int tmp_3 = & __a_0 == __d_0;
    }
  #line 297 
  if (__builtin_add_overflow(__a_0,__b_0,__d_0) != 0) 
                                                      #line 298 
                                                      return 18446744073709551615UL;
  #line 300 
  return bytes;
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static bool refcount_sub_and_test(int i, refcount_t *r)
{
  #line 253 
  int old = atomic_fetch_sub(i,& r->refs);
  #line 255 
  if (old == i) {
    #line 257 
    ldv_inline_asm();
    #line 257 
    return (_Bool)1;
  }
  #line 260 
  if ((long)(old < 0) != 0L || (long)(old - i < 0) != 0L) 
                                                          #line 261 
                                                          refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_SUB_UAF);
  #line 263 
  return (_Bool)0;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static bool refcount_dec_and_test(refcount_t *r)
{
  #line 281 
  return refcount_sub_and_test(1,r);
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
#line 652 
void *kvmalloc_node(size_t, gfp_t, int);
#line 653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *kvmalloc(size_t size, gfp_t flags)
{
  #line 655 
  return kvmalloc_node(size,flags,-1);
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *kvzalloc(size_t size, gfp_t flags)
{
  #line 663 
  return kvmalloc(size,flags | 256U);
}

#line 1025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1025 
void __kfree_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head *list)
{
  #line 1495 
  return list->next == (struct sk_buff *)list;
}

#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1829 
  list->next = ((struct sk_buff *)list);
  #line 1829 
  list->prev = ((struct sk_buff *)list);
  #line 1830 
  list->qlen = 0U;
  #line 1831 
  return;
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_insert(struct sk_buff *newsk, struct sk_buff *prev, struct sk_buff *next, struct sk_buff_head *list)
{
  {
    #line 1868 
    union __anonunion___u_504 __u = {.__val = next};
    #line 1867 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u.__c),8);
    #line 1867 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1869 
    union __anonunion___u_506 __u_0 = {.__val = prev};
    #line 1868 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_0.__c),8);
    #line 1868 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1870 
    union __anonunion___u_508 __u_1 = {.__val = newsk};
    #line 1869 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_1.__c),8);
    #line 1869 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1871 
    union __anonunion___u_510 __u_2 = {.__val = newsk};
    #line 1870 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_2.__c),8);
    #line 1870 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1871 
  (list->qlen) ++;
  #line 1872 
  return;
}

#line 1874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_splice(struct sk_buff_head *list, struct sk_buff *prev, struct sk_buff *next)
{
  #line 1878 
  struct sk_buff *first = list->next;
  #line 1879 
  struct sk_buff *last = list->prev;
  {
    #line 1882 
    union __anonunion___u_512 __u = {.__val = prev};
    #line 1881 
    __write_once_size((void *)(& first->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 1881 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1883 
    union __anonunion___u_514 __u_0 = {.__val = first};
    #line 1882 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 1882 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1885 
    union __anonunion___u_516 __u_1 = {.__val = next};
    #line 1884 
    __write_once_size((void *)(& last->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_1.__c),8);
    #line 1884 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1886 
    union __anonunion___u_518 __u_2 = {.__val = last};
    #line 1885 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_2.__c),8);
    #line 1885 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1887 
  return;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_splice_init(struct sk_buff_head *list, struct sk_buff_head *head)
{
  #line 1912 
  if (skb_queue_empty(list) == 0) {
    #line 1913 
    __skb_queue_splice(list,(struct sk_buff *)head,head->next);
    #line 1914 
    head->qlen += list->qlen;
    #line 1915 
    __skb_queue_head_init(list);
  }
  #line 1917 
  return;
}

#line 1972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_before(struct sk_buff_head *list, struct sk_buff *next, struct sk_buff *newsk)
{
  #line 1976 
  __skb_insert(newsk,next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev,next,list);
  #line 1977 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
  #line 2009 
  __skb_queue_before(list,(struct sk_buff *)list,newsk);
  #line 2010 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
  #line 2020 
  struct sk_buff *next;
  #line 2020 
  struct sk_buff *prev;
  #line 2022 
  (list->qlen) --;
  #line 2023 
  next = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 2024 
  prev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev;
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev = ((struct sk_buff *)0);
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next = ((struct sk_buff *)0);
  {
    #line 2027 
    union __anonunion___u_520 __u = {.__val = prev};
    #line 2026 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 2026 
    struct sk_buff *tmp_2 = __u.__val;
  }
  {
    #line 2028 
    union __anonunion___u_522 __u_0 = {.__val = next};
    #line 2027 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 2027 
    struct sk_buff *tmp_4 = __u_0.__val;
  }
  #line 2029 
  return;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool is_vlan_dev(struct net_device *dev)
{
  #line 72 
  return (_Bool)((dev->priv_flags & 1U) != 0U);
}

#line 135 
#line 135 
u16 vlan_dev_vlan_id(struct net_device *);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
__inline static u32 __jhash_nwords(u32 a, u32 b, u32 c, u32 initval)
{
  #line 150 
  a += initval;
  #line 151 
  b += initval;
  #line 152 
  c += initval;
  #line 154 
  c ^= b;
  #line 154 
  c -= rol32(b,14U);
  #line 154 
  a ^= c;
  #line 154 
  a -= rol32(c,11U);
  #line 154 
  b ^= a;
  #line 154 
  b -= rol32(a,25U);
  #line 154 
  c ^= b;
  #line 154 
  c -= rol32(b,16U);
  #line 154 
  a ^= c;
  #line 154 
  a -= rol32(c,4U);
  #line 154 
  b ^= a;
  #line 154 
  b -= rol32(a,14U);
  #line 154 
  c ^= b;
  #line 154 
  c -= rol32(b,24U);
  #line 156 
  return c;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
__inline static u32 jhash_2words(u32 a, u32 b, u32 initval)
{
  #line 166 
  return __jhash_nwords(a,b,0U,initval + 3735928567U);
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
#line 325 
void neigh_destroy(struct neighbour *);
#line 326 
#line 326 
int __neigh_event_send(struct neighbour *, struct sk_buff *);
#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
__inline static void neigh_release(struct neighbour *neigh)
{
  #line 424 
  if ((int)refcount_dec_and_test(& neigh->refcnt) != 0) 
                                                        #line 425 
                                                        neigh_destroy(neigh);
  #line 426 
  return;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
__inline static int neigh_event_send(struct neighbour *neigh, struct sk_buff *skb)
{
  #line 442 
  union __anonunion___u_708 __u_0;
  #line 439 
  unsigned long now = jiffies;
  #line 441 
  __read_once_size((void *)(& neigh->used),(void *)(& __u_0.__c),8);
  #line 441 
  ;
  #line 441 
  if ((__u_0.__val) != now) {
    #line 443 
    union __anonunion___u_706 __u = {.__val = now};
    #line 442 
    __write_once_size((void *)(& neigh->used),(void *)(& __u.__c),8);
    #line 442 
    unsigned long tmp = __u.__val;
  }
  #line 443 
  if (((int)neigh->nud_state & 218) == 0) {
    #line 444 
    return __neigh_event_send(neigh,skb);
  }
  #line 445 
  return 0;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
__inline static struct neighbour *dst_neigh_lookup(struct dst_entry *dst, void *daddr)
{
  #line 398 
  struct neighbour *tmp_1;
  #line 397 
  struct neighbour *n = (*((dst->ops)->neigh_lookup))(dst,(struct sk_buff *)0,daddr);
  #line 398 
  if ((int)IS_ERR((void *)n) == 0) 
                                   #line 398 
                                   tmp_1 = n; else 
                                                   #line 398 
                                                   tmp_1 = (struct neighbour *)0;
  #line 398 
  return tmp_1;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
void t3_l2e_free(struct l2t_data *d, struct l2t_entry *e);
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
void t3_l2t_update(struct t3cdev *dev, struct neighbour *neigh);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
struct l2t_entry *t3_l2t_get(struct t3cdev *cdev, struct dst_entry *dst, struct net_device *dev, void *daddr);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
int t3_l2t_send_slow(struct t3cdev *dev, struct sk_buff *skb, struct l2t_entry *e);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
void t3_l2t_send_event(struct t3cdev *dev, struct l2t_entry *e);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
struct l2t_data *t3_init_l2t(unsigned int l2t_capacity);
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
#line 119 
int cxgb3_ofld_send(struct t3cdev *dev, struct sk_buff *skb);
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
__inline static void l2t_hold(struct l2t_data *d, struct l2t_entry *e)
{
  #line 144 
  if (d != (struct l2t_data *)0) {
    #line 144 
    if (atomic_add_return(1,& e->refcnt) == 1) 
                                               #line 145 
                                               atomic_dec(& d->nfree);
  }
  #line 146 
  return;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
__inline static unsigned int vlan_prio(struct l2t_entry *e)
{
  #line 65 
  return (unsigned int)((int)e->vlan >> 13);
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
__inline static unsigned int arp_hash(u32 key, int ifindex, struct l2t_data *d)
{
  #line 71 
  ;
  #line 71 
  return jhash_2words(key,(unsigned int)ifindex,0U) & (d->nentries + 4294967295U);
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
__inline static void neigh_replace(struct l2t_entry *e, struct neighbour *n)
{
  #line 76 
  refcount_inc(& n->refcnt);
  #line 77 
  if (e->neigh != (struct neighbour *)0) 
                                         #line 78 
                                         neigh_release(e->neigh);
  #line 79 
  e->neigh = n;
  #line 80 
  return;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
static int setup_l2e_send_pending(struct t3cdev *dev, struct sk_buff *skb, struct l2t_entry *e)
{
  #line 90 
  struct cpl_l2t_write_req *req;
  #line 91 
  struct sk_buff *tmp;
  #line 93 
  if (skb == (struct sk_buff *)0) {
    #line 94 
    skb = alloc_skb(24U,2592U);
    #line 95 
    if (skb == (struct sk_buff *)0) 
                                    #line 96 
                                    return -12;
  }
  #line 99 
  req = (struct cpl_l2t_write_req *)__skb_put(skb,24U);
  #line 100 
  req->wr.wr_hi = 1U;
  #line 101 
  req->ot.opcode_tid = __builtin_bswap32((unsigned int)((int)e->idx | 301989888));
  #line 102 
  ;
  #line 102 
  req->params = __builtin_bswap32((unsigned int)(((int)e->idx | ((int)e->smt_idx << 23)) | (((int)e->vlan << 11) & 8386560)) | (vlan_prio(e) << 27));
  #line 105 
  memcpy((void *)(& e->dmac),(void *)(& (e->neigh)->ha),6UL);
  #line 106 
  memcpy((void *)(& req->dst_mac),(void *)(& e->dmac),6UL);
  #line 107 
  skb->priority = 1U;
  #line 108 
  cxgb3_ofld_send(dev,skb);
  #line 110 
  skb = e->arpq.next;
  #line 110 
  tmp = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 110 
  while ((struct sk_buff *)(& e->arpq) != skb) {
    #line 111 
    __skb_unlink(skb,& e->arpq);
    #line 112 
    cxgb3_ofld_send(dev,skb);
    #line 110 
    skb = tmp;
    #line 110 
    tmp = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  }
  #line 114 
  e->state = (unsigned short)0U;
  #line 116 
  return 0;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
__inline static void arpq_enqueue(struct l2t_entry *e, struct sk_buff *skb)
{
  #line 125 
  __skb_queue_tail(& e->arpq,skb);
  #line 126 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
int t3_l2t_send_slow(struct t3cdev *dev, struct sk_buff *skb, struct l2t_entry *e)
{
  #line 131 
  again: 
         #line 131 
  ;
  #line 132 
  switch ((int)e->state) {
    #line 133 
    case 1: 
            #line 133 
    ;
    #line 134 
    neigh_event_send(e->neigh,(struct sk_buff *)0);
    #line 135 
    cif_spin_lock_bh_lock_of_l2t_entry(& e->lock);
    #line 136 
    if ((unsigned int)e->state == 1U) 
                                      #line 137 
                                      e->state = (unsigned short)0U;
    #line 138 
    cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
    #line 140 
    case 0: 
            #line 140 
    ;
    #line 141 
    return cxgb3_ofld_send(dev,skb);
    #line 142 
    case 2: 
            #line 142 
    ;
    #line 143 
    cif_spin_lock_bh_lock_of_l2t_entry(& e->lock);
    #line 144 
    if ((unsigned int)e->state != 2U) {
      #line 146 
      cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
      #line 147 
      goto again;
    }
    #line 149 
    arpq_enqueue(e,skb);
    #line 150 
    cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
    #line 160 
    if (neigh_event_send(e->neigh,(struct sk_buff *)0) == 0) {
      #line 161 
      skb = alloc_skb(24U,2592U);
      #line 163 
      if (skb == (struct sk_buff *)0) 
                                      #line 164 
                                      break;
      #line 166 
      cif_spin_lock_bh_lock_of_l2t_entry(& e->lock);
      #line 167 
      if (skb_queue_empty(& e->arpq) == 0) 
                                           #line 168 
                                           setup_l2e_send_pending(dev,skb,e); else 
                                                                    #line 170 
                                                                    __kfree_skb(skb);
      #line 171 
      cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
    }
  }
  #line 174 
  return 0;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
void t3_l2t_send_event(struct t3cdev *dev, struct l2t_entry *e)
{
  #line 181 
  again: 
         #line 181 
  ;
  #line 182 
  switch ((int)e->state) {
    #line 183 
    case 1: 
            #line 183 
    ;
    #line 184 
    neigh_event_send(e->neigh,(struct sk_buff *)0);
    #line 185 
    cif_spin_lock_bh_lock_of_l2t_entry(& e->lock);
    #line 186 
    if ((unsigned int)e->state == 1U) 
                                      #line 187 
                                      e->state = (unsigned short)0U;
    #line 189 
    cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
    #line 190 
    return;
    #line 191 
    case 0: 
            #line 191 
    ;
    #line 192 
    return;
    #line 193 
    case 2: 
            #line 193 
    ;
    #line 194 
    cif_spin_lock_bh_lock_of_l2t_entry(& e->lock);
    #line 195 
    if ((unsigned int)e->state != 2U) {
      #line 197 
      cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
      #line 198 
      goto again;
    }
    #line 200 
    cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
    #line 210 
    neigh_event_send(e->neigh,(struct sk_buff *)0);
  }
  #line 212 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
static struct l2t_entry *alloc_l2e(struct l2t_data *d)
{
  #line 221 
  struct l2t_entry *end;
  #line 221 
  struct l2t_entry *e;
  #line 221 
  struct l2t_entry **p;
  #line 223 
  if (atomic_read(& d->nfree) == 0) 
                                    #line 224 
                                    return (struct l2t_entry *)0;
  #line 227 
  e = d->rover;
  #line 227 
  end = & d->l2tab[d->nentries];
  #line 227 
  while (e != end) {
    #line 228 
    if (atomic_read(& e->refcnt) == 0) 
                                       #line 229 
                                       goto found;
    #line 227 
    e ++;
  }
  #line 231 
  e = & d->l2tab[1];
  #line 231 
  while (1) {
    #line 231 
    if (! (atomic_read(& e->refcnt) != 0)) 
                                           #line 231 
                                           break;
    #line 231 
    e ++;
  }
  #line 232 
  found: 
         #line 232 
  ;
  #line 233 
  d->rover = e + 1U;
  #line 234 
  atomic_dec(& d->nfree);
  #line 240 
  if ((unsigned int)e->state != 3U) {
    #line 241 
    int hash = (int)arp_hash(e->addr,e->ifindex,d);
    #line 243 
    p = & d->l2tab[hash].first;
    #line 243 
    while (*p != (struct l2t_entry *)0) {
      #line 244 
      if (*p == e) {
        #line 245 
        *p = e->next;
        #line 246 
        break;
      }
      #line 243 
      p = & (*p)->next;
    }
    #line 248 
    e->state = (unsigned short)3U;
  }
  #line 250 
  return e;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
void t3_l2e_free(struct l2t_data *d, struct l2t_entry *e)
{
  #line 266 
  cif_spin_lock_bh_lock_of_l2t_entry(& e->lock);
  #line 267 
  if (atomic_read(& e->refcnt) == 0) 
    #line 268 
    if (e->neigh != (struct neighbour *)0) {
      #line 269 
      neigh_release(e->neigh);
      #line 270 
      e->neigh = (struct neighbour *)0;
    }
  #line 273 
  cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
  #line 274 
  atomic_inc(& d->nfree);
  #line 275 
  return;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
__inline static void reuse_entry(struct l2t_entry *e, struct neighbour *neigh)
{
  #line 285 
  unsigned int nud_state;
  #line 287 
  cif_spin_lock_lock_of_l2t_entry(& e->lock);
  #line 289 
  if (e->neigh != neigh) 
                         #line 290 
                         neigh_replace(e,neigh);
  #line 291 
  nud_state = (unsigned int)neigh->nud_state;
  #line 292 
  if (memcmp((void *)(& e->dmac),(void *)(& neigh->ha),6UL) != 0) 
                                                                  #line 292 
                                                                  goto _LOR;
  else 
    #line 292 
    if ((nud_state & 222U) == 0U) 
                                  #line 292 
                                  _LOR: 
                                        #line 294 
                                        e->state = (unsigned short)2U;
    else 
      #line 295 
      if ((nud_state & 194U) != 0U) 
                                    #line 296 
                                    e->state = (unsigned short)0U; else 
                                                                    #line 298 
                                                                    e->state = (unsigned short)1U;
  #line 299 
  cif_spin_unlock_lock_of_l2t_entry(& e->lock);
  #line 300 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
struct l2t_entry *t3_l2t_get(struct t3cdev *cdev, struct dst_entry *dst, struct net_device *dev, void *daddr)
{
  #line 327 
  void *________p1;
  #line 306 
  struct neighbour *neigh;
  #line 307 
  struct port_info *p;
  #line 308 
  struct l2t_data *d;
  #line 309 
  int hash;
  #line 310 
  u32 addr;
  #line 311 
  int ifidx;
  #line 312 
  int smt_idx;
  #line 305 
  struct l2t_entry *e = (struct l2t_entry *)0;
  #line 314 
  rcu_read_lock();
  #line 315 
  neigh = dst_neigh_lookup(dst,daddr);
  #line 316 
  if (neigh == (struct neighbour *)0) 
                                      #line 317 
                                      goto done_rcu;
  #line 319 
  addr = *((u32 *)(& neigh->primary_key));
  #line 320 
  ifidx = (neigh->dev)->ifindex;
  #line 322 
  if (dev == (struct net_device *)0) 
                                     #line 323 
                                     dev = neigh->dev;
  #line 324 
  p = (struct port_info *)netdev_priv(dev);
  #line 325 
  smt_idx = (int)p->port_id;
  {
    #line 328 
    union __anonunion___u_1045 __u;
    #line 327 
    __read_once_size((void *)(& cdev->l2opt),(void *)(& __u.__c),8);
    #line 327 
    ________p1 = (__u.__val);
    {
      #line 327 
      bool __warned;
      #line 327 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 327 
        if (! __warned) {
          #line 327 
          if (rcu_read_lock_held() == 0) {
            #line 327 
            __warned = (_Bool)1;
            #line 327 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c",327,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 327 
  d = (struct l2t_data *)________p1;
  #line 328 
  if (d == (struct l2t_data *)0) 
                                 #line 329 
                                 goto done_rcu;
  #line 331 
  hash = (int)arp_hash(addr,ifidx,d);
  #line 333 
  _raw_write_lock_bh(& d->lock);
  #line 334 
  e = d->l2tab[hash].first;
  #line 334 
  while (e != (struct l2t_entry *)0) {
    #line 335 
    if ((e->addr == addr && e->ifindex == ifidx) && (int)e->smt_idx == smt_idx) {
      #line 337 
      l2t_hold(d,e);
      #line 338 
      if (atomic_read(& e->refcnt) == 1) 
                                         #line 339 
                                         reuse_entry(e,neigh);
      #line 340 
      goto done_unlock;
    }
    #line 334 
    e = e->next;
  }
  #line 344 
  e = alloc_l2e(d);
  #line 345 
  if (e != (struct l2t_entry *)0) {
    #line 346 
    cif_spin_lock_lock_of_l2t_entry(& e->lock);
    #line 347 
    e->next = d->l2tab[hash].first;
    #line 348 
    d->l2tab[hash].first = e;
    #line 349 
    e->state = (unsigned short)2U;
    #line 350 
    e->addr = addr;
    #line 351 
    e->ifindex = ifidx;
    #line 352 
    e->smt_idx = (unsigned short)smt_idx;
    #line 353 
    atomic_set(& e->refcnt,1);
    #line 354 
    neigh_replace(e,neigh);
    #line 355 
    if ((int)is_vlan_dev(neigh->dev) != 0) 
                                           #line 356 
                                           e->vlan = vlan_dev_vlan_id(neigh->dev); else 
                                                                    #line 358 
                                                                    e->vlan = (unsigned short)4095U;
    #line 359 
    cif_spin_unlock_lock_of_l2t_entry(& e->lock);
  }
  #line 361 
  done_unlock: 
               #line 361 
  ;
  #line 362 
  _raw_write_unlock_bh(& d->lock);
  #line 363 
  done_rcu: 
            #line 363 
  ;
  #line 364 
  if (neigh != (struct neighbour *)0) 
                                      #line 365 
                                      neigh_release(neigh);
  #line 366 
  rcu_read_unlock();
  #line 367 
  return e;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
static void handle_failed_resolution(struct t3cdev *dev, struct sk_buff_head *arpq)
{
  #line 382 
  struct sk_buff *skb;
  #line 382 
  struct sk_buff *tmp;
  #line 384 
  skb = arpq->next;
  #line 384 
  tmp = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 384 
  while (skb != (struct sk_buff *)arpq) {
    {
      #line 385 
      struct l2t_skb_cb *cb = (struct l2t_skb_cb *)(& skb->cb);
      #line 387 
      __skb_unlink(skb,arpq);
      #line 388 
      if (cb->arp_failure_handler != (void (*)(struct t3cdev *, struct sk_buff *))0) 
        #line 389 
        (*(cb->arp_failure_handler))(dev,skb); else 
                                                    #line 391 
                                                    cxgb3_ofld_send(dev,skb);
    }
    #line 384 
    skb = tmp;
    #line 384 
    tmp = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  }
  #line 393 
  return;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
void t3_l2t_update(struct t3cdev *dev, struct neighbour *neigh)
{
  #line 403 
  void *________p1;
  #line 401 
  struct sk_buff_head arpq;
  #line 402 
  struct l2t_entry *e;
  {
    #line 404 
    union __anonunion___u_1047 __u;
    #line 403 
    __read_once_size((void *)(& dev->l2opt),(void *)(& __u.__c),8);
    #line 403 
    ________p1 = (__u.__val);
    {
      #line 403 
      bool __warned;
      #line 403 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 403 
        if (! __warned) {
          #line 403 
          if (rcu_read_lock_held() == 0) {
            #line 403 
            __warned = (_Bool)1;
            #line 403 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c",403,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 403 
  struct l2t_data *d = (struct l2t_data *)________p1;
  #line 404 
  u32 addr = *((u32 *)(& neigh->primary_key));
  #line 405 
  int ifidx = (neigh->dev)->ifindex;
  #line 406 
  int hash = (int)arp_hash(addr,ifidx,d);
  #line 408 
  _raw_read_lock_bh(& d->lock);
  #line 409 
  e = d->l2tab[hash].first;
  #line 409 
  while (e != (struct l2t_entry *)0) {
    #line 410 
    if (e->addr == addr && e->ifindex == ifidx) {
      #line 411 
      cif_spin_lock_lock_of_l2t_entry(& e->lock);
      #line 412 
      goto found;
    }
    #line 409 
    e = e->next;
  }
  #line 414 
  _raw_read_unlock_bh(& d->lock);
  #line 415 
  return;
  #line 417 
  found: 
         #line 417 
  ;
  #line 418 
  __skb_queue_head_init(& arpq);
  #line 420 
  _raw_read_unlock(& d->lock);
  #line 421 
  if (atomic_read(& e->refcnt) != 0) {
    #line 422 
    if (e->neigh != neigh) 
                           #line 423 
                           neigh_replace(e,neigh);
    #line 425 
    if ((unsigned int)e->state == 2U) {
      #line 426 
      if (((int)neigh->nud_state & 32) != 0) 
                                             #line 427 
                                             skb_queue_splice_init(& e->arpq,& arpq);
      else 
        #line 428 
        if (((int)neigh->nud_state & 198) != 0) 
                                                #line 429 
                                                setup_l2e_send_pending(dev,(struct sk_buff *)0,e);
    }
    else {
      #line 431 
      e->state = (unsigned short)(((int)neigh->nud_state & 194) == 0);
      #line 433 
      if (! ether_addr_equal((u8 *)(& e->dmac),(u8 *)(& neigh->ha))) 
        #line 434 
        setup_l2e_send_pending(dev,(struct sk_buff *)0,e);
    }
  }
  #line 437 
  cif_spin_unlock_bh_lock_of_l2t_entry(& e->lock);
  #line 439 
  if (skb_queue_empty(& arpq) == 0) 
                                    #line 440 
                                    handle_failed_resolution(dev,& arpq);
  #line 441 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.c"
struct l2t_data *t3_init_l2t(unsigned int l2t_capacity)
{
  #line 445 
  struct l2t_data *d;
  #line 446 
  int i;
  #line 448 
  d = (struct l2t_data *)kvzalloc(__ab_c_size((unsigned long)l2t_capacity,224UL,112UL),3264U);
  #line 449 
  if (d == (struct l2t_data *)0) 
                                 #line 450 
                                 return (struct l2t_data *)0;
  #line 452 
  d->nentries = l2t_capacity;
  #line 453 
  d->rover = & d->l2tab[1];
  #line 454 
  atomic_set(& d->nfree,(int)(l2t_capacity + 4294967295U));
  {
    #line 455 
    struct lock_class_key __key;
    #line 455 
    __rwlock_init(& d->lock,(char *)"&d->lock",& __key);
  }
  #line 457 
  i = 0;
  #line 457 
  while ((unsigned int)i < l2t_capacity) {
    #line 458 
    d->l2tab[i].idx = (unsigned short)i;
    #line 459 
    d->l2tab[i].state = (unsigned short)3U;
    #line 460 
    __skb_queue_head_init(& d->l2tab[i].arpq);
    #line 461 
    spinlock_check(& d->l2tab[i].lock);
    {
      #line 461 
      struct lock_class_key __key_0;
      #line 461 
      __raw_spin_lock_init(& d->l2tab[i].lock.__anonCompField_spinlock_25.rlock,(char *)"&(&d->l2tab[i].lock)->rlock",& __key_0);
    }
    #line 462 
    atomic_set(& d->l2tab[i].refcnt,0);
    #line 457 
    i ++;
  }
  #line 464 
  return d;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static int atomic_add_return(int i, atomic_t *v)
{
  #line 177 
  return ldv_atomic_add_return(i,v);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 191 
  ldv_atomic_inc(v);
  #line 192 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 198 
  ldv_atomic_dec(v);
  #line 199 
  return;
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 226 
  return ldv_is_err(ptr);
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_lock_bh_lock_of_l2t_entry(spinlock_t *lock)
{
  #line 837 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  #line 839 
  spin_lock_bh(lock);
  #line 840 
  return;
}

#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_unlock_bh_lock_of_l2t_entry(spinlock_t *lock)
{
  #line 846 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  #line 848 
  spin_unlock_bh(lock);
  #line 849 
  return;
}

#line 852  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_lock_lock_of_l2t_entry(spinlock_t *lock)
{
  #line 855 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  #line 857 
  spin_lock(lock);
  #line 858 
  return;
}

#line 861  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/l2t.i.aux"
static void cif_spin_unlock_lock_of_l2t_entry(spinlock_t *lock)
{
  #line 864 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  #line 866 
  spin_unlock(lock);
  #line 867 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 561  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static int t3_mdio_read(struct cphy *phy, int mmd, int reg, unsigned int *valp)
{
  #line 565 
  int tmp_0;
  #line 566 
  int tmp_1;
  #line 564 
  int rc = (*(phy->mdio.mdio_read))(phy->mdio.dev,phy->mdio.prtad,mmd,
                               (unsigned short)((int)((unsigned short)reg)));
  #line 565 
  if (-1 > rc) 
               #line 565 
               tmp_0 = -1; else 
                                #line 565 
                                tmp_0 = rc;
  #line 565 
  *valp = (unsigned int)tmp_0;
  #line 566 
  if (0 < rc) 
              #line 566 
              tmp_1 = 0; else 
                              #line 566 
                              tmp_1 = rc;
  #line 566 
  return tmp_1;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static int t3_mdio_write(struct cphy *phy, int mmd, int reg, unsigned int val)
{
  #line 572 
  return (*(phy->mdio.mdio_write))(phy->mdio.dev,phy->mdio.prtad,mmd,
                                (unsigned short)((int)((unsigned short)reg)),
                                (unsigned short)((int)((unsigned short)val)));
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static void cphy_init(struct cphy *phy, struct adapter *adapter, int phy_addr, struct cphy_ops *phy_ops, struct mdio_ops *mdio_ops, unsigned int caps, char *desc)
{
  #line 582 
  phy->caps = caps;
  #line 583 
  phy->adapter = adapter;
  #line 584 
  phy->desc = desc;
  #line 585 
  phy->ops = phy_ops;
  #line 586 
  if (mdio_ops != (struct mdio_ops *)0) {
    #line 587 
    phy->mdio.prtad = phy_addr;
    #line 588 
    phy->mdio.mmds = phy_ops->mmds;
    #line 589 
    phy->mdio.mode_support = mdio_ops->mode_support;
    #line 590 
    phy->mdio.mdio_read = mdio_ops->read;
    #line 591 
    phy->mdio.mdio_write = mdio_ops->write;
  }
  #line 593 
  return;
}

#line 654 
#line 654 
int t3_mdio_change_bits(struct cphy *phy, int mmd, int reg, unsigned int clear, unsigned int set);
#line 656 
#line 656 
int t3_phy_reset(struct cphy *phy, int mmd, int wait);
#line 657 
#line 657 
int t3_phy_advertise(struct cphy *phy, unsigned int advert);
#line 658 
#line 658 
int t3_phy_advertise_fiber(struct cphy *phy, unsigned int advert);
#line 659 
#line 659 
int t3_set_phy_speed_duplex(struct cphy *phy, int speed, int duplex);
#line 757 
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
int t3_vsc8211_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_reset(struct cphy *cphy, int wait)
{
  #line 94 
  return t3_phy_reset(cphy,-1,0);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_intr_enable(struct cphy *cphy)
{
  #line 99 
  return t3_mdio_write(cphy,-1,25,64608U);
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_intr_disable(struct cphy *cphy)
{
  #line 105 
  return t3_mdio_write(cphy,-1,25,0U);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_intr_clear(struct cphy *cphy)
{
  #line 110 
  u32 val;
  #line 113 
  return t3_mdio_read(cphy,-1,26,& val);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_autoneg_enable(struct cphy *cphy)
{
  #line 118 
  return t3_mdio_change_bits(cphy,-1,0,3072U,4608U);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_autoneg_restart(struct cphy *cphy)
{
  #line 125 
  return t3_mdio_change_bits(cphy,-1,0,3072U,512U);
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_get_link_status(struct cphy *cphy, int *link_ok, int *speed, int *duplex, int *fc)
{
  #line 133 
  unsigned int bmcr;
  #line 133 
  unsigned int status;
  #line 133 
  unsigned int lpa;
  #line 133 
  unsigned int adv;
  #line 134 
  int err;
  #line 134 
  int sp = -1;
  #line 134 
  int dplx = -1;
  #line 134 
  int pause = 0;
  #line 136 
  err = t3_mdio_read(cphy,-1,0,& bmcr);
  #line 137 
  if (err == 0) 
                #line 138 
                err = t3_mdio_read(cphy,-1,1,& status);
  #line 139 
  if (err != 0) 
                #line 140 
                return err;
  #line 142 
  if (link_ok != (int *)0) {
    #line 147 
    if ((status & 4U) == 0U) 
                             #line 148 
                             err = t3_mdio_read(cphy,-1,1,& status);
    #line 150 
    if (err != 0) 
                  #line 151 
                  return err;
    #line 152 
    *link_ok = (status & 4U) != 0U;
  }
  #line 154 
  if ((bmcr & 4096U) == 0U) {
    #line 155 
    dplx = (int)(bmcr >> 8) & 1;
    #line 156 
    if ((bmcr & 64U) != 0U) 
                            #line 157 
                            sp = 1000;
    else 
      #line 158 
      if ((bmcr & 8192U) != 0U) 
                                #line 159 
                                sp = 100; else 
                                               #line 161 
                                               sp = 10;
  }
  else 
    #line 162 
    if ((status & 32U) != 0U) {
      #line 163 
      err = t3_mdio_read(cphy,-1,28,& status);
      #line 165 
      if (err != 0) 
                    #line 166 
                    return err;
      #line 168 
      dplx = (int)(status >> 5) & 1;
      #line 169 
      sp = (int)(status >> 3) & 3;
      #line 170 
      if (sp == 0) 
                   #line 171 
                   sp = 10;
      else 
        #line 172 
        if (sp == 1) 
                     #line 173 
                     sp = 100; else 
                                    #line 175 
                                    sp = 1000;
      #line 177 
      if (fc != (int *)0 && dplx == 1) {
        #line 178 
        err = t3_mdio_read(cphy,-1,5,& lpa);
        #line 180 
        if (err == 0) 
                      #line 181 
                      err = t3_mdio_read(cphy,-1,4,& adv);
        #line 183 
        if (err != 0) 
                      #line 184 
                      return err;
        #line 186 
        if (((lpa & adv) & 1024U) != 0U) 
                                         #line 187 
                                         pause = 3;
        else 
          #line 188 
          if (((lpa & 1024U) != 0U && (lpa & 2048U) != 0U) && (adv & 2048U) != 0U) 
            #line 191 
            pause = 2;
          else 
            #line 192 
            if ((lpa & 2048U) != 0U && (adv & 1024U) != 0U) 
                                                            #line 194 
                                                            pause = 1;
      }
    }
  #line 197 
  if (speed != (int *)0) 
                         #line 198 
                         *speed = sp;
  #line 199 
  if (duplex != (int *)0) 
                          #line 200 
                          *duplex = dplx;
  #line 201 
  if (fc != (int *)0) 
                      #line 202 
                      *fc = pause;
  #line 203 
  return 0;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_get_link_status_fiber(struct cphy *cphy, int *link_ok, int *speed, int *duplex, int *fc)
{
  #line 209 
  unsigned int bmcr;
  #line 209 
  unsigned int status;
  #line 209 
  unsigned int lpa;
  #line 209 
  unsigned int adv;
  #line 210 
  int err;
  #line 210 
  int sp = -1;
  #line 210 
  int dplx = -1;
  #line 210 
  int pause = 0;
  #line 212 
  err = t3_mdio_read(cphy,-1,0,& bmcr);
  #line 213 
  if (err == 0) 
                #line 214 
                err = t3_mdio_read(cphy,-1,1,& status);
  #line 215 
  if (err != 0) 
                #line 216 
                return err;
  #line 218 
  if (link_ok != (int *)0) {
    #line 223 
    if ((status & 4U) == 0U) 
                             #line 224 
                             err = t3_mdio_read(cphy,-1,1,& status);
    #line 226 
    if (err != 0) 
                  #line 227 
                  return err;
    #line 228 
    *link_ok = (status & 4U) != 0U;
  }
  #line 230 
  if ((bmcr & 4096U) == 0U) {
    #line 231 
    dplx = (int)(bmcr >> 8) & 1;
    #line 232 
    if ((bmcr & 64U) != 0U) 
                            #line 233 
                            sp = 1000;
    else 
      #line 234 
      if ((bmcr & 8192U) != 0U) 
                                #line 235 
                                sp = 100; else 
                                               #line 237 
                                               sp = 10;
  }
  else 
    #line 238 
    if ((status & 32U) != 0U) {
      #line 239 
      err = t3_mdio_read(cphy,-1,5,& lpa);
      #line 240 
      if (err == 0) 
                    #line 241 
                    err = t3_mdio_read(cphy,-1,4,& adv);
      #line 243 
      if (err != 0) 
                    #line 244 
                    return err;
      #line 246 
      if (((adv & lpa) & 32U) != 0U) {
        #line 247 
        dplx = 1;
        #line 248 
        sp = 1000;
      }
      else 
        #line 249 
        if (((adv & lpa) & 64U) != 0U) {
          #line 250 
          dplx = 0;
          #line 251 
          sp = 1000;
        }
      #line 254 
      if (fc != (int *)0 && dplx == 1) 
        #line 255 
        if (((lpa & adv) & 128U) != 0U) 
                                        #line 256 
                                        pause = 3;
        else 
          #line 257 
          if ((lpa & 128U) != 0U && ((adv & lpa) & 256U) != 0U) 
                                                                #line 259 
                                                                pause = 2;
          else 
            #line 260 
            if ((lpa & 256U) != 0U && (adv & 128U) != 0U) 
                                                          #line 262 
                                                          pause = 1;
    }
  #line 265 
  if (speed != (int *)0) 
                         #line 266 
                         *speed = sp;
  #line 267 
  if (duplex != (int *)0) 
                          #line 268 
                          *duplex = dplx;
  #line 269 
  if (fc != (int *)0) 
                      #line 270 
                      *fc = pause;
  #line 271 
  return 0;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_power_down(struct cphy *cphy, int enable)
{
  #line 318 
  unsigned int tmp;
  #line 318 
  if (enable != 0) 
                   #line 318 
                   tmp = 2048U; else 
                                     #line 318 
                                     tmp = 0U;
  #line 318 
  ;
  #line 318 
  return t3_mdio_change_bits(cphy,0,0,2048U,tmp);
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static int vsc8211_intr_handler(struct cphy *cphy)
{
  #line 324 
  unsigned int cause;
  #line 325 
  int err;
  #line 325 
  int cphy_cause = 0;
  #line 327 
  err = t3_mdio_read(cphy,-1,26,& cause);
  #line 328 
  if (err != 0) 
                #line 329 
                return err;
  #line 331 
  cause &= 64608U;
  #line 332 
  if ((cause & 31744U) != 0U) 
                              #line 333 
                              cphy_cause |= 1;
  #line 334 
  if ((cause & 96U) != 0U) 
                           #line 335 
                           cphy_cause |= 2;
  #line 336 
  return cphy_cause;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static struct cphy_ops vsc8211_ops = {.reset = & vsc8211_reset, .intr_enable = & vsc8211_intr_enable, .intr_disable = & vsc8211_intr_disable, .intr_clear = & vsc8211_intr_clear, .intr_handler = & vsc8211_intr_handler, .autoneg_enable = & vsc8211_autoneg_enable, .autoneg_restart = & vsc8211_autoneg_restart, .advertise = & t3_phy_advertise, .set_speed_duplex = & t3_set_phy_speed_duplex, .get_link_status = & vsc8211_get_link_status, .power_down = & vsc8211_power_down};
#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
static struct cphy_ops vsc8211_fiber_ops = {.reset = & vsc8211_reset, .intr_enable = & vsc8211_intr_enable, .intr_disable = & vsc8211_intr_disable, .intr_clear = & vsc8211_intr_clear, .intr_handler = & vsc8211_intr_handler, .autoneg_enable = & vsc8211_autoneg_enable, .autoneg_restart = & vsc8211_autoneg_restart, .advertise = & t3_phy_advertise_fiber, .set_speed_duplex = & t3_set_phy_speed_duplex, .get_link_status = & vsc8211_get_link_status_fiber, .power_down = & vsc8211_power_down};
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/vsc8211.c"
int t3_vsc8211_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 370 
  int err;
  #line 371 
  unsigned int val;
  #line 373 
  cphy_init(phy,adapter,phy_addr,& vsc8211_ops,mdio_ops,16777962U,(char *)"10/100/1000BASE-T");
  #line 377 
  msleep(20U);
  #line 379 
  err = t3_mdio_read(phy,-1,23,& val);
  #line 380 
  if (err != 0) 
                #line 381 
                return err;
  #line 382 
  if ((val & 61440U) != 0U) {
    #line 384 
    return t3_mdio_write(phy,-1,27,256U);
  }
  #line 388 
  phy->caps = 16778848U;
  #line 390 
  phy->desc = (char *)"1000BASE-X";
  #line 391 
  phy->ops = & vsc8211_fiber_ops;
  #line 393 
  err = t3_mdio_write(phy,-1,31,1U);
  #line 394 
  if (err != 0) 
                #line 395 
                return err;
  #line 397 
  err = t3_mdio_write(phy,-1,19,1U);
  #line 398 
  if (err != 0) 
                #line 399 
                return err;
  #line 401 
  err = t3_mdio_write(phy,-1,31,0U);
  #line 402 
  if (err != 0) 
                #line 403 
                return err;
  #line 405 
  err = t3_mdio_write(phy,-1,23,val | 16U);
  #line 407 
  if (err != 0) 
                #line 408 
                return err;
  #line 410 
  err = vsc8211_reset(phy,0);
  #line 411 
  if (err != 0) 
                #line 412 
                return err;
  #line 414 
  __const_udelay(21475UL);
  #line 415 
  return 0;
}

#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 141 
int mdio_set_flag(struct mdio_if_info *, int, int, u16, int, bool);
#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 642 
void t3_set_reg_field(struct adapter *adapter, unsigned int addr, u32 mask, u32 val);
#line 771 
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
int t3_aq100x_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_reset(struct cphy *phy, int wait)
{
  #line 71 
  int err = t3_phy_reset(phy,30,3000);
  #line 73 
  if (err != 0) 
                #line 74 
                _dev_warn(& ((phy->adapter)->pdev)->dev,(char *)"PHY%d: reset failed (0x%x).\n",phy->mdio.prtad,err);
  #line 77 
  return err;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_intr_enable(struct cphy *phy)
{
  #line 82 
  int err = t3_mdio_write(phy,1,61440,4U);
  #line 83 
  if (err != 0) 
                #line 84 
                return err;
  #line 86 
  err = t3_mdio_write(phy,30,65280,32768U);
  #line 87 
  return err;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_intr_disable(struct cphy *phy)
{
  #line 92 
  return t3_mdio_write(phy,30,65280,0U);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_intr_clear(struct cphy *phy)
{
  #line 97 
  unsigned int v;
  #line 99 
  t3_mdio_read(phy,30,64512,& v);
  #line 100 
  t3_mdio_read(phy,1,1,& v);
  #line 102 
  return 0;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_intr_handler(struct cphy *phy)
{
  #line 107 
  int err;
  #line 108 
  unsigned int cause;
  #line 108 
  unsigned int v;
  #line 110 
  err = t3_mdio_read(phy,30,64512,& cause);
  #line 111 
  if (err != 0) 
                #line 112 
                return err;
  #line 115 
  t3_mdio_read(phy,1,1,& v);
  #line 117 
  return 1;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_power_down(struct cphy *phy, int off)
{
  #line 122 
  return mdio_set_flag(& phy->mdio,phy->mdio.prtad,1,(unsigned short)0,2048,
                    (_Bool)(off != 0));
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_autoneg_enable(struct cphy *phy)
{
  #line 129 
  int err;
  #line 131 
  err = aq100x_power_down(phy,0);
  #line 132 
  if (err == 0) 
                #line 133 
                err = mdio_set_flag(& phy->mdio,phy->mdio.prtad,7,(unsigned short)0,4608,(_Bool)1);
  #line 137 
  return err;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_autoneg_restart(struct cphy *phy)
{
  #line 142 
  int err;
  #line 144 
  err = aq100x_power_down(phy,0);
  #line 145 
  if (err == 0) 
                #line 146 
                err = mdio_set_flag(& phy->mdio,phy->mdio.prtad,7,(unsigned short)0,4608,(_Bool)1);
  #line 150 
  return err;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_advertise(struct cphy *phy, unsigned int advertise_map)
{
  #line 155 
  unsigned int adv;
  #line 156 
  int err;
  #line 159 
  adv = 0U;
  #line 160 
  if (((unsigned long)advertise_map & 4096UL) != 0UL) 
                                                      #line 161 
                                                      adv |= 4096U;
  #line 162 
  err = t3_mdio_change_bits(phy,7,32,4096U,adv);
  #line 164 
  if (err != 0) 
                #line 165 
                return err;
  #line 168 
  adv = 0U;
  #line 169 
  if (((unsigned long)advertise_map & 32UL) != 0UL) 
                                                    #line 170 
                                                    adv |= 32768U;
  #line 171 
  if (((unsigned long)advertise_map & 16UL) != 0UL) 
                                                    #line 172 
                                                    adv |= 16384U;
  #line 173 
  err = t3_mdio_change_bits(phy,7,50176,49152U,adv);
  #line 175 
  if (err != 0) 
                #line 176 
                return err;
  #line 179 
  adv = 0U;
  #line 180 
  if (((unsigned long)advertise_map & 4UL) != 0UL) 
                                                   #line 181 
                                                   adv |= 128U;
  #line 182 
  if (((unsigned long)advertise_map & 8UL) != 0UL) 
                                                   #line 183 
                                                   adv |= 256U;
  #line 184 
  if (((unsigned long)advertise_map & 8192UL) != 0UL) 
                                                      #line 185 
                                                      adv |= 1024U;
  #line 186 
  if (((unsigned long)advertise_map & 16384UL) != 0UL) 
                                                       #line 187 
                                                       adv |= 2048U;
  #line 188 
  err = t3_mdio_change_bits(phy,7,16,4064U,adv);
  #line 191 
  return err;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_set_loopback(struct cphy *phy, int mmd, int dir, int enable)
{
  #line 196 
  return mdio_set_flag(& phy->mdio,phy->mdio.prtad,1,(unsigned short)0,16384,
                    (_Bool)(enable != 0));
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_set_speed_duplex(struct cphy *phy, int speed, int duplex)
{
  #line 204 
  return -1;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static int aq100x_get_link_status(struct cphy *phy, int *link_ok, int *speed, int *duplex, int *fc)
{
  #line 210 
  int err;
  #line 211 
  unsigned int v;
  #line 213 
  if (link_ok != (int *)0) {
    #line 214 
    err = t3_mdio_read(phy,1,59392,& v);
    #line 215 
    if (err != 0) 
                  #line 216 
                  return err;
    #line 218 
    *link_ok = (int)v & 1;
    #line 219 
    if (*link_ok == 0) 
                       #line 220 
                       return 0;
  }
  #line 223 
  err = t3_mdio_read(phy,7,51200,& v);
  #line 224 
  if (err != 0) 
                #line 225 
                return err;
  #line 227 
  if (speed != (int *)0) 
    #line 228 
    switch (v & 6U) {
      #line 229 
      case (unsigned int)6: 
                            #line 229 
      ;
      #line 230 
      *speed = 10000;
      #line 231 
      break;
      #line 232 
      case (unsigned int)4: 
                            #line 232 
      ;
      #line 233 
      *speed = 1000;
      #line 234 
      break;
      #line 235 
      case (unsigned int)2: 
                            #line 235 
      ;
      #line 236 
      *speed = 100;
      #line 237 
      break;
      #line 238 
      case (unsigned int)0: 
                            #line 238 
      ;
      #line 239 
      *speed = 10;
      #line 240 
      break;
    }
  #line 244 
  if (duplex != (int *)0) 
                          #line 245 
                          *duplex = (int)v & 1;
  #line 247 
  return 0;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
static struct cphy_ops aq100x_ops = {.reset = & aq100x_reset, .intr_enable = & aq100x_intr_enable, .intr_disable = & aq100x_intr_disable, .intr_clear = & aq100x_intr_clear, .intr_handler = & aq100x_intr_handler, .autoneg_enable = & aq100x_autoneg_enable, .autoneg_restart = & aq100x_autoneg_restart, .advertise = & aq100x_advertise, .set_loopback = & aq100x_set_loopback, .set_speed_duplex = & aq100x_set_speed_duplex, .get_link_status = & aq100x_get_link_status, .power_down = & aq100x_power_down, .mmds = 26U};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/aq100x.c"
int t3_aq100x_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 269 
  unsigned int v;
  #line 269 
  unsigned int v2;
  #line 269 
  unsigned int gpio;
  #line 269 
  unsigned int wait;
  #line 270 
  int err;
  #line 272 
  cphy_init(phy,adapter,phy_addr,& aq100x_ops,mdio_ops,4576U,(char *)"1000/10GBASE-T");
  #line 281 
  if (phy_addr != 0) 
                     #line 281 
                     gpio = 1024U; else 
                                        #line 281 
                                        gpio = 64U;
  #line 282 
  t3_set_reg_field(adapter,208U,gpio,0U);
  #line 283 
  msleep(1U);
  #line 284 
  t3_set_reg_field(adapter,208U,gpio,gpio);
  #line 289 
  msleep(1000U);
  #line 290 
  wait = 500U;
  #line 291 
  while (1) {
    #line 292 
    err = t3_mdio_read(phy,30,0,& v);
    #line 293 
    if (err != 0 || v == 65535U) {
      #line 297 
      _dev_warn(& (adapter->pdev)->dev,(char *)"PHY%d: reset failed (0x%x, 0x%x).\n",phy_addr,err,v);
      #line 299 
      goto done;
    }
    #line 302 
    v &= 49152U;
    #line 303 
    if (v != 0U) 
                 #line 304 
                 msleep(10U);
    #line 305 
    if (v != 0U) {
      #line 305 
      wait --;
      #line 305 
      if (! (wait != 0U)) 
                          #line 291 
                          break;
    }
    else 
         #line 291 
         break;
  }
  #line 306 
  if (v != 0U) {
    #line 307 
    _dev_warn(& (adapter->pdev)->dev,(char *)"PHY%d: reset timed out (0x%x).\n",phy_addr,v);
    #line 310 
    goto done;
  }
  #line 314 
  wait = wait * 4294967286U + 6000U;
  #line 315 
  if (wait > 3000U) 
                    #line 316 
                    _dev_warn(& (adapter->pdev)->dev,(char *)"PHY%d: reset took %ums\n",phy_addr,wait);
  #line 319 
  t3_mdio_read(phy,30,32,& v);
  #line 320 
  if (v != 101U) 
                 #line 321 
                 _dev_warn(& (adapter->pdev)->dev,(char *)"PHY%d: unsupported firmware %d\n",phy_addr,v);
  #line 328 
  err = t3_mdio_read(phy,30,0,& v);
  #line 329 
  if (err != 0) 
                #line 330 
                return err;
  #line 331 
  if ((v & 4096U) != 0U) {
    #line 332 
    err = t3_mdio_change_bits(phy,30,0,4096U,0U);
    #line 334 
    if (err != 0) 
                  #line 335 
                  return err;
    #line 336 
    msleep(10U);
  }
  else 
       #line 338 
       _dev_warn(& (adapter->pdev)->dev,(char *)"PHY%d does not start in low power mode.\n",phy_addr);
  #line 344 
  v2 = 0U;
  #line 344 
  v = v2;
  #line 345 
  t3_mdio_read(phy,4,50176,& v);
  #line 346 
  t3_mdio_read(phy,4,58368,& v2);
  #line 347 
  if (v != 27U || v2 != 27U) 
                             #line 348 
                             _dev_warn(& (adapter->pdev)->dev,(char *)"PHY%d: incorrect XAUI settings (0x%x, 0x%x).\n",phy_addr,v,v2);
  #line 352 
  done: 
        #line 352 
  ;
  #line 353 
  return err;
}

/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2477 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2479 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_2481 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2531 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_2533 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_0(v,i);
  #line 46 
  return;
}

#line 69 
#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static int atomic_add_return_0(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void atomic_dec_0(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 29 
void _raw_spin_lock_irq(raw_spinlock_t *);
#line 41 
#line 41 
void _raw_spin_unlock_irq(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_stats_lock_of_adapter(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_bh_atid_lock_of_tid_info(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_bh_stid_lock_of_tid_info(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_bh_tid_release_lock_of_t3c_data(spinlock_t *lock);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_irq_reg_lock_of_sge(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_stats_lock_of_adapter(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 911  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_bh_atid_lock_of_tid_info(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_bh_stid_lock_of_tid_info(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_bh_tid_release_lock_of_t3c_data(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_irq_reg_lock_of_sge(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_irqrestore_reg_lock_of_sge(spinlock_t *lock, unsigned long flags);
#line 26 
#line 834 
static void cif_mutex_lock_cxgb3_db_lock(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 848 
static void cif___ldv_spin_lock_reg_lock_of_sge(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23 
void ldv_vfree(void *addr);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 38 
void call_rcu(struct callback_head *, void (*)(struct callback_head *));
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_mutex_unlock_cxgb3_db_lock(struct mutex *lock);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 554 
#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_kvfree(void *addr);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cloned(struct sk_buff *skb)
{
  #line 1600 
  int tmp_1;
  #line 1600 
  if ((unsigned int)skb->cloned != 0U) {
    #line 1600 
    if ((atomic_read_0(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref) & 65535) != 1) 
      #line 1600 
      tmp_1 = 1; else 
                      #line 1600 
                      tmp_1 = 0;
  }
  else 
       #line 1600 
       tmp_1 = 0;
  #line 1600 
  return tmp_1;
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  #line 2158 
  skb->tail = (unsigned int)(skb->data - skb->head);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
  #line 2163 
  skb_reset_tail_pointer(skb);
  #line 2164 
  skb->tail += (unsigned int)offset;
  #line 2165 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_length(struct sk_buff *skb, unsigned int len)
{
  #line 2641 
  int __ret_warn_on;
  {
    #line 2641 
    __ret_warn_on = (int)skb_is_nonlinear(skb) != 0;
    #line 2641 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2642 
      ldv_inline_asm();
      #line 2643 
      ldv_inline_asm();
    }
    }
  #line 2641 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 2642 
                                                return;
  #line 2643 
  skb->len = len;
  #line 2644 
  skb_set_tail_pointer(skb,(int)len);
  #line 2645 
  return;
}

#line 2647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_trim(struct sk_buff *skb, unsigned int len)
{
  #line 2649 
  __skb_set_length(skb,len);
  #line 2650 
  return;
}

#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 4343 
#line 4343 
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *);
#line 4614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_bond_slave(struct net_device *dev)
{
  #line 4616 
  return (_Bool)(((dev->flags & 2048U) != 0U && (dev->priv_flags & 4U) != 0U) != 0);
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
#line 129 
struct net_device *__vlan_find_dev_deep_rcu(struct net_device *, __be16, u16);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netevent.h"
#line 34 
int register_netevent_notifier(struct notifier_block *);
#line 35 
#line 35 
int unregister_netevent_notifier(struct notifier_block *);
#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static unsigned int t3_mc5_size(struct mc5 *p)
{
  #line 453 
  return p->tcam_size;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
__inline static u32 t3_read_reg(struct adapter *adapter, u32 reg_addr)
{
  #line 272 
  u32 val = readl(adapter->regs + (unsigned long)reg_addr);
  #line 275 
  return val;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
__inline static void t3_write_reg(struct adapter *adapter, u32 reg_addr, u32 val)
{
  #line 281 
  writel(val,adapter->regs + (unsigned long)reg_addr);
  #line 282 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
__inline static int offload_running(struct adapter *adapter)
{
  #line 303 
  return (int)test_bit(15L,& adapter->open_device_map);
}

#line 306 
#line 306 
int t3_offload_tx(struct t3cdev *tdev, struct sk_buff *skb);
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 682 
int t3_get_tp_version(struct adapter *adapter, u32 *vers);
#line 688 
#line 688 
int t3_get_fw_version(struct adapter *adapter, u32 *vers);
#line 696 
#line 696 
void t3_fatal_err(struct adapter *adapter);
#line 702 
#line 702 
int t3_mc7_bd_read(struct mc7 *mc7, unsigned int start, unsigned int n, u64 *buf);
#line 725 
#line 725 
void t3_tp_get_mib_stats(struct adapter *adap, struct tp_mib_stats *tps);
#line 736 
#line 736 
int t3_sge_init_ecntxt(struct adapter *adapter, unsigned int id, int gts_enable, enum sge_context_type type, int respq, u64 base_addr, unsigned int size, unsigned int token, int gen, unsigned int cidx);
#line 747 
#line 747 
int t3_sge_init_cqcntxt(struct adapter *adapter, unsigned int id, u64 base_addr, unsigned int size, int rspq, int ovfl_mode, unsigned int credits, unsigned int credit_thres);
#line 753 
#line 753 
int t3_sge_disable_cqcntxt(struct adapter *adapter, unsigned int id);
#line 754 
#line 754 
int t3_sge_cqcntxt_op(struct adapter *adapter, unsigned int id, unsigned int op, unsigned int credits);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
__inline static void l2t_release(struct t3cdev *t, struct l2t_entry *e)
{
  #line 134 
  void *________p1;
  #line 131 
  struct l2t_data *d;
  #line 133 
  rcu_read_lock();
  {
    #line 135 
    union __anonunion___u_3506 __u;
    #line 134 
    __read_once_size((void *)(& t->l2opt),(void *)(& __u.__c),8);
    #line 134 
    ________p1 = (__u.__val);
    {
      #line 134 
      bool __warned;
      #line 134 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 134 
        if (! __warned) {
          #line 134 
          if (rcu_read_lock_held() == 0) {
            #line 134 
            __warned = (_Bool)1;
            #line 134 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h",134,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 134 
  d = (struct l2t_data *)________p1;
  #line 136 
  if ((int)atomic_dec_and_test(& e->refcnt) != 0) 
    #line 136 
    if (d != (struct l2t_data *)0) 
                                   #line 137 
                                   t3_l2e_free(d,e);
  #line 139 
  rcu_read_unlock();
  #line 140 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/l2t.h"
__inline static void l2t_hold_0(struct l2t_data *d, struct l2t_entry *e)
{
  #line 144 
  if (d != (struct l2t_data *)0) {
    #line 144 
    if (atomic_add_return_0(1,& e->refcnt) == 1) 
                                                 #line 145 
                                                 atomic_dec_0(& d->nfree);
  }
  #line 146 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_offload_init(void);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 1345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_adapter_ofld(struct adapter *adapter);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_adapter_unofld(struct adapter *adapter);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_offload_activate(struct adapter *adapter);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_offload_deactivate(struct adapter *adapter);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_set_dummy_ops(struct t3cdev *dev);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
struct t3cdev *dev2t3cdev(struct net_device *dev);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_register_client(struct cxgb3_client *client);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_unregister_client(struct cxgb3_client *client);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_add_clients(struct t3cdev *tdev);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_remove_clients(struct t3cdev *tdev);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_event_notify(struct t3cdev *tdev, u32 event, u32 port);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_alloc_atid(struct t3cdev *tdev, struct cxgb3_client *client, void *ctx);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_alloc_stid(struct t3cdev *tdev, struct cxgb3_client *client, void *ctx);
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void *cxgb3_free_atid(struct t3cdev *tdev, int atid);
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_free_stid(struct t3cdev *tdev, int stid);
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_insert_tid(struct t3cdev *tdev, struct cxgb3_client *client, void *ctx, unsigned int tid);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_queue_tid_release(struct t3cdev *tdev, unsigned int tid);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_remove_tid(struct t3cdev *tdev, void *ctx, unsigned int tid);
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.h"
__inline static void *cplhdr(struct sk_buff *skb)
{
  #line 137 
  return (void *)skb->data;
}

#line 140 
#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void t3_register_cpl_handler(unsigned int opcode, int (*h)(struct t3cdev *, struct sk_buff *));
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_defs.h"
__inline static union active_open_entry *atid2entry(struct tid_info *t, unsigned int atid)
{
  #line 50 
  return t->atid_tab + (unsigned long)(atid - t->atid_base);
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_defs.h"
__inline static union listen_entry *stid2entry(struct tid_info *t, unsigned int stid)
{
  #line 56 
  return t->stid_tab + (unsigned long)(stid - t->stid_base);
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_defs.h"
__inline static struct t3c_tid_entry *lookup_tid(struct tid_info *t, unsigned int tid)
{
  #line 65 
  struct t3c_tid_entry *tmp;
  #line 68 
  struct t3c_tid_entry *tmp_0;
  #line 65 
  if (t->ntids > tid) 
                      #line 65 
                      tmp = t->tid_tab + (unsigned long)tid; else 
                                                                  #line 65 
                                                                  tmp = (struct t3c_tid_entry *)0;
  #line 65 
  struct t3c_tid_entry *t3c_tid = tmp;
  #line 68 
  if (t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->client != (struct cxgb3_client *)0) 
    #line 68 
    tmp_0 = t3c_tid; else 
                          #line 68 
                          tmp_0 = (struct t3c_tid_entry *)0;
  #line 68 
  return tmp_0;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_defs.h"
__inline static struct t3c_tid_entry *lookup_stid(struct tid_info *t, unsigned int tid)
{
  #line 77 
  union listen_entry *e;
  #line 79 
  if (t->stid_base > tid || t->stid_base + t->nstids <= tid) 
                                                             #line 80 
                                                             return (struct t3c_tid_entry *)0;
  #line 82 
  e = stid2entry(t,tid);
  #line 83 
  if ((void *)e->next >= (void *)t->tid_tab && (void *)e->next < (void *)(t->atid_tab + (unsigned long)t->natids)) 
    #line 85 
    return (struct t3c_tid_entry *)0;
  #line 87 
  return & e->t3c_tid;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_defs.h"
__inline static struct t3c_tid_entry *lookup_atid(struct tid_info *t, unsigned int tid)
{
  #line 96 
  union active_open_entry *e;
  #line 98 
  if (t->atid_base > tid || t->atid_base + t->natids <= tid) 
                                                             #line 99 
                                                             return (struct t3c_tid_entry *)0;
  #line 101 
  e = atid2entry(t,tid);
  #line 102 
  if ((void *)e->next >= (void *)t->tid_tab && (void *)e->next < (void *)(t->atid_tab + (unsigned long)t->natids)) 
    #line 104 
    return (struct t3c_tid_entry *)0;
  #line 106 
  return & e->t3c_tid;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct list_head client_list = {.next = & client_list, .prev = & client_list};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct list_head ofld_dev_list = {.next = & ofld_dev_list, .prev = & ofld_dev_list};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct mutex cxgb3_db_lock = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"cxgb3_db_lock.wait_lock"}}}}, .wait_list = {.next = & cxgb3_db_lock.wait_list, .prev = & cxgb3_db_lock.wait_list}, .magic = (void *)(& cxgb3_db_lock), .dep_map = {.name = (char *)"cxgb3_db_lock"}};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static rwlock_t adapter_list_lock = {.magic = 3736018669U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"adapter_list_lock"}};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct list_head adapter_list = {.next = & adapter_list, .prev = & adapter_list};
#line 66 
#line 1073 
static void cxgb_neigh_update(struct neighbour *neigh);
#line 67 
#line 1110 
static void cxgb_redirect(struct dst_entry *old, struct dst_entry *new, struct neighbour *neigh, void *daddr);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static int offload_activated(struct t3cdev *tdev)
{
  #line 72 
  void *__mptr;
  #line 72 
  __mptr = (void *)tdev;
  #line 72 
  struct adapter *adapter = ((struct adapter *)__mptr);
  #line 74 
  return (int)test_bit(15L,& adapter->open_device_map);
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_register_client(struct cxgb3_client *client)
{
  #line 86 
  struct t3cdev *tdev;
  #line 88 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 89 
  list_add_tail(& client->client_list,& client_list);
  #line 91 
  if (client->add != (void (*)(struct t3cdev *))0) {
    #line 92 
    void *__mptr;
    #line 92 
    __mptr = (void *)ofld_dev_list.next;
    #line 92 
    tdev = ((struct t3cdev *)(__mptr + 18446744073709551592U));
    #line 92 
    while (& tdev->ofld_dev_list != & ofld_dev_list) {
      #line 92 
      void *__mptr_0;
      #line 93 
      if (offload_activated(tdev) != 0) 
                                        #line 94 
                                        (*(client->add))(tdev);
      #line 92 
      __mptr_0 = (void *)tdev->ofld_dev_list.next;
      #line 92 
      tdev = ((struct t3cdev *)(__mptr_0 + 18446744073709551592U));
    }
  }
  #line 97 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 98 
  return;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_unregister_client(struct cxgb3_client *client)
{
  #line 111 
  struct t3cdev *tdev;
  #line 113 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 114 
  list_del(& client->client_list);
  #line 116 
  if (client->remove != (void (*)(struct t3cdev *))0) {
    #line 117 
    void *__mptr;
    #line 117 
    __mptr = (void *)ofld_dev_list.next;
    #line 117 
    tdev = ((struct t3cdev *)(__mptr + 18446744073709551592U));
    #line 117 
    while (& tdev->ofld_dev_list != & ofld_dev_list) {
      #line 117 
      void *__mptr_0;
      #line 118 
      if (offload_activated(tdev) != 0) 
                                        #line 119 
                                        (*(client->remove))(tdev);
      #line 117 
      __mptr_0 = (void *)tdev->ofld_dev_list.next;
      #line 117 
      tdev = ((struct t3cdev *)(__mptr_0 + 18446744073709551592U));
    }
  }
  #line 122 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 123 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_add_clients(struct t3cdev *tdev)
{
  #line 138 
  void *__mptr;
  #line 135 
  struct cxgb3_client *client;
  #line 137 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 138 
  __mptr = (void *)client_list.next;
  #line 138 
  client = ((struct cxgb3_client *)(__mptr + 18446744073709551576U));
  #line 138 
  while (& client->client_list != & client_list) {
    #line 138 
    void *__mptr_0;
    #line 139 
    if (client->add != (void (*)(struct t3cdev *))0) 
                                                     #line 140 
                                                     (*(client->add))(tdev);
    #line 138 
    __mptr_0 = (void *)client->client_list.next;
    #line 138 
    client = ((struct cxgb3_client *)(__mptr_0 + 18446744073709551576U));
  }
  #line 142 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 143 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_remove_clients(struct t3cdev *tdev)
{
  #line 157 
  void *__mptr;
  #line 154 
  struct cxgb3_client *client;
  #line 156 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 157 
  __mptr = (void *)client_list.next;
  #line 157 
  client = ((struct cxgb3_client *)(__mptr + 18446744073709551576U));
  #line 157 
  while (& client->client_list != & client_list) {
    #line 157 
    void *__mptr_0;
    #line 158 
    if (client->remove != (void (*)(struct t3cdev *))0) 
                                                        #line 159 
                                                        (*(client->remove))(tdev);
    #line 157 
    __mptr_0 = (void *)client->client_list.next;
    #line 157 
    client = ((struct cxgb3_client *)(__mptr_0 + 18446744073709551576U));
  }
  #line 161 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 162 
  return;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_event_notify(struct t3cdev *tdev, u32 event, u32 port)
{
  #line 169 
  void *__mptr;
  #line 166 
  struct cxgb3_client *client;
  #line 168 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 169 
  __mptr = (void *)client_list.next;
  #line 169 
  client = ((struct cxgb3_client *)(__mptr + 18446744073709551576U));
  #line 169 
  while (& client->client_list != & client_list) {
    #line 169 
    void *__mptr_0;
    #line 170 
    if (client->event_handler != (void (*)(struct t3cdev *, u32 , u32 ))0) 
      #line 171 
      (*(client->event_handler))(tdev,event,port);
    #line 169 
    __mptr_0 = (void *)client->client_list.next;
    #line 169 
    client = ((struct cxgb3_client *)(__mptr_0 + 18446744073709551576U));
  }
  #line 173 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 174 
  return;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct net_device *get_iff_from_mac(struct adapter *adapter, unsigned char *mac, unsigned int vlan)
{
  #line 180 
  int i;
  #line 182 
  i = 0;
  #line 182 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 183 
      struct net_device *dev = adapter->port[i];
      #line 185 
      if ((int)ether_addr_equal(dev->dev_addr,mac) != 0) {
        #line 186 
        rcu_read_lock();
        #line 187 
        if (vlan != 0U && vlan != 4095U) 
                                         #line 188 
                                         dev = __vlan_find_dev_deep_rcu(dev,(unsigned short)129,(unsigned short)((int)((unsigned short)vlan)));
        else {
          #line 189 
          if ((int)netif_is_bond_slave(dev) != 0) {
            #line 190 
            struct net_device *upper_dev;
            #line 192 
            while (1) {
              #line 192 
              upper_dev = netdev_master_upper_dev_get_rcu(dev);
              #line 192 
              if (! (upper_dev != (struct net_device *)0)) 
                                                           #line 192 
                                                           break;
              #line 194 
              dev = upper_dev;
            }
          }
        }
        #line 196 
        rcu_read_unlock();
        #line 197 
        return dev;
      }
    }
    #line 182 
    i ++;
  }
  #line 200 
  return (struct net_device *)0;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int cxgb_ulp_iscsi_ctl(struct adapter *adapter, unsigned int req, void *data)
{
  #line 206 
  int i;
  #line 207 
  int ret = 0;
  #line 208 
  unsigned int val = 0U;
  #line 209 
  struct ulp_iscsi_info *uiip = (struct ulp_iscsi_info *)data;
  #line 211 
  switch (req) {
    #line 248 
    unsigned int __UNIQUE_ID___x558;
    #line 248 
    unsigned int tmp_8;
    #line 224 
    unsigned int __UNIQUE_ID___x552;
    #line 251 
    unsigned int __UNIQUE_ID___x560;
    #line 224 
    unsigned int tmp_0;
    #line 251 
    unsigned int tmp_10;
    #line 230 
    unsigned int __UNIQUE_ID___x554;
    #line 230 
    unsigned int tmp_3;
    #line 232 
    unsigned int __UNIQUE_ID___x556;
    #line 232 
    unsigned int tmp_5;
    #line 212 
    case (unsigned int)11: 
                           #line 212 
    ;
    #line 213 
    uiip->pdev = adapter->pdev;
    #line 214 
    uiip->llimit = t3_read_reg(adapter,1292U);
    #line 215 
    uiip->ulimit = t3_read_reg(adapter,1296U);
    #line 216 
    uiip->tagmask = t3_read_reg(adapter,1300U);
    #line 218 
    val = t3_read_reg(adapter,1304U);
    #line 219 
    i = 0;
    #line 219 
    while (i <= 3) {
      #line 220 
      uiip->pgsz_factor[i] = (unsigned char)val;
      #line 219 
      i ++;
      #line 219 
      val >>= 8;
    }
    #line 222 
    val = t3_read_reg(adapter,892U);
    {
      #line 224 
      __UNIQUE_ID___x552 = val & 65535U;
      #line 224 
      unsigned int __UNIQUE_ID___y553 = val >> 16;
      #line 224 
      if (__UNIQUE_ID___x552 < __UNIQUE_ID___y553) 
                                                   #line 224 
                                                   tmp_0 = __UNIQUE_ID___x552; else 
                                                                    #line 224 
                                                                    tmp_0 = __UNIQUE_ID___y553;
      }
    #line 223 
    uiip->max_rxsz = tmp_0;
    #line 223 
    uiip->max_txsz = tmp_0;
    {
      #line 230 
      __UNIQUE_ID___x554 = adapter->params.tp.tx_pg_size;
      #line 230 
      u32 __UNIQUE_ID___y555 = t3_read_reg(adapter,1504U) >> 17;
      #line 230 
      if (__UNIQUE_ID___x554 < __UNIQUE_ID___y555) 
                                                   #line 230 
                                                   tmp_3 = __UNIQUE_ID___x554; else 
                                                                    #line 230 
                                                                    tmp_3 = __UNIQUE_ID___y555;
      }
    #line 230 
    val = tmp_3;
    {
      #line 232 
      __UNIQUE_ID___x556 = val;
      #line 232 
      unsigned int __UNIQUE_ID___y557 = uiip->max_txsz;
      #line 232 
      if (__UNIQUE_ID___x556 < __UNIQUE_ID___y557) 
                                                   #line 232 
                                                   tmp_5 = __UNIQUE_ID___x556; else 
                                                                    #line 232 
                                                                    tmp_5 = __UNIQUE_ID___y557;
      }
    #line 232 
    uiip->max_txsz = tmp_5;
    #line 235 
    val = t3_read_reg(adapter,872U);
    #line 236 
    if (val >> 16 != 16224U) {
      #line 237 
      val &= 65535U;
      #line 238 
      val |= 1063256064U;
      #line 239 
      printk((char *)"\001",adapter->name,val);
      #line 241 
      t3_write_reg(adapter,872U,val);
    }
    {
      #line 248 
      __UNIQUE_ID___x558 = adapter->params.tp.rx_pg_size;
      #line 248 
      u32 __UNIQUE_ID___y559 = (t3_read_reg(adapter,872U) >> 16) & 65535U;
      #line 248 
      if (__UNIQUE_ID___x558 < __UNIQUE_ID___y559) 
                                                   #line 248 
                                                   tmp_8 = __UNIQUE_ID___x558; else 
                                                                    #line 248 
                                                                    tmp_8 = __UNIQUE_ID___y559;
      }
    #line 248 
    val = tmp_8;
    {
      #line 251 
      __UNIQUE_ID___x560 = val;
      #line 251 
      unsigned int __UNIQUE_ID___y561 = uiip->max_rxsz;
      #line 251 
      if (__UNIQUE_ID___x560 < __UNIQUE_ID___y561) 
                                                   #line 251 
                                                   tmp_10 = __UNIQUE_ID___x560; else 
                                                                    #line 251 
                                                                    tmp_10 = __UNIQUE_ID___y561;
      }
    #line 251 
    uiip->max_rxsz = tmp_10;
    #line 252 
    break;
    #line 253 
    case (unsigned int)12: 
                           #line 253 
    ;
    #line 254 
    t3_write_reg(adapter,1300U,uiip->tagmask);
    #line 256 
    i = 0;
    #line 256 
    while (i <= 3) {
      #line 257 
      val = (unsigned int)(((int)uiip->pgsz_factor[i] & 15) << i * 8) | val;
      #line 256 
      i ++;
    }
    #line 258 
    if (val != 0U) {
      #line 258 
      ;
      #line 258 
      if (t3_read_reg(adapter,1304U) != val) {
        #line 259 
        printk((char *)"\001",adapter->name,val,(int)uiip->pgsz_factor[0],(int)uiip->pgsz_factor[1],(int)uiip->pgsz_factor[2],(int)uiip->pgsz_factor[3]);
        #line 263 
        t3_write_reg(adapter,1304U,val);
      }
    }
    #line 265 
    break;
    #line 266 
    default: 
             #line 266 
    ;
    #line 267 
    ret = -95;
  }
  #line 269 
  return ret;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int cxgb_rdma_ctl(struct adapter *adapter, unsigned int req, void *data)
{
  #line 277 
  int ret = 0;
  #line 279 
  switch (req) {
    #line 280 
    case (unsigned int)13: 
                           #line 280 
    ;
    {
      #line 281 
      struct rdma_info *rdma = (struct rdma_info *)data;
      #line 282 
      struct pci_dev *pdev = adapter->pdev;
      #line 284 
      rdma->udbell_physbase = (unsigned long)pdev->resource[2].start;
      #line 285 
      if (pdev->resource[2].start != 0ULL || pdev->resource[2].end != pdev->resource[2].start) 
        #line 285 
        rdma->udbell_len = ((unsigned int)pdev->resource[2].end - (unsigned int)pdev->resource[2].start) + 1U; else 
                                                                    #line 285 
                                                                    rdma->udbell_len = 0U;
      #line 286 
      rdma->tpt_base = t3_read_reg(adapter,1420U);
      #line 288 
      rdma->tpt_top = t3_read_reg(adapter,1424U);
      #line 289 
      rdma->pbl_base = t3_read_reg(adapter,1428U);
      #line 291 
      rdma->pbl_top = t3_read_reg(adapter,1432U);
      #line 292 
      rdma->rqt_base = t3_read_reg(adapter,1332U);
      #line 293 
      rdma->rqt_top = t3_read_reg(adapter,1336U);
      #line 294 
      rdma->kdb_addr = adapter->regs + 4U;
      #line 295 
      rdma->pdev = pdev;
      #line 296 
      break;
    }
    #line 298 
    case (unsigned int)14: 
                           #line 298 
    ;
    {
      #line 299 
      unsigned long flags;
      #line 300 
      struct rdma_cq_op *rdma_0 = (struct rdma_cq_op *)data;
      #line 303 
      cif___ldv_spin_lock_reg_lock_of_sge(& adapter->sge.reg_lock);
      #line 304 
      ret = t3_sge_cqcntxt_op(adapter,rdma_0->id,rdma_0->op,rdma_0->credits);
      #line 306 
      cif_spin_unlock_irqrestore_reg_lock_of_sge(& adapter->sge.reg_lock,flags);
      #line 307 
      break;
    }
    #line 309 
    case (unsigned int)18: 
                           #line 309 
    ;
    {
      #line 311 
      struct mc7 *mem;
      #line 310 
      struct ch_mem_range *t = (struct ch_mem_range *)data;
      #line 313 
      if ((t->addr & 7U) != 0U || (t->len & 7U) != 0U) 
                                                       #line 314 
                                                       return -22;
      #line 315 
      if (t->mem_id == 0U) 
                           #line 316 
                           mem = & adapter->cm;
      else 
        #line 317 
        if (t->mem_id == 1U) 
                             #line 318 
                             mem = & adapter->pmrx;
        else 
          #line 319 
          if (t->mem_id == 2U) 
                               #line 320 
                               mem = & adapter->pmtx; else 
                                                           #line 322 
                                                           return -22;
      #line 324 
      ret = t3_mc7_bd_read(mem,t->addr / 8U,t->len / 8U,(u64 *)(& t->buf));
      #line 327 
      if (ret != 0) 
                    #line 328 
                    return ret;
      #line 329 
      break;
    }
    #line 331 
    case (unsigned int)15: 
                           #line 331 
    ;
    {
      #line 332 
      struct rdma_cq_setup *rdma_1 = (struct rdma_cq_setup *)data;
      #line 334 
      cif_spin_lock_irq_reg_lock_of_sge(& adapter->sge.reg_lock);
      #line 335 
      ret = t3_sge_init_cqcntxt(adapter,rdma_1->id,rdma_1->base_addr,rdma_1->size,0,(int)rdma_1->ovfl_mode,rdma_1->credits,rdma_1->credit_thres);
      #line 341 
      cif_spin_unlock_irq_reg_lock_of_sge(& adapter->sge.reg_lock);
      #line 342 
      break;
    }
    #line 344 
    case (unsigned int)16: 
                           #line 344 
    ;
    #line 345 
    cif_spin_lock_irq_reg_lock_of_sge(& adapter->sge.reg_lock);
    #line 346 
    ret = t3_sge_disable_cqcntxt(adapter,*((unsigned int *)data));
    #line 347 
    cif_spin_unlock_irq_reg_lock_of_sge(& adapter->sge.reg_lock);
    #line 348 
    break;
    #line 349 
    case (unsigned int)17: 
                           #line 349 
    ;
    {
      #line 350 
      struct rdma_ctrlqp_setup *rdma_2 = (struct rdma_ctrlqp_setup *)data;
      #line 352 
      cif_spin_lock_irq_reg_lock_of_sge(& adapter->sge.reg_lock);
      #line 353 
      ret = t3_sge_init_ecntxt(adapter,65527U,0,(enum sge_context_type)SGE_CNTXT_RDMA,0,rdma_2->base_addr,rdma_2->size,65552U,1,0U);
      #line 358 
      cif_spin_unlock_irq_reg_lock_of_sge(& adapter->sge.reg_lock);
      #line 359 
      break;
    }
    #line 361 
    case (unsigned int)19: 
                           #line 361 
    ;
    #line 362 
    cif_spin_lock_stats_lock_of_adapter(& adapter->stats_lock);
    #line 363 
    t3_tp_get_mib_stats(adapter,(struct tp_mib_stats *)data);
    #line 364 
    cif_spin_unlock_stats_lock_of_adapter(& adapter->stats_lock);
    #line 365 
    break;
    #line 367 
    default: 
             #line 367 
    ;
    #line 368 
    ret = -95;
  }
  #line 370 
  return ret;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int cxgb_offload_ctl(struct t3cdev *tdev, unsigned int req, void *data)
{
  #line 375 
  void *__mptr;
  #line 376 
  struct tid_range *tid;
  #line 377 
  struct mtutab *mtup;
  #line 378 
  struct iff_mac *iffmacp;
  #line 379 
  struct ddp_params *ddpp;
  #line 380 
  struct adap_ports *ports;
  #line 381 
  struct ofld_page_info *rx_page_info;
  #line 383 
  int i;
  #line 375 
  __mptr = (void *)tdev;
  #line 375 
  struct adapter *adapter = ((struct adapter *)__mptr);
  #line 382 
  struct tp_params *tp = & adapter->params.tp;
  #line 385 
  switch (req) {
    #line 386 
    case (unsigned int)0: 
                          #line 386 
    ;
    #line 387 
    *((unsigned int *)data) = 16U;
    #line 388 
    break;
    #line 389 
    case (unsigned int)7: 
                          #line 389 
    ;
    #line 390 
    *((unsigned int *)data) = 15U;
    #line 391 
    break;
    #line 392 
    case (unsigned int)1: 
                          #line 392 
    ;
    #line 393 
    *((unsigned int *)data) = 1048576U;
    #line 394 
    break;
    #line 395 
    case (unsigned int)2: 
                          #line 395 
    ;
    #line 396 
    tid = (struct tid_range *)data;
    #line 397 
    tid->num = ((t3_mc5_size(& adapter->mc5) - adapter->params.mc5.nroutes) - adapter->params.mc5.nfilters) - adapter->params.mc5.nservers;
    #line 400 
    tid->base = 0U;
    #line 401 
    break;
    #line 402 
    case (unsigned int)3: 
                          #line 402 
    ;
    #line 403 
    tid = (struct tid_range *)data;
    #line 404 
    tid->num = adapter->params.mc5.nservers;
    #line 405 
    tid->base = ((t3_mc5_size(& adapter->mc5) - tid->num) - adapter->params.mc5.nfilters) - adapter->params.mc5.nroutes;
    #line 407 
    break;
    #line 408 
    case (unsigned int)5: 
                          #line 408 
    ;
    #line 409 
    *((unsigned int *)data) = 2048U;
    #line 410 
    break;
    #line 411 
    case (unsigned int)6: 
                          #line 411 
    ;
    #line 412 
    mtup = (struct mtutab *)data;
    #line 413 
    mtup->size = 16U;
    #line 414 
    mtup->mtus = (unsigned short *)(& adapter->params.mtus);
    #line 415 
    break;
    #line 416 
    case (unsigned int)8: 
                          #line 416 
    ;
    #line 417 
    iffmacp = (struct iff_mac *)data;
    #line 418 
    iffmacp->dev = get_iff_from_mac(adapter,iffmacp->mac_addr,(unsigned int)iffmacp->vlan_tag & 4095U);
    #line 421 
    break;
    #line 422 
    case (unsigned int)9: 
                          #line 422 
    ;
    #line 423 
    ddpp = (struct ddp_params *)data;
    #line 424 
    ddpp->llimit = t3_read_reg(adapter,1308U);
    #line 425 
    ddpp->ulimit = t3_read_reg(adapter,1312U);
    #line 426 
    ddpp->tag_mask = t3_read_reg(adapter,1316U);
    #line 427 
    break;
    #line 428 
    case (unsigned int)10: 
                           #line 428 
    ;
    #line 429 
    ports = (struct adap_ports *)data;
    #line 430 
    ports->nports = adapter->params.nports;
    #line 431 
    i = 0;
    #line 431 
    while (adapter->params.nports > (unsigned int)i) {
      #line 432 
      ports->lldevs[i] = adapter->port[i];
      #line 431 
      i ++;
    }
    #line 433 
    break;
    #line 434 
    case (unsigned int)11: 
                           #line 434 
    ;
    #line 435 
    case (unsigned int)12: 
                           #line 435 
    ;
    #line 436 
    if (offload_running(adapter) == 0) 
                                       #line 437 
                                       return -11;
    #line 438 
    return cxgb_ulp_iscsi_ctl(adapter,req,data);
    #line 439 
    case (unsigned int)13: 
                           #line 439 
    ;
    #line 440 
    case (unsigned int)14: 
                           #line 440 
    ;
    #line 441 
    case (unsigned int)15: 
                           #line 441 
    ;
    #line 442 
    case (unsigned int)16: 
                           #line 442 
    ;
    #line 443 
    case (unsigned int)17: 
                           #line 443 
    ;
    #line 444 
    case (unsigned int)18: 
                           #line 444 
    ;
    #line 445 
    case (unsigned int)19: 
                           #line 445 
    ;
    #line 446 
    if (offload_running(adapter) == 0) 
                                       #line 447 
                                       return -11;
    #line 448 
    return cxgb_rdma_ctl(adapter,req,data);
    #line 449 
    case (unsigned int)50: 
                           #line 449 
    ;
    #line 450 
    rx_page_info = (struct ofld_page_info *)data;
    #line 451 
    rx_page_info->page_size = tp->rx_pg_size;
    #line 452 
    rx_page_info->num = tp->rx_num_pgs;
    #line 453 
    break;
    #line 454 
    case (unsigned int)51: 
                           #line 454 
    ;
    {
      #line 455 
      struct iscsi_ipv4addr *p = (struct iscsi_ipv4addr *)data;
      #line 456 
      struct port_info *pi = netdev_priv(p->dev);
      #line 457 
      p->ipv4addr = pi->iscsi_ipv4addr;
      #line 458 
      break;
    }
    #line 460 
    case (unsigned int)70: 
                           #line 460 
    ;
    {
      #line 461 
      struct ch_embedded_info *e = (struct ch_embedded_info *)data;
      #line 463 
      cif_spin_lock_stats_lock_of_adapter(& adapter->stats_lock);
      #line 464 
      t3_get_fw_version(adapter,& e->fw_vers);
      #line 465 
      t3_get_tp_version(adapter,& e->tp_vers);
      #line 466 
      cif_spin_unlock_stats_lock_of_adapter(& adapter->stats_lock);
      #line 467 
      break;
    }
    #line 469 
    default: 
             #line 469 
    ;
    #line 470 
    return -95;
  }
  #line 472 
  return 0;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int rx_offload_blackhole(struct t3cdev *dev, struct sk_buff **skbs, int n)
{
  #line 483 
  while (1) {
    #line 483 
    int tmp;
    #line 483 
    tmp = n;
    #line 483 
    n --;
    #line 483 
    ;
    #line 483 
    if (! (tmp != 0)) 
                      #line 483 
                      break;
    #line 484 
    dev_kfree_skb_any(*(skbs + (unsigned long)n));
  }
  #line 485 
  return 0;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void dummy_neigh_update(struct t3cdev *dev, struct neighbour *neigh)
{
  #line 490 
  return;
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_set_dummy_ops(struct t3cdev *dev)
{
  #line 494 
  dev->recv = & rx_offload_blackhole;
  #line 495 
  dev->neigh_update = & dummy_neigh_update;
  #line 496 
  return;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void *cxgb3_free_atid(struct t3cdev *tdev, int atid)
{
  #line 503 
  struct tid_info *t = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 504 
  union active_open_entry *p = atid2entry(t,(unsigned int)atid);
  #line 505 
  void *ctx = p->t3c_tid.ctx;
  #line 507 
  cif_spin_lock_bh_atid_lock_of_tid_info(& t->atid_lock);
  #line 508 
  p->next = t->afree;
  #line 509 
  t->afree = p;
  #line 510 
  (t->atids_in_use) --;
  #line 511 
  cif_spin_unlock_bh_atid_lock_of_tid_info(& t->atid_lock);
  #line 513 
  return ctx;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_free_stid(struct t3cdev *tdev, int stid)
{
  #line 523 
  struct tid_info *t = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 524 
  union listen_entry *p = stid2entry(t,(unsigned int)stid);
  #line 526 
  cif_spin_lock_bh_stid_lock_of_tid_info(& t->stid_lock);
  #line 527 
  p->next = t->sfree;
  #line 528 
  t->sfree = p;
  #line 529 
  (t->stids_in_use) --;
  #line 530 
  cif_spin_unlock_bh_stid_lock_of_tid_info(& t->stid_lock);
  #line 531 
  return;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_insert_tid(struct t3cdev *tdev, struct cxgb3_client *client, void *ctx, unsigned int tid)
{
  #line 538 
  struct tid_info *t = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 540 
  (t->tid_tab + (unsigned long)tid)->client = client;
  #line 541 
  (t->tid_tab + (unsigned long)tid)->ctx = ctx;
  #line 542 
  atomic_inc_0(& t->tids_in_use);
  #line 543 
  return;
}

#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static void mk_tid_release(struct sk_buff *skb, unsigned int tid)
{
  #line 552 
  struct cpl_tid_release *req;
  #line 554 
  skb->priority = 1U;
  #line 555 
  req = (struct cpl_tid_release *)__skb_put(skb,16U);
  #line 556 
  req->wr.wr_hi = 1U;
  #line 557 
  req->ot.opcode_tid = __builtin_bswap32(tid | 436207616U);
  #line 558 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void t3_process_tid_release_list(struct work_struct *work)
{
  #line 562 
  void *__mptr;
  #line 564 
  struct sk_buff *skb;
  #line 562 
  __mptr = (void *)work;
  #line 562 
  struct t3c_data *td = ((struct t3c_data *)(__mptr + 18446744073709551152U));
  #line 565 
  struct t3cdev *tdev = td->dev;
  #line 568 
  cif_spin_lock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
  #line 569 
  while (td->tid_release_list != (struct t3c_tid_entry *)0) {
    #line 570 
    struct t3c_tid_entry *p = td->tid_release_list;
    #line 572 
    td->tid_release_list = (struct t3c_tid_entry *)p->ctx;
    #line 573 
    cif_spin_unlock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
    #line 575 
    skb = alloc_skb(16U,3264U);
    #line 577 
    if (skb == (struct sk_buff *)0) 
                                    #line 578 
                                    skb = td->nofail_skb;
    #line 579 
    if (skb == (struct sk_buff *)0) {
      #line 580 
      cif_spin_lock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
      #line 581 
      p->ctx = (void *)td->tid_release_list;
      #line 582 
      td->tid_release_list = p;
      #line 583 
      break;
    }
    #line 585 
    mk_tid_release(skb,(unsigned int)((p - td->tid_maps.tid_tab) / 16L));
    #line 586 
    cxgb3_ofld_send(tdev,skb);
    #line 587 
    p->ctx = (void *)0;
    #line 588 
    if (td->nofail_skb == skb) 
                               #line 589 
                               td->nofail_skb = alloc_skb(16U,3264U);
    #line 592 
    cif_spin_lock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
  }
  #line 594 
  td->release_list_incomplete = (unsigned int)(td->tid_release_list != (struct t3c_tid_entry *)0);
  #line 595 
  cif_spin_unlock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
  #line 597 
  if (td->nofail_skb == (struct sk_buff *)0) 
                                             #line 598 
                                             td->nofail_skb = alloc_skb(16U,3264U);
  #line 600 
  return;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_queue_tid_release(struct t3cdev *tdev, unsigned int tid)
{
  #line 606 
  struct t3c_data *td = *((struct t3c_data **)(& tdev->l4opt));
  #line 607 
  struct t3c_tid_entry *p = td->tid_maps.tid_tab + (unsigned long)tid;
  #line 609 
  cif_spin_lock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
  #line 610 
  p->ctx = (void *)td->tid_release_list;
  #line 611 
  p->client = (struct cxgb3_client *)0;
  #line 612 
  td->tid_release_list = p;
  #line 613 
  if (p->ctx == (void *)0 || td->release_list_incomplete != 0U) 
                                                                #line 614 
                                                                cif_schedule_work(& td->tid_release_task);
  #line 615 
  cif_spin_unlock_bh_tid_release_lock_of_t3c_data(& td->tid_release_lock);
  #line 616 
  return;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_remove_tid(struct t3cdev *tdev, void *ctx, unsigned int tid)
{
  #line 629 
  struct tid_info *t = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 631 
  if ((long)(t->ntids <= tid) != 0L) {
    #line 632 
    ldv_inline_asm();
    #line 633 
    ldv_inline_asm();
    #line 634 
    ldv_inline_asm();
    #line 631 
    ;
  }
  #line 632 
  if (tdev->type == (unsigned int)T3A) {
    #line 633 
    void **__ai_ptr = & (t->tid_tab + (unsigned long)tid)->ctx;
    #line 633 
    kasan_check_read((void *)__ai_ptr,8U);
    {
      #line 633 
      void *__ret;
      #line 633 
      void *__old = ctx;
      #line 633 
      void *__new = (void *)0;
      #line 633 
      switch (8UL) {
        #line 633 
        case (unsigned long)1: 
                               #line 633 
        ;
        {
          #line 633 
          u8 *__ptr = (u8 *)__ai_ptr;
          #line 634 
          ldv_inline_asm();
          #line 633 
          break;
        }
        #line 633 
        case (unsigned long)2: 
                               #line 633 
        ;
        {
          #line 633 
          u16 *__ptr_0 = (u16 *)__ai_ptr;
          #line 634 
          ldv_inline_asm();
          #line 633 
          break;
        }
        #line 633 
        case (unsigned long)4: 
                               #line 633 
        ;
        {
          #line 633 
          u32 *__ptr_1 = (u32 *)__ai_ptr;
          #line 634 
          ldv_inline_asm();
          #line 633 
          break;
        }
        #line 633 
        case (unsigned long)8: 
                               #line 633 
        ;
        {
          #line 633 
          u64 *__ptr_2 = (u64 *)__ai_ptr;
          #line 634 
          ldv_inline_asm();
          #line 633 
          break;
        }
        #line 633 
        default: 
                 #line 633 
        ;
        #line 633 
        __cmpxchg_wrong_size();
      }
      #line 633 
      void *tmp = __ret;
    }
  }
  else {
    #line 635 
    struct sk_buff *skb;
    #line 637 
    skb = alloc_skb(16U,2592U);
    #line 638 
    if ((long)(skb != (struct sk_buff *)0) != 0L) {
      #line 639 
      mk_tid_release(skb,tid);
      #line 640 
      cxgb3_ofld_send(tdev,skb);
      #line 641 
      (t->tid_tab + (unsigned long)tid)->ctx = (void *)0;
    }
    else 
         #line 643 
         cxgb3_queue_tid_release(tdev,tid);
  }
  #line 645 
  atomic_dec_0(& t->tids_in_use);
  #line 646 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_alloc_atid(struct t3cdev *tdev, struct cxgb3_client *client, void *ctx)
{
  #line 653 
  int atid = -1;
  #line 654 
  struct tid_info *t = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 656 
  cif_spin_lock_bh_atid_lock_of_tid_info(& t->atid_lock);
  #line 657 
  if (t->afree != (union active_open_entry *)0) {
    #line 657 
    ;
    #line 657 
    if ((t->atids_in_use + (unsigned int)atomic_read_0(& t->tids_in_use)) + 16U <= t->ntids) {
      #line 660 
      union active_open_entry *p = t->afree;
      #line 662 
      atid = (int)((p - t->atid_tab) / 16L + (long)t->atid_base);
      #line 663 
      t->afree = p->next;
      #line 664 
      p->t3c_tid.ctx = ctx;
      #line 665 
      p->t3c_tid.client = client;
      #line 666 
      (t->atids_in_use) ++;
    }
  }
  #line 668 
  cif_spin_unlock_bh_atid_lock_of_tid_info(& t->atid_lock);
  #line 669 
  return atid;
}

#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_alloc_stid(struct t3cdev *tdev, struct cxgb3_client *client, void *ctx)
{
  #line 677 
  int stid = -1;
  #line 678 
  struct tid_info *t = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 680 
  cif_spin_lock_bh_stid_lock_of_tid_info(& t->stid_lock);
  #line 681 
  if (t->sfree != (union listen_entry *)0) {
    #line 682 
    union listen_entry *p = t->sfree;
    #line 684 
    stid = (int)((p - t->stid_tab) / 16L + (long)t->stid_base);
    #line 685 
    t->sfree = p->next;
    #line 686 
    p->t3c_tid.ctx = ctx;
    #line 687 
    p->t3c_tid.client = client;
    #line 688 
    (t->stids_in_use) ++;
  }
  #line 690 
  cif_spin_unlock_bh_stid_lock_of_tid_info(& t->stid_lock);
  #line 691 
  return stid;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
struct t3cdev *dev2t3cdev(struct net_device *dev)
{
  #line 699 
  struct port_info *pi = netdev_priv(dev);
  #line 701 
  return (struct t3cdev *)pi->adapter;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_smt_write_rpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 708 
  struct cpl_smt_write_rpl *rpl = cplhdr(skb);
  #line 710 
  if ((unsigned int)rpl->status != 0U) {
    #line 711 
    ;
    #line 711 
    printk((char *)"\001",(int)rpl->status,__builtin_bswap32(rpl->ot.opcode_tid) & 16777215U);
  }
  #line 714 
  return 1;
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_l2t_write_rpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 719 
  struct cpl_l2t_write_rpl *rpl = cplhdr(skb);
  #line 721 
  if ((unsigned int)rpl->status != 0U) {
    #line 722 
    ;
    #line 722 
    printk((char *)"\001",(int)rpl->status,__builtin_bswap32(rpl->ot.opcode_tid) & 16777215U);
  }
  #line 725 
  return 1;
}

#line 728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_rte_write_rpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 730 
  struct cpl_rte_write_rpl *rpl = cplhdr(skb);
  #line 732 
  if ((unsigned int)rpl->status != 0U) {
    #line 733 
    ;
    #line 733 
    printk((char *)"\001",(int)rpl->status,__builtin_bswap32(rpl->ot.opcode_tid) & 16777215U);
  }
  #line 736 
  return 1;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_act_open_rpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 743 
  struct t3c_tid_entry *t3c_tid;
  #line 741 
  struct cpl_act_open_rpl *rpl = cplhdr(skb);
  #line 742 
  unsigned int atid = __builtin_bswap32(rpl->atid) & 16777215U;
  #line 745 
  t3c_tid = lookup_atid(& (*((struct t3c_data **)(& dev->l4opt)))->tid_maps,atid);
  #line 746 
  if ((((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && t3c_tid->client != (struct cxgb3_client *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + 64U) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 749 
    return (*(*((t3c_tid->client)->handlers + 64U)))(dev,skb,t3c_tid->ctx);
  }
  else {
    #line 753 
    printk((char *)"\001",(char *)(& dev->name),64);
    #line 755 
    return 3;
  }
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_stid_rpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 763 
  struct t3c_tid_entry *t3c_tid;
  #line 761 
  union opcode_tid *p = cplhdr(skb);
  #line 762 
  unsigned int stid = __builtin_bswap32(p->opcode_tid) & 16777215U;
  #line 765 
  t3c_tid = lookup_stid(& (*((struct t3c_data **)(& dev->l4opt)))->tid_maps,stid);
  #line 766 
  if (((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + (unsigned long)p->opcode) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 768 
    return (*(*((t3c_tid->client)->handlers + (unsigned long)p->opcode)))
(dev,skb,t3c_tid->ctx);
  }
  else {
    #line 771 
    printk((char *)"\001",(char *)(& dev->name),(int)p->opcode);
    #line 773 
    return 3;
  }
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_hwtid_rpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 781 
  struct t3c_tid_entry *t3c_tid;
  #line 779 
  union opcode_tid *p = cplhdr(skb);
  #line 780 
  unsigned int hwtid = __builtin_bswap32(p->opcode_tid) & 16777215U;
  #line 783 
  t3c_tid = lookup_tid(& (*((struct t3c_data **)(& dev->l4opt)))->tid_maps,hwtid);
  #line 784 
  if (((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + (unsigned long)p->opcode) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 786 
    return (*(*((t3c_tid->client)->handlers + (unsigned long)p->opcode)))
(dev,skb,t3c_tid->ctx);
  }
  else {
    #line 789 
    printk((char *)"\001",(char *)(& dev->name),(int)p->opcode);
    #line 791 
    return 3;
  }
}

#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_cr(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 800 
  struct t3c_tid_entry *t3c_tid;
  #line 797 
  struct cpl_pass_accept_req *req = cplhdr(skb);
  #line 798 
  unsigned int stid = __builtin_bswap32(req->tos_tid) & 16777215U;
  #line 799 
  struct tid_info *t = & (*((struct t3c_data **)(& dev->l4opt)))->tid_maps;
  #line 801 
  unsigned int tid = __builtin_bswap32(req->ot.opcode_tid) & 16777215U;
  #line 803 
  if ((long)(t->ntids <= tid) != 0L) {
    #line 806 
    void *__mptr;
    #line 804 
    printk((char *)"%s: passive open TID %u too large\n",(char *)(& dev->name),tid);
    #line 806 
    __mptr = (void *)dev;
    #line 806 
    t3_fatal_err(((struct adapter *)__mptr));
    #line 807 
    return 1;
  }
  #line 810 
  t3c_tid = lookup_stid(t,stid);
  #line 811 
  if (((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + 112U) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 813 
    return (*(*((t3c_tid->client)->handlers + 112U)))(dev,skb,t3c_tid->ctx);
  }
  else {
    #line 816 
    printk((char *)"\001",(char *)(& dev->name),112);
    #line 818 
    return 3;
  }
}

#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct sk_buff *cxgb3_get_cpl_reply_skb(struct sk_buff *skb, size_t len, gfp_t gfp)
{
  #line 832 
  if ((long)(skb_cloned(skb) == 0) != 0L) {
    #line 833 
    if ((long)((unsigned long)skb->len < len) != 0L) {
      #line 834 
      ldv_inline_asm();
      #line 835 
      ldv_inline_asm();
      #line 836 
      ldv_inline_asm();
      #line 833 
      ;
    }
    #line 834 
    __skb_trim(skb,(unsigned int)len);
    #line 835 
    skb_get(skb);
  }
  else {
    #line 837 
    skb = alloc_skb((unsigned int)len,gfp);
    #line 838 
    if (skb != (struct sk_buff *)0) 
                                    #line 839 
                                    __skb_put(skb,(unsigned int)len);
  }
  #line 841 
  return skb;
}

#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_abort_req_rss(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 848 
  struct t3c_tid_entry *t3c_tid;
  #line 846 
  union opcode_tid *p = cplhdr(skb);
  #line 847 
  unsigned int hwtid = __builtin_bswap32(p->opcode_tid) & 16777215U;
  #line 850 
  t3c_tid = lookup_tid(& (*((struct t3c_data **)(& dev->l4opt)))->tid_maps,hwtid);
  #line 851 
  if (((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + (unsigned long)p->opcode) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 853 
    return (*(*((t3c_tid->client)->handlers + (unsigned long)p->opcode)))
(dev,skb,t3c_tid->ctx);
  }
  else {
    #line 857 
    struct cpl_abort_rpl *rpl;
    #line 858 
    struct sk_buff *reply_skb;
    #line 856 
    struct cpl_abort_req_rss *req = cplhdr(skb);
    #line 859 
    unsigned int tid = __builtin_bswap32(req->ot.opcode_tid) & 16777215U;
    #line 860 
    u8 cmd = req->status;
    #line 862 
    if ((unsigned int)req->status + 221U <= 1U) 
                                                #line 864 
                                                goto out;
    #line 866 
    reply_skb = cxgb3_get_cpl_reply_skb(skb,24UL,2592U);
    #line 871 
    if (reply_skb == (struct sk_buff *)0) {
      #line 872 
      printk((char *)"do_abort_req_rss: couldn\'t get skb!\n");
      #line 873 
      goto out;
    }
    #line 875 
    reply_skb->priority = 0U;
    #line 876 
    __skb_put(reply_skb,24U);
    #line 877 
    rpl = (struct cpl_abort_rpl *)cplhdr(reply_skb);
    #line 878 
    rpl->wr.wr_hi = 15U;
    #line 880 
    rpl->wr.wr_lo = __builtin_bswap32(tid << 8);
    #line 881 
    rpl->ot.opcode_tid = __builtin_bswap32(tid | 184549376U);
    #line 882 
    rpl->cmd = cmd;
    #line 883 
    cxgb3_ofld_send(dev,reply_skb);
    #line 884 
    out: 
         #line 884 
    ;
    #line 885 
    return 1;
  }
}

#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_act_establish(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 894 
  struct t3c_tid_entry *t3c_tid;
  #line 891 
  struct cpl_act_establish *req = cplhdr(skb);
  #line 892 
  unsigned int atid = __builtin_bswap32(req->tos_tid) & 16777215U;
  #line 893 
  struct tid_info *t = & (*((struct t3c_data **)(& dev->l4opt)))->tid_maps;
  #line 895 
  unsigned int tid = __builtin_bswap32(req->ot.opcode_tid) & 16777215U;
  #line 897 
  if ((long)(t->ntids <= tid) != 0L) {
    #line 900 
    void *__mptr;
    #line 898 
    printk((char *)"%s: active establish TID %u too large\n",(char *)(& dev->name),tid);
    #line 900 
    __mptr = (void *)dev;
    #line 900 
    t3_fatal_err(((struct adapter *)__mptr));
    #line 901 
    return 1;
  }
  #line 904 
  t3c_tid = lookup_atid(t,atid);
  #line 905 
  if (((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + 80U) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 907 
    return (*(*((t3c_tid->client)->handlers + 80U)))(dev,skb,t3c_tid->ctx);
  }
  else {
    #line 910 
    printk((char *)"\001",(char *)(& dev->name),80);
    #line 912 
    return 3;
  }
}

#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_trace(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 918 
  struct cpl_trace_pkt *p = cplhdr(skb);
  #line 920 
  skb->protocol = (unsigned short)65535U;
  #line 921 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = dev->lldev;
  #line 922 
  skb_pull(skb,8U);
  #line 923 
  skb_reset_mac_header(skb);
  #line 924 
  netif_receive_skb(skb);
  #line 925 
  return 0;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static u32 get_hwtid(struct sk_buff *skb)
{
  #line 936 
  return (__builtin_bswap32(skb->priority) >> 8) & 1048575U;
}

#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static u32 get_opcode(struct sk_buff *skb)
{
  #line 941 
  return __builtin_bswap32(skb->__anonCompField_sk_buff_93.csum) >> 24;
}

#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_term(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 948 
  struct t3c_tid_entry *t3c_tid;
  #line 946 
  unsigned int hwtid = get_hwtid(skb);
  #line 947 
  unsigned int opcode = get_opcode(skb);
  #line 950 
  t3c_tid = lookup_tid(& (*((struct t3c_data **)(& dev->l4opt)))->tid_maps,hwtid);
  #line 951 
  if (((t3c_tid != (struct t3c_tid_entry *)0 && t3c_tid->ctx != (void *)0) && (t3c_tid->client)->handlers != (cxgb3_cpl_handler_func *)0) && *((t3c_tid->client)->handlers + (unsigned long)opcode) != (int (*)(struct t3cdev *, struct sk_buff *, void *))0) {
    #line 953 
    return (*(*((t3c_tid->client)->handlers + (unsigned long)opcode)))(dev,skb,
                                                                    t3c_tid->ctx);
  }
  else {
    #line 956 
    printk((char *)"\001",(char *)(& dev->name),opcode);
    #line 958 
    return 3;
  }
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int nb_callback(struct notifier_block *self, unsigned long event, void *ctx)
{
  #line 965 
  switch (event) {
    #line 966 
    case (unsigned long)1: 
                           #line 966 
    ;
    #line 967 
    cxgb_neigh_update((struct neighbour *)ctx);
    #line 968 
    break;
    #line 970 
    case (unsigned long)2: 
                           #line 970 
    ;
    {
      #line 971 
      struct netevent_redirect *nr = (struct netevent_redirect *)ctx;
      #line 972 
      cxgb_redirect(nr->old,nr->new,nr->neigh,nr->daddr);
      #line 974 
      cxgb_neigh_update(nr->neigh);
      #line 975 
      break;
    }
    #line 977 
    default: 
             #line 977 
    ;
    #line 978 
    break;
  }
  #line 980 
  return 0;
}

#line 983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static struct notifier_block nb = {.notifier_call = & nb_callback};
#line 990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int do_bad_cpl(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 992 
  printk((char *)"\001",(char *)(& dev->name),(int)*(skb->data));
  #line 993 
  return 3;
}

#line 999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static cpl_handler_func cpl_handlers[166U];
#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void t3_register_cpl_handler(unsigned int opcode, int (*h)(struct t3cdev *, struct sk_buff *))
{
  #line 1007 
  if (opcode <= 165U) 
    #line 1008 
    if (h != (int (*)(struct t3cdev *, struct sk_buff *))0) 
                                                            #line 1008 
                                                            cpl_handlers[opcode] = h; else 
                                                                    #line 1008 
                                                                    cpl_handlers[opcode] = & do_bad_cpl;
  else 
       #line 1010 
       printk((char *)"\001",opcode);
  #line 1011 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int process_rx(struct t3cdev *dev, struct sk_buff **skbs, int n)
{
  #line 1021 
  while (1) {
    #line 1021 
    int tmp_4;
    #line 1021 
    tmp_4 = n;
    #line 1021 
    n --;
    #line 1021 
    ;
    #line 1021 
    if (! (tmp_4 != 0)) 
                        #line 1021 
                        break;
    {
      #line 1022 
      struct sk_buff **tmp;
      #line 1022 
      tmp = skbs;
      #line 1022 
      skbs ++;
      #line 1022 
      struct sk_buff *skb = *tmp;
      #line 1023 
      unsigned int opcode = get_opcode(skb);
      #line 1024 
      int ret = (*(cpl_handlers[opcode]))(dev,skb);
      #line 1027 
      if ((ret & 4) != 0) {
        #line 1028 
        union opcode_tid *p = cplhdr(skb);
        #line 1030 
        ;
        #line 1030 
        ;
        #line 1030 
        printk((char *)"\001",(char *)(& dev->name),opcode,__builtin_bswap32(p->opcode_tid) & 16777215U);
      }
      #line 1034 
      if ((ret & 1) != 0) 
                          #line 1035 
                          kfree_skb(skb);
    }
  }
  #line 1037 
  return 0;
}

#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_ofld_send(struct t3cdev *dev, struct sk_buff *skb)
{
  #line 1045 
  int r;
  #line 1047 
  local_bh_disable();
  #line 1048 
  r = (*(dev->send))(dev,skb);
  #line 1049 
  local_bh_enable();
  #line 1050 
  return r;
}

#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int is_offloading(struct net_device *dev)
{
  #line 1061 
  void *__mptr;
  #line 1057 
  struct adapter *adapter;
  #line 1058 
  int i;
  #line 1060 
  _raw_read_lock_bh(& adapter_list_lock);
  #line 1061 
  __mptr = (void *)adapter_list.next;
  #line 1061 
  adapter = ((struct adapter *)(__mptr + 18446744073709551480U));
  #line 1061 
  while (& adapter->adapter_list != & adapter_list) {
    #line 1061 
    void *__mptr_0;
    #line 1062 
    i = 0;
    #line 1062 
    while (adapter->params.nports > (unsigned int)i) {
      #line 1063 
      if (adapter->port[i] == dev) {
        #line 1064 
        _raw_read_unlock_bh(& adapter_list_lock);
        #line 1065 
        return 1;
      }
      #line 1062 
      i ++;
    }
    #line 1061 
    __mptr_0 = (void *)adapter->adapter_list.next;
    #line 1061 
    adapter = ((struct adapter *)(__mptr_0 + 18446744073709551480U));
  }
  #line 1069 
  _raw_read_unlock_bh(& adapter_list_lock);
  #line 1070 
  return 0;
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void cxgb_neigh_update(struct neighbour *neigh)
{
  #line 1075 
  struct net_device *dev;
  #line 1077 
  if (neigh == (struct neighbour *)0) 
                                      #line 1078 
                                      return;
  #line 1079 
  dev = neigh->dev;
  #line 1080 
  if (dev != (struct net_device *)0) {
    #line 1080 
    if (is_offloading(dev) != 0) {
      #line 1081 
      struct t3cdev *tdev = dev2t3cdev(dev);
      #line 1083 
      if ((long)(tdev == (struct t3cdev *)0) != 0L) {
        #line 1084 
        ldv_inline_asm();
        #line 1085 
        ldv_inline_asm();
        #line 1086 
        ldv_inline_asm();
        #line 1083 
        ;
      }
      #line 1084 
      t3_l2t_update(tdev,neigh);
    }
  }
  #line 1086 
  return;
}

#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void set_l2t_ix(struct t3cdev *tdev, u32 tid, struct l2t_entry *e)
{
  #line 1090 
  struct sk_buff *skb;
  #line 1091 
  struct cpl_set_tcb_field *req;
  #line 1093 
  skb = alloc_skb(32U,2592U);
  #line 1094 
  if (skb == (struct sk_buff *)0) {
    #line 1095 
    printk((char *)"\001",(char *)"set_l2t_ix");
    #line 1096 
    return;
  }
  #line 1098 
  skb->priority = 1U;
  #line 1099 
  req = (struct cpl_set_tcb_field *)skb_put(skb,32U);
  #line 1100 
  req->wr.wr_hi = 1U;
  #line 1101 
  req->ot.opcode_tid = __builtin_bswap32(tid | 83886080U);
  #line 1102 
  req->reply = (unsigned char)0U;
  #line 1103 
  req->cpu_idx = (unsigned char)0U;
  #line 1104 
  req->word = (unsigned short)0U;
  #line 1105 
  req->mask = 9295151454450876416ULL;
  #line 1106 
  req->val = (__be64)__builtin_bswap64((unsigned long)((int)e->idx << 7));
  #line 1107 
  (*(tdev->send))(tdev,skb);
  #line 1108 
  return;
}

#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void cxgb_redirect(struct dst_entry *old, struct dst_entry *new, struct neighbour *neigh, void *daddr)
{
  #line 1114 
  struct net_device *dev;
  #line 1115 
  struct tid_info *ti;
  #line 1116 
  struct t3cdev *tdev;
  #line 1117 
  u32 tid;
  #line 1118 
  int update_tcb;
  #line 1119 
  struct l2t_entry *e;
  #line 1120 
  struct t3c_tid_entry *te;
  #line 1122 
  dev = neigh->dev;
  #line 1124 
  if (is_offloading(dev) == 0) 
                               #line 1125 
                               return;
  #line 1126 
  tdev = dev2t3cdev(dev);
  #line 1127 
  if ((long)(tdev == (struct t3cdev *)0) != 0L) {
    #line 1128 
    ldv_inline_asm();
    #line 1129 
    ldv_inline_asm();
    #line 1130 
    ldv_inline_asm();
    #line 1127 
    ;
  }
  #line 1130 
  e = t3_l2t_get(tdev,new,dev,daddr);
  #line 1131 
  if (e == (struct l2t_entry *)0) {
    #line 1132 
    printk((char *)"\001",(char *)"cxgb_redirect");
    #line 1133 
    return;
  }
  #line 1137 
  ti = & (*((struct t3c_data **)(& tdev->l4opt)))->tid_maps;
  #line 1138 
  tid = 0U;
  #line 1138 
  while (ti->ntids > tid) {
    #line 1139 
    te = lookup_tid(ti,tid);
    #line 1140 
    if ((long)(te == (struct t3c_tid_entry *)0) != 0L) {
      #line 1141 
      ldv_inline_asm();
      #line 1142 
      ldv_inline_asm();
      #line 1143 
      ldv_inline_asm();
      #line 1140 
      ;
    }
    #line 1141 
    if (((te != (struct t3c_tid_entry *)0 && te->ctx != (void *)0) && te->client != (struct cxgb3_client *)0) && (te->client)->redirect != (int (*)(void *, struct dst_entry *, struct dst_entry *, struct l2t_entry *))0) {
      #line 1142 
      update_tcb = (*((te->client)->redirect))(te->ctx,old,new,e);
      #line 1143 
      if (update_tcb != 0) {
        #line 1145 
        void *________p1;
        #line 1144 
        rcu_read_lock();
        #line 1145 
        ;
        {
          #line 1146 
          union __anonunion___u_3509 __u;
          #line 1145 
          __read_once_size((void *)(& tdev->l2opt),(void *)(& __u.__c),8);
          #line 1145 
          ________p1 = (__u.__val);
          {
            #line 1145 
            bool __warned;
            #line 1145 
            if (debug_lockdep_rcu_enabled() != 0) 
              #line 1145 
              if (! __warned) {
                #line 1145 
                if (rcu_read_lock_held() == 0) {
                  #line 1145 
                  __warned = (_Bool)1;
                  #line 1145 
                  lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c",1145,(char *)"suspicious rcu_dereference_check() usage");
                }
              }
          }
          }
        #line 1145 
        l2t_hold_0((struct l2t_data *)________p1,e);
        #line 1146 
        rcu_read_unlock();
        #line 1147 
        set_l2t_ix(tdev,tid,e);
      }
    }
    #line 1138 
    tid ++;
  }
  #line 1151 
  l2t_release(tdev,e);
  #line 1152 
  return;
}

#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static int init_tid_tabs(struct tid_info *t, unsigned int ntids, unsigned int natids, unsigned int nstids, unsigned int atid_base, unsigned int stid_base)
{
  #line 1161 
  unsigned long size = (((unsigned long)ntids + (unsigned long)natids) + (unsigned long)nstids) * 16UL;
  #line 1164 
  t->tid_tab = (struct t3c_tid_entry *)kvzalloc(size,3264U);
  #line 1165 
  if (t->tid_tab == (struct t3c_tid_entry *)0) 
                                               #line 1166 
                                               return -12;
  #line 1168 
  t->stid_tab = (union listen_entry *)(t->tid_tab + (unsigned long)ntids);
  #line 1169 
  t->atid_tab = (union active_open_entry *)(t->stid_tab + (unsigned long)nstids);
  #line 1170 
  t->ntids = ntids;
  #line 1171 
  t->nstids = nstids;
  #line 1172 
  t->stid_base = stid_base;
  #line 1173 
  t->sfree = (union listen_entry *)0;
  #line 1174 
  t->natids = natids;
  #line 1175 
  t->atid_base = atid_base;
  #line 1176 
  t->afree = (union active_open_entry *)0;
  #line 1177 
  t->atids_in_use = 0U;
  #line 1177 
  t->stids_in_use = 0U;
  #line 1178 
  atomic_set_0(& t->tids_in_use,0);
  #line 1179 
  spinlock_check(& t->stid_lock);
  {
    #line 1179 
    struct lock_class_key __key;
    #line 1179 
    __raw_spin_lock_init(& t->stid_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&t->stid_lock)->rlock",& __key);
  }
  #line 1180 
  spinlock_check(& t->atid_lock);
  {
    #line 1180 
    struct lock_class_key __key_0;
    #line 1180 
    __raw_spin_lock_init(& t->atid_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&t->atid_lock)->rlock",& __key_0);
  }
  #line 1185 
  if (nstids != 0U) {
    #line 1186 
    while (1) {
      #line 1186 
      nstids --;
      #line 1186 
      if (! (nstids != 0U)) 
                            #line 1186 
                            break;
      #line 1187 
      (t->stid_tab + (unsigned long)(nstids + 4294967295U))->next = t->stid_tab + (unsigned long)nstids;
    }
    #line 1188 
    t->sfree = t->stid_tab;
  }
  #line 1190 
  if (natids != 0U) {
    #line 1191 
    while (1) {
      #line 1191 
      natids --;
      #line 1191 
      if (! (natids != 0U)) 
                            #line 1191 
                            break;
      #line 1192 
      (t->atid_tab + (unsigned long)(natids + 4294967295U))->next = t->atid_tab + (unsigned long)natids;
    }
    #line 1193 
    t->afree = t->atid_tab;
  }
  #line 1195 
  return 0;
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void free_tid_maps(struct tid_info *t)
{
  #line 1200 
  cif_kvfree((void *)t->tid_tab);
  #line 1201 
  return;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static void add_adapter(struct adapter *adap)
{
  #line 1205 
  _raw_write_lock_bh(& adapter_list_lock);
  #line 1206 
  list_add_tail(& adap->adapter_list,& adapter_list);
  #line 1207 
  _raw_write_unlock_bh(& adapter_list_lock);
  #line 1208 
  return;
}

#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static void remove_adapter(struct adapter *adap)
{
  #line 1212 
  _raw_write_lock_bh(& adapter_list_lock);
  #line 1213 
  list_del(& adap->adapter_list);
  #line 1214 
  _raw_write_unlock_bh(& adapter_list_lock);
  #line 1215 
  return;
}

#line 1217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
int cxgb3_offload_activate(struct adapter *adapter)
{
  #line 1245 
  unsigned int tmp_6;
  #line 1220 
  int natids;
  #line 1220 
  int err;
  #line 1221 
  struct t3c_data *t;
  #line 1222 
  struct tid_range stid_range;
  #line 1222 
  struct tid_range tid_range;
  #line 1223 
  struct mtutab mtutab;
  #line 1224 
  unsigned int l2t_capacity;
  #line 1225 
  struct l2t_data *l2td;
  #line 1219 
  struct t3cdev *dev = & adapter->tdev;
  #line 1227 
  t = (struct t3c_data *)kzalloc(576UL,3264U);
  #line 1228 
  if (t == (struct t3c_data *)0) 
                                 #line 1229 
                                 return -12;
  #line 1231 
  err = -95;
  #line 1232 
  if ((*(dev->ctl))(dev,1U,(void *)(& t->tx_max_chunk)) < 0) 
                                                             #line 1232 
                                                             goto _LOR;
  else {
    #line 1232 
    if ((*(dev->ctl))(dev,0U,(void *)(& t->max_wrs)) < 0) 
                                                          #line 1232 
                                                          goto _LOR;
    else {
      #line 1233 
      if ((*(dev->ctl))(dev,5U,(void *)(& l2t_capacity)) < 0) 
                                                              #line 1232 
                                                              goto _LOR;
      else {
        #line 1234 
        if ((*(dev->ctl))(dev,6U,(void *)(& mtutab)) < 0) 
                                                          #line 1232 
                                                          goto _LOR;
        else {
          #line 1235 
          if ((*(dev->ctl))(dev,2U,(void *)(& tid_range)) < 0) 
                                                               #line 1232 
                                                               goto _LOR;
          else {
            #line 1236 
            if ((*(dev->ctl))(dev,3U,(void *)(& stid_range)) < 0) 
                                                                  #line 1232 
                                                                  _LOR: 
                                                                    #line 1238 
                                                                    goto out_free;
          }
        }
      }
    }
  }
  #line 1240 
  err = -12;
  #line 1241 
  l2td = t3_init_l2t(l2t_capacity);
  #line 1242 
  if (l2td == (struct l2t_data *)0) 
                                    #line 1243 
                                    goto out_free;
  {
    #line 1245 
    unsigned int __UNIQUE_ID___x567 = tid_range.num / 2U;
    #line 1245 
    unsigned int __UNIQUE_ID___y568 = 65536U;
    #line 1245 
    if (65536U < __UNIQUE_ID___x567) 
                                     #line 1245 
                                     tmp_6 = 65536U; else 
                                                          #line 1245 
                                                          tmp_6 = __UNIQUE_ID___x567;
    }
  #line 1245 
  natids = (int)tmp_6;
  #line 1246 
  err = init_tid_tabs(& t->tid_maps,tid_range.num,(unsigned int)natids,stid_range.num,65536U,stid_range.base);
  #line 1248 
  if (err != 0) 
                #line 1249 
                goto out_free_l2t;
  #line 1251 
  t->mtus = mtutab.mtus;
  #line 1252 
  t->nmtus = mtutab.size;
  {
    #line 1254 
    struct lock_class_key __key;
    #line 1254 
    __init_work(& t->tid_release_task,0);
    #line 1254 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1254 
    t->tid_release_task.data = __constr_expr_44;
    #line 1254 
    lockdep_init_map(& t->tid_release_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1254 
    INIT_LIST_HEAD(& t->tid_release_task.entry);
    #line 1254 
    t->tid_release_task.func = & t3_process_tid_release_list;
  }
  #line 1255 
  spinlock_check(& t->tid_release_lock);
  {
    #line 1255 
    struct lock_class_key __key_0;
    #line 1255 
    __raw_spin_lock_init(& t->tid_release_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&t->tid_release_lock)->rlock",& __key_0);
  }
  #line 1256 
  INIT_LIST_HEAD(& t->list_node);
  #line 1257 
  t->dev = dev;
  {
    #line 1260 
    union __anonunion___u_3511 __u = {.__val = (void *)l2td};
    #line 1259 
    __write_once_size((void *)(& dev->l2opt),(void *)(& __u.__c),8);
    #line 1259 
    void *tmp_8 = __u.__val;
  }
  #line 1260 
  *((struct t3c_data **)(& dev->l4opt)) = t;
  #line 1261 
  dev->recv = & process_rx;
  #line 1262 
  dev->neigh_update = & t3_l2t_update;
  #line 1265 
  if (list_empty(& adapter_list) != 0) 
                                       #line 1266 
                                       register_netevent_notifier(& nb);
  #line 1268 
  t->nofail_skb = alloc_skb(16U,3264U);
  #line 1269 
  t->release_list_incomplete = 0U;
  #line 1271 
  add_adapter(adapter);
  #line 1272 
  return 0;
  #line 1274 
  out_free_l2t: 
                #line 1274 
  ;
  #line 1275 
  cif_kvfree((void *)l2td);
  #line 1276 
  out_free: 
            #line 1276 
  ;
  #line 1277 
  kfree((void *)t);
  #line 1278 
  return err;
}

#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
static void clean_l2_data(struct callback_head *head)
{
  #line 1283 
  void *__mptr;
  #line 1283 
  __mptr = (void *)head;
  #line 1283 
  struct l2t_data *d = ((struct l2t_data *)(__mptr + 18446744073709551520U));
  #line 1284 
  cif_kvfree((void *)d);
  #line 1285 
  return;
}

#line 1288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_offload_deactivate(struct adapter *adapter)
{
  #line 1301 
  void *________p1;
  #line 1292 
  struct l2t_data *d;
  #line 1290 
  struct t3cdev *tdev = & adapter->tdev;
  #line 1291 
  struct t3c_data *t = *((struct t3c_data **)(& tdev->l4opt));
  #line 1294 
  remove_adapter(adapter);
  #line 1295 
  if (list_empty(& adapter_list) != 0) 
                                       #line 1296 
                                       unregister_netevent_notifier(& nb);
  #line 1298 
  free_tid_maps(& t->tid_maps);
  #line 1299 
  *((struct t3c_data **)(& tdev->l4opt)) = (struct t3c_data *)0;
  #line 1300 
  rcu_read_lock();
  {
    #line 1302 
    union __anonunion___u_3513 __u;
    #line 1301 
    __read_once_size((void *)(& tdev->l2opt),(void *)(& __u.__c),8);
    #line 1301 
    ________p1 = (__u.__val);
    {
      #line 1301 
      bool __warned;
      #line 1301 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 1301 
        if (! __warned) {
          #line 1301 
          if (rcu_read_lock_held() == 0) {
            #line 1301 
            __warned = (_Bool)1;
            #line 1301 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c",1301,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 1301 
  d = (struct l2t_data *)________p1;
  #line 1302 
  rcu_read_unlock();
  {
    #line 1304 
    union __anonunion___u_3515 __u_0 = {.__val = (void *)0};
    #line 1303 
    __write_once_size((void *)(& tdev->l2opt),(void *)(& __u_0.__c),8);
    #line 1303 
    void *tmp_4 = __u_0.__val;
  }
  #line 1304 
  call_rcu(& d->callback_head,& clean_l2_data);
  #line 1305 
  kfree_skb(t->nofail_skb);
  #line 1306 
  kfree((void *)t);
  #line 1307 
  return;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static void register_tdev(struct t3cdev *tdev)
{
  #line 1311 
  int unit;
  #line 1314 
  int tmp;
  #line 1313 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 1314 
  tmp = unit;
  #line 1314 
  unit ++;
  #line 1314 
  ;
  #line 1314 
  ;
  #line 1314 
  snprintf((char *)(& tdev->name),16UL,(char *)"ofld_dev%d",tmp);
  #line 1315 
  list_add_tail(& tdev->ofld_dev_list,& ofld_dev_list);
  #line 1316 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 1317 
  return;
}

#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static void unregister_tdev(struct t3cdev *tdev)
{
  #line 1321 
  cif_mutex_lock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 1322 
  list_del(& tdev->ofld_dev_list);
  #line 1323 
  cif_mutex_unlock_cxgb3_db_lock(& cxgb3_db_lock);
  #line 1324 
  return;
}

#line 1326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
__inline static int adap2type(struct adapter *adapter)
{
  #line 1328 
  int type = 0;
  #line 1330 
  switch (adapter->params.rev) {
    #line 1331 
    case (unsigned int)0: 
                          #line 1331 
    ;
    #line 1332 
    type = 0;
    #line 1333 
    break;
    #line 1334 
    case (unsigned int)2: 
                          #line 1334 
    ;
    #line 1335 
    case (unsigned int)3: 
                          #line 1335 
    ;
    #line 1336 
    type = 1;
    #line 1337 
    break;
    #line 1338 
    case (unsigned int)4: 
                          #line 1338 
    ;
    #line 1339 
    type = 2;
    #line 1340 
    break;
  }
  #line 1342 
  return type;
}

#line 1345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_adapter_ofld(struct adapter *adapter)
{
  #line 1347 
  struct t3cdev *tdev = & adapter->tdev;
  #line 1349 
  INIT_LIST_HEAD(& tdev->ofld_dev_list);
  #line 1351 
  cxgb3_set_dummy_ops(tdev);
  #line 1352 
  tdev->send = & t3_offload_tx;
  #line 1353 
  tdev->ctl = & cxgb_offload_ctl;
  #line 1354 
  tdev->type = (enum t3ctype)adap2type(adapter);
  #line 1356 
  register_tdev(tdev);
  #line 1357 
  return;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_adapter_unofld(struct adapter *adapter)
{
  #line 1361 
  struct t3cdev *tdev = & adapter->tdev;
  #line 1363 
  tdev->recv = (int (*)(struct t3cdev *, struct sk_buff **, int ))0;
  #line 1364 
  tdev->neigh_update = (void (*)(struct t3cdev *, struct neighbour *))0;
  #line 1366 
  unregister_tdev(tdev);
  #line 1367 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_offload.c"
void cxgb3_offload_init(void)
{
  #line 1371 
  int i;
  #line 1373 
  i = 0;
  #line 1373 
  while (i <= 165) {
    #line 1374 
    cpl_handlers[i] = & do_bad_cpl;
    #line 1373 
    i ++;
  }
  #line 1376 
  t3_register_cpl_handler(46U,& do_smt_write_rpl);
  #line 1377 
  t3_register_cpl_handler(35U,& do_l2t_write_rpl);
  #line 1378 
  t3_register_cpl_handler(40U,& do_rte_write_rpl);
  #line 1379 
  t3_register_cpl_handler(65U,& do_stid_rpl);
  #line 1380 
  t3_register_cpl_handler(32U,& do_stid_rpl);
  #line 1381 
  t3_register_cpl_handler(112U,& do_cr);
  #line 1382 
  t3_register_cpl_handler(81U,& do_hwtid_rpl);
  #line 1383 
  t3_register_cpl_handler(49U,& do_hwtid_rpl);
  #line 1384 
  t3_register_cpl_handler(11U,& do_hwtid_rpl);
  #line 1385 
  t3_register_cpl_handler(44U,& do_hwtid_rpl);
  #line 1386 
  t3_register_cpl_handler(57U,& do_hwtid_rpl);
  #line 1387 
  t3_register_cpl_handler(47U,& do_hwtid_rpl);
  #line 1388 
  t3_register_cpl_handler(160U,& do_hwtid_rpl);
  #line 1389 
  t3_register_cpl_handler(64U,& do_act_open_rpl);
  #line 1390 
  t3_register_cpl_handler(38U,& do_hwtid_rpl);
  #line 1391 
  t3_register_cpl_handler(50U,& do_hwtid_rpl);
  #line 1392 
  t3_register_cpl_handler(48U,& do_abort_req_rss);
  #line 1393 
  t3_register_cpl_handler(80U,& do_act_establish);
  #line 1394 
  t3_register_cpl_handler(45U,& do_hwtid_rpl);
  #line 1395 
  t3_register_cpl_handler(34U,& do_hwtid_rpl);
  #line 1396 
  t3_register_cpl_handler(162U,& do_term);
  #line 1397 
  t3_register_cpl_handler(165U,& do_hwtid_rpl);
  #line 1398 
  t3_register_cpl_handler(163U,& do_trace);
  #line 1399 
  t3_register_cpl_handler(66U,& do_hwtid_rpl);
  #line 1400 
  t3_register_cpl_handler(41U,& do_hwtid_rpl);
  #line 1401 
  t3_register_cpl_handler(51U,& do_hwtid_rpl);
  #line 1402 
  return;
}

#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
#line 105 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 142 
  ldv_init_list_head(list);
  #line 143 
  return;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static int atomic_add_return_0(int i, atomic_t *v)
{
  #line 177 
  return ldv_atomic_add_return(i,v);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 191 
  ldv_atomic_inc(v);
  #line 192 
  return;
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void atomic_dec_0(atomic_t *v)
{
  #line 198 
  ldv_atomic_dec(v);
  #line 199 
  return;
}

#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 381 
  return ldv_kzalloc(size,flags);
}

#line 705  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 709 
  return emg_schedule_work(work);
}

#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_kvfree(void *addr)
{
  #line 823 
  ldv_vfree(addr);
  #line 824 
  return;
}

#line 834  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_mutex_lock_cxgb3_db_lock(struct mutex *lock)
{
  #line 837 
  ldv_mutex_model_lock(lock,(char *)"cxgb3_db_lock");
  #line 838 
  return;
}

#line 841  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_mutex_unlock_cxgb3_db_lock(struct mutex *lock)
{
  #line 844 
  ldv_mutex_model_unlock(lock,(char *)"cxgb3_db_lock");
  #line 845 
  return;
}

#line 848  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif___ldv_spin_lock_reg_lock_of_sge(spinlock_t *lock)
{
  #line 851 
  ldv_spin_model_lock((char *)"reg_lock_of_sge");
  #line 853 
  __ldv_spin_lock(lock);
  #line 854 
  return;
}

#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_irqrestore_reg_lock_of_sge(spinlock_t *lock, unsigned long flags)
{
  #line 860 
  ldv_spin_model_unlock((char *)"reg_lock_of_sge");
  #line 862 
  spin_unlock_irqrestore(lock,flags);
  #line 863 
  return;
}

#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_irq_reg_lock_of_sge(spinlock_t *lock)
{
  #line 869 
  ldv_spin_model_lock((char *)"reg_lock_of_sge");
  #line 871 
  spin_lock_irq(lock);
  #line 872 
  return;
}

#line 875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_irq_reg_lock_of_sge(spinlock_t *lock)
{
  #line 878 
  ldv_spin_model_unlock((char *)"reg_lock_of_sge");
  #line 880 
  spin_unlock_irq(lock);
  #line 881 
  return;
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_stats_lock_of_adapter(spinlock_t *lock)
{
  #line 887 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  #line 889 
  spin_lock_0(lock);
  #line 890 
  return;
}

#line 893  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_stats_lock_of_adapter(spinlock_t *lock)
{
  #line 896 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  #line 898 
  spin_unlock_0(lock);
  #line 899 
  return;
}

#line 902  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_bh_atid_lock_of_tid_info(spinlock_t *lock)
{
  #line 905 
  ldv_spin_model_lock((char *)"atid_lock_of_tid_info");
  #line 907 
  spin_lock_bh_0(lock);
  #line 908 
  return;
}

#line 911  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_bh_atid_lock_of_tid_info(spinlock_t *lock)
{
  #line 914 
  ldv_spin_model_unlock((char *)"atid_lock_of_tid_info");
  #line 916 
  spin_unlock_bh_0(lock);
  #line 917 
  return;
}

#line 920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_bh_stid_lock_of_tid_info(spinlock_t *lock)
{
  #line 923 
  ldv_spin_model_lock((char *)"stid_lock_of_tid_info");
  #line 925 
  spin_lock_bh_0(lock);
  #line 926 
  return;
}

#line 929  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_bh_stid_lock_of_tid_info(spinlock_t *lock)
{
  #line 932 
  ldv_spin_model_unlock((char *)"stid_lock_of_tid_info");
  #line 934 
  spin_unlock_bh_0(lock);
  #line 935 
  return;
}

#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_lock_bh_tid_release_lock_of_t3c_data(spinlock_t *lock)
{
  #line 941 
  ldv_spin_model_lock((char *)"tid_release_lock_of_t3c_data");
  #line 943 
  spin_lock_bh_0(lock);
  #line 944 
  return;
}

#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_offload.i.aux"
static void cif_spin_unlock_bh_tid_release_lock_of_t3c_data(spinlock_t *lock)
{
  #line 950 
  ldv_spin_model_unlock((char *)"tid_release_lock_of_t3c_data");
  #line 952 
  spin_unlock_bh_0(lock);
  #line 953 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static int uses_xaui(struct adapter *adap)
{
  #line 619 
  return (int)(adap->params.info)->caps & 256;
}

#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static int is_10G(struct adapter *adap)
{
  #line 624 
  return (int)(adap->params.info)->caps & 4096;
}

#line 644 
#line 644 
void t3_write_regs(struct adapter *adapter, struct addr_val_pair *p, int n, unsigned int offset);
#line 646 
#line 646 
int t3_wait_op_done_val(struct adapter *adapter, int reg, u32 mask, int polarity, int attempts, int delay, u32 *valp);
#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static int t3_wait_op_done(struct adapter *adapter, int reg, u32 mask, int polarity, int attempts, int delay)
{
  #line 651 
  return t3_wait_op_done_val(adapter,reg,mask,polarity,attempts,delay,(u32 *)0U);
}

#line 705 
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_reset(struct cmac *mac);
#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
void t3b_pcs_reset(struct cmac *mac);
#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
void t3_mac_disable_exact_filters(struct cmac *mac);
#line 708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
void t3_mac_enable_exact_filters(struct cmac *mac);
#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_enable(struct cmac *mac, int which);
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_disable(struct cmac *mac, int which);
#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_mtu(struct cmac *mac, unsigned int mtu);
#line 712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_rx_mode(struct cmac *mac, struct net_device *dev);
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_address(struct cmac *mac, unsigned int idx, u8 *addr);
#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_num_ucast(struct cmac *mac, int n);
#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
struct mac_stats *t3_mac_update_stats(struct cmac *mac);
#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_speed_duplex_fc(struct cmac *mac, int speed, int duplex, int fc);
#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3b2_mac_watchdog_task(struct cmac *mac);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
__inline static int macidx(struct cmac *mac)
{
  #line 43 
  return (int)(mac->offset / 512U);
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
static void xaui_serdes_reset(struct cmac *mac)
{
  #line 53 
  int i;
  #line 48 
  unsigned int clear[6U] = {196608U, 16384U, 3145728U, 786432U, 32768U, 12582912U};
  #line 54 
  struct adapter *adap = mac->adapter;
  #line 55 
  u32 ctrl = mac->offset + 2272U;
  #line 57 
  ;
  #line 57 
  ;
  #line 57 
  ;
  #line 57 
  t3_write_reg(adap,ctrl,(unsigned int)adap->params.vpd.xauicfg[macidx(mac)] | 16760832U);
  #line 61 
  t3_read_reg(adap,ctrl);
  #line 62 
  __const_udelay(64425UL);
  #line 64 
  i = 0;
  #line 64 
  while ((unsigned int)i <= 5U) {
    #line 65 
    t3_set_reg_field(adap,ctrl,clear[i],0U);
    #line 66 
    __const_udelay(64425UL);
    #line 64 
    i ++;
  }
  #line 69 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
void t3b_pcs_reset(struct cmac *mac)
{
  #line 72 
  t3_set_reg_field(mac->adapter,mac->offset + 2220U,2U,0U);
  #line 74 
  __const_udelay(85900UL);
  #line 75 
  t3_set_reg_field(mac->adapter,mac->offset + 2220U,0U,2U);
  #line 76 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_reset(struct cmac *mac)
{
  #line 98 
  u32 val;
  #line 106 
  unsigned int tmp_0;
  #line 81 
  struct addr_val_pair mac_reset_avp[14U] = {{.reg_addr = 2048U, .val = 0U}, {.reg_addr = 2060U, .val = 0U}, {.reg_addr = 2064U, .val = 964U}, {.reg_addr = 2068U, .val = 0U}, {.reg_addr = 2072U, .val = 0U}, {.reg_addr = 2076U, .val = 0U}, {.reg_addr = 2084U, .val = 0U}, {.reg_addr = 2092U, .val = 0U}, {.reg_addr = 2100U, .val = 0U}, {.reg_addr = 2108U, .val = 0U}, {.reg_addr = 2116U, .val = 0U}, {.reg_addr = 2124U, .val = 0U}, {.reg_addr = 2132U, .val = 0U}, {.reg_addr = 2176U, .val = 4U}};
  #line 99 
  struct adapter *adap = mac->adapter;
  #line 100 
  unsigned int oft = mac->offset;
  #line 102 
  t3_write_reg(adap,oft + 2220U,1U);
  #line 103 
  t3_read_reg(adap,oft + 2220U);
  #line 105 
  t3_write_regs(adap,(struct addr_val_pair *)(& mac_reset_avp),14,oft);
  #line 106 
  if (uses_xaui(adap) != 0) 
                            #line 106 
                            tmp_0 = 0U; else 
                                             #line 106 
                                             tmp_0 = 2U;
  #line 106 
  ;
  #line 106 
  ;
  #line 106 
  t3_set_reg_field(adap,oft + 2180U,3U,tmp_0);
  #line 109 
  t3_set_reg_field(adap,oft + 2184U,0U,4194304U);
  #line 111 
  if (uses_xaui(adap) != 0) 
    #line 112 
    if (adap->params.rev == 0U) {
      #line 113 
      t3_set_reg_field(adap,oft + 2192U,0U,24U);
      #line 115 
      if (t3_wait_op_done(adap,(int)(oft + 2448U),2147483648U,1,5,2) != 0) {
        #line 117 
        ;
        #line 117 
        _dev_err(& (adap->pdev)->dev,(char *)"MAC %d XAUI SERDES CMU lock failed\n",macidx(mac));
        #line 120 
        return -1;
      }
      #line 122 
      t3_set_reg_field(adap,oft + 2192U,0U,16777216U);
    }
    else 
         #line 125 
         xaui_serdes_reset(mac);
  #line 128 
  t3_set_reg_field(adap,oft + 2216U,2147352576U,1342193664U);
  #line 131 
  val = 17U;
  #line 133 
  if (is_10G(adap) != 0) 
                         #line 134 
                         val |= 2U;
  else {
    #line 135 
    if (uses_xaui(adap) != 0) 
                              #line 136 
                              val |= 10U; else 
                                               #line 138 
                                               val |= 12U;
  }
  #line 139 
  t3_write_reg(adap,oft + 2220U,val);
  #line 140 
  t3_read_reg(adap,oft + 2220U);
  #line 141 
  if ((val & 2U) != 0U && adap->params.rev != 0U) {
    #line 142 
    msleep(1U);
    #line 143 
    t3b_pcs_reset(mac);
  }
  #line 146 
  memset((void *)(& mac->stats),0,448UL);
  #line 147 
  return 0;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
static int t3b2_mac_reset(struct cmac *mac)
{
  #line 153 
  unsigned int store;
  #line 155 
  u32 val;
  #line 152 
  struct adapter *adap = mac->adapter;
  #line 153 
  unsigned int oft = mac->offset;
  #line 154 
  int idx = macidx(mac);
  #line 157 
  if (macidx(mac) == 0) 
                        #line 158 
                        t3_set_reg_field(adap,1536U,1U,0U); else 
                                                                 #line 160 
                                                                 t3_set_reg_field(adap,1536U,2U,0U);
  #line 163 
  t3_set_reg_field(adap,1536U,2048U,0U);
  #line 165 
  t3_set_reg_field(adap,oft + 2052U,1U,0U);
  #line 167 
  t3_write_reg(adap,oft + 2220U,1U);
  #line 168 
  t3_read_reg(adap,oft + 2220U);
  #line 171 
  t3_write_reg(adap,1088U,(unsigned int)(idx + 299));
  #line 172 
  store = t3_read_reg(adap,(unsigned int)(idx + 299));
  #line 174 
  msleep(10U);
  #line 177 
  t3_write_reg(adap,1088U,(unsigned int)(idx + 299));
  #line 178 
  t3_write_reg(adap,1092U,3221225489U);
  #line 182 
  if (t3_wait_op_done(adap,(int)(oft + 2468U),2147483648U,1,1000,2) != 0) {
    #line 184 
    ;
    #line 184 
    _dev_err(& (adap->pdev)->dev,(char *)"MAC %d Rx fifo drain failed\n",macidx(mac));
    #line 186 
    return -1;
  }
  #line 189 
  t3_write_reg(adap,oft + 2220U,0U);
  #line 190 
  t3_read_reg(adap,oft + 2220U);
  #line 192 
  val = 1U;
  #line 193 
  if (is_10G(adap) != 0) 
                         #line 194 
                         val |= 2U;
  else {
    #line 195 
    if (uses_xaui(adap) != 0) 
                              #line 196 
                              val |= 10U; else 
                                               #line 198 
                                               val |= 12U;
  }
  #line 199 
  t3_write_reg(adap,oft + 2220U,val);
  #line 200 
  t3_read_reg(adap,oft + 2220U);
  #line 201 
  if ((val & 2U) != 0U && adap->params.rev != 0U) {
    #line 202 
    msleep(1U);
    #line 203 
    t3b_pcs_reset(mac);
  }
  #line 205 
  t3_write_reg(adap,oft + 2064U,964U);
  #line 210 
  t3_write_reg(adap,1088U,(unsigned int)(idx + 299));
  #line 211 
  t3_write_reg(adap,1092U,store);
  #line 213 
  if (idx == 0) 
                #line 214 
                t3_set_reg_field(adap,1536U,0U,1U); else 
                                                         #line 216 
                                                         t3_set_reg_field(adap,1536U,0U,2U);
  #line 219 
  t3_set_reg_field(adap,1536U,2048U,1U);
  #line 222 
  t3_set_reg_field(adap,1536U,2048U,1U);
  #line 224 
  return 0;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
static void set_addr_filter(struct cmac *mac, int idx, u8 *addr)
{
  #line 232 
  u32 addr_lo;
  #line 232 
  u32 addr_hi;
  #line 233 
  unsigned int oft = mac->offset + (unsigned int)(idx * 8);
  #line 235 
  addr_lo = (unsigned int)(((((int)*(addr + 3U) << 24) | ((int)*(addr + 2U) << 16)) | ((int)*(addr + 1U) << 8)) | (int)*addr);
  #line 236 
  addr_hi = (unsigned int)(((int)*(addr + 5U) << 8) | (int)*(addr + 4U));
  #line 238 
  t3_write_reg(mac->adapter,oft + 2076U,addr_lo);
  #line 239 
  t3_write_reg(mac->adapter,oft + 2080U,addr_hi);
  #line 240 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_address(struct cmac *mac, unsigned int idx, u8 *addr)
{
  #line 245 
  if (mac->nucast <= idx) 
                          #line 246 
                          return -22;
  #line 247 
  set_addr_filter(mac,(int)idx,addr);
  #line 248 
  return 0;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_num_ucast(struct cmac *mac, int n)
{
  #line 258 
  if (n > 8) 
             #line 259 
             return -22;
  #line 260 
  mac->nucast = (unsigned int)n;
  #line 261 
  return 0;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
void t3_mac_disable_exact_filters(struct cmac *mac)
{
  #line 266 
  unsigned int i;
  #line 266 
  unsigned int reg = mac->offset + 2076U;
  #line 268 
  i = 0U;
  #line 268 
  while (i <= 7U) {
    {
      #line 269 
      u32 v = t3_read_reg(mac->adapter,reg);
      #line 270 
      t3_write_reg(mac->adapter,reg,v);
    }
    #line 268 
    i ++;
    #line 268 
    reg += 8U;
  }
  #line 272 
  t3_read_reg(mac->adapter,2076U);
  #line 273 
  return;
}

#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
void t3_mac_enable_exact_filters(struct cmac *mac)
{
  #line 277 
  unsigned int i;
  #line 277 
  unsigned int reg = mac->offset + 2080U;
  #line 279 
  i = 0U;
  #line 279 
  while (i <= 7U) {
    {
      #line 280 
      u32 v = t3_read_reg(mac->adapter,reg);
      #line 281 
      t3_write_reg(mac->adapter,reg,v);
    }
    #line 279 
    i ++;
    #line 279 
    reg += 8U;
  }
  #line 283 
  t3_read_reg(mac->adapter,2076U);
  #line 284 
  return;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
static int hash_hw_addr(u8 *addr)
{
  #line 289 
  int octet;
  #line 289 
  int bit;
  #line 289 
  int c;
  #line 289 
  int hash = 0;
  #line 289 
  int i = 0;
  #line 291 
  octet = 0;
  #line 291 
  while (octet <= 5) {
    #line 292 
    c = (int)*(addr + (unsigned long)octet);
    #line 292 
    bit = 0;
    #line 292 
    while (bit <= 7) {
      #line 293 
      hash = ((c & 1) << i) ^ hash;
      #line 294 
      i ++;
      #line 294 
      if (i == 6) 
                  #line 295 
                  i = 0;
      #line 292 
      c >>= 1;
      #line 292 
      bit ++;
    }
    #line 291 
    octet ++;
  }
  #line 297 
  return hash;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_rx_mode(struct cmac *mac, struct net_device *dev)
{
  #line 302 
  u32 val;
  #line 302 
  u32 hash_lo;
  #line 302 
  u32 hash_hi;
  #line 303 
  struct adapter *adap = mac->adapter;
  #line 304 
  unsigned int oft = mac->offset;
  #line 306 
  val = t3_read_reg(adap,oft + 2064U) & 4294967294U;
  #line 307 
  if ((dev->flags & 256U) != 0U) 
                                 #line 308 
                                 val |= 1U;
  #line 309 
  t3_write_reg(adap,oft + 2064U,val);
  #line 311 
  if ((dev->flags & 512U) != 0U) {
    #line 312 
    hash_hi = 4294967295U;
    #line 312 
    hash_lo = hash_hi;
  }
  else {
    #line 318 
    void *__mptr;
    #line 314 
    struct netdev_hw_addr *ha;
    #line 315 
    int exact_addr_idx = (int)mac->nucast;
    #line 317 
    hash_hi = 0U;
    #line 317 
    hash_lo = hash_hi;
    #line 318 
    __mptr = (void *)dev->mc.list.next;
    #line 318 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 318 
    while (& ha->list != & dev->mc.list) {
      #line 318 
      void *__mptr_0;
      #line 319 
      if (exact_addr_idx <= 7) {
        #line 320 
        int tmp_2;
        #line 320 
        ;
        #line 320 
        tmp_2 = exact_addr_idx;
        #line 320 
        exact_addr_idx ++;
        #line 320 
        ;
        #line 320 
        ;
        #line 320 
        set_addr_filter(mac,tmp_2,(u8 *)(& ha->addr));
      }
      else {
        #line 323 
        int hash = hash_hw_addr((u8 *)(& ha->addr));
        #line 325 
        if (hash <= 31) 
                        #line 326 
                        hash_lo = (unsigned int)(1 << hash) | hash_lo; else 
                                                                    #line 328 
                                                                    hash_hi = (unsigned int)(1 << (hash + -32)) | hash_hi;
      }
      #line 318 
      __mptr_0 = (void *)ha->list.next;
      #line 318 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
  }
  #line 332 
  t3_write_reg(adap,oft + 2068U,hash_lo);
  #line 333 
  t3_write_reg(adap,oft + 2072U,hash_hi);
  #line 334 
  return 0;
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
static int rx_fifo_hwm(int mtu)
{
  #line 341 
  int __UNIQUE_ID___x438;
  #line 341 
  int tmp;
  #line 342 
  int __UNIQUE_ID___x440;
  #line 342 
  int tmp_1;
  #line 339 
  int hwm;
  {
    #line 341 
    __UNIQUE_ID___x438 = mtu * -3 + 32768;
    #line 341 
    int __UNIQUE_ID___y439 = 12451;
    #line 341 
    if (__UNIQUE_ID___x438 > __UNIQUE_ID___y439) 
                                                 #line 341 
                                                 tmp = __UNIQUE_ID___x438; else 
                                                                    #line 341 
                                                                    tmp = __UNIQUE_ID___y439;
    }
  #line 341 
  hwm = tmp;
  {
    #line 342 
    __UNIQUE_ID___x440 = hwm;
    #line 342 
    int __UNIQUE_ID___y441 = 24576;
    #line 342 
    if (__UNIQUE_ID___x440 < __UNIQUE_ID___y441) 
                                                 #line 342 
                                                 tmp_1 = __UNIQUE_ID___x440; else 
                                                                    #line 342 
                                                                    tmp_1 = __UNIQUE_ID___y441;
    }
  #line 342 
  return tmp_1;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_mtu(struct cmac *mac, unsigned int mtu)
{
  #line 412 
  unsigned int __UNIQUE_ID___x444;
  #line 412 
  unsigned int tmp_4;
  #line 396 
  int __UNIQUE_ID___x442;
  #line 396 
  int tmp_1;
  #line 347 
  int hwm;
  #line 347 
  int lwm;
  #line 347 
  int divisor;
  #line 348 
  int ipg;
  #line 349 
  unsigned int thres;
  #line 349 
  unsigned int v;
  #line 349 
  unsigned int reg;
  #line 350 
  struct adapter *adap = mac->adapter;
  #line 356 
  mtu += 14U;
  #line 357 
  if (mtu > 1536U) 
                   #line 358 
                   mtu += 4U;
  #line 360 
  if (mtu > 10236U) 
                    #line 361 
                    return -22;
  #line 362 
  t3_write_reg(adap,mac->offset + 2216U,mtu);
  #line 364 
  if (adap->params.rev > 2U) {
    #line 364 
    if ((t3_read_reg(adap,mac->offset + 2060U) & 1U) != 0U) {
      #line 366 
      t3_mac_disable_exact_filters(mac);
      #line 367 
      v = t3_read_reg(adap,mac->offset + 2064U);
      #line 368 
      t3_set_reg_field(adap,mac->offset + 2064U,5U,2U);
      #line 371 
      if (adap->params.rev == 3U) 
                                  #line 371 
                                  reg = 2468U; else 
                                                    #line 371 
                                                    reg = 2180U;
      #line 375 
      if (t3_wait_op_done(adap,(int)(mac->offset + reg),2147483648U,1,20,5) != 0) {
        #line 377 
        t3_write_reg(adap,mac->offset + 2064U,v);
        #line 378 
        t3_mac_enable_exact_filters(mac);
        #line 379 
        return -5;
      }
      #line 381 
      t3_set_reg_field(adap,mac->offset + 2216U,16383U,mtu);
      #line 384 
      t3_write_reg(adap,mac->offset + 2064U,v);
      #line 385 
      t3_mac_enable_exact_filters(mac);
    }
    else 
         #line 387 
         t3_set_reg_field(adap,mac->offset + 2216U,16383U,mtu);
  }
  else 
       #line 387 
       t3_set_reg_field(adap,mac->offset + 2216U,16383U,mtu);
  #line 395 
  hwm = rx_fifo_hwm((int)mtu);
  {
    #line 396 
    __UNIQUE_ID___x442 = (int)mtu * 3;
    #line 396 
    int __UNIQUE_ID___y443 = 8192;
    #line 396 
    if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                 #line 396 
                                                 tmp_1 = __UNIQUE_ID___x442; else 
                                                                    #line 396 
                                                                    tmp_1 = __UNIQUE_ID___y443;
    }
  #line 396 
  lwm = tmp_1;
  #line 397 
  v = t3_read_reg(adap,mac->offset + 2180U);
  #line 398 
  v &= 4294836255U;
  #line 399 
  v = (unsigned int)(lwm / 8 << 5) | v;
  #line 400 
  if (((v >> 17) & 4095U) != 0U) 
                                 #line 401 
                                 v = (v & 3758227455U) | (unsigned int)(hwm / 8 << 17);
  #line 404 
  t3_write_reg(adap,mac->offset + 2180U,v);
  #line 407 
  thres = (adap->params.vpd.cclk * 1000U) / 15625U;
  #line 408 
  thres = (thres * mtu) / 1000U;
  #line 409 
  if (is_10G(adap) != 0) 
                         #line 410 
                         thres /= 10U;
  #line 411 
  if (mtu > thres) 
                   #line 411 
                   thres = ((mtu - thres) + 7U) / 8U; else 
                                                           #line 411 
                                                           thres = 0U;
  {
    #line 412 
    __UNIQUE_ID___x444 = thres;
    #line 412 
    unsigned int __UNIQUE_ID___y445 = 8U;
    #line 412 
    if (__UNIQUE_ID___x444 > __UNIQUE_ID___y445) 
                                                 #line 412 
                                                 tmp_4 = __UNIQUE_ID___x444; else 
                                                                    #line 412 
                                                                    tmp_4 = __UNIQUE_ID___y445;
    }
  #line 412 
  thres = tmp_4;
  #line 413 
  ipg = adap->params.rev != 4U;
  #line 414 
  t3_set_reg_field(adap,mac->offset + 2184U,2097136U,(thres << 4) | (unsigned int)(ipg << 13));
  #line 418 
  if (adap->params.rev != 0U) {
    #line 419 
    if (adap->params.rev == 4U) 
                                #line 419 
                                divisor = 64; else 
                                                   #line 419 
                                                   divisor = 8;
    #line 420 
    t3_write_reg(adap,mac->offset + 2192U,(unsigned int)(((hwm - lwm) * 4) / divisor));
  }
  #line 423 
  t3_write_reg(adap,mac->offset + 2056U,2048U);
  #line 425 
  return 0;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_set_speed_duplex_fc(struct cmac *mac, int speed, int duplex, int fc)
{
  #line 430 
  u32 val;
  #line 431 
  struct adapter *adap = mac->adapter;
  #line 432 
  unsigned int oft = mac->offset;
  #line 434 
  if (duplex >= 0 && duplex != 1) 
                                  #line 435 
                                  return -22;
  #line 436 
  if (speed >= 0) {
    #line 437 
    if (speed == 10) 
                     #line 438 
                     val = 0U;
    else 
      #line 439 
      if (speed == 100) 
                        #line 440 
                        val = 2U;
      else 
        #line 441 
        if (speed == 1000) 
                           #line 442 
                           val = 4U;
        else 
          #line 443 
          if (speed == 10000) 
                              #line 444 
                              val = 6U; else 
                                             #line 446 
                                             return -22;
    #line 448 
    t3_set_reg_field(adap,oft + 2232U,6U,val);
  }
  #line 452 
  val = t3_read_reg(adap,oft + 2180U);
  #line 453 
  val &= 3758227455U;
  #line 454 
  if ((fc & 2) != 0) {
    #line 455 
    u32 rx_max_pkt_size = t3_read_reg(adap,oft + 2216U) & 16383U;
    #line 458 
    val = (unsigned int)(rx_fifo_hwm((int)rx_max_pkt_size) / 8 << 17) | val;
  }
  #line 460 
  t3_write_reg(adap,oft + 2180U,val);
  #line 462 
  t3_set_reg_field(adap,oft + 2052U,1U,(unsigned int)fc & 1U);
  #line 464 
  return 0;
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_enable(struct cmac *mac, int which)
{
  #line 469 
  int idx = macidx(mac);
  #line 470 
  struct adapter *adap = mac->adapter;
  #line 471 
  unsigned int oft = mac->offset;
  #line 472 
  struct mac_stats *s = & mac->stats;
  #line 474 
  if ((which & 2) != 0) {
    #line 476 
    unsigned int tmp_0;
    #line 480 
    unsigned int tmp_1;
    #line 475 
    t3_write_reg(adap,1088U,(unsigned int)(idx + 299));
    #line 476 
    if (adap->params.rev == 4U) 
                                #line 476 
                                tmp_0 = 3305111297U; else 
                                                          #line 476 
                                                          tmp_0 = 3236815873U;
    #line 476 
    ;
    #line 476 
    t3_write_reg(adap,1092U,tmp_0);
    #line 479 
    t3_write_reg(adap,1088U,303U);
    #line 480 
    if (adap->params.rev != 4U) 
                                #line 480 
                                tmp_1 = (unsigned int)(1 << idx); else 
                                                                    #line 480 
                                                                    tmp_1 = 0U;
    #line 480 
    ;
    #line 480 
    ;
    #line 480 
    t3_set_reg_field(adap,1092U,(unsigned int)(1 << idx),tmp_1);
    #line 483 
    t3_write_reg(adap,oft + 2048U,1U);
    #line 485 
    t3_write_reg(adap,1088U,(unsigned int)(idx + 301));
    #line 486 
    mac->tx_mcnt = s->tx_frames;
    #line 487 
    mac->tx_tcnt = t3_read_reg(adap,1092U) & 65535U;
    #line 489 
    mac->tx_xcnt = (t3_read_reg(adap,oft + 2472U) >> 16) & 65535U;
    #line 492 
    mac->rx_mcnt = s->rx_frames;
    #line 493 
    mac->rx_pause = s->rx_pause;
    #line 494 
    mac->rx_xcnt = (t3_read_reg(adap,oft + 2476U) >> 16) & 65535U;
    #line 497 
    mac->rx_ocnt = (unsigned int)s->rx_fifo_ovfl;
    #line 498 
    mac->txen = 1U;
    #line 499 
    mac->toggle_cnt = 0U;
  }
  #line 501 
  if ((which & 1) != 0) 
                        #line 502 
                        t3_write_reg(adap,oft + 2060U,1U);
  #line 503 
  return 0;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3_mac_disable(struct cmac *mac, int which)
{
  #line 508 
  struct adapter *adap = mac->adapter;
  #line 510 
  if ((which & 2) != 0) {
    #line 511 
    t3_write_reg(adap,mac->offset + 2048U,0U);
    #line 512 
    mac->txen = 0U;
  }
  #line 514 
  if ((which & 1) != 0) {
    #line 515 
    int val = 1;
    #line 517 
    t3_set_reg_field(mac->adapter,mac->offset + 2220U,2U,0U);
    #line 519 
    msleep(100U);
    #line 520 
    t3_write_reg(adap,mac->offset + 2060U,0U);
    #line 521 
    if (is_10G(adap) != 0) 
                           #line 522 
                           val = (int)((unsigned int)val | 2U);
    else {
      #line 523 
      if (uses_xaui(adap) != 0) 
                                #line 524 
                                val = (int)((unsigned int)val | 10U); else 
                                                                    #line 526 
                                                                    val = (int)((unsigned int)val | 12U);
    }
    #line 527 
    t3_write_reg(mac->adapter,mac->offset + 2220U,(unsigned int)val);
  }
  #line 529 
  return 0;
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
int t3b2_mac_watchdog_task(struct cmac *mac)
{
  #line 536 
  unsigned int tx_tcnt;
  #line 536 
  unsigned int tx_xcnt;
  #line 538 
  int status;
  #line 534 
  struct adapter *adap = mac->adapter;
  #line 535 
  struct mac_stats *s = & mac->stats;
  #line 537 
  u64 tx_mcnt = s->tx_frames;
  #line 540 
  status = 0;
  #line 541 
  tx_xcnt = 1U;
  #line 542 
  tx_tcnt = mac->tx_tcnt;
  #line 543 
  if (mac->tx_mcnt == tx_mcnt && mac->rx_pause == s->rx_pause) {
    #line 544 
    tx_xcnt = (t3_read_reg(adap,mac->offset + 2472U) >> 16) & 65535U;
    #line 547 
    if (tx_xcnt == 0U) {
      #line 548 
      ;
      #line 548 
      t3_write_reg(adap,1088U,(unsigned int)(macidx(mac) + 301));
      #line 550 
      tx_tcnt = t3_read_reg(adap,1092U) & 65535U;
    }
    else 
         #line 553 
         goto out;
  }
  else {
    #line 556 
    mac->toggle_cnt = 0U;
    #line 557 
    goto out;
  }
  #line 560 
  if (mac->tx_tcnt != tx_tcnt && mac->tx_xcnt == 0U) 
    #line 561 
    if (mac->toggle_cnt > 4U) {
      #line 562 
      status = 2;
      #line 563 
      goto out;
    }
    else {
      #line 565 
      status = 1;
      #line 566 
      goto out;
    }
  else {
    #line 569 
    mac->toggle_cnt = 0U;
    #line 570 
    goto out;
  }
  #line 573 
  out: 
       #line 573 
  ;
  #line 574 
  mac->tx_tcnt = tx_tcnt;
  #line 575 
  mac->tx_xcnt = tx_xcnt;
  #line 576 
  mac->tx_mcnt = s->tx_frames;
  #line 577 
  mac->rx_pause = s->rx_pause;
  #line 578 
  if (status == 1) {
    #line 579 
    t3_write_reg(adap,mac->offset + 2048U,0U);
    #line 580 
    t3_read_reg(adap,mac->offset + 2048U);
    #line 581 
    t3_write_reg(adap,mac->offset + 2048U,mac->txen);
    #line 582 
    t3_read_reg(adap,mac->offset + 2048U);
    #line 583 
    (mac->toggle_cnt) ++;
  }
  else 
    #line 584 
    if (status == 2) {
      #line 585 
      t3b2_mac_reset(mac);
      #line 586 
      mac->toggle_cnt = 0U;
    }
  #line 588 
  return status;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/xgmac.c"
struct mac_stats *t3_mac_update_stats(struct cmac *mac)
{
  #line 607 
  u32 v;
  #line 607 
  u32 lo;
  #line 651 
  unsigned int tmp_33;
  #line 609 
  mac->stats.rx_octets += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2364U) + ((unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2368U) << 32);
  #line 610 
  mac->stats.rx_frames += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2372U) + ((unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2376U) << 32);
  #line 611 
  mac->stats.rx_mcast_frames += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2384U);
  #line 612 
  mac->stats.rx_bcast_frames += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2380U);
  #line 613 
  mac->stats.rx_fcs_errs += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2432U);
  #line 614 
  mac->stats.rx_pause += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2388U);
  #line 615 
  mac->stats.rx_jabber += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2428U);
  #line 616 
  mac->stats.rx_short += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2420U);
  #line 617 
  mac->stats.rx_symbol_errs += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2440U);
  #line 619 
  mac->stats.rx_too_long += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2424U);
  #line 621 
  v = t3_read_reg(mac->adapter,mac->offset + 2468U);
  #line 622 
  if ((mac->adapter)->params.rev == 3U) 
                                        #line 623 
                                        v &= 2147483647U;
  #line 624 
  mac->stats.rx_too_long += (unsigned long long)v;
  #line 626 
  mac->stats.rx_frames_64 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2392U);
  #line 627 
  mac->stats.rx_frames_65_127 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2396U);
  #line 628 
  mac->stats.rx_frames_128_255 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2400U);
  #line 629 
  mac->stats.rx_frames_256_511 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2404U);
  #line 630 
  mac->stats.rx_frames_512_1023 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2408U);
  #line 631 
  mac->stats.rx_frames_1024_1518 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2412U);
  #line 632 
  mac->stats.rx_frames_1519_max += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2416U);
  #line 634 
  mac->stats.tx_octets += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2304U) + ((unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2308U) << 32);
  #line 635 
  mac->stats.tx_frames += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2312U) + ((unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2316U) << 32);
  #line 636 
  mac->stats.tx_mcast_frames += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2324U);
  #line 637 
  mac->stats.tx_bcast_frames += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2320U);
  #line 638 
  mac->stats.tx_pause += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2328U);
  #line 640 
  mac->stats.tx_underrun += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2360U);
  #line 642 
  mac->stats.tx_frames_64 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2332U);
  #line 643 
  mac->stats.tx_frames_65_127 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2336U);
  #line 644 
  mac->stats.tx_frames_128_255 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2340U);
  #line 645 
  mac->stats.tx_frames_256_511 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2344U);
  #line 646 
  mac->stats.tx_frames_512_1023 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2348U);
  #line 647 
  mac->stats.tx_frames_1024_1518 += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2352U);
  #line 648 
  mac->stats.tx_frames_1519_max += (unsigned long long)t3_read_reg(mac->adapter,mac->offset + 2356U);
  #line 651 
  if (mac->offset != 0U) 
                         #line 651 
                         tmp_33 = 51U; else 
                                            #line 651 
                                            tmp_33 = 50U;
  #line 651 
  ;
  #line 651 
  t3_write_reg(mac->adapter,1104U,tmp_33);
  #line 652 
  v = t3_read_reg(mac->adapter,1108U);
  #line 653 
  lo = (unsigned int)mac->stats.rx_cong_drops;
  #line 654 
  mac->stats.rx_cong_drops += (unsigned long long)(v - lo);
  #line 656 
  return & mac->stats;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x)
{
  #line 285 
  int r;
  #line 286 
  ldv_inline_asm();
  #line 310 
  return r + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
#line 334 
extern struct paravirt_patch_template pv_ops;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_4292 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 237 
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void atomic_inc_1(atomic_t *v);
#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void)
{
  #line 757 
  unsigned long __edi = __edi;
  #line 757 
  unsigned long __esi = __esi;
  #line 757 
  unsigned long __edx = __edx;
  #line 757 
  unsigned long __ecx = __ecx;
  #line 757 
  unsigned long __eax = __eax;
  #line 757 
  if ((long)(pv_ops.irq.irq_disable.func == (void *)0) != 0L) {
    #line 758 
    ldv_inline_asm();
    #line 759 
    ldv_inline_asm();
    #line 760 
    ldv_inline_asm();
    #line 757 
    ;
  }
  #line 761 
  ldv_inline_asm();
  #line 763 
  return;
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_enable(void)
{
  #line 762 
  unsigned long __edi = __edi;
  #line 762 
  unsigned long __esi = __esi;
  #line 762 
  unsigned long __edx = __edx;
  #line 762 
  unsigned long __ecx = __ecx;
  #line 762 
  unsigned long __eax = __eax;
  #line 762 
  if ((long)(pv_ops.irq.irq_enable.func == (void *)0) != 0L) {
    #line 763 
    ldv_inline_asm();
    #line 764 
    ldv_inline_asm();
    #line 765 
    ldv_inline_asm();
    #line 762 
    ;
  }
  #line 766 
  ldv_inline_asm();
  #line 768 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqflags.h"
#line 32 
void trace_hardirqs_on(void);
#line 33 
#line 33 
void trace_hardirqs_off(void);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_lock_of_sge_txq(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 882  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_lock_of_sge_rspq(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock_lock_of_sge_txq(spinlock_t *lock);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq_0(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_irq_reg_lock_of_sge_0(spinlock_t *lock);
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_irq_lock_of_sge_rspq(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 599  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_lock_of_sge_txq(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_lock_of_sge_rspq(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq_0(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_irq_reg_lock_of_sge_0(spinlock_t *lock);
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_irq_lock_of_sge_rspq(spinlock_t *lock);
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 952  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_irq_lock(spinlock_t *lock);
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock_irq(spinlock_t *lock)
{
  #line 403 
  int tmp_1;
  {
    #line 403 
    arch_local_irq_disable();
    #line 403 
    trace_hardirqs_off();
    #line 403 
    if (_raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock) == 0) {
      #line 403 
      trace_hardirqs_on();
      #line 403 
      arch_local_irq_enable();
      #line 403 
      tmp_1 = 0;
    }
    else 
         #line 403 
         tmp_1 = 1;
    }
  #line 403 
  return tmp_1;
}

#line 405 
#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock_irq_lock(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_4372 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_129_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read_1(& page->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc_1(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static unsigned int refcount_read(refcount_t *r)
{
  #line 134 
  return (unsigned int)atomic_read_1(& r->refs);
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_129_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_129_31.index == 18446744073709551615UL);
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1708 
#line 1708 
void _dev_alert(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff *skb)
{
  #line 1663 
  return refcount_read(& skb->users) != 1U;
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
  #line 1746 
  struct sk_buff *skb = list_->next;
  #line 1748 
  if (skb == (struct sk_buff *)list_) 
                                      #line 1749 
                                      skb = (struct sk_buff *)0;
  #line 1750 
  return skb;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1843 
  spinlock_check(& list->lock);
  {
    #line 1843 
    struct lock_class_key __key;
    #line 1843 
    __raw_spin_lock_init(& list->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&list->lock)->rlock",& __key);
  }
  #line 1844 
  __skb_queue_head_init(list);
  #line 1845 
  return;
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_insert_0(struct sk_buff *newsk, struct sk_buff *prev, struct sk_buff *next, struct sk_buff_head *list)
{
  {
    #line 1868 
    union __anonunion___u_4729 __u = {.__val = next};
    #line 1867 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u.__c),8);
    #line 1867 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1869 
    union __anonunion___u_4731 __u_0 = {.__val = prev};
    #line 1868 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_0.__c),8);
    #line 1868 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1870 
    union __anonunion___u_4733 __u_1 = {.__val = newsk};
    #line 1869 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_1.__c),8);
    #line 1869 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1871 
    union __anonunion___u_4735 __u_2 = {.__val = newsk};
    #line 1870 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_2.__c),8);
    #line 1870 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1871 
  (list->qlen) ++;
  #line 1872 
  return;
}

#line 1874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_splice_0(struct sk_buff_head *list, struct sk_buff *prev, struct sk_buff *next)
{
  #line 1878 
  struct sk_buff *first = list->next;
  #line 1879 
  struct sk_buff *last = list->prev;
  {
    #line 1882 
    union __anonunion___u_4737 __u = {.__val = prev};
    #line 1881 
    __write_once_size((void *)(& first->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 1881 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1883 
    union __anonunion___u_4739 __u_0 = {.__val = first};
    #line 1882 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 1882 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1885 
    union __anonunion___u_4741 __u_1 = {.__val = next};
    #line 1884 
    __write_once_size((void *)(& last->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_1.__c),8);
    #line 1884 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1886 
    union __anonunion___u_4743 __u_2 = {.__val = last};
    #line 1885 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u_2.__c),8);
    #line 1885 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1887 
  return;
}

#line 1893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_splice(struct sk_buff_head *list, struct sk_buff_head *head)
{
  #line 1896 
  if (skb_queue_empty(list) == 0) {
    #line 1897 
    __skb_queue_splice_0(list,(struct sk_buff *)head,head->next);
    #line 1898 
    head->qlen += list->qlen;
  }
  #line 1900 
  return;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_splice_init_0(struct sk_buff_head *list, struct sk_buff_head *head)
{
  #line 1912 
  if (skb_queue_empty(list) == 0) {
    #line 1913 
    __skb_queue_splice_0(list,(struct sk_buff *)head,head->next);
    #line 1914 
    head->qlen += list->qlen;
    #line 1915 
    __skb_queue_head_init(list);
  }
  #line 1917 
  return;
}

#line 1972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_before_0(struct sk_buff_head *list, struct sk_buff *next, struct sk_buff *newsk)
{
  #line 1976 
  __skb_insert_0(newsk,next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev,next,list);
  #line 1977 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_tail_0(struct sk_buff_head *list, struct sk_buff *newsk)
{
  #line 2009 
  __skb_queue_before_0(list,(struct sk_buff *)list,newsk);
  #line 2010 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_unlink_0(struct sk_buff *skb, struct sk_buff_head *list)
{
  #line 2020 
  struct sk_buff *next;
  #line 2020 
  struct sk_buff *prev;
  #line 2022 
  (list->qlen) --;
  #line 2023 
  next = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
  #line 2024 
  prev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev;
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev = ((struct sk_buff *)0);
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next = ((struct sk_buff *)0);
  {
    #line 2027 
    union __anonunion___u_4745 __u = {.__val = prev};
    #line 2026 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.prev),(void *)(& __u.__c),8);
    #line 2026 
    struct sk_buff *tmp_2 = __u.__val;
  }
  {
    #line 2028 
    union __anonunion___u_4747 __u_0 = {.__val = next};
    #line 2027 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next),(void *)(& __u_0.__c),8);
    #line 2027 
    struct sk_buff *tmp_4 = __u_0.__val;
  }
  #line 2029 
  return;
}

#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
  #line 2040 
  struct sk_buff *skb = skb_peek(list);
  #line 2041 
  if (skb != (struct sk_buff *)0) 
                                  #line 2042 
                                  __skb_unlink_0(skb,list);
  #line 2043 
  return skb;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2210 
  void *tmp = __skb_put(skb,len);
  #line 2212 
  memcpy(tmp,data,(unsigned long)len);
  #line 2213 
  return tmp;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2256 
  skb->len -= len;
  #line 2257 
  if ((long)(skb->len < skb->data_len) != 0L) {
    #line 2258 
    ldv_inline_asm();
    #line 2259 
    ldv_inline_asm();
    #line 2260 
    ldv_inline_asm();
    #line 2257 
    ;
  }
  #line 2258 
  skb->data += (unsigned long)len;
  #line 2258 
  return (void *)skb->data;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_transport_header(struct sk_buff *skb)
{
  #line 2465 
  skb->transport_header = (unsigned short)(skb->data - skb->head);
  #line 2466 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  #line 2482 
  skb->network_header = (unsigned short)(skb->data - skb->head);
  #line 2483 
  return;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb)
{
  #line 2706 
  if (skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_492_90.destructor != (void (*)(struct sk_buff *))0) {
    #line 2707 
    (*(skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_492_90.destructor))(skb);
    #line 2708 
    skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_492_90.destructor = (void (*)(struct sk_buff *))0;
    #line 2709 
    skb->__anonCompField_sk_buff_88.sk = (struct sock *)0;
  }
  else 
    #line 2711 
    if ((long)(skb->__anonCompField_sk_buff_88.sk != (struct sock *)0) != 0L) {
      #line 2712 
      ldv_inline_asm();
      #line 2713 
      ldv_inline_asm();
      #line 2714 
      ldv_inline_asm();
      #line 2711 
      ;
    }
  #line 2714 
  return;
}

#line 2750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_purge(struct sk_buff_head *list)
{
  #line 2752 
  struct sk_buff *skb;
  #line 2753 
  while (1) {
    #line 2753 
    skb = __skb_dequeue(list);
    #line 2753 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 2753 
                                        break;
    #line 2754 
    kfree_skb(skb);
  }
  #line 2755 
  return;
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_off_set(skb_frag_t *frag, unsigned int offset)
{
  #line 2918 
  frag->bv_offset = offset;
  #line 2919 
  return;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
  #line 3037 
  frag->bv_page = page;
  #line 3038 
  return;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 874  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 687 
#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 3672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_free_frags(struct napi_struct *napi)
{
  #line 3674 
  kfree_skb(napi->skb);
  #line 3675 
  napi->skb = (struct sk_buff *)0;
  #line 3676 
  return;
}

#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_tx_trylock(struct netdev_queue *txq)
{
  #line 3959 
  bool ok = (_Bool)(cif_spin_trylock__xmit_lock_of_netdev_queue(& txq->_xmit_lock) != 0);
  #line 3960 
  if ((long)((int)ok != 0) != 0L) {
    #line 3961 
    int pscr_ret__;
    #line 3961 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 3961 
      void *__vpp_verify = (void *)0;
      #line 3961 
      void *tmp_2 = __vpp_verify;
    }
    #line 3961 
    switch (4UL) {
      #line 3961 
      int pfo_ret___0;
      #line 3961 
      int pfo_ret___1;
      #line 3961 
      int pfo_ret___2;
      #line 3961 
      int pfo_ret__;
      #line 3961 
      case (unsigned long)1: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret__;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)2: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___0;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)4: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___1;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)8: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___2;
      #line 3961 
      break;
      #line 3961 
      default: 
               #line 3961 
      ;
      #line 3961 
      __bad_size_call_parameter();
      #line 3961 
      break;
    }
    #line 3961 
    txq->xmit_lock_owner = pscr_ret__;
  }
  #line 3962 
  return ok;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
__inline static struct arphdr *arp_hdr(struct sk_buff *skb)
{
  #line 27 
  return (struct arphdr *)skb_network_header(skb);
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/arp.h"
#line 68 
void arp_send(int, int, __be32, struct net_device *, __be32, unsigned char *, unsigned char *, unsigned char *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_page(struct pci_dev *hwdev, struct page *page, unsigned long offset, size_t size, int direction)
{
  #line 54 
  return dma_map_page_attrs(& hwdev->dev,page,offset,size,
                         (enum dma_data_direction)direction,0UL);
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 89 
  dma_sync_single_for_device(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 90 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_start(struct adapter *adap);
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_stop(struct adapter *adap);
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_start_sge_timers(struct adapter *adap);
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_stop_sge_timers(struct adapter *adap);
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_free_sge_resources(struct adapter *adap);
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 2866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_err_intr_handler(struct adapter *adapter);
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 2840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
irq_handler_t t3_intr_handler(struct adapter *adap, int polling);
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 1263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
netdev_tx_t t3_eth_xmit(struct sk_buff *skb, struct net_device *dev);
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 1563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
int t3_mgmt_tx(struct adapter *adap, struct sk_buff *skb);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_update_qset_coalesce(struct sge_qset *qs, struct qset_params *p);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 3035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
int t3_sge_alloc_qset(struct adapter *adapter, unsigned int id, int nports, int irq_vec_idx, struct qset_params *p, int ntxq, struct net_device *dev, struct netdev_queue *netdevq);
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
struct workqueue_struct *cxgb3_wq;
#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static unsigned int core_ticks_per_usec(struct adapter *adap)
{
  #line 634 
  return adap->params.vpd.cclk / 1000U;
}

#line 672 
#line 672 
int t3_slow_intr_handler(struct adapter *adapter);
#line 734 
#line 3350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_prep(struct adapter *adap, struct sge_params *p);
#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_init(struct adapter *adap, struct sge_params *p);
#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 740 
int t3_sge_init_flcntxt(struct adapter *adapter, unsigned int id, int gts_enable, u64 base_addr, unsigned int size, unsigned int bsize, unsigned int cong_thres, int gen, unsigned int cidx);
#line 744 
#line 744 
int t3_sge_init_rspcntxt(struct adapter *adapter, unsigned int id, int irq_vec_idx, u64 base_addr, unsigned int size, unsigned int fl_thres, int gen, unsigned int cidx);
#line 750 
#line 750 
int t3_sge_enable_ecntxt(struct adapter *adapter, unsigned int id, int enable);
#line 751 
#line 751 
int t3_sge_disable_fl(struct adapter *adapter, unsigned int id);
#line 752 
#line 752 
int t3_sge_disable_rspcntxt(struct adapter *adapter, unsigned int id);
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static u8 flit_desc_map[58U] = {[1] = (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)1U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)2U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)3U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U, (unsigned char)4U};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static struct sge_qset *rspq_to_qset(struct sge_rspq *q)
{
  #line 174 
  void *__mptr;
  #line 174 
  __mptr = (void *)q;
  #line 174 
  return ((struct sge_qset *)(__mptr + 18446744073709551216U));
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static struct sge_qset *txq_to_qset(struct sge_txq *q, int qidx)
{
  #line 179 
  void *__mptr;
  #line 179 
  __mptr = (void *)q;
  #line 179 
  return ((struct sge_qset *)(__mptr + (18446744073709550616U - (unsigned long)qidx * (unsigned long)312U)));
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void refill_rspq(struct adapter *adapter, struct sge_rspq *q, unsigned int credits)
{
  #line 193 
  ldv_inline_asm();
  #line 195 
  t3_write_reg(adapter,48U,(q->cntxt_id << 29) | credits);
  #line 197 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int need_skb_unmap(void)
{
  #line 208 
  return 1;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void unmap_skb(struct sk_buff *skb, struct sge_txq *q, unsigned int cidx, struct pci_dev *pdev)
{
  #line 239 
  struct sg_ent *sgp;
  #line 241 
  int nfrags;
  #line 241 
  int frag_idx;
  #line 241 
  int curflit;
  #line 240 
  struct tx_sw_desc *d = q->sdesc + (unsigned long)cidx;
  #line 241 
  int j = (int)d->addr_idx;
  #line 243 
  sgp = (struct sg_ent *)(& (q->desc + (unsigned long)cidx)->flit[(int)d->sflit]);
  #line 244 
  frag_idx = (int)d->fragidx;
  #line 246 
  if (frag_idx == 0) {
    #line 246 
    if (skb_headlen(skb) != 0U) {
      #line 247 
      ;
      #line 247 
      pci_unmap_single(pdev,(unsigned long long)__builtin_bswap64((unsigned long)sgp->addr[0]),(unsigned long)skb_headlen(skb),1);
      #line 249 
      j = 1;
    }
  }
  #line 252 
  curflit = ((int)d->sflit + 1) + j;
  #line 253 
  nfrags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 255 
  while (frag_idx < nfrags && (unsigned int)curflit <= 14U) {
    #line 256 
    ;
    #line 256 
    pci_unmap_page(pdev,(unsigned long long)__builtin_bswap64((unsigned long)sgp->addr[j]),(unsigned long)skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[frag_idx]),1);
    #line 259 
    j ^= 1;
    #line 260 
    if (j == 0) {
      #line 261 
      sgp ++;
      #line 262 
      curflit ++;
    }
    #line 264 
    curflit ++;
    #line 265 
    frag_idx ++;
  }
  #line 268 
  if (frag_idx < nfrags) {
    #line 269 
    if (cidx + 1U == q->size) 
                              #line 269 
                              d = q->sdesc; else 
                                                 #line 269 
                                                 d ++;
    #line 270 
    d->fragidx = (unsigned char)frag_idx;
    #line 271 
    d->addr_idx = (unsigned char)j;
    #line 272 
    d->sflit = (signed char)((unsigned int)(curflit - j) + 241U);
  }
  #line 274 
  return;
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void free_tx_desc(struct adapter *adapter, struct sge_txq *q, unsigned int n)
{
  #line 288 
  struct tx_sw_desc *d;
  #line 292 
  int tmp_0;
  #line 289 
  struct pci_dev *pdev = adapter->pdev;
  #line 290 
  unsigned int cidx = q->cidx;
  #line 292 
  if (need_skb_unmap() != 0) 
    #line 292 
    if (q->cntxt_id > 7U) 
                          #line 292 
                          tmp_0 = 1; else 
                                          #line 292 
                                          tmp_0 = 0;
  else 
       #line 292 
       tmp_0 = 0;
  #line 292 
  int need_unmap = tmp_0;
  #line 295 
  d = q->sdesc + (unsigned long)cidx;
  #line 296 
  while (1) {
    #line 296 
    unsigned int tmp_1;
    #line 296 
    tmp_1 = n;
    #line 296 
    n --;
    #line 296 
    ;
    #line 296 
    if (! (tmp_1 != 0U)) 
                         #line 296 
                         break;
    #line 297 
    if (d->skb != (struct sk_buff *)0) {
      #line 298 
      if (need_unmap != 0) 
                           #line 299 
                           unmap_skb(d->skb,q,cidx,pdev);
      #line 300 
      if ((unsigned int)d->eop != 0U) {
        #line 301 
        dev_consume_skb_any(d->skb);
        #line 302 
        d->skb = (struct sk_buff *)0;
      }
    }
    #line 305 
    d ++;
    #line 306 
    cidx ++;
    #line 306 
    ;
    #line 306 
    if (cidx == q->size) {
      #line 307 
      cidx = 0U;
      #line 308 
      d = q->sdesc;
    }
  }
  #line 311 
  q->cidx = cidx;
  #line 312 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static unsigned int reclaim_completed_tx(struct adapter *adapter, struct sge_txq *q, unsigned int chunk)
{
  #line 330 
  unsigned int __UNIQUE_ID___x534;
  #line 330 
  unsigned int tmp;
  #line 328 
  unsigned int reclaim = q->processed - q->cleaned;
  {
    #line 330 
    __UNIQUE_ID___x534 = chunk;
    #line 330 
    unsigned int __UNIQUE_ID___y535 = reclaim;
    #line 330 
    if (__UNIQUE_ID___x534 < __UNIQUE_ID___y535) 
                                                 #line 330 
                                                 tmp = __UNIQUE_ID___x534; else 
                                                                    #line 330 
                                                                    tmp = __UNIQUE_ID___y535;
    }
  #line 330 
  reclaim = tmp;
  #line 331 
  if (reclaim != 0U) {
    #line 332 
    free_tx_desc(adapter,q,reclaim);
    #line 333 
    q->cleaned += reclaim;
    #line 334 
    q->in_use -= reclaim;
  }
  #line 336 
  return q->processed - q->cleaned;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int should_restart_tx(struct sge_txq *q)
{
  #line 347 
  unsigned int r = q->processed - q->cleaned;
  #line 349 
  return q->in_use - r < q->size >> 1;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void clear_rx_desc(struct pci_dev *pdev, struct sge_fl *q, struct rx_sw_desc *d)
{
  #line 355 
  if (q->use_pages != 0U && d->__anonCompField_rx_sw_desc_192.pg_chunk.page != (struct page *)0) {
    #line 356 
    (*(d->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt)) --;
    #line 357 
    if (*(d->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt) == 0UL) 
                                                                    #line 358 
                                                                    pci_unmap_page(pdev,d->__anonCompField_rx_sw_desc_192.pg_chunk.mapping,(unsigned long)q->alloc_size,2);
    #line 362 
    put_page(d->__anonCompField_rx_sw_desc_192.pg_chunk.page);
    #line 363 
    d->__anonCompField_rx_sw_desc_192.pg_chunk.page = (struct page *)0;
  }
  else {
    #line 365 
    pci_unmap_single(pdev,d->dma_addr,(unsigned long)q->buf_size,2);
    #line 367 
    kfree_skb(d->__anonCompField_rx_sw_desc_192.skb);
    #line 368 
    d->__anonCompField_rx_sw_desc_192.skb = (struct sk_buff *)0;
  }
  #line 370 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void free_rx_bufs(struct pci_dev *pdev, struct sge_fl *q)
{
  #line 382 
  unsigned int cidx = q->cidx;
  #line 384 
  while (1) {
    #line 384 
    unsigned int tmp;
    #line 384 
    tmp = q->credits;
    #line 384 
    (q->credits) --;
    #line 384 
    ;
    #line 384 
    if (! (tmp != 0U)) 
                       #line 384 
                       break;
    {
      #line 385 
      struct rx_sw_desc *d = q->sdesc + (unsigned long)cidx;
      #line 388 
      clear_rx_desc(pdev,q,d);
      #line 389 
      cidx ++;
      #line 389 
      ;
      #line 389 
      if (cidx == q->size) 
                           #line 390 
                           cidx = 0U;
    }
  }
  #line 393 
  if (q->pg_chunk.page != (struct page *)0) {
    #line 394 
    __free_pages(q->pg_chunk.page,q->order);
    #line 395 
    q->pg_chunk.page = (struct page *)0;
  }
  #line 397 
  return;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int add_one_rx_buf(void *va, unsigned int len, struct rx_desc *d, struct rx_sw_desc *sd, unsigned int gen, struct pci_dev *pdev)
{
  #line 415 
  dma_addr_t mapping;
  #line 417 
  mapping = pci_map_single(pdev,va,(unsigned long)len,2);
  #line 418 
  if ((long)(pci_dma_mapping_error(pdev,mapping) != 0) != 0L) 
                                                              #line 419 
                                                              return -12;
  #line 421 
  sd->dma_addr = mapping;
  #line 423 
  d->addr_lo = __builtin_bswap32((unsigned int)mapping);
  #line 424 
  d->addr_hi = __builtin_bswap32((unsigned int)(mapping >> 32));
  #line 425 
  ldv_inline_asm();
  #line 426 
  d->len_gen = __builtin_bswap32(gen << 31);
  #line 427 
  d->gen2 = __builtin_bswap32(gen);
  #line 428 
  return 0;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int add_one_rx_chunk(dma_addr_t mapping, struct rx_desc *d, unsigned int gen)
{
  #line 434 
  d->addr_lo = __builtin_bswap32((unsigned int)mapping);
  #line 435 
  d->addr_hi = __builtin_bswap32((unsigned int)(mapping >> 32));
  #line 436 
  ldv_inline_asm();
  #line 437 
  d->len_gen = __builtin_bswap32(gen << 31);
  #line 438 
  d->gen2 = __builtin_bswap32(gen);
  #line 439 
  return 0;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int alloc_pg_chunk(struct adapter *adapter, struct sge_fl *q, struct rx_sw_desc *sd, gfp_t gfp, unsigned int order)
{
  #line 446 
  if (q->pg_chunk.page == (struct page *)0) {
    #line 447 
    dma_addr_t mapping;
    #line 449 
    q->pg_chunk.page = alloc_pages(gfp,order);
    #line 450 
    if ((long)(q->pg_chunk.page == (struct page *)0) != 0L) 
                                                            #line 451 
                                                            return -12;
    #line 452 
    q->pg_chunk.va = lowmem_page_address(q->pg_chunk.page);
    #line 453 
    q->pg_chunk.p_cnt = (unsigned long *)(q->pg_chunk.va + ((4096UL << order) + 18446744073709551552U));
    #line 455 
    q->pg_chunk.offset = 0U;
    #line 456 
    mapping = pci_map_page(adapter->pdev,q->pg_chunk.page,0UL,(unsigned long)q->alloc_size,2);
    #line 458 
    if ((long)(pci_dma_mapping_error(adapter->pdev,mapping) != 0) != 0L) {
      #line 459 
      __free_pages(q->pg_chunk.page,order);
      #line 460 
      q->pg_chunk.page = (struct page *)0;
      #line 461 
      return -5;
    }
    #line 463 
    q->pg_chunk.mapping = mapping;
  }
  #line 465 
  sd->__anonCompField_rx_sw_desc_192.pg_chunk = q->pg_chunk;
  #line 467 
  __builtin_prefetch((void const *)((void *)sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt));
  #line 469 
  q->pg_chunk.offset += q->buf_size;
  #line 470 
  if ((unsigned long)q->pg_chunk.offset == 4096UL << order) 
                                                            #line 471 
                                                            q->pg_chunk.page = (struct page *)0;
  else {
    #line 473 
    q->pg_chunk.va += (unsigned long)q->buf_size;
    #line 474 
    get_page(q->pg_chunk.page);
  }
  #line 477 
  if (sd->__anonCompField_rx_sw_desc_192.pg_chunk.offset == 0U) 
                                                                #line 478 
                                                                *(sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt) = 1UL; else 
                                                                    #line 480 
                                                                    (*(sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt)) ++;
  #line 482 
  return 0;
}

#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void ring_fl_db(struct adapter *adap, struct sge_fl *q)
{
  #line 487 
  if (q->pend_cred >= q->credits / 4U) {
    #line 488 
    q->pend_cred = 0U;
    #line 489 
    ldv_inline_asm();
    #line 490 
    t3_write_reg(adap,4U,q->cntxt_id);
  }
  #line 492 
  return;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int refill_fl(struct adapter *adap, struct sge_fl *q, int n, gfp_t gfp)
{
  #line 507 
  struct rx_sw_desc *sd = q->sdesc + (unsigned long)q->pidx;
  #line 508 
  struct rx_desc *d = q->desc + (unsigned long)q->pidx;
  #line 509 
  unsigned int count = 0U;
  #line 511 
  while (1) {
    #line 511 
    int tmp_1;
    #line 511 
    tmp_1 = n;
    #line 511 
    n --;
    #line 511 
    ;
    #line 511 
    if (! (tmp_1 != 0)) 
                        #line 511 
                        break;
    {
      #line 512 
      dma_addr_t mapping;
      #line 513 
      int err;
      #line 515 
      if (q->use_pages != 0U) {
        #line 516 
        if ((long)(alloc_pg_chunk(adap,q,sd,gfp,q->order) != 0) != 0L) {
          #line 518 
          nomem: 
                 #line 518 
          ;
          #line 518 
          (q->alloc_failed) ++;
          #line 519 
          break;
        }
        #line 521 
        mapping = sd->__anonCompField_rx_sw_desc_192.pg_chunk.mapping + (unsigned long long)sd->__anonCompField_rx_sw_desc_192.pg_chunk.offset;
        #line 522 
        sd->dma_addr = mapping;
        #line 524 
        add_one_rx_chunk(mapping,d,q->gen);
        #line 525 
        pci_dma_sync_single_for_device(adap->pdev,mapping,(unsigned long)(q->buf_size + 4294967232U),2);
      }
      else {
        #line 529 
        void *buf_start;
        #line 531 
        struct sk_buff *skb = alloc_skb(q->buf_size,gfp);
        #line 532 
        if (skb == (struct sk_buff *)0) 
                                        #line 533 
                                        goto nomem;
        #line 535 
        sd->__anonCompField_rx_sw_desc_192.skb = skb;
        #line 536 
        buf_start = (void *)skb->data;
        #line 537 
        err = add_one_rx_buf(buf_start,q->buf_size,d,sd,q->gen,adap->pdev);
        #line 539 
        if ((long)(err != 0) != 0L) {
          #line 540 
          clear_rx_desc(adap->pdev,q,sd);
          #line 541 
          break;
        }
      }
      #line 545 
      d ++;
      #line 546 
      sd ++;
      #line 547 
      (q->pidx) ++;
      #line 547 
      ;
      #line 547 
      if (q->pidx == q->size) {
        #line 548 
        q->pidx = 0U;
        #line 549 
        q->gen ^= 1U;
        #line 550 
        sd = q->sdesc;
        #line 551 
        d = q->desc;
      }
      #line 553 
      count ++;
    }
  }
  #line 556 
  q->credits += count;
  #line 557 
  q->pend_cred += count;
  #line 558 
  ring_fl_db(adap,q);
  #line 560 
  return (int)count;
}

#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void __refill_fl(struct adapter *adap, struct sge_fl *fl)
{
  #line 565 
  unsigned int __UNIQUE_ID___x536;
  #line 565 
  unsigned int tmp;
  {
    #line 565 
    __UNIQUE_ID___x536 = 16U;
    #line 565 
    unsigned int __UNIQUE_ID___y537 = fl->size - fl->credits;
    #line 565 
    if (__UNIQUE_ID___x536 < __UNIQUE_ID___y537) 
                                                 #line 565 
                                                 tmp = __UNIQUE_ID___x536; else 
                                                                    #line 565 
                                                                    tmp = __UNIQUE_ID___y537;
    }
  #line 565 
  ;
  #line 565 
  ;
  #line 565 
  refill_fl(adap,fl,(int)tmp,264736U);
  #line 567 
  return;
}

#line 578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void recycle_rx_buf(struct adapter *adap, struct sge_fl *q, unsigned int idx)
{
  #line 581 
  struct rx_desc *from = q->desc + (unsigned long)idx;
  #line 582 
  struct rx_desc *to = q->desc + (unsigned long)q->pidx;
  #line 584 
  *(q->sdesc + (unsigned long)q->pidx) = *(q->sdesc + (unsigned long)idx);
  #line 585 
  to->addr_lo = from->addr_lo;
  #line 586 
  to->addr_hi = from->addr_hi;
  #line 587 
  ldv_inline_asm();
  #line 588 
  to->len_gen = __builtin_bswap32(q->gen << 31);
  #line 589 
  to->gen2 = __builtin_bswap32(q->gen);
  #line 591 
  (q->pidx) ++;
  #line 591 
  ;
  #line 591 
  if (q->pidx == q->size) {
    #line 592 
    q->pidx = 0U;
    #line 593 
    q->gen ^= 1U;
  }
  #line 596 
  (q->credits) ++;
  #line 597 
  (q->pend_cred) ++;
  #line 598 
  ring_fl_db(adap,q);
  #line 599 
  return;
}

#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void *alloc_ring(struct pci_dev *pdev, size_t nelem, size_t elem_size, size_t sw_size, dma_addr_t *phys, void *metadata)
{
  #line 621 
  size_t len = nelem * elem_size;
  #line 622 
  void *s = (void *)0;
  #line 623 
  void *p = dma_alloc_coherent(& pdev->dev,len,phys,3264U);
  #line 625 
  if (p == (void *)0) 
                      #line 626 
                      return (void *)0;
  #line 627 
  if (sw_size != 0UL && metadata != (void *)0) {
    #line 628 
    s = kcalloc(nelem,sw_size,3264U);
    #line 630 
    if (s == (void *)0) {
      #line 631 
      dma_free_coherent(& pdev->dev,len,p,*phys);
      #line 632 
      return (void *)0;
    }
    #line 634 
    *((void **)metadata) = s;
  }
  #line 636 
  return p;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void t3_reset_qset(struct sge_qset *q)
{
  #line 649 
  if (q->adap != (struct adapter *)0 && ((q->adap)->flags & 32UL) == 0UL) {
    #line 651 
    memset((void *)q,0,2240UL);
    #line 652 
    return;
  }
  #line 655 
  q->adap = (struct adapter *)0;
  #line 656 
  memset((void *)(& q->rspq),0,328UL);
  #line 657 
  memset((void *)(& q->fl),0,272UL);
  #line 658 
  memset((void *)(& q->txq),0,936UL);
  #line 659 
  q->txq_stopped = 0UL;
  #line 660 
  q->tx_reclaim_timer.function = (void (*)(struct timer_list *))0;
  #line 661 
  q->rx_reclaim_timer.function = (void (*)(struct timer_list *))0;
  #line 662 
  q->nomem = 0;
  #line 663 
  napi_free_frags(& q->napi);
  #line 664 
  return;
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void t3_free_qset(struct adapter *adapter, struct sge_qset *q)
{
  #line 678 
  int i;
  #line 679 
  struct pci_dev *pdev = adapter->pdev;
  #line 681 
  i = 0;
  #line 681 
  while (i <= 1) {
    #line 682 
    if (q->fl[i].desc != (struct rx_desc *)0) {
      #line 683 
      cif_spin_lock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
      #line 684 
      t3_sge_disable_fl(adapter,q->fl[i].cntxt_id);
      #line 685 
      cif_spin_unlock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
      #line 686 
      free_rx_bufs(pdev,& q->fl[i]);
      #line 687 
      kfree((void *)q->fl[i].sdesc);
      #line 688 
      dma_free_coherent(& pdev->dev,(unsigned long)q->fl[i].size * 16UL,(void *)q->fl[i].desc,q->fl[i].phys_addr);
    }
    #line 681 
    i ++;
  }
  #line 694 
  i = 0;
  #line 694 
  while (i <= 2) {
    #line 695 
    if (q->txq[i].desc != (struct tx_desc *)0) {
      #line 696 
      cif_spin_lock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
      #line 697 
      t3_sge_enable_ecntxt(adapter,q->txq[i].cntxt_id,0);
      #line 698 
      cif_spin_unlock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
      #line 699 
      if (q->txq[i].sdesc != (struct tx_sw_desc *)0) {
        #line 700 
        free_tx_desc(adapter,& q->txq[i],q->txq[i].in_use);
        #line 702 
        kfree((void *)q->txq[i].sdesc);
      }
      #line 704 
      dma_free_coherent(& pdev->dev,(unsigned long)q->txq[i].size * 128UL,(void *)q->txq[i].desc,q->txq[i].phys_addr);
      #line 708 
      __skb_queue_purge(& q->txq[i].sendq);
    }
    #line 694 
    i ++;
  }
  #line 711 
  if (q->rspq.desc != (struct rsp_desc *)0) {
    #line 712 
    cif_spin_lock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
    #line 713 
    t3_sge_disable_rspcntxt(adapter,q->rspq.cntxt_id);
    #line 714 
    cif_spin_unlock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
    #line 715 
    dma_free_coherent(& pdev->dev,(unsigned long)q->rspq.size * 64UL,(void *)q->rspq.desc,q->rspq.phys_addr);
  }
  #line 720 
  t3_reset_qset(q);
  #line 721 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void init_qset_cntxt(struct sge_qset *qs, unsigned int id)
{
  #line 732 
  qs->rspq.cntxt_id = id;
  #line 733 
  qs->fl[0].cntxt_id = id * 2U;
  #line 734 
  qs->fl[1].cntxt_id = id * 2U + 1U;
  #line 735 
  qs->txq[0].cntxt_id = id + 8U;
  #line 736 
  qs->txq[0].token = id + 65544U;
  #line 737 
  qs->txq[1].cntxt_id = id;
  #line 738 
  qs->txq[2].cntxt_id = id + 65528U;
  #line 739 
  qs->txq[2].token = id + 65536U;
  #line 740 
  return;
}

#line 749  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static unsigned int sgl_len(unsigned int n)
{
  #line 752 
  return (n * 3U) / 2U + (n & 1U);
}

#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static unsigned int flits_to_desc(unsigned int n)
{
  #line 764 
  if ((long)(n > 57U) != 0L) {
    #line 765 
    ldv_inline_asm();
    #line 766 
    ldv_inline_asm();
    #line 767 
    ldv_inline_asm();
    #line 764 
    ;
  }
  #line 765 
  return (unsigned int)flit_desc_map[n];
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static struct sk_buff *get_packet(struct adapter *adap, struct sge_fl *fl, unsigned int len, unsigned int drop_thres)
{
  #line 786 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 787 
  struct rx_sw_desc *sd = fl->sdesc + (unsigned long)fl->cidx;
  #line 789 
  __builtin_prefetch((void const *)((void *)(sd->__anonCompField_rx_sw_desc_192.skb)->data));
  #line 790 
  (fl->credits) --;
  #line 792 
  if (len <= 256U) {
    #line 793 
    skb = alloc_skb(len,2592U);
    #line 794 
    if ((long)(skb != (struct sk_buff *)0) != 0L) {
      #line 795 
      __skb_put(skb,len);
      #line 796 
      pci_dma_sync_single_for_cpu(adap->pdev,sd->dma_addr,(unsigned long)len,2);
      #line 799 
      memcpy((void *)skb->data,(void *)(sd->__anonCompField_rx_sw_desc_192.skb)->data,(unsigned long)len);
      #line 800 
      pci_dma_sync_single_for_device(adap->pdev,sd->dma_addr,(unsigned long)len,2);
    }
    else 
      #line 803 
      if (drop_thres == 0U) 
                            #line 804 
                            goto use_orig_buf;
    #line 805 
    recycle: 
             #line 805 
    ;
    #line 806 
    recycle_rx_buf(adap,fl,fl->cidx);
    #line 807 
    return skb;
  }
  #line 810 
  if ((long)(fl->credits < drop_thres) != 0L) {
    #line 811 
    unsigned int __UNIQUE_ID___x539;
    #line 811 
    unsigned int tmp;
    {
      #line 811 
      __UNIQUE_ID___x539 = 16U;
      #line 811 
      unsigned int __UNIQUE_ID___y540 = (fl->size - fl->credits) + 4294967295U;
      #line 811 
      if (__UNIQUE_ID___x539 < __UNIQUE_ID___y540) 
                                                   #line 811 
                                                   tmp = __UNIQUE_ID___x539; else 
                                                                    #line 811 
                                                                    tmp = __UNIQUE_ID___y540;
      }
    #line 810 
    ;
    #line 810 
    ;
    #line 810 
    if (refill_fl(adap,fl,(int)tmp,264736U) == 0) 
                                                  #line 813 
                                                  goto recycle;
  }
  #line 815 
  use_orig_buf: 
                #line 815 
  ;
  #line 816 
  pci_unmap_single(adap->pdev,sd->dma_addr,(unsigned long)fl->buf_size,2);
  #line 818 
  skb = sd->__anonCompField_rx_sw_desc_192.skb;
  #line 819 
  skb_put(skb,len);
  #line 820 
  __refill_fl(adap,fl);
  #line 821 
  return skb;
}

#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static struct sk_buff *get_packet_pg(struct adapter *adap, struct sge_fl *fl, struct sge_rspq *q, unsigned int len, unsigned int drop_thres)
{
  #line 846 
  struct sk_buff *newskb;
  #line 846 
  struct sk_buff *skb;
  #line 847 
  struct rx_sw_desc *sd = fl->sdesc + (unsigned long)fl->cidx;
  #line 849 
  dma_addr_t dma_addr = sd->dma_addr;
  #line 851 
  skb = q->pg_skb;
  #line 851 
  newskb = skb;
  #line 852 
  if (skb == (struct sk_buff *)0 && len <= 256U) {
    #line 853 
    newskb = alloc_skb(len,2592U);
    #line 854 
    if ((long)(newskb != (struct sk_buff *)0) != 0L) {
      #line 855 
      __skb_put(newskb,len);
      #line 856 
      pci_dma_sync_single_for_cpu(adap->pdev,dma_addr,(unsigned long)len,2);
      #line 858 
      memcpy((void *)newskb->data,sd->__anonCompField_rx_sw_desc_192.pg_chunk.va,(unsigned long)len);
      #line 859 
      pci_dma_sync_single_for_device(adap->pdev,dma_addr,(unsigned long)len,2);
    }
    else 
      #line 862 
      if (drop_thres == 0U) 
                            #line 863 
                            return (struct sk_buff *)0;
    #line 864 
    recycle: 
             #line 864 
    ;
    #line 865 
    (fl->credits) --;
    #line 866 
    recycle_rx_buf(adap,fl,fl->cidx);
    #line 867 
    (q->rx_recycle_buf) ++;
    #line 868 
    return newskb;
  }
  #line 871 
  if ((long)(q->rx_recycle_buf != 0U) != 0L || (((long)(skb == (struct sk_buff *)0) != 0L && (long)(fl->credits <= drop_thres) != 0L) != 0) != 0) 
    #line 872 
    goto recycle;
  #line 874 
  __builtin_prefetch((void const *)((void *)sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt));
  #line 876 
  if (skb == (struct sk_buff *)0) 
                                  #line 877 
                                  newskb = alloc_skb(128U,2592U);
  #line 879 
  if ((long)(newskb == (struct sk_buff *)0) != 0L) {
    #line 880 
    if (drop_thres == 0U) 
                          #line 881 
                          return (struct sk_buff *)0;
    #line 882 
    goto recycle;
  }
  #line 885 
  pci_dma_sync_single_for_cpu(adap->pdev,dma_addr,(unsigned long)len,2);
  #line 887 
  (*(sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt)) --;
  #line 888 
  if (*(sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt) == 0UL && sd->__anonCompField_rx_sw_desc_192.pg_chunk.page != fl->pg_chunk.page) 
    #line 889 
    pci_unmap_page(adap->pdev,sd->__anonCompField_rx_sw_desc_192.pg_chunk.mapping,(unsigned long)fl->alloc_size,2);
  #line 893 
  if (skb == (struct sk_buff *)0) {
    #line 894 
    __skb_put(newskb,128U);
    #line 895 
    memcpy((void *)newskb->data,sd->__anonCompField_rx_sw_desc_192.pg_chunk.va,128UL);
    #line 896 
    skb_fill_page_desc(newskb,0,sd->__anonCompField_rx_sw_desc_192.pg_chunk.page,(int)(sd->__anonCompField_rx_sw_desc_192.pg_chunk.offset + 128U),(int)(len + 4294967168U));
    #line 899 
    newskb->len = len;
    #line 900 
    newskb->data_len = len + 4294967168U;
    #line 901 
    newskb->truesize += newskb->data_len;
  }
  else {
    #line 903 
    ;
    #line 903 
    ;
    #line 903 
    ;
    #line 903 
    ;
    #line 903 
    skb_fill_page_desc(newskb,(int)((struct skb_shared_info *)skb_end_pointer(newskb))->nr_frags,sd->__anonCompField_rx_sw_desc_192.pg_chunk.page,(int)sd->__anonCompField_rx_sw_desc_192.pg_chunk.offset,(int)len);
    #line 906 
    newskb->len += len;
    #line 907 
    newskb->data_len += len;
    #line 908 
    newskb->truesize += len;
  }
  #line 911 
  (fl->credits) --;
  #line 916 
  return newskb;
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static struct sk_buff *get_imm_packet(struct rsp_desc *resp)
{
  #line 927 
  struct sk_buff *skb = alloc_skb(48U,2592U);
  #line 929 
  if (skb != (struct sk_buff *)0) {
    #line 930 
    __skb_put(skb,48U);
    #line 931 
    skb_copy_to_linear_data(skb,(void *)(& resp->imm_data),48U);
  }
  #line 933 
  return skb;
}

#line 943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static unsigned int calc_tx_descs(struct sk_buff *skb)
{
  #line 945 
  unsigned int flits;
  #line 947 
  if (skb->len <= 104U) 
                        #line 948 
                        return 1U;
  #line 950 
  ;
  #line 950 
  flits = sgl_len((unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1)) + 2U;
  #line 951 
  ;
  #line 951 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) 
    #line 952 
    flits ++;
  #line 953 
  return flits_to_desc(flits);
}

#line 963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int map_skb(struct pci_dev *pdev, struct sk_buff *skb, dma_addr_t *addr)
{
  #line 966 
  skb_frag_t *fp;
  #line 966 
  skb_frag_t *end;
  #line 967 
  struct skb_shared_info *si;
  #line 969 
  if (skb_headlen(skb) != 0U) {
    #line 970 
    ;
    #line 970 
    ;
    #line 970 
    *addr = pci_map_single(pdev,(void *)skb->data,(unsigned long)skb_headlen(skb),1);
    #line 972 
    if (pci_dma_mapping_error(pdev,*addr) != 0) 
                                                #line 973 
                                                goto out_err;
    #line 974 
    addr ++;
  }
  #line 977 
  si = (struct skb_shared_info *)skb_end_pointer(skb);
  #line 978 
  end = & si->frags[(int)si->nr_frags];
  #line 980 
  fp = (skb_frag_t *)(& si->frags);
  #line 980 
  while (fp < end) {
    {
      #line 981 
      ;
      #line 981 
      ;
      #line 981 
      *addr = skb_frag_dma_map(& pdev->dev,fp,0UL,(unsigned long)skb_frag_size(fp),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 983 
      if (pci_dma_mapping_error(pdev,*addr) != 0) 
                                                  #line 984 
                                                  goto unwind;
      #line 985 
      addr ++;
    }
    #line 980 
    fp ++;
  }
  #line 987 
  return 0;
  #line 989 
  unwind: 
          #line 989 
  ;
  #line 990 
  while (1) {
    #line 990 
    skb_frag_t *tmp_6;
    #line 991 
    unsigned int tmp_5;
    #line 990 
    tmp_6 = fp;
    #line 990 
    fp --;
    #line 990 
    ;
    #line 990 
    if (! (tmp_6 > (skb_frag_t *)(& si->frags))) 
                                                 #line 990 
                                                 break;
    #line 991 
    tmp_5 = skb_frag_size(fp);
    #line 991 
    addr --;
    #line 991 
    ;
    #line 991 
    ;
    #line 991 
    dma_unmap_page_attrs(& pdev->dev,*addr,(unsigned long)tmp_5,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  #line 994 
  ;
  #line 994 
  ;
  #line 994 
  pci_unmap_single(pdev,*(addr + 18446744073709551615U),(unsigned long)skb_headlen(skb),1);
  #line 995 
  out_err: 
           #line 995 
  ;
  #line 996 
  return -12;
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static unsigned int write_sgl(struct sk_buff *skb, struct sg_ent *sgp, unsigned char *start, unsigned int len, dma_addr_t *addr)
{
  #line 1015 
  unsigned int i;
  #line 1015 
  unsigned int nfrags;
  #line 1015 
  unsigned int j = 0U;
  #line 1015 
  unsigned int k = 0U;
  #line 1017 
  if (len != 0U) {
    #line 1019 
    unsigned int tmp;
    #line 1019 
    unsigned int tmp_0;
    #line 1018 
    sgp->len[0] = __builtin_bswap32(len);
    #line 1019 
    tmp = j;
    #line 1019 
    j ++;
    #line 1019 
    tmp_0 = k;
    #line 1019 
    k ++;
    #line 1019 
    ;
    #line 1019 
    sgp->addr[tmp] = (unsigned long long)__builtin_bswap64((unsigned long)*(addr + (unsigned long)tmp_0));
  }
  #line 1022 
  nfrags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1023 
  i = 0U;
  #line 1023 
  while (i < nfrags) {
    {
      #line 1027 
      unsigned int tmp_5;
      #line 1024 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 1026 
      sgp->len[j] = __builtin_bswap32(skb_frag_size(frag));
      #line 1027 
      tmp_5 = k;
      #line 1027 
      k ++;
      #line 1027 
      ;
      #line 1027 
      sgp->addr[j] = (unsigned long long)__builtin_bswap64((unsigned long)*(addr + (unsigned long)tmp_5));
      #line 1028 
      j ^= 1U;
      #line 1029 
      if (j == 0U) 
                   #line 1030 
                   sgp ++;
    }
    #line 1023 
    i ++;
  }
  #line 1032 
  if (j != 0U) 
               #line 1033 
               sgp->len[j] = 0U;
  #line 1034 
  return (((unsigned int)(len != 0U) + nfrags) * 3U) / 2U + j;
}

#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void check_ring_tx_db(struct adapter *adap, struct sge_txq *q)
{
  #line 1051 
  ldv_inline_asm();
  #line 1060 
  t3_write_reg(adap,4U,q->cntxt_id | 2147483648U);
  #line 1062 
  return;
}

#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void wr_gen2(struct tx_desc *d, unsigned int gen)
{
  #line 1068 
  d->flit[15U] = (__be64)__builtin_bswap64((unsigned long)gen);
  #line 1069 
  return;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void write_wr_hdr_sgl(unsigned int ndesc, struct sk_buff *skb, struct tx_desc *d, unsigned int pidx, struct sge_txq *q, struct sg_ent *sgl, unsigned int flits, unsigned int sgl_flits, unsigned int gen, __be32 wr_hi, __be32 wr_lo)
{
  #line 1099 
  struct work_request_hdr *wrp = (struct work_request_hdr *)d;
  #line 1100 
  struct tx_sw_desc *sd = q->sdesc + (unsigned long)pidx;
  #line 1102 
  sd->skb = skb;
  #line 1103 
  if (need_skb_unmap() != 0) {
    #line 1104 
    sd->fragidx = (unsigned char)0U;
    #line 1105 
    sd->addr_idx = (unsigned char)0U;
    #line 1106 
    sd->sflit = (signed char)flits;
  }
  #line 1109 
  if ((long)(ndesc == 1U) != 0L) {
    #line 1110 
    sd->eop = (unsigned char)1U;
    #line 1111 
    wrp->wr_hi = __builtin_bswap32((flits << 8) | 13631488U) | wr_hi;
    #line 1113 
    ldv_inline_asm();
    #line 1114 
    wrp->wr_lo = __builtin_bswap32((flits + sgl_flits) | (gen << 31)) | wr_lo;
    #line 1116 
    wr_gen2(d,gen);
  }
  else {
    #line 1118 
    unsigned int ogen = gen;
    #line 1119 
    u64 *fp = (u64 *)sgl;
    #line 1120 
    struct work_request_hdr *wp = wrp;
    #line 1122 
    wrp->wr_hi = __builtin_bswap32((flits << 8) | 9437184U) | wr_hi;
    #line 1125 
    while (sgl_flits != 0U) {
      #line 1151 
      unsigned int __UNIQUE_ID___x541;
      #line 1151 
      unsigned int tmp_3;
      #line 1126 
      unsigned int avail = 15U - flits;
      #line 1128 
      if (avail > sgl_flits) 
                             #line 1129 
                             avail = sgl_flits;
      #line 1130 
      memcpy((void *)(& d->flit[flits]),(void *)fp,(unsigned long)avail * 8UL);
      #line 1131 
      sgl_flits -= avail;
      #line 1132 
      ndesc --;
      #line 1133 
      if (sgl_flits == 0U) 
                           #line 1134 
                           break;
      #line 1136 
      fp += (unsigned long)avail;
      #line 1137 
      d ++;
      #line 1138 
      sd->eop = (unsigned char)0U;
      #line 1139 
      sd ++;
      #line 1140 
      pidx ++;
      #line 1140 
      ;
      #line 1140 
      if (pidx == q->size) {
        #line 1141 
        pidx = 0U;
        #line 1142 
        gen ^= 1U;
        #line 1143 
        d = q->desc;
        #line 1144 
        sd = q->sdesc;
      }
      #line 1147 
      sd->skb = skb;
      #line 1148 
      wrp = (struct work_request_hdr *)d;
      #line 1149 
      wrp->wr_hi = wr_hi | 69632U;
      {
        #line 1151 
        __UNIQUE_ID___x541 = 15U;
        #line 1151 
        unsigned int __UNIQUE_ID___y542 = sgl_flits + 1U;
        #line 1151 
        if (__UNIQUE_ID___x541 < __UNIQUE_ID___y542) 
                                                     #line 1151 
                                                     tmp_3 = __UNIQUE_ID___x541; else 
                                                                    #line 1151 
                                                                    tmp_3 = __UNIQUE_ID___y542;
        }
      #line 1151 
      ;
      #line 1151 
      wrp->wr_lo = __builtin_bswap32(tmp_3 | (gen << 31)) | wr_lo;
      #line 1154 
      wr_gen2(d,gen);
      #line 1155 
      flits = 1U;
    }
    #line 1157 
    sd->eop = (unsigned char)1U;
    #line 1158 
    wrp->wr_hi |= 16384U;
    #line 1159 
    ldv_inline_asm();
    #line 1160 
    wp->wr_lo = __builtin_bswap32((ogen << 31) | 15U) | wr_lo;
    #line 1161 
    wr_gen2((struct tx_desc *)wp,ogen);
    {
      #line 1162 
      int __ret_warn_on = ndesc != 0U;
      #line 1162 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 1163 
        ldv_inline_asm();
        #line 1164 
        ldv_inline_asm();
      }
      #line 1162 
      long tmp_7 = (long)(__ret_warn_on != 0);
    }
  }
  #line 1165 
  return;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void write_tx_pkt_wr(struct adapter *adap, struct sk_buff *skb, struct port_info *pi, unsigned int pidx, unsigned int gen, struct sge_txq *q, unsigned int ndesc, unsigned int compl, dma_addr_t *addr)
{
  #line 1185 
  unsigned int flits;
  #line 1185 
  unsigned int sgl_flits;
  #line 1185 
  unsigned int cntrl;
  #line 1185 
  unsigned int tso_info;
  #line 1186 
  struct sg_ent *sgp;
  #line 1186 
  struct sg_ent sgl[9U];
  #line 1187 
  struct tx_desc *d = q->desc + (unsigned long)pidx;
  #line 1188 
  struct cpl_tx_pkt *cpl = (struct cpl_tx_pkt *)d;
  #line 1190 
  cpl->len = __builtin_bswap32(skb->len);
  #line 1191 
  cntrl = (unsigned int)((int)pi->port_id << 16);
  #line 1193 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 1194 
                                             cntrl = ((unsigned int)skb->vlan_tci | cntrl) | 4194304U;
  #line 1196 
  tso_info = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
  #line 1197 
  if (tso_info != 0U) {
    #line 1198 
    int eth_type;
    #line 1199 
    struct cpl_tx_pkt_lso *hdr = (struct cpl_tx_pkt_lso *)cpl;
    #line 1201 
    d->flit[2] = 0ULL;
    #line 1202 
    cntrl |= 369098752U;
    #line 1203 
    hdr->cntrl = __builtin_bswap32(cntrl);
    #line 1204 
    eth_type = skb_network_offset(skb) != 14;
    #line 1208 
    tso_info = (unsigned int)(((eth_type << 14) | ((int)ip_hdr(skb)->ihl << 20)) | ((int)tcp_hdr(skb)->doff << 16)) | tso_info;
    #line 1209 
    hdr->lso_info = __builtin_bswap32(tso_info);
    #line 1210 
    flits = 3U;
  }
  else {
    #line 1214 
    unsigned int tmp_3;
    #line 1212 
    cntrl |= 234881024U;
    #line 1213 
    cntrl |= 1048576U;
    #line 1214 
    if ((unsigned int)skb->ip_summed != 3U) 
                                            #line 1214 
                                            tmp_3 = 2097152U; else 
                                                                   #line 1214 
                                                                   tmp_3 = 0U;
    #line 1214 
    cntrl = tmp_3 | cntrl;
    #line 1215 
    cpl->cntrl = __builtin_bswap32(cntrl);
    #line 1217 
    if (skb->len <= 104U) {
      #line 1218 
      (q->sdesc + (unsigned long)pidx)->skb = (struct sk_buff *)0;
      #line 1219 
      if (skb->data_len == 0U) 
                               #line 1220 
                               skb_copy_from_linear_data(skb,(void *)(& d->flit[2]),skb->len); else 
                                                                    #line 1223 
                                                                    skb_copy_bits(skb,0,(void *)(& d->flit[2]),(int)skb->len);
      #line 1225 
      flits = (skb->len + 7U) / 8U + 2U;
      #line 1226 
      cpl->wr.wr_hi = __builtin_bswap32((((skb->len << 16) & 458752U) | compl) | 62914560U);
      #line 1227 
      ldv_inline_asm();
      #line 1230 
      cpl->wr.wr_lo = __builtin_bswap32(((gen << 31) | flits) | (q->token << 8));
      #line 1232 
      wr_gen2(d,gen);
      #line 1233 
      dev_consume_skb_any(skb);
      #line 1234 
      return;
    }
    #line 1237 
    flits = 2U;
  }
  #line 1240 
  if (ndesc == 1U) 
                   #line 1240 
                   sgp = (struct sg_ent *)(& d->flit[flits]); else 
                                                                   #line 1240 
                                                                   sgp = (struct sg_ent *)(& sgl);
  #line 1241 
  ;
  #line 1241 
  ;
  #line 1241 
  ;
  #line 1241 
  ;
  #line 1241 
  sgl_flits = write_sgl(skb,sgp,skb->data,skb_headlen(skb),addr);
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  ;
  #line 1243 
  write_wr_hdr_sgl(ndesc,skb,d,pidx,q,(struct sg_ent *)(& sgl),flits,sgl_flits,gen,__builtin_bswap32(compl | 50331648U),__builtin_bswap32(q->token << 8));
  #line 1246 
  return;
}

#line 1248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void t3_stop_tx_queue(struct netdev_queue *txq, struct sge_qset *qs, struct sge_txq *q)
{
  #line 1251 
  netif_tx_stop_queue(txq);
  #line 1252 
  cif_set_bit(0L,& qs->txq_stopped);
  #line 1253 
  (q->stops) ++;
  #line 1254 
  return;
}

#line 1263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
netdev_tx_t t3_eth_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 1265 
  int qidx;
  #line 1266 
  unsigned int ndesc;
  #line 1266 
  unsigned int pidx;
  #line 1266 
  unsigned int credits;
  #line 1266 
  unsigned int gen;
  #line 1266 
  unsigned int compl;
  #line 1269 
  struct netdev_queue *txq;
  #line 1270 
  struct sge_qset *qs;
  #line 1271 
  struct sge_txq *q;
  #line 1272 
  dma_addr_t addr[18U];
  #line 1267 
  struct port_info *pi = netdev_priv(dev);
  #line 1268 
  struct adapter *adap = pi->adapter;
  #line 1278 
  if ((long)(skb->len <= 13U) != 0L) {
    #line 1279 
    dev_kfree_skb_any(skb);
    #line 1280 
    return NETDEV_TX_OK;
  }
  #line 1283 
  qidx = (int)skb_get_queue_mapping(skb);
  #line 1284 
  qs = pi->qs + (unsigned long)qidx;
  #line 1285 
  q = & qs->txq[0];
  #line 1286 
  txq = netdev_get_tx_queue(dev,(unsigned int)qidx);
  #line 1288 
  reclaim_completed_tx(adap,q,16U);
  #line 1290 
  credits = q->size - q->in_use;
  #line 1291 
  ndesc = calc_tx_descs(skb);
  #line 1293 
  if ((long)(credits < ndesc) != 0L) {
    #line 1294 
    t3_stop_tx_queue(txq,qs,q);
    #line 1295 
    _dev_err(& (adap->pdev)->dev,(char *)"%s: Tx ring %u full while queue awake!\n",(char *)(& dev->name),q->cntxt_id & 7U);
    #line 1298 
    return NETDEV_TX_BUSY;
  }
  #line 1302 
  if (skb->len > 104U) {
    #line 1303 
    if ((long)(map_skb(adap->pdev,skb,(dma_addr_t *)(& addr)) < 0) != 0L) {
      #line 1304 
      consume_skb(skb);
      #line 1305 
      return NETDEV_TX_OK;
    }
  }
  #line 1309 
  q->in_use += ndesc;
  #line 1310 
  if ((long)(credits - ndesc < q->stop_thres) != 0L) {
    #line 1311 
    t3_stop_tx_queue(txq,qs,q);
    #line 1313 
    if (should_restart_tx(q) != 0) {
      #line 1313 
      if ((int)test_and_set_bit(0L,& qs->txq_stopped) != 0) {
        #line 1315 
        (q->restarts) ++;
        #line 1316 
        netif_tx_start_queue(txq);
      }
    }
  }
  #line 1320 
  gen = q->gen;
  #line 1321 
  q->unacked += ndesc;
  #line 1322 
  compl = (q->unacked << 18) & 2097152U;
  #line 1323 
  q->unacked &= 7U;
  #line 1324 
  pidx = q->pidx;
  #line 1325 
  q->pidx += ndesc;
  #line 1326 
  if (q->pidx >= q->size) {
    #line 1327 
    q->pidx -= q->size;
    #line 1328 
    q->gen ^= 1U;
  }
  #line 1332 
  if ((unsigned int)skb->ip_summed == 3U) 
                                          #line 1333 
                                          (qs->port_stats[2]) ++;
  #line 1334 
  ;
  #line 1334 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) 
    #line 1335 
    (qs->port_stats[0]) ++;
  #line 1336 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 1337 
                                             (qs->port_stats[4]) ++;
  #line 1363 
  if ((long)(skb_shared(skb) == 0) != 0L) 
                                          #line 1364 
                                          skb_orphan(skb);
  #line 1366 
  write_tx_pkt_wr(adap,skb,pi,pidx,gen,q,ndesc,compl,(dma_addr_t *)(& addr));
  #line 1367 
  check_ring_tx_db(adap,q);
  #line 1368 
  return NETDEV_TX_OK;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void write_imm(struct tx_desc *d, struct sk_buff *skb, unsigned int len, unsigned int gen)
{
  #line 1386 
  struct work_request_hdr *from = (struct work_request_hdr *)skb->data;
  #line 1387 
  struct work_request_hdr *to = (struct work_request_hdr *)d;
  #line 1389 
  if ((long)(skb->data_len == 0U) != 0L) 
                                         #line 1390 
                                         memcpy((void *)(to + 1U),(void *)(from + 1U),(unsigned long)len + 18446744073709551608UL); else 
                                                                    #line 1392 
                                                                    skb_copy_bits(skb,8,(void *)(to + 1U),(int)(len + 4294967288U));
  #line 1394 
  to->wr_hi = from->wr_hi | __builtin_bswap32(((len << 16) & 458752U) | 12582912U);
  #line 1395 
  ldv_inline_asm();
  #line 1397 
  to->wr_lo = from->wr_lo | __builtin_bswap32((gen << 31) | (len + 7U) / 8U);
  #line 1399 
  wr_gen2(d,gen);
  #line 1400 
  kfree_skb(skb);
  #line 1401 
  return;
}

#line 1421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int check_desc_avail(struct adapter *adap, struct sge_txq *q, struct sk_buff *skb, unsigned int ndesc, unsigned int qid)
{
  #line 1425 
  if ((long)(skb_queue_empty(& q->sendq) == 0) != 0L) {
    #line 1426 
    addq_exit: 
               #line 1426 
    ;
    #line 1426 
    __skb_queue_tail_0(& q->sendq,skb);
    #line 1427 
    return 1;
  }
  #line 1429 
  if ((long)(q->size - q->in_use < ndesc) != 0L) {
    #line 1430 
    struct sge_qset *qs = txq_to_qset(q,(int)qid);
    #line 1432 
    cif_set_bit((long)qid,& qs->txq_stopped);
    #line 1435 
    if (should_restart_tx(q) != 0) {
      #line 1435 
      if ((int)test_and_set_bit((long)qid,& qs->txq_stopped) != 0) 
                                                                   #line 1437 
                                                                   return 2;
    }
    #line 1439 
    (q->stops) ++;
    #line 1440 
    goto addq_exit;
  }
  #line 1442 
  return 0;
}

#line 1453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void reclaim_completed_tx_imm(struct sge_txq *q)
{
  #line 1455 
  unsigned int reclaim = q->processed - q->cleaned;
  #line 1457 
  q->in_use -= reclaim;
  #line 1458 
  q->cleaned += reclaim;
  #line 1459 
  return;
}

#line 1461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int immediate(struct sk_buff *skb)
{
  #line 1463 
  return skb->len <= 120U;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int ctrl_xmit(struct adapter *adap, struct sge_txq *q, struct sk_buff *skb)
{
  #line 1479 
  int ret;
  #line 1480 
  struct work_request_hdr *wrp = (struct work_request_hdr *)skb->data;
  #line 1482 
  if ((long)(immediate(skb) == 0) != 0L) {
    {
      #line 1483 
      int __ret_warn_on = 1;
      #line 1483 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 1484 
        ldv_inline_asm();
        #line 1485 
        ldv_inline_asm();
      }
      #line 1483 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 1484 
    consume_skb(skb);
    #line 1485 
    return 0;
  }
  #line 1488 
  wrp->wr_hi |= 49152U;
  #line 1489 
  wrp->wr_lo = __builtin_bswap32(q->token << 8);
  #line 1491 
  cif_spin_lock_lock_of_sge_txq(& q->lock);
  #line 1492 
  again: 
         #line 1492 
  ;
  #line 1492 
  reclaim_completed_tx_imm(q);
  #line 1494 
  ret = check_desc_avail(adap,q,skb,1U,2U);
  #line 1495 
  if ((long)(ret != 0) != 0L) {
    #line 1496 
    if (ret == 1) {
      #line 1497 
      cif_spin_unlock_lock_of_sge_txq(& q->lock);
      #line 1498 
      return 2;
    }
    #line 1500 
    goto again;
  }
  #line 1503 
  write_imm(q->desc + (unsigned long)q->pidx,skb,skb->len,q->gen);
  #line 1505 
  (q->in_use) ++;
  #line 1506 
  (q->pidx) ++;
  #line 1506 
  ;
  #line 1506 
  if (q->pidx >= q->size) {
    #line 1507 
    q->pidx = 0U;
    #line 1508 
    q->gen ^= 1U;
  }
  #line 1510 
  cif_spin_unlock_lock_of_sge_txq(& q->lock);
  #line 1511 
  ldv_inline_asm();
  #line 1512 
  t3_write_reg(adap,4U,q->cntxt_id | 2147483648U);
  #line 1514 
  return 0;
}

#line 1523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void restart_ctrlq(unsigned long data)
{
  #line 1525 
  struct sk_buff *skb;
  #line 1526 
  struct sge_qset *qs = (struct sge_qset *)data;
  #line 1527 
  struct sge_txq *q = & qs->txq[2];
  #line 1529 
  cif_spin_lock_lock_of_sge_txq(& q->lock);
  #line 1530 
  again: 
         #line 1530 
  ;
  #line 1530 
  reclaim_completed_tx_imm(q);
  #line 1532 
  while (1) {
    #line 1532 
    if (q->in_use < q->size) {
      #line 1533 
      skb = __skb_dequeue(& q->sendq);
      #line 1532 
      if (! (skb != (struct sk_buff *)0)) 
                                          #line 1532 
                                          break;
    }
    else 
         #line 1532 
         break;
    #line 1535 
    write_imm(q->desc + (unsigned long)q->pidx,skb,skb->len,q->gen);
    #line 1537 
    (q->pidx) ++;
    #line 1537 
    ;
    #line 1537 
    if (q->pidx >= q->size) {
      #line 1538 
      q->pidx = 0U;
      #line 1539 
      q->gen ^= 1U;
    }
    #line 1541 
    (q->in_use) ++;
  }
  #line 1544 
  if (skb_queue_empty(& q->sendq) == 0) {
    #line 1545 
    cif_set_bit(2L,& qs->txq_stopped);
    #line 1548 
    if (should_restart_tx(q) != 0) {
      #line 1548 
      if ((int)test_and_set_bit(2L,& qs->txq_stopped) != 0) 
                                                            #line 1550 
                                                            goto again;
    }
    #line 1551 
    (q->stops) ++;
  }
  #line 1554 
  cif_spin_unlock_lock_of_sge_txq(& q->lock);
  #line 1555 
  ldv_inline_asm();
  #line 1556 
  t3_write_reg(qs->adap,4U,q->cntxt_id | 2147483648U);
  #line 1558 
  return;
}

#line 1563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
int t3_mgmt_tx(struct adapter *adap, struct sk_buff *skb)
{
  #line 1565 
  int ret;
  #line 1566 
  local_bh_disable();
  #line 1567 
  ret = ctrl_xmit(adap,& adap->sge.qs[0].txq[2],skb);
  #line 1568 
  local_bh_enable();
  #line 1570 
  return ret;
}

#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void deferred_unmap_destructor(struct sk_buff *skb)
{
  #line 1583 
  int i;
  #line 1584 
  dma_addr_t *p;
  #line 1585 
  struct skb_shared_info *si;
  #line 1586 
  struct deferred_unmap_info *dui;
  #line 1588 
  dui = (struct deferred_unmap_info *)skb->head;
  #line 1589 
  p = (dma_addr_t *)(& dui->addr);
  #line 1591 
  if (skb_tail_pointer(skb) != skb_transport_header(skb)) {
    #line 1592 
    unsigned char *tmp;
    #line 1592 
    unsigned char *tmp_0;
    #line 1592 
    dma_addr_t *tmp_1;
    #line 1592 
    tmp = skb_tail_pointer(skb);
    #line 1592 
    tmp_0 = skb_transport_header(skb);
    #line 1592 
    tmp_1 = p;
    #line 1592 
    p ++;
    #line 1592 
    ;
    #line 1592 
    ;
    #line 1592 
    pci_unmap_single(dui->pdev,*tmp_1,(unsigned long)(tmp - tmp_0),1);
  }
  #line 1595 
  si = (struct skb_shared_info *)skb_end_pointer(skb);
  #line 1596 
  i = 0;
  #line 1596 
  while ((int)si->nr_frags > i) {
    #line 1597 
    unsigned int tmp_5;
    #line 1597 
    dma_addr_t *tmp_6;
    #line 1597 
    tmp_5 = skb_frag_size(& si->frags[i]);
    #line 1597 
    tmp_6 = p;
    #line 1597 
    p ++;
    #line 1597 
    ;
    #line 1597 
    ;
    #line 1597 
    pci_unmap_page(dui->pdev,*tmp_6,(unsigned long)tmp_5,1);
    #line 1596 
    i ++;
  }
  #line 1598 
  return;
}

#line 1601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void setup_deferred_unmapping(struct sk_buff *skb, struct pci_dev *pdev, struct sg_ent *sgl, int sgl_flits)
{
  #line 1604 
  dma_addr_t *p;
  #line 1605 
  struct deferred_unmap_info *dui;
  #line 1607 
  dui = (struct deferred_unmap_info *)skb->head;
  #line 1608 
  dui->pdev = pdev;
  #line 1609 
  p = (dma_addr_t *)(& dui->addr);
  #line 1609 
  while (sgl_flits > 2) {
    {
      #line 1610 
      dma_addr_t *tmp;
      #line 1611 
      dma_addr_t *tmp_1;
      #line 1610 
      tmp = p;
      #line 1610 
      p ++;
      #line 1610 
      *tmp = (dma_addr_t)__builtin_bswap64((unsigned long)sgl->addr[0]);
      #line 1611 
      tmp_1 = p;
      #line 1611 
      p ++;
      #line 1611 
      *tmp_1 = (dma_addr_t)__builtin_bswap64((unsigned long)sgl->addr[1]);
    }
    #line 1609 
    sgl ++;
    #line 1609 
    sgl_flits += -3;
  }
  #line 1613 
  if (sgl_flits != 0) 
                      #line 1614 
                      *p = (dma_addr_t)__builtin_bswap64((unsigned long)sgl->addr[0]);
  #line 1615 
  return;
}

#line 1629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void write_ofld_wr(struct adapter *adap, struct sk_buff *skb, struct sge_txq *q, unsigned int pidx, unsigned int gen, unsigned int ndesc, dma_addr_t *addr)
{
  #line 1634 
  unsigned int sgl_flits;
  #line 1634 
  unsigned int flits;
  #line 1635 
  struct work_request_hdr *from;
  #line 1636 
  struct sg_ent *sgp;
  #line 1636 
  struct sg_ent sgl[9U];
  #line 1637 
  struct tx_desc *d = q->desc + (unsigned long)pidx;
  #line 1639 
  if (immediate(skb) != 0) {
    #line 1640 
    (q->sdesc + (unsigned long)pidx)->skb = (struct sk_buff *)0;
    #line 1641 
    write_imm(d,skb,skb->len,gen);
    #line 1642 
    return;
  }
  #line 1647 
  from = (struct work_request_hdr *)skb->data;
  #line 1648 
  ;
  #line 1648 
  ;
  #line 1648 
  memcpy((void *)(& d->flit[1]),(void *)(from + 1U),(unsigned long)skb_transport_offset(skb) + 18446744073709551608UL);
  #line 1651 
  flits = (unsigned int)(skb_transport_offset(skb) / 8);
  #line 1652 
  if (ndesc == 1U) 
                   #line 1652 
                   sgp = (struct sg_ent *)(& d->flit[flits]); else 
                                                                   #line 1652 
                                                                   sgp = (struct sg_ent *)(& sgl);
  #line 1653 
  ;
  #line 1653 
  ;
  #line 1653 
  ;
  #line 1653 
  sgl_flits = write_sgl(skb,sgp,skb_transport_header(skb),(unsigned int)(skb_tail_pointer(skb) - skb_transport_header(skb)),addr);
  #line 1656 
  if (need_skb_unmap() != 0) {
    #line 1657 
    setup_deferred_unmapping(skb,adap->pdev,sgp,(int)sgl_flits);
    #line 1658 
    skb->__anonCompField_sk_buff_91.__anonCompField___anonunion_492_90.destructor = & deferred_unmap_destructor;
  }
  #line 1661 
  write_wr_hdr_sgl(ndesc,skb,d,pidx,q,(struct sg_ent *)(& sgl),flits,sgl_flits,gen,from->wr_hi,from->wr_lo);
  #line 1663 
  return;
}

#line 1672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static unsigned int calc_tx_descs_ofld(struct sk_buff *skb)
{
  #line 1674 
  unsigned int flits;
  #line 1674 
  unsigned int cnt;
  #line 1676 
  if (skb->len <= 120U) 
                        #line 1677 
                        return 1U;
  #line 1679 
  flits = (unsigned int)(skb_transport_offset(skb) / 8);
  #line 1680 
  cnt = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1681 
  if (skb_tail_pointer(skb) != skb_transport_header(skb)) 
                                                          #line 1682 
                                                          cnt ++;
  #line 1683 
  ;
  #line 1683 
  return flits_to_desc(sgl_len(cnt) + flits);
}

#line 1694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int ofld_xmit(struct adapter *adap, struct sge_txq *q, struct sk_buff *skb)
{
  #line 1697 
  int ret;
  #line 1698 
  unsigned int pidx;
  #line 1698 
  unsigned int gen;
  #line 1698 
  unsigned int ndesc = calc_tx_descs_ofld(skb);
  #line 1700 
  cif_spin_lock_lock_of_sge_txq(& q->lock);
  #line 1701 
  again: 
         #line 1701 
  ;
  #line 1701 
  reclaim_completed_tx(adap,q,16U);
  #line 1703 
  ret = check_desc_avail(adap,q,skb,ndesc,1U);
  #line 1704 
  if ((long)(ret != 0) != 0L) {
    #line 1705 
    if (ret == 1) {
      #line 1706 
      skb->priority = ndesc;
      #line 1707 
      cif_spin_unlock_lock_of_sge_txq(& q->lock);
      #line 1708 
      return 2;
    }
    #line 1710 
    goto again;
  }
  #line 1713 
  if (immediate(skb) == 0) {
    #line 1713 
    if (map_skb(adap->pdev,skb,(dma_addr_t *)skb->head) != 0) {
      #line 1715 
      cif_spin_unlock_lock_of_sge_txq(& q->lock);
      #line 1716 
      return 0;
    }
  }
  #line 1719 
  gen = q->gen;
  #line 1720 
  q->in_use += ndesc;
  #line 1721 
  pidx = q->pidx;
  #line 1722 
  q->pidx += ndesc;
  #line 1723 
  if (q->pidx >= q->size) {
    #line 1724 
    q->pidx -= q->size;
    #line 1725 
    q->gen ^= 1U;
  }
  #line 1727 
  cif_spin_unlock_lock_of_sge_txq(& q->lock);
  #line 1729 
  write_ofld_wr(adap,skb,q,pidx,gen,ndesc,(dma_addr_t *)skb->head);
  #line 1730 
  check_ring_tx_db(adap,q);
  #line 1731 
  return 0;
}

#line 1740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void restart_offloadq(unsigned long data)
{
  #line 1742 
  struct sk_buff *skb;
  #line 1743 
  struct sge_qset *qs = (struct sge_qset *)data;
  #line 1744 
  struct sge_txq *q = & qs->txq[1];
  #line 1745 
  struct port_info *pi = netdev_priv(qs->netdev);
  #line 1746 
  struct adapter *adap = pi->adapter;
  #line 1747 
  unsigned int written = 0U;
  #line 1749 
  cif_spin_lock_lock_of_sge_txq(& q->lock);
  #line 1750 
  again: 
         #line 1750 
  ;
  #line 1750 
  reclaim_completed_tx(adap,q,16U);
  #line 1752 
  while (1) {
    #line 1752 
    skb = skb_peek(& q->sendq);
    #line 1752 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 1752 
                                        break;
    {
      #line 1753 
      unsigned int gen;
      #line 1753 
      unsigned int pidx;
      #line 1754 
      unsigned int ndesc = skb->priority;
      #line 1756 
      if ((long)(q->size - q->in_use < ndesc) != 0L) {
        #line 1757 
        cif_set_bit(1L,& qs->txq_stopped);
        #line 1760 
        if (should_restart_tx(q) != 0) {
          #line 1760 
          if ((int)test_and_set_bit(1L,& qs->txq_stopped) != 0) 
                                                                #line 1762 
                                                                goto again;
        }
        #line 1763 
        (q->stops) ++;
        #line 1764 
        break;
      }
      #line 1767 
      if (immediate(skb) == 0) {
        #line 1767 
        if (map_skb(adap->pdev,skb,(dma_addr_t *)skb->head) != 0) 
                                                                  #line 1769 
                                                                  break;
      }
      #line 1771 
      gen = q->gen;
      #line 1772 
      q->in_use += ndesc;
      #line 1773 
      pidx = q->pidx;
      #line 1774 
      q->pidx += ndesc;
      #line 1775 
      written += ndesc;
      #line 1776 
      if (q->pidx >= q->size) {
        #line 1777 
        q->pidx -= q->size;
        #line 1778 
        q->gen ^= 1U;
      }
      #line 1780 
      __skb_unlink_0(skb,& q->sendq);
      #line 1781 
      cif_spin_unlock_lock_of_sge_txq(& q->lock);
      #line 1783 
      write_ofld_wr(adap,skb,q,pidx,gen,ndesc,(dma_addr_t *)skb->head);
      #line 1785 
      cif_spin_lock_lock_of_sge_txq(& q->lock);
    }
  }
  #line 1787 
  cif_spin_unlock_lock_of_sge_txq(& q->lock);
  #line 1788 
  ldv_inline_asm();
  #line 1794 
  if ((long)(written != 0U) != 0L) 
                                   #line 1795 
                                   t3_write_reg(adap,4U,q->cntxt_id | 2147483648U);
  #line 1797 
  return;
}

#line 1806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int queue_set(struct sk_buff *skb)
{
  #line 1808 
  return (int)(skb->priority >> 1);
}

#line 1818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int is_ctrl_pkt(struct sk_buff *skb)
{
  #line 1820 
  return (int)skb->priority & 1;
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
int t3_offload_tx(struct t3cdev *tdev, struct sk_buff *skb)
{
  #line 1834 
  void *__mptr;
  #line 1834 
  __mptr = (void *)tdev;
  #line 1834 
  struct adapter *adap = ((struct adapter *)__mptr);
  #line 1835 
  struct sge_qset *qs = & adap->sge.qs[queue_set(skb)];
  #line 1837 
  if ((long)(is_ctrl_pkt(skb) != 0) != 0L) {
    #line 1838 
    return ctrl_xmit(adap,& qs->txq[2],skb);
  }
  #line 1840 
  return ofld_xmit(adap,& qs->txq[1],skb);
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void offload_enqueue(struct sge_rspq *q, struct sk_buff *skb)
{
  #line 1854 
  int was_empty = skb_queue_empty(& q->rx_queue);
  #line 1856 
  __skb_queue_tail_0(& q->rx_queue,skb);
  #line 1858 
  if (was_empty != 0) {
    #line 1859 
    struct sge_qset *qs = rspq_to_qset(q);
    #line 1861 
    napi_schedule(& qs->napi);
  }
  #line 1863 
  return;
}

#line 1874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void deliver_partial_bundle(struct t3cdev *tdev, struct sge_rspq *q, struct sk_buff **skbs, int n)
{
  #line 1878 
  if (n != 0) {
    #line 1879 
    (q->offload_bundles) ++;
    #line 1880 
    (*(tdev->recv))(tdev,skbs,n);
  }
  #line 1882 
  return;
}

#line 1895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int ofld_poll(struct napi_struct *napi, int budget)
{
  #line 1897 
  void *__mptr;
  #line 1897 
  __mptr = (void *)napi;
  #line 1897 
  struct sge_qset *qs = ((struct sge_qset *)(__mptr + 18446744073709551608U));
  #line 1898 
  struct sge_rspq *q = & qs->rspq;
  #line 1899 
  struct adapter *adapter = qs->adap;
  #line 1900 
  int work_done = 0;
  #line 1902 
  while (work_done < budget) {
    #line 1903 
    struct sk_buff *skb;
    #line 1903 
    struct sk_buff *tmp_0;
    #line 1903 
    struct sk_buff *skbs[8U];
    #line 1904 
    struct sk_buff_head queue;
    #line 1905 
    int ngathered;
    #line 1907 
    cif_spin_lock_irq_lock_of_sge_rspq(& q->lock);
    #line 1908 
    __skb_queue_head_init(& queue);
    #line 1909 
    skb_queue_splice_init_0(& q->rx_queue,& queue);
    #line 1910 
    if (skb_queue_empty(& queue) != 0) {
      #line 1911 
      napi_complete_done(napi,work_done);
      #line 1912 
      cif_spin_unlock_irq_lock_of_sge_rspq(& q->lock);
      #line 1913 
      return work_done;
    }
    #line 1915 
    cif_spin_unlock_irq_lock_of_sge_rspq(& q->lock);
    #line 1917 
    ngathered = 0;
    #line 1918 
    skb = queue.next;
    #line 1918 
    tmp_0 = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
    #line 1918 
    while ((struct sk_buff *)(& queue) != skb) {
      #line 1919 
      if (work_done >= budget) 
                               #line 1920 
                               break;
      #line 1921 
      work_done ++;
      #line 1923 
      __skb_unlink_0(skb,& queue);
      #line 1924 
      __builtin_prefetch((void const *)((void *)skb->data));
      #line 1925 
      skbs[ngathered] = skb;
      #line 1926 
      ngathered ++;
      #line 1926 
      if (ngathered == 8) {
        #line 1927 
        (q->offload_bundles) ++;
        #line 1928 
        (*(adapter->tdev.recv))(& adapter->tdev,(struct sk_buff **)(& skbs),ngathered);
        #line 1930 
        ngathered = 0;
      }
      #line 1918 
      skb = tmp_0;
      #line 1918 
      tmp_0 = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.next;
    }
    #line 1933 
    if (skb_queue_empty(& queue) == 0) {
      #line 1935 
      cif_spin_lock_irq_lock_of_sge_rspq(& q->lock);
      #line 1936 
      skb_queue_splice(& queue,& q->rx_queue);
      #line 1937 
      cif_spin_unlock_irq_lock_of_sge_rspq(& q->lock);
    }
    #line 1939 
    deliver_partial_bundle(& adapter->tdev,q,(struct sk_buff **)(& skbs),ngathered);
  }
  #line 1942 
  return work_done;
}

#line 1956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int rx_offload(struct t3cdev *tdev, struct sge_rspq *rq, struct sk_buff *skb, struct sk_buff **rx_gather, unsigned int gather_idx)
{
  #line 1960 
  skb_reset_mac_header(skb);
  #line 1961 
  skb_reset_network_header(skb);
  #line 1962 
  skb_reset_transport_header(skb);
  #line 1964 
  if (rq->polling != 0U) {
    #line 1965 
    unsigned int tmp;
    #line 1965 
    tmp = gather_idx;
    #line 1965 
    gather_idx ++;
    #line 1965 
    *(rx_gather + (unsigned long)tmp) = skb;
    #line 1966 
    if (gather_idx == 8U) {
      #line 1967 
      (*(tdev->recv))(tdev,rx_gather,8);
      #line 1968 
      gather_idx = 0U;
      #line 1969 
      (rq->offload_bundles) ++;
    }
  }
  else 
       #line 1972 
       offload_enqueue(rq,skb);
  #line 1974 
  return (int)gather_idx;
}

#line 1984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void restart_tx(struct sge_qset *qs)
{
  #line 1986 
  if ((int)test_bit(0L,& qs->txq_stopped) != 0) {
    #line 1986 
    if (should_restart_tx(& qs->txq[0]) != 0) {
      #line 1987 
      if ((int)test_and_set_bit(0L,& qs->txq_stopped) != 0) {
        #line 1989 
        (qs->txq[0].restarts) ++;
        #line 1990 
        if ((int)netif_running(qs->netdev) != 0) 
                                                 #line 1991 
                                                 netif_tx_wake_queue(qs->tx_q);
      }
    }
  }
  #line 1994 
  if ((int)test_bit(1L,& qs->txq_stopped) != 0) {
    #line 1994 
    if (should_restart_tx(& qs->txq[1]) != 0) {
      #line 1995 
      if ((int)test_and_set_bit(1L,& qs->txq_stopped) != 0) {
        #line 1997 
        (qs->txq[1].restarts) ++;
        #line 1998 
        cif_tasklet_schedule(& qs->txq[1].qresume_tsk);
      }
    }
  }
  #line 2000 
  if ((int)test_bit(2L,& qs->txq_stopped) != 0) {
    #line 2000 
    if (should_restart_tx(& qs->txq[2]) != 0) {
      #line 2001 
      if ((int)test_and_set_bit(2L,& qs->txq_stopped) != 0) {
        #line 2003 
        (qs->txq[2].restarts) ++;
        #line 2004 
        cif_tasklet_schedule(& qs->txq[2].qresume_tsk);
      }
    }
  }
  #line 2006 
  return;
}

#line 2016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void cxgb3_arp_process(struct port_info *pi, struct sk_buff *skb)
{
  #line 2019 
  struct arphdr *arp;
  #line 2020 
  unsigned char *arp_ptr;
  #line 2021 
  unsigned char *sha;
  #line 2022 
  __be32 sip;
  #line 2022 
  __be32 tip;
  #line 2018 
  struct net_device *dev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev;
  #line 2024 
  if (dev == (struct net_device *)0) 
                                     #line 2025 
                                     return;
  #line 2027 
  skb_reset_network_header(skb);
  #line 2028 
  arp = arp_hdr(skb);
  #line 2030 
  if ((unsigned int)arp->ar_op != 256U) 
                                        #line 2031 
                                        return;
  #line 2033 
  arp_ptr = (unsigned char *)(arp + 1U);
  #line 2034 
  sha = arp_ptr;
  #line 2035 
  arp_ptr += (unsigned long)dev->addr_len;
  #line 2036 
  memcpy((void *)(& sip),(void *)arp_ptr,4UL);
  #line 2037 
  arp_ptr += 4UL;
  #line 2038 
  arp_ptr += (unsigned long)dev->addr_len;
  #line 2039 
  memcpy((void *)(& tip),(void *)arp_ptr,4UL);
  #line 2041 
  if (pi->iscsi_ipv4addr != tip) 
                                 #line 2042 
                                 return;
  #line 2044 
  arp_send(2,2054,sip,dev,tip,sha,(unsigned char *)(& pi->iscsic.mac_addr),sha);
  #line 2046 
  return;
}

#line 2049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int is_arp(struct sk_buff *skb)
{
  #line 2051 
  return (unsigned int)skb->protocol == 1544U;
}

#line 2054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void cxgb3_process_iscsi_prov_pack(struct port_info *pi, struct sk_buff *skb)
{
  #line 2057 
  if (is_arp(skb) != 0) {
    #line 2058 
    cxgb3_arp_process(pi,skb);
    #line 2059 
    return;
  }
  #line 2062 
  if (pi->iscsic.recv != (int (*)(struct port_info *, struct sk_buff *))0) 
    #line 2063 
    (*(pi->iscsic.recv))(pi,skb);
  #line 2064 
  return;
}

#line 2078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void rx_eth(struct adapter *adap, struct sge_rspq *rq, struct sk_buff *skb, int pad, int lro)
{
  #line 2083 
  struct port_info *pi;
  #line 2081 
  struct cpl_rx_pkt *p = (struct cpl_rx_pkt *)(skb->data + (unsigned long)pad);
  #line 2082 
  struct sge_qset *qs = rspq_to_qset(rq);
  #line 2085 
  skb_pull(skb,(unsigned int)pad + 8U);
  #line 2086 
  skb->protocol = eth_type_trans(skb,adap->port[(int)p->iff]);
  #line 2087 
  pi = (struct port_info *)netdev_priv(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev);
  #line 2088 
  if (((((skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev)->features & 549755813888ULL) != 0ULL && (unsigned int)p->csum_valid != 0U) && (unsigned int)p->csum == 65535U) && (unsigned int)p->fragment == 0U) {
    #line 2090 
    (qs->port_stats[1]) ++;
    #line 2091 
    skb->ip_summed = (unsigned char)1U;
  }
  else 
       #line 2093 
       skb_checksum_none_assert(skb);
  #line 2094 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)((qs - & adap->sge.qs[(int)pi->first_qset]) / 2240L))));
  #line 2096 
  if ((unsigned int)p->vlan_valid != 0U) {
    #line 2097 
    (qs->port_stats[3]) ++;
    #line 2098 
    ;
    #line 2098 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)p->vlan))));
  }
  #line 2100 
  if (rq->polling != 0U) 
    #line 2101 
    if (lro != 0) 
                  #line 2102 
                  napi_gro_receive(& qs->napi,skb);
    else {
      #line 2104 
      if ((long)(pi->iscsic.flags != 0U) != 0L) 
                                                #line 2105 
                                                cxgb3_process_iscsi_prov_pack(pi,skb);
      #line 2106 
      netif_receive_skb(skb);
    }
  else 
       #line 2109 
       netif_rx(skb);
  #line 2110 
  return;
}

#line 2112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int is_eth_tcp(u32 rss)
{
  #line 2114 
  return ((__builtin_bswap32(rss) >> 22) & 3U) == 2U;
}

#line 2128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void lro_add_page(struct adapter *adap, struct sge_qset *qs, struct sge_fl *fl, int len, int complete)
{
  #line 2134 
  struct cpl_rx_pkt *cpl;
  #line 2135 
  skb_frag_t *rx_frag;
  #line 2136 
  int nr_frags;
  #line 2131 
  struct rx_sw_desc *sd = fl->sdesc + (unsigned long)fl->cidx;
  #line 2132 
  struct port_info *pi = netdev_priv(qs->netdev);
  #line 2133 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 2137 
  int offset = 0;
  #line 2139 
  if (qs->nomem == 0) {
    #line 2140 
    skb = napi_get_frags(& qs->napi);
    #line 2141 
    qs->nomem = skb == (struct sk_buff *)0;
  }
  #line 2144 
  (fl->credits) --;
  #line 2146 
  pci_dma_sync_single_for_cpu(adap->pdev,sd->dma_addr,(unsigned long)(fl->buf_size + 4294967232U),2);
  #line 2151 
  (*(sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt)) --;
  #line 2152 
  if (*(sd->__anonCompField_rx_sw_desc_192.pg_chunk.p_cnt) == 0UL && sd->__anonCompField_rx_sw_desc_192.pg_chunk.page != fl->pg_chunk.page) 
    #line 2153 
    pci_unmap_page(adap->pdev,sd->__anonCompField_rx_sw_desc_192.pg_chunk.mapping,(unsigned long)fl->alloc_size,2);
  #line 2158 
  if (skb == (struct sk_buff *)0) {
    #line 2159 
    put_page(sd->__anonCompField_rx_sw_desc_192.pg_chunk.page);
    #line 2160 
    if (complete != 0) 
                       #line 2161 
                       qs->nomem = 0;
    #line 2162 
    return;
  }
  #line 2165 
  rx_frag = (skb_frag_t *)(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags);
  #line 2166 
  nr_frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2168 
  if (nr_frags == 0) {
    #line 2169 
    offset = 10;
    #line 2170 
    qs->lro_va = (sd->__anonCompField_rx_sw_desc_192.pg_chunk.va + 2U);
    #line 2170 
    cpl = (struct cpl_rx_pkt *)(sd->__anonCompField_rx_sw_desc_192.pg_chunk.va + 2U);
    #line 2172 
    if ((((qs->netdev)->features & 549755813888ULL) != 0ULL && (unsigned int)cpl->csum_valid != 0U) && (unsigned int)cpl->csum == 65535U) {
      #line 2174 
      skb->ip_summed = (unsigned char)1U;
      #line 2175 
      (qs->port_stats[1]) ++;
    }
    else 
         #line 2177 
         skb->ip_summed = (unsigned char)0U;
  }
  else 
       #line 2179 
       cpl = (struct cpl_rx_pkt *)qs->lro_va;
  #line 2181 
  len -= offset;
  #line 2183 
  rx_frag += (unsigned long)nr_frags;
  #line 2184 
  __skb_frag_set_page(rx_frag,sd->__anonCompField_rx_sw_desc_192.pg_chunk.page);
  #line 2185 
  skb_frag_off_set(rx_frag,sd->__anonCompField_rx_sw_desc_192.pg_chunk.offset + (unsigned int)offset);
  #line 2186 
  skb_frag_size_set(rx_frag,(unsigned int)len);
  #line 2188 
  skb->len += (unsigned int)len;
  #line 2189 
  skb->data_len += (unsigned int)len;
  #line 2190 
  skb->truesize += (unsigned int)len;
  #line 2191 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (__u8)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1);
  #line 2193 
  if (complete == 0) 
                     #line 2194 
                     return;
  #line 2196 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)((qs - & adap->sge.qs[(int)pi->first_qset]) / 2240L))));
  #line 2198 
  if ((unsigned int)cpl->vlan_valid != 0U) {
    #line 2199 
    (qs->port_stats[3]) ++;
    #line 2200 
    ;
    #line 2200 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)cpl->vlan))));
  }
  #line 2202 
  napi_gro_frags(& qs->napi);
  #line 2203 
  return;
}

#line 2214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void handle_rsp_cntrl_info(struct sge_qset *qs, u32 flags)
{
  #line 2216 
  unsigned int credits;
  #line 2223 
  credits = (flags >> 16) & 127U;
  #line 2224 
  if (credits != 0U) 
                     #line 2225 
                     qs->txq[0].processed += credits;
  #line 2227 
  credits = (flags >> 8) & 127U;
  #line 2228 
  if (credits != 0U) 
                     #line 2229 
                     qs->txq[2].processed += credits;
  #line 2235 
  credits = flags & 127U;
  #line 2236 
  if (credits != 0U) 
                     #line 2237 
                     qs->txq[1].processed += credits;
  #line 2238 
  return;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void check_ring_db(struct adapter *adap, struct sge_qset *qs, unsigned int sleeping)
{
  #line 2253 
  if ((sleeping & 8388608U) != 0U) {
    #line 2254 
    struct sge_txq *txq = & qs->txq[0];
    #line 2256 
    if (txq->cleaned + txq->in_use != txq->processed) {
      #line 2257 
      if (! test_and_set_bit(2L,& txq->flags)) {
        #line 2258 
        cif_set_bit(1L,& txq->flags);
        #line 2259 
        t3_write_reg(adap,4U,txq->cntxt_id | 2147483648U);
      }
    }
  }
  #line 2264 
  if ((sleeping & 128U) != 0U) {
    #line 2265 
    struct sge_txq *txq_0 = & qs->txq[1];
    #line 2267 
    if (txq_0->cleaned + txq_0->in_use != txq_0->processed) {
      #line 2268 
      if (! test_and_set_bit(2L,& txq_0->flags)) {
        #line 2269 
        cif_set_bit(1L,& txq_0->flags);
        #line 2270 
        t3_write_reg(adap,4U,txq_0->cntxt_id | 2147483648U);
      }
    }
  }
  #line 2273 
  return;
}

#line 2284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int is_new_response(struct rsp_desc *r, struct sge_rspq *q)
{
  #line 2287 
  return ((unsigned int)r->intr_gen & 1U) == q->gen;
}

#line 2290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static void clear_rspq_bufstate(struct sge_rspq *q)
{
  #line 2292 
  q->pg_skb = (struct sk_buff *)0;
  #line 2293 
  q->rx_recycle_buf = 0U;
  #line 2294 
  return;
}

#line 2320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int process_responses(struct adapter *adap, struct sge_qset *qs, int budget)
{
  #line 2327 
  struct sk_buff *offload_skbs[8U];
  #line 2323 
  struct sge_rspq *q = & qs->rspq;
  #line 2324 
  struct rsp_desc *r = q->desc + (unsigned long)q->cidx;
  #line 2325 
  int budget_left = budget;
  #line 2326 
  unsigned int sleeping = 0U;
  #line 2328 
  int ngathered = 0;
  #line 2330 
  q->next_holdoff = q->holdoff_tmr;
  #line 2332 
  while (1) {
    #line 2332 
    if ((long)(budget_left != 0) != 0L) {
      #line 2332 
      if (! ((long)(is_new_response(r,q) != 0) != 0L)) 
                                                       #line 2332 
                                                       break;
    }
    else 
         #line 2332 
         break;
    {
      #line 2333 
      int packet_complete;
      #line 2333 
      int eth;
      #line 2336 
      u32 len;
      #line 2336 
      u32 flags;
      #line 2337 
      __be32 rss_hi;
      #line 2337 
      __be32 rss_lo;
      #line 2333 
      int ethpad = 2;
      #line 2334 
      int lro = ((qs->netdev)->features & 16384ULL) != 0ULL;
      #line 2335 
      struct sk_buff *skb = (struct sk_buff *)0;
      #line 2338 
      ldv_inline_asm();
      #line 2340 
      eth = (unsigned int)r->rss_hdr.opcode == 43U;
      #line 2341 
      rss_hi = *((__be32 *)r);
      #line 2342 
      rss_lo = r->rss_hdr.rss_hash_val;
      #line 2343 
      flags = __builtin_bswap32(r->flags);
      #line 2345 
      if ((long)((flags & 67108864U) != 0U) != 0L) {
        #line 2346 
        skb = alloc_skb(32U,2592U);
        #line 2347 
        if (skb == (struct sk_buff *)0) 
                                        #line 2348 
                                        goto no_mem;
        #line 2350 
        __skb_put_data(skb,(void *)r,32U);
        #line 2351 
        *(skb->data) = (unsigned char)128U;
        #line 2352 
        rss_hi = 128U;
        #line 2353 
        (q->async_notif) ++;
      }
      else 
        #line 2354 
        if ((flags & 536870912U) != 0U) {
          #line 2355 
          skb = get_imm_packet(r);
          #line 2356 
          if ((long)(skb == (struct sk_buff *)0) != 0L) {
            #line 2357 
            no_mem: 
                    #line 2357 
            ;
            #line 2358 
            q->next_holdoff = 2500U;
            #line 2359 
            (q->nomem) ++;
            #line 2361 
            budget_left --;
            #line 2362 
            break;
          }
          #line 2364 
          (q->imm_data) ++;
          #line 2365 
          ethpad = 0;
        }
        else {
          #line 2366 
          len = __builtin_bswap32(r->len_cq);
          #line 2366 
          if (len != 0U) {
            #line 2367 
            struct sge_fl *fl;
            #line 2369 
            int tmp_0;
            #line 2369 
            if (eth != 0) {
              #line 2369 
              if (is_eth_tcp(rss_hi) != 0) 
                                           #line 2369 
                                           tmp_0 = 1; else 
                                                           #line 2369 
                                                           tmp_0 = 0;
            }
            else 
                 #line 2369 
                 tmp_0 = 0;
            #line 2369 
            lro = tmp_0 & lro;
            #line 2371 
            if ((len & 2147483648U) != 0U) 
                                           #line 2371 
                                           fl = & qs->fl[1]; else 
                                                                  #line 2371 
                                                                  fl = & qs->fl[0];
            #line 2372 
            if (fl->use_pages != 0U) {
              #line 2388 
              unsigned int tmp_1;
              #line 2373 
              void *addr = (fl->sdesc + (unsigned long)fl->cidx)->__anonCompField_rx_sw_desc_192.pg_chunk.va;
              #line 2375 
              __builtin_prefetch((void const *)addr);
              #line 2377 
              __builtin_prefetch((void const *)(addr + 64U));
              #line 2379 
              __refill_fl(adap,fl);
              #line 2380 
              if (lro > 0) {
                #line 2381 
                lro_add_page(adap,qs,fl,(int)len & 2147483647,(int)flags & 16777216);
                #line 2384 
                goto next_fl;
              }
              #line 2388 
              if (eth != 0) 
                            #line 2388 
                            tmp_1 = 16U; else 
                                              #line 2388 
                                              tmp_1 = 0U;
              #line 2387 
              ;
              #line 2387 
              ;
              #line 2387 
              ;
              #line 2387 
              ;
              #line 2387 
              skb = get_packet_pg(adap,fl,q,len & 2147483647U,tmp_1);
              #line 2391 
              q->pg_skb = skb;
            }
            else {
              #line 2393 
              unsigned int tmp_2;
              #line 2393 
              if (eth != 0) 
                            #line 2393 
                            tmp_2 = 16U; else 
                                              #line 2393 
                                              tmp_2 = 0U;
              #line 2393 
              ;
              #line 2393 
              ;
              #line 2393 
              ;
              #line 2393 
              skb = get_packet(adap,fl,len & 2147483647U,tmp_2);
            }
            #line 2395 
            if ((long)(skb == (struct sk_buff *)0) != 0L) {
              #line 2396 
              if (eth == 0) 
                            #line 2397 
                            goto no_mem;
              #line 2398 
              (q->rx_drops) ++;
            }
            else 
              #line 2399 
              if ((long)((unsigned int)r->rss_hdr.opcode == 163U) != 0L) 
                #line 2400 
                __skb_pull(skb,2U);
            #line 2401 
            next_fl: 
                     #line 2401 
            ;
            #line 2402 
            (fl->cidx) ++;
            #line 2402 
            ;
            #line 2402 
            if (fl->cidx == fl->size) 
                                      #line 2403 
                                      fl->cidx = 0U;
          }
          else 
               #line 2405 
               (q->pure_rsps) ++;
        }
      #line 2407 
      if ((flags & 16744447U) != 0U) {
        #line 2408 
        sleeping = (flags & 8388736U) | sleeping;
        #line 2409 
        handle_rsp_cntrl_info(qs,flags);
      }
      #line 2412 
      r ++;
      #line 2413 
      (q->cidx) ++;
      #line 2413 
      ;
      #line 2413 
      if ((long)(q->cidx == q->size) != 0L) {
        #line 2414 
        q->cidx = 0U;
        #line 2415 
        q->gen ^= 1U;
        #line 2416 
        r = q->desc;
      }
      #line 2418 
      __builtin_prefetch((void const *)((void *)r));
      #line 2420 
      (q->credits) ++;
      #line 2420 
      ;
      #line 2420 
      if (q->credits >= q->size / 4U) {
        #line 2421 
        refill_rspq(adap,q,q->credits);
        #line 2422 
        q->credits = 0U;
      }
      #line 2425 
      packet_complete = (int)flags & 620756992;
      #line 2429 
      if (skb != (struct sk_buff *)0 && packet_complete != 0) {
        #line 2430 
        if (eth != 0) 
                      #line 2431 
                      rx_eth(adap,q,skb,ethpad,lro);
        else {
          #line 2433 
          (q->offload_pkts) ++;
          #line 2435 
          skb->__anonCompField_sk_buff_93.csum = rss_hi;
          #line 2436 
          skb->priority = rss_lo;
          #line 2437 
          ngathered = rx_offload(& adap->tdev,q,skb,(struct sk_buff **)(& offload_skbs),(unsigned int)ngathered);
        }
        #line 2442 
        if ((flags & 16777216U) != 0U) 
                                       #line 2443 
                                       clear_rspq_bufstate(q);
      }
      #line 2445 
      budget_left --;
    }
  }
  #line 2448 
  deliver_partial_bundle(& adap->tdev,q,(struct sk_buff **)(& offload_skbs),ngathered);
  #line 2450 
  if (sleeping != 0U) 
                      #line 2451 
                      check_ring_db(adap,qs,sleeping);
  #line 2452 
  ldv_inline_asm();
  #line 2454 
  if ((long)(qs->txq_stopped != 0UL) != 0L) 
                                            #line 2455 
                                            restart_tx(qs);
  #line 2457 
  budget -= budget_left;
  #line 2458 
  return budget;
}

#line 2461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int is_pure_response(struct rsp_desc *r)
{
  #line 2463 
  __be32 n = r->flags & 36U;
  #line 2465 
  return (r->len_cq | n) == 0U;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int napi_rx_handler(struct napi_struct *napi, int budget)
{
  #line 2477 
  void *__mptr;
  #line 2477 
  __mptr = (void *)napi;
  #line 2477 
  struct sge_qset *qs = ((struct sge_qset *)(__mptr + 18446744073709551608U));
  #line 2478 
  struct adapter *adap = qs->adap;
  #line 2479 
  int work_done = process_responses(adap,qs,budget);
  #line 2481 
  if ((long)(work_done < budget) != 0L) {
    #line 2482 
    napi_complete_done(napi,work_done);
    #line 2498 
    t3_write_reg(adap,8U,((qs->rspq.cntxt_id << 29) | (qs->rspq.next_holdoff << 16)) | qs->rspq.cidx);
  }
  #line 2502 
  return work_done;
}

#line 2508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int napi_is_scheduled(struct napi_struct *napi)
{
  #line 2510 
  return (int)test_bit(0L,& napi->state);
}

#line 2527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int process_pure_responses(struct adapter *adap, struct sge_qset *qs, struct rsp_desc *r)
{
  #line 2530 
  struct sge_rspq *q = & qs->rspq;
  #line 2531 
  unsigned int sleeping = 0U;
  #line 2533 
  while (1) {
    {
      #line 2534 
      u32 flags = __builtin_bswap32(r->flags);
      #line 2536 
      r ++;
      #line 2537 
      (q->cidx) ++;
      #line 2537 
      ;
      #line 2537 
      if ((long)(q->cidx == q->size) != 0L) {
        #line 2538 
        q->cidx = 0U;
        #line 2539 
        q->gen ^= 1U;
        #line 2540 
        r = q->desc;
      }
      #line 2542 
      __builtin_prefetch((void const *)((void *)r));
      #line 2544 
      if ((flags & 16744447U) != 0U) {
        #line 2545 
        sleeping = (flags & 8388736U) | sleeping;
        #line 2546 
        handle_rsp_cntrl_info(qs,flags);
      }
      #line 2549 
      (q->pure_rsps) ++;
      #line 2550 
      (q->credits) ++;
      #line 2550 
      ;
      #line 2550 
      if (q->credits >= q->size / 4U) {
        #line 2551 
        refill_rspq(adap,q,q->credits);
        #line 2552 
        q->credits = 0U;
      }
      #line 2554 
      if (is_new_response(r,q) == 0) 
                                     #line 2555 
                                     break;
      #line 2556 
      ldv_inline_asm();
    }
    #line 2557 
    if (! (is_pure_response(r) != 0)) 
                                      #line 2533 
                                      break;
  }
  #line 2559 
  if (sleeping != 0U) 
                      #line 2560 
                      check_ring_db(adap,qs,sleeping);
  #line 2561 
  ldv_inline_asm();
  #line 2563 
  if ((long)(qs->txq_stopped != 0UL) != 0L) 
                                            #line 2564 
                                            restart_tx(qs);
  #line 2566 
  return is_new_response(r,q);
}

#line 2584  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int handle_responses(struct adapter *adap, struct sge_rspq *q)
{
  #line 2586 
  struct sge_qset *qs = rspq_to_qset(q);
  #line 2587 
  struct rsp_desc *r = q->desc + (unsigned long)q->cidx;
  #line 2589 
  if (is_new_response(r,q) == 0) 
                                 #line 2590 
                                 return -1;
  #line 2591 
  ldv_inline_asm();
  #line 2592 
  if (is_pure_response(r) != 0) {
    #line 2592 
    if (process_pure_responses(adap,qs,r) == 0) {
      #line 2593 
      t3_write_reg(adap,8U,((q->cntxt_id << 29) | (q->holdoff_tmr << 16)) | q->cidx);
      #line 2595 
      return 0;
    }
  }
  #line 2597 
  napi_schedule(& qs->napi);
  #line 2598 
  return 1;
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3_sge_intr_msix(int irq, void *cookie)
{
  #line 2607 
  struct sge_qset *qs = (struct sge_qset *)cookie;
  #line 2608 
  struct adapter *adap = qs->adap;
  #line 2609 
  struct sge_rspq *q = & qs->rspq;
  #line 2611 
  cif_spin_lock_lock_of_sge_rspq(& q->lock);
  #line 2612 
  if (process_responses(adap,qs,-1) == 0) 
                                          #line 2613 
                                          (q->unhandled_irqs) ++;
  #line 2614 
  t3_write_reg(adap,8U,((q->cntxt_id << 29) | (q->next_holdoff << 16)) | q->cidx);
  #line 2616 
  cif_spin_unlock_lock_of_sge_rspq(& q->lock);
  #line 2617 
  return IRQ_HANDLED;
}

#line 2624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3_sge_intr_msix_napi(int irq, void *cookie)
{
  #line 2626 
  struct sge_qset *qs = (struct sge_qset *)cookie;
  #line 2627 
  struct sge_rspq *q = & qs->rspq;
  #line 2629 
  cif_spin_lock_lock_of_sge_rspq(& q->lock);
  #line 2631 
  if (handle_responses(qs->adap,q) < 0) 
                                        #line 2632 
                                        (q->unhandled_irqs) ++;
  #line 2633 
  cif_spin_unlock_lock_of_sge_rspq(& q->lock);
  #line 2634 
  return IRQ_HANDLED;
}

#line 2643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3_intr_msi(int irq, void *cookie)
{
  #line 2645 
  int new_packets = 0;
  #line 2646 
  struct adapter *adap = (struct adapter *)cookie;
  #line 2647 
  struct sge_rspq *q = & adap->sge.qs[0].rspq;
  #line 2649 
  cif_spin_lock_lock_of_sge_rspq(& q->lock);
  #line 2651 
  if (process_responses(adap,& adap->sge.qs[0],-1) != 0) {
    #line 2652 
    t3_write_reg(adap,8U,((q->cntxt_id << 29) | (q->next_holdoff << 16)) | q->cidx);
    #line 2654 
    new_packets = 1;
  }
  #line 2657 
  if (adap->params.nports == 2U) {
    #line 2657 
    if (process_responses(adap,& adap->sge.qs[1],-1) != 0) {
      #line 2659 
      struct sge_rspq *q1 = & adap->sge.qs[1].rspq;
      #line 2661 
      t3_write_reg(adap,8U,((q1->cntxt_id << 29) | (q1->next_holdoff << 16)) | q1->cidx);
      #line 2664 
      new_packets = 1;
    }
  }
  #line 2667 
  if (new_packets == 0) {
    #line 2667 
    if (t3_slow_intr_handler(adap) == 0) 
                                         #line 2668 
                                         (q->unhandled_irqs) ++;
  }
  #line 2670 
  cif_spin_unlock_lock_of_sge_rspq(& q->lock);
  #line 2671 
  return IRQ_HANDLED;
}

#line 2674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static int rspq_check_napi(struct sge_qset *qs)
{
  #line 2676 
  struct sge_rspq *q = & qs->rspq;
  #line 2678 
  if (napi_is_scheduled(& qs->napi) == 0) {
    #line 2678 
    if (is_new_response(q->desc + (unsigned long)q->cidx,q) != 0) {
      #line 2680 
      napi_schedule(& qs->napi);
      #line 2681 
      return 1;
    }
  }
  #line 2683 
  return 0;
}

#line 2693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3_intr_msi_napi(int irq, void *cookie)
{
  #line 2695 
  int new_packets;
  #line 2696 
  struct adapter *adap = (struct adapter *)cookie;
  #line 2697 
  struct sge_rspq *q = & adap->sge.qs[0].rspq;
  #line 2699 
  cif_spin_lock_lock_of_sge_rspq(& q->lock);
  #line 2701 
  new_packets = rspq_check_napi(& adap->sge.qs[0]);
  #line 2702 
  if (adap->params.nports == 2U) {
    #line 2703 
    new_packets = rspq_check_napi(& adap->sge.qs[1]) + new_packets;
  }
  #line 2704 
  if (new_packets == 0) {
    #line 2704 
    if (t3_slow_intr_handler(adap) == 0) 
                                         #line 2705 
                                         (q->unhandled_irqs) ++;
  }
  #line 2707 
  cif_spin_unlock_lock_of_sge_rspq(& q->lock);
  #line 2708 
  return IRQ_HANDLED;
}

#line 2714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
__inline static int process_responses_gts(struct adapter *adap, struct sge_rspq *rq)
{
  #line 2717 
  int work;
  #line 2719 
  ;
  #line 2719 
  work = process_responses(adap,rspq_to_qset(rq),-1);
  #line 2720 
  t3_write_reg(adap,8U,((rq->cntxt_id << 29) | (rq->next_holdoff << 16)) | rq->cidx);
  #line 2722 
  return work;
}

#line 2731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3_intr(int irq, void *cookie)
{
  #line 2733 
  int work_done;
  #line 2733 
  int w0;
  #line 2733 
  int w1;
  #line 2741 
  int tmp_0;
  #line 2734 
  struct adapter *adap = (struct adapter *)cookie;
  #line 2735 
  struct sge_rspq *q0 = & adap->sge.qs[0].rspq;
  #line 2736 
  struct sge_rspq *q1 = & adap->sge.qs[1].rspq;
  #line 2738 
  cif_spin_lock_lock_of_sge_rspq(& q0->lock);
  #line 2740 
  w0 = is_new_response(q0->desc + (unsigned long)q0->cidx,q0);
  #line 2741 
  if (adap->params.nports == 2U) {
    #line 2741 
    if (is_new_response(q1->desc + (unsigned long)q1->cidx,q1) != 0) 
      #line 2741 
      tmp_0 = 1; else 
                      #line 2741 
                      tmp_0 = 0;
  }
  else 
       #line 2741 
       tmp_0 = 0;
  #line 2741 
  w1 = tmp_0;
  #line 2744 
  if ((long)((w0 | w1) != 0) != 0L) {
    #line 2745 
    t3_write_reg(adap,1784U,0U);
    #line 2746 
    t3_read_reg(adap,1784U);
    #line 2748 
    if ((long)(w0 != 0) != 0L) 
                               #line 2749 
                               process_responses_gts(adap,q0);
    #line 2751 
    if (w1 != 0) 
                 #line 2752 
                 process_responses_gts(adap,q1);
    #line 2754 
    work_done = w0 | w1;
  }
  else 
       #line 2756 
       work_done = t3_slow_intr_handler(adap);
  #line 2758 
  cif_spin_unlock_lock_of_sge_rspq(& q0->lock);
  #line 2759 
  return (enum irqreturn)(work_done != 0);
}

#line 2769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3b_intr(int irq, void *cookie)
{
  #line 2771 
  u32 map;
  #line 2772 
  struct adapter *adap = (struct adapter *)cookie;
  #line 2773 
  struct sge_rspq *q0 = & adap->sge.qs[0].rspq;
  #line 2775 
  t3_write_reg(adap,1784U,0U);
  #line 2776 
  map = t3_read_reg(adap,52U);
  #line 2778 
  if ((long)(map == 0U) != 0L) 
                               #line 2779 
                               return IRQ_NONE;
  #line 2781 
  cif_spin_lock_lock_of_sge_rspq(& q0->lock);
  #line 2783 
  if ((long)((map & 2147483648U) != 0U) != 0L) 
                                               #line 2784 
                                               t3_slow_intr_handler(adap);
  #line 2786 
  if ((long)((map & 1U) != 0U) != 0L) 
                                      #line 2787 
                                      process_responses_gts(adap,q0);
  #line 2789 
  if ((map & 2U) != 0U) 
                        #line 2790 
                        process_responses_gts(adap,& adap->sge.qs[1].rspq);
  #line 2792 
  cif_spin_unlock_lock_of_sge_rspq(& q0->lock);
  #line 2793 
  return IRQ_HANDLED;
}

#line 2803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static irqreturn_t t3b_intr_napi(int irq, void *cookie)
{
  #line 2805 
  u32 map;
  #line 2806 
  struct adapter *adap = (struct adapter *)cookie;
  #line 2807 
  struct sge_qset *qs0 = & adap->sge.qs[0];
  #line 2808 
  struct sge_rspq *q0 = & qs0->rspq;
  #line 2810 
  t3_write_reg(adap,1784U,0U);
  #line 2811 
  map = t3_read_reg(adap,52U);
  #line 2813 
  if ((long)(map == 0U) != 0L) 
                               #line 2814 
                               return IRQ_NONE;
  #line 2816 
  cif_spin_lock_lock_of_sge_rspq(& q0->lock);
  #line 2818 
  if ((long)((map & 2147483648U) != 0U) != 0L) 
                                               #line 2819 
                                               t3_slow_intr_handler(adap);
  #line 2821 
  if ((long)((map & 1U) != 0U) != 0L) 
                                      #line 2822 
                                      napi_schedule(& qs0->napi);
  #line 2824 
  if ((map & 2U) != 0U) 
                        #line 2825 
                        napi_schedule(& adap->sge.qs[1].napi);
  #line 2827 
  cif_spin_unlock_lock_of_sge_rspq(& q0->lock);
  #line 2828 
  return IRQ_HANDLED;
}

#line 2840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
irq_handler_t t3_intr_handler(struct adapter *adap, int polling)
{
  #line 2842 
  if ((adap->flags & 4UL) != 0UL) {
    #line 2843 
    irqreturn_t (*tmp)(int irq, void *cookie);
    #line 2843 
    if (polling != 0) 
                      #line 2843 
                      tmp = & t3_sge_intr_msix_napi; else 
                                                          #line 2843 
                                                          tmp = & t3_sge_intr_msix;
    #line 2843 
    return tmp;
  }
  #line 2844 
  if ((adap->flags & 2UL) != 0UL) {
    #line 2845 
    irqreturn_t (*tmp_0)(int irq, void *cookie);
    #line 2845 
    if (polling != 0) 
                      #line 2845 
                      tmp_0 = & t3_intr_msi_napi; else 
                                                       #line 2845 
                                                       tmp_0 = & t3_intr_msi;
    #line 2845 
    return tmp_0;
  }
  #line 2846 
  if (adap->params.rev != 0U) {
    #line 2847 
    irqreturn_t (*tmp_1)(int irq, void *cookie);
    #line 2847 
    if (polling != 0) 
                      #line 2847 
                      tmp_1 = & t3b_intr_napi; else 
                                                    #line 2847 
                                                    tmp_1 = & t3b_intr;
    #line 2847 
    return tmp_1;
  }
  #line 2848 
  return & t3_intr;
}

#line 2866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_err_intr_handler(struct adapter *adapter)
{
  #line 2868 
  unsigned int v;
  #line 2868 
  unsigned int status = t3_read_reg(adapter,92U) & 4294967293U;
  #line 2871 
  if ((status & 4294901760U) != 0U) 
                                    #line 2872 
                                    _dev_alert(& (adapter->pdev)->dev,(char *)"SGE parity error (0x%x)\n",status & 4294901760U);
  #line 2874 
  if ((status & 49152U) != 0U) 
                               #line 2875 
                               _dev_alert(& (adapter->pdev)->dev,(char *)"SGE framing error (0x%x)\n",status & 49152U);
  #line 2878 
  if ((status & 4U) != 0U) 
                           #line 2879 
                           _dev_alert(& (adapter->pdev)->dev,(char *)"SGE response queue credit overflow\n");
  #line 2881 
  if ((status & 8U) != 0U) {
    #line 2882 
    v = t3_read_reg(adapter,76U);
    #line 2884 
    _dev_alert(& (adapter->pdev)->dev,(char *)"packet delivered to disabled response queue ",(v >> 8) & 255U);
  }
  #line 2889 
  if ((status & 3072U) != 0U) 
                              #line 2890 
                              cif_queue_work(cxgb3_wq,& adapter->db_drop_task);
  #line 2892 
  if ((status & 160U) != 0U) 
                             #line 2893 
                             cif_queue_work(cxgb3_wq,& adapter->db_full_task);
  #line 2895 
  if ((status & 80U) != 0U) 
                            #line 2896 
                            cif_queue_work(cxgb3_wq,& adapter->db_empty_task);
  #line 2898 
  t3_write_reg(adapter,92U,status);
  #line 2899 
  if ((status & 4294950924U) != 0U) 
                                    #line 2900 
                                    t3_fatal_err(adapter);
  #line 2901 
  return;
}

#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void sge_timer_tx(struct timer_list *t)
{
  #line 2942 
  unsigned int tmp_3;
  #line 2923 
  void *__mptr;
  #line 2942 
  unsigned int __UNIQUE_ID___x545;
  #line 2927 
  unsigned long next_period;
  #line 2923 
  __mptr = (void *)t;
  #line 2923 
  struct sge_qset *qs = ((struct sge_qset *)(__mptr + 18446744073709549640U));
  #line 2924 
  struct port_info *pi = netdev_priv(qs->netdev);
  #line 2925 
  struct adapter *adap = pi->adapter;
  #line 2926 
  unsigned int tbd[3U] = {0U, 0U};
  #line 2929 
  if ((int)__netif_tx_trylock(qs->tx_q) != 0) {
    #line 2930 
    tbd[0] = reclaim_completed_tx(adap,& qs->txq[0],64U);
    #line 2932 
    __netif_tx_unlock(qs->tx_q);
  }
  #line 2935 
  if (cif_spin_trylock_lock_of_sge_txq(& qs->txq[1].lock) != 0) {
    #line 2936 
    tbd[1] = reclaim_completed_tx(adap,& qs->txq[1],64U);
    #line 2938 
    cif_spin_unlock_lock_of_sge_txq(& qs->txq[1].lock);
  }
  {
    #line 2942 
    __UNIQUE_ID___x545 = tbd[0];
    #line 2942 
    unsigned int __UNIQUE_ID___y546 = tbd[1];
    #line 2942 
    if (__UNIQUE_ID___x545 > __UNIQUE_ID___y546) 
                                                 #line 2942 
                                                 tmp_3 = __UNIQUE_ID___x545; else 
                                                                    #line 2942 
                                                                    tmp_3 = __UNIQUE_ID___y546;
    }
  #line 2941 
  next_period = (unsigned long)(62 >> tmp_3 / 64U);
  #line 2944 
  cif_mod_timer(& qs->tx_reclaim_timer,jiffies + next_period);
  #line 2945 
  return;
}

#line 2961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
static void sge_timer_rx(struct timer_list *t)
{
  #line 2964 
  void *__mptr;
  #line 2963 
  spinlock_t *lock;
  #line 2967 
  u32 status;
  #line 2964 
  __mptr = (void *)t;
  #line 2964 
  struct sge_qset *qs = ((struct sge_qset *)(__mptr + 18446744073709549552U));
  #line 2965 
  struct port_info *pi = netdev_priv(qs->netdev);
  #line 2966 
  struct adapter *adap = pi->adapter;
  #line 2969 
  if (adap->params.rev != 0U) 
                              #line 2969 
                              lock = & qs->rspq.lock; else 
                                                           #line 2969 
                                                           lock = & adap->sge.qs[0].rspq.lock;
  #line 2972 
  if (cif_spin_trylock_irq_lock(lock) == 0) 
                                            #line 2973 
                                            goto out;
  #line 2975 
  if (napi_is_scheduled(& qs->napi) != 0) 
                                          #line 2976 
                                          goto unlock;
  #line 2978 
  if (adap->params.rev <= 3U) {
    #line 2979 
    status = t3_read_reg(adap,76U);
    #line 2981 
    if (((unsigned int)(1 << qs->rspq.cntxt_id) & status) != 0U) {
      #line 2982 
      (qs->rspq.starved) ++;
      #line 2983 
      if (qs->rspq.credits != 0U) {
        #line 2984 
        (qs->rspq.credits) --;
        #line 2985 
        refill_rspq(adap,& qs->rspq,1U);
        #line 2986 
        (qs->rspq.restarted) ++;
        #line 2987 
        t3_write_reg(adap,76U,(unsigned int)(1 << qs->rspq.cntxt_id));
      }
    }
  }
  #line 2993 
  if (qs->fl[0].credits < qs->fl[0].size) 
                                          #line 2994 
                                          __refill_fl(adap,& qs->fl[0]);
  #line 2995 
  if (qs->fl[1].credits < qs->fl[1].size) 
                                          #line 2996 
                                          __refill_fl(adap,& qs->fl[1]);
  #line 2998 
  unlock: 
          #line 2998 
  ;
  #line 2999 
  cif_spin_unlock_irq_lock(lock);
  #line 3000 
  out: 
       #line 3000 
  ;
  #line 3001 
  cif_mod_timer(& qs->rx_reclaim_timer,jiffies + 62UL);
  #line 3002 
  return;
}

#line 3012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_update_qset_coalesce(struct sge_qset *qs, struct qset_params *p)
{
  #line 3014 
  unsigned int __UNIQUE_ID___x547;
  #line 3014 
  unsigned int tmp;
  {
    #line 3014 
    __UNIQUE_ID___x547 = p->coalesce_usecs * 10U;
    #line 3014 
    unsigned int __UNIQUE_ID___y548 = 1U;
    #line 3014 
    if (__UNIQUE_ID___x547 > __UNIQUE_ID___y548) 
                                                 #line 3014 
                                                 tmp = __UNIQUE_ID___x547; else 
                                                                    #line 3014 
                                                                    tmp = __UNIQUE_ID___y548;
    }
  #line 3014 
  qs->rspq.holdoff_tmr = tmp;
  #line 3015 
  qs->rspq.polling = p->polling;
  #line 3016 
  if (p->polling != 0U) 
                        #line 3016 
                        qs->napi.poll = & napi_rx_handler; else 
                                                                #line 3016 
                                                                qs->napi.poll = & ofld_poll;
  #line 3017 
  return;
}

#line 3035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
int t3_sge_alloc_qset(struct adapter *adapter, unsigned int id, int nports, int irq_vec_idx, struct qset_params *p, int ntxq, struct net_device *dev, struct netdev_queue *netdevq)
{
  #line 3040 
  int i;
  #line 3040 
  int avail;
  #line 3040 
  int ret = -12;
  #line 3041 
  struct sge_qset *q = & adapter->sge.qs[id];
  #line 3043 
  init_qset_cntxt(q,id);
  {
    #line 3044 
    struct lock_class_key __key;
    #line 3044 
    init_timer_key(& q->tx_reclaim_timer,& sge_timer_tx,0U,(char *)"(&q->tx_reclaim_timer)",& __key);
  }
  {
    #line 3045 
    struct lock_class_key __key_0;
    #line 3045 
    init_timer_key(& q->rx_reclaim_timer,& sge_timer_rx,0U,(char *)"(&q->rx_reclaim_timer)",& __key_0);
  }
  #line 3047 
  q->fl[0].desc = (struct rx_desc *)alloc_ring(adapter->pdev,(unsigned long)p->fl_size,16UL,48UL,& q->fl[0].phys_addr,(void *)(& q->fl[0].sdesc));
  #line 3051 
  if (q->fl[0].desc == (struct rx_desc *)0) 
                                            #line 3052 
                                            goto err;
  #line 3054 
  q->fl[1].desc = (struct rx_desc *)alloc_ring(adapter->pdev,(unsigned long)p->jumbo_size,16UL,48UL,& q->fl[1].phys_addr,(void *)(& q->fl[1].sdesc));
  #line 3058 
  if (q->fl[1].desc == (struct rx_desc *)0) 
                                            #line 3059 
                                            goto err;
  #line 3061 
  q->rspq.desc = (struct rsp_desc *)alloc_ring(adapter->pdev,(unsigned long)p->rspq_size,64UL,0UL,& q->rspq.phys_addr,(void *)0);
  #line 3064 
  if (q->rspq.desc == (struct rsp_desc *)0) 
                                            #line 3065 
                                            goto err;
  #line 3067 
  i = 0;
  #line 3067 
  while (i < ntxq) {
    {
      #line 3072 
      unsigned long tmp_2;
      #line 3072 
      if (i == 2) 
                  #line 3072 
                  tmp_2 = 0UL; else 
                                    #line 3072 
                                    tmp_2 = 16UL;
      #line 3072 
      size_t sz = tmp_2;
      #line 3074 
      q->txq[i].desc = (struct tx_desc *)alloc_ring(adapter->pdev,(unsigned long)p->txq_size[i],128UL,sz,& q->txq[i].phys_addr,(void *)(& q->txq[i].sdesc));
      #line 3078 
      if (q->txq[i].desc == (struct tx_desc *)0) 
                                                 #line 3079 
                                                 goto err;
      #line 3081 
      q->txq[i].gen = 1U;
      #line 3082 
      q->txq[i].size = p->txq_size[i];
      #line 3083 
      spinlock_check(& q->txq[i].lock);
      {
        #line 3083 
        struct lock_class_key __key_1;
        #line 3083 
        __raw_spin_lock_init(& q->txq[i].lock.__anonCompField_spinlock_25.rlock,(char *)"&(&q->txq[i].lock)->rlock",& __key_1);
      }
      #line 3084 
      skb_queue_head_init(& q->txq[i].sendq);
    }
    #line 3067 
    i ++;
  }
  #line 3087 
  cif_tasklet_init(& q->txq[1].qresume_tsk,& restart_offloadq,(unsigned long)q);
  #line 3089 
  cif_tasklet_init(& q->txq[2].qresume_tsk,& restart_ctrlq,(unsigned long)q);
  #line 3092 
  q->fl[1].gen = 1U;
  #line 3092 
  q->fl[0].gen = 1U;
  #line 3093 
  q->fl[0].size = p->fl_size;
  #line 3094 
  q->fl[1].size = p->jumbo_size;
  #line 3096 
  q->rspq.gen = 1U;
  #line 3097 
  q->rspq.size = p->rspq_size;
  #line 3098 
  spinlock_check(& q->rspq.lock);
  {
    #line 3098 
    struct lock_class_key __key_2;
    #line 3098 
    __raw_spin_lock_init(& q->rspq.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&q->rspq.lock)->rlock",& __key_2);
  }
  #line 3099 
  skb_queue_head_init(& q->rspq.rx_queue);
  #line 3101 
  q->txq[0].stop_thres = flits_to_desc(sgl_len(18U) + 3U) * (unsigned int)nports;
  #line 3105 
  q->fl[0].buf_size = 2048U;
  #line 3110 
  q->fl[1].buf_size = 8192U;
  #line 3117 
  q->fl[0].use_pages = 1U;
  #line 3118 
  q->fl[1].use_pages = 1U;
  #line 3119 
  q->fl[0].order = 0U;
  #line 3120 
  q->fl[1].order = 1U;
  #line 3121 
  q->fl[0].alloc_size = 4096U;
  #line 3122 
  q->fl[1].alloc_size = 8192U;
  #line 3124 
  cif_spin_lock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
  #line 3127 
  ret = t3_sge_init_rspcntxt(adapter,q->rspq.cntxt_id,irq_vec_idx,q->rspq.phys_addr,q->rspq.size,q->fl[0].buf_size + 4294967232U,1,0U);
  #line 3130 
  if (ret != 0) 
                #line 3131 
                goto err_unlock;
  #line 3133 
  i = 0;
  #line 3133 
  while (i <= 1) {
    #line 3134 
    ret = t3_sge_init_flcntxt(adapter,q->fl[i].cntxt_id,0,q->fl[i].phys_addr,q->fl[i].size,q->fl[i].buf_size + 4294967232U,p->cong_thres,1,0U);
    #line 3138 
    if (ret != 0) 
                  #line 3139 
                  goto err_unlock;
    #line 3133 
    i ++;
  }
  #line 3142 
  ret = t3_sge_init_ecntxt(adapter,q->txq[0].cntxt_id,0,(enum sge_context_type)SGE_CNTXT_ETH,(int)id,q->txq[0].phys_addr,q->txq[0].size,q->txq[0].token,1,0U);
  #line 3146 
  if (ret != 0) 
                #line 3147 
                goto err_unlock;
  #line 3149 
  if (ntxq > 1) {
    #line 3150 
    ret = t3_sge_init_ecntxt(adapter,q->txq[1].cntxt_id,0,(enum sge_context_type)SGE_CNTXT_OFLD,(int)id,q->txq[1].phys_addr,q->txq[1].size,0U,1,0U);
    #line 3154 
    if (ret != 0) 
                  #line 3155 
                  goto err_unlock;
  }
  #line 3158 
  if (ntxq > 2) {
    #line 3159 
    ret = t3_sge_init_ecntxt(adapter,q->txq[2].cntxt_id,0,(enum sge_context_type)SGE_CNTXT_CTRL,(int)id,q->txq[2].phys_addr,q->txq[2].size,q->txq[2].token,1,0U);
    #line 3164 
    if (ret != 0) 
                  #line 3165 
                  goto err_unlock;
  }
  #line 3168 
  cif_spin_unlock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
  #line 3170 
  q->adap = adapter;
  #line 3171 
  q->netdev = dev;
  #line 3172 
  q->tx_q = netdevq;
  #line 3173 
  t3_update_qset_coalesce(q,p);
  #line 3175 
  avail = refill_fl(adapter,& q->fl[0],(int)q->fl[0].size,265408U);
  #line 3177 
  if (avail == 0) {
    #line 3178 
    _dev_alert(& (adapter->pdev)->dev,(char *)"free list queue 0 initialization failed\n");
    #line 3179 
    goto err;
  }
  #line 3181 
  if (q->fl[0].size > (unsigned int)avail) 
                                           #line 3182 
                                           _dev_warn(& (adapter->pdev)->dev,(char *)"free list queue 0 enabled with %d credits\n",avail);
  #line 3185 
  avail = refill_fl(adapter,& q->fl[1],(int)q->fl[1].size,265408U);
  #line 3187 
  if (q->fl[1].size > (unsigned int)avail) 
                                           #line 3188 
                                           _dev_warn(& (adapter->pdev)->dev,(char *)"free list queue 1 enabled with %d credits\n",avail);
  #line 3190 
  refill_rspq(adapter,& q->rspq,q->rspq.size + 4294967295U);
  #line 3192 
  t3_write_reg(adapter,8U,(q->rspq.cntxt_id << 29) | (q->rspq.holdoff_tmr << 16));
  #line 3195 
  return 0;
  #line 3197 
  err_unlock: 
              #line 3197 
  ;
  #line 3198 
  cif_spin_unlock_irq_reg_lock_of_sge_0(& adapter->sge.reg_lock);
  #line 3199 
  err: 
       #line 3199 
  ;
  #line 3200 
  t3_free_qset(adapter,q);
  #line 3201 
  return ret;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_start_sge_timers(struct adapter *adap)
{
  #line 3212 
  int i;
  #line 3214 
  i = 0;
  #line 3214 
  while (i <= 7) {
    {
      #line 3215 
      struct sge_qset *q = & adap->sge.qs[i];
      #line 3217 
      if (q->tx_reclaim_timer.function != (void (*)(struct timer_list *))0) 
        #line 3218 
        cif_mod_timer(& q->tx_reclaim_timer,jiffies + 62UL);
      #line 3221 
      if (q->rx_reclaim_timer.function != (void (*)(struct timer_list *))0) 
        #line 3222 
        cif_mod_timer(& q->rx_reclaim_timer,jiffies + 62UL);
    }
    #line 3214 
    i ++;
  }
  #line 3225 
  return;
}

#line 3233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_stop_sge_timers(struct adapter *adap)
{
  #line 3235 
  int i;
  #line 3237 
  i = 0;
  #line 3237 
  while (i <= 7) {
    {
      #line 3238 
      struct sge_qset *q = & adap->sge.qs[i];
      #line 3240 
      if (q->tx_reclaim_timer.function != (void (*)(struct timer_list *))0) 
        #line 3241 
        cif_del_timer_sync(& q->tx_reclaim_timer);
      #line 3242 
      if (q->rx_reclaim_timer.function != (void (*)(struct timer_list *))0) 
        #line 3243 
        cif_del_timer_sync(& q->rx_reclaim_timer);
    }
    #line 3237 
    i ++;
  }
  #line 3245 
  return;
}

#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_free_sge_resources(struct adapter *adap)
{
  #line 3255 
  int i;
  #line 3257 
  i = 0;
  #line 3257 
  while (i <= 7) {
    #line 3258 
    t3_free_qset(adap,& adap->sge.qs[i]);
    #line 3257 
    i ++;
  }
  #line 3259 
  return;
}

#line 3268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_start(struct adapter *adap)
{
  #line 3270 
  t3_set_reg_field(adap,0U,1U,1U);
  #line 3271 
  return;
}

#line 3286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_stop(struct adapter *adap)
{
  #line 3288 
  t3_set_reg_field(adap,0U,1U,0U);
  #line 3289 
  if (((unsigned long)preempt_count() & 2096896UL) == 0UL) {
    #line 3290 
    int i;
    #line 3292 
    i = 0;
    #line 3292 
    while (i <= 7) {
      {
        #line 3293 
        struct sge_qset *qs = & adap->sge.qs[i];
        #line 3295 
        tasklet_kill(& qs->txq[1].qresume_tsk);
        #line 3296 
        tasklet_kill(& qs->txq[2].qresume_tsk);
      }
      #line 3292 
      i ++;
    }
  }
  #line 3299 
  return;
}

#line 3311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_init(struct adapter *adap, struct sge_params *p)
{
  #line 3313 
  unsigned int ctrl;
  #line 3313 
  int tmp;
  #line 3332 
  unsigned int tmp_3;
  #line 3313 
  if ((adap->pdev)->resource[2].start != 0ULL || (adap->pdev)->resource[2].end != (adap->pdev)->resource[2].start) 
    #line 3313 
    tmp = (int)((((adap->pdev)->resource[2].end - (adap->pdev)->resource[2].start) + 1ULL) >> 12); else 
                                                                    #line 3313 
                                                                    tmp = 0;
  #line 3313 
  unsigned int ups = (unsigned int)ffs(tmp);
  #line 3315 
  if (ups != 0U) 
                 #line 3315 
                 ctrl = ((ups + 4294967295U) << 14) | 961546886U; else 
                                                                    #line 3315 
                                                                    ctrl = 961546886U;
  #line 3322 
  if (adap->params.rev != 0U) 
    #line 3323 
    if ((adap->flags & 6UL) == 0UL) 
                                    #line 3324 
                                    ctrl |= 8388640U;
  #line 3326 
  t3_write_reg(adap,0U,ctrl);
  #line 3327 
  t3_write_reg(adap,84U,33554944U);
  #line 3329 
  ;
  #line 3329 
  t3_write_reg(adap,104U,core_ticks_per_usec(adap) / 10U);
  #line 3330 
  ;
  #line 3330 
  t3_write_reg(adap,100U,(core_ticks_per_usec(adap) * 200U << 8) | 32U);
  #line 3332 
  if (adap->params.rev <= 3U) 
                              #line 3332 
                              tmp_3 = 1000U; else 
                                                  #line 3332 
                                                  tmp_3 = 500U;
  #line 3332 
  ;
  #line 3332 
  t3_write_reg(adap,56U,tmp_3);
  #line 3334 
  t3_write_reg(adap,60U,256U);
  #line 3335 
  t3_write_reg(adap,64U,1000U);
  #line 3336 
  t3_write_reg(adap,68U,256U);
  #line 3337 
  t3_write_reg(adap,112U,268369920U);
  #line 3338 
  t3_write_reg(adap,116U,64512U);
  #line 3339 
  return;
}

#line 3350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/sge.c"
void t3_sge_prep(struct adapter *adap, struct sge_params *p)
{
  #line 3352 
  int i;
  #line 3354 
  p->max_pkt_size = 16048U;
  #line 3357 
  i = 0;
  #line 3357 
  while (i <= 7) {
    {
      #line 3358 
      struct qset_params *q = (struct qset_params *)(& p->qset) + (unsigned long)i;
      #line 3360 
      q->polling = (unsigned int)(adap->params.rev != 0U);
      #line 3361 
      q->coalesce_usecs = 5U;
      #line 3362 
      q->rspq_size = 1024U;
      #line 3363 
      q->fl_size = 1024U;
      #line 3364 
      q->jumbo_size = 512U;
      #line 3365 
      q->txq_size[0] = 1024U;
      #line 3366 
      q->txq_size[1] = 1024U;
      #line 3367 
      q->txq_size[2] = 256U;
      #line 3368 
      q->cong_thres = 0U;
    }
    #line 3357 
    i ++;
  }
  #line 3371 
  spinlock_check(& adap->sge.reg_lock);
  {
    #line 3371 
    struct lock_class_key __key;
    #line 3371 
    __raw_spin_lock_init(& adap->sge.reg_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adap->sge.reg_lock)->rlock",& __key);
  }
  #line 3374 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
#line 95 
int emg_del_timer_sync(struct timer_list *arg0);
#line 99 
#line 99 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 102 
#line 102 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 106 
#line 106 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 107 
#line 107 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 128 
  ldv_set_bit(nr,addr);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 135 
  ldv_clear_bit(nr,addr);
  #line 136 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void atomic_inc_1(atomic_t *v)
{
  #line 191 
  ldv_atomic_inc(v);
  #line 192 
  return;
}

#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 313 
  return emg_queue_work(wq,work);
}

#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 423 
  return ldv_kcalloc(n,size,flags);
}

#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 581 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 583 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 585 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 588 
                                           return 0;
  else {
    #line 590 
    ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
    #line 592 
    return 1;
  }
  #line 595 
  return ldv_func_res;
}

#line 599  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 602 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 604 
  spin_unlock_1(lock);
  #line 605 
  return;
}

#line 820  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_irq_reg_lock_of_sge_0(spinlock_t *lock)
{
  #line 823 
  ldv_spin_model_lock((char *)"reg_lock_of_sge");
  #line 825 
  spin_lock_irq_0(lock);
  #line 826 
  return;
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_irq_reg_lock_of_sge_0(spinlock_t *lock)
{
  #line 832 
  ldv_spin_model_unlock((char *)"reg_lock_of_sge");
  #line 834 
  spin_unlock_irq_0(lock);
  #line 835 
  return;
}

#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_lock_of_sge_txq(spinlock_t *lock)
{
  #line 841 
  ldv_spin_model_lock((char *)"lock_of_sge_txq");
  #line 843 
  spin_lock_1(lock);
  #line 844 
  return;
}

#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_lock_of_sge_txq(spinlock_t *lock)
{
  #line 850 
  ldv_spin_model_unlock((char *)"lock_of_sge_txq");
  #line 852 
  spin_unlock_1(lock);
  #line 853 
  return;
}

#line 856  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_irq_lock_of_sge_rspq(spinlock_t *lock)
{
  #line 859 
  ldv_spin_model_lock((char *)"lock_of_sge_rspq");
  #line 861 
  spin_lock_irq_0(lock);
  #line 862 
  return;
}

#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_irq_lock_of_sge_rspq(spinlock_t *lock)
{
  #line 868 
  ldv_spin_model_unlock((char *)"lock_of_sge_rspq");
  #line 870 
  spin_unlock_irq_0(lock);
  #line 871 
  return;
}

#line 874  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 878 
  emg_tasklet_schedule(t);
  #line 879 
  return;
}

#line 882  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_lock_of_sge_rspq(spinlock_t *lock)
{
  #line 885 
  ldv_spin_model_lock((char *)"lock_of_sge_rspq");
  #line 887 
  spin_lock_1(lock);
  #line 888 
  return;
}

#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_lock_of_sge_rspq(spinlock_t *lock)
{
  #line 894 
  ldv_spin_model_unlock((char *)"lock_of_sge_rspq");
  #line 896 
  spin_unlock_1(lock);
  #line 897 
  return;
}

#line 900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock_lock_of_sge_txq(spinlock_t *lock)
{
  #line 904 
  ldv_func_ret_type_0 ldv_func_res = spin_trylock(lock);
  #line 906 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 908 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 911 
                                           return 0;
  else {
    #line 913 
    ldv_spin_model_lock((char *)"lock_of_sge_txq");
    #line 915 
    return 1;
  }
  #line 918 
  return ldv_func_res;
}

#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 926 
  return emg_mod_timer(timer,expires);
}

#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock_irq_lock(spinlock_t *lock)
{
  #line 934 
  ldv_func_ret_type_1 ldv_func_res = spin_trylock_irq(lock);
  #line 936 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 938 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 941 
                                           return 0;
  else {
    #line 943 
    ldv_spin_model_lock((char *)"lock");
    #line 945 
    return 1;
  }
  #line 948 
  return ldv_func_res;
}

#line 952  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_irq_lock(spinlock_t *lock)
{
  #line 955 
  ldv_spin_model_unlock((char *)"lock");
  #line 957 
  spin_unlock_irq_0(lock);
  #line 958 
  return;
}

#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 965 
  emg_tasklet_init(t,func,data);
  #line 966 
  return;
}

#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 973 
  return emg_del_timer_sync(timer);
}

#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
void t3_mc5_prep(struct adapter *adapter, struct mc5 *mc5, int mode);
#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
int t3_mc5_init(struct mc5 *mc5, unsigned int nservers, unsigned int nfilters, unsigned int nroutes);
#line 722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
void t3_mc5_intr_handler(struct mc5 *mc5);
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
static int mc5_cmd_write(struct adapter *adapter, u32 cmd)
{
  #line 95 
  t3_write_reg(adapter,1912U,cmd);
  #line 96 
  return t3_wait_op_done(adapter,1968,1U,1,5,1);
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
__inline static void dbgi_wr_data3(struct adapter *adapter, u32 v1, u32 v2, u32 v3)
{
  #line 103 
  t3_write_reg(adapter,1928U,v1);
  #line 104 
  t3_write_reg(adapter,1932U,v2);
  #line 105 
  t3_write_reg(adapter,1936U,v3);
  #line 106 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
static int mc5_write(struct adapter *adapter, u32 addr_lo, u32 cmd)
{
  #line 115 
  t3_write_reg(adapter,1916U,addr_lo);
  #line 116 
  if (mc5_cmd_write(adapter,cmd) == 0) 
                                       #line 117 
                                       return 0;
  #line 118 
  _dev_err(& (adapter->pdev)->dev,(char *)"MC5 timeout writing to TCAM address 0x%x\n",addr_lo);
  #line 120 
  return -1;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
static int init_mask_data_array(struct mc5 *mc5, u32 mask_array_base, u32 data_array_base, u32 write_cmd, int addr_shift)
{
  #line 127 
  unsigned int i;
  #line 128 
  struct adapter *adap = mc5->adapter;
  #line 134 
  unsigned int size72 = mc5->tcam_size;
  #line 135 
  unsigned int server_base = t3_read_reg(adap,1812U);
  #line 137 
  if ((unsigned int)mc5->mode == 1U) {
    #line 138 
    size72 *= 2U;
    #line 139 
    server_base *= 2U;
  }
  #line 143 
  dbgi_wr_data3(adap,0U,0U,0U);
  #line 144 
  i = 0U;
  #line 144 
  while (i < size72) {
    #line 145 
    if (mc5_write(adap,(i << addr_shift) + data_array_base,write_cmd) != 0) 
      #line 147 
      return -1;
    #line 144 
    i ++;
  }
  #line 150 
  dbgi_wr_data3(adap,4294967295U,4294967295U,255U);
  #line 151 
  i = 0U;
  #line 151 
  while (i < size72) {
    {
      #line 152 
      if (i == server_base) {
        #line 153 
        unsigned int tmp_1;
        #line 153 
        if ((unsigned int)mc5->mode == 1U) 
                                           #line 153 
                                           tmp_1 = 4294967289U; else 
                                                                  #line 153 
                                                                  tmp_1 = 4294967293U;
        #line 153 
        ;
        #line 153 
        t3_write_reg(adap,1928U,tmp_1);
      }
      #line 156 
      if (mc5_write(adap,(i << addr_shift) + mask_array_base,write_cmd) != 0) 
        #line 158 
        return -1;
    }
    #line 151 
    i ++;
  }
  #line 160 
  return 0;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
static int init_idt52100(struct mc5 *mc5)
{
  #line 165 
  int i;
  #line 166 
  struct adapter *adap = mc5->adapter;
  #line 168 
  t3_write_reg(adap,1824U,1381653U);
  #line 170 
  t3_write_reg(adap,1836U,2U);
  #line 176 
  t3_write_reg(adap,1996U,1U);
  #line 177 
  t3_write_reg(adap,2000U,1U);
  #line 178 
  t3_write_reg(adap,2004U,2U);
  #line 179 
  t3_write_reg(adap,2008U,3U);
  #line 180 
  t3_write_reg(adap,2012U,24578U);
  #line 181 
  t3_write_reg(adap,2016U,3U);
  #line 182 
  t3_write_reg(adap,2020U,2U);
  #line 183 
  t3_write_reg(adap,2024U,3U);
  #line 184 
  t3_write_reg(adap,2028U,2U);
  #line 185 
  t3_write_reg(adap,2032U,28674U);
  #line 186 
  t3_write_reg(adap,2036U,1U);
  #line 187 
  t3_write_reg(adap,2040U,0U);
  #line 190 
  t3_write_reg(adap,1908U,5U);
  #line 193 
  dbgi_wr_data3(adap,4294901760U,0U,0U);
  #line 194 
  if (mc5_write(adap,1572870U,1U) != 0) 
                                        #line 195 
                                        goto err;
  #line 198 
  dbgi_wr_data3(adap,4294967295U,4294967295U,0U);
  #line 199 
  if (mc5_write(adap,1572866U,1U) != 0) 
                                        #line 199 
                                        goto _LOR;
  else {
    #line 199 
    if (mc5_write(adap,1572868U,1U) != 0) 
                                          #line 199 
                                          _LOR: 
                                                #line 201 
                                                goto err;
  }
  #line 204 
  i = 0;
  #line 204 
  while (i <= 31) {
    {
      #line 205 
      if ((unsigned int)i + 4294967284U <= 2U) 
                                               #line 206 
                                               dbgi_wr_data3(adap,4294967289U,4294967295U,255U);
      else 
        #line 207 
        if (i == 15) 
                     #line 208 
                     dbgi_wr_data3(adap,4294967289U,4294934535U,255U); else 
                                                                    #line 210 
                                                                    dbgi_wr_data3(adap,4294967295U,4294967295U,255U);
      #line 212 
      if (mc5_write(adap,(unsigned int)(i + 1572896),1U) != 0) 
                                                               #line 213 
                                                               goto err;
    }
    #line 204 
    i ++;
  }
  #line 217 
  dbgi_wr_data3(adap,1U,0U,0U);
  #line 218 
  if (mc5_write(adap,1572864U,1U) != 0) 
                                        #line 219 
                                        goto err;
  #line 221 
  return init_mask_data_array(mc5,524288U,0U,1U,0);
  #line 223 
  err: 
       #line 223 
  ;
  #line 224 
  return -5;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
static int init_idt43102(struct mc5 *mc5)
{
  #line 229 
  int i;
  #line 232 
  unsigned int tmp;
  #line 230 
  struct adapter *adap = mc5->adapter;
  #line 232 
  if (adap->params.rev == 0U) 
                              #line 232 
                              tmp = 851985U; else 
                                                  #line 232 
                                                  tmp = 851986U;
  #line 232 
  ;
  #line 232 
  t3_write_reg(adap,1824U,tmp);
  #line 240 
  t3_write_reg(adap,1996U,4U);
  #line 241 
  t3_write_reg(adap,2000U,4U);
  #line 242 
  t3_write_reg(adap,2004U,14339U);
  #line 244 
  t3_write_reg(adap,2012U,3U);
  #line 245 
  t3_write_reg(adap,2020U,14339U);
  #line 246 
  t3_write_reg(adap,2028U,14339U);
  #line 247 
  t3_write_reg(adap,2032U,2051U);
  #line 248 
  t3_write_reg(adap,2036U,4U);
  #line 249 
  t3_write_reg(adap,2040U,5U);
  #line 251 
  t3_write_reg(adap,1836U,3U);
  #line 254 
  t3_write_reg(adap,1908U,5U);
  #line 257 
  dbgi_wr_data3(adap,4294967295U,4294967295U,255U);
  #line 258 
  i = 0;
  #line 258 
  while (i <= 6) {
    #line 259 
    if (mc5_write(adap,(unsigned int)(i + 16),4U) != 0) 
                                                        #line 260 
                                                        goto err;
    #line 258 
    i ++;
  }
  #line 262 
  i = 0;
  #line 262 
  while (i <= 3) {
    #line 263 
    if (mc5_write(adap,(unsigned int)(i + 48),4U) != 0) 
                                                        #line 264 
                                                        goto err;
    #line 262 
    i ++;
  }
  #line 266 
  dbgi_wr_data3(adap,4294967289U,4294967295U,255U);
  #line 267 
  if (mc5_write(adap,32U,4U) != 0) 
                                   #line 267 
                                   goto _LOR;
  else {
    #line 267 
    if (mc5_write(adap,33U,4U) != 0) 
                                     #line 267 
                                     goto _LOR;
    else {
      #line 268 
      if (mc5_write(adap,36U,4U) != 0) 
                                       #line 267 
                                       _LOR: 
                                             #line 270 
                                             goto err;
    }
  }
  #line 272 
  dbgi_wr_data3(adap,4294967289U,4294934535U,255U);
  #line 273 
  if (mc5_write(adap,37U,4U) != 0) 
                                   #line 274 
                                   goto err;
  #line 277 
  dbgi_wr_data3(adap,4026531840U,0U,0U);
  #line 278 
  if (mc5_write(adap,3U,4U) != 0) 
                                  #line 279 
                                  goto err;
  #line 281 
  return init_mask_data_array(mc5,33554432U,16777216U,4U,1);
  #line 283 
  err: 
       #line 283 
  ;
  #line 284 
  return -5;
}

#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
__inline static void mc5_dbgi_mode_enable(struct mc5 *mc5)
{
  #line 290 
  unsigned int tmp;
  #line 290 
  if ((unsigned int)mc5->mode == 2U) 
                                     #line 290 
                                     tmp = 17U; else 
                                                     #line 290 
                                                     tmp = 16U;
  #line 290 
  ;
  #line 290 
  t3_write_reg(mc5->adapter,1796U,tmp);
  #line 292 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
static void mc5_dbgi_mode_disable(struct mc5 *mc5)
{
  #line 298 
  int tmp;
  #line 298 
  if ((unsigned int)mc5->mode == 2U) 
                                     #line 298 
                                     tmp = 131072; else 
                                                        #line 298 
                                                        tmp = 0;
  #line 297 
  ;
  #line 297 
  ;
  #line 297 
  t3_write_reg(mc5->adapter,1796U,(unsigned int)((((unsigned int)mc5->mode == 2U) | tmp) | ((int)mc5->parity_enabled << 6)) | 32U);
  #line 301 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
int t3_mc5_init(struct mc5 *mc5, unsigned int nservers, unsigned int nfilters, unsigned int nroutes)
{
  #line 310 
  u32 cfg;
  #line 311 
  int err;
  #line 323 
  unsigned int tmp_0;
  #line 312 
  unsigned int tcam_size = mc5->tcam_size;
  #line 313 
  struct adapter *adap = mc5->adapter;
  #line 315 
  if (tcam_size == 0U) 
                       #line 316 
                       return 0;
  #line 318 
  if (nroutes > 2048U || (nroutes + nservers) + nfilters > tcam_size) 
    #line 319 
    return -22;
  #line 322 
  cfg = t3_read_reg(adap,1796U) & 4294967294U;
  #line 323 
  if ((unsigned int)mc5->mode == 2U) 
                                     #line 323 
                                     tmp_0 = 3U; else 
                                                      #line 323 
                                                      tmp_0 = 2U;
  #line 323 
  cfg = tmp_0 | cfg;
  #line 324 
  t3_write_reg(adap,1796U,cfg);
  #line 325 
  if (t3_wait_op_done(adap,1796,4U,1,500,0) != 0) {
    #line 326 
    _dev_err(& (adap->pdev)->dev,(char *)"TCAM reset timed out\n");
    #line 327 
    return -1;
  }
  #line 330 
  t3_write_reg(adap,1804U,tcam_size - nroutes);
  #line 331 
  t3_write_reg(adap,1808U,(tcam_size - nroutes) - nfilters);
  #line 333 
  t3_write_reg(adap,1812U,((tcam_size - nroutes) - nfilters) - nservers);
  #line 336 
  mc5->parity_enabled = (unsigned char)1U;
  #line 339 
  t3_write_reg(adap,1920U,0U);
  #line 340 
  t3_write_reg(adap,1924U,0U);
  #line 342 
  mc5_dbgi_mode_enable(mc5);
  #line 344 
  switch ((int)mc5->part_type) {
    #line 345 
    case 4: 
            #line 345 
    ;
    #line 346 
    err = init_idt52100(mc5);
    #line 347 
    break;
    #line 348 
    case 5: 
            #line 348 
    ;
    #line 349 
    err = init_idt43102(mc5);
    #line 350 
    break;
    #line 351 
    default: 
             #line 351 
    ;
    #line 352 
    _dev_err(& (adap->pdev)->dev,(char *)"Unsupported TCAM type %d\n",(int)mc5->part_type);
    #line 353 
    err = -22;
    #line 354 
    break;
  }
  #line 357 
  mc5_dbgi_mode_disable(mc5);
  #line 358 
  return err;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
void t3_mc5_intr_handler(struct mc5 *mc5)
{
  #line 369 
  struct adapter *adap = mc5->adapter;
  #line 370 
  u32 cause = t3_read_reg(adap,1860U);
  #line 372 
  if ((cause & 64U) != 0U && (unsigned int)mc5->parity_enabled != 0U) {
    #line 373 
    _dev_alert(& (adap->pdev)->dev,(char *)"MC5 parity error\n");
    #line 374 
    (mc5->stats.parity_err) ++;
  }
  #line 377 
  if ((cause & 65536U) != 0U) {
    #line 378 
    _dev_alert(& (adap->pdev)->dev,(char *)"MC5 request queue parity error\n");
    #line 379 
    (mc5->stats.reqq_parity_err) ++;
  }
  #line 382 
  if ((cause & 131072U) != 0U) {
    #line 383 
    _dev_alert(& (adap->pdev)->dev,(char *)"MC5 dispatch queue parity error\n");
    #line 384 
    (mc5->stats.dispq_parity_err) ++;
  }
  #line 387 
  if ((cause & 128U) != 0U) 
                            #line 388 
                            (mc5->stats.active_rgn_full) ++;
  #line 389 
  if ((cause & 256U) != 0U) 
                            #line 390 
                            (mc5->stats.nfa_srch_err) ++;
  #line 391 
  if ((cause & 32768U) != 0U) 
                              #line 392 
                              (mc5->stats.unknown_cmd) ++;
  #line 393 
  if ((cause & 262144U) != 0U) 
                               #line 394 
                               (mc5->stats.del_act_empty) ++;
  #line 395 
  if ((cause & 196672U) != 0U) 
                               #line 396 
                               t3_fatal_err(adap);
  #line 398 
  t3_write_reg(adap,1860U,cause);
  #line 399 
  return;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/mc5.c"
void t3_mc5_prep(struct adapter *adapter, struct mc5 *mc5, int mode)
{
  #line 405 
  unsigned int tcam_part_size[4U] = {65536U, 131072U, 262144U, 32768U};
  #line 411 
  u32 cfg = t3_read_reg(adapter,1796U);
  #line 413 
  mc5->adapter = adapter;
  #line 414 
  mc5->mode = (unsigned char)mode;
  #line 415 
  mc5->part_type = (unsigned char)((unsigned int)((unsigned char)(cfg >> 26)) & 3U);
  #line 416 
  if ((cfg & 1073741824U) != 0U) 
                                 #line 417 
                                 mc5->part_type = (unsigned char)((unsigned int)mc5->part_type | 4U);
  #line 419 
  mc5->tcam_size = tcam_part_size[(cfg >> 28) & 3U];
  #line 420 
  if (mode == 1) 
                 #line 421 
                 mc5->tcam_size /= 2U;
  #line 422 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 385 
int kstrtouint(char *, unsigned int, unsigned int *);
#line 408 
#line 408 
int kstrtou16(char *, unsigned int, u16 *);
#line 623 
#line 623 
int hex_to_bin(char);
#line 624 
#line 624 
int hex2bin(u8 *, char *, size_t);
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 72 
char *strim(char *);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/t3_hw.i.aux"
#line 677 
static void cif_mutex_lock_mdio_lock_of_adapter(struct mutex *lock);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/t3_hw.i.aux"
static void cif_mutex_unlock_mdio_lock_of_adapter(struct mutex *lock);
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static unsigned int t3_mc7_size(struct mc7 *p)
{
  #line 467 
  return p->size;
}

#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1040 
int pci_find_capability(struct pci_dev *, int);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1085 
#line 1085 
int pci_read_config_dword(struct pci_dev *, int, u32 *);
#line 1087 
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1088 
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1092 
#line 1092 
int pcie_capability_write_word(struct pci_dev *, int, u16);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  #line 2094 
  return (int)dev->pcie_cap;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  #line 2105 
  return (_Bool)(pci_pcie_cap(dev) != 0);
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
__inline static struct port_info *adap2pinfo(struct adapter *adap, int idx)
{
  #line 286 
  return (struct port_info *)netdev_priv(adap->port[idx]);
}

#line 308 
#line 308 
void t3_os_ext_intr_handler(struct adapter *adapter);
#line 309 
#line 309 
void t3_os_link_changed(struct adapter *adapter, int port_id, int link_stat, int speed, int duplex, int pause);
#line 311 
#line 311 
void t3_os_phymod_changed(struct adapter *adap, int port_id);
#line 312 
#line 312 
void t3_os_link_fault(struct adapter *adap, int port_id, int state);
#line 313 
#line 313 
void t3_os_link_fault_handler(struct adapter *adapter, int port_id);
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static int is_offload(struct adapter *adap)
{
  #line 629 
  return (int)adap->params.offload;
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
__inline static unsigned int is_pcie(struct adapter *adap)
{
  #line 639 
  return (unsigned int)((unsigned int)adap->params.pci.variant == 4U);
}

#line 660 
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_enable(struct cphy *phy);
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_disable(struct cphy *phy);
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_clear(struct cphy *phy);
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_handler(struct cphy *phy);
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_intr_enable(struct adapter *adapter);
#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_intr_disable(struct adapter *adapter);
#line 667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_intr_clear(struct adapter *adapter);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_xgm_intr_enable(struct adapter *adapter, int idx);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_xgm_intr_disable(struct adapter *adapter, int idx);
#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_port_intr_enable(struct adapter *adapter, int idx);
#line 671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_port_intr_disable(struct adapter *adapter, int idx);
#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_intr_handler(struct adapter *adapter);
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_link_changed(struct adapter *adapter, int port_id);
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_link_fault(struct adapter *adapter, int port_id);
#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_link_start(struct cphy *phy, struct cmac *mac, struct link_config *lc);
#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
struct adapter_info *t3_get_adapter_info(unsigned int id);
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_seeprom_read(struct adapter *adapter, u32 addr, __le32 *data);
#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_seeprom_write(struct adapter *adapter, u32 addr, __le32 data);
#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_seeprom_wp(struct adapter *adapter, int enable);
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_check_tpsram_version(struct adapter *adapter);
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_check_tpsram(struct adapter *adapter, u8 *tp_sram, unsigned int size);
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_set_proto_sram(struct adapter *adap, u8 *data);
#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_load_fw(struct adapter *adapter, u8 *fw_data, unsigned int size);
#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_check_fw_version(struct adapter *adapter);
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_init_hw(struct adapter *adapter, u32 fw_params);
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_reset_adapter(struct adapter *adapter);
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_prep_adapter(struct adapter *adapter, struct adapter_info *ai, int reset);
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_replay_prep_adapter(struct adapter *adapter);
#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_led_ready(struct adapter *adapter);
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_set_vlan_accel(struct adapter *adapter, unsigned int ports, int on);
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_config_rss(struct adapter *adapter, unsigned int rss_config, u8 *cpus, u16 *rspq);
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_cim_ctl_blk_read(struct adapter *adap, unsigned int addr, unsigned int n, unsigned int *valp);
#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_tp_set_offload_mode(struct adapter *adap, int enable);
#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_load_mtus(struct adapter *adap, unsigned short *mtus, unsigned short *alpha, unsigned short *beta, unsigned short mtu_cap);
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 2995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_config_trace_filter(struct adapter *adapter, struct trace_params *tp, int filter_index, int invert, int enable);
#line 732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_config_sched(struct adapter *adap, unsigned int kbps, int sched);
#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/common.h"
#line 759 
int t3_ael1002_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 761 
#line 761 
int t3_ael1006_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 763 
#line 763 
int t3_ael2005_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 765 
#line 765 
int t3_ael2020_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 767 
#line 767 
int t3_qt2045_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 769 
#line 769 
int t3_xaui_direct_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
#line 2150 
static void t3_port_intr_clear(struct adapter *adapter, int idx);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_wait_op_done_val(struct adapter *adapter, int reg, u32 mask, int polarity, int attempts, int delay, u32 *valp)
{
  #line 58 
  while (1) {
    {
      #line 59 
      u32 val = t3_read_reg(adapter,(unsigned int)reg);
      #line 61 
      if (((val & mask) != 0U) == polarity) {
        #line 62 
        if (valp != (u32 *)0U) 
                               #line 63 
                               *valp = val;
        #line 64 
        return 0;
      }
      #line 66 
      attempts --;
      #line 66 
      if (attempts == 0) 
                         #line 67 
                         return -11;
      #line 68 
      if (delay != 0) 
        #line 69 
        if (0 != 0) 
          #line 69 
          if (delay > 19999) 
                             #line 69 
                             __bad_udelay(); else 
                                                  #line 69 
                                                  __const_udelay((unsigned long)delay * 4295UL);
        else 
             #line 69 
             __udelay((unsigned long)delay);
    }
  }
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_write_regs(struct adapter *adapter, struct addr_val_pair *p, int n, unsigned int offset)
{
  #line 87 
  while (1) {
    #line 87 
    int tmp;
    #line 87 
    tmp = n;
    #line 87 
    n --;
    #line 87 
    ;
    #line 87 
    if (! (tmp != 0)) 
                      #line 87 
                      break;
    #line 88 
    t3_write_reg(adapter,p->reg_addr + offset,p->val);
    #line 89 
    p ++;
  }
  #line 91 
  return;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_set_reg_field(struct adapter *adapter, unsigned int addr, u32 mask, u32 val)
{
  #line 106 
  u32 v = t3_read_reg(adapter,addr) & ~ mask;
  #line 108 
  t3_write_reg(adapter,addr,v | val);
  #line 109 
  t3_read_reg(adapter,addr);
  #line 110 
  return;
}

#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void t3_read_indirect(struct adapter *adap, unsigned int addr_reg, unsigned int data_reg, u32 *vals, unsigned int nregs, unsigned int start_idx)
{
  #line 128 
  while (1) {
    #line 128 
    unsigned int tmp_0;
    #line 128 
    tmp_0 = nregs;
    #line 128 
    nregs --;
    #line 128 
    ;
    #line 128 
    if (! (tmp_0 != 0U)) 
                         #line 128 
                         break;
    {
      #line 130 
      u32 *tmp;
      #line 129 
      t3_write_reg(adap,addr_reg,start_idx);
      #line 130 
      tmp = vals;
      #line 130 
      vals ++;
      #line 130 
      *tmp = t3_read_reg(adap,data_reg);
      #line 131 
      start_idx ++;
    }
  }
  #line 133 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_mc7_bd_read(struct mc7 *mc7, unsigned int start, unsigned int n, u64 *buf)
{
  #line 148 
  int shift[4U] = {0, 0, 16, 24};
  #line 149 
  int step[4U] = {0, 32, 16, 8};
  #line 151 
  unsigned int size64 = mc7->size / 8U;
  #line 152 
  struct adapter *adap = mc7->adapter;
  #line 154 
  if (start >= size64 || start + n > size64) 
                                             #line 155 
                                             return -22;
  #line 157 
  start = (unsigned int)(8 << mc7->width) * start;
  #line 158 
  while (1) {
    #line 158 
    unsigned int tmp_2;
    #line 158 
    tmp_2 = n;
    #line 158 
    n --;
    #line 158 
    ;
    #line 158 
    if (! (tmp_2 != 0U)) 
                         #line 158 
                         break;
    {
      #line 159 
      int i;
      #line 188 
      u64 *tmp_1;
      #line 160 
      u64 val64 = 0ULL;
      #line 162 
      i = (1 << mc7->width) + -1;
      #line 162 
      while (i >= 0) {
        {
          #line 164 
          u32 val;
          #line 163 
          int attempts = 10;
          #line 166 
          t3_write_reg(adap,mc7->offset + 340U,start);
          #line 167 
          t3_write_reg(adap,mc7->offset + 356U,0U);
          #line 168 
          val = t3_read_reg(adap,mc7->offset + 356U);
          #line 169 
          while (1) {
            #line 169 
            if ((val & 2147483648U) != 0U) {
              #line 169 
              int tmp;
              #line 169 
              tmp = attempts;
              #line 169 
              attempts --;
              #line 169 
              ;
              #line 169 
              if (! (tmp != 0)) 
                                #line 169 
                                break;
            }
            else 
                 #line 169 
                 break;
            #line 170 
            val = t3_read_reg(adap,mc7->offset + 356U);
          }
          #line 172 
          if ((val & 2147483648U) != 0U) 
                                         #line 173 
                                         return -5;
          #line 175 
          val = t3_read_reg(adap,mc7->offset + 348U);
          #line 176 
          if (mc7->width == 0U) {
            #line 177 
            val64 = (unsigned long long)t3_read_reg(adap,mc7->offset + 344U);
            #line 180 
            val64 = ((unsigned long long)val << 32) | val64;
          }
          else {
            #line 182 
            if (mc7->width > 1U) 
                                 #line 183 
                                 val >>= shift[mc7->width];
            #line 184 
            val64 = ((unsigned long long)val << step[mc7->width] * i) | val64;
          }
          #line 186 
          start += 8U;
        }
        #line 162 
        i --;
      }
      #line 188 
      tmp_1 = buf;
      #line 188 
      buf ++;
      #line 188 
      *tmp_1 = val64;
    }
  }
  #line 190 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void mi1_init(struct adapter *adap, struct adapter_info *ai)
{
  #line 198 
  u32 clkdiv = adap->params.vpd.cclk / (adap->params.vpd.mdc * 2U) + 4294967295U;
  #line 199 
  u32 val = (clkdiv << 5) | 4U;
  #line 201 
  t3_write_reg(adap,1712U,val);
  #line 202 
  return;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_mi1_read(struct net_device *dev, int phy_addr, int mmd_addr, u16 reg_addr)
{
  #line 214 
  int ret;
  #line 212 
  struct port_info *pi = netdev_priv(dev);
  #line 213 
  struct adapter *adapter = pi->adapter;
  #line 215 
  u32 addr = (unsigned int)((int)reg_addr | (phy_addr << 5));
  #line 217 
  cif_mutex_lock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 218 
  t3_set_reg_field(adapter,1712U,24U,8U);
  #line 219 
  t3_write_reg(adapter,1716U,addr);
  #line 220 
  t3_write_reg(adapter,1724U,2U);
  #line 221 
  ret = t3_wait_op_done(adapter,1724,2147483648U,0,20,10);
  #line 222 
  if (ret == 0) {
    #line 223 
    ret = (int)t3_read_reg(adapter,1720U);
  }
  #line 224 
  cif_mutex_unlock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 225 
  return ret;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_mi1_write(struct net_device *dev, int phy_addr, int mmd_addr, u16 reg_addr, u16 val)
{
  #line 233 
  int ret;
  #line 231 
  struct port_info *pi = netdev_priv(dev);
  #line 232 
  struct adapter *adapter = pi->adapter;
  #line 234 
  u32 addr = (unsigned int)((int)reg_addr | (phy_addr << 5));
  #line 236 
  cif_mutex_lock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 237 
  t3_set_reg_field(adapter,1712U,24U,8U);
  #line 238 
  t3_write_reg(adapter,1716U,addr);
  #line 239 
  t3_write_reg(adapter,1720U,(unsigned int)val);
  #line 240 
  t3_write_reg(adapter,1724U,1U);
  #line 241 
  ret = t3_wait_op_done(adapter,1724,2147483648U,0,20,10);
  #line 242 
  cif_mutex_unlock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 243 
  return ret;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static struct mdio_ops mi1_mdio_ops = {.read = & t3_mi1_read, .write = & t3_mi1_write, .mode_support = 1U};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int mi1_wr_addr(struct adapter *adapter, int phy_addr, int mmd_addr, int reg_addr)
{
  #line 259 
  u32 addr = (unsigned int)((phy_addr << 5) | mmd_addr);
  #line 261 
  t3_set_reg_field(adapter,1712U,24U,0U);
  #line 262 
  t3_write_reg(adapter,1716U,addr);
  #line 263 
  t3_write_reg(adapter,1720U,(unsigned int)reg_addr);
  #line 264 
  t3_write_reg(adapter,1724U,0U);
  #line 265 
  return t3_wait_op_done(adapter,1724,2147483648U,0,20,10);
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int mi1_ext_read(struct net_device *dev, int phy_addr, int mmd_addr, u16 reg_addr)
{
  #line 277 
  int ret;
  #line 275 
  struct port_info *pi = netdev_priv(dev);
  #line 276 
  struct adapter *adapter = pi->adapter;
  #line 279 
  cif_mutex_lock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 280 
  ret = mi1_wr_addr(adapter,phy_addr,mmd_addr,(int)reg_addr);
  #line 281 
  if (ret == 0) {
    #line 282 
    t3_write_reg(adapter,1724U,3U);
    #line 283 
    ret = t3_wait_op_done(adapter,1724,2147483648U,0,20,10);
    #line 285 
    if (ret == 0) {
      #line 286 
      ret = (int)t3_read_reg(adapter,1720U);
    }
  }
  #line 288 
  cif_mutex_unlock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 289 
  return ret;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int mi1_ext_write(struct net_device *dev, int phy_addr, int mmd_addr, u16 reg_addr, u16 val)
{
  #line 297 
  int ret;
  #line 295 
  struct port_info *pi = netdev_priv(dev);
  #line 296 
  struct adapter *adapter = pi->adapter;
  #line 299 
  cif_mutex_lock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 300 
  ret = mi1_wr_addr(adapter,phy_addr,mmd_addr,(int)reg_addr);
  #line 301 
  if (ret == 0) {
    #line 302 
    t3_write_reg(adapter,1720U,(unsigned int)val);
    #line 303 
    t3_write_reg(adapter,1724U,1U);
    #line 304 
    ret = t3_wait_op_done(adapter,1724,2147483648U,0,20,10);
  }
  #line 307 
  cif_mutex_unlock_mdio_lock_of_adapter(& adapter->mdio_lock);
  #line 308 
  return ret;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static struct mdio_ops mi1_mdio_ext_ops = {.read = & mi1_ext_read, .write = & mi1_ext_write, .mode_support = 6U};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_mdio_change_bits(struct cphy *phy, int mmd, int reg, unsigned int clear, unsigned int set)
{
  #line 331 
  int ret;
  #line 332 
  unsigned int val;
  #line 334 
  ret = t3_mdio_read(phy,mmd,reg,& val);
  #line 335 
  if (ret == 0) {
    #line 336 
    val = ~ clear & val;
    #line 337 
    ret = t3_mdio_write(phy,mmd,reg,val | set);
  }
  #line 339 
  return ret;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_reset(struct cphy *phy, int mmd, int wait)
{
  #line 354 
  int err;
  #line 355 
  unsigned int ctl;
  #line 371 
  int tmp;
  #line 357 
  err = t3_mdio_change_bits(phy,mmd,0,2048U,32768U);
  #line 359 
  if (err != 0 || wait == 0) 
                             #line 360 
                             return err;
  #line 362 
  while (1) {
    #line 363 
    err = t3_mdio_read(phy,mmd,0,& ctl);
    #line 364 
    if (err != 0) 
                  #line 365 
                  return err;
    #line 366 
    ctl &= 32768U;
    #line 367 
    if (ctl != 0U) 
                   #line 368 
                   msleep(1U);
    #line 369 
    if (ctl != 0U) {
      #line 369 
      wait --;
      #line 369 
      if (! (wait != 0)) 
                         #line 362 
                         break;
    }
    else 
         #line 362 
         break;
  }
  #line 371 
  if (ctl != 0U) 
                 #line 371 
                 tmp = -1; else 
                                #line 371 
                                tmp = 0;
  #line 371 
  return tmp;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_advertise(struct cphy *phy, unsigned int advert)
{
  #line 384 
  int err;
  #line 385 
  unsigned int val = 0U;
  #line 387 
  err = t3_mdio_read(phy,-1,9,& val);
  #line 388 
  if (err != 0) 
                #line 389 
                return err;
  #line 391 
  val &= 4294966527U;
  #line 392 
  if (((unsigned long)advert & 16UL) != 0UL) 
                                             #line 393 
                                             val |= 256U;
  #line 394 
  if (((unsigned long)advert & 32UL) != 0UL) 
                                             #line 395 
                                             val |= 512U;
  #line 397 
  err = t3_mdio_write(phy,-1,9,val);
  #line 398 
  if (err != 0) 
                #line 399 
                return err;
  #line 401 
  val = 1U;
  #line 402 
  if (((unsigned long)advert & 1UL) != 0UL) 
                                            #line 403 
                                            val |= 32U;
  #line 404 
  if (((unsigned long)advert & 2UL) != 0UL) 
                                            #line 405 
                                            val |= 64U;
  #line 406 
  if (((unsigned long)advert & 4UL) != 0UL) 
                                            #line 407 
                                            val |= 128U;
  #line 408 
  if (((unsigned long)advert & 8UL) != 0UL) 
                                            #line 409 
                                            val |= 256U;
  #line 410 
  if (((unsigned long)advert & 8192UL) != 0UL) 
                                               #line 411 
                                               val |= 1024U;
  #line 412 
  if (((unsigned long)advert & 16384UL) != 0UL) 
                                                #line 413 
                                                val |= 2048U;
  #line 414 
  return t3_mdio_write(phy,-1,4,val);
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_advertise_fiber(struct cphy *phy, unsigned int advert)
{
  #line 427 
  unsigned int val = 0U;
  #line 429 
  if (((unsigned long)advert & 16UL) != 0UL) 
                                             #line 430 
                                             val |= 64U;
  #line 431 
  if (((unsigned long)advert & 32UL) != 0UL) 
                                             #line 432 
                                             val |= 32U;
  #line 433 
  if (((unsigned long)advert & 8192UL) != 0UL) 
                                               #line 434 
                                               val |= 128U;
  #line 435 
  if (((unsigned long)advert & 16384UL) != 0UL) 
                                                #line 436 
                                                val |= 256U;
  #line 437 
  return t3_mdio_write(phy,-1,4,val);
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_set_phy_speed_duplex(struct cphy *phy, int speed, int duplex)
{
  #line 451 
  int err;
  #line 452 
  unsigned int ctl;
  #line 454 
  err = t3_mdio_read(phy,-1,0,& ctl);
  #line 455 
  if (err != 0) 
                #line 456 
                return err;
  #line 458 
  if (speed >= 0) {
    #line 459 
    ctl &= 4294954943U;
    #line 460 
    if (speed == 100) 
                      #line 461 
                      ctl |= 8192U;
    else 
      #line 462 
      if (speed == 1000) 
                         #line 463 
                         ctl |= 64U;
  }
  #line 465 
  if (duplex >= 0) {
    #line 466 
    ctl &= 4294962943U;
    #line 467 
    if (duplex == 1) 
                     #line 468 
                     ctl |= 256U;
  }
  #line 470 
  if ((ctl & 64U) != 0U) 
                         #line 471 
                         ctl |= 4096U;
  #line 472 
  return t3_mdio_write(phy,-1,0,ctl);
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_enable(struct cphy *phy)
{
  #line 477 
  return t3_mdio_write(phy,1,36866,1U);
}

#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_disable(struct cphy *phy)
{
  #line 483 
  return t3_mdio_write(phy,1,36866,0U);
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_clear(struct cphy *phy)
{
  #line 488 
  u32 val;
  #line 490 
  return t3_mdio_read(phy,1,36869,& val);
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_lasi_intr_handler(struct cphy *phy)
{
  #line 495 
  unsigned int status;
  #line 496 
  int err = t3_mdio_read(phy,1,36869,& status);
  #line 499 
  if (err != 0) 
                #line 500 
                return err;
  #line 501 
  return (int)status & 1;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static struct adapter_info t3_adap_info[8U] = {{.nports0 = (unsigned char)1U, .nports1 = (unsigned char)1U, .gpio_out = 1310740U, .gpio_intr = {(unsigned char)3U, (unsigned char)5U}, .mdio_ops = & mi1_mdio_ops, .desc = (char *)"Chelsio PE9000"}, {.nports0 = (unsigned char)1U, .nports1 = (unsigned char)1U, .gpio_out = 1310740U, .gpio_intr = {(unsigned char)3U, (unsigned char)5U}, .mdio_ops = & mi1_mdio_ops, .desc = (char *)"Chelsio T302"}, {.nports0 = (unsigned char)1U, .gpio_out = 214041666U, .caps = 4352UL, .mdio_ops = & mi1_mdio_ext_ops, .desc = (char *)"Chelsio T310"}, {.nports0 = (unsigned char)1U, .nports1 = (unsigned char)1U, .gpio_out = 217449570U, .gpio_intr = {(unsigned char)9U, (unsigned char)3U}, .caps = 4352UL, .mdio_ops = & mi1_mdio_ext_ops, .desc = (char *)"Chelsio T320"}, [6] = {.nports0 = (unsigned char)1U, .gpio_out = 81134658U, .gpio_intr = {(unsigned char)9U}, .caps = 4352UL, .mdio_ops = & mi1_mdio_ext_ops, .desc = (char *)"Chelsio T310"}, {.nports0 = (unsigned char)1U, .gpio_out = 12714050U, .gpio_intr = {(unsigned char)9U}, .caps = 4352UL, .mdio_ops = & mi1_mdio_ext_ops, .desc = (char *)"Chelsio N320E-G2"}};
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
struct adapter_info *t3_get_adapter_info(unsigned int id)
{
  #line 544 
  struct adapter_info *tmp;
  #line 544 
  if (id <= 7U) 
                #line 544 
                tmp = & t3_adap_info[id]; else 
                                               #line 544 
                                               tmp = (struct adapter_info *)0;
  #line 544 
  return tmp;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static struct port_type_info port_types[11U] = {[1] = {.phy_prep = & t3_ael1002_phy_prep}, {.phy_prep = & t3_vsc8211_phy_prep}, [4] = {.phy_prep = & t3_xaui_direct_phy_prep}, {.phy_prep = & t3_ael2005_phy_prep}, {.phy_prep = & t3_qt2045_phy_prep}, {.phy_prep = & t3_ael1006_phy_prep}, [9] = {.phy_prep = & t3_aq100x_phy_prep}, {.phy_prep = & t3_ael2020_phy_prep}};
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_seeprom_read(struct adapter *adapter, u32 addr, __le32 *data)
{
  #line 615 
  u16 val;
  #line 617 
  u32 v;
  #line 616 
  int attempts = 40;
  #line 618 
  unsigned int base = adapter->params.pci.vpd_cap_addr;
  #line 620 
  if (addr > 8191U && addr != 16384U || (addr & 3U) != 0U) 
                                                           #line 621 
                                                           return -22;
  #line 623 
  pci_write_config_word(adapter->pdev,(int)(base + 2U),(unsigned short)((int)((unsigned short)addr)));
  #line 624 
  while (1) {
    #line 625 
    __const_udelay(42950UL);
    #line 626 
    pci_read_config_word(adapter->pdev,(int)(base + 2U),& val);
    #line 627 
    if (((int)val & 32768) == 0) {
      #line 627 
      attempts --;
      #line 627 
      if (! (attempts != 0)) 
                             #line 624 
                             break;
    }
    else 
         #line 624 
         break;
  }
  #line 629 
  if (((int)val & 32768) == 0) {
    #line 630 
    _dev_err(& (adapter->pdev)->dev,(char *)"reading EEPROM address 0x%x failed\n",addr);
    #line 631 
    return -5;
  }
  #line 633 
  pci_read_config_dword(adapter->pdev,(int)(base + 4U),& v);
  #line 634 
  *data = v;
  #line 635 
  return 0;
}

#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_seeprom_write(struct adapter *adapter, u32 addr, __le32 data)
{
  #line 649 
  u16 val;
  #line 650 
  int attempts = 40;
  #line 651 
  unsigned int base = adapter->params.pci.vpd_cap_addr;
  #line 653 
  if (addr > 8191U && addr != 16384U || (addr & 3U) != 0U) 
                                                           #line 654 
                                                           return -22;
  #line 656 
  pci_write_config_dword(adapter->pdev,(int)(base + 4U),data);
  #line 658 
  pci_write_config_word(adapter->pdev,(int)(base + 2U),(unsigned short)((int)((unsigned int)((unsigned short)addr) | 32768U)));
  #line 660 
  while (1) {
    #line 661 
    msleep(1U);
    #line 662 
    pci_read_config_word(adapter->pdev,(int)(base + 2U),& val);
    #line 663 
    if (((int)val & 32768) != 0) {
      #line 663 
      attempts --;
      #line 663 
      if (! (attempts != 0)) 
                             #line 660 
                             break;
    }
    else 
         #line 660 
         break;
  }
  #line 665 
  if (((int)val & 32768) != 0) {
    #line 666 
    _dev_err(& (adapter->pdev)->dev,(char *)"write to EEPROM address 0x%x failed\n",addr);
    #line 667 
    return -5;
  }
  #line 669 
  return 0;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_seeprom_wp(struct adapter *adapter, int enable)
{
  #line 681 
  unsigned int tmp;
  #line 681 
  if (enable != 0) 
                   #line 681 
                   tmp = 12U; else 
                                   #line 681 
                                   tmp = 0U;
  #line 681 
  ;
  #line 681 
  return t3_seeprom_write(adapter,16384U,tmp);
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int vpdstrtouint(char *s, u8 len, unsigned int base, unsigned int *val)
{
  #line 686 
  char tok[256U];
  #line 688 
  memcpy((void *)(& tok),(void *)s,(unsigned long)len);
  #line 689 
  tok[(int)len] = (char)0;
  #line 690 
  ;
  #line 690 
  ;
  #line 690 
  return kstrtouint(strim((char *)(& tok)),base,val);
}

#line 693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int vpdstrtou16(char *s, u8 len, unsigned int base, u16 *val)
{
  #line 695 
  char tok[256U];
  #line 697 
  memcpy((void *)(& tok),(void *)s,(unsigned long)len);
  #line 698 
  tok[(int)len] = (char)0;
  #line 699 
  ;
  #line 699 
  ;
  #line 699 
  return kstrtou16(strim((char *)(& tok)),base,val);
}

#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int get_vpd_params(struct adapter *adapter, struct vpd_params *p)
{
  #line 711 
  int i;
  #line 711 
  int addr;
  #line 711 
  int ret;
  #line 712 
  struct t3_vpd vpd;
  #line 718 
  ret = t3_seeprom_read(adapter,3072U,(__le32 *)(& vpd));
  #line 719 
  if (ret != 0) 
                #line 720 
                return ret;
  #line 721 
  if ((unsigned int)vpd.id_tag == 130U) 
                                        #line 721 
                                        addr = 3072; else 
                                                          #line 721 
                                                          addr = 0;
  #line 723 
  i = 0;
  #line 723 
  while ((unsigned int)i <= 183U) {
    #line 724 
    ret = t3_seeprom_read(adapter,(unsigned int)(addr + i),(__le32 *)((u8 *)(& vpd) + (unsigned long)i));
    #line 726 
    if (ret != 0) 
                  #line 727 
                  return ret;
    #line 723 
    i += 4;
  }
  #line 730 
  ret = vpdstrtouint((char *)(& vpd.cclk_data),(unsigned char)((int)vpd.cclk_len),10U,& p->cclk);
  #line 731 
  if (ret != 0) 
                #line 732 
                return ret;
  #line 733 
  ret = vpdstrtouint((char *)(& vpd.mclk_data),(unsigned char)((int)vpd.mclk_len),10U,& p->mclk);
  #line 734 
  if (ret != 0) 
                #line 735 
                return ret;
  #line 736 
  ret = vpdstrtouint((char *)(& vpd.uclk_data),(unsigned char)((int)vpd.uclk_len),10U,& p->uclk);
  #line 737 
  if (ret != 0) 
                #line 738 
                return ret;
  #line 739 
  ret = vpdstrtouint((char *)(& vpd.mdc_data),(unsigned char)((int)vpd.mdc_len),10U,& p->mdc);
  #line 740 
  if (ret != 0) 
                #line 741 
                return ret;
  #line 742 
  ret = vpdstrtouint((char *)(& vpd.mt_data),(unsigned char)((int)vpd.mt_len),10U,& p->mem_timing);
  #line 743 
  if (ret != 0) 
                #line 744 
                return ret;
  #line 745 
  memcpy((void *)(& p->sn),(void *)(& vpd.sn_data),16UL);
  #line 748 
  if (adapter->params.rev == 0U && (unsigned int)vpd.port0_data[0] == 0U) {
    #line 749 
    if (uses_xaui(adapter) != 0) 
                                 #line 749 
                                 p->port_type[0] = (unsigned char)1U; else 
                                                                    #line 749 
                                                                    p->port_type[0] = (unsigned char)2U;
    #line 750 
    if (uses_xaui(adapter) != 0) 
                                 #line 750 
                                 p->port_type[1] = (unsigned char)6U; else 
                                                                    #line 750 
                                                                    p->port_type[1] = (unsigned char)2U;
  }
  else {
    #line 752 
    p->port_type[0] = (unsigned char)hex_to_bin((char)((int)((char)vpd.port0_data[0])));
    #line 753 
    p->port_type[1] = (unsigned char)hex_to_bin((char)((int)((char)vpd.port1_data[0])));
    #line 754 
    ret = vpdstrtou16((char *)(& vpd.xaui0cfg_data),(unsigned char)((int)vpd.xaui0cfg_len),16U,& p->xauicfg[0]);
    #line 756 
    if (ret != 0) 
                  #line 757 
                  return ret;
    #line 758 
    ret = vpdstrtou16((char *)(& vpd.xaui1cfg_data),(unsigned char)((int)vpd.xaui1cfg_len),16U,& p->xauicfg[1]);
    #line 760 
    if (ret != 0) 
                  #line 761 
                  return ret;
  }
  #line 764 
  ret = hex2bin((u8 *)(& p->eth_base),(char *)(& vpd.na_data),6UL);
  #line 765 
  if (ret < 0) 
               #line 766 
               return -22;
  #line 767 
  return 0;
}

#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int sf1_read(struct adapter *adapter, unsigned int byte_cnt, int cont, u32 *valp)
{
  #line 803 
  int ret;
  #line 805 
  if (byte_cnt + 4294967295U > 3U) 
                                   #line 806 
                                   return -22;
  #line 807 
  if ((t3_read_reg(adapter,1756U) & 2147483648U) != 0U) 
                                                        #line 808 
                                                        return -16;
  #line 809 
  t3_write_reg(adapter,1756U,(unsigned int)(cont << 3) | ((byte_cnt + 4294967295U) << 1));
  #line 810 
  ret = t3_wait_op_done(adapter,1756,2147483648U,0,5,10);
  #line 811 
  if (ret == 0) 
                #line 812 
                *valp = t3_read_reg(adapter,1752U);
  #line 813 
  return ret;
}

#line 827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int sf1_write(struct adapter *adapter, unsigned int byte_cnt, int cont, u32 val)
{
  #line 830 
  if (byte_cnt + 4294967295U > 3U) 
                                   #line 831 
                                   return -22;
  #line 832 
  if ((t3_read_reg(adapter,1756U) & 2147483648U) != 0U) 
                                                        #line 833 
                                                        return -16;
  #line 834 
  t3_write_reg(adapter,1752U,val);
  #line 835 
  t3_write_reg(adapter,1756U,((unsigned int)(cont << 3) | ((byte_cnt + 4294967295U) << 1)) | 1U);
  #line 837 
  return t3_wait_op_done(adapter,1756,2147483648U,0,5,10);
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int flash_wait_op(struct adapter *adapter, int attempts, int delay)
{
  #line 850 
  int ret;
  #line 851 
  u32 status;
  #line 853 
  while (1) {
    #line 854 
    ret = sf1_write(adapter,1U,1,5U);
    #line 854 
    if (ret != 0) 
                  #line 856 
                  return ret;
    else {
      #line 855 
      ret = sf1_read(adapter,1U,0,& status);
      #line 854 
      if (ret != 0) 
                    #line 856 
                    return ret;
    }
    #line 857 
    if ((status & 1U) == 0U) 
                             #line 858 
                             return 0;
    #line 859 
    attempts --;
    #line 859 
    if (attempts == 0) 
                       #line 860 
                       return -11;
    #line 861 
    if (delay != 0) 
                    #line 862 
                    msleep((unsigned int)delay);
  }
}

#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_read_flash(struct adapter *adapter, unsigned int addr, unsigned int nwords, u32 *data, int byte_oriented)
{
  #line 882 
  int ret;
  #line 884 
  if ((unsigned long)addr + (unsigned long)nwords * 4UL > 524288UL || (addr & 3U) != 0U) 
    #line 885 
    return -22;
  #line 887 
  addr = __builtin_bswap32(addr) | 11U;
  #line 889 
  ret = sf1_write(adapter,4U,1,addr);
  #line 889 
  if (ret != 0) 
                #line 891 
                return ret;
  else {
    #line 890 
    ret = sf1_read(adapter,1U,1,data);
    #line 889 
    if (ret != 0) 
                  #line 891 
                  return ret;
  }
  #line 893 
  while (nwords != 0U) {
    #line 894 
    ret = sf1_read(adapter,4U,nwords > 1U,data);
    #line 895 
    if (ret != 0) 
                  #line 896 
                  return ret;
    #line 897 
    if (byte_oriented != 0) 
                            #line 898 
                            *data = __builtin_bswap32(*data);
    #line 893 
    nwords --;
    #line 893 
    data ++;
  }
  #line 900 
  return 0;
}

#line 913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_write_flash(struct adapter *adapter, unsigned int addr, unsigned int n, u8 *data)
{
  #line 916 
  int ret;
  #line 917 
  u32 buf[64U];
  #line 918 
  unsigned int i;
  #line 918 
  unsigned int c;
  #line 918 
  unsigned int left;
  #line 918 
  unsigned int val;
  #line 918 
  unsigned int offset = addr & 255U;
  #line 920 
  if (addr + n > 524288U || offset + n > 256U) 
                                               #line 921 
                                               return -22;
  #line 923 
  val = __builtin_bswap32(addr) | 2U;
  #line 925 
  ret = sf1_write(adapter,1U,0,6U);
  #line 925 
  if (ret != 0) 
                #line 927 
                return ret;
  else {
    #line 926 
    ret = sf1_write(adapter,4U,1,val);
    #line 925 
    if (ret != 0) 
                  #line 927 
                  return ret;
  }
  #line 929 
  left = n;
  #line 929 
  while (left != 0U) {
    {
      #line 930 
      unsigned int __UNIQUE_ID___x438;
      #line 930 
      unsigned int tmp_0;
      {
        #line 930 
        __UNIQUE_ID___x438 = left;
        #line 930 
        unsigned int __UNIQUE_ID___y439 = 4U;
        #line 930 
        if (__UNIQUE_ID___x438 < __UNIQUE_ID___y439) 
                                                     #line 930 
                                                     tmp_0 = __UNIQUE_ID___x438; else 
                                                                    #line 930 
                                                                    tmp_0 = __UNIQUE_ID___y439;
        }
      #line 930 
      c = tmp_0;
      #line 931 
      val = 0U;
      #line 931 
      i = 0U;
      #line 931 
      while (i < c) {
        #line 932 
        u8 *tmp_2;
        #line 932 
        tmp_2 = data;
        #line 932 
        data ++;
        #line 932 
        val = (val << 8) + (unsigned int)*tmp_2;
        #line 931 
        i ++;
      }
      #line 934 
      ret = sf1_write(adapter,c,c != left,val);
      #line 935 
      if (ret != 0) 
                    #line 936 
                    return ret;
    }
    #line 929 
    left -= c;
  }
  #line 938 
  ret = flash_wait_op(adapter,5,1);
  #line 938 
  if (ret != 0) 
                #line 939 
                return ret;
  #line 942 
  ret = t3_read_flash(adapter,addr & 4294967040U,64U,(u32 *)(& buf),1);
  #line 943 
  if (ret != 0) 
                #line 944 
                return ret;
  #line 946 
  if (memcmp((void *)(data + - n),
               (void *)((u8 *)(& buf) + (unsigned long)offset),
               (unsigned long)n) != 0) 
    #line 947 
    return -5;
  #line 948 
  return 0;
}

#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_get_tp_version(struct adapter *adapter, u32 *vers)
{
  #line 960 
  int ret;
  #line 963 
  t3_write_reg(adapter,1256U,0U);
  #line 964 
  ret = t3_wait_op_done(adapter,1256,1U,1,5,1);
  #line 966 
  if (ret != 0) 
                #line 967 
                return ret;
  #line 969 
  *vers = t3_read_reg(adapter,1260U);
  #line 971 
  return 0;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_check_tpsram_version(struct adapter *adapter)
{
  #line 982 
  int ret;
  #line 983 
  u32 vers;
  #line 984 
  unsigned int major;
  #line 984 
  unsigned int minor;
  #line 986 
  if (adapter->params.rev == 0U) 
                                 #line 987 
                                 return 0;
  #line 990 
  ret = t3_get_tp_version(adapter,& vers);
  #line 991 
  if (ret != 0) 
                #line 992 
                return ret;
  #line 994 
  major = (vers >> 16) & 255U;
  #line 995 
  minor = (vers >> 8) & 255U;
  #line 997 
  if (major == 1U && minor == 1U) 
                                  #line 998 
                                  return 0; else 
                                                 #line 1000 
                                                 _dev_err(& (adapter->pdev)->dev,(char *)"found wrong TP version (%u.%u), ",major,minor,1,1);
  #line 1004 
  return -22;
}

#line 1017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_check_tpsram(struct adapter *adapter, u8 *tp_sram, unsigned int size)
{
  #line 1020 
  u32 csum;
  #line 1021 
  unsigned int i;
  #line 1022 
  __be32 *p = (__be32 *)tp_sram;
  #line 1025 
  csum = 0U;
  #line 1025 
  i = 0U;
  #line 1025 
  while (size / 4U > i) {
    #line 1026 
    csum = __builtin_bswap32(*(p + (unsigned long)i)) + csum;
    #line 1025 
    i ++;
  }
  #line 1027 
  if (csum != 4294967295U) {
    #line 1028 
    _dev_err(& (adapter->pdev)->dev,(char *)"corrupted protocol SRAM image, checksum %u\n",csum);
    #line 1030 
    return -22;
  }
  #line 1033 
  return 0;
}

#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_get_fw_version(struct adapter *adapter, u32 *vers)
{
  #line 1050 
  return t3_read_flash(adapter,524284U,1U,vers,0);
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_check_fw_version(struct adapter *adapter)
{
  #line 1062 
  int ret;
  #line 1063 
  u32 vers;
  #line 1064 
  unsigned int type;
  #line 1064 
  unsigned int major;
  #line 1064 
  unsigned int minor;
  #line 1066 
  ret = t3_get_fw_version(adapter,& vers);
  #line 1067 
  if (ret != 0) 
                #line 1068 
                return ret;
  #line 1070 
  type = vers >> 28;
  #line 1071 
  major = (vers >> 16) & 4095U;
  #line 1072 
  minor = (vers >> 8) & 255U;
  #line 1074 
  if ((type == 1U && major == 7U) && minor == 12U) 
                                                   #line 1076 
                                                   return 0;
  else 
    #line 1077 
    if (major != 7U || minor <= 11U) 
                                     #line 1078 
                                     _dev_warn(& (adapter->pdev)->dev,(char *)"found old FW minor version(%u.%u), ",major,minor,7,12);
    else {
      #line 1082 
      _dev_warn(& (adapter->pdev)->dev,(char *)"found newer FW version(%u.%u), ",major,minor,7,12);
      #line 1085 
      return 0;
    }
  #line 1087 
  return -22;
}

#line 1098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_flash_erase_sectors(struct adapter *adapter, int start, int end)
{
  #line 1100 
  while (start <= end) {
    #line 1101 
    int ret;
    #line 1103 
    ret = sf1_write(adapter,1U,0,6U);
    #line 1103 
    if (ret != 0) 
                  #line 1107 
                  return ret;
    else {
      #line 1104 
      ret = sf1_write(adapter,4U,0,(unsigned int)((start << 8) | 216));
      #line 1103 
      if (ret != 0) 
                    #line 1107 
                    return ret;
      else {
        #line 1106 
        ret = flash_wait_op(adapter,5,500);
        #line 1105 
        if (ret != 0) 
                      #line 1107 
                      return ret;
      }
    }
    #line 1108 
    start ++;
  }
  #line 1110 
  return 0;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_load_fw(struct adapter *adapter, u8 *fw_data, unsigned int size)
{
  #line 1126 
  u32 csum;
  #line 1127 
  unsigned int i;
  #line 1129 
  int ret;
  #line 1129 
  int addr;
  #line 1128 
  __be32 *p = (__be32 *)fw_data;
  #line 1129 
  int fw_sector = 7;
  #line 1131 
  if ((size & 3U) != 0U || size <= 7U) 
                                       #line 1132 
                                       return -22;
  #line 1133 
  if (size > 65540U) 
                     #line 1134 
                     return -27;
  #line 1136 
  csum = 0U;
  #line 1136 
  i = 0U;
  #line 1136 
  while (size / 4U > i) {
    #line 1137 
    csum = __builtin_bswap32(*(p + (unsigned long)i)) + csum;
    #line 1136 
    i ++;
  }
  #line 1138 
  if (csum != 4294967295U) {
    #line 1139 
    _dev_err(& (adapter->pdev)->dev,(char *)"corrupted firmware image, checksum %u\n",csum);
    #line 1141 
    return -22;
  }
  #line 1144 
  ret = t3_flash_erase_sectors(adapter,fw_sector,fw_sector);
  #line 1145 
  if (ret != 0) 
                #line 1146 
                goto out;
  #line 1148 
  size += 4294967288U;
  #line 1149 
  addr = 458752;
  #line 1149 
  while (size != 0U) {
    #line 1150 
    unsigned int tmp_0;
    #line 1150 
    unsigned int __UNIQUE_ID___x440;
    {
      #line 1150 
      __UNIQUE_ID___x440 = size;
      #line 1150 
      unsigned int __UNIQUE_ID___y441 = 256U;
      #line 1150 
      if (__UNIQUE_ID___x440 < __UNIQUE_ID___y441) 
                                                   #line 1150 
                                                   tmp_0 = __UNIQUE_ID___x440; else 
                                                                    #line 1150 
                                                                    tmp_0 = __UNIQUE_ID___y441;
      }
    #line 1150 
    unsigned int chunk_size = tmp_0;
    #line 1152 
    ret = t3_write_flash(adapter,(unsigned int)addr,chunk_size,fw_data);
    #line 1153 
    if (ret != 0) 
                  #line 1154 
                  goto out;
    #line 1156 
    addr = (int)((unsigned int)addr + chunk_size);
    #line 1157 
    fw_data += (unsigned long)chunk_size;
    #line 1158 
    size -= chunk_size;
  }
  #line 1161 
  ret = t3_write_flash(adapter,524284U,4U,fw_data);
  #line 1162 
  out: 
       #line 1162 
  ;
  #line 1163 
  if (ret != 0) 
                #line 1164 
                _dev_err(& (adapter->pdev)->dev,(char *)"firmware download failed, error %d\n",ret);
  #line 1165 
  return ret;
}

#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_cim_ctl_blk_read(struct adapter *adap, unsigned int addr, unsigned int n, unsigned int *valp)
{
  #line 1183 
  int ret = 0;
  #line 1185 
  if ((t3_read_reg(adap,688U) & 131072U) != 0U) 
                                                #line 1186 
                                                return -16;
  #line 1188 
  while (1) {
    #line 1188 
    if (ret == 0) {
      #line 1188 
      unsigned int tmp_1;
      #line 1188 
      tmp_1 = n;
      #line 1188 
      n --;
      #line 1188 
      ;
      #line 1188 
      if (! (tmp_1 != 0U)) 
                           #line 1188 
                           break;
    }
    else 
         #line 1188 
         break;
    #line 1189 
    t3_write_reg(adap,688U,addr + 8192U);
    #line 1190 
    ret = t3_wait_op_done(adap,688,131072U,0,5,2);
    #line 1192 
    if (ret == 0) {
      #line 1193 
      unsigned int *tmp_0;
      #line 1193 
      tmp_0 = valp;
      #line 1193 
      valp ++;
      #line 1193 
      *tmp_0 = t3_read_reg(adap,692U);
    }
    #line 1188 
    addr += 4U;
  }
  #line 1195 
  return ret;
}

#line 1198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void t3_gate_rx_traffic(struct cmac *mac, u32 *rx_cfg, u32 *rx_hash_high, u32 *rx_hash_low)
{
  #line 1202 
  t3_mac_disable_exact_filters(mac);
  #line 1205 
  *rx_cfg = t3_read_reg(mac->adapter,2064U);
  #line 1206 
  t3_set_reg_field(mac->adapter,2064U,7U,2U);
  #line 1210 
  *rx_hash_high = t3_read_reg(mac->adapter,2072U);
  #line 1211 
  t3_write_reg(mac->adapter,2072U,0U);
  #line 1213 
  *rx_hash_low = t3_read_reg(mac->adapter,2068U);
  #line 1214 
  t3_write_reg(mac->adapter,2068U,0U);
  #line 1217 
  msleep(1U);
  #line 1218 
  return;
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void t3_open_rx_traffic(struct cmac *mac, u32 rx_cfg, u32 rx_hash_high, u32 rx_hash_low)
{
  #line 1223 
  t3_mac_enable_exact_filters(mac);
  #line 1224 
  t3_set_reg_field(mac->adapter,2064U,7U,rx_cfg);
  #line 1227 
  t3_write_reg(mac->adapter,2072U,rx_hash_high);
  #line 1228 
  t3_write_reg(mac->adapter,2068U,rx_hash_low);
  #line 1229 
  return;
}

#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_link_changed(struct adapter *adapter, int port_id)
{
  #line 1242 
  int link_ok;
  #line 1242 
  int speed;
  #line 1242 
  int duplex;
  #line 1242 
  int fc;
  #line 1243 
  struct port_info *pi = adap2pinfo(adapter,port_id);
  #line 1244 
  struct cphy *phy = & pi->phy;
  #line 1245 
  struct cmac *mac = & pi->mac;
  #line 1246 
  struct link_config *lc = & pi->link_config;
  #line 1248 
  (*((phy->ops)->get_link_status))(phy,& link_ok,& speed,& duplex,& fc);
  #line 1250 
  if (lc->link_ok == 0U && link_ok != 0) {
    #line 1251 
    u32 rx_cfg;
    #line 1251 
    u32 rx_hash_high;
    #line 1251 
    u32 rx_hash_low;
    #line 1252 
    u32 status;
    #line 1254 
    t3_xgm_intr_enable(adapter,port_id);
    #line 1255 
    t3_gate_rx_traffic(mac,& rx_cfg,& rx_hash_high,& rx_hash_low);
    #line 1256 
    t3_write_reg(adapter,mac->offset + 2060U,0U);
    #line 1257 
    t3_mac_enable(mac,1);
    #line 1259 
    status = t3_read_reg(adapter,mac->offset + 2156U);
    #line 1260 
    if ((status & 512U) != 0U) {
      #line 1261 
      (mac->stats.link_faults) ++;
      #line 1262 
      pi->link_fault = 1;
    }
    #line 1264 
    t3_open_rx_traffic(mac,rx_cfg,rx_hash_high,rx_hash_low);
  }
  #line 1267 
  if (((int)lc->requested_fc & 4) != 0) 
                                        #line 1268 
                                        fc = (int)lc->requested_fc & fc; else 
                                                                    #line 1270 
                                                                    fc = (int)lc->requested_fc & 3;
  #line 1272 
  if (((lc->link_ok == (unsigned int)link_ok && (int)lc->speed == speed) && (int)lc->duplex == duplex) && (int)lc->fc == fc) 
    #line 1274 
    return;
  #line 1276 
  if (lc->link_ok != (unsigned int)link_ok && adapter->params.rev != 0U) {
    #line 1276 
    if (uses_xaui(adapter) != 0) {
      #line 1280 
      unsigned int tmp_0;
      #line 1278 
      if (link_ok != 0) 
                        #line 1279 
                        t3b_pcs_reset(mac);
      #line 1280 
      if (link_ok != 0) 
                        #line 1280 
                        tmp_0 = 3U; else 
                                         #line 1280 
                                         tmp_0 = 0U;
      #line 1280 
      ;
      #line 1280 
      ;
      #line 1280 
      t3_write_reg(adapter,mac->offset + 2268U,tmp_0);
    }
  }
  #line 1283 
  lc->link_ok = (unsigned int)link_ok;
  #line 1284 
  if (speed >= 0) 
                  #line 1284 
                  lc->speed = (unsigned short)speed; else 
                                                          #line 1284 
                                                          lc->speed = (unsigned short)65535U;
  #line 1285 
  if (duplex >= 0) 
                   #line 1285 
                   lc->duplex = (unsigned char)duplex; else 
                                                            #line 1285 
                                                            lc->duplex = (unsigned char)255U;
  #line 1287 
  if ((link_ok != 0 && speed >= 0) && (unsigned int)lc->autoneg == 1U) {
    #line 1289 
    t3_mac_set_speed_duplex_fc(mac,speed,duplex,fc);
    #line 1290 
    lc->fc = (unsigned char)fc;
  }
  #line 1293 
  t3_os_link_changed(adapter,port_id,(link_ok != 0 && pi->link_fault == 0) != 0,speed,duplex,fc);
  #line 1294 
  return;
}

#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_link_fault(struct adapter *adapter, int port_id)
{
  #line 1303 
  int link_ok;
  #line 1303 
  int speed;
  #line 1303 
  int duplex;
  #line 1303 
  int fc;
  #line 1303 
  int link_fault;
  #line 1304 
  u32 rx_cfg;
  #line 1304 
  u32 rx_hash_high;
  #line 1304 
  u32 rx_hash_low;
  #line 1299 
  struct port_info *pi = adap2pinfo(adapter,port_id);
  #line 1300 
  struct cmac *mac = & pi->mac;
  #line 1301 
  struct cphy *phy = & pi->phy;
  #line 1302 
  struct link_config *lc = & pi->link_config;
  #line 1306 
  t3_gate_rx_traffic(mac,& rx_cfg,& rx_hash_high,& rx_hash_low);
  #line 1308 
  if (adapter->params.rev != 0U) {
    #line 1308 
    if (uses_xaui(adapter) != 0) 
                                 #line 1309 
                                 t3_write_reg(adapter,mac->offset + 2268U,0U);
  }
  #line 1311 
  t3_write_reg(adapter,mac->offset + 2060U,0U);
  #line 1312 
  t3_mac_enable(mac,1);
  #line 1314 
  t3_open_rx_traffic(mac,rx_cfg,rx_hash_high,rx_hash_low);
  #line 1316 
  link_fault = (int)t3_read_reg(adapter,mac->offset + 2156U);
  #line 1318 
  link_fault &= 512;
  #line 1320 
  link_ok = (int)lc->link_ok;
  #line 1321 
  speed = (int)lc->speed;
  #line 1322 
  duplex = (int)lc->duplex;
  #line 1323 
  fc = (int)lc->fc;
  #line 1325 
  (*((phy->ops)->get_link_status))(phy,& link_ok,& speed,& duplex,& fc);
  #line 1327 
  if (link_fault != 0) {
    #line 1328 
    lc->link_ok = 0U;
    #line 1329 
    lc->speed = (unsigned short)65535U;
    #line 1330 
    lc->duplex = (unsigned char)255U;
    #line 1332 
    t3_os_link_fault(adapter,port_id,0);
    #line 1335 
    if (link_ok != 0) 
                      #line 1336 
                      (mac->stats.link_faults) ++;
  }
  else {
    #line 1338 
    if (link_ok != 0) 
                      #line 1339 
                      t3_write_reg(adapter,mac->offset + 2268U,3U);
    #line 1342 
    pi->link_fault = 0;
    #line 1343 
    lc->link_ok = (unsigned int)((unsigned char)link_ok);
    #line 1344 
    if (speed >= 0) 
                    #line 1344 
                    lc->speed = (unsigned short)speed; else 
                                                            #line 1344 
                                                            lc->speed = (unsigned short)65535U;
    #line 1345 
    if (duplex >= 0) 
                     #line 1345 
                     lc->duplex = (unsigned char)duplex; else 
                                                              #line 1345 
                                                              lc->duplex = (unsigned char)255U;
    #line 1346 
    t3_os_link_fault(adapter,port_id,link_ok);
  }
  #line 1348 
  return;
}

#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_link_start(struct cphy *phy, struct cmac *mac, struct link_config *lc)
{
  #line 1365 
  unsigned int fc = (unsigned int)lc->requested_fc & 3U;
  #line 1367 
  lc->link_ok = 0U;
  #line 1368 
  if (((unsigned long)lc->supported & 64UL) != 0UL) {
    #line 1369 
    lc->advertising &= 4294942719U;
    #line 1370 
    if (fc != 0U) {
      #line 1371 
      lc->advertising |= 16384U;
      #line 1372 
      if ((fc & 1U) != 0U) 
                           #line 1373 
                           lc->advertising |= 8192U;
    }
    #line 1375 
    (*((phy->ops)->advertise))(phy,lc->advertising);
    #line 1377 
    if ((unsigned int)lc->autoneg == 0U) {
      #line 1378 
      lc->speed = lc->requested_speed;
      #line 1379 
      lc->duplex = lc->requested_duplex;
      #line 1380 
      lc->fc = (unsigned char)fc;
      #line 1381 
      t3_mac_set_speed_duplex_fc(mac,(int)lc->speed,(int)lc->duplex,(int)fc);
      #line 1384 
      (*((phy->ops)->set_speed_duplex))(phy,(int)lc->speed,(int)lc->duplex);
    }
    else 
         #line 1386 
         (*((phy->ops)->autoneg_enable))(phy);
  }
  else {
    #line 1388 
    t3_mac_set_speed_duplex_fc(mac,-1,-1,(int)fc);
    #line 1389 
    lc->fc = (unsigned char)fc;
    #line 1390 
    (*((phy->ops)->reset))(phy,0);
  }
  #line 1392 
  return 0;
}

#line 1403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_set_vlan_accel(struct adapter *adapter, unsigned int ports, int on)
{
  #line 1406 
  unsigned int tmp;
  #line 1406 
  if (on != 0) 
               #line 1406 
               tmp = ports << 12; else 
                                       #line 1406 
                                       tmp = 0U;
  #line 1405 
  ;
  #line 1405 
  ;
  #line 1405 
  t3_set_reg_field(adapter,772U,ports << 12,tmp);
  #line 1408 
  return;
}

#line 1432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_handle_intr_status(struct adapter *adapter, unsigned int reg, unsigned int mask, struct intr_info *acts, unsigned long *stats)
{
  #line 1437 
  int fatal = 0;
  #line 1438 
  unsigned int status = t3_read_reg(adapter,reg) & mask;
  #line 1440 
  while (acts->mask != 0U) {
    #line 1441 
    if ((acts->mask & status) == 0U) 
                                     #line 1442 
                                     goto __Cont;
    #line 1443 
    if ((unsigned int)acts->fatal != 0U) {
      #line 1444 
      fatal ++;
      #line 1445 
      _dev_alert(& (adapter->pdev)->dev,(char *)"%s (0x%x)\n",acts->msg,acts->mask & status);
      #line 1447 
      status = ~ acts->mask & status;
    }
    else 
      #line 1448 
      if (acts->msg != (char *)0) 
                                  #line 1449 
                                  _dev_warn(& (adapter->pdev)->dev,(char *)"%s (0x%x)\n",acts->msg,acts->mask & status);
    #line 1451 
    if ((int)acts->stat_idx >= 0) 
                                  #line 1452 
                                  (*(stats + (unsigned long)acts->stat_idx)) ++;
    #line 1440 
    __Cont: 
            #line 1440 
    acts ++;
  }
  #line 1454 
  if (status != 0U) 
                    #line 1455 
                    t3_write_reg(adapter,reg,status);
  #line 1456 
  return fatal;
}

#line 1520  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void pci_intr_handler(struct adapter *adapter)
{
  #line 1522 
  struct intr_info pcix1_intr_info[17U] = {{.mask = 1U, .msg = (char *)"PCI master detected parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2U, .msg = (char *)"PCI signaled target abort", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4U, .msg = (char *)"PCI received target abort", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 8U, .msg = (char *)"PCI received master abort", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 16U, .msg = (char *)"PCI signaled system error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 32U, .msg = (char *)"PCI detected parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 64U, .msg = (char *)"PCI split completion discarded", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 128U, .msg = (char *)"PCI unexpected split completion error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 256U, .msg = (char *)"PCI received split completion error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 512U, .msg = (char *)"PCI correctable ECC error", .stat_idx = (short)2, .fatal = (unsigned short)0U}, {.mask = 1024U, .msg = (char *)"PCI uncorrectable ECC error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2048U, .msg = (char *)"PCI PIO FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 12288U, .msg = (char *)"PCI write FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 245760U, .msg = (char *)"PCI read FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 3932160U, .msg = (char *)"PCI command FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 29360128U, .msg = (char *)"PCI MSI-X table/PBA parity ", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1548 
  if (t3_handle_intr_status(adapter,132U,4194303U,
                            (struct intr_info *)(& pcix1_intr_info),
                            (unsigned long *)(& adapter->irq_stats)) != 0) 
    #line 1550 
    t3_fatal_err(adapter);
  #line 1551 
  return;
}

#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void pcie_intr_handler(struct adapter *adapter)
{
  #line 1558 
  struct intr_info pcie_intr_info[14U] = {{.mask = 1U, .msg = (char *)"PCI PEX error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 64U, .msg = (char *)"PCI unexpected split completion DMA read error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 128U, .msg = (char *)"PCI unexpected split completion DMA command error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 256U, .msg = (char *)"PCI PIO FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 512U, .msg = (char *)"PCI write FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 1024U, .msg = (char *)"PCI read FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2048U, .msg = (char *)"PCI command FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 28672U, .msg = (char *)"PCI MSI-X table/PBA parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 32768U, .msg = (char *)"PCI retry buffer parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 65536U, .msg = (char *)"PCI retry LUT parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 131072U, .msg = (char *)"PCI Rx parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 262144U, .msg = (char *)"PCI Tx parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 8355840U, .msg = (char *)"PCI BIST error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1578 
  if ((t3_read_reg(adapter,132U) & 1U) != 0U) {
    #line 1579 
    ;
    #line 1579 
    _dev_alert(& (adapter->pdev)->dev,(char *)"PEX error code 0x%x\n",t3_read_reg(adapter,164U));
  }
  #line 1582 
  if (t3_handle_intr_status(adapter,132U,8359872U,
                              (struct intr_info *)(& pcie_intr_info),
                              (unsigned long *)(& adapter->irq_stats)) != 0) 
    #line 1584 
    t3_fatal_err(adapter);
  #line 1585 
  return;
}

#line 1590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void tp_intr_handler(struct adapter *adapter)
{
  #line 1606 
  struct intr_info *tmp;
  #line 1592 
  struct intr_info tp_intr_info[4U] = {{.mask = 16777215U, .msg = (char *)"TP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 16777216U, .msg = (char *)"TP out of Rx pages", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 33554432U, .msg = (char *)"TP out of Tx pages", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1599 
  struct intr_info tp_intr_info_t3c[4U] = {{.mask = 536870911U, .msg = (char *)"TP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 536870912U, .msg = (char *)"TP out of Rx pages", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 1073741824U, .msg = (char *)"TP out of Tx pages", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1606 
  if (adapter->params.rev <= 3U) 
                                 #line 1606 
                                 tmp = (struct intr_info *)(& tp_intr_info); else 
                                                                    #line 1606 
                                                                    tmp = (struct intr_info *)(& tp_intr_info_t3c);
  #line 1606 
  ;
  #line 1606 
  if (t3_handle_intr_status(adapter,1140U,4294967295U,tmp,
                              (unsigned long *)0UL) != 0) 
    #line 1609 
    t3_fatal_err(adapter);
  #line 1610 
  return;
}

#line 1615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void cim_intr_handler(struct adapter *adapter)
{
  #line 1617 
  struct intr_info cim_intr_info[25U] = {{.mask = 1U, .msg = (char *)"CIM reserved space write", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2U, .msg = (char *)"CIM SDRAM address out of range", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4U, .msg = (char *)"CIM flash address out of range", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 16U, .msg = (char *)"CIM block write to boot space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 32U, .msg = (char *)"CIM write to cached flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 64U, .msg = (char *)"CIM single write to flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 128U, .msg = (char *)"CIM block read from flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 256U, .msg = (char *)"CIM block write to flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 512U, .msg = (char *)"CIM block read from CTL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 1024U, .msg = (char *)"CIM block write to CTL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2048U, .msg = (char *)"CIM block read from PL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4096U, .msg = (char *)"CIM block write to PL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 131072U, .msg = (char *)"CIM DRAM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 262144U, .msg = (char *)"CIM icache parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 524288U, .msg = (char *)"CIM dcache parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 1048576U, .msg = (char *)"CIM OBQ SGE parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2097152U, .msg = (char *)"CIM OBQ ULPHI parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4194304U, .msg = (char *)"CIM OBQ ULPLO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 8388608U, .msg = (char *)"CIM IBQ SGELO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 16777216U, .msg = (char *)"CIM IBQ SGEHI parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 33554432U, .msg = (char *)"CIM IBQ ULP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 67108864U, .msg = (char *)"CIM IBQ TP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 134217728U, .msg = (char *)"CIM itag parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 268435456U, .msg = (char *)"CIM dtag parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1645 
  if (t3_handle_intr_status(adapter,668U,4294967295U,
                            (struct intr_info *)(& cim_intr_info),
                            (unsigned long *)0UL) != 0) 
    #line 1647 
    t3_fatal_err(adapter);
  #line 1648 
  return;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void ulprx_intr_handler(struct adapter *adapter)
{
  #line 1655 
  struct intr_info ulprx_intr_info[9U] = {{.mask = 1U, .msg = (char *)"ULP RX data parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2U, .msg = (char *)"ULP RX command parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4U, .msg = (char *)"ULP RX ArbPF1 parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 8U, .msg = (char *)"ULP RX ArbPF0 parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 16U, .msg = (char *)"ULP RX ArbF parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 32U, .msg = (char *)"ULP RX PCMDMUX parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 64U, .msg = (char *)"ULP RX frame error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 128U, .msg = (char *)"ULP RX frame error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1667 
  if (t3_handle_intr_status(adapter,1288U,4294967295U,
                            (struct intr_info *)(& ulprx_intr_info),
                            (unsigned long *)0UL) != 0) 
    #line 1669 
    t3_fatal_err(adapter);
  #line 1670 
  return;
}

#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void ulptx_intr_handler(struct adapter *adapter)
{
  #line 1677 
  struct intr_info ulptx_intr_info[4U] = {{.mask = 1U, .msg = (char *)"ULP TX channel 0 PBL out of bounds", .stat_idx = (short)0, .fatal = (unsigned short)0U}, {.mask = 2U, .msg = (char *)"ULP TX channel 1 PBL out of bounds", .stat_idx = (short)1, .fatal = (unsigned short)0U}, {.mask = 252U, .msg = (char *)"ULP TX parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1686 
  if (t3_handle_intr_status(adapter,1416U,4294967295U,
                            (struct intr_info *)(& ulptx_intr_info),
                            (unsigned long *)(& adapter->irq_stats)) != 0) 
    #line 1688 
    t3_fatal_err(adapter);
  #line 1689 
  return;
}

#line 1703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void pmtx_intr_handler(struct adapter *adapter)
{
  #line 1705 
  struct intr_info pmtx_intr_info[6U] = {{.mask = 262144U, .msg = (char *)"PMTX 0-length pcmd", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 258048U, .msg = (char *)"PMTX ispi framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4032U, .msg = (char *)"PMTX ospi framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 56U, .msg = (char *)"PMTX ispi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 7U, .msg = (char *)"PMTX ospi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1716 
  if (t3_handle_intr_status(adapter,1532U,4294967295U,
                            (struct intr_info *)(& pmtx_intr_info),
                            (unsigned long *)0UL) != 0) 
    #line 1718 
    t3_fatal_err(adapter);
  #line 1719 
  return;
}

#line 1733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void pmrx_intr_handler(struct adapter *adapter)
{
  #line 1735 
  struct intr_info pmrx_intr_info[6U] = {{.mask = 262144U, .msg = (char *)"PMRX 0-length pcmd", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 258048U, .msg = (char *)"PMRX ispi framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4032U, .msg = (char *)"PMRX ospi framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 56U, .msg = (char *)"PMRX ispi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 7U, .msg = (char *)"PMRX ospi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1746 
  if (t3_handle_intr_status(adapter,1500U,4294967295U,
                            (struct intr_info *)(& pmrx_intr_info),
                            (unsigned long *)0UL) != 0) 
    #line 1748 
    t3_fatal_err(adapter);
  #line 1749 
  return;
}

#line 1754  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void cplsw_intr_handler(struct adapter *adapter)
{
  #line 1756 
  struct intr_info cplsw_intr_info[7U] = {{.mask = 32U, .msg = (char *)"CPL switch CIM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 16U, .msg = (char *)"CPL switch CIM overflow", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 8U, .msg = (char *)"CPL switch TP framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 4U, .msg = (char *)"CPL switch SGE framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 2U, .msg = (char *)"CPL switch CIM framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 1U, .msg = (char *)"CPL switch no-switch error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1766 
  if (t3_handle_intr_status(adapter,1620U,4294967295U,
                            (struct intr_info *)(& cplsw_intr_info),
                            (unsigned long *)0UL) != 0) 
    #line 1768 
    t3_fatal_err(adapter);
  #line 1769 
  return;
}

#line 1774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void mps_intr_handler(struct adapter *adapter)
{
  #line 1776 
  struct intr_info mps_intr_info[2U] = {{.mask = 511U, .msg = (char *)"MPS parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U}, {.mask = 0U, .msg = (char *)0, .stat_idx = (short)0, .fatal = (unsigned short)0}};
  #line 1781 
  if (t3_handle_intr_status(adapter,1568U,4294967295U,
                            (struct intr_info *)(& mps_intr_info),
                            (unsigned long *)0UL) != 0) 
    #line 1783 
    t3_fatal_err(adapter);
  #line 1784 
  return;
}

#line 1791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void mc7_intr_handler(struct mc7 *mc7)
{
  #line 1793 
  struct adapter *adapter = mc7->adapter;
  #line 1794 
  u32 cause = t3_read_reg(adapter,mc7->offset + 380U);
  #line 1796 
  if ((cause & 1U) != 0U) {
    #line 1797 
    (mc7->stats.corr_err) ++;
    #line 1798 
    ;
    #line 1798 
    ;
    #line 1798 
    _dev_warn(& (adapter->pdev)->dev,(char *)"%s MC7 correctable error at addr 0x%x, ",mc7->name,t3_read_reg(adapter,mc7->offset + 308U),t3_read_reg(adapter,mc7->offset + 312U),t3_read_reg(adapter,mc7->offset + 316U),t3_read_reg(adapter,mc7->offset + 320U));
  }
  #line 1806 
  if ((cause & 2U) != 0U) {
    #line 1807 
    (mc7->stats.uncorr_err) ++;
    #line 1808 
    ;
    #line 1808 
    ;
    #line 1808 
    _dev_alert(& (adapter->pdev)->dev,(char *)"%s MC7 uncorrectable error at addr 0x%x, ",mc7->name,t3_read_reg(adapter,mc7->offset + 324U),t3_read_reg(adapter,mc7->offset + 328U),t3_read_reg(adapter,mc7->offset + 332U),t3_read_reg(adapter,mc7->offset + 336U));
  }
  #line 1816 
  if (((cause >> 2) & 32767U) != 0U) {
    #line 1817 
    (mc7->stats.parity_err) ++;
    #line 1818 
    _dev_alert(& (adapter->pdev)->dev,(char *)"%s MC7 parity error 0x%x\n",mc7->name,(cause >> 2) & 32767U);
  }
  #line 1822 
  if ((cause & 131072U) != 0U) {
    #line 1823 
    u32 addr = 0U;
    #line 1825 
    if (adapter->params.rev != 0U) 
                                   #line 1826 
                                   addr = t3_read_reg(adapter,mc7->offset + 300U);
    #line 1828 
    (mc7->stats.addr_err) ++;
    #line 1829 
    _dev_alert(& (adapter->pdev)->dev,(char *)"%s MC7 address error: 0x%x\n",mc7->name,addr);
  }
  #line 1833 
  if ((cause & 262142U) != 0U) 
                               #line 1834 
                               t3_fatal_err(adapter);
  #line 1836 
  t3_write_reg(adapter,mc7->offset + 380U,cause);
  #line 1837 
  return;
}

#line 1844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int mac_intr_handler(struct adapter *adap, unsigned int idx)
{
  #line 1846 
  struct cmac *mac = & adap2pinfo(adap,(int)idx)->mac;
  #line 1853 
  u32 cause = t3_read_reg(adap,mac->offset + 2264U) & 4294963199U;
  #line 1856 
  if ((cause & 917504U) != 0U) {
    #line 1857 
    (mac->stats.tx_fifo_parity_err) ++;
    #line 1858 
    _dev_alert(& (adap->pdev)->dev,(char *)"port%d: MAC TX FIFO parity error\n",idx);
  }
  #line 1860 
  if ((cause & 114688U) != 0U) {
    #line 1861 
    (mac->stats.rx_fifo_parity_err) ++;
    #line 1862 
    _dev_alert(& (adap->pdev)->dev,(char *)"port%d: MAC RX FIFO parity error\n",idx);
  }
  #line 1864 
  if ((cause & 8192U) != 0U) 
                             #line 1865 
                             (mac->stats.tx_fifo_urun) ++;
  #line 1866 
  if ((cause & 4096U) != 0U) 
                             #line 1867 
                             (mac->stats.rx_fifo_ovfl) ++;
  #line 1868 
  if ((cause & 240U) != 0U) 
                            #line 1869 
                            (mac->stats.serdes_signal_loss) ++;
  #line 1870 
  if ((cause & 8U) != 0U) 
                          #line 1871 
                          (mac->stats.xaui_pcs_ctc_err) ++;
  #line 1872 
  if ((cause & 4U) != 0U) 
                          #line 1873 
                          (mac->stats.xaui_pcs_align_change) ++;
  #line 1874 
  if ((cause & 1U) != 0U) {
    #line 1875 
    t3_set_reg_field(adap,mac->offset + 2260U,1U,0U);
    #line 1878 
    (mac->stats.link_faults) ++;
    #line 1880 
    t3_os_link_fault_handler(adap,(int)idx);
  }
  #line 1883 
  if ((cause & 1032192U) != 0U) 
                                #line 1884 
                                t3_fatal_err(adap);
  #line 1886 
  t3_write_reg(adap,mac->offset + 2264U,cause);
  #line 1887 
  return cause != 0U;
}

#line 1893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_phy_intr_handler(struct adapter *adapter)
{
  #line 1895 
  u32 i;
  #line 1895 
  u32 cause = t3_read_reg(adapter,220U);
  #line 1897 
  i = 0U;
  #line 1897 
  while (adapter->params.nports > i) {
    {
      #line 1898 
      struct port_info *p = adap2pinfo(adapter,(int)i);
      #line 1900 
      if ((p->phy.caps & 16777216U) == 0U) 
                                           #line 1901 
                                           goto __Cont;
      #line 1903 
      if (((unsigned int)(1 << (int)(adapter->params.info)->gpio_intr[i]) & cause) != 0U) {
        #line 1904 
        int phy_cause = (*((p->phy.ops)->intr_handler))(& p->phy);
        #line 1906 
        if ((phy_cause & 1) != 0) 
                                  #line 1907 
                                  t3_link_changed(adapter,(int)i);
        #line 1908 
        if ((phy_cause & 2) != 0) 
                                  #line 1909 
                                  (p->phy.fifo_errors) ++;
        #line 1910 
        if ((phy_cause & 4) != 0) 
                                  #line 1911 
                                  t3_os_phymod_changed(adapter,(int)i);
      }
    }
    #line 1897 
    __Cont: 
            #line 1897 
    i ++;
  }
  #line 1915 
  t3_write_reg(adapter,220U,cause);
  #line 1916 
  return 0;
}

#line 1922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_slow_intr_handler(struct adapter *adapter)
{
  #line 1924 
  u32 cause = t3_read_reg(adapter,1764U);
  #line 1926 
  cause = adapter->slow_intr_mask & cause;
  #line 1927 
  if (cause == 0U) 
                   #line 1928 
                   return 0;
  #line 1929 
  if ((cause & 2U) != 0U) {
    #line 1930 
    if (is_pcie(adapter) != 0U) 
                                #line 1931 
                                pcie_intr_handler(adapter); else 
                                                                 #line 1933 
                                                                 pci_intr_handler(adapter);
  }
  #line 1935 
  if ((cause & 1U) != 0U) 
                          #line 1936 
                          t3_sge_err_intr_handler(adapter);
  #line 1937 
  if ((cause & 4U) != 0U) 
                          #line 1938 
                          mc7_intr_handler(& adapter->pmrx);
  #line 1939 
  if ((cause & 8U) != 0U) 
                          #line 1940 
                          mc7_intr_handler(& adapter->pmtx);
  #line 1941 
  if ((cause & 16U) != 0U) 
                           #line 1942 
                           mc7_intr_handler(& adapter->cm);
  #line 1943 
  if ((cause & 32U) != 0U) 
                           #line 1944 
                           cim_intr_handler(adapter);
  #line 1945 
  if ((cause & 64U) != 0U) 
                           #line 1946 
                           tp_intr_handler(adapter);
  #line 1947 
  if ((cause & 128U) != 0U) 
                            #line 1948 
                            ulprx_intr_handler(adapter);
  #line 1949 
  if ((cause & 256U) != 0U) 
                            #line 1950 
                            ulptx_intr_handler(adapter);
  #line 1951 
  if ((cause & 512U) != 0U) 
                            #line 1952 
                            pmrx_intr_handler(adapter);
  #line 1953 
  if ((cause & 1024U) != 0U) 
                             #line 1954 
                             pmtx_intr_handler(adapter);
  #line 1955 
  if ((cause & 4096U) != 0U) 
                             #line 1956 
                             cplsw_intr_handler(adapter);
  #line 1957 
  if ((cause & 2048U) != 0U) 
                             #line 1958 
                             mps_intr_handler(adapter);
  #line 1959 
  if ((cause & 262144U) != 0U) 
                               #line 1960 
                               t3_mc5_intr_handler(& adapter->mc5);
  #line 1961 
  if ((cause & 524288U) != 0U) 
                               #line 1962 
                               mac_intr_handler(adapter,0U);
  #line 1963 
  if ((cause & 1048576U) != 0U) 
                                #line 1964 
                                mac_intr_handler(adapter,1U);
  #line 1965 
  if ((cause & 8388608U) != 0U) 
                                #line 1966 
                                t3_os_ext_intr_handler(adapter);
  #line 1969 
  t3_write_reg(adapter,1764U,cause);
  #line 1970 
  t3_read_reg(adapter,1764U);
  #line 1971 
  return 1;
}

#line 1974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static unsigned int calc_gpio_intr(struct adapter *adap)
{
  #line 1976 
  unsigned int i;
  #line 1976 
  unsigned int gpi_intr = 0U;
  #line 1978 
  i = 0U;
  #line 1978 
  while (adap->params.nports > i) {
    #line 1979 
    ;
    #line 1979 
    if ((adap2pinfo(adap,(int)i)->phy.caps & 16777216U) != 0U) 
      #line 1979 
      if ((unsigned int)(adap->params.info)->gpio_intr[i] != 0U) 
                                                                 #line 1981 
                                                                 gpi_intr = (unsigned int)(1 << (int)(adap->params.info)->gpio_intr[i]) | gpi_intr;
    #line 1978 
    i ++;
  }
  #line 1982 
  return gpi_intr;
}

#line 1993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_intr_enable(struct adapter *adapter)
{
  #line 2013 
  unsigned int tmp;
  #line 1995 
  struct addr_val_pair intr_en_avp[10U] = {{.reg_addr = 96U, .val = 4294954232U}, {.reg_addr = 376U, .val = 262143U}, {.reg_addr = 504U, .val = 262143U}, {.reg_addr = 632U, .val = 262143U}, {.reg_addr = 1856U, .val = 491968U}, {.reg_addr = 1284U, .val = 255U}, {.reg_addr = 1528U, .val = 524287U}, {.reg_addr = 1496U, .val = 524287U}, {.reg_addr = 664U, .val = 536748023U}, {.reg_addr = 1564U, .val = 511U}};
  #line 2010 
  adapter->slow_intr_mask = 10231807U;
  #line 2012 
  t3_write_regs(adapter,(struct addr_val_pair *)(& intr_en_avp),10,0U);
  #line 2013 
  if (adapter->params.rev > 3U) 
                                #line 2013 
                                tmp = 46137343U; else 
                                                      #line 2013 
                                                      tmp = 62914559U;
  #line 2013 
  ;
  #line 2013 
  t3_write_reg(adapter,1136U,tmp);
  #line 2016 
  if (adapter->params.rev != 0U) {
    #line 2017 
    t3_write_reg(adapter,1616U,63U);
    #line 2019 
    t3_write_reg(adapter,1412U,255U);
  }
  else {
    #line 2023 
    t3_write_reg(adapter,1616U,47U);
    #line 2024 
    t3_write_reg(adapter,1412U,252U);
  }
  #line 2027 
  ;
  #line 2027 
  t3_write_reg(adapter,216U,calc_gpio_intr(adapter));
  #line 2029 
  if (is_pcie(adapter) != 0U) 
                              #line 2030 
                              t3_write_reg(adapter,128U,8359872U); else 
                                                                    #line 2032 
                                                                    t3_write_reg(adapter,128U,4194303U);
  #line 2033 
  t3_write_reg(adapter,1760U,adapter->slow_intr_mask);
  #line 2034 
  t3_read_reg(adapter,1760U);
  #line 2035 
  return;
}

#line 2044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_intr_disable(struct adapter *adapter)
{
  #line 2046 
  t3_write_reg(adapter,1760U,0U);
  #line 2047 
  t3_read_reg(adapter,1760U);
  #line 2048 
  adapter->slow_intr_mask = 0U;
  #line 2049 
  return;
}

#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_intr_clear(struct adapter *adapter)
{
  #line 2077 
  unsigned int i;
  #line 2059 
  unsigned int cause_reg_addr[16U] = {92U, 76U, 132U, 380U, 508U, 636U, 668U, 1140U, 1860U, 1288U, 1416U, 1620U, 1532U, 1500U, 1568U, 220U};
  #line 2080 
  i = 0U;
  #line 2080 
  while (adapter->params.nports > i) {
    #line 2081 
    t3_port_intr_clear(adapter,(int)i);
    #line 2080 
    i ++;
  }
  #line 2083 
  i = 0U;
  #line 2083 
  while (i <= 15U) {
    #line 2084 
    t3_write_reg(adapter,cause_reg_addr[i],4294967295U);
    #line 2083 
    i ++;
  }
  #line 2086 
  if (is_pcie(adapter) != 0U) 
                              #line 2087 
                              t3_write_reg(adapter,164U,4294967295U);
  #line 2088 
  t3_write_reg(adapter,1764U,4294967295U);
  #line 2089 
  t3_read_reg(adapter,1764U);
  #line 2090 
  return;
}

#line 2092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_xgm_intr_enable(struct adapter *adapter, int idx)
{
  #line 2094 
  struct port_info *pi = adap2pinfo(adapter,idx);
  #line 2096 
  t3_write_reg(adapter,pi->mac.offset + 2164U,512U);
  #line 2097 
  return;
}

#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_xgm_intr_disable(struct adapter *adapter, int idx)
{
  #line 2102 
  struct port_info *pi = adap2pinfo(adapter,idx);
  #line 2104 
  t3_write_reg(adapter,pi->mac.offset + 2168U,2047U);
  #line 2105 
  return;
}

#line 2116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_port_intr_enable(struct adapter *adapter, int idx)
{
  #line 2118 
  struct cphy *phy = & adap2pinfo(adapter,idx)->phy;
  #line 2120 
  t3_write_reg(adapter,(unsigned int)(idx * 512 + 2260),1040384U);
  #line 2121 
  t3_read_reg(adapter,(unsigned int)(idx * 512 + 2260));
  #line 2122 
  (*((phy->ops)->intr_enable))(phy);
  #line 2123 
  return;
}

#line 2133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_port_intr_disable(struct adapter *adapter, int idx)
{
  #line 2135 
  struct cphy *phy = & adap2pinfo(adapter,idx)->phy;
  #line 2137 
  t3_write_reg(adapter,(unsigned int)(idx * 512 + 2260),0U);
  #line 2138 
  t3_read_reg(adapter,(unsigned int)(idx * 512 + 2260));
  #line 2139 
  (*((phy->ops)->intr_disable))(phy);
  #line 2140 
  return;
}

#line 2150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void t3_port_intr_clear(struct adapter *adapter, int idx)
{
  #line 2152 
  struct cphy *phy = & adap2pinfo(adapter,idx)->phy;
  #line 2154 
  t3_write_reg(adapter,(unsigned int)(idx * 512 + 2264),4294967295U);
  #line 2155 
  t3_read_reg(adapter,(unsigned int)(idx * 512 + 2264));
  #line 2156 
  (*((phy->ops)->intr_clear))(phy);
  #line 2157 
  return;
}

#line 2170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_sge_write_context(struct adapter *adapter, unsigned int id, unsigned int type)
{
  #line 2173 
  if (type == 262144U) {
    #line 2180 
    t3_write_reg(adapter,32U,4294967295U);
    #line 2181 
    t3_write_reg(adapter,36U,4294967295U);
    #line 2182 
    t3_write_reg(adapter,40U,402653183U);
    #line 2183 
    t3_write_reg(adapter,44U,4294967295U);
  }
  else {
    #line 2185 
    t3_write_reg(adapter,32U,4294967295U);
    #line 2186 
    t3_write_reg(adapter,36U,4294967295U);
    #line 2187 
    t3_write_reg(adapter,40U,4294967295U);
    #line 2188 
    t3_write_reg(adapter,44U,4294967295U);
  }
  #line 2190 
  t3_write_reg(adapter,12U,(type | id) | 268435456U);
  #line 2192 
  return t3_wait_op_done(adapter,12,134217728U,0,100,1);
}

#line 2207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int clear_sge_ctxt(struct adapter *adap, unsigned int id, unsigned int type)
{
  #line 2210 
  t3_write_reg(adap,16U,0U);
  #line 2211 
  t3_write_reg(adap,20U,0U);
  #line 2212 
  t3_write_reg(adap,24U,0U);
  #line 2213 
  t3_write_reg(adap,28U,0U);
  #line 2214 
  t3_write_reg(adap,32U,4294967295U);
  #line 2215 
  t3_write_reg(adap,36U,4294967295U);
  #line 2216 
  t3_write_reg(adap,40U,4294967295U);
  #line 2217 
  t3_write_reg(adap,44U,4294967295U);
  #line 2218 
  t3_write_reg(adap,12U,(type | id) | 268435456U);
  #line 2220 
  return t3_wait_op_done(adap,12,134217728U,0,100,1);
}

#line 2241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_init_ecntxt(struct adapter *adapter, unsigned int id, int gts_enable, enum sge_context_type type, int respq, u64 base_addr, unsigned int size, unsigned int token, int gen, unsigned int cidx)
{
  #line 2246 
  unsigned int tmp;
  #line 2246 
  if (type == (unsigned int)SGE_CNTXT_OFLD) 
                                            #line 2246 
                                            tmp = 0U; else 
                                                           #line 2246 
                                                           tmp = 16U;
  #line 2246 
  unsigned int credits = tmp;
  #line 2248 
  if ((base_addr & 4095ULL) != 0ULL) 
                                     #line 2249 
                                     return -22;
  #line 2250 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2251 
                                                     return -16;
  #line 2253 
  base_addr >>= 12;
  #line 2254 
  t3_write_reg(adapter,16U,((cidx << 16) | credits) | (unsigned int)(gts_enable << 15));
  #line 2256 
  t3_write_reg(adapter,20U,((unsigned int)base_addr << 16U) | size);
  #line 2258 
  base_addr >>= 16;
  #line 2259 
  t3_write_reg(adapter,24U,(unsigned int)base_addr);
  #line 2260 
  base_addr >>= 32;
  #line 2261 
  t3_write_reg(adapter,28U,((((((unsigned int)base_addr & 15U) | (unsigned int)(respq << 4)) | ((unsigned int)type << 7)) | (unsigned int)(gen << 10)) | (token << 11)) | 2147483648U);
  #line 2265 
  return t3_sge_write_context(adapter,id,131072U);
}

#line 2284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_init_flcntxt(struct adapter *adapter, unsigned int id, int gts_enable, u64 base_addr, unsigned int size, unsigned int bsize, unsigned int cong_thres, int gen, unsigned int cidx)
{
  #line 2289 
  if ((base_addr & 4095ULL) != 0ULL) 
                                     #line 2290 
                                     return -22;
  #line 2291 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2292 
                                                     return -16;
  #line 2294 
  base_addr >>= 12;
  #line 2295 
  t3_write_reg(adapter,16U,(unsigned int)base_addr);
  #line 2296 
  base_addr >>= 32;
  #line 2297 
  t3_write_reg(adapter,20U,(unsigned int)base_addr | (cidx << 20));
  #line 2300 
  t3_write_reg(adapter,24U,(((size << 4) | (unsigned int)(gen << 20)) | (cidx >> 12)) | (bsize << 21));
  #line 2303 
  t3_write_reg(adapter,28U,((bsize >> 11) | (cong_thres << 21)) | (unsigned int)(gts_enable << 31));
  #line 2306 
  return t3_sge_write_context(adapter,id,65536U);
}

#line 2324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_init_rspcntxt(struct adapter *adapter, unsigned int id, int irq_vec_idx, u64 base_addr, unsigned int size, unsigned int fl_thres, int gen, unsigned int cidx)
{
  #line 2328 
  unsigned int intr = 0U;
  #line 2330 
  if ((base_addr & 4095ULL) != 0ULL) 
                                     #line 2331 
                                     return -22;
  #line 2332 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2333 
                                                     return -16;
  #line 2335 
  base_addr >>= 12;
  #line 2336 
  t3_write_reg(adapter,16U,(size << 16) | cidx);
  #line 2338 
  t3_write_reg(adapter,20U,(unsigned int)base_addr);
  #line 2339 
  base_addr >>= 32;
  #line 2340 
  if (irq_vec_idx >= 0) 
                        #line 2341 
                        intr = (unsigned int)(irq_vec_idx << 20) | 67108864U;
  #line 2342 
  t3_write_reg(adapter,24U,((unsigned int)base_addr | intr) | (unsigned int)(gen << 28));
  #line 2344 
  t3_write_reg(adapter,28U,fl_thres);
  #line 2345 
  return t3_sge_write_context(adapter,id,262144U);
}

#line 2363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_init_cqcntxt(struct adapter *adapter, unsigned int id, u64 base_addr, unsigned int size, int rspq, int ovfl_mode, unsigned int credits, unsigned int credit_thres)
{
  #line 2367 
  if ((base_addr & 4095ULL) != 0ULL) 
                                     #line 2368 
                                     return -22;
  #line 2369 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2370 
                                                     return -16;
  #line 2372 
  base_addr >>= 12;
  #line 2373 
  t3_write_reg(adapter,16U,size << 16);
  #line 2374 
  t3_write_reg(adapter,20U,(unsigned int)base_addr);
  #line 2375 
  base_addr >>= 32;
  #line 2376 
  t3_write_reg(adapter,24U,((((unsigned int)base_addr | (unsigned int)(rspq << 20)) | (unsigned int)(ovfl_mode << 31)) | (unsigned int)(ovfl_mode << 30)) | 536870912U);
  #line 2380 
  t3_write_reg(adapter,28U,(credit_thres << 16) | credits);
  #line 2382 
  return t3_sge_write_context(adapter,id,524288U);
}

#line 2394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_enable_ecntxt(struct adapter *adapter, unsigned int id, int enable)
{
  #line 2396 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2397 
                                                     return -16;
  #line 2399 
  t3_write_reg(adapter,32U,0U);
  #line 2400 
  t3_write_reg(adapter,36U,0U);
  #line 2401 
  t3_write_reg(adapter,40U,0U);
  #line 2402 
  t3_write_reg(adapter,44U,2147483648U);
  #line 2403 
  t3_write_reg(adapter,28U,(unsigned int)(enable << 31));
  #line 2404 
  t3_write_reg(adapter,12U,id | 268566528U);
  #line 2406 
  return t3_wait_op_done(adapter,12,134217728U,0,100,1);
}

#line 2418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_disable_fl(struct adapter *adapter, unsigned int id)
{
  #line 2420 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2421 
                                                     return -16;
  #line 2423 
  t3_write_reg(adapter,32U,0U);
  #line 2424 
  t3_write_reg(adapter,36U,0U);
  #line 2425 
  t3_write_reg(adapter,40U,1048560U);
  #line 2426 
  t3_write_reg(adapter,44U,0U);
  #line 2427 
  t3_write_reg(adapter,24U,0U);
  #line 2428 
  t3_write_reg(adapter,12U,id | 268500992U);
  #line 2430 
  return t3_wait_op_done(adapter,12,134217728U,0,100,1);
}

#line 2442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_disable_rspcntxt(struct adapter *adapter, unsigned int id)
{
  #line 2444 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2445 
                                                     return -16;
  #line 2447 
  t3_write_reg(adapter,32U,4294901760U);
  #line 2448 
  t3_write_reg(adapter,36U,0U);
  #line 2449 
  t3_write_reg(adapter,40U,0U);
  #line 2450 
  t3_write_reg(adapter,44U,0U);
  #line 2451 
  t3_write_reg(adapter,16U,0U);
  #line 2452 
  t3_write_reg(adapter,12U,id | 268697600U);
  #line 2454 
  return t3_wait_op_done(adapter,12,134217728U,0,100,1);
}

#line 2466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_disable_cqcntxt(struct adapter *adapter, unsigned int id)
{
  #line 2468 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2469 
                                                     return -16;
  #line 2471 
  t3_write_reg(adapter,32U,4294901760U);
  #line 2472 
  t3_write_reg(adapter,36U,0U);
  #line 2473 
  t3_write_reg(adapter,40U,0U);
  #line 2474 
  t3_write_reg(adapter,44U,0U);
  #line 2475 
  t3_write_reg(adapter,16U,0U);
  #line 2476 
  t3_write_reg(adapter,12U,id | 268959744U);
  #line 2478 
  return t3_wait_op_done(adapter,12,134217728U,0,100,1);
}

#line 2492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_sge_cqcntxt_op(struct adapter *adapter, unsigned int id, unsigned int op, unsigned int credits)
{
  #line 2495 
  u32 val;
  #line 2497 
  if ((t3_read_reg(adapter,12U) & 134217728U) != 0U) 
                                                     #line 2498 
                                                     return -16;
  #line 2500 
  t3_write_reg(adapter,16U,credits << 16);
  #line 2501 
  t3_write_reg(adapter,12U,((op << 28) | id) | 524288U);
  #line 2503 
  if (t3_wait_op_done_val(adapter,12,134217728U,0,100,1,& val) != 0) 
    #line 2505 
    return -5;
  #line 2507 
  if (op + 4294967294U <= 4U) {
    #line 2508 
    if (adapter->params.rev != 0U) 
                                   #line 2509 
                                   return (int)val & 65535;
    #line 2511 
    t3_write_reg(adapter,12U,id | 524288U);
    #line 2513 
    if (t3_wait_op_done(adapter,12,134217728U,0,100,1) != 0) 
                                                             #line 2516 
                                                             return -5;
    #line 2517 
    return (int)t3_read_reg(adapter,16U) & 65535;
  }
  #line 2519 
  return 0;
}

#line 2534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_config_rss(struct adapter *adapter, unsigned int rss_config, u8 *cpus, u16 *rspq)
{
  #line 2537 
  int i;
  #line 2537 
  int j;
  #line 2537 
  int cpu_idx = 0;
  #line 2537 
  int q_idx = 0;
  #line 2539 
  if (cpus != (u8 *)0U) {
    #line 2540 
    i = 0;
    #line 2540 
    while (i <= 63) {
      {
        #line 2541 
        u32 val = (unsigned int)(i << 16);
        #line 2543 
        j = 0;
        #line 2543 
        while (j <= 1) {
          {
            #line 2544 
            int tmp;
            #line 2544 
            tmp = cpu_idx;
            #line 2544 
            cpu_idx ++;
            #line 2544 
            val = (unsigned int)(((int)*(cpus + (unsigned long)tmp) & 63) << j * 8) | val;
            #line 2545 
            if ((unsigned int)*(cpus + (unsigned long)cpu_idx) == 255U) 
              #line 2546 
              cpu_idx = 0;
          }
          #line 2543 
          j ++;
        }
        #line 2548 
        t3_write_reg(adapter,1004U,val);
      }
      #line 2540 
      i ++;
    }
  }
  #line 2551 
  if (rspq != (u16 *)0U) {
    #line 2552 
    i = 0;
    #line 2552 
    while (i <= 63) {
      {
        #line 2554 
        int tmp_0;
        #line 2554 
        tmp_0 = q_idx;
        #line 2554 
        q_idx ++;
        #line 2553 
        ;
        #line 2553 
        ;
        #line 2553 
        t3_write_reg(adapter,1000U,(unsigned int)((i << 16) | (int)*(rspq + (unsigned long)tmp_0)));
        #line 2555 
        if ((unsigned int)*(rspq + (unsigned long)q_idx) == 65535U) 
                                                                    #line 2556 
                                                                    q_idx = 0;
      }
      #line 2552 
      i ++;
    }
  }
  #line 2559 
  t3_write_reg(adapter,1008U,rss_config);
  #line 2560 
  return;
}

#line 2569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_tp_set_offload_mode(struct adapter *adap, int enable)
{
  #line 2571 
  if (is_offload(adap) != 0) 
                             #line 2571 
                             goto _LOR;
  else 
    #line 2571 
    if (enable == 0) {
      #line 2572 
      unsigned int tmp;
      #line 2571 
      _LOR: { /* sequence */
              #line 2572 
              if (enable == 0) 
                               #line 2572 
                               tmp = 16384U; else 
                                                  #line 2572 
                                                  tmp = 0U;
              #line 2572 
              ;
            }
      #line 2572 
      t3_set_reg_field(adap,768U,16384U,tmp);
    }
  #line 2574 
  return;
}

#line 2585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
__inline static unsigned int pm_num_pages(unsigned int mem_size, unsigned int pg_size)
{
  #line 2588 
  unsigned int n = mem_size / pg_size;
  #line 2590 
  return n - n % 24U;
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void partition_mem(struct adapter *adap, struct tp_params *p)
{
  #line 2607 
  unsigned int m;
  #line 2607 
  unsigned int pstructs;
  #line 2607 
  unsigned int tids = t3_mc5_size(& adap->mc5);
  #line 2608 
  unsigned int timers = 0U;
  #line 2608 
  unsigned int timers_shift = 22U;
  #line 2610 
  if (adap->params.rev != 0U) 
    #line 2611 
    if (tids <= 16384U) {
      #line 2612 
      timers = 1U;
      #line 2613 
      timers_shift = 16U;
    }
    else 
      #line 2614 
      if (tids <= 65536U) {
        #line 2615 
        timers = 2U;
        #line 2616 
        timers_shift = 18U;
      }
      else 
        #line 2617 
        if (tids <= 262144U) {
          #line 2618 
          timers = 3U;
          #line 2619 
          timers_shift = 20U;
        }
  #line 2623 
  t3_write_reg(adap,796U,p->chan_rx_size | (p->chan_tx_size >> 16));
  #line 2626 
  t3_write_reg(adap,800U,0U);
  #line 2627 
  t3_write_reg(adap,820U,p->tx_pg_size);
  #line 2628 
  t3_write_reg(adap,824U,p->tx_num_pgs);
  #line 2629 
  ;
  #line 2629 
  t3_set_reg_field(adap,876U,983040U,(unsigned int)((fls(p->tx_pg_size) + -12) << 16));
  #line 2632 
  t3_write_reg(adap,808U,0U);
  #line 2633 
  t3_write_reg(adap,812U,p->rx_pg_size);
  #line 2634 
  t3_write_reg(adap,816U,p->rx_num_pgs);
  #line 2636 
  pstructs = p->rx_num_pgs + p->tx_num_pgs;
  #line 2638 
  pstructs += 48U;
  #line 2639 
  pstructs -= pstructs % 24U;
  #line 2640 
  t3_write_reg(adap,1132U,pstructs);
  #line 2642 
  m = tids * 128U;
  #line 2643 
  t3_write_reg(adap,88U,m);
  #line 2643 
  m += 4194304U;
  #line 2644 
  t3_write_reg(adap,108U,m);
  #line 2644 
  m += 4194304U;
  #line 2645 
  t3_write_reg(adap,792U,(timers << 28) | m);
  #line 2646 
  m = (((p->ntimer_qs + 4294967295U) << timers_shift) + m) + 4194304U;
  #line 2647 
  t3_write_reg(adap,788U,m);
  #line 2647 
  m = pstructs * 64U + m;
  #line 2648 
  t3_write_reg(adap,1128U,m);
  #line 2648 
  m = (pstructs / 24U) * 64U + m;
  #line 2649 
  t3_write_reg(adap,1120U,m);
  #line 2649 
  m = (p->rx_num_pgs / 24U) * 64U + m;
  #line 2650 
  t3_write_reg(adap,1124U,m);
  #line 2650 
  m = (p->tx_num_pgs / 24U) * 64U + m;
  #line 2652 
  m = (m + 4095U) & 4294963200U;
  #line 2653 
  t3_write_reg(adap,652U,m);
  #line 2654 
  t3_write_reg(adap,656U,p->cm_size - m);
  #line 2656 
  tids = ((p->cm_size - m) + 4291821568U) / 3072U + 4294967264U;
  #line 2657 
  m = ((t3_mc5_size(& adap->mc5) - adap->params.mc5.nservers) - adap->params.mc5.nfilters) - adap->params.mc5.nroutes;
  #line 2659 
  if (tids < m) 
                #line 2660 
                adap->params.mc5.nservers += m - tids;
  #line 2661 
  return;
}

#line 2663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
__inline static void tp_wr_indirect(struct adapter *adap, unsigned int addr, u32 val)
{
  #line 2666 
  t3_write_reg(adap,1088U,addr);
  #line 2667 
  t3_write_reg(adap,1092U,val);
  #line 2668 
  return;
}

#line 2670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void tp_config(struct adapter *adap, struct tp_params *p)
{
  #line 2686 
  unsigned int tmp;
  #line 2672 
  t3_write_reg(adap,776U,16824384U);
  #line 2675 
  t3_write_reg(adap,832U,37750037U);
  #line 2678 
  t3_write_reg(adap,836U,1343037463U);
  #line 2682 
  t3_set_reg_field(adap,768U,50331648U,49152U);
  #line 2684 
  t3_write_reg(adap,1060U,403970068U);
  #line 2685 
  t3_write_reg(adap,880U,84214021U);
  #line 2686 
  if (adap->params.rev != 0U) 
                              #line 2686 
                              tmp = 2048U; else 
                                                #line 2686 
                                                tmp = 8192U;
  #line 2686 
  ;
  #line 2686 
  t3_set_reg_field(adap,888U,0U,tmp);
  #line 2690 
  t3_set_reg_field(adap,840U,8388608U,1075412992U);
  #line 2694 
  t3_set_reg_field(adap,844U,16U,47104U);
  #line 2697 
  t3_write_reg(adap,1200U,1080U);
  #line 2698 
  t3_write_reg(adap,1200U,1000U);
  #line 2700 
  if (adap->params.rev != 0U) {
    #line 2701 
    tp_wr_indirect(adap,325U,1U);
    #line 2702 
    t3_set_reg_field(adap,876U,256U,256U);
    #line 2704 
    t3_set_reg_field(adap,840U,268435456U,268435456U);
    #line 2705 
    t3_set_reg_field(adap,876U,0U,1024U);
  }
  else 
       #line 2707 
       t3_set_reg_field(adap,876U,0U,512U);
  #line 2709 
  if (adap->params.rev == 4U) 
                              #line 2710 
                              t3_set_reg_field(adap,840U,15U,4U);
  #line 2714 
  t3_write_reg(adap,1068U,0U);
  #line 2715 
  t3_write_reg(adap,1072U,0U);
  #line 2716 
  t3_write_reg(adap,1076U,0U);
  #line 2717 
  t3_write_reg(adap,1080U,4062183424U);
  #line 2718 
  return;
}

#line 2735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void tp_set_timers(struct adapter *adap, unsigned int core_clk)
{
  #line 2758 
  unsigned int tmp_2;
  #line 2737 
  unsigned int tre = (unsigned int)(fls(core_clk / 20000U) + -1);
  #line 2738 
  unsigned int dack_re = (unsigned int)(fls(core_clk / 5000U) + -1);
  #line 2739 
  unsigned int tstamp_re = (unsigned int)fls(core_clk / 1000U);
  #line 2740 
  unsigned int tps = core_clk >> tre;
  #line 2742 
  t3_write_reg(adap,912U,((tre << 16) | dack_re) | (tstamp_re << 8));
  #line 2745 
  t3_write_reg(adap,948U,(core_clk >> dack_re) / 20U);
  #line 2747 
  t3_write_reg(adap,848U,50462976U);
  #line 2748 
  t3_write_reg(adap,852U,117835012U);
  #line 2749 
  t3_write_reg(adap,856U,185207048U);
  #line 2750 
  t3_write_reg(adap,860U,252579084U);
  #line 2751 
  t3_write_reg(adap,960U,105875465U);
  #line 2758 
  if (adap->params.rev == 0U) 
                              #line 2758 
                              tmp_2 = tps * 2U; else 
                                                     #line 2758 
                                                     tmp_2 = 0U;
  #line 2758 
  ;
  #line 2758 
  t3_write_reg(adap,916U,tmp_2);
  #line 2759 
  t3_write_reg(adap,920U,tps / 4U);
  #line 2760 
  t3_write_reg(adap,924U,tps * 64U);
  #line 2761 
  t3_write_reg(adap,928U,tps * 5U);
  #line 2762 
  t3_write_reg(adap,932U,tps * 64U);
  #line 2763 
  t3_write_reg(adap,936U,tps * 7200U);
  #line 2764 
  t3_write_reg(adap,940U,tps * 75U);
  #line 2765 
  t3_write_reg(adap,944U,tps * 3U);
  #line 2766 
  t3_write_reg(adap,952U,tps * 600U);
  #line 2767 
  return;
}

#line 2779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int t3_tp_set_coalescing_size(struct adapter *adap, unsigned int size, int psh)
{
  #line 2782 
  u32 val;
  #line 2784 
  if (size > 12288U) 
                     #line 2785 
                     return -22;
  #line 2787 
  val = t3_read_reg(adap,876U);
  #line 2788 
  val &= 4294967292U;
  #line 2790 
  if (size != 0U) {
    #line 2794 
    unsigned int __UNIQUE_ID___x442;
    #line 2794 
    unsigned int tmp;
    #line 2791 
    val |= 2U;
    #line 2792 
    if (psh != 0) 
                  #line 2793 
                  val |= 1U;
    {
      #line 2794 
      __UNIQUE_ID___x442 = 12288U;
      #line 2794 
      unsigned int __UNIQUE_ID___y443 = size;
      #line 2794 
      if (__UNIQUE_ID___x442 < __UNIQUE_ID___y443) 
                                                   #line 2794 
                                                   tmp = __UNIQUE_ID___x442; else 
                                                                    #line 2794 
                                                                    tmp = __UNIQUE_ID___y443;
      }
    #line 2794 
    size = tmp;
    #line 2795 
    t3_write_reg(adap,872U,size | 805306368U);
  }
  #line 2798 
  t3_write_reg(adap,876U,val);
  #line 2799 
  return 0;
}

#line 2810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void t3_tp_set_max_rxsize(struct adapter *adap, unsigned int size)
{
  #line 2812 
  t3_write_reg(adap,892U,(size << 16) | size);
  #line 2814 
  return;
}

#line 2816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void init_mtus(unsigned short *mtus)
{
  #line 2823 
  *mtus = (unsigned short)88U;
  #line 2824 
  *(mtus + 1U) = (unsigned short)88U;
  #line 2825 
  *(mtus + 2U) = (unsigned short)256U;
  #line 2826 
  *(mtus + 3U) = (unsigned short)512U;
  #line 2827 
  *(mtus + 4U) = (unsigned short)576U;
  #line 2828 
  *(mtus + 5U) = (unsigned short)1024U;
  #line 2829 
  *(mtus + 6U) = (unsigned short)1280U;
  #line 2830 
  *(mtus + 7U) = (unsigned short)1492U;
  #line 2831 
  *(mtus + 8U) = (unsigned short)1500U;
  #line 2832 
  *(mtus + 9U) = (unsigned short)2002U;
  #line 2833 
  *(mtus + 10U) = (unsigned short)2048U;
  #line 2834 
  *(mtus + 11U) = (unsigned short)4096U;
  #line 2835 
  *(mtus + 12U) = (unsigned short)4352U;
  #line 2836 
  *(mtus + 13U) = (unsigned short)8192U;
  #line 2837 
  *(mtus + 14U) = (unsigned short)9000U;
  #line 2838 
  *(mtus + 15U) = (unsigned short)9600U;
  #line 2839 
  return;
}

#line 2844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void init_cong_ctrl(unsigned short *a, unsigned short *b)
{
  #line 2846 
  *(a + 8U) = ((unsigned short)1U);
  #line 2846 
  *(a + 7U) = ((unsigned short)1U);
  #line 2846 
  *(a + 6U) = ((unsigned short)1U);
  #line 2846 
  *(a + 5U) = ((unsigned short)1U);
  #line 2846 
  *(a + 4U) = ((unsigned short)1U);
  #line 2846 
  *(a + 3U) = ((unsigned short)1U);
  #line 2846 
  *(a + 2U) = ((unsigned short)1U);
  #line 2846 
  *(a + 1U) = ((unsigned short)1U);
  #line 2846 
  *a = ((unsigned short)1U);
  #line 2847 
  *(a + 9U) = (unsigned short)2U;
  #line 2848 
  *(a + 10U) = (unsigned short)3U;
  #line 2849 
  *(a + 11U) = (unsigned short)4U;
  #line 2850 
  *(a + 12U) = (unsigned short)5U;
  #line 2851 
  *(a + 13U) = (unsigned short)6U;
  #line 2852 
  *(a + 14U) = (unsigned short)7U;
  #line 2853 
  *(a + 15U) = (unsigned short)8U;
  #line 2854 
  *(a + 16U) = (unsigned short)9U;
  #line 2855 
  *(a + 17U) = (unsigned short)10U;
  #line 2856 
  *(a + 18U) = (unsigned short)14U;
  #line 2857 
  *(a + 19U) = (unsigned short)17U;
  #line 2858 
  *(a + 20U) = (unsigned short)21U;
  #line 2859 
  *(a + 21U) = (unsigned short)25U;
  #line 2860 
  *(a + 22U) = (unsigned short)30U;
  #line 2861 
  *(a + 23U) = (unsigned short)35U;
  #line 2862 
  *(a + 24U) = (unsigned short)45U;
  #line 2863 
  *(a + 25U) = (unsigned short)60U;
  #line 2864 
  *(a + 26U) = (unsigned short)80U;
  #line 2865 
  *(a + 27U) = (unsigned short)100U;
  #line 2866 
  *(a + 28U) = (unsigned short)200U;
  #line 2867 
  *(a + 29U) = (unsigned short)300U;
  #line 2868 
  *(a + 30U) = (unsigned short)400U;
  #line 2869 
  *(a + 31U) = (unsigned short)500U;
  #line 2871 
  *(b + 8U) = ((unsigned short)0U);
  #line 2871 
  *(b + 7U) = ((unsigned short)0U);
  #line 2871 
  *(b + 6U) = ((unsigned short)0U);
  #line 2871 
  *(b + 5U) = ((unsigned short)0U);
  #line 2871 
  *(b + 4U) = ((unsigned short)0U);
  #line 2871 
  *(b + 3U) = ((unsigned short)0U);
  #line 2871 
  *(b + 2U) = ((unsigned short)0U);
  #line 2871 
  *(b + 1U) = ((unsigned short)0U);
  #line 2871 
  *b = ((unsigned short)0U);
  #line 2872 
  *(b + 10U) = ((unsigned short)1U);
  #line 2872 
  *(b + 9U) = ((unsigned short)1U);
  #line 2873 
  *(b + 12U) = ((unsigned short)2U);
  #line 2873 
  *(b + 11U) = ((unsigned short)2U);
  #line 2874 
  *(b + 16U) = ((unsigned short)3U);
  #line 2874 
  *(b + 15U) = ((unsigned short)3U);
  #line 2874 
  *(b + 14U) = ((unsigned short)3U);
  #line 2874 
  *(b + 13U) = ((unsigned short)3U);
  #line 2875 
  *(b + 21U) = ((unsigned short)4U);
  #line 2875 
  *(b + 20U) = ((unsigned short)4U);
  #line 2875 
  *(b + 19U) = ((unsigned short)4U);
  #line 2875 
  *(b + 18U) = ((unsigned short)4U);
  #line 2875 
  *(b + 17U) = ((unsigned short)4U);
  #line 2876 
  *(b + 27U) = ((unsigned short)5U);
  #line 2876 
  *(b + 26U) = ((unsigned short)5U);
  #line 2876 
  *(b + 25U) = ((unsigned short)5U);
  #line 2876 
  *(b + 24U) = ((unsigned short)5U);
  #line 2876 
  *(b + 23U) = ((unsigned short)5U);
  #line 2876 
  *(b + 22U) = ((unsigned short)5U);
  #line 2877 
  *(b + 29U) = ((unsigned short)6U);
  #line 2877 
  *(b + 28U) = ((unsigned short)6U);
  #line 2878 
  *(b + 31U) = ((unsigned short)7U);
  #line 2878 
  *(b + 30U) = ((unsigned short)7U);
  #line 2879 
  return;
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_load_mtus(struct adapter *adap, unsigned short *mtus, unsigned short *alpha, unsigned short *beta, unsigned short mtu_cap)
{
  #line 2906 
  unsigned int i;
  #line 2906 
  unsigned int w;
  #line 2900 
  unsigned int avg_pkts[32U] = {2U, 6U, 10U, 14U, 20U, 28U, 40U, 56U, 80U, 112U, 160U, 224U, 320U, 448U, 640U, 896U, 1281U, 1792U, 2560U, 3584U, 5120U, 7168U, 10240U, 14336U, 20480U, 28672U, 40960U, 57344U, 81920U, 114688U, 163840U, 229376U};
  #line 2908 
  i = 0U;
  #line 2908 
  while (i <= 15U) {
    {
      #line 2909 
      unsigned short __UNIQUE_ID___x444;
      #line 2909 
      int tmp;
      {
        #line 2909 
        __UNIQUE_ID___x444 = *(mtus + (unsigned long)i);
        #line 2909 
        unsigned short __UNIQUE_ID___y445 = mtu_cap;
        #line 2909 
        if ((int)__UNIQUE_ID___x444 < (int)__UNIQUE_ID___y445) 
                                                               #line 2909 
                                                               tmp = (int)__UNIQUE_ID___x444; else 
                                                                    #line 2909 
                                                                    tmp = (int)__UNIQUE_ID___y445;
        }
      #line 2909 
      unsigned int mtu = (unsigned int)tmp;
      #line 2910 
      unsigned int log2 = (unsigned int)fls(mtu);
      #line 2912 
      if (((unsigned int)((1 << log2) >> 2) & mtu) == 0U) 
                                                          #line 2913 
                                                          log2 --;
      #line 2914 
      t3_write_reg(adap,996U,((i << 24) | (log2 << 16)) | mtu);
      #line 2917 
      w = 0U;
      #line 2917 
      while (w <= 31U) {
        {
          #line 2920 
          unsigned int __UNIQUE_ID___x446;
          #line 2920 
          unsigned int tmp_2;
          #line 2918 
          unsigned int inc;
          {
            #line 2920 
            __UNIQUE_ID___x446 = ((mtu + 4294967256U) * (unsigned int)*(alpha + (unsigned long)w)) / avg_pkts[w];
            #line 2920 
            unsigned int __UNIQUE_ID___y447 = 2U;
            #line 2920 
            if (__UNIQUE_ID___x446 > __UNIQUE_ID___y447) 
                                                         #line 2920 
                                                         tmp_2 = __UNIQUE_ID___x446; else 
                                                                    #line 2920 
                                                                    tmp_2 = __UNIQUE_ID___y447;
            }
          #line 2920 
          inc = tmp_2;
          #line 2923 
          t3_write_reg(adap,988U,(((i << 21) | (w << 16)) | (unsigned int)((int)*(beta + (unsigned long)w) << 13)) | inc);
        }
        #line 2917 
        w ++;
      }
    }
    #line 2908 
    i ++;
  }
  #line 2927 
  return;
}

#line 2936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_tp_get_mib_stats(struct adapter *adap, struct tp_mib_stats *tps)
{
  #line 2938 
  t3_read_indirect(adap,1104U,1108U,(u32 *)tps,46U,0U);
  #line 2939 
  return;
}

#line 2953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void ulp_config(struct adapter *adap, struct tp_params *p)
{
  #line 2955 
  unsigned int m = p->chan_rx_size;
  #line 2957 
  t3_write_reg(adap,1292U,m);
  #line 2957 
  t3_write_reg(adap,1296U,(p->chan_rx_size / 8U + m) + 4294967295U);
  #line 2957 
  m = p->chan_rx_size / 8U + m;
  #line 2958 
  t3_write_reg(adap,1308U,m);
  #line 2958 
  t3_write_reg(adap,1312U,(p->chan_rx_size / 8U + m) + 4294967295U);
  #line 2958 
  m = p->chan_rx_size / 8U + m;
  #line 2959 
  t3_write_reg(adap,1420U,m);
  #line 2959 
  t3_write_reg(adap,1424U,(p->chan_rx_size / 4U + m) + 4294967295U);
  #line 2960 
  t3_write_reg(adap,1324U,m);
  #line 2960 
  t3_write_reg(adap,1328U,(p->chan_rx_size / 4U + m) + 4294967295U);
  #line 2960 
  m = p->chan_rx_size / 4U + m;
  #line 2961 
  t3_write_reg(adap,1332U,m);
  #line 2961 
  t3_write_reg(adap,1336U,(p->chan_rx_size / 4U + m) + 4294967295U);
  #line 2961 
  m = p->chan_rx_size / 4U + m;
  #line 2962 
  t3_write_reg(adap,1428U,m);
  #line 2962 
  t3_write_reg(adap,1432U,(p->chan_rx_size / 4U + m) + 4294967295U);
  #line 2963 
  t3_write_reg(adap,1340U,m);
  #line 2963 
  t3_write_reg(adap,1344U,(p->chan_rx_size / 4U + m) + 4294967295U);
  #line 2963 
  m = p->chan_rx_size / 4U + m;
  #line 2964 
  t3_write_reg(adap,1316U,4294967295U);
  #line 2965 
  return;
}

#line 2974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_set_proto_sram(struct adapter *adap, u8 *data)
{
  #line 2976 
  int i;
  #line 2977 
  __be32 *buf = (__be32 *)data;
  #line 2979 
  i = 0;
  #line 2979 
  while (i <= 127) {
    {
      #line 2980 
      __be32 *tmp;
      #line 2981 
      __be32 *tmp_1;
      #line 2982 
      __be32 *tmp_3;
      #line 2983 
      __be32 *tmp_5;
      #line 2984 
      __be32 *tmp_7;
      #line 2980 
      tmp = buf;
      #line 2980 
      buf ++;
      #line 2980 
      ;
      #line 2980 
      ;
      #line 2980 
      t3_write_reg(adap,1276U,__builtin_bswap32(*tmp));
      #line 2981 
      tmp_1 = buf;
      #line 2981 
      buf ++;
      #line 2981 
      ;
      #line 2981 
      ;
      #line 2981 
      t3_write_reg(adap,1272U,__builtin_bswap32(*tmp_1));
      #line 2982 
      tmp_3 = buf;
      #line 2982 
      buf ++;
      #line 2982 
      ;
      #line 2982 
      ;
      #line 2982 
      t3_write_reg(adap,1268U,__builtin_bswap32(*tmp_3));
      #line 2983 
      tmp_5 = buf;
      #line 2983 
      buf ++;
      #line 2983 
      ;
      #line 2983 
      ;
      #line 2983 
      t3_write_reg(adap,1264U,__builtin_bswap32(*tmp_5));
      #line 2984 
      tmp_7 = buf;
      #line 2984 
      buf ++;
      #line 2984 
      ;
      #line 2984 
      ;
      #line 2984 
      t3_write_reg(adap,1260U,__builtin_bswap32(*tmp_7));
      #line 2986 
      t3_write_reg(adap,1256U,(unsigned int)(i << 1) | -2147483648);
      #line 2987 
      if (t3_wait_op_done(adap,1256,1U,1,5,1) != 0) 
                                                    #line 2988 
                                                    return -5;
    }
    #line 2979 
    i ++;
  }
  #line 2990 
  t3_write_reg(adap,1256U,0U);
  #line 2992 
  return 0;
}

#line 2995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_config_trace_filter(struct adapter *adapter, struct trace_params *tp, int filter_index, int invert, int enable)
{
  #line 2999 
  u32 addr;
  #line 2999 
  u32 key[4U];
  #line 2999 
  u32 mask[4U];
  #line 3017 
  u32 tmp;
  #line 3018 
  u32 tmp_0;
  #line 3019 
  u32 tmp_1;
  #line 3020 
  u32 tmp_2;
  #line 3021 
  u32 tmp_3;
  #line 3022 
  u32 tmp_4;
  #line 3023 
  u32 tmp_5;
  #line 3001 
  key[0] = (unsigned int)tp->sport | (tp->sip << 16);
  #line 3002 
  key[1] = (tp->sip >> 16) | (unsigned int)((int)tp->dport << 16);
  #line 3003 
  key[2] = tp->dip;
  #line 3004 
  key[3] = (unsigned int)(((int)tp->proto | ((int)tp->vlan << 8)) | ((int)tp->intf << 20));
  #line 3006 
  mask[0] = (unsigned int)tp->sport_mask | (tp->sip_mask << 16);
  #line 3007 
  mask[1] = (tp->sip_mask >> 16) | (unsigned int)((int)tp->dport_mask << 16);
  #line 3008 
  mask[2] = tp->dip_mask;
  #line 3009 
  mask[3] = (unsigned int)(((int)tp->proto_mask | ((int)tp->vlan_mask << 8)) | ((int)tp->intf_mask << 20));
  #line 3011 
  if (invert != 0) 
                   #line 3012 
                   key[3] |= 536870912U;
  #line 3013 
  if (enable != 0) 
                   #line 3014 
                   key[3] |= 268435456U;
  #line 3016 
  if (filter_index != 0) 
                         #line 3016 
                         addr = 288U; else 
                                           #line 3016 
                                           addr = 32U;
  #line 3017 
  ;
  #line 3017 
  tmp = addr;
  #line 3017 
  addr ++;
  #line 3017 
  ;
  #line 3017 
  ;
  #line 3017 
  tp_wr_indirect(adapter,tmp,key[0]);
  #line 3018 
  ;
  #line 3018 
  tmp_0 = addr;
  #line 3018 
  addr ++;
  #line 3018 
  ;
  #line 3018 
  ;
  #line 3018 
  tp_wr_indirect(adapter,tmp_0,mask[0]);
  #line 3019 
  ;
  #line 3019 
  tmp_1 = addr;
  #line 3019 
  addr ++;
  #line 3019 
  ;
  #line 3019 
  ;
  #line 3019 
  tp_wr_indirect(adapter,tmp_1,key[1]);
  #line 3020 
  ;
  #line 3020 
  tmp_2 = addr;
  #line 3020 
  addr ++;
  #line 3020 
  ;
  #line 3020 
  ;
  #line 3020 
  tp_wr_indirect(adapter,tmp_2,mask[1]);
  #line 3021 
  ;
  #line 3021 
  tmp_3 = addr;
  #line 3021 
  addr ++;
  #line 3021 
  ;
  #line 3021 
  ;
  #line 3021 
  tp_wr_indirect(adapter,tmp_3,key[2]);
  #line 3022 
  ;
  #line 3022 
  tmp_4 = addr;
  #line 3022 
  addr ++;
  #line 3022 
  ;
  #line 3022 
  ;
  #line 3022 
  tp_wr_indirect(adapter,tmp_4,mask[2]);
  #line 3023 
  ;
  #line 3023 
  tmp_5 = addr;
  #line 3023 
  addr ++;
  #line 3023 
  ;
  #line 3023 
  ;
  #line 3023 
  tp_wr_indirect(adapter,tmp_5,key[3]);
  #line 3024 
  tp_wr_indirect(adapter,addr,mask[3]);
  #line 3025 
  t3_read_reg(adapter,1092U);
  #line 3026 
  return;
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_config_sched(struct adapter *adap, unsigned int kbps, int sched)
{
  #line 3038 
  unsigned int v;
  #line 3038 
  unsigned int tps;
  #line 3038 
  unsigned int cpt;
  #line 3038 
  unsigned int bpt;
  #line 3038 
  unsigned int delta;
  #line 3038 
  unsigned int mindelta = 4294967295U;
  #line 3039 
  unsigned int clk = adap->params.vpd.cclk * 1000U;
  #line 3040 
  unsigned int selected_cpt = 0U;
  #line 3040 
  unsigned int selected_bpt = 0U;
  #line 3042 
  if (kbps != 0U) {
    #line 3043 
    kbps *= 125U;
    #line 3044 
    cpt = 1U;
    #line 3044 
    while (cpt <= 255U) {
      #line 3045 
      tps = clk / cpt;
      #line 3046 
      bpt = (tps / 2U + kbps) / tps;
      #line 3047 
      if (bpt + 4294967295U <= 254U) {
        #line 3048 
        v = bpt * tps;
        #line 3049 
        if (v >= kbps) 
                       #line 3049 
                       delta = v - kbps; else 
                                              #line 3049 
                                              delta = kbps - v;
        #line 3050 
        if (delta <= mindelta) {
          #line 3051 
          mindelta = delta;
          #line 3052 
          selected_cpt = cpt;
          #line 3053 
          selected_bpt = bpt;
        }
      }
      else 
        #line 3055 
        if (selected_cpt != 0U) 
                                #line 3056 
                                break;
      #line 3044 
      cpt ++;
    }
    #line 3058 
    if (selected_cpt == 0U) 
                            #line 3059 
                            return -22;
  }
  #line 3061 
  t3_write_reg(adap,1048U,(unsigned int)(sched / -2 + 8));
  #line 3063 
  v = t3_read_reg(adap,1052U);
  #line 3064 
  if ((sched & 1) != 0) 
                        #line 3065 
                        v = ((v & 65535U) | (selected_cpt << 16)) | (selected_bpt << 24); else 
                                                                    #line 3067 
                                                                    v = ((v & 4294901760U) | selected_cpt) | (selected_bpt << 8);
  #line 3068 
  t3_write_reg(adap,1052U,v);
  #line 3069 
  return 0;
}

#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int tp_init(struct adapter *adap, struct tp_params *p)
{
  #line 3074 
  int busy = 0;
  #line 3076 
  tp_config(adap,p);
  #line 3077 
  t3_set_vlan_accel(adap,3U,0);
  #line 3079 
  if (is_offload(adap) != 0) {
    #line 3080 
    tp_set_timers(adap,adap->params.vpd.cclk * 1000U);
    #line 3081 
    t3_write_reg(adap,1100U,2U);
    #line 3082 
    busy = t3_wait_op_done(adap,1100,2U,0,1000,5);
    #line 3084 
    if (busy != 0) 
                   #line 3085 
                   _dev_err(& (adap->pdev)->dev,(char *)"TP initialization timed out\n");
  }
  #line 3088 
  if (busy == 0) 
                 #line 3089 
                 t3_write_reg(adap,1100U,1U);
  #line 3090 
  return busy;
}

#line 3097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void chan_init_hw(struct adapter *adap, unsigned int chan_map)
{
  #line 3099 
  int i;
  #line 3101 
  if (chan_map != 3U) {
    #line 3104 
    unsigned int tmp;
    #line 3107 
    unsigned int tmp_0;
    #line 3102 
    t3_set_reg_field(adap,1280U,16U,0U);
    #line 3103 
    t3_set_reg_field(adap,1408U,1U,0U);
    #line 3104 
    if (chan_map == 1U) 
                        #line 3104 
                        tmp = 2069U; else 
                                          #line 3104 
                                          tmp = 2074U;
    #line 3104 
    ;
    #line 3104 
    t3_write_reg(adap,1536U,tmp);
    #line 3107 
    if (chan_map == 1U) 
                        #line 3107 
                        tmp_0 = 4294967295U; else 
                                                  #line 3107 
                                                  tmp_0 = 0U;
    #line 3107 
    ;
    #line 3107 
    t3_write_reg(adap,1504U,tmp_0);
  }
  else {
    #line 3110 
    t3_set_reg_field(adap,1280U,0U,16U);
    #line 3111 
    t3_set_reg_field(adap,1408U,0U,1U);
    #line 3112 
    t3_write_reg(adap,1452U,1048592U);
    #line 3114 
    t3_write_reg(adap,1536U,2079U);
    #line 3117 
    t3_write_reg(adap,1504U,2147516416U);
    #line 3118 
    t3_set_reg_field(adap,840U,0U,67108864U);
    #line 3119 
    t3_write_reg(adap,1064U,170U);
    #line 3121 
    i = 0;
    #line 3121 
    while (i <= 15) {
      #line 3122 
      t3_write_reg(adap,1056U,(unsigned int)((i << 16) | 4112));
      #line 3121 
      i ++;
    }
  }
  #line 3125 
  return;
}

#line 3127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int calibrate_xgm(struct adapter *adapter)
{
  #line 3129 
  if (uses_xaui(adapter) != 0) {
    #line 3130 
    unsigned int v;
    #line 3130 
    unsigned int i;
    #line 3132 
    i = 0U;
    #line 3132 
    while (i <= 4U) {
      #line 3133 
      t3_write_reg(adapter,2208U,0U);
      #line 3134 
      t3_read_reg(adapter,2208U);
      #line 3135 
      msleep(1U);
      #line 3136 
      v = t3_read_reg(adapter,2208U);
      #line 3137 
      if ((v & 2684354560U) == 0U) {
        #line 3138 
        t3_write_reg(adapter,2208U,(v >> 26) & 7U);
        #line 3140 
        return 0;
      }
      #line 3132 
      i ++;
    }
    #line 3143 
    _dev_err(& (adapter->pdev)->dev,(char *)"MAC calibration failed\n");
    #line 3144 
    return -1;
  }
  else {
    #line 3146 
    t3_write_reg(adapter,2204U,19U);
    #line 3148 
    t3_set_reg_field(adapter,2204U,64U,64U);
  }
  #line 3151 
  return 0;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void calibrate_xgm_t3b(struct adapter *adapter)
{
  #line 3156 
  if (uses_xaui(adapter) == 0) {
    #line 3157 
    t3_write_reg(adapter,2204U,403U);
    #line 3159 
    t3_set_reg_field(adapter,2204U,256U,0U);
    #line 3160 
    t3_set_reg_field(adapter,2204U,0U,64U);
    #line 3162 
    t3_set_reg_field(adapter,2204U,64U,0U);
    #line 3164 
    t3_set_reg_field(adapter,2204U,128U,0U);
    #line 3165 
    t3_set_reg_field(adapter,2204U,0U,128U);
  }
  #line 3167 
  return;
}

#line 3184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int wrreg_wait(struct adapter *adapter, unsigned int addr, u32 val)
{
  #line 3186 
  t3_write_reg(adapter,addr,val);
  #line 3187 
  t3_read_reg(adapter,addr);
  #line 3188 
  if ((t3_read_reg(adapter,addr) & 2147483648U) == 0U) 
                                                       #line 3189 
                                                       return 0;
  #line 3190 
  _dev_err(& (adapter->pdev)->dev,(char *)"write to MC7 register 0x%x timed out\n",addr);
  #line 3191 
  return -5;
}

#line 3194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int mc7_init(struct mc7 *mc7, unsigned int mc7_clock, int mem_type)
{
  #line 3207 
  u32 val;
  #line 3208 
  unsigned int width;
  #line 3208 
  unsigned int density;
  #line 3208 
  unsigned int slow;
  #line 3208 
  unsigned int attempts;
  #line 3196 
  unsigned int mc7_mode[5U] = {1586U, 1602U, 1618U, 1074U, 1090U};
  #line 3199 
  struct mc7_timing_params mc7_timings[5U] = {{.ActToPreDly = (unsigned char)12U, .ActToRdWrDly = (unsigned char)3U, .PreCyc = (unsigned char)4U, .RefCyc = {(unsigned char)20U, (unsigned char)28U, (unsigned char)34U, (unsigned char)52U, (unsigned char)0U}, .BkCyc = (unsigned char)15U, .WrToRdDly = (unsigned char)6U, .RdToWrDly = (unsigned char)4U}, {.ActToPreDly = (unsigned char)12U, .ActToRdWrDly = (unsigned char)4U, .PreCyc = (unsigned char)5U, .RefCyc = {(unsigned char)20U, (unsigned char)28U, (unsigned char)34U, (unsigned char)52U, (unsigned char)0U}, .BkCyc = (unsigned char)16U, .WrToRdDly = (unsigned char)7U, .RdToWrDly = (unsigned char)4U}, {.ActToPreDly = (unsigned char)12U, .ActToRdWrDly = (unsigned char)5U, .PreCyc = (unsigned char)6U, .RefCyc = {(unsigned char)20U, (unsigned char)28U, (unsigned char)34U, (unsigned char)52U, (unsigned char)0U}, .BkCyc = (unsigned char)17U, .WrToRdDly = (unsigned char)8U, .RdToWrDly = (unsigned char)4U}, {.ActToPreDly = (unsigned char)9U, .ActToRdWrDly = (unsigned char)3U, .PreCyc = (unsigned char)4U, .RefCyc = {(unsigned char)15U, (unsigned char)21U, (unsigned char)26U, (unsigned char)39U, (unsigned char)0U}, .BkCyc = (unsigned char)12U, .WrToRdDly = (unsigned char)6U, .RdToWrDly = (unsigned char)4U}, {.ActToPreDly = (unsigned char)9U, .ActToRdWrDly = (unsigned char)4U, .PreCyc = (unsigned char)5U, .RefCyc = {(unsigned char)15U, (unsigned char)21U, (unsigned char)26U, (unsigned char)39U, (unsigned char)0U}, .BkCyc = (unsigned char)13U, .WrToRdDly = (unsigned char)7U, .RdToWrDly = (unsigned char)4U}};
  #line 3209 
  struct adapter *adapter = mc7->adapter;
  #line 3210 
  struct mc7_timing_params *p = & mc7_timings[mem_type];
  #line 3212 
  if (mc7->size == 0U) 
                       #line 3213 
                       return 0;
  #line 3215 
  val = t3_read_reg(adapter,mc7->offset + 256U);
  #line 3216 
  slow = val & 1024U;
  #line 3217 
  width = (val >> 8) & 3U;
  #line 3218 
  density = (val >> 2) & 7U;
  #line 3220 
  t3_write_reg(adapter,mc7->offset + 256U,val | 8192U);
  #line 3221 
  val = t3_read_reg(adapter,mc7->offset + 256U);
  #line 3222 
  msleep(1U);
  #line 3224 
  if (slow == 0U) {
    #line 3225 
    t3_write_reg(adapter,mc7->offset + 296U,1048576U);
    #line 3226 
    t3_read_reg(adapter,mc7->offset + 296U);
    #line 3227 
    msleep(1U);
    #line 3228 
    if ((t3_read_reg(adapter,mc7->offset + 296U) & 3222274048U) != 0U) {
      #line 3230 
      _dev_err(& (adapter->pdev)->dev,(char *)"%s MC7 calibration timed out\n",mc7->name);
      #line 3232 
      goto out_fail;
    }
  }
  #line 3236 
  t3_write_reg(adapter,mc7->offset + 288U,(unsigned int)((((((((int)p->ActToPreDly << 26) | ((int)p->ActToRdWrDly << 23)) | ((int)p->PreCyc << 20)) | ((int)p->RefCyc[density] << 13)) | ((int)p->BkCyc << 8)) | ((int)p->WrToRdDly << 4)) | (int)p->RdToWrDly));
  #line 3242 
  t3_write_reg(adapter,mc7->offset + 256U,val | 2049U);
  #line 3244 
  t3_read_reg(adapter,mc7->offset + 256U);
  #line 3246 
  if (slow == 0U) 
                  #line 3247 
                  t3_set_reg_field(adapter,mc7->offset + 284U,2U,2U);
  #line 3249 
  __const_udelay(4295UL);
  #line 3251 
  if (slow != 0U) 
                  #line 3251 
                  val = 3U; else 
                                 #line 3251 
                                 val = 6U;
  #line 3252 
  if (wrreg_wait(adapter,mc7->offset + 276U,0U) != 0) 
                                                      #line 3252 
                                                      goto _LOR;
  else {
    #line 3252 
    if (wrreg_wait(adapter,mc7->offset + 268U,0U) != 0) 
                                                        #line 3252 
                                                        goto _LOR;
    else {
      #line 3253 
      if (wrreg_wait(adapter,mc7->offset + 272U,0U) != 0) 
                                                          #line 3252 
                                                          goto _LOR;
      else {
        #line 3254 
        if (wrreg_wait(adapter,mc7->offset + 264U,val) != 0) 
                                                             #line 3252 
                                                             _LOR: 
                                                                   #line 3256 
                                                                   goto out_fail;
      }
    }
  }
  #line 3258 
  if (slow == 0U) {
    #line 3259 
    t3_write_reg(adapter,mc7->offset + 260U,256U);
    #line 3260 
    t3_set_reg_field(adapter,mc7->offset + 284U,1U,0U);
    #line 3261 
    __const_udelay(21475UL);
  }
  #line 3264 
  if (wrreg_wait(adapter,mc7->offset + 276U,0U) != 0) 
                                                      #line 3264 
                                                      goto _LOR_0;
  else {
    #line 3264 
    if (wrreg_wait(adapter,mc7->offset + 280U,0U) != 0) 
                                                        #line 3264 
                                                        goto _LOR_0;
    else {
      #line 3265 
      if (wrreg_wait(adapter,mc7->offset + 280U,0U) != 0) 
                                                          #line 3264 
                                                          goto _LOR_0;
      else {
        #line 3266 
        if (wrreg_wait(adapter,mc7->offset + 260U,mc7_mode[mem_type]) != 0) 
          #line 3264 
          goto _LOR_0;
        else {
          #line 3268 
          if (wrreg_wait(adapter,mc7->offset + 264U,val | 896U) != 0) 
            #line 3264 
            goto _LOR_0;
          else {
            #line 3269 
            if (wrreg_wait(adapter,mc7->offset + 264U,val) != 0) 
                                                                 #line 3264 
                                                                 _LOR_0: 
                                                                    #line 3271 
                                                                    goto out_fail;
          }
        }
      }
    }
  }
  #line 3274 
  mc7_clock = mc7_clock * 7812U + mc7_clock / 2U;
  #line 3275 
  mc7_clock /= 1000000U;
  #line 3277 
  t3_write_reg(adapter,mc7->offset + 280U,(mc7_clock << 1) | 1U);
  #line 3279 
  t3_read_reg(adapter,mc7->offset + 280U);
  #line 3281 
  t3_write_reg(adapter,mc7->offset + 304U,3U);
  #line 3282 
  t3_write_reg(adapter,mc7->offset + 368U,0U);
  #line 3283 
  t3_write_reg(adapter,mc7->offset + 360U,0U);
  #line 3284 
  t3_write_reg(adapter,mc7->offset + 364U,(mc7->size << width) + 4294967295U);
  #line 3286 
  t3_write_reg(adapter,mc7->offset + 372U,1U);
  #line 3287 
  t3_read_reg(adapter,mc7->offset + 372U);
  #line 3289 
  attempts = 50U;
  #line 3290 
  while (1) {
    #line 3291 
    msleep(250U);
    #line 3292 
    val = t3_read_reg(adapter,mc7->offset + 372U);
    #line 3293 
    if ((val & 2147483648U) != 0U) {
      #line 3293 
      attempts --;
      #line 3293 
      if (! (attempts != 0U)) 
                              #line 3290 
                              break;
    }
    else 
         #line 3290 
         break;
  }
  #line 3294 
  if ((val & 2147483648U) != 0U) {
    #line 3295 
    _dev_err(& (adapter->pdev)->dev,(char *)"%s MC7 BIST timed out\n",mc7->name);
    #line 3296 
    goto out_fail;
  }
  #line 3300 
  t3_set_reg_field(adapter,mc7->offset + 256U,0U,2U);
  #line 3301 
  return 0;
  #line 3303 
  out_fail: 
            #line 3303 
  ;
  #line 3304 
  return -1;
}

#line 3307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void config_pcie(struct adapter *adap)
{
  #line 3322 
  u16 val;
  #line 3322 
  u16 devid;
  #line 3323 
  unsigned int log2_width;
  #line 3323 
  unsigned int pldsize;
  #line 3324 
  unsigned int fst_trn_rx;
  #line 3324 
  unsigned int fst_trn_tx;
  #line 3324 
  unsigned int acklat;
  #line 3324 
  unsigned int rpllmt;
  #line 3309 
  u16 ack_lat[4U][6U] = {{(unsigned short)237U, (unsigned short)416U, (unsigned short)559U, (unsigned short)1071U, (unsigned short)2095U, (unsigned short)4143U}, {(unsigned short)128U, (unsigned short)217U, (unsigned short)289U, (unsigned short)545U, (unsigned short)1057U, (unsigned short)2081U}, {(unsigned short)73U, (unsigned short)118U, (unsigned short)154U, (unsigned short)282U, (unsigned short)538U, (unsigned short)1050U}, {(unsigned short)67U, (unsigned short)107U, (unsigned short)86U, (unsigned short)150U, (unsigned short)278U, (unsigned short)534U}};
  #line 3315 
  u16 rpl_tmr[4U][6U] = {{(unsigned short)711U, (unsigned short)1248U, (unsigned short)1677U, (unsigned short)3213U, (unsigned short)6285U, (unsigned short)12429U}, {(unsigned short)384U, (unsigned short)651U, (unsigned short)867U, (unsigned short)1635U, (unsigned short)3171U, (unsigned short)6243U}, {(unsigned short)219U, (unsigned short)354U, (unsigned short)462U, (unsigned short)846U, (unsigned short)1614U, (unsigned short)3150U}, {(unsigned short)201U, (unsigned short)321U, (unsigned short)258U, (unsigned short)450U, (unsigned short)834U, (unsigned short)1602U}};
  #line 3326 
  pcie_capability_read_word(adap->pdev,8,& val);
  #line 3327 
  pldsize = (unsigned int)((int)val >> 5) & 7U;
  #line 3329 
  pci_read_config_word(adap->pdev,2,& devid);
  #line 3330 
  if ((unsigned int)devid == 55U) {
    #line 3331 
    pcie_capability_write_word(adap->pdev,8,(unsigned short)((int)val & 36639));
    #line 3334 
    pldsize = 0U;
  }
  #line 3337 
  pcie_capability_read_word(adap->pdev,16,& val);
  #line 3339 
  fst_trn_tx = (t3_read_reg(adap,152U) >> 22) & 255U;
  #line 3340 
  if (adap->params.rev != 0U) {
    #line 3340 
    fst_trn_rx = (t3_read_reg(adap,140U) >> 10) & 255U;
  }
  else 
       #line 3340 
       fst_trn_rx = fst_trn_tx;
  #line 3342 
  log2_width = (unsigned int)(fls((unsigned int)adap->params.pci.width) + -1);
  #line 3343 
  acklat = (unsigned int)ack_lat[log2_width][pldsize];
  #line 3344 
  if (((int)val & 1) != 0) 
                           #line 3345 
                           acklat = fst_trn_tx * 4U + acklat;
  #line 3346 
  rpllmt = (unsigned int)rpl_tmr[log2_width][pldsize] + fst_trn_rx * 4U;
  #line 3348 
  if (adap->params.rev == 0U) 
                              #line 3349 
                              t3_set_reg_field(adap,156U,2047U,acklat); else 
                                                                    #line 3353 
                                                                    t3_set_reg_field(adap,156U,8191U,acklat);
  #line 3356 
  t3_set_reg_field(adap,152U,4194300U,rpllmt << 2);
  #line 3359 
  t3_write_reg(adap,164U,4294967295U);
  #line 3360 
  t3_set_reg_field(adap,136U,0U,19988480U);
  #line 3361 
  return;
}

#line 3373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_init_hw(struct adapter *adapter, u32 fw_params)
{
  #line 3403 
  unsigned int __UNIQUE_ID___x448;
  #line 3403 
  unsigned int tmp_6;
  #line 3406 
  unsigned int __UNIQUE_ID___x450;
  #line 3406 
  unsigned int tmp_8;
  #line 3375 
  int attempts;
  #line 3375 
  int i;
  #line 3375 
  int err = -5;
  #line 3376 
  struct vpd_params *vpd = & adapter->params.vpd;
  #line 3378 
  if (adapter->params.rev != 0U) 
                                 #line 3379 
                                 calibrate_xgm_t3b(adapter);
  else {
    #line 3380 
    if (calibrate_xgm(adapter) != 0) 
                                     #line 3381 
                                     goto out_err;
  }
  #line 3383 
  if (vpd->mclk != 0U) {
    #line 3384 
    partition_mem(adapter,& adapter->params.tp);
    #line 3386 
    if (mc7_init(& adapter->pmrx,vpd->mclk,(int)vpd->mem_timing) != 0) 
      #line 3386 
      goto _LOR;
    else {
      #line 3386 
      if (mc7_init(& adapter->pmtx,vpd->mclk,(int)vpd->mem_timing) != 0) 
        #line 3386 
        goto _LOR;
      else {
        #line 3387 
        if (mc7_init(& adapter->cm,vpd->mclk,(int)vpd->mem_timing) != 0) 
          #line 3386 
          goto _LOR;
        else {
          #line 3388 
          if (t3_mc5_init(& adapter->mc5,adapter->params.mc5.nservers,
                    adapter->params.mc5.nfilters,adapter->params.mc5.nroutes) != 0) 
            #line 3386 
            _LOR: 
                  #line 3392 
                  goto out_err;
        }
      }
    }
    #line 3394 
    i = 0;
    #line 3394 
    while (i <= 31) {
      #line 3395 
      if (clear_sge_ctxt(adapter,(unsigned int)i,524288U) != 0) 
                                                                #line 3396 
                                                                goto out_err;
      #line 3394 
      i ++;
    }
  }
  #line 3399 
  if (tp_init(adapter,& adapter->params.tp) != 0) 
                                                  #line 3400 
                                                  goto out_err;
  {
    #line 3403 
    __UNIQUE_ID___x448 = adapter->params.sge.max_pkt_size;
    #line 3403 
    unsigned int __UNIQUE_ID___y449 = 12288U;
    #line 3403 
    if (__UNIQUE_ID___x448 < __UNIQUE_ID___y449) 
                                                 #line 3403 
                                                 tmp_6 = __UNIQUE_ID___x448; else 
                                                                    #line 3403 
                                                                    tmp_6 = __UNIQUE_ID___y449;
    }
  #line 3402 
  ;
  #line 3402 
  t3_tp_set_coalescing_size(adapter,tmp_6,1);
  {
    #line 3406 
    __UNIQUE_ID___x450 = adapter->params.sge.max_pkt_size;
    #line 3406 
    unsigned int __UNIQUE_ID___y451 = 16384U;
    #line 3406 
    if (__UNIQUE_ID___x450 < __UNIQUE_ID___y451) 
                                                 #line 3406 
                                                 tmp_8 = __UNIQUE_ID___x450; else 
                                                                    #line 3406 
                                                                    tmp_8 = __UNIQUE_ID___y451;
    }
  #line 3405 
  ;
  #line 3405 
  t3_tp_set_max_rxsize(adapter,tmp_8);
  #line 3407 
  ulp_config(adapter,& adapter->params.tp);
  #line 3409 
  if (is_pcie(adapter) != 0U) 
                              #line 3410 
                              config_pcie(adapter); else 
                                                         #line 3412 
                                                         t3_set_reg_field(adapter,136U,0U,786432U);
  #line 3415 
  if (adapter->params.rev == 4U) 
                                 #line 3416 
                                 t3_set_reg_field(adapter,1408U,0U,2U);
  #line 3419 
  t3_write_reg(adapter,1472U,4294967295U);
  #line 3420 
  t3_write_reg(adapter,1476U,0U);
  #line 3421 
  t3_write_reg(adapter,1508U,0U);
  #line 3422 
  chan_init_hw(adapter,adapter->params.chan_map);
  #line 3423 
  t3_sge_init(adapter,& adapter->params.sge);
  #line 3424 
  t3_set_reg_field(adapter,1776U,0U,16U);
  #line 3426 
  ;
  #line 3426 
  t3_write_reg(adapter,240U,calc_gpio_intr(adapter));
  #line 3428 
  t3_write_reg(adapter,692U,vpd->uclk | fw_params);
  #line 3429 
  t3_write_reg(adapter,640U,458752U);
  #line 3431 
  t3_read_reg(adapter,640U);
  #line 3433 
  attempts = 100;
  #line 3434 
  while (1) {
    #line 3435 
    msleep(20U);
    #line 3435 
    if (t3_read_reg(adapter,692U) != 0U) {
      #line 3436 
      attempts --;
      #line 3436 
      if (! (attempts != 0)) 
                             #line 3434 
                             break;
    }
    else 
         #line 3434 
         break;
  }
  #line 3437 
  if (attempts == 0) {
    #line 3438 
    _dev_err(& (adapter->pdev)->dev,(char *)"uP initialization timed out\n");
    #line 3439 
    goto out_err;
  }
  #line 3442 
  err = 0;
  #line 3443 
  out_err: 
           #line 3443 
  ;
  #line 3444 
  return err;
}

#line 3455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void get_pci_mode(struct adapter *adapter, struct pci_params *p)
{
  #line 3458 
  u32 pci_mode;
  #line 3457 
  unsigned short speed_map[4U] = {(unsigned short)33U, (unsigned short)66U, (unsigned short)100U, (unsigned short)133U};
  #line 3460 
  if ((int)pci_is_pcie(adapter->pdev) != 0) {
    #line 3461 
    u16 val;
    #line 3463 
    p->variant = (unsigned char)4U;
    #line 3464 
    pcie_capability_read_word(adapter->pdev,18,& val);
    #line 3465 
    p->width = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
    #line 3466 
    return;
  }
  #line 3469 
  pci_mode = t3_read_reg(adapter,140U);
  #line 3470 
  p->speed = speed_map[(pci_mode >> 6) & 3U];
  #line 3471 
  if ((pci_mode & 1U) != 0U) 
                             #line 3471 
                             p->width = (unsigned char)64U; else 
                                                                 #line 3471 
                                                                 p->width = (unsigned char)32U;
  #line 3472 
  pci_mode = (pci_mode >> 2) & 15U;
  #line 3473 
  if (pci_mode == 0U) 
                      #line 3474 
                      p->variant = (unsigned char)0U;
  else 
    #line 3475 
    if (pci_mode <= 3U) 
                        #line 3476 
                        p->variant = (unsigned char)1U;
    else 
      #line 3477 
      if (pci_mode <= 7U) 
                          #line 3478 
                          p->variant = (unsigned char)2U; else 
                                                               #line 3480 
                                                               p->variant = (unsigned char)3U;
  #line 3481 
  return;
}

#line 3492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void init_link_config(struct link_config *lc, unsigned int caps)
{
  #line 3494 
  lc->supported = caps;
  #line 3495 
  lc->speed = ((unsigned short)65535U);
  #line 3495 
  lc->requested_speed = ((unsigned short)65535U);
  #line 3496 
  lc->duplex = ((unsigned char)255U);
  #line 3496 
  lc->requested_duplex = ((unsigned char)255U);
  #line 3497 
  lc->fc = ((unsigned char)3U);
  #line 3497 
  lc->requested_fc = ((unsigned char)3U);
  #line 3498 
  if (((unsigned long)lc->supported & 64UL) != 0UL) {
    #line 3499 
    lc->advertising = lc->supported;
    #line 3500 
    lc->autoneg = (unsigned char)1U;
    #line 3501 
    lc->requested_fc = (unsigned char)((unsigned int)lc->requested_fc | 4U);
  }
  else {
    #line 3503 
    lc->advertising = 0U;
    #line 3504 
    lc->autoneg = (unsigned char)0U;
  }
  #line 3506 
  return;
}

#line 3515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static unsigned int mc7_calc_size(u32 cfg)
{
  #line 3518 
  unsigned int tmp;
  #line 3519 
  unsigned int tmp_0;
  #line 3517 
  unsigned int width = (cfg >> 8) & 3U;
  #line 3518 
  if ((cfg & 64U) != 0U) 
                         #line 3518 
                         tmp = 2U; else 
                                        #line 3518 
                                        tmp = 1U;
  #line 3518 
  unsigned int banks = tmp;
  #line 3519 
  if ((cfg & 32U) != 0U) 
                         #line 3519 
                         tmp_0 = 2U; else 
                                          #line 3519 
                                          tmp_0 = 1U;
  #line 3519 
  unsigned int org = tmp_0;
  #line 3520 
  unsigned int density = (cfg >> 2) & 7U;
  #line 3521 
  unsigned int MBs = ((unsigned int)(256 << density) * banks) / (org << width);
  #line 3523 
  return MBs << 20;
}

#line 3526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void mc7_prep(struct adapter *adapter, struct mc7 *mc7, unsigned int base_addr, char *name)
{
  #line 3529 
  u32 cfg;
  #line 3531 
  mc7->adapter = adapter;
  #line 3532 
  mc7->name = name;
  #line 3533 
  mc7->offset = base_addr + 4294967040U;
  #line 3534 
  cfg = t3_read_reg(adapter,mc7->offset + 256U);
  #line 3535 
  if (((cfg >> 2) & 7U) != 7U) 
                               #line 3535 
                               mc7->size = mc7_calc_size(cfg); else 
                                                                    #line 3535 
                                                                    mc7->size = 0U;
  #line 3536 
  mc7->width = (cfg >> 8) & 3U;
  #line 3537 
  return;
}

#line 3539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void mac_prep(struct cmac *mac, struct adapter *adapter, int index)
{
  #line 3541 
  u16 devid;
  #line 3543 
  mac->adapter = adapter;
  #line 3544 
  pci_read_config_word(adapter->pdev,2,& devid);
  #line 3546 
  if ((unsigned int)devid == 55U && (unsigned int)adapter->params.vpd.xauicfg[1] == 0U) 
    #line 3547 
    index = 0;
  #line 3548 
  mac->offset = (unsigned int)(index * 512);
  #line 3549 
  mac->nucast = 1U;
  #line 3551 
  if (adapter->params.rev == 0U) {
    #line 3551 
    if (uses_xaui(adapter) != 0) {
      #line 3552 
      unsigned int tmp_0;
      #line 3552 
      if (is_10G(adapter) != 0) 
                                #line 3552 
                                tmp_0 = 42998788U; else 
                                                        #line 3552 
                                                        tmp_0 = 36707332U;
      #line 3552 
      ;
      #line 3552 
      ;
      #line 3552 
      t3_write_reg(adapter,mac->offset + 2192U,tmp_0);
      #line 3554 
      t3_set_reg_field(adapter,mac->offset + 2232U,1U,0U);
    }
  }
  #line 3556 
  return;
}

#line 3559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static void early_hw_init(struct adapter *adapter, struct adapter_info *ai)
{
  #line 3562 
  unsigned int tmp_0;
  #line 3562 
  if (is_10G(adapter) != 0) 
                            #line 3562 
                            tmp_0 = 6U; else 
                                             #line 3562 
                                             tmp_0 = 4U;
  #line 3562 
  u32 val = tmp_0;
  #line 3564 
  mi1_init(adapter,ai);
  #line 3565 
  t3_write_reg(adapter,1696U,adapter->params.vpd.cclk / 80U + 4294967295U);
  #line 3567 
  t3_write_reg(adapter,208U,ai->gpio_out | 65537U);
  #line 3569 
  t3_write_reg(adapter,1812U,0U);
  #line 3570 
  t3_write_reg(adapter,112U,268369920U);
  #line 3572 
  if (adapter->params.rev == 0U) 
                                 #line 3573 
                                 val |= 1U;
  else {
    #line 3572 
    if (uses_xaui(adapter) == 0) 
                                 #line 3573 
                                 val |= 1U;
  }
  #line 3576 
  t3_write_reg(adapter,2232U,val);
  #line 3577 
  t3_read_reg(adapter,2232U);
  #line 3579 
  val |= 8U;
  #line 3580 
  t3_write_reg(adapter,2232U,val);
  #line 3581 
  t3_read_reg(adapter,2232U);
  #line 3582 
  t3_write_reg(adapter,2744U,val);
  #line 3583 
  t3_read_reg(adapter,2232U);
  #line 3584 
  return;
}

#line 3591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_reset_adapter(struct adapter *adapter)
{
  #line 3593 
  int i;
  #line 3593 
  int tmp_0;
  #line 3593 
  if (adapter->params.rev <= 2U) {
    #line 3594 
    if (is_pcie(adapter) != 0U) 
                                #line 3593 
                                tmp_0 = 1; else 
                                                #line 3593 
                                                tmp_0 = 0;
  }
  else 
       #line 3593 
       tmp_0 = 0;
  #line 3593 
  int save_and_restore_pcie = tmp_0;
  #line 3595 
  uint16_t devid = (unsigned short)0U;
  #line 3597 
  if (save_and_restore_pcie != 0) 
                                  #line 3598 
                                  pci_save_state(adapter->pdev);
  #line 3599 
  t3_write_reg(adapter,1776U,3U);
  #line 3605 
  i = 0;
  #line 3605 
  while (i <= 9) {
    #line 3606 
    msleep(50U);
    #line 3607 
    pci_read_config_word(adapter->pdev,0,& devid);
    #line 3608 
    if ((unsigned int)devid == 5157U) 
                                      #line 3609 
                                      break;
    #line 3605 
    i ++;
  }
  #line 3612 
  if ((unsigned int)devid != 5157U) 
                                    #line 3613 
                                    return -1;
  #line 3615 
  if (save_and_restore_pcie != 0) 
                                  #line 3616 
                                  pci_restore_state(adapter->pdev);
  #line 3617 
  return 0;
}

#line 3620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
static int init_parity(struct adapter *adap)
{
  #line 3622 
  int i;
  #line 3622 
  int err;
  #line 3622 
  int addr;
  #line 3624 
  if ((t3_read_reg(adap,12U) & 134217728U) != 0U) 
                                                  #line 3625 
                                                  return -16;
  #line 3627 
  i = 0;
  #line 3627 
  err = i;
  #line 3627 
  while (err == 0 && i <= 15) {
    #line 3628 
    err = clear_sge_ctxt(adap,(unsigned int)i,131072U);
    #line 3627 
    i ++;
  }
  #line 3629 
  i = 65520;
  #line 3629 
  while (err == 0 && i <= 65535) {
    #line 3630 
    err = clear_sge_ctxt(adap,(unsigned int)i,131072U);
    #line 3629 
    i ++;
  }
  #line 3631 
  i = 0;
  #line 3631 
  while (err == 0 && i <= 7) {
    #line 3632 
    err = clear_sge_ctxt(adap,(unsigned int)i,262144U);
    #line 3631 
    i ++;
  }
  #line 3633 
  if (err != 0) 
                #line 3634 
                return err;
  #line 3636 
  t3_write_reg(adap,712U,0U);
  #line 3637 
  i = 0;
  #line 3637 
  while (i <= 3) {
    #line 3638 
    addr = 0;
    #line 3638 
    while (addr <= 511) {
      #line 3639 
      t3_write_reg(adap,704U,((unsigned int)(i << 3) | (unsigned int)(addr << 16)) | 5U);
      #line 3642 
      err = t3_wait_op_done(adap,704,2U,0,2,1);
      #line 3644 
      if (err != 0) 
                    #line 3645 
                    return err;
      #line 3638 
      addr ++;
    }
    #line 3637 
    i ++;
  }
  #line 3647 
  return 0;
}

#line 3655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_prep_adapter(struct adapter *adapter, struct adapter_info *ai, int reset)
{
  #line 3658 
  int ret;
  #line 3659 
  unsigned int i;
  #line 3665 
  int tmp;
  #line 3711 
  int tmp_7;
  #line 3659 
  unsigned int j = 4294967295U;
  #line 3661 
  get_pci_mode(adapter,& adapter->params.pci);
  #line 3663 
  adapter->params.info = ai;
  #line 3664 
  adapter->params.nports = (unsigned int)((int)ai->nports0 + (int)ai->nports1);
  #line 3665 
  if ((unsigned int)ai->nports1 != 0U) 
                                       #line 3665 
                                       tmp = 2; else 
                                                     #line 3665 
                                                     tmp = 0;
  #line 3665 
  adapter->params.chan_map = (unsigned int)(((unsigned int)ai->nports0 != 0U) | tmp);
  #line 3666 
  adapter->params.rev = t3_read_reg(adapter,1780U);
  #line 3675 
  adapter->params.linkpoll_period = 10U;
  #line 3676 
  if (is_10G(adapter) != 0) 
                            #line 3676 
                            adapter->params.stats_update_period = 180U; else 
                                                                    #line 3676 
                                                                    adapter->params.stats_update_period = 1800U;
  #line 3678 
  adapter->params.pci.vpd_cap_addr = (unsigned int)pci_find_capability(adapter->pdev,3);
  #line 3680 
  ret = get_vpd_params(adapter,& adapter->params.vpd);
  #line 3681 
  if (ret < 0) 
               #line 3682 
               return ret;
  #line 3684 
  if (reset != 0) {
    #line 3684 
    if (t3_reset_adapter(adapter) != 0) 
                                        #line 3685 
                                        return -1;
  }
  #line 3687 
  t3_sge_prep(adapter,& adapter->params.sge);
  #line 3689 
  if (adapter->params.vpd.mclk != 0U) {
    #line 3690 
    struct tp_params *p = & adapter->params.tp;
    #line 3692 
    mc7_prep(adapter,& adapter->pmrx,256U,(char *)"PMRX");
    #line 3693 
    mc7_prep(adapter,& adapter->pmtx,384U,(char *)"PMTX");
    #line 3694 
    mc7_prep(adapter,& adapter->cm,512U,(char *)"CM");
    #line 3696 
    if (adapter->params.chan_map == 3U) 
                                        #line 3696 
                                        p->nchan = 2U; else 
                                                            #line 3696 
                                                            p->nchan = 1U;
    #line 3697 
    p->pmrx_size = t3_mc7_size(& adapter->pmrx);
    #line 3698 
    p->pmtx_size = t3_mc7_size(& adapter->pmtx);
    #line 3699 
    p->cm_size = t3_mc7_size(& adapter->cm);
    #line 3700 
    p->chan_rx_size = p->pmrx_size / 2U;
    #line 3701 
    p->chan_tx_size = p->pmtx_size / p->nchan;
    #line 3702 
    p->rx_pg_size = 65536U;
    #line 3703 
    if (is_10G(adapter) != 0) 
                              #line 3703 
                              p->tx_pg_size = 65536U; else 
                                                           #line 3703 
                                                           p->tx_pg_size = 16384U;
    #line 3704 
    p->rx_num_pgs = pm_num_pages(p->chan_rx_size,p->rx_pg_size);
    #line 3705 
    p->tx_num_pgs = pm_num_pages(p->chan_tx_size,p->tx_pg_size);
    #line 3706 
    if (p->cm_size > 134217727U || adapter->params.rev != 0U) 
                                                              #line 3706 
                                                              p->ntimer_qs = 12U; else 
                                                                    #line 3706 
                                                                    p->ntimer_qs = 6U;
  }
  #line 3711 
  if (t3_mc7_size(& adapter->pmrx) != 0U) {
    #line 3710 
    if (t3_mc7_size(& adapter->pmtx) != 0U) {
      #line 3711 
      if (t3_mc7_size(& adapter->cm) != 0U) 
                                            #line 3711 
                                            tmp_7 = 1; else 
                                                            #line 3711 
                                                            tmp_7 = 0;
    }
    else 
         #line 3711 
         tmp_7 = 0;
  }
  else 
       #line 3711 
       tmp_7 = 0;
  #line 3710 
  adapter->params.offload = (unsigned int)tmp_7;
  #line 3714 
  if (is_offload(adapter) != 0) {
    #line 3715 
    adapter->params.mc5.nservers = 512U;
    #line 3716 
    if (adapter->params.rev != 0U) 
                                   #line 3716 
                                   adapter->params.mc5.nfilters = 128U; else 
                                                                    #line 3716 
                                                                    adapter->params.mc5.nfilters = 0U;
    #line 3718 
    adapter->params.mc5.nroutes = 0U;
    #line 3719 
    t3_mc5_prep(adapter,& adapter->mc5,1);
    #line 3721 
    init_mtus((unsigned short *)(& adapter->params.mtus));
    #line 3722 
    init_cong_ctrl((unsigned short *)(& adapter->params.a_wnd),(unsigned short *)(& adapter->params.b_wnd));
  }
  #line 3725 
  early_hw_init(adapter,ai);
  #line 3726 
  ret = init_parity(adapter);
  #line 3727 
  if (ret != 0) 
                #line 3728 
                return ret;
  #line 3730 
  i = 0U;
  #line 3730 
  while (adapter->params.nports > i) {
    {
      #line 3731 
      u8 hw_addr[6U];
      #line 3732 
      struct port_type_info *pti;
      #line 3733 
      struct port_info *p_0 = adap2pinfo(adapter,(int)i);
      #line 3735 
      while (1) {
        #line 3735 
        j ++;
        #line 3735 
        ;
        #line 3735 
        if (! ((unsigned int)adapter->params.vpd.port_type[j] == 0U)) 
          #line 3735 
          break;
      }
      #line 3738 
      pti = & port_types[(int)adapter->params.vpd.port_type[j]];
      #line 3739 
      if (pti->phy_prep == (int (*)(struct cphy *, struct adapter *, int , struct mdio_ops *))0) {
        #line 3740 
        _dev_alert(& (adapter->pdev)->dev,(char *)"Invalid port type index %d\n",(int)adapter->params.vpd.port_type[j]);
        #line 3742 
        return -22;
      }
      #line 3745 
      p_0->phy.mdio.dev = adapter->port[i];
      #line 3746 
      ret = (*(pti->phy_prep))(& p_0->phy,adapter,(int)((unsigned int)ai->phy_base_addr + j),ai->mdio_ops);
      #line 3748 
      if (ret != 0) 
                    #line 3749 
                    return ret;
      #line 3750 
      mac_prep(& p_0->mac,adapter,(int)j);
      #line 3757 
      memcpy((void *)(& hw_addr),(void *)(& adapter->params.vpd.eth_base),5UL);
      #line 3758 
      hw_addr[5] = (unsigned char)((int)adapter->params.vpd.eth_base[5] + (int)((unsigned char)i));
      #line 3760 
      memcpy((void *)(adapter->port[i])->dev_addr,(void *)(& hw_addr),6UL);
      #line 3762 
      init_link_config(& p_0->link_config,p_0->phy.caps);
      #line 3763 
      (*((p_0->phy.ops)->power_down))(& p_0->phy,1);
      #line 3770 
      if ((p_0->phy.caps & 16777216U) == 0U && adapter->params.linkpoll_period > 10U) 
        #line 3772 
        adapter->params.linkpoll_period = 10U;
    }
    #line 3730 
    i ++;
  }
  #line 3775 
  return 0;
}

#line 3778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
void t3_led_ready(struct adapter *adapter)
{
  #line 3780 
  t3_set_reg_field(adapter,208U,1U,1U);
  #line 3781 
  return;
}

#line 3784  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/t3_hw.c"
int t3_replay_prep_adapter(struct adapter *adapter)
{
  #line 3787 
  unsigned int i;
  #line 3788 
  int ret;
  #line 3786 
  struct adapter_info *ai = adapter->params.info;
  #line 3787 
  unsigned int j = 4294967295U;
  #line 3790 
  early_hw_init(adapter,ai);
  #line 3791 
  ret = init_parity(adapter);
  #line 3792 
  if (ret != 0) 
                #line 3793 
                return ret;
  #line 3795 
  i = 0U;
  #line 3795 
  while (adapter->params.nports > i) {
    {
      #line 3796 
      struct port_type_info *pti;
      #line 3797 
      struct port_info *p = adap2pinfo(adapter,(int)i);
      #line 3799 
      while (1) {
        #line 3799 
        j ++;
        #line 3799 
        ;
        #line 3799 
        if (! ((unsigned int)adapter->params.vpd.port_type[j] == 0U)) 
          #line 3799 
          break;
      }
      #line 3802 
      pti = & port_types[(int)adapter->params.vpd.port_type[j]];
      #line 3803 
      ret = (*(pti->phy_prep))(& p->phy,adapter,p->phy.mdio.prtad,(struct mdio_ops *)0);
      #line 3804 
      if (ret != 0) 
                    #line 3805 
                    return ret;
      #line 3806 
      (*((p->phy.ops)->power_down))(& p->phy,1);
    }
    #line 3795 
    i ++;
  }
  #line 3809 
  return 0;
}

#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/t3_hw.i.aux"
static void cif_mutex_lock_mdio_lock_of_adapter(struct mutex *lock)
{
  #line 680 
  ldv_mutex_model_lock(lock,(char *)"mdio_lock_of_adapter");
  #line 681 
  return;
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/t3_hw.i.aux"
static void cif_mutex_unlock_mdio_lock_of_adapter(struct mutex *lock)
{
  #line 687 
  ldv_mutex_model_unlock(lock,(char *)"mdio_lock_of_adapter");
  #line 688 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/barrier.h"
__inline static unsigned long array_index_mask_nospec(unsigned long index, unsigned long size)
{
  #line 39 
  unsigned long mask;
  #line 40 
  ldv_inline_asm();
  #line 45 
  return mask;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  #line 47 
  return (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 13 
void *memdup_user(void *, size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 13 
void __xchg_wrong_size(void);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 406  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool IS_ERR_0(void *ptr);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_stats_lock_of_adapter_0(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 960  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_work_lock_of_adapter(spinlock_t *lock);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq_1(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_irq_lock_of_sge_rspq_0(spinlock_t *lock);
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 916  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_irq_work_lock_of_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_stats_lock_of_adapter_0(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_work_lock_of_adapter(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq_1(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_irq_lock_of_sge_rspq_0(spinlock_t *lock);
#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_irq_work_lock_of_adapter(spinlock_t *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 26 
long ldv_ptr_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 292 
unsigned int jiffies_to_usecs(unsigned long);
#line 375 
#line 375 
unsigned long __usecs_to_jiffies(unsigned int);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int u)
{
  #line 379 
  return (unsigned long)(((long)u + 3999L) / 4000L);
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int u)
{
  #line 413 
  if (0 != 0) {
    #line 414 
    ;
    #line 414 
    if (jiffies_to_usecs(4611686018427387902UL) < u) 
                                                     #line 415 
                                                     return 4611686018427387902UL;
    #line 416 
    return _usecs_to_jiffies(u);
  }
  else {
    #line 418 
    return __usecs_to_jiffies(u);
  }
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 462 
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool cif_flush_work(struct work_struct *work);
#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 465 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 496 
#line 499  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 507  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 276 
int sysfs_create_group(struct kobject *, struct attribute_group *);
#line 284 
#line 284 
void sysfs_remove_group(struct kobject *, struct attribute_group *);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 868  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
#line 210 
bool capable(int);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 2199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put_zero(struct sk_buff *skb, unsigned int len)
{
  #line 2201 
  void *tmp = __skb_put(skb,len);
  #line 2203 
  memset(tmp,0,(unsigned long)len);
  #line 2204 
  return tmp;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit_0(0L,& n->state);
  #line 517 
  cif_clear_bit_0(3L,& n->state);
  #line 518 
  return;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue_0(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_0(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue_0(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3609 
#line 3609 
int netif_get_num_default_rss_queues(void);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4131 
#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4523 
void netdev_update_features(struct net_device *);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 978  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 35 
#line 35 
int rtnl_trylock(void);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
__inline static __u16 mdio_phy_id_c45(int prtad, int devad)
{
  #line 324 
  return (unsigned short)(((prtad << 5) | -32768) | devad);
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static bool mdio_phy_id_is_c45(int phy_id)
{
  #line 93 
  return (_Bool)(((phy_id & 32768) != 0 && (phy_id & -33792) == 0) != 0);
}

#line 187 
#line 187 
int mdio_mii_ioctl(struct mdio_if_info *, struct mii_ioctl_data *, int);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
struct workqueue_struct *cxgb3_wq;
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
int t3_get_edc_fw(struct cphy *phy, int edc_idx, int size);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct pci_device_id cxgb3_pci_tbl[14U] = {{.vendor = 5157U, .device = 32U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 33U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5157U, .device = 34U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 2UL}, {.vendor = 5157U, .device = 35U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5157U, .device = 36U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5157U, .device = 37U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5157U, .device = 38U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 2UL}, {.vendor = 5157U, .device = 48U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 2UL}, {.vendor = 5157U, .device = 49U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5157U, .device = 50U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 1UL}, {.vendor = 5157U, .device = 53U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6UL}, {.vendor = 5157U, .device = 54U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 5157U, .device = 55U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 7UL}};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
struct pci_device_id __mod_pci__cxgb3_pci_tbl_device_table[14U];
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int dflt_msg_enable = 255;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int msi = 2;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int ofld_disable = 0;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void link_report(struct net_device *dev)
{
  #line 158 
  if (netif_carrier_ok(dev)) {
    #line 176 
    char *tmp_0;
    #line 161 
    char *s = (char *)"10Mbps";
    #line 162 
    struct port_info *p = netdev_priv(dev);
    #line 164 
    switch ((int)p->link_config.speed) {
      #line 165 
      case 10000: 
                  #line 165 
      ;
      #line 166 
      s = (char *)"10Gbps";
      #line 167 
      break;
      #line 168 
      case 1000: 
                 #line 168 
      ;
      #line 169 
      s = (char *)"1000Mbps";
      #line 170 
      break;
      #line 171 
      case 100: 
                #line 171 
      ;
      #line 172 
      s = (char *)"100Mbps";
      #line 173 
      break;
    }
    #line 176 
    if ((unsigned int)p->link_config.duplex == 1U) 
                                                   #line 176 
                                                   tmp_0 = (char *)"full"; else 
                                                                    #line 176 
                                                                    tmp_0 = (char *)"half";
    #line 176 
    ;
    #line 176 
    ;
    #line 176 
    netdev_info(dev,(char *)"link up, %s, %s-duplex\n",s,tmp_0);
  }
  else 
       #line 159 
       netdev_info(dev,(char *)"link down\n");
  #line 180 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void enable_tx_fifo_drain(struct adapter *adapter, struct port_info *pi)
{
  #line 185 
  t3_set_reg_field(adapter,pi->mac.offset + 2184U,0U,2097152U);
  #line 187 
  t3_write_reg(adapter,pi->mac.offset + 2060U,0U);
  #line 188 
  t3_write_reg(adapter,pi->mac.offset + 2048U,1U);
  #line 189 
  t3_write_reg(adapter,pi->mac.offset + 2060U,1U);
  #line 190 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void disable_tx_fifo_drain(struct adapter *adapter, struct port_info *pi)
{
  #line 195 
  t3_set_reg_field(adapter,pi->mac.offset + 2184U,2097152U,0U);
  #line 196 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
void t3_os_link_fault(struct adapter *adap, int port_id, int state)
{
  #line 201 
  struct net_device *dev = adap->port[port_id];
  #line 202 
  struct port_info *pi = netdev_priv(dev);
  #line 204 
  ;
  #line 204 
  if ((int)netif_carrier_ok(dev) == state) 
                                           #line 205 
                                           return;
  #line 207 
  if (state != 0) {
    #line 208 
    struct cmac *mac = & pi->mac;
    #line 210 
    netif_carrier_on(dev);
    #line 212 
    disable_tx_fifo_drain(adap,pi);
    #line 215 
    t3_xgm_intr_disable(adap,(int)pi->port_id);
    #line 216 
    t3_read_reg(adap,pi->mac.offset + 2156U);
    #line 218 
    t3_write_reg(adap,pi->mac.offset + 2264U,1U);
    #line 222 
    t3_set_reg_field(adap,pi->mac.offset + 2260U,1U,1U);
    #line 226 
    t3_xgm_intr_enable(adap,(int)pi->port_id);
    #line 228 
    t3_mac_enable(mac,2);
  }
  else {
    #line 230 
    netif_carrier_off(dev);
    #line 233 
    enable_tx_fifo_drain(adap,pi);
  }
  #line 235 
  link_report(dev);
  #line 236 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
void t3_os_link_changed(struct adapter *adapter, int port_id, int link_stat, int speed, int duplex, int pause)
{
  #line 254 
  struct net_device *dev = adapter->port[port_id];
  #line 255 
  struct port_info *pi = netdev_priv(dev);
  #line 256 
  struct cmac *mac = & pi->mac;
  #line 259 
  if (! netif_running(dev)) 
                            #line 260 
                            return;
  #line 262 
  ;
  #line 262 
  if ((int)netif_carrier_ok(dev) != link_stat) {
    #line 263 
    if (link_stat != 0) {
      #line 264 
      disable_tx_fifo_drain(adapter,pi);
      #line 266 
      t3_mac_enable(mac,1);
      #line 269 
      t3_xgm_intr_disable(adapter,(int)pi->port_id);
      #line 270 
      t3_read_reg(adapter,pi->mac.offset + 2156U);
      #line 272 
      t3_write_reg(adapter,pi->mac.offset + 2264U,1U);
      #line 276 
      t3_set_reg_field(adapter,pi->mac.offset + 2260U,1U,1U);
      #line 279 
      t3_xgm_intr_enable(adapter,(int)pi->port_id);
      #line 281 
      netif_carrier_on(dev);
    }
    else {
      #line 283 
      netif_carrier_off(dev);
      #line 285 
      t3_xgm_intr_disable(adapter,(int)pi->port_id);
      #line 286 
      t3_read_reg(adapter,pi->mac.offset + 2156U);
      #line 287 
      t3_set_reg_field(adapter,pi->mac.offset + 2260U,1U,0U);
      #line 291 
      if (is_10G(adapter) != 0) 
                                #line 292 
                                (*((pi->phy.ops)->power_down))(& pi->phy,1);
      #line 294 
      t3_read_reg(adapter,pi->mac.offset + 2156U);
      #line 295 
      t3_mac_disable(mac,1);
      #line 296 
      t3_link_start(& pi->phy,mac,& pi->link_config);
      #line 299 
      enable_tx_fifo_drain(adapter,pi);
    }
    #line 302 
    link_report(dev);
  }
  #line 304 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
void t3_os_phymod_changed(struct adapter *adap, int port_id)
{
  #line 317 
  char *mod_str[7U] = {(char *)0, (char *)"SR", (char *)"LR", (char *)"LRM", (char *)"TWINAX", (char *)"TWINAX", (char *)"unknown"};
  #line 321 
  struct net_device *dev = adap->port[port_id];
  #line 322 
  struct port_info *pi = netdev_priv(dev);
  #line 324 
  if ((unsigned int)pi->phy.modtype == 0U) 
                                           #line 325 
                                           netdev_info(dev,(char *)"PHY module unplugged\n"); else 
                                                                    #line 327 
                                                                    netdev_info(dev,(char *)"%s PHY module inserted\n",mod_str[(int)pi->phy.modtype]);
  #line 329 
  return;
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void cxgb_set_rxmode(struct net_device *dev)
{
  #line 333 
  struct port_info *pi = netdev_priv(dev);
  #line 335 
  t3_mac_set_rx_mode(& pi->mac,dev);
  #line 336 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void link_start(struct net_device *dev)
{
  #line 346 
  struct port_info *pi = netdev_priv(dev);
  #line 347 
  struct cmac *mac = & pi->mac;
  #line 349 
  t3_mac_reset(mac);
  #line 350 
  t3_mac_set_num_ucast(mac,2);
  #line 351 
  t3_mac_set_mtu(mac,dev->mtu);
  #line 352 
  t3_mac_set_address(mac,0U,dev->dev_addr);
  #line 353 
  t3_mac_set_address(mac,1U,(u8 *)(& pi->iscsic.mac_addr));
  #line 354 
  t3_mac_set_rx_mode(mac,dev);
  #line 355 
  t3_link_start(& pi->phy,mac,& pi->link_config);
  #line 356 
  t3_mac_enable(mac,3);
  #line 357 
  return;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
__inline static void cxgb_disable_msi(struct adapter *adapter)
{
  #line 361 
  if ((adapter->flags & 4UL) != 0UL) {
    #line 362 
    pci_disable_msix(adapter->pdev);
    #line 363 
    adapter->flags &= 18446744073709551611UL;
  }
  else 
    #line 364 
    if ((adapter->flags & 2UL) != 0UL) {
      #line 365 
      pci_disable_msi(adapter->pdev);
      #line 366 
      adapter->flags &= 18446744073709551613UL;
    }
  #line 368 
  return;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static irqreturn_t t3_async_intr_handler(int irq, void *cookie)
{
  #line 375 
  t3_slow_intr_handler((struct adapter *)cookie);
  #line 376 
  return IRQ_HANDLED;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void name_msix_vecs(struct adapter *adap)
{
  #line 384 
  int i;
  #line 384 
  int j;
  #line 384 
  int msi_idx = 1;
  #line 384 
  int n = 21;
  #line 386 
  snprintf((char *)(& adap->msix_info[0].desc),(unsigned long)n,(char *)"%s",adap->name);
  #line 387 
  adap->msix_info[0].desc[n] = (char)0;
  #line 389 
  j = 0;
  #line 389 
  while (adap->params.nports > (unsigned int)j) {
    {
      #line 390 
      struct net_device *d = adap->port[j];
      #line 391 
      struct port_info *pi = netdev_priv(d);
      #line 393 
      i = 0;
      #line 393 
      while ((int)pi->nqsets > i) {
        #line 394 
        snprintf((char *)(& adap->msix_info[msi_idx].desc),(unsigned long)n,(char *)"%s-%d",(char *)(& d->name),(int)pi->first_qset + i);
        #line 396 
        adap->msix_info[msi_idx].desc[n] = (char)0;
        #line 393 
        i ++;
        #line 393 
        msi_idx ++;
      }
    }
    #line 389 
    j ++;
  }
  #line 399 
  return;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int request_msix_data_irqs(struct adapter *adap)
{
  #line 403 
  int i;
  #line 403 
  int j;
  #line 403 
  int err;
  #line 403 
  int qidx = 0;
  #line 405 
  i = 0;
  #line 405 
  while (adap->params.nports > (unsigned int)i) {
    {
      #line 406 
      int nqsets = (int)adap2pinfo(adap,i)->nqsets;
      #line 408 
      j = 0;
      #line 408 
      while (j < nqsets) {
        {
          #line 409 
          ;
          #line 409 
          ;
          #line 409 
          ;
          #line 409 
          err = cif_request_irq((unsigned int)adap->msix_info[qidx + 1].vec,t3_intr_handler(adap,(int)adap->sge.qs[qidx].rspq.polling),0UL,(char *)(& adap->msix_info[qidx + 1].desc),(void *)(& adap->sge.qs[qidx]));
          #line 415 
          if (err != 0) {
            #line 416 
            while (1) {
              #line 416 
              qidx --;
              #line 416 
              if (! (qidx >= 0)) 
                                 #line 416 
                                 break;
              #line 417 
              cif_free_irq((unsigned int)adap->msix_info[qidx + 1].vec,(void *)(& adap->sge.qs[qidx]));
            }
            #line 419 
            return err;
          }
          #line 421 
          qidx ++;
        }
        #line 408 
        j ++;
      }
    }
    #line 405 
    i ++;
  }
  #line 424 
  return 0;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void free_irq_resources(struct adapter *adapter)
{
  #line 429 
  if ((adapter->flags & 4UL) != 0UL) {
    #line 430 
    int i;
    #line 430 
    int n = 0;
    #line 432 
    cif_free_irq((unsigned int)adapter->msix_info[0].vec,(void *)adapter);
    #line 433 
    i = 0;
    #line 433 
    while (adapter->params.nports > (unsigned int)i) {
      #line 434 
      n = (int)adap2pinfo(adapter,i)->nqsets + n;
      #line 433 
      i ++;
    }
    #line 436 
    i = 0;
    #line 436 
    while (i < n) {
      #line 437 
      cif_free_irq((unsigned int)adapter->msix_info[i + 1].vec,(void *)(& adapter->sge.qs[i]));
      #line 436 
      i ++;
    }
  }
  else 
       #line 440 
       cif_free_irq((adapter->pdev)->irq,(void *)adapter);
  #line 441 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int await_mgmt_replies(struct adapter *adap, unsigned long init_cnt, unsigned long n)
{
  #line 446 
  int attempts = 10;
  #line 448 
  while (adap->sge.qs[0].rspq.offload_pkts < init_cnt + n) {
    #line 449 
    attempts --;
    #line 449 
    if (attempts == 0) 
                       #line 450 
                       return -110;
    #line 451 
    msleep(10U);
  }
  #line 453 
  return 0;
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int init_tp_parity(struct adapter *adap)
{
  #line 458 
  int i;
  #line 459 
  struct sk_buff *skb;
  #line 460 
  struct cpl_set_tcb_field *greq;
  #line 461 
  unsigned long cnt = adap->sge.qs[0].rspq.offload_pkts;
  #line 463 
  t3_tp_set_offload_mode(adap,1);
  #line 465 
  i = 0;
  #line 465 
  while (i <= 15) {
    {
      #line 466 
      struct cpl_smt_write_req *req;
      #line 468 
      skb = alloc_skb(32U,3264U);
      #line 469 
      if (skb == (struct sk_buff *)0) 
                                      #line 470 
                                      skb = adap->nofail_skb;
      #line 471 
      if (skb == (struct sk_buff *)0) 
                                      #line 472 
                                      goto alloc_skb_fail;
      #line 474 
      req = (struct cpl_smt_write_req *)__skb_put_zero(skb,32U);
      #line 475 
      req->wr.wr_hi = 1U;
      #line 476 
      req->ot.opcode_tid = __builtin_bswap32((unsigned int)(i | 335544320));
      #line 477 
      req->mtu_idx = (unsigned char)15U;
      #line 478 
      req->iff = (unsigned char)i;
      #line 479 
      t3_mgmt_tx(adap,skb);
      #line 480 
      if (adap->nofail_skb == skb) {
        #line 481 
        await_mgmt_replies(adap,cnt,(unsigned long)(i + 1));
        #line 482 
        adap->nofail_skb = alloc_skb(32U,3264U);
        #line 483 
        if (adap->nofail_skb == (struct sk_buff *)0) 
                                                     #line 484 
                                                     goto alloc_skb_fail;
      }
    }
    #line 465 
    i ++;
  }
  #line 488 
  i = 0;
  #line 488 
  while (i <= 2047) {
    {
      #line 489 
      struct cpl_l2t_write_req *req_0;
      #line 491 
      skb = alloc_skb(24U,3264U);
      #line 492 
      if (skb == (struct sk_buff *)0) 
                                      #line 493 
                                      skb = adap->nofail_skb;
      #line 494 
      if (skb == (struct sk_buff *)0) 
                                      #line 495 
                                      goto alloc_skb_fail;
      #line 497 
      req_0 = (struct cpl_l2t_write_req *)__skb_put_zero(skb,24U);
      #line 498 
      req_0->wr.wr_hi = 1U;
      #line 499 
      req_0->ot.opcode_tid = __builtin_bswap32((unsigned int)(i | 301989888));
      #line 500 
      req_0->params = __builtin_bswap32((unsigned int)i);
      #line 501 
      t3_mgmt_tx(adap,skb);
      #line 502 
      if (adap->nofail_skb == skb) {
        #line 503 
        await_mgmt_replies(adap,cnt,(unsigned long)(i + 17));
        #line 504 
        adap->nofail_skb = alloc_skb(32U,3264U);
        #line 505 
        if (adap->nofail_skb == (struct sk_buff *)0) 
                                                     #line 506 
                                                     goto alloc_skb_fail;
      }
    }
    #line 488 
    i ++;
  }
  #line 510 
  i = 0;
  #line 510 
  while (i <= 2047) {
    {
      #line 511 
      struct cpl_rte_write_req *req_1;
      #line 513 
      skb = alloc_skb(32U,3264U);
      #line 514 
      if (skb == (struct sk_buff *)0) 
                                      #line 515 
                                      skb = adap->nofail_skb;
      #line 516 
      if (skb == (struct sk_buff *)0) 
                                      #line 517 
                                      goto alloc_skb_fail;
      #line 519 
      req_1 = (struct cpl_rte_write_req *)__skb_put_zero(skb,32U);
      #line 520 
      req_1->wr.wr_hi = 1U;
      #line 521 
      req_1->ot.opcode_tid = __builtin_bswap32((unsigned int)(i | 268435456));
      #line 522 
      req_1->l2t_idx = (unsigned short)__builtin_bswap32((unsigned int)i);
      #line 523 
      t3_mgmt_tx(adap,skb);
      #line 524 
      if (adap->nofail_skb == skb) {
        #line 525 
        await_mgmt_replies(adap,cnt,(unsigned long)(i + 2065));
        #line 526 
        adap->nofail_skb = alloc_skb(32U,3264U);
        #line 527 
        if (adap->nofail_skb == (struct sk_buff *)0) 
                                                     #line 528 
                                                     goto alloc_skb_fail;
      }
    }
    #line 510 
    i ++;
  }
  #line 532 
  skb = alloc_skb(32U,3264U);
  #line 533 
  if (skb == (struct sk_buff *)0) 
                                  #line 534 
                                  skb = adap->nofail_skb;
  #line 535 
  if (skb == (struct sk_buff *)0) 
                                  #line 536 
                                  goto alloc_skb_fail;
  #line 538 
  greq = (struct cpl_set_tcb_field *)__skb_put_zero(skb,32U);
  #line 539 
  greq->wr.wr_hi = 1U;
  #line 540 
  greq->ot.opcode_tid = 5U;
  #line 541 
  greq->mask = 72057594037927936ULL;
  #line 542 
  t3_mgmt_tx(adap,skb);
  #line 544 
  i = await_mgmt_replies(adap,cnt,4113UL);
  #line 545 
  if (adap->nofail_skb == skb) {
    #line 546 
    i = await_mgmt_replies(adap,cnt,4113UL);
    #line 547 
    adap->nofail_skb = alloc_skb(32U,3264U);
  }
  #line 550 
  t3_tp_set_offload_mode(adap,0);
  #line 551 
  return i;
  #line 553 
  alloc_skb_fail: 
                  #line 553 
  ;
  #line 554 
  t3_tp_set_offload_mode(adap,0);
  #line 555 
  return -12;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void setup_rss(struct adapter *adap)
{
  #line 571 
  int i;
  #line 573 
  unsigned int tmp_1;
  #line 574 
  u8 cpus[9U];
  #line 575 
  u16 rspq_map[65U];
  #line 572 
  unsigned int nq0 = (unsigned int)adap2pinfo(adap,0)->nqsets;
  #line 573 
  if (adap->port[1] != (struct net_device *)0) {
    #line 573 
    tmp_1 = (unsigned int)adap2pinfo(adap,1)->nqsets;
  }
  else 
       #line 573 
       tmp_1 = 1U;
  #line 573 
  unsigned int nq1 = tmp_1;
  #line 577 
  i = 0;
  #line 577 
  while (i <= 7) {
    #line 578 
    cpus[i] = (unsigned char)i;
    #line 577 
    i ++;
  }
  #line 579 
  cpus[8] = (unsigned char)255U;
  #line 581 
  i = 0;
  #line 581 
  while (i <= 31) {
    #line 582 
    rspq_map[i] = (unsigned short)((unsigned int)i % nq0);
    #line 583 
    rspq_map[i + 32] = (unsigned short)((int)((unsigned short)((unsigned int)i % nq1)) + (int)((unsigned short)nq0));
    #line 581 
    i ++;
  }
  #line 585 
  rspq_map[64] = (unsigned short)65535U;
  #line 587 
  t3_config_rss(adap,922746988U,(u8 *)(& cpus),(u16 *)(& rspq_map));
  #line 590 
  return;
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void ring_dbs(struct adapter *adap)
{
  #line 594 
  int i;
  #line 594 
  int j;
  #line 596 
  i = 0;
  #line 596 
  while (i <= 7) {
    {
      #line 597 
      struct sge_qset *qs = & adap->sge.qs[i];
      #line 599 
      if (qs->adap != (struct adapter *)0) {
        #line 600 
        j = 0;
        #line 600 
        while (j <= 2) {
          #line 601 
          t3_write_reg(adap,4U,qs->txq[j].cntxt_id | 2147483648U);
          #line 600 
          j ++;
        }
      }
    }
    #line 596 
    i ++;
  }
  #line 604 
  return;
}

#line 605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void init_napi(struct adapter *adap)
{
  #line 607 
  int i;
  #line 609 
  i = 0;
  #line 609 
  while (i <= 7) {
    {
      #line 610 
      struct sge_qset *qs = & adap->sge.qs[i];
      #line 612 
      if (qs->adap != (struct adapter *)0) 
                                           #line 613 
                                           netif_napi_add(qs->netdev,& qs->napi,qs->napi.poll,64);
    }
    #line 609 
    i ++;
  }
  #line 622 
  adap->flags |= 32UL;
  #line 623 
  return;
}

#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void quiesce_rx(struct adapter *adap)
{
  #line 632 
  int i;
  #line 634 
  i = 0;
  #line 634 
  while (i <= 7) {
    #line 635 
    if (adap->sge.qs[i].adap != (struct adapter *)0) 
                                                     #line 636 
                                                     napi_disable(& adap->sge.qs[i].napi);
    #line 634 
    i ++;
  }
  #line 637 
  return;
}

#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void enable_all_napi(struct adapter *adap)
{
  #line 641 
  int i;
  #line 642 
  i = 0;
  #line 642 
  while (i <= 7) {
    #line 643 
    if (adap->sge.qs[i].adap != (struct adapter *)0) 
                                                     #line 644 
                                                     napi_enable(& adap->sge.qs[i].napi);
    #line 642 
    i ++;
  }
  #line 645 
  return;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int setup_sge_qsets(struct adapter *adap)
{
  #line 657 
  int i;
  #line 657 
  int j;
  #line 657 
  int err;
  #line 657 
  int irq_idx = 0;
  #line 657 
  int qset_idx = 0;
  #line 658 
  unsigned int ntxq = 3U;
  #line 660 
  if (adap->params.rev != 0U && (adap->flags & 2UL) == 0UL) 
                                                            #line 661 
                                                            irq_idx = -1;
  #line 663 
  i = 0;
  #line 663 
  while (adap->params.nports > (unsigned int)i) {
    {
      #line 664 
      struct net_device *dev = adap->port[i];
      #line 665 
      struct port_info *pi = netdev_priv(dev);
      #line 667 
      pi->qs = & adap->sge.qs[(int)pi->first_qset];
      #line 668 
      j = 0;
      #line 668 
      while ((int)pi->nqsets > j) {
        {
          #line 672 
          struct netdev_queue *tmp_0;
          #line 669 
          int tmp_1;
          #line 672 
          tmp_0 = netdev_get_tx_queue(dev,(unsigned int)j);
          #line 669 
          ;
          #line 669 
          ;
          #line 669 
          ;
          #line 669 
          if ((adap->flags & 4UL) != 0UL) 
                                          #line 669 
                                          tmp_1 = qset_idx + 1; else 
                                                                  #line 669 
                                                                  tmp_1 = irq_idx;
          #line 669 
          ;
          #line 669 
          ;
          #line 669 
          err = t3_sge_alloc_qset(adap,(unsigned int)qset_idx,1,tmp_1,& adap->params.sge.qset[qset_idx],(int)ntxq,dev,tmp_0);
          #line 674 
          if (err != 0) {
            #line 675 
            t3_free_sge_resources(adap);
            #line 676 
            return err;
          }
        }
        #line 668 
        j ++;
        #line 668 
        qset_idx ++;
      }
    }
    #line 663 
    i ++;
  }
  #line 681 
  return 0;
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t attr_show(struct device *d, char *buf, ssize_t (*format)(struct net_device *, char *))
{
  #line 691 
  void *__mptr;
  #line 687 
  ssize_t len;
  #line 690 
  rtnl_lock();
  #line 691 
  ;
  #line 691 
  __mptr = (void *)d;
  #line 691 
  len = (*format)(((struct net_device *)(__mptr + 18446744073709550144U)),buf);
  #line 692 
  rtnl_unlock();
  #line 693 
  return len;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t attr_store(struct device *d, char *buf, size_t len, ssize_t (*set)(struct net_device *, unsigned int ), unsigned int min_val, unsigned int max_val)
{
  #line 714 
  void *__mptr;
  #line 701 
  ssize_t ret;
  #line 702 
  unsigned int val;
  #line 704 
  if (! capable(12)) 
                     #line 705 
                     return -1L;
  #line 707 
  ret = (long)kstrtouint(buf,0U,& val);
  #line 708 
  if (ret != 0L) 
                 #line 709 
                 return ret;
  #line 710 
  if (val < min_val || val > max_val) 
                                      #line 711 
                                      return -22L;
  #line 713 
  rtnl_lock();
  #line 714 
  ;
  #line 714 
  __mptr = (void *)d;
  #line 714 
  ret = (*set)(((struct net_device *)(__mptr + 18446744073709550144U)),val);
  #line 715 
  if (ret == 0L) 
                 #line 716 
                 ret = (long)len;
  #line 717 
  rtnl_unlock();
  #line 718 
  return ret;
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t set_nfilters(struct net_device *dev, unsigned int val)
{
  #line 738 
  int tmp_1;
  #line 736 
  struct port_info *pi = netdev_priv(dev);
  #line 737 
  struct adapter *adap = pi->adapter;
  #line 738 
  if (is_offload(adap) != 0) 
                             #line 738 
                             tmp_1 = 16; else 
                                              #line 738 
                                              tmp_1 = 0;
  #line 738 
  int min_tids = tmp_1;
  #line 740 
  if ((adap->flags & 1UL) != 0UL) 
                                  #line 741 
                                  return -16L;
  #line 742 
  if (val != 0U && adap->params.rev == 0U) 
                                           #line 743 
                                           return -22L;
  #line 744 
  ;
  #line 744 
  if ((t3_mc5_size(& adap->mc5) - adap->params.mc5.nservers) - (unsigned int)min_tids < val) 
    #line 746 
    return -22L;
  #line 747 
  adap->params.mc5.nfilters = val;
  #line 748 
  return 0L;
}

#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_nfilters(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 754 
  return attr_store(d,buf,len,& set_nfilters,0U,4294967295U);
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t set_nservers(struct net_device *dev, unsigned int val)
{
  #line 759 
  struct port_info *pi = netdev_priv(dev);
  #line 760 
  struct adapter *adap = pi->adapter;
  #line 762 
  if ((adap->flags & 1UL) != 0UL) 
                                  #line 763 
                                  return -16L;
  #line 764 
  ;
  #line 764 
  if ((t3_mc5_size(& adap->mc5) - adap->params.mc5.nfilters) + 4294967280U < val) 
    #line 766 
    return -22L;
  #line 767 
  adap->params.mc5.nservers = val;
  #line 768 
  return 0L;
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_nservers(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 774 
  return attr_store(d,buf,len,& set_nservers,0U,4294967295U);
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t format_cam_size(struct net_device *dev, char *buf)
{
  #line 785 
  struct port_info *pi = netdev_priv(dev);
  #line 785 
  struct adapter *adap = pi->adapter;
  #line 785 
  ;
  #line 785 
  return (long)sprintf(buf,(char *)"%u\n",t3_mc5_size(& adap->mc5));
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_cam_size(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 785 
  return attr_show(d,buf,& format_cam_size);
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_cam_size = {.attr = {.name = (char *)"cam_size", .mode = (unsigned short)292U}, .show = & show_cam_size};
#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t format_nfilters(struct net_device *dev, char *buf)
{
  #line 786 
  struct port_info *pi = netdev_priv(dev);
  #line 786 
  struct adapter *adap = pi->adapter;
  #line 786 
  return (long)sprintf(buf,(char *)"%u\n",adap->params.mc5.nfilters);
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_nfilters(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 786 
  return attr_show(d,buf,& format_nfilters);
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_nfilters = {.attr = {.name = (char *)"nfilters", .mode = (unsigned short)420U}, .show = & show_nfilters, .store = & store_nfilters};
#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t format_nservers(struct net_device *dev, char *buf)
{
  #line 787 
  struct port_info *pi = netdev_priv(dev);
  #line 787 
  struct adapter *adap = pi->adapter;
  #line 787 
  return (long)sprintf(buf,(char *)"%u\n",adap->params.mc5.nservers);
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_nservers(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 787 
  return attr_show(d,buf,& format_nservers);
}

#line 787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_nservers = {.attr = {.name = (char *)"nservers", .mode = (unsigned short)420U}, .show = & show_nservers, .store = & store_nservers};
#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct attribute *cxgb3_attrs[4U] = {& dev_attr_cam_size.attr, & dev_attr_nfilters.attr, & dev_attr_nservers.attr};
#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct attribute_group cxgb3_attr_group = {.attrs = (struct attribute **)(& cxgb3_attrs)};
#line 800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t tm_attr_show(struct device *d, char *buf, int sched)
{
  #line 803 
  void *__mptr;
  #line 805 
  unsigned int v;
  #line 805 
  unsigned int addr;
  #line 805 
  unsigned int bpt;
  #line 805 
  unsigned int cpt;
  #line 806 
  ssize_t len;
  #line 803 
  __mptr = (void *)d;
  #line 803 
  struct port_info *pi = (struct port_info *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 804 
  struct adapter *adap = pi->adapter;
  #line 808 
  addr = (unsigned int)(sched / -2 + 8);
  #line 809 
  rtnl_lock();
  #line 810 
  t3_write_reg(adap,1048U,addr);
  #line 811 
  v = t3_read_reg(adap,1052U);
  #line 812 
  if ((sched & 1) != 0) 
                        #line 813 
                        v >>= 16;
  #line 814 
  bpt = (v >> 8) & 255U;
  #line 815 
  cpt = v & 255U;
  #line 816 
  if (cpt == 0U) {
    #line 817 
    len = (long)sprintf(buf,(char *)"disabled\n");
  }
  else {
    #line 819 
    v = (adap->params.vpd.cclk * 1000U) / cpt;
    #line 820 
    len = (long)sprintf(buf,(char *)"%u Kbps\n",(v * bpt) / 125U);
  }
  #line 822 
  rtnl_unlock();
  #line 823 
  return len;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t tm_attr_store(struct device *d, char *buf, size_t len, int sched)
{
  #line 829 
  void *__mptr;
  #line 831 
  unsigned int val;
  #line 832 
  ssize_t ret;
  #line 829 
  __mptr = (void *)d;
  #line 829 
  struct port_info *pi = (struct port_info *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 830 
  struct adapter *adap = pi->adapter;
  #line 834 
  if (! capable(12)) 
                     #line 835 
                     return -1L;
  #line 837 
  ret = (long)kstrtouint(buf,0U,& val);
  #line 838 
  if (ret != 0L) 
                 #line 839 
                 return ret;
  #line 840 
  if (val > 10000000U) 
                       #line 841 
                       return -22L;
  #line 843 
  rtnl_lock();
  #line 844 
  ret = (long)t3_config_sched(adap,val,sched);
  #line 845 
  if (ret == 0L) 
                 #line 846 
                 ret = (long)len;
  #line 847 
  rtnl_unlock();
  #line 848 
  return ret;
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched0(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 864 
  return tm_attr_show(d,buf,0);
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched0(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 864 
  return tm_attr_store(d,buf,len,0);
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched0 = {.attr = {.name = (char *)"sched0", .mode = (unsigned short)420U}, .show = & show_sched0, .store = & store_sched0};
#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched1(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 865 
  return tm_attr_show(d,buf,1);
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched1(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 865 
  return tm_attr_store(d,buf,len,1);
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched1 = {.attr = {.name = (char *)"sched1", .mode = (unsigned short)420U}, .show = & show_sched1, .store = & store_sched1};
#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched2(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 866 
  return tm_attr_show(d,buf,2);
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched2(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 866 
  return tm_attr_store(d,buf,len,2);
}

#line 866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched2 = {.attr = {.name = (char *)"sched2", .mode = (unsigned short)420U}, .show = & show_sched2, .store = & store_sched2};
#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched3(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 867 
  return tm_attr_show(d,buf,3);
}

#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched3(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 867 
  return tm_attr_store(d,buf,len,3);
}

#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched3 = {.attr = {.name = (char *)"sched3", .mode = (unsigned short)420U}, .show = & show_sched3, .store = & store_sched3};
#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched4(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 868 
  return tm_attr_show(d,buf,4);
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched4(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 868 
  return tm_attr_store(d,buf,len,4);
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched4 = {.attr = {.name = (char *)"sched4", .mode = (unsigned short)420U}, .show = & show_sched4, .store = & store_sched4};
#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched5(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 869 
  return tm_attr_show(d,buf,5);
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched5(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 869 
  return tm_attr_store(d,buf,len,5);
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched5 = {.attr = {.name = (char *)"sched5", .mode = (unsigned short)420U}, .show = & show_sched5, .store = & store_sched5};
#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched6(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 870 
  return tm_attr_show(d,buf,6);
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched6(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 870 
  return tm_attr_store(d,buf,len,6);
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched6 = {.attr = {.name = (char *)"sched6", .mode = (unsigned short)420U}, .show = & show_sched6, .store = & store_sched6};
#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t show_sched7(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 871 
  return tm_attr_show(d,buf,7);
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static ssize_t store_sched7(struct device *d, struct device_attribute *attr, char *buf, size_t len)
{
  #line 871 
  return tm_attr_store(d,buf,len,7);
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct device_attribute dev_attr_sched7 = {.attr = {.name = (char *)"sched7", .mode = (unsigned short)420U}, .show = & show_sched7, .store = & store_sched7};
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct attribute *offload_attrs[9U] = {& dev_attr_sched0.attr, & dev_attr_sched1.attr, & dev_attr_sched2.attr, & dev_attr_sched3.attr, & dev_attr_sched4.attr, & dev_attr_sched5.attr, & dev_attr_sched6.attr, & dev_attr_sched7.attr};
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct attribute_group offload_attr_group = {.attrs = (struct attribute **)(& offload_attrs)};
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
__inline static int offload_tx(struct t3cdev *tdev, struct sk_buff *skb)
{
  #line 895 
  int ret;
  #line 897 
  local_bh_disable();
  #line 898 
  ret = t3_offload_tx(tdev,skb);
  #line 899 
  local_bh_enable();
  #line 900 
  return ret;
}

#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int write_smt_entry(struct adapter *adapter, int idx)
{
  #line 905 
  struct cpl_smt_write_req *req;
  #line 906 
  struct port_info *pi = netdev_priv(adapter->port[idx]);
  #line 907 
  struct sk_buff *skb = alloc_skb(32U,3264U);
  #line 909 
  if (skb == (struct sk_buff *)0) 
                                  #line 910 
                                  return -12;
  #line 912 
  req = (struct cpl_smt_write_req *)__skb_put(skb,32U);
  #line 913 
  req->wr.wr_hi = 1U;
  #line 914 
  req->ot.opcode_tid = __builtin_bswap32((unsigned int)(idx | 335544320));
  #line 915 
  req->mtu_idx = (unsigned char)15U;
  #line 916 
  req->iff = (unsigned char)idx;
  #line 917 
  memcpy((void *)(& req->src_mac0),(void *)(adapter->port[idx])->dev_addr,6UL);
  #line 918 
  memcpy((void *)(& req->src_mac1),(void *)(& pi->iscsic.mac_addr),6UL);
  #line 919 
  skb->priority = 1U;
  #line 920 
  offload_tx(& adapter->tdev,skb);
  #line 921 
  return 0;
}

#line 924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int init_smt(struct adapter *adapter)
{
  #line 926 
  int i;
  #line 928 
  i = 0;
  #line 928 
  while (adapter->params.nports > (unsigned int)i) {
    #line 929 
    write_smt_entry(adapter,i);
    #line 928 
    i ++;
  }
  #line 930 
  return 0;
}

#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void init_port_mtus(struct adapter *adapter)
{
  #line 935 
  unsigned int mtus = (adapter->port[0])->mtu;
  #line 937 
  if (adapter->port[1] != (struct net_device *)0) 
                                                  #line 938 
                                                  mtus = ((adapter->port[1])->mtu << 16) | mtus;
  #line 939 
  t3_write_reg(adapter,976U,mtus);
  #line 940 
  return;
}

#line 942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int send_pktsched_cmd(struct adapter *adap, int sched, int qidx, int lo, int hi, int port)
{
  #line 945 
  struct sk_buff *skb;
  #line 946 
  struct mngt_pktsched_wr *req;
  #line 947 
  int ret;
  #line 949 
  skb = alloc_skb(24U,3264U);
  #line 950 
  if (skb == (struct sk_buff *)0) 
                                  #line 951 
                                  skb = adap->nofail_skb;
  #line 952 
  if (skb == (struct sk_buff *)0) 
                                  #line 953 
                                  return -12;
  #line 955 
  req = (struct mngt_pktsched_wr *)skb_put(skb,24U);
  #line 956 
  req->wr_hi = 29U;
  #line 957 
  req->mngt_opcode = (unsigned char)0U;
  #line 958 
  req->sched = (unsigned char)sched;
  #line 959 
  req->idx = (unsigned char)qidx;
  #line 960 
  req->min = (unsigned char)lo;
  #line 961 
  req->max = (unsigned char)hi;
  #line 962 
  req->binding = (unsigned char)port;
  #line 963 
  ret = t3_mgmt_tx(adap,skb);
  #line 964 
  if (adap->nofail_skb == skb) {
    #line 965 
    adap->nofail_skb = alloc_skb(32U,3264U);
    #line 967 
    if (adap->nofail_skb == (struct sk_buff *)0) 
                                                 #line 968 
                                                 ret = -12;
  }
  #line 971 
  return ret;
}

#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int bind_qsets(struct adapter *adap)
{
  #line 976 
  int i;
  #line 976 
  int j;
  #line 976 
  int err = 0;
  #line 978 
  i = 0;
  #line 978 
  while (adap->params.nports > (unsigned int)i) {
    {
      #line 979 
      struct port_info *pi = adap2pinfo(adap,i);
      #line 981 
      j = 0;
      #line 981 
      while ((int)pi->nqsets > j) {
        {
          #line 982 
          int ret = send_pktsched_cmd(adap,1,(int)pi->first_qset + j,-1,-1,i);
          #line 985 
          if (ret != 0) 
                        #line 986 
                        err = ret;
        }
        #line 981 
        j ++;
      }
    }
    #line 978 
    i ++;
  }
  #line 990 
  return err;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
__inline static char *get_edc_fw_name(int edc_idx)
{
  #line 1011 
  char *fw_name = (char *)0;
  #line 1013 
  switch (edc_idx) {
    #line 1014 
    case 0: 
            #line 1014 
    ;
    #line 1015 
    fw_name = (char *)"cxgb3/ael2005_opt_edc.bin";
    #line 1016 
    break;
    #line 1017 
    case 1: 
            #line 1017 
    ;
    #line 1018 
    fw_name = (char *)"cxgb3/ael2005_twx_edc.bin";
    #line 1019 
    break;
    #line 1020 
    case 2: 
            #line 1020 
    ;
    #line 1021 
    fw_name = (char *)"cxgb3/ael2020_twx_edc.bin";
    #line 1022 
    break;
  }
  #line 1024 
  return fw_name;
}

#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
int t3_get_edc_fw(struct cphy *phy, int edc_idx, int size)
{
  #line 1030 
  struct firmware *fw;
  #line 1031 
  char *fw_name;
  #line 1032 
  u32 csum;
  #line 1033 
  __be32 *p;
  #line 1035 
  int i;
  #line 1029 
  struct adapter *adapter = phy->adapter;
  #line 1034 
  u16 *cache = (u16 *)(& phy->phy_cache);
  #line 1035 
  int ret = -22;
  #line 1037 
  fw_name = get_edc_fw_name(edc_idx);
  #line 1038 
  if (fw_name != (char *)0) 
                            #line 1039 
                            ret = cif_request_firmware(& fw,fw_name,& (adapter->pdev)->dev);
  #line 1040 
  if (ret < 0) {
    #line 1041 
    _dev_err(& (adapter->pdev)->dev,(char *)"could not upgrade firmware: unable to load %s\n",fw_name);
    #line 1044 
    return ret;
  }
  #line 1048 
  if (fw->size > (unsigned long)(size + 4)) {
    #line 1049 
    _dev_err(& (adapter->pdev)->dev,(char *)"firmware image too large %u, expected %d\n",(unsigned int)fw->size,size + 4);
    #line 1051 
    ret = -22;
  }
  #line 1055 
  p = (__be32 *)fw->data;
  #line 1056 
  csum = 0U;
  #line 1056 
  i = 0;
  #line 1056 
  while ((unsigned long)i < fw->size / 4UL) {
    #line 1057 
    csum = __builtin_bswap32(*(p + (unsigned long)i)) + csum;
    #line 1056 
    i ++;
  }
  #line 1059 
  if (csum != 4294967295U) {
    #line 1060 
    _dev_err(& (adapter->pdev)->dev,(char *)"corrupted firmware image, checksum %u\n",csum);
    #line 1062 
    ret = -22;
  }
  #line 1065 
  i = 0;
  #line 1065 
  while (size / 4 > i) {
    {
      #line 1066 
      u16 *tmp_0;
      #line 1067 
      u16 *tmp_2;
      #line 1066 
      tmp_0 = cache;
      #line 1066 
      cache ++;
      #line 1066 
      *tmp_0 = (unsigned short)(__builtin_bswap32(*(p + (unsigned long)i)) >> 16);
      #line 1067 
      tmp_2 = cache;
      #line 1067 
      cache ++;
      #line 1067 
      *tmp_2 = (unsigned short)__builtin_bswap32(*(p + (unsigned long)i));
    }
    #line 1065 
    i ++;
  }
  #line 1070 
  cif_release_firmware(fw);
  #line 1072 
  return ret;
}

#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int upgrade_fw(struct adapter *adap)
{
  #line 1077 
  int ret;
  #line 1078 
  struct firmware *fw;
  #line 1079 
  struct device *dev = & (adap->pdev)->dev;
  #line 1081 
  ret = cif_request_firmware(& fw,(char *)"cxgb3/t3fw-",dev);
  #line 1082 
  if (ret < 0) {
    #line 1083 
    _dev_err(dev,(char *)"could not upgrade firmware: unable to load %s\n",(char *)"cxgb3/t3fw-");
    #line 1085 
    return ret;
  }
  #line 1087 
  ret = t3_load_fw(adap,fw->data,(unsigned int)fw->size);
  #line 1088 
  cif_release_firmware(fw);
  #line 1090 
  if (ret == 0) 
                #line 1091 
                _dev_info(dev,(char *)"successful upgrade to firmware %d.%d.%d\n",7,12,0); else 
                                                                    #line 1094 
                                                                    _dev_err(dev,(char *)"failed to upgrade to firmware %d.%d.%d\n",7,12,0);
  #line 1097 
  return ret;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
__inline static char t3rev2char(struct adapter *adapter)
{
  #line 1102 
  char rev = (char)0;
  #line 1104 
  switch (adapter->params.rev) {
    #line 1105 
    case (unsigned int)2: 
                          #line 1105 
    ;
    #line 1106 
    case (unsigned int)3: 
                          #line 1106 
    ;
    #line 1107 
    rev = (char)98;
    #line 1108 
    break;
    #line 1109 
    case (unsigned int)4: 
                          #line 1109 
    ;
    #line 1110 
    rev = (char)99;
    #line 1111 
    break;
  }
  #line 1113 
  return rev;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int update_tpsram(struct adapter *adap)
{
  #line 1118 
  struct firmware *tpsram;
  #line 1119 
  char buf[64U];
  #line 1121 
  int ret;
  #line 1122 
  char rev;
  #line 1120 
  struct device *dev = & (adap->pdev)->dev;
  #line 1124 
  rev = t3rev2char(adap);
  #line 1125 
  if ((int)rev == 0) 
                     #line 1126 
                     return 0;
  #line 1128 
  snprintf((char *)(& buf),64UL,(char *)"cxgb3/t3%c_psram-",(int)rev);
  #line 1130 
  ret = cif_request_firmware(& tpsram,(char *)(& buf),dev);
  #line 1131 
  if (ret < 0) {
    #line 1132 
    _dev_err(dev,(char *)"could not load TP SRAM: unable to load %s\n",(char *)(& buf));
    #line 1134 
    return ret;
  }
  #line 1137 
  ret = t3_check_tpsram(adap,tpsram->data,(unsigned int)tpsram->size);
  #line 1138 
  if (ret != 0) 
                #line 1139 
                goto release_tpsram;
  #line 1141 
  ret = t3_set_proto_sram(adap,tpsram->data);
  #line 1142 
  if (ret == 0) 
                #line 1143 
                _dev_info(dev,(char *)"successful update of protocol engine ",1,1,0); else 
                                                                    #line 1148 
                                                                    _dev_err(dev,(char *)"failed to update of protocol engine %d.%d.%d\n",1,1,0);
  #line 1150 
  if (ret != 0) 
                #line 1151 
                _dev_err(dev,(char *)"loading protocol SRAM failed\n");
  #line 1153 
  release_tpsram: 
                  #line 1153 
  ;
  #line 1154 
  cif_release_firmware(tpsram);
  #line 1156 
  return ret;
}

#line 1168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void t3_synchronize_rx(struct adapter *adap, struct port_info *p)
{
  #line 1170 
  int i;
  #line 1172 
  i = (int)p->first_qset;
  #line 1172 
  while ((int)p->first_qset + (int)p->nqsets > i) {
    {
      #line 1173 
      struct sge_rspq *q = & adap->sge.qs[i].rspq;
      #line 1175 
      cif_spin_lock_irq_lock_of_sge_rspq_0(& q->lock);
      #line 1176 
      cif_spin_unlock_irq_lock_of_sge_rspq_0(& q->lock);
    }
    #line 1172 
    i ++;
  }
  #line 1178 
  return;
}

#line 1180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void cxgb_vlan_mode(struct net_device *dev, netdev_features_t features)
{
  #line 1182 
  struct port_info *pi = netdev_priv(dev);
  #line 1183 
  struct adapter *adapter = pi->adapter;
  #line 1185 
  if (adapter->params.rev != 0U) 
                                 #line 1186 
                                 t3_set_vlan_accel(adapter,(unsigned int)(1 << (int)pi->port_id),(int)features & 256);
  else {
    #line 1190 
    unsigned int i;
    #line 1190 
    unsigned int have_vlans = (unsigned int)features & 256U;
    #line 1192 
    i = 0U;
    #line 1192 
    while (adapter->params.nports > i) {
      #line 1193 
      have_vlans = ((unsigned int)(adapter->port[i])->features & 256U) | have_vlans;
      #line 1192 
      i ++;
    }
    #line 1197 
    t3_set_vlan_accel(adapter,1U,(int)have_vlans);
  }
  #line 1199 
  t3_synchronize_rx(adapter,pi);
  #line 1200 
  return;
}

#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_up(struct adapter *adap)
{
  #line 1214 
  int i;
  #line 1214 
  int err;
  #line 1216 
  if ((adap->flags & 1UL) == 0UL) {
    #line 1217 
    err = t3_check_fw_version(adap);
    #line 1218 
    if (err == -22) {
      #line 1220 
      char *tmp;
      #line 1219 
      err = upgrade_fw(adap);
      #line 1220 
      if (err != 0) 
                    #line 1220 
                    tmp = (char *)"failed"; else 
                                                 #line 1220 
                                                 tmp = (char *)"succeeded";
      #line 1220 
      ;
      #line 1220 
      _dev_warn(& (adap->pdev)->dev,(char *)"FW upgrade to %d.%d.%d %s\n",7,12,0,tmp);
    }
    #line 1225 
    err = t3_check_tpsram_version(adap);
    #line 1226 
    if (err == -22) {
      #line 1228 
      char *tmp_0;
      #line 1227 
      err = update_tpsram(adap);
      #line 1228 
      if (err != 0) 
                    #line 1228 
                    tmp_0 = (char *)"failed"; else 
                                                   #line 1228 
                                                   tmp_0 = (char *)"succeeded";
      #line 1228 
      ;
      #line 1228 
      _dev_warn(& (adap->pdev)->dev,(char *)"TP upgrade to %d.%d.%d %s\n",1,1,0,tmp_0);
    }
    #line 1238 
    t3_intr_clear(adap);
    #line 1240 
    err = t3_init_hw(adap,0U);
    #line 1241 
    if (err != 0) 
                  #line 1242 
                  goto out;
    #line 1244 
    t3_set_reg_field(adap,884U,0U,8U);
    #line 1245 
    t3_write_reg(adap,1320U,0U);
    #line 1247 
    err = setup_sge_qsets(adap);
    #line 1248 
    if (err != 0) 
                  #line 1249 
                  goto out;
    #line 1251 
    i = 0;
    #line 1251 
    while (adap->params.nports > (unsigned int)i) {
      #line 1252 
      cxgb_vlan_mode(adap->port[i],(adap->port[i])->features);
      #line 1251 
      i ++;
    }
    #line 1254 
    setup_rss(adap);
    #line 1255 
    if ((adap->flags & 32UL) == 0UL) 
                                     #line 1256 
                                     init_napi(adap);
    #line 1258 
    t3_start_sge_timers(adap);
    #line 1259 
    adap->flags |= 1UL;
  }
  #line 1262 
  t3_intr_clear(adap);
  #line 1264 
  if ((adap->flags & 4UL) != 0UL) {
    #line 1265 
    name_msix_vecs(adap);
    #line 1266 
    err = cif_request_irq((unsigned int)adap->msix_info[0].vec,& t3_async_intr_handler,0UL,(char *)(& adap->msix_info[0].desc),(void *)adap);
    #line 1269 
    if (err != 0) 
                  #line 1270 
                  goto irq_err;
    #line 1272 
    err = request_msix_data_irqs(adap);
    #line 1273 
    if (err != 0) {
      #line 1274 
      cif_free_irq((unsigned int)adap->msix_info[0].vec,(void *)adap);
      #line 1275 
      goto irq_err;
    }
  }
  else {
    #line 1279 
    unsigned long tmp_1;
    #line 1277 
    ;
    #line 1277 
    ;
    #line 1279 
    if ((adap->flags & 2UL) != 0UL) 
                                    #line 1279 
                                    tmp_1 = 0UL; else 
                                                      #line 1279 
                                                      tmp_1 = 128UL;
    #line 1277 
    ;
    #line 1277 
    err = cif_request_irq((adap->pdev)->irq,t3_intr_handler(adap,(int)adap->sge.qs[0].rspq.polling),tmp_1,adap->name,(void *)adap);
    #line 1277 
    if (err != 0) 
                  #line 1284 
                  goto irq_err;
  }
  #line 1286 
  enable_all_napi(adap);
  #line 1287 
  t3_sge_start(adap);
  #line 1288 
  t3_intr_enable(adap);
  #line 1290 
  if (adap->params.rev > 3U && (adap->flags & 16UL) == 0UL) {
    #line 1290 
    if (is_offload(adap) != 0) {
      #line 1291 
      if (init_tp_parity(adap) == 0) 
                                     #line 1292 
                                     adap->flags |= 16UL;
    }
  }
  #line 1294 
  if ((adap->flags & 16UL) != 0UL) {
    #line 1295 
    t3_write_reg(adap,1140U,83886080U);
    #line 1297 
    t3_write_reg(adap,1136U,2143289343U);
  }
  #line 1300 
  if ((adap->flags & 8UL) == 0UL) {
    #line 1301 
    int ret = bind_qsets(adap);
    #line 1303 
    if (ret < 0) {
      #line 1304 
      _dev_err(& (adap->pdev)->dev,(char *)"failed to bind qsets, err %d\n",ret);
      #line 1305 
      t3_intr_disable(adap);
      #line 1306 
      free_irq_resources(adap);
      #line 1307 
      err = ret;
      #line 1308 
      goto out;
    }
    #line 1310 
    adap->flags |= 8UL;
  }
  #line 1313 
  out: 
       #line 1313 
  ;
  #line 1314 
  return err;
  #line 1315 
  irq_err: 
           #line 1315 
  ;
  #line 1316 
  _dev_err(& (adap->pdev)->dev,(char *)"request_irq failed, err %d\n",err);
  #line 1317 
  goto out;
}

#line 1323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void cxgb_down(struct adapter *adapter, int on_wq)
{
  #line 1325 
  t3_sge_stop(adapter);
  #line 1326 
  cif_spin_lock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 1327 
  t3_intr_disable(adapter);
  #line 1328 
  cif_spin_unlock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 1330 
  free_irq_resources(adapter);
  #line 1331 
  quiesce_rx(adapter);
  #line 1332 
  t3_sge_stop(adapter);
  #line 1333 
  if (on_wq == 0) 
                  #line 1334 
                  flush_workqueue(cxgb3_wq);
  #line 1335 
  return;
}

#line 1337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void schedule_chk_task(struct adapter *adap)
{
  #line 1339 
  unsigned int timeo;
  #line 1341 
  if (adap->params.linkpoll_period != 0U) 
                                          #line 1341 
                                          timeo = (adap->params.linkpoll_period * 250U) / 10U; else 
                                                                    #line 1341 
                                                                    timeo = adap->params.stats_update_period * 250U;
  #line 1344 
  if (timeo != 0U) 
                   #line 1345 
                   cif_queue_delayed_work(cxgb3_wq,& adap->adap_check_task,(unsigned long)timeo);
  #line 1346 
  return;
}

#line 1348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int offload_open(struct net_device *dev)
{
  #line 1354 
  int err;
  #line 1370 
  int tmp_2;
  #line 1350 
  struct port_info *pi = netdev_priv(dev);
  #line 1351 
  struct adapter *adapter = pi->adapter;
  #line 1352 
  struct t3cdev *tdev = dev2t3cdev(dev);
  #line 1353 
  int adap_up = (int)adapter->open_device_map & 3;
  #line 1356 
  if ((int)test_and_set_bit(15L,& adapter->open_device_map) != 0) 
                                                                  #line 1357 
                                                                  return 0;
  #line 1359 
  if (adap_up == 0) {
    #line 1359 
    err = cxgb_up(adapter);
    #line 1359 
    if (err < 0) 
                 #line 1360 
                 goto out;
  }
  #line 1362 
  t3_tp_set_offload_mode(adapter,1);
  #line 1363 
  tdev->lldev = adapter->port[0];
  #line 1364 
  err = cxgb3_offload_activate(adapter);
  #line 1365 
  if (err != 0) 
                #line 1366 
                goto out;
  #line 1368 
  init_port_mtus(adapter);
  #line 1370 
  if (adapter->params.rev == 0U) 
                                 #line 1370 
                                 tmp_2 = (int)((unsigned short)(adapter->port[0])->mtu); else 
                                                                    #line 1370 
                                                                    tmp_2 = 65535;
  #line 1369 
  ;
  #line 1369 
  ;
  #line 1369 
  ;
  #line 1369 
  ;
  #line 1369 
  t3_load_mtus(adapter,(unsigned short *)(& adapter->params.mtus),(unsigned short *)(& adapter->params.a_wnd),(unsigned short *)(& adapter->params.b_wnd),(unsigned short)tmp_2);
  #line 1373 
  init_smt(adapter);
  #line 1375 
  if (sysfs_create_group(& (tdev->lldev)->dev.kobj,& offload_attr_group) != 0) {
    #line 1376 
    bool branch;
    #line 1376 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"cxgb3", .function = (char *)"offload_open", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c", .format = (char *)"cannot create sysfs group\n", .lineno = (unsigned int)1376U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1376 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 1376 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1376 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug459,& dev->dev,(char *)"cannot create sysfs group\n");
  }
  #line 1379 
  cxgb3_add_clients(tdev);
  #line 1381 
  out: 
       #line 1381 
  ;
  #line 1383 
  if (err != 0) {
    #line 1384 
    t3_tp_set_offload_mode(adapter,0);
    #line 1385 
    cif_clear_bit_0(15L,& adapter->open_device_map);
    #line 1386 
    cxgb3_set_dummy_ops(tdev);
  }
  #line 1388 
  return err;
}

#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int offload_close(struct t3cdev *tdev)
{
  #line 1393 
  void *__mptr;
  #line 1393 
  __mptr = (void *)tdev;
  #line 1393 
  struct adapter *adapter = ((struct adapter *)__mptr);
  #line 1394 
  struct t3c_data *td = *((struct t3c_data **)(& tdev->l4opt));
  #line 1396 
  if (! test_bit(15L,& adapter->open_device_map)) 
                                                  #line 1397 
                                                  return 0;
  #line 1400 
  cxgb3_remove_clients(tdev);
  #line 1402 
  sysfs_remove_group(& (tdev->lldev)->dev.kobj,& offload_attr_group);
  #line 1405 
  cif_flush_work(& td->tid_release_task);
  #line 1407 
  tdev->lldev = (struct net_device *)0;
  #line 1408 
  cxgb3_set_dummy_ops(tdev);
  #line 1409 
  t3_tp_set_offload_mode(adapter,0);
  #line 1410 
  cif_clear_bit_0(15L,& adapter->open_device_map);
  #line 1412 
  if (adapter->open_device_map == 0UL) 
                                       #line 1413 
                                       cxgb_down(adapter,0);
  #line 1415 
  cxgb3_offload_deactivate(adapter);
  #line 1416 
  return 0;
}

#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_open(struct net_device *dev)
{
  #line 1424 
  int err;
  #line 1421 
  struct port_info *pi = netdev_priv(dev);
  #line 1422 
  struct adapter *adapter = pi->adapter;
  #line 1423 
  int other_ports = (int)adapter->open_device_map & 3;
  #line 1426 
  if (adapter->open_device_map == 0UL) {
    #line 1426 
    err = cxgb_up(adapter);
    #line 1426 
    if (err < 0) 
                 #line 1427 
                 return err;
  }
  #line 1429 
  cif_set_bit_0((long)pi->port_id,& adapter->open_device_map);
  #line 1430 
  if (is_offload(adapter) != 0) 
    #line 1430 
    if (ofld_disable == 0) {
      #line 1431 
      err = offload_open(dev);
      #line 1432 
      if (err != 0) 
                    #line 1433 
                    printk((char *)"\001");
    }
  #line 1436 
  netif_set_real_num_tx_queues(dev,(unsigned int)pi->nqsets);
  #line 1437 
  err = netif_set_real_num_rx_queues(dev,(unsigned int)pi->nqsets);
  #line 1438 
  if (err != 0) 
                #line 1439 
                return err;
  #line 1440 
  link_start(dev);
  #line 1441 
  t3_port_intr_enable(adapter,(int)pi->port_id);
  #line 1442 
  netif_tx_start_all_queues(dev);
  #line 1443 
  if (other_ports == 0) 
                        #line 1444 
                        schedule_chk_task(adapter);
  #line 1446 
  cxgb3_event_notify(& adapter->tdev,3U,(unsigned int)pi->port_id);
  #line 1447 
  return 0;
}

#line 1450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int __cxgb_close(struct net_device *dev, int on_wq)
{
  #line 1452 
  struct port_info *pi = netdev_priv(dev);
  #line 1453 
  struct adapter *adapter = pi->adapter;
  #line 1456 
  if (adapter->open_device_map == 0UL) 
                                       #line 1457 
                                       return 0;
  #line 1460 
  t3_xgm_intr_disable(adapter,(int)pi->port_id);
  #line 1461 
  t3_read_reg(adapter,pi->mac.offset + 2156U);
  #line 1463 
  t3_port_intr_disable(adapter,(int)pi->port_id);
  #line 1464 
  netif_tx_stop_all_queues(dev);
  #line 1465 
  (*((pi->phy.ops)->power_down))(& pi->phy,1);
  #line 1466 
  netif_carrier_off(dev);
  #line 1467 
  t3_mac_disable(& pi->mac,3);
  #line 1469 
  cif_spin_lock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 1470 
  cif_clear_bit_0((long)pi->port_id,& adapter->open_device_map);
  #line 1471 
  cif_spin_unlock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 1473 
  if ((adapter->open_device_map & 3UL) == 0UL) 
                                               #line 1474 
                                               cancel_delayed_work_sync(& adapter->adap_check_task);
  #line 1476 
  if (adapter->open_device_map == 0UL) 
                                       #line 1477 
                                       cxgb_down(adapter,on_wq);
  #line 1479 
  cxgb3_event_notify(& adapter->tdev,2U,(unsigned int)pi->port_id);
  #line 1480 
  return 0;
}

#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_close(struct net_device *dev)
{
  #line 1485 
  return __cxgb_close(dev,0);
}

#line 1488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct net_device_stats *cxgb_get_stats(struct net_device *dev)
{
  #line 1493 
  struct mac_stats *pstats;
  #line 1490 
  struct port_info *pi = netdev_priv(dev);
  #line 1491 
  struct adapter *adapter = pi->adapter;
  #line 1492 
  struct net_device_stats *ns = & dev->stats;
  #line 1495 
  cif_spin_lock_stats_lock_of_adapter_0(& adapter->stats_lock);
  #line 1496 
  pstats = t3_mac_update_stats(& pi->mac);
  #line 1497 
  cif_spin_unlock_stats_lock_of_adapter_0(& adapter->stats_lock);
  #line 1499 
  ns->tx_bytes = (unsigned long)pstats->tx_octets;
  #line 1500 
  ns->tx_packets = (unsigned long)pstats->tx_frames;
  #line 1501 
  ns->rx_bytes = (unsigned long)pstats->rx_octets;
  #line 1502 
  ns->rx_packets = (unsigned long)pstats->rx_frames;
  #line 1503 
  ns->multicast = (unsigned long)pstats->rx_mcast_frames;
  #line 1505 
  ns->tx_errors = (unsigned long)pstats->tx_underrun;
  #line 1506 
  ns->rx_errors = (unsigned long)(((((pstats->rx_symbol_errs + pstats->rx_fcs_errs) + pstats->rx_too_long) + pstats->rx_jabber) + pstats->rx_short) + (unsigned long long)pstats->rx_fifo_ovfl);
  #line 1511 
  ns->rx_length_errors = (unsigned long)(pstats->rx_jabber + pstats->rx_too_long);
  #line 1512 
  ns->rx_over_errors = 0UL;
  #line 1513 
  ns->rx_crc_errors = (unsigned long)pstats->rx_fcs_errs;
  #line 1514 
  ns->rx_frame_errors = (unsigned long)pstats->rx_symbol_errs;
  #line 1515 
  ns->rx_fifo_errors = pstats->rx_fifo_ovfl;
  #line 1516 
  ns->rx_missed_errors = (unsigned long)pstats->rx_cong_drops;
  #line 1519 
  ns->tx_aborted_errors = 0UL;
  #line 1520 
  ns->tx_carrier_errors = 0UL;
  #line 1521 
  ns->tx_fifo_errors = (unsigned long)pstats->tx_underrun;
  #line 1522 
  ns->tx_heartbeat_errors = 0UL;
  #line 1523 
  ns->tx_window_errors = 0UL;
  #line 1524 
  return ns;
}

#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static u32 get_msglevel(struct net_device *dev)
{
  #line 1529 
  struct port_info *pi = netdev_priv(dev);
  #line 1530 
  struct adapter *adapter = pi->adapter;
  #line 1532 
  return (unsigned int)adapter->msg_enable;
}

#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void set_msglevel(struct net_device *dev, u32 val)
{
  #line 1537 
  struct port_info *pi = netdev_priv(dev);
  #line 1538 
  struct adapter *adapter = pi->adapter;
  #line 1540 
  adapter->msg_enable = (int)val;
  #line 1541 
  return;
}

#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static char stats_strings[45U][32U] = {{(char)'T', (char)'x', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K'}, {(char)'T', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K'}, {(char)'T', (char)'x', (char)'P', (char)'a', (char)'u', (char)'s', (char)'e', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'U', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'E', (char)'x', (char)'t', (char)'U', (char)'n', (char)'d', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'4', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'5', (char)'T', (char)'o', (char)'1', (char)'2', (char)'7', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'2', (char)'8', (char)'T', (char)'o', (char)'2', (char)'5', (char)'5', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'2', (char)'5', (char)'6', (char)'T', (char)'o', (char)'5', (char)'1', (char)'1', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'5', (char)'1', (char)'2', (char)'T', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'0', (char)'2', (char)'4', (char)'T', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8', (char)' '}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'5', (char)'1', (char)'9', (char)'T', (char)'o', (char)'M', (char)'a', (char)'x', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K'}, {(char)'R', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K'}, {(char)'R', (char)'x', (char)'P', (char)'a', (char)'u', (char)'s', (char)'e', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'C', (char)'S', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'S', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'S', (char)'h', (char)'o', (char)'r', (char)'t', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'J', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'L', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'I', (char)'F', (char)'O', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'4', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'5', (char)'T', (char)'o', (char)'1', (char)'2', (char)'7', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'2', (char)'8', (char)'T', (char)'o', (char)'2', (char)'5', (char)'5', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'2', (char)'5', (char)'6', (char)'T', (char)'o', (char)'5', (char)'1', (char)'1', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'5', (char)'1', (char)'2', (char)'T', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'0', (char)'2', (char)'4', (char)'T', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8', (char)' '}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'5', (char)'1', (char)'9', (char)'T', (char)'o', (char)'M', (char)'a', (char)'x', (char)' ', (char)' '}, {(char)'P', (char)'h', (char)'y', (char)'F', (char)'I', (char)'F', (char)'O', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'S', (char)'O', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'V', (char)'L', (char)'A', (char)'N', (char)'e', (char)'x', (char)'t', (char)'r', (char)'a', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'V', (char)'L', (char)'A', (char)'N', (char)'i', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'C', (char)'s', (char)'u', (char)'m', (char)'O', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'C', (char)'s', (char)'u', (char)'m', (char)'G', (char)'o', (char)'o', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'L', (char)'r', (char)'o', (char)'A', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'L', (char)'r', (char)'o', (char)'F', (char)'l', (char)'u', (char)'s', (char)'h', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'L', (char)'r', (char)'o', (char)'N', (char)'o', (char)'D', (char)'e', (char)'s', (char)'c', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'D', (char)'r', (char)'o', (char)'p', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'C', (char)'h', (char)'e', (char)'c', (char)'k', (char)'T', (char)'X', (char)'E', (char)'n', (char)'T', (char)'o', (char)'g', (char)'g', (char)'l', (char)'e', (char)'d', (char)' ', (char)' ', (char)' '}, {(char)'C', (char)'h', (char)'e', (char)'c', (char)'k', (char)'R', (char)'e', (char)'s', (char)'e', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)'F', (char)'a', (char)'u', (char)'l', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}};
#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int get_sset_count(struct net_device *dev, int sset)
{
  #line 1599 
  switch (sset) {
    #line 1600 
    case 1: 
            #line 1600 
    ;
    #line 1601 
    return 45;
    #line 1602 
    default: 
             #line 1602 
    ;
    #line 1603 
    return -95;
  }
}

#line 1609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int get_regs_len(struct net_device *dev)
{
  #line 1611 
  return 3072;
}

#line 1614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int get_eeprom_len(struct net_device *dev)
{
  #line 1616 
  return 8192;
}

#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 1621 
  struct port_info *pi = netdev_priv(dev);
  #line 1622 
  struct adapter *adapter = pi->adapter;
  #line 1623 
  u32 fw_vers = 0U;
  #line 1624 
  u32 tp_vers = 0U;
  #line 1626 
  cif_spin_lock_stats_lock_of_adapter_0(& adapter->stats_lock);
  #line 1627 
  t3_get_fw_version(adapter,& fw_vers);
  #line 1628 
  t3_get_tp_version(adapter,& tp_vers);
  #line 1629 
  cif_spin_unlock_stats_lock_of_adapter_0(& adapter->stats_lock);
  #line 1631 
  strlcpy((char *)(& info->driver),(char *)"cxgb3",32UL);
  #line 1632 
  strlcpy((char *)(& info->version),(char *)"1.1.5-ko",32UL);
  #line 1633 
  ;
  #line 1633 
  strlcpy((char *)(& info->bus_info),pci_name(adapter->pdev),32UL);
  #line 1635 
  if (fw_vers != 0U) {
    #line 1637 
    char *tmp_1;
    #line 1636 
    ;
    #line 1636 
    ;
    #line 1636 
    ;
    #line 1636 
    ;
    #line 1636 
    ;
    #line 1636 
    ;
    #line 1637 
    if (fw_vers >> 28 != 0U) 
                             #line 1637 
                             tmp_1 = (char *)"T"; else 
                                                       #line 1637 
                                                       tmp_1 = (char *)"N";
    #line 1636 
    ;
    #line 1636 
    snprintf((char *)(& info->fw_version),32UL,(char *)"%s %u.%u.%u TP %u.%u.%u",tmp_1,(fw_vers >> 16) & 4095U,(fw_vers >> 8) & 255U,fw_vers & 255U,(tp_vers >> 16) & 255U,(tp_vers >> 8) & 255U,tp_vers & 255U);
  }
  #line 1645 
  return;
}

#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 1649 
  if (stringset == 1U) 
                       #line 1650 
                       memcpy((void *)data,(void *)(& stats_strings),1440UL);
  #line 1651 
  return;
}

#line 1653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static unsigned long collect_sge_port_stats(struct adapter *adapter, struct port_info *p, int idx)
{
  #line 1656 
  int i;
  #line 1657 
  unsigned long tot = 0UL;
  #line 1659 
  i = (int)p->first_qset;
  #line 1659 
  while ((int)p->first_qset + (int)p->nqsets > i) {
    #line 1660 
    tot = adapter->sge.qs[i].port_stats[idx] + tot;
    #line 1659 
    i ++;
  }
  #line 1661 
  return tot;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 1669 
  struct mac_stats *s;
  #line 1675 
  u64 *tmp_0;
  #line 1676 
  u64 *tmp_1;
  #line 1677 
  u64 *tmp_2;
  #line 1678 
  u64 *tmp_3;
  #line 1679 
  u64 *tmp_4;
  #line 1680 
  u64 *tmp_5;
  #line 1681 
  u64 *tmp_6;
  #line 1683 
  u64 *tmp_7;
  #line 1684 
  u64 *tmp_8;
  #line 1685 
  u64 *tmp_9;
  #line 1686 
  u64 *tmp_10;
  #line 1687 
  u64 *tmp_11;
  #line 1688 
  u64 *tmp_12;
  #line 1689 
  u64 *tmp_13;
  #line 1691 
  u64 *tmp_14;
  #line 1692 
  u64 *tmp_15;
  #line 1693 
  u64 *tmp_16;
  #line 1694 
  u64 *tmp_17;
  #line 1695 
  u64 *tmp_18;
  #line 1696 
  u64 *tmp_19;
  #line 1697 
  u64 *tmp_20;
  #line 1698 
  u64 *tmp_21;
  #line 1699 
  u64 *tmp_22;
  #line 1700 
  u64 *tmp_23;
  #line 1701 
  u64 *tmp_24;
  #line 1703 
  u64 *tmp_25;
  #line 1704 
  u64 *tmp_26;
  #line 1705 
  u64 *tmp_27;
  #line 1706 
  u64 *tmp_28;
  #line 1707 
  u64 *tmp_29;
  #line 1708 
  u64 *tmp_30;
  #line 1709 
  u64 *tmp_31;
  #line 1711 
  u64 *tmp_32;
  #line 1713 
  u64 *tmp_33;
  #line 1714 
  u64 *tmp_35;
  #line 1715 
  u64 *tmp_37;
  #line 1716 
  u64 *tmp_39;
  #line 1717 
  u64 *tmp_41;
  #line 1718 
  u64 *tmp_43;
  #line 1719 
  u64 *tmp_44;
  #line 1720 
  u64 *tmp_45;
  #line 1721 
  u64 *tmp_46;
  #line 1723 
  u64 *tmp_47;
  #line 1724 
  u64 *tmp_48;
  #line 1726 
  u64 *tmp_49;
  #line 1667 
  struct port_info *pi = netdev_priv(dev);
  #line 1668 
  struct adapter *adapter = pi->adapter;
  #line 1671 
  cif_spin_lock_stats_lock_of_adapter_0(& adapter->stats_lock);
  #line 1672 
  s = t3_mac_update_stats(& pi->mac);
  #line 1673 
  cif_spin_unlock_stats_lock_of_adapter_0(& adapter->stats_lock);
  #line 1675 
  tmp_0 = data;
  #line 1675 
  data ++;
  #line 1675 
  *tmp_0 = s->tx_octets;
  #line 1676 
  tmp_1 = data;
  #line 1676 
  data ++;
  #line 1676 
  *tmp_1 = s->tx_frames;
  #line 1677 
  tmp_2 = data;
  #line 1677 
  data ++;
  #line 1677 
  *tmp_2 = s->tx_mcast_frames;
  #line 1678 
  tmp_3 = data;
  #line 1678 
  data ++;
  #line 1678 
  *tmp_3 = s->tx_bcast_frames;
  #line 1679 
  tmp_4 = data;
  #line 1679 
  data ++;
  #line 1679 
  *tmp_4 = s->tx_pause;
  #line 1680 
  tmp_5 = data;
  #line 1680 
  data ++;
  #line 1680 
  *tmp_5 = s->tx_underrun;
  #line 1681 
  tmp_6 = data;
  #line 1681 
  data ++;
  #line 1681 
  *tmp_6 = (unsigned long long)s->tx_fifo_urun;
  #line 1683 
  tmp_7 = data;
  #line 1683 
  data ++;
  #line 1683 
  *tmp_7 = s->tx_frames_64;
  #line 1684 
  tmp_8 = data;
  #line 1684 
  data ++;
  #line 1684 
  *tmp_8 = s->tx_frames_65_127;
  #line 1685 
  tmp_9 = data;
  #line 1685 
  data ++;
  #line 1685 
  *tmp_9 = s->tx_frames_128_255;
  #line 1686 
  tmp_10 = data;
  #line 1686 
  data ++;
  #line 1686 
  *tmp_10 = s->tx_frames_256_511;
  #line 1687 
  tmp_11 = data;
  #line 1687 
  data ++;
  #line 1687 
  *tmp_11 = s->tx_frames_512_1023;
  #line 1688 
  tmp_12 = data;
  #line 1688 
  data ++;
  #line 1688 
  *tmp_12 = s->tx_frames_1024_1518;
  #line 1689 
  tmp_13 = data;
  #line 1689 
  data ++;
  #line 1689 
  *tmp_13 = s->tx_frames_1519_max;
  #line 1691 
  tmp_14 = data;
  #line 1691 
  data ++;
  #line 1691 
  *tmp_14 = s->rx_octets;
  #line 1692 
  tmp_15 = data;
  #line 1692 
  data ++;
  #line 1692 
  *tmp_15 = s->rx_frames;
  #line 1693 
  tmp_16 = data;
  #line 1693 
  data ++;
  #line 1693 
  *tmp_16 = s->rx_mcast_frames;
  #line 1694 
  tmp_17 = data;
  #line 1694 
  data ++;
  #line 1694 
  *tmp_17 = s->rx_bcast_frames;
  #line 1695 
  tmp_18 = data;
  #line 1695 
  data ++;
  #line 1695 
  *tmp_18 = s->rx_pause;
  #line 1696 
  tmp_19 = data;
  #line 1696 
  data ++;
  #line 1696 
  *tmp_19 = s->rx_fcs_errs;
  #line 1697 
  tmp_20 = data;
  #line 1697 
  data ++;
  #line 1697 
  *tmp_20 = s->rx_symbol_errs;
  #line 1698 
  tmp_21 = data;
  #line 1698 
  data ++;
  #line 1698 
  *tmp_21 = s->rx_short;
  #line 1699 
  tmp_22 = data;
  #line 1699 
  data ++;
  #line 1699 
  *tmp_22 = s->rx_jabber;
  #line 1700 
  tmp_23 = data;
  #line 1700 
  data ++;
  #line 1700 
  *tmp_23 = s->rx_too_long;
  #line 1701 
  tmp_24 = data;
  #line 1701 
  data ++;
  #line 1701 
  *tmp_24 = (unsigned long long)s->rx_fifo_ovfl;
  #line 1703 
  tmp_25 = data;
  #line 1703 
  data ++;
  #line 1703 
  *tmp_25 = s->rx_frames_64;
  #line 1704 
  tmp_26 = data;
  #line 1704 
  data ++;
  #line 1704 
  *tmp_26 = s->rx_frames_65_127;
  #line 1705 
  tmp_27 = data;
  #line 1705 
  data ++;
  #line 1705 
  *tmp_27 = s->rx_frames_128_255;
  #line 1706 
  tmp_28 = data;
  #line 1706 
  data ++;
  #line 1706 
  *tmp_28 = s->rx_frames_256_511;
  #line 1707 
  tmp_29 = data;
  #line 1707 
  data ++;
  #line 1707 
  *tmp_29 = s->rx_frames_512_1023;
  #line 1708 
  tmp_30 = data;
  #line 1708 
  data ++;
  #line 1708 
  *tmp_30 = s->rx_frames_1024_1518;
  #line 1709 
  tmp_31 = data;
  #line 1709 
  data ++;
  #line 1709 
  *tmp_31 = s->rx_frames_1519_max;
  #line 1711 
  tmp_32 = data;
  #line 1711 
  data ++;
  #line 1711 
  *tmp_32 = (unsigned long long)pi->phy.fifo_errors;
  #line 1713 
  tmp_33 = data;
  #line 1713 
  data ++;
  #line 1713 
  *tmp_33 = (u64)collect_sge_port_stats(adapter,pi,0);
  #line 1714 
  tmp_35 = data;
  #line 1714 
  data ++;
  #line 1714 
  *tmp_35 = (u64)collect_sge_port_stats(adapter,pi,3);
  #line 1715 
  tmp_37 = data;
  #line 1715 
  data ++;
  #line 1715 
  *tmp_37 = (u64)collect_sge_port_stats(adapter,pi,4);
  #line 1716 
  tmp_39 = data;
  #line 1716 
  data ++;
  #line 1716 
  *tmp_39 = (u64)collect_sge_port_stats(adapter,pi,2);
  #line 1717 
  tmp_41 = data;
  #line 1717 
  data ++;
  #line 1717 
  *tmp_41 = (u64)collect_sge_port_stats(adapter,pi,1);
  #line 1718 
  tmp_43 = data;
  #line 1718 
  data ++;
  #line 1718 
  *tmp_43 = 0ULL;
  #line 1719 
  tmp_44 = data;
  #line 1719 
  data ++;
  #line 1719 
  *tmp_44 = 0ULL;
  #line 1720 
  tmp_45 = data;
  #line 1720 
  data ++;
  #line 1720 
  *tmp_45 = 0ULL;
  #line 1721 
  tmp_46 = data;
  #line 1721 
  data ++;
  #line 1721 
  *tmp_46 = s->rx_cong_drops;
  #line 1723 
  tmp_47 = data;
  #line 1723 
  data ++;
  #line 1723 
  *tmp_47 = (unsigned long long)s->num_toggled;
  #line 1724 
  tmp_48 = data;
  #line 1724 
  data ++;
  #line 1724 
  *tmp_48 = (unsigned long long)s->num_resets;
  #line 1726 
  tmp_49 = data;
  #line 1726 
  data ++;
  #line 1726 
  *tmp_49 = (unsigned long long)s->link_faults;
  #line 1727 
  return;
}

#line 1729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
__inline static void reg_block_dump(struct adapter *ap, void *buf, unsigned int start, unsigned int end)
{
  #line 1732 
  u32 *p = (u32 *)(buf + (unsigned long)start);
  #line 1734 
  while (start <= end) {
    #line 1735 
    u32 *tmp;
    #line 1735 
    tmp = p;
    #line 1735 
    p ++;
    #line 1735 
    *tmp = t3_read_reg(ap,start);
    #line 1734 
    start += 4U;
  }
  #line 1736 
  return;
}

#line 1738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_regs(struct net_device *dev, struct ethtool_regs *regs, void *buf)
{
  #line 1741 
  struct port_info *pi = netdev_priv(dev);
  #line 1742 
  struct adapter *ap = pi->adapter;
  #line 1750 
  regs->version = ((ap->params.rev << 10) | (is_pcie(ap) << 31)) | 3U;
  #line 1757 
  memset(buf,0,3072UL);
  #line 1758 
  reg_block_dump(ap,buf,0U,48U);
  #line 1759 
  reg_block_dump(ap,buf,56U,1344U);
  #line 1760 
  reg_block_dump(ap,buf,1408U,1568U);
  #line 1761 
  reg_block_dump(ap,buf,1600U,1628U);
  #line 1762 
  reg_block_dump(ap,buf,1632U,2300U);
  #line 1763 
  reg_block_dump(ap,buf,2444U,2812U);
  #line 1765 
  reg_block_dump(ap,buf,2956U,2988U);
  #line 1766 
  return;
}

#line 1769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int restart_autoneg(struct net_device *dev)
{
  #line 1771 
  struct port_info *p = netdev_priv(dev);
  #line 1773 
  if (! netif_running(dev)) 
                            #line 1774 
                            return -11;
  #line 1775 
  if ((unsigned int)p->link_config.autoneg != 1U) 
                                                  #line 1776 
                                                  return -22;
  #line 1777 
  (*((p->phy.ops)->autoneg_restart))(& p->phy);
  #line 1778 
  return 0;
}

#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int set_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 1784 
  struct port_info *pi = netdev_priv(dev);
  #line 1785 
  struct adapter *adapter = pi->adapter;
  #line 1787 
  switch ((unsigned int)state) {
    #line 1788 
    case (unsigned int)1: 
                          #line 1788 
    ;
    #line 1789 
    return 1;
    #line 1791 
    case (unsigned int)3: 
                          #line 1791 
    ;
    #line 1792 
    t3_set_reg_field(adapter,208U,1U,0U);
    #line 1793 
    break;
    #line 1795 
    case (unsigned int)2: 
                          #line 1795 
    ;
    #line 1796 
    case (unsigned int)0: 
                          #line 1796 
    ;
    #line 1797 
    t3_set_reg_field(adapter,208U,1U,1U);
  }
  #line 1801 
  return 0;
}

#line 1804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 1808 
  u32 supported;
  #line 1807 
  struct port_info *p = netdev_priv(dev);
  #line 1810 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),p->link_config.supported);
  #line 1812 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),p->link_config.advertising);
  #line 1815 
  if ((int)netif_carrier_ok(dev) != 0) {
    #line 1816 
    cmd->base.speed = (unsigned int)p->link_config.speed;
    #line 1817 
    cmd->base.duplex = p->link_config.duplex;
  }
  else {
    #line 1819 
    cmd->base.speed = 4294967295U;
    #line 1820 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 1823 
  ethtool_convert_link_mode_to_legacy_u32(& supported,(unsigned long *)(& cmd->link_modes.supported));
  #line 1826 
  if (((unsigned long)supported & 128UL) != 0UL) 
                                                 #line 1826 
                                                 cmd->base.port = (unsigned char)0U; else 
                                                                    #line 1826 
                                                                    cmd->base.port = (unsigned char)3U;
  #line 1827 
  cmd->base.phy_address = (unsigned char)p->phy.mdio.prtad;
  #line 1828 
  cmd->base.autoneg = p->link_config.autoneg;
  #line 1829 
  return 0;
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int speed_duplex_to_caps(int speed, int duplex)
{
  #line 1834 
  int cap = 0;
  #line 1836 
  switch (speed) {
    #line 1837 
    case 10: 
             #line 1837 
    ;
    #line 1838 
    if (duplex == 1) 
                     #line 1839 
                     cap = 2; else 
                                   #line 1841 
                                   cap = 1;
    #line 1842 
    break;
    #line 1843 
    case 100: 
              #line 1843 
    ;
    #line 1844 
    if (duplex == 1) 
                     #line 1845 
                     cap = 8; else 
                                   #line 1847 
                                   cap = 4;
    #line 1848 
    break;
    #line 1849 
    case 1000: 
               #line 1849 
    ;
    #line 1850 
    if (duplex == 1) 
                     #line 1851 
                     cap = 32; else 
                                    #line 1853 
                                    cap = 16;
    #line 1854 
    break;
    #line 1855 
    case 10000: 
                #line 1855 
    ;
    #line 1856 
    if (duplex == 1) 
                     #line 1857 
                     cap = 4096;
  }
  #line 1859 
  return cap;
}

#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 1872 
  u32 advertising;
  #line 1870 
  struct port_info *p = netdev_priv(dev);
  #line 1871 
  struct link_config *lc = & p->link_config;
  #line 1874 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 1877 
  if (((unsigned long)lc->supported & 64UL) == 0UL) {
    #line 1882 
    if ((unsigned int)cmd->base.autoneg == 0U) {
      #line 1883 
      u32 speed = cmd->base.speed;
      #line 1884 
      int cap = speed_duplex_to_caps((int)speed,(int)cmd->base.duplex);
      #line 1885 
      if ((lc->supported & (unsigned int)cap) != 0U) 
                                                     #line 1886 
                                                     return 0;
    }
    #line 1888 
    return -22;
  }
  #line 1891 
  if ((unsigned int)cmd->base.autoneg == 0U) {
    #line 1892 
    u32 speed_0 = cmd->base.speed;
    #line 1893 
    int cap_0 = speed_duplex_to_caps((int)speed_0,(int)cmd->base.duplex);
    #line 1895 
    if ((lc->supported & (unsigned int)cap_0) == 0U || speed_0 == 1000U) 
      #line 1896 
      return -22;
    #line 1897 
    lc->requested_speed = (unsigned short)speed_0;
    #line 1898 
    lc->requested_duplex = cmd->base.duplex;
    #line 1899 
    lc->advertising = 0U;
  }
  else {
    #line 1901 
    advertising &= 4159U;
    #line 1902 
    advertising = lc->supported & advertising;
    #line 1903 
    if (advertising == 0U) 
                           #line 1904 
                           return -22;
    #line 1905 
    lc->requested_speed = (unsigned short)65535U;
    #line 1906 
    lc->requested_duplex = (unsigned char)255U;
    #line 1907 
    lc->advertising = advertising | 64U;
  }
  #line 1909 
  lc->autoneg = cmd->base.autoneg;
  #line 1910 
  if ((int)netif_running(dev) != 0) 
                                    #line 1911 
                                    t3_link_start(& p->phy,& p->mac,lc);
  #line 1912 
  return 0;
}

#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 1918 
  struct port_info *p = netdev_priv(dev);
  #line 1920 
  epause->autoneg = (unsigned int)(((int)p->link_config.requested_fc & 4) != 0);
  #line 1921 
  epause->rx_pause = (unsigned int)(((int)p->link_config.fc & 1) != 0);
  #line 1922 
  epause->tx_pause = (unsigned int)(((int)p->link_config.fc & 2) != 0);
  #line 1923 
  return;
}

#line 1925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  #line 1928 
  struct port_info *p = netdev_priv(dev);
  #line 1929 
  struct link_config *lc = & p->link_config;
  #line 1931 
  if (epause->autoneg == 0U) 
                             #line 1932 
                             lc->requested_fc = (unsigned char)0U;
  else 
    #line 1933 
    if (((unsigned long)lc->supported & 64UL) != 0UL) 
                                                      #line 1934 
                                                      lc->requested_fc = (unsigned char)4U; else 
                                                                    #line 1936 
                                                                    return -22;
  #line 1938 
  if (epause->rx_pause != 0U) 
                              #line 1939 
                              lc->requested_fc = (unsigned char)((unsigned int)lc->requested_fc | 1U);
  #line 1940 
  if (epause->tx_pause != 0U) 
                              #line 1941 
                              lc->requested_fc = (unsigned char)((unsigned int)lc->requested_fc | 2U);
  #line 1942 
  if ((unsigned int)lc->autoneg == 1U) {
    #line 1943 
    if ((int)netif_running(dev) != 0) 
                                      #line 1944 
                                      t3_link_start(& p->phy,& p->mac,lc);
  }
  else {
    #line 1946 
    lc->fc = (unsigned char)((unsigned int)lc->requested_fc & 3U);
    #line 1947 
    if ((int)netif_running(dev) != 0) 
                                      #line 1948 
                                      t3_mac_set_speed_duplex_fc(& p->mac,-1,-1,(int)lc->fc);
  }
  #line 1950 
  return 0;
}

#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_sge_param(struct net_device *dev, struct ethtool_ringparam *e)
{
  #line 1955 
  struct port_info *pi = netdev_priv(dev);
  #line 1956 
  struct adapter *adapter = pi->adapter;
  #line 1957 
  struct qset_params *q = & adapter->params.sge.qset[(int)pi->first_qset];
  #line 1959 
  e->rx_max_pending = 16384U;
  #line 1960 
  e->rx_jumbo_max_pending = 16384U;
  #line 1961 
  e->tx_max_pending = 16384U;
  #line 1963 
  e->rx_pending = q->fl_size;
  #line 1964 
  e->rx_mini_pending = q->rspq_size;
  #line 1965 
  e->rx_jumbo_pending = q->jumbo_size;
  #line 1966 
  e->tx_pending = q->txq_size[0];
  #line 1967 
  return;
}

#line 1969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int set_sge_param(struct net_device *dev, struct ethtool_ringparam *e)
{
  #line 1973 
  struct qset_params *q;
  #line 1974 
  int i;
  #line 1971 
  struct port_info *pi = netdev_priv(dev);
  #line 1972 
  struct adapter *adapter = pi->adapter;
  #line 1976 
  if (((((((e->rx_pending > 16384U || e->rx_jumbo_pending > 16384U) || e->tx_pending > 16384U) || e->rx_mini_pending > 16384U) || e->rx_mini_pending <= 31U) || e->rx_pending <= 31U) || e->rx_jumbo_pending <= 31U) || e->tx_pending < adapter->params.nports * 4U) 
    #line 1984 
    return -22;
  #line 1986 
  if ((adapter->flags & 1UL) != 0UL) 
                                     #line 1987 
                                     return -16;
  #line 1989 
  q = & adapter->params.sge.qset[(int)pi->first_qset];
  #line 1990 
  i = 0;
  #line 1990 
  while ((int)pi->nqsets > i) {
    #line 1991 
    q->rspq_size = e->rx_mini_pending;
    #line 1992 
    q->fl_size = e->rx_pending;
    #line 1993 
    q->jumbo_size = e->rx_jumbo_pending;
    #line 1994 
    q->txq_size[0] = e->tx_pending;
    #line 1995 
    q->txq_size[1] = e->tx_pending;
    #line 1996 
    q->txq_size[2] = e->tx_pending;
    #line 1990 
    i ++;
    #line 1990 
    q ++;
  }
  #line 1998 
  return 0;
}

#line 2001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int set_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  #line 2005 
  struct qset_params *qsp;
  #line 2006 
  struct sge_qset *qs;
  #line 2007 
  int i;
  #line 2003 
  struct port_info *pi = netdev_priv(dev);
  #line 2004 
  struct adapter *adapter = pi->adapter;
  #line 2009 
  if (c->rx_coalesce_usecs * 10U > 8191U) 
                                          #line 2010 
                                          return -22;
  #line 2012 
  i = 0;
  #line 2012 
  while ((int)pi->nqsets > i) {
    #line 2013 
    qsp = & adapter->params.sge.qset[i];
    #line 2014 
    qs = & adapter->sge.qs[i];
    #line 2015 
    qsp->coalesce_usecs = c->rx_coalesce_usecs;
    #line 2016 
    t3_update_qset_coalesce(qs,qsp);
    #line 2012 
    i ++;
  }
  #line 2019 
  return 0;
}

#line 2022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int get_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  #line 2024 
  struct port_info *pi = netdev_priv(dev);
  #line 2025 
  struct adapter *adapter = pi->adapter;
  #line 2026 
  struct qset_params *q = (struct qset_params *)(& adapter->params.sge.qset);
  #line 2028 
  c->rx_coalesce_usecs = q->coalesce_usecs;
  #line 2029 
  return 0;
}

#line 2032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int get_eeprom(struct net_device *dev, struct ethtool_eeprom *e, u8 *data)
{
  #line 2037 
  int i;
  #line 2035 
  struct port_info *pi = netdev_priv(dev);
  #line 2036 
  struct adapter *adapter = pi->adapter;
  #line 2037 
  int err = 0;
  #line 2039 
  u8 *buf = kmalloc(8192UL,3264U);
  #line 2040 
  if (buf == (u8 *)0U) 
                       #line 2041 
                       return -12;
  #line 2043 
  e->magic = 954396940U;
  #line 2044 
  i = (int)e->offset & -4;
  #line 2044 
  while (err == 0 && e->offset + e->len > (unsigned int)i) {
    #line 2045 
    err = t3_seeprom_read(adapter,(unsigned int)i,(__le32 *)(buf + (unsigned long)i));
    #line 2044 
    i += 4;
  }
  #line 2047 
  if (err == 0) 
                #line 2048 
                memcpy((void *)data,(void *)(buf + (unsigned long)e->offset),(unsigned long)e->len);
  #line 2049 
  kfree((void *)buf);
  #line 2050 
  return err;
}

#line 2053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  #line 2058 
  u32 aligned_offset;
  #line 2058 
  u32 aligned_len;
  #line 2059 
  __le32 *p;
  #line 2060 
  u8 *buf;
  #line 2061 
  int err;
  #line 2056 
  struct port_info *pi = netdev_priv(dev);
  #line 2057 
  struct adapter *adapter = pi->adapter;
  #line 2063 
  if (eeprom->magic != 954396940U) 
                                   #line 2064 
                                   return -22;
  #line 2066 
  aligned_offset = eeprom->offset & 4294967292U;
  #line 2067 
  aligned_len = ((eeprom->len + (eeprom->offset & 3U)) + 3U) & 4294967292U;
  #line 2069 
  if (eeprom->offset != aligned_offset || eeprom->len != aligned_len) {
    #line 2070 
    buf = (u8 *)kmalloc((unsigned long)aligned_len,3264U);
    #line 2071 
    if (buf == (u8 *)0U) 
                         #line 2072 
                         return -12;
    #line 2073 
    err = t3_seeprom_read(adapter,aligned_offset,(__le32 *)buf);
    #line 2074 
    if (err == 0 && aligned_len > 4U) 
                                      #line 2075 
                                      err = t3_seeprom_read(adapter,(aligned_offset + aligned_len) + 4294967292U,(__le32 *)(buf + (unsigned long)(aligned_len + 4294967292U)));
    #line 2078 
    if (err != 0) 
                  #line 2079 
                  goto out;
    #line 2080 
    memcpy((void *)(buf + ((unsigned long)eeprom->offset & (unsigned long)3U)),(void *)data,(unsigned long)eeprom->len);
  }
  else 
       #line 2082 
       buf = data;
  #line 2084 
  err = t3_seeprom_wp(adapter,0);
  #line 2085 
  if (err != 0) 
                #line 2086 
                goto out;
  #line 2088 
  p = (__le32 *)buf;
  #line 2088 
  while (err == 0 && aligned_len != 0U) {
    #line 2089 
    err = t3_seeprom_write(adapter,aligned_offset,*p);
    #line 2090 
    aligned_offset += 4U;
    #line 2088 
    aligned_len += 4294967292U;
    #line 2088 
    p ++;
  }
  #line 2093 
  if (err == 0) 
                #line 2094 
                err = t3_seeprom_wp(adapter,1);
  #line 2095 
  out: 
       #line 2095 
  ;
  #line 2096 
  if (buf != data) 
                   #line 2097 
                   kfree((void *)buf);
  #line 2098 
  return err;
}

#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 2103 
  wol->supported = 0U;
  #line 2104 
  wol->wolopts = 0U;
  #line 2105 
  memset((void *)(& wol->sopass),0,6UL);
  #line 2106 
  return;
}

#line 2108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct ethtool_ops cxgb_ethtool_ops = {.get_drvinfo = & get_drvinfo, .get_regs_len = & get_regs_len, .get_regs = & get_regs, .get_wol = & get_wol, .get_msglevel = & get_msglevel, .set_msglevel = & set_msglevel, .nway_reset = & restart_autoneg, .get_link = & ethtool_op_get_link, .get_eeprom_len = & get_eeprom_len, .get_eeprom = & get_eeprom, .set_eeprom = & set_eeprom, .get_coalesce = & get_coalesce, .set_coalesce = & set_coalesce, .get_ringparam = & get_sge_param, .set_ringparam = & set_sge_param, .get_pauseparam = & get_pauseparam, .set_pauseparam = & set_pauseparam, .get_strings = & get_strings, .set_phys_id = & set_phys_id, .get_ethtool_stats = & get_stats, .get_sset_count = & get_sset_count, .get_link_ksettings = & get_link_ksettings, .set_link_ksettings = & set_link_ksettings};
#line 2134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int in_range(int val, int lo, int hi)
{
  #line 2136 
  return (val < 0 || val <= hi && val >= lo) != 0;
}

#line 2139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_extension_ioctl(struct net_device *dev, void *useraddr)
{
  #line 2143 
  u32 cmd;
  #line 2144 
  int ret;
  #line 2141 
  struct port_info *pi = netdev_priv(dev);
  #line 2142 
  struct adapter *adapter = pi->adapter;
  #line 2146 
  if (copy_from_user((void *)(& cmd),useraddr,4UL) != 0UL) 
                                                           #line 2147 
                                                           return -14;
  #line 2149 
  switch (cmd) {
    #line 2150 
    case (u32)1045: 
                    #line 2150 
    ;
    {
      #line 2151 
      int i;
      #line 2152 
      struct qset_params *q;
      #line 2153 
      struct ch_qset_params t;
      #line 2154 
      int q1 = (int)pi->first_qset;
      #line 2155 
      int nqsets = (int)pi->nqsets;
      #line 2157 
      if (! capable(12)) 
                         #line 2158 
                         return -1;
      #line 2159 
      if (copy_from_user((void *)(& t),useraddr,56UL) != 0UL) 
                                                              #line 2160 
                                                              return -14;
      #line 2161 
      if (t.cmd != 1045U) 
                          #line 2162 
                          return -22;
      #line 2163 
      if (t.qset_idx > 7U) 
                           #line 2164 
                           return -22;
      #line 2165 
      if (in_range(t.intr_lat,0,8191) == 0) 
                                            #line 2179 
                                            return -22;
      else {
        #line 2165 
        if (in_range(t.cong_thres,0,255) == 0) 
                                               #line 2179 
                                               return -22;
        else {
          #line 2166 
          if (in_range(t.txq_size[0],4,16384) == 0) 
                                                    #line 2179 
                                                    return -22;
          else {
            #line 2168 
            if (in_range(t.txq_size[1],4,16384) == 0) 
                                                      #line 2179 
                                                      return -22;
            else {
              #line 2170 
              if (in_range(t.txq_size[2],4,1024) == 0) 
                                                       #line 2179 
                                                       return -22;
              else {
                #line 2172 
                if (in_range(t.fl_size[0],32,16384) == 0) 
                                                          #line 2179 
                                                          return -22;
                else {
                  #line 2174 
                  if (in_range(t.fl_size[1],32,16384) == 0) 
                                                            #line 2179 
                                                            return -22;
                  else {
                    #line 2176 
                    if (in_range(t.rspq_size,32,16384) == 0) 
                                                             #line 2179 
                                                             return -22;
                  }
                }
              }
            }
          }
        }
      }
      #line 2181 
      if ((adapter->flags & 1UL) != 0UL && (((((((t.rspq_size >= 0 || t.fl_size[0] >= 0) || t.fl_size[1] >= 0) || t.txq_size[0] >= 0) || t.txq_size[1] >= 0) || t.txq_size[2] >= 0) || t.polling >= 0) || t.cong_thres >= 0)) 
        #line 2186 
        return -16;
      #line 2189 
      if ((int)test_bit(15L,& adapter->open_device_map) != 0) {
        #line 2190 
        q1 = 0;
        #line 2191 
        i = 0;
        #line 2191 
        while (adapter->params.nports > (unsigned int)i) {
          #line 2192 
          pi = adap2pinfo(adapter,i);
          #line 2193 
          nqsets = ((int)pi->first_qset + (int)pi->nqsets) + nqsets;
          #line 2191 
          i ++;
        }
      }
      #line 2197 
      if (t.qset_idx < (unsigned int)q1) 
                                         #line 2198 
                                         return -22;
      #line 2199 
      if (t.qset_idx > (unsigned int)((q1 + nqsets) + -1)) 
                                                           #line 2200 
                                                           return -22;
      #line 2202 
      q = & adapter->params.sge.qset[t.qset_idx];
      #line 2204 
      if (t.rspq_size >= 0) 
                            #line 2205 
                            q->rspq_size = (unsigned int)t.rspq_size;
      #line 2206 
      if (t.fl_size[0] >= 0) 
                             #line 2207 
                             q->fl_size = (unsigned int)t.fl_size[0];
      #line 2208 
      if (t.fl_size[1] >= 0) 
                             #line 2209 
                             q->jumbo_size = (unsigned int)t.fl_size[1];
      #line 2210 
      if (t.txq_size[0] >= 0) 
                              #line 2211 
                              q->txq_size[0] = (unsigned int)t.txq_size[0];
      #line 2212 
      if (t.txq_size[1] >= 0) 
                              #line 2213 
                              q->txq_size[1] = (unsigned int)t.txq_size[1];
      #line 2214 
      if (t.txq_size[2] >= 0) 
                              #line 2215 
                              q->txq_size[2] = (unsigned int)t.txq_size[2];
      #line 2216 
      if (t.cong_thres >= 0) 
                             #line 2217 
                             q->cong_thres = (unsigned int)t.cong_thres;
      #line 2218 
      if (t.intr_lat >= 0) {
        #line 2219 
        struct sge_qset *qs = & adapter->sge.qs[t.qset_idx];
        #line 2222 
        q->coalesce_usecs = (unsigned int)t.intr_lat;
        #line 2223 
        t3_update_qset_coalesce(qs,q);
      }
      #line 2225 
      if (t.polling >= 0) 
        #line 2226 
        if ((adapter->flags & 4UL) != 0UL) 
                                           #line 2227 
                                           q->polling = (unsigned int)t.polling;
        else {
          #line 2230 
          if (adapter->params.rev == 0U && (adapter->flags & 2UL) == 0UL) 
            #line 2232 
            t.polling = 0;
          #line 2234 
          i = 0;
          #line 2234 
          while (i <= 7) {
            #line 2235 
            q = & adapter->params.sge.qset[i];
            #line 2237 
            q->polling = (unsigned int)t.polling;
            #line 2234 
            i ++;
          }
        }
      #line 2242 
      if (t.lro >= 0) {
        #line 2243 
        if (t.lro != 0) 
                        #line 2244 
                        dev->wanted_features |= 16384ULL; else 
                                                               #line 2246 
                                                               dev->wanted_features &= 18446744073709535231ULL;
        #line 2247 
        netdev_update_features(dev);
      }
      #line 2250 
      break;
    }
    #line 2252 
    case (u32)1046: 
                    #line 2252 
    ;
    {
      #line 2276 
      uint32_t _i;
      #line 2276 
      unsigned long _mask;
      #line 2253 
      struct qset_params *q_0;
      #line 2254 
      struct ch_qset_params t_0;
      #line 2257 
      int i_0;
      #line 2255 
      int q1_0 = (int)pi->first_qset;
      #line 2256 
      int nqsets_0 = (int)pi->nqsets;
      #line 2259 
      if (copy_from_user((void *)(& t_0),useraddr,56UL) != 0UL) 
                                                                #line 2260 
                                                                return -14;
      #line 2262 
      if (t_0.cmd != 1046U) 
                            #line 2263 
                            return -22;
      #line 2266 
      if ((int)test_bit(15L,& adapter->open_device_map) != 0) {
        #line 2267 
        q1_0 = 0;
        #line 2268 
        i_0 = 0;
        #line 2268 
        while (adapter->params.nports > (unsigned int)i_0) {
          #line 2269 
          pi = adap2pinfo(adapter,i_0);
          #line 2270 
          nqsets_0 = (int)pi->first_qset + (int)pi->nqsets;
          #line 2268 
          i_0 ++;
        }
      }
      #line 2274 
      if (t_0.qset_idx >= (unsigned int)nqsets_0) 
                                                  #line 2275 
                                                  return -22;
      {
        #line 2276 
        _i = t_0.qset_idx;
        #line 2276 
        int _s = nqsets_0;
        #line 2276 
        _mask = array_index_mask_nospec((unsigned long)_i,(unsigned long)_s);
        }
      #line 2276 
      t_0.qset_idx = ((unsigned int)_mask & _i);
      #line 2278 
      q_0 = & adapter->params.sge.qset[t_0.qset_idx + (unsigned int)q1_0];
      #line 2279 
      t_0.rspq_size = (int)q_0->rspq_size;
      #line 2280 
      t_0.txq_size[0] = (int)q_0->txq_size[0];
      #line 2281 
      t_0.txq_size[1] = (int)q_0->txq_size[1];
      #line 2282 
      t_0.txq_size[2] = (int)q_0->txq_size[2];
      #line 2283 
      t_0.fl_size[0] = (int)q_0->fl_size;
      #line 2284 
      t_0.fl_size[1] = (int)q_0->jumbo_size;
      #line 2285 
      t_0.polling = (int)q_0->polling;
      #line 2286 
      t_0.lro = (dev->features & 16384ULL) != 0ULL;
      #line 2287 
      t_0.intr_lat = (int)q_0->coalesce_usecs;
      #line 2288 
      t_0.cong_thres = (int)q_0->cong_thres;
      #line 2289 
      t_0.qnum = q1_0;
      #line 2291 
      if ((adapter->flags & 4UL) != 0UL) 
                                         #line 2292 
                                         t_0.vector = (int)adapter->msix_info[(t_0.qset_idx + (unsigned int)q1_0) + 1U].vec; else 
                                                                    #line 2294 
                                                                    t_0.vector = (int)(adapter->pdev)->irq;
      #line 2296 
      if (copy_to_user(useraddr,(void *)(& t_0),56UL) != 0UL) 
                                                              #line 2297 
                                                              return -14;
      #line 2298 
      break;
    }
    #line 2300 
    case (u32)1047: 
                    #line 2300 
    ;
    {
      #line 2301 
      struct ch_reg edata;
      #line 2302 
      unsigned int i_1;
      #line 2302 
      unsigned int first_qset = 0U;
      #line 2302 
      unsigned int other_qsets = 0U;
      #line 2304 
      if (! capable(12)) 
                         #line 2305 
                         return -1;
      #line 2306 
      if ((adapter->flags & 1UL) != 0UL) 
                                         #line 2307 
                                         return -16;
      #line 2308 
      if (copy_from_user((void *)(& edata),useraddr,12UL) != 0UL) 
                                                                  #line 2309 
                                                                  return -14;
      #line 2310 
      if (edata.cmd != 1047U) 
                              #line 2311 
                              return -22;
      #line 2312 
      if (edata.val == 0U || edata.val > 1U && (adapter->flags & 4UL) == 0UL) 
        #line 2314 
        return -22;
      #line 2316 
      i_1 = 0U;
      #line 2316 
      while (adapter->params.nports > i_1) {
        #line 2317 
        if (adapter->port[i_1] != (struct net_device *)0 && adapter->port[i_1] != dev) {
          #line 2318 
          other_qsets = (unsigned int)adap2pinfo(adapter,(int)i_1)->nqsets + other_qsets;
        }
        #line 2316 
        i_1 ++;
      }
      #line 2320 
      if (edata.val + other_qsets > 8U) 
                                        #line 2321 
                                        return -22;
      #line 2323 
      pi->nqsets = (unsigned char)edata.val;
      #line 2325 
      i_1 = 0U;
      #line 2325 
      while (adapter->params.nports > i_1) {
        #line 2326 
        if (adapter->port[i_1] != (struct net_device *)0) {
          #line 2327 
          pi = adap2pinfo(adapter,(int)i_1);
          #line 2328 
          pi->first_qset = (unsigned char)first_qset;
          #line 2329 
          first_qset = (unsigned int)pi->nqsets + first_qset;
        }
        #line 2325 
        i_1 ++;
      }
      #line 2331 
      break;
    }
    #line 2333 
    case (u32)1048: 
                    #line 2333 
    ;
    {
      #line 2334 
      struct ch_reg edata_0;
      #line 2336 
      memset((void *)(& edata_0),0,12UL);
      #line 2338 
      edata_0.cmd = 1048U;
      #line 2339 
      edata_0.val = (unsigned int)pi->nqsets;
      #line 2340 
      if (copy_to_user(useraddr,(void *)(& edata_0),12UL) != 0UL) 
                                                                  #line 2341 
                                                                  return -14;
      #line 2342 
      break;
    }
    #line 2344 
    case (u32)1041: 
                    #line 2344 
    ;
    {
      #line 2345 
      u8 *fw_data;
      #line 2346 
      struct ch_mem_range t_1;
      #line 2348 
      if (! capable(17)) 
                         #line 2349 
                         return -1;
      #line 2350 
      if (copy_from_user((void *)(& t_1),useraddr,20UL) != 0UL) 
                                                                #line 2351 
                                                                return -14;
      #line 2352 
      if (t_1.cmd != 1041U) 
                            #line 2353 
                            return -22;
      #line 2355 
      fw_data = (u8 *)memdup_user(useraddr + 20UL,(unsigned long)t_1.len);
      #line 2356 
      if ((int)IS_ERR_0((void *)fw_data) != 0) {
        #line 2357 
        return (int)PTR_ERR((void *)fw_data);
      }
      #line 2359 
      ret = t3_load_fw(adapter,fw_data,t_1.len);
      #line 2360 
      kfree((void *)fw_data);
      #line 2361 
      if (ret != 0) 
                    #line 2362 
                    return ret;
      #line 2363 
      break;
    }
    #line 2365 
    case (u32)1030: 
                    #line 2365 
    ;
    {
      #line 2366 
      struct ch_mtus m;
      #line 2367 
      int i_2;
      #line 2369 
      if (is_offload(adapter) == 0) 
                                    #line 2370 
                                    return -95;
      #line 2371 
      if (! capable(12)) 
                         #line 2372 
                         return -1;
      #line 2373 
      if (offload_running(adapter) != 0) 
                                         #line 2374 
                                         return -16;
      #line 2375 
      if (copy_from_user((void *)(& m),useraddr,40UL) != 0UL) 
                                                              #line 2376 
                                                              return -14;
      #line 2377 
      if (m.cmd != 1030U) 
                          #line 2378 
                          return -22;
      #line 2379 
      if (m.nmtus != 16U) 
                          #line 2380 
                          return -22;
      #line 2381 
      if ((unsigned int)m.mtus[0] <= 80U) 
                                          #line 2382 
                                          return -22;
      #line 2385 
      i_2 = 1;
      #line 2385 
      while (i_2 <= 15) {
        #line 2386 
        if ((int)m.mtus[i_2] < (int)m.mtus[i_2 + -1]) 
                                                      #line 2387 
                                                      return -22;
        #line 2385 
        i_2 ++;
      }
      #line 2389 
      memcpy((void *)(& adapter->params.mtus),(void *)(& m.mtus),32UL);
      #line 2391 
      break;
    }
    #line 2393 
    case (u32)1033: 
                    #line 2393 
    ;
    {
      #line 2394 
      struct tp_params *p = & adapter->params.tp;
      #line 2395 
      struct ch_pm m_0 = {.cmd = 1033U, .tx_pg_sz = 0U, .tx_num_pg = 0U, .rx_pg_sz = 0U, .rx_num_pg = 0U, .pm_total = 0U};
      #line 2397 
      if (is_offload(adapter) == 0) 
                                    #line 2398 
                                    return -95;
      #line 2399 
      m_0.tx_pg_sz = p->tx_pg_size;
      #line 2400 
      m_0.tx_num_pg = p->tx_num_pgs;
      #line 2401 
      m_0.rx_pg_sz = p->rx_pg_size;
      #line 2402 
      m_0.rx_num_pg = p->rx_num_pgs;
      #line 2403 
      m_0.pm_total = p->pmtx_size + p->chan_rx_size * p->nchan;
      #line 2404 
      if (copy_to_user(useraddr,(void *)(& m_0),24UL) != 0UL) 
                                                              #line 2405 
                                                              return -14;
      #line 2406 
      break;
    }
    #line 2408 
    case (u32)1032: 
                    #line 2408 
    ;
    {
      #line 2409 
      struct ch_pm m_1;
      #line 2410 
      struct tp_params *p_0 = & adapter->params.tp;
      #line 2412 
      if (is_offload(adapter) == 0) 
                                    #line 2413 
                                    return -95;
      #line 2414 
      if (! capable(12)) 
                         #line 2415 
                         return -1;
      #line 2416 
      if ((adapter->flags & 1UL) != 0UL) 
                                         #line 2417 
                                         return -16;
      #line 2418 
      if (copy_from_user((void *)(& m_1),useraddr,24UL) != 0UL) 
                                                                #line 2419 
                                                                return -14;
      #line 2420 
      if (m_1.cmd != 1032U) 
                            #line 2421 
                            return -22;
      #line 2422 
      if (is_power_of_2((unsigned long)m_1.rx_pg_sz)) {
        #line 2423 
        if (! is_power_of_2((unsigned long)m_1.tx_pg_sz)) 
                                                          #line 2424 
                                                          return -22;
      }
      else 
           #line 2424 
           return -22;
      #line 2425 
      if ((m_1.rx_pg_sz & 81920U) == 0U) 
                                         #line 2426 
                                         return -22;
      #line 2427 
      if ((m_1.tx_pg_sz & 22364160U) == 0U) 
                                            #line 2428 
                                            return -22;
      #line 2429 
      if (m_1.tx_num_pg == 4294967295U) 
                                        #line 2430 
                                        m_1.tx_num_pg = p_0->tx_num_pgs;
      #line 2431 
      if (m_1.rx_num_pg == 4294967295U) 
                                        #line 2432 
                                        m_1.rx_num_pg = p_0->rx_num_pgs;
      #line 2433 
      if (m_1.tx_num_pg % 24U != 0U || m_1.rx_num_pg % 24U != 0U) 
                                                                  #line 2434 
                                                                  return -22;
      #line 2435 
      if (m_1.rx_num_pg * m_1.rx_pg_sz > p_0->chan_rx_size || m_1.tx_num_pg * m_1.tx_pg_sz > p_0->chan_tx_size) 
        #line 2437 
        return -22;
      #line 2438 
      p_0->rx_pg_size = m_1.rx_pg_sz;
      #line 2439 
      p_0->tx_pg_size = m_1.tx_pg_sz;
      #line 2440 
      p_0->rx_num_pgs = m_1.rx_num_pg;
      #line 2441 
      p_0->tx_num_pgs = m_1.tx_num_pg;
      #line 2442 
      break;
    }
    #line 2444 
    case (u32)1038: 
                    #line 2444 
    ;
    {
      #line 2445 
      struct ch_mem_range t_2;
      #line 2446 
      struct mc7 *mem;
      #line 2447 
      u64 buf[32U];
      #line 2449 
      if (is_offload(adapter) == 0) 
                                    #line 2450 
                                    return -95;
      #line 2451 
      if (! capable(12)) 
                         #line 2452 
                         return -1;
      #line 2453 
      if ((adapter->flags & 1UL) == 0UL) 
                                         #line 2454 
                                         return -5;
      #line 2455 
      if (copy_from_user((void *)(& t_2),useraddr,20UL) != 0UL) 
                                                                #line 2456 
                                                                return -14;
      #line 2457 
      if (t_2.cmd != 1038U) 
                            #line 2458 
                            return -22;
      #line 2459 
      if ((t_2.addr & 7U) != 0U || (t_2.len & 7U) != 0U) 
                                                         #line 2460 
                                                         return -22;
      #line 2461 
      if (t_2.mem_id == 0U) 
                            #line 2462 
                            mem = & adapter->cm;
      else 
        #line 2463 
        if (t_2.mem_id == 1U) 
                              #line 2464 
                              mem = & adapter->pmrx;
        else 
          #line 2465 
          if (t_2.mem_id == 2U) 
                                #line 2466 
                                mem = & adapter->pmtx; else 
                                                            #line 2468 
                                                            return -22;
      #line 2475 
      t_2.version = (adapter->params.rev << 10) | 3U;
      #line 2476 
      if (copy_to_user(useraddr,(void *)(& t_2),20UL) != 0UL) 
                                                              #line 2477 
                                                              return -14;
      #line 2483 
      useraddr += 20UL;
      #line 2484 
      while (t_2.len != 0U) {
        #line 2486 
        unsigned int __UNIQUE_ID___x460;
        #line 2486 
        unsigned int tmp_41;
        {
          #line 2486 
          __UNIQUE_ID___x460 = t_2.len;
          #line 2486 
          unsigned int __UNIQUE_ID___y461 = 256U;
          #line 2486 
          if (__UNIQUE_ID___x460 < __UNIQUE_ID___y461) 
                                                       #line 2486 
                                                       tmp_41 = __UNIQUE_ID___x460; else 
                                                                    #line 2486 
                                                                    tmp_41 = __UNIQUE_ID___y461;
          }
        #line 2485 
        unsigned int chunk = tmp_41;
        #line 2488 
        ret = t3_mc7_bd_read(mem,t_2.addr / 8U,chunk / 8U,(u64 *)(& buf));
        #line 2491 
        if (ret != 0) 
                      #line 2492 
                      return ret;
        #line 2493 
        if (copy_to_user(useraddr,(void *)(& buf),(unsigned long)chunk) != 0UL) 
          #line 2494 
          return -14;
        #line 2495 
        useraddr += (unsigned long)chunk;
        #line 2496 
        t_2.addr += chunk;
        #line 2497 
        t_2.len -= chunk;
      }
      #line 2499 
      break;
    }
    #line 2501 
    case (u32)1044: 
                    #line 2501 
    ;
    {
      #line 2502 
      struct ch_trace t_3;
      #line 2503 
      struct trace_params *tp;
      #line 2505 
      if (! capable(12)) 
                         #line 2506 
                         return -1;
      #line 2507 
      if (offload_running(adapter) == 0) 
                                         #line 2508 
                                         return -11;
      #line 2509 
      if (copy_from_user((void *)(& t_3),useraddr,36UL) != 0UL) 
                                                                #line 2510 
                                                                return -14;
      #line 2511 
      if (t_3.cmd != 1044U) 
                            #line 2512 
                            return -22;
      #line 2514 
      tp = (struct trace_params *)(& t_3.sip);
      #line 2515 
      if ((unsigned int)t_3.config_tx != 0U) 
                                             #line 2516 
                                             t3_config_trace_filter(adapter,tp,0,(int)t_3.invert_match,(int)t_3.trace_tx);
      #line 2519 
      if ((unsigned int)t_3.config_rx != 0U) 
                                             #line 2520 
                                             t3_config_trace_filter(adapter,tp,1,(int)t_3.invert_match,(int)t_3.trace_rx);
      #line 2523 
      break;
    }
    #line 2525 
    default: 
             #line 2525 
    ;
    #line 2526 
    return -95;
  }
  #line 2528 
  return 0;
}

#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_ioctl(struct net_device *dev, struct ifreq *req, int cmd)
{
  #line 2533 
  struct mii_ioctl_data *data = if_mii(req);
  #line 2534 
  struct port_info *pi = netdev_priv(dev);
  #line 2535 
  struct adapter *adapter = pi->adapter;
  #line 2537 
  switch (cmd) {
    #line 2538 
    case 35144: 
                #line 2538 
    ;
    #line 2539 
    case 35145: 
                #line 2539 
    ;
    #line 2541 
    if (is_10G(adapter) != 0) {
      #line 2542 
      if (! mdio_phy_id_is_c45((int)data->phy_id)) 
        #line 2542 
        if (((int)data->phy_id & 7936) != 0) 
          #line 2543 
          if (((int)data->phy_id & 57568) == 0) 
                                                #line 2545 
                                                data->phy_id = mdio_phy_id_c45((int)data->phy_id >> 8,(int)data->phy_id & 31);
    }
    #line 2548 
    case 35143: 
                #line 2548 
    ;
    #line 2549 
    return mdio_mii_ioctl(& pi->phy.mdio,data,cmd);
    #line 2550 
    case 35312: 
                #line 2550 
    ;
    #line 2551 
    return cxgb_extension_ioctl(dev,req->ifr_ifru.ifru_data);
    #line 2552 
    default: 
             #line 2552 
    ;
    #line 2553 
    return -95;
  }
}

#line 2557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 2561 
  int ret;
  #line 2559 
  struct port_info *pi = netdev_priv(dev);
  #line 2560 
  struct adapter *adapter = pi->adapter;
  #line 2563 
  ret = t3_mac_set_mtu(& pi->mac,(unsigned int)new_mtu);
  #line 2563 
  if (ret != 0) 
                #line 2564 
                return ret;
  #line 2565 
  dev->mtu = (unsigned int)new_mtu;
  #line 2566 
  init_port_mtus(adapter);
  #line 2567 
  if (adapter->params.rev == 0U) {
    #line 2567 
    if (offload_running(adapter) != 0) 
                                       #line 2568 
                                       t3_load_mtus(adapter,(unsigned short *)(& adapter->params.mtus),(unsigned short *)(& adapter->params.a_wnd),(unsigned short *)(& adapter->params.b_wnd),(unsigned short)((int)((unsigned short)(adapter->port[0])->mtu)));
  }
  #line 2571 
  return 0;
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_set_mac_addr(struct net_device *dev, void *p)
{
  #line 2576 
  struct port_info *pi = netdev_priv(dev);
  #line 2577 
  struct adapter *adapter = pi->adapter;
  #line 2578 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 2580 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 2581 
                                                      return -99;
  #line 2583 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 2584 
  t3_mac_set_address(& pi->mac,0U,dev->dev_addr);
  #line 2585 
  if (offload_running(adapter) != 0) 
                                     #line 2586 
                                     write_smt_entry(adapter,(int)pi->port_id);
  #line 2587 
  return 0;
}

#line 2590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static netdev_features_t cxgb_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 2597 
  if ((features & 256ULL) != 0ULL) 
                                   #line 2598 
                                   features |= 128ULL; else 
                                                            #line 2600 
                                                            features &= 18446744073709551487ULL;
  #line 2602 
  return features;
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 2607 
  netdev_features_t changed = dev->features ^ features;
  #line 2609 
  if ((changed & 256ULL) != 0ULL) 
                                  #line 2610 
                                  cxgb_vlan_mode(dev,features);
  #line 2612 
  return 0;
}

#line 2616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void cxgb_netpoll(struct net_device *dev)
{
  #line 2620 
  int qidx;
  #line 2618 
  struct port_info *pi = netdev_priv(dev);
  #line 2619 
  struct adapter *adapter = pi->adapter;
  #line 2622 
  qidx = (int)pi->first_qset;
  #line 2622 
  while ((int)pi->first_qset + (int)pi->nqsets > qidx) {
    {
      #line 2624 
      void *source;
      #line 2623 
      struct sge_qset *qs = & adapter->sge.qs[qidx];
      #line 2626 
      if ((adapter->flags & 4UL) != 0UL) 
                                         #line 2627 
                                         source = (void *)qs; else 
                                                                   #line 2629 
                                                                   source = (void *)adapter;
      #line 2631 
      (*t3_intr_handler(adapter,(int)qs->rspq.polling))(0,source);
    }
    #line 2622 
    qidx ++;
  }
  #line 2633 
  return;
}

#line 2639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void mac_stats_update(struct adapter *adapter)
{
  #line 2641 
  int i;
  #line 2643 
  i = 0;
  #line 2643 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 2644 
      struct net_device *dev = adapter->port[i];
      #line 2645 
      struct port_info *p = netdev_priv(dev);
      #line 2647 
      if ((int)netif_running(dev) != 0) {
        #line 2648 
        cif_spin_lock_stats_lock_of_adapter_0(& adapter->stats_lock);
        #line 2649 
        t3_mac_update_stats(& p->mac);
        #line 2650 
        cif_spin_unlock_stats_lock_of_adapter_0(& adapter->stats_lock);
      }
    }
    #line 2643 
    i ++;
  }
  #line 2653 
  return;
}

#line 2655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void check_link_status(struct adapter *adapter)
{
  #line 2657 
  int i;
  #line 2659 
  i = 0;
  #line 2659 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 2662 
      int link_fault;
      #line 2660 
      struct net_device *dev = adapter->port[i];
      #line 2661 
      struct port_info *p = netdev_priv(dev);
      #line 2664 
      cif_spin_lock_irq_work_lock_of_adapter(& adapter->work_lock);
      #line 2665 
      link_fault = p->link_fault;
      #line 2666 
      cif_spin_unlock_irq_work_lock_of_adapter(& adapter->work_lock);
      #line 2668 
      if (link_fault != 0) {
        #line 2669 
        t3_link_fault(adapter,i);
        #line 2670 
        goto __Cont;
      }
      #line 2673 
      if ((p->phy.caps & 16777216U) == 0U) {
        #line 2673 
        if ((int)netif_running(dev) != 0) {
          #line 2674 
          t3_xgm_intr_disable(adapter,i);
          #line 2675 
          t3_read_reg(adapter,p->mac.offset + 2156U);
          #line 2677 
          t3_link_changed(adapter,i);
          #line 2678 
          t3_xgm_intr_enable(adapter,i);
        }
      }
    }
    #line 2659 
    __Cont: 
            #line 2659 
    i ++;
  }
  #line 2681 
  return;
}

#line 2683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void check_t3b2_mac(struct adapter *adapter)
{
  #line 2685 
  int i;
  #line 2687 
  if (rtnl_trylock() == 0) 
                           #line 2688 
                           return;
  #line 2690 
  i = 0;
  #line 2690 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 2693 
      int status;
      #line 2691 
      struct net_device *dev = adapter->port[i];
      #line 2692 
      struct port_info *p = netdev_priv(dev);
      #line 2695 
      if (! netif_running(dev)) 
                                #line 2696 
                                goto __Cont;
      #line 2698 
      status = 0;
      #line 2699 
      if ((int)netif_running(dev) != 0) {
        #line 2699 
        if ((int)netif_carrier_ok(dev) != 0) 
                                             #line 2700 
                                             status = t3b2_mac_watchdog_task(& p->mac);
      }
      #line 2701 
      if (status == 1) 
                       #line 2702 
                       (p->mac.stats.num_toggled) ++;
      else 
        #line 2703 
        if (status == 2) {
          #line 2704 
          struct cmac *mac = & p->mac;
          #line 2706 
          t3_mac_set_mtu(mac,dev->mtu);
          #line 2707 
          t3_mac_set_address(mac,0U,dev->dev_addr);
          #line 2708 
          cxgb_set_rxmode(dev);
          #line 2709 
          t3_link_start(& p->phy,mac,& p->link_config);
          #line 2710 
          t3_mac_enable(mac,3);
          #line 2711 
          t3_port_intr_enable(adapter,(int)p->port_id);
          #line 2712 
          (p->mac.stats.num_resets) ++;
        }
    }
    #line 2690 
    __Cont: 
            #line 2690 
    i ++;
  }
  #line 2715 
  rtnl_unlock();
  #line 2716 
  return;
}

#line 2719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void t3_adap_check_task(struct work_struct *work)
{
  #line 2721 
  void *__mptr;
  #line 2724 
  int port;
  #line 2725 
  unsigned int v;
  #line 2725 
  unsigned int status;
  #line 2725 
  unsigned int reset;
  #line 2721 
  __mptr = (void *)work;
  #line 2721 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709532128U));
  #line 2723 
  struct adapter_params *p = & adapter->params;
  #line 2727 
  (adapter->check_task_cnt) ++;
  #line 2729 
  check_link_status(adapter);
  #line 2732 
  if (p->linkpoll_period == 0U || (adapter->check_task_cnt * p->linkpoll_period) / 10U >= p->stats_update_period) {
    #line 2735 
    mac_stats_update(adapter);
    #line 2736 
    adapter->check_task_cnt = 0U;
  }
  #line 2739 
  if (p->rev == 3U) 
                    #line 2740 
                    check_t3b2_mac(adapter);
  #line 2750 
  port = 0;
  #line 2750 
  while (adapter->params.nports > (unsigned int)port) {
    {
      #line 2752 
      u32 cause;
      #line 2751 
      struct cmac *mac = & adap2pinfo(adapter,port)->mac;
      #line 2754 
      cause = t3_read_reg(adapter,mac->offset + 2264U);
      #line 2755 
      reset = 0U;
      #line 2756 
      if ((cause & 4096U) != 0U) {
        #line 2757 
        (mac->stats.rx_fifo_ovfl) ++;
        #line 2758 
        reset |= 4096U;
      }
      #line 2761 
      t3_write_reg(adapter,mac->offset + 2264U,reset);
    }
    #line 2750 
    port ++;
  }
  #line 2767 
  status = t3_read_reg(adapter,92U);
  #line 2768 
  reset = 0U;
  #line 2770 
  if ((status & 2U) != 0U) {
    #line 2771 
    struct sge_qset *qs = & adapter->sge.qs[0];
    #line 2772 
    int i = 0;
    #line 2774 
    reset |= 2U;
    #line 2776 
    v = (t3_read_reg(adapter,76U) >> 16) & 65535U;
    #line 2779 
    while (v != 0U) {
      #line 2780 
      qs->fl[i].empty += (unsigned long)v & 1UL;
      #line 2781 
      if (i != 0) 
                  #line 2782 
                  qs ++;
      #line 2783 
      i ^= 1;
      #line 2784 
      v >>= 1;
    }
  }
  #line 2788 
  t3_write_reg(adapter,92U,reset);
  #line 2791 
  cif_spin_lock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 2792 
  if ((adapter->open_device_map & 3UL) != 0UL) 
                                               #line 2793 
                                               schedule_chk_task(adapter);
  #line 2794 
  cif_spin_unlock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 2795 
  return;
}

#line 2797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void db_full_task(struct work_struct *work)
{
  #line 2799 
  void *__mptr;
  #line 2799 
  __mptr = (void *)work;
  #line 2799 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709531704U));
  #line 2802 
  cxgb3_event_notify(& adapter->tdev,4U,0U);
  #line 2803 
  return;
}

#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void db_empty_task(struct work_struct *work)
{
  #line 2807 
  void *__mptr;
  #line 2807 
  __mptr = (void *)work;
  #line 2807 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709531624U));
  #line 2810 
  cxgb3_event_notify(& adapter->tdev,5U,0U);
  #line 2811 
  return;
}

#line 2813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void db_drop_task(struct work_struct *work)
{
  #line 2815 
  void *__mptr;
  #line 2818 
  unsigned short r;
  #line 2815 
  __mptr = (void *)work;
  #line 2815 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709531544U));
  #line 2817 
  unsigned long delay = 1000UL;
  #line 2820 
  cxgb3_event_notify(& adapter->tdev,6U,0U);
  #line 2826 
  get_random_bytes((void *)(& r),2);
  #line 2827 
  delay = ((unsigned long)r & 1023UL) + delay;
  {
    {
      #line 2828 
      int __ret_warn_on = 0;
      #line 2828 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2829 
        ldv_inline_asm();
        #line 2830 
        ldv_inline_asm();
      }
      #line 2828 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 2828 
    __here_0: 
              #line 2828 
    ;
    #line 2828 
    ldv_get_current()->task_state_change = (unsigned long)((void *)0);
    {
      #line 2828 
      long *__ai_ptr = & ldv_get_current()->state;
      #line 2828 
      kasan_check_read((void *)__ai_ptr,8U);
      {
        #line 2828 
        long __ret = 2L;
        #line 2828 
        switch (8UL) {
          #line 2828 
          case (unsigned long)1: 
                                 #line 2828 
          ;
          #line 2829 
          ldv_inline_asm();
          #line 2828 
          break;
          #line 2828 
          case (unsigned long)2: 
                                 #line 2828 
          ;
          #line 2829 
          ldv_inline_asm();
          #line 2828 
          break;
          #line 2828 
          case (unsigned long)4: 
                                 #line 2828 
          ;
          #line 2829 
          ldv_inline_asm();
          #line 2828 
          break;
          #line 2828 
          case (unsigned long)8: 
                                 #line 2828 
          ;
          #line 2829 
          ldv_inline_asm();
          #line 2828 
          break;
          #line 2828 
          default: 
                   #line 2828 
          ;
          #line 2828 
          __xchg_wrong_size();
        }
        #line 2828 
        long tmp_4 = __ret;
      }
    }
  }
  #line 2829 
  schedule_timeout((long)usecs_to_jiffies((unsigned int)delay));
  #line 2830 
  ring_dbs(adapter);
  #line 2831 
  return;
}

#line 2836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void ext_intr_task(struct work_struct *work)
{
  #line 2838 
  void *__mptr;
  #line 2840 
  int i;
  #line 2838 
  __mptr = (void *)work;
  #line 2838 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709531944U));
  #line 2843 
  i = 0;
  #line 2843 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 2844 
      struct net_device *dev = adapter->port[i];
      #line 2845 
      struct port_info *p = netdev_priv(dev);
      #line 2847 
      t3_xgm_intr_disable(adapter,i);
      #line 2848 
      t3_read_reg(adapter,p->mac.offset + 2156U);
    }
    #line 2843 
    i ++;
  }
  #line 2852 
  t3_phy_intr_handler(adapter);
  #line 2854 
  i = 0;
  #line 2854 
  while (adapter->params.nports > (unsigned int)i) {
    #line 2855 
    t3_xgm_intr_enable(adapter,i);
    #line 2854 
    i ++;
  }
  #line 2858 
  cif_spin_lock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 2859 
  if (adapter->slow_intr_mask != 0U) {
    #line 2860 
    adapter->slow_intr_mask |= 8388608U;
    #line 2861 
    t3_write_reg(adapter,1764U,8388608U);
    #line 2862 
    t3_write_reg(adapter,1760U,adapter->slow_intr_mask);
  }
  #line 2865 
  cif_spin_unlock_irq_work_lock_of_adapter(& adapter->work_lock);
  #line 2866 
  return;
}

#line 2871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
void t3_os_ext_intr_handler(struct adapter *adapter)
{
  #line 2879 
  cif_spin_lock_work_lock_of_adapter(& adapter->work_lock);
  #line 2880 
  if (adapter->slow_intr_mask != 0U) {
    #line 2881 
    adapter->slow_intr_mask &= 4286578687U;
    #line 2882 
    t3_write_reg(adapter,1760U,adapter->slow_intr_mask);
    #line 2884 
    cif_queue_work_0(cxgb3_wq,& adapter->ext_intr_handler_task);
  }
  #line 2886 
  cif_spin_unlock_work_lock_of_adapter(& adapter->work_lock);
  #line 2887 
  return;
}

#line 2889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
void t3_os_link_fault_handler(struct adapter *adapter, int port_id)
{
  #line 2891 
  struct net_device *netdev = adapter->port[port_id];
  #line 2892 
  struct port_info *pi = netdev_priv(netdev);
  #line 2894 
  cif_spin_lock_work_lock_of_adapter(& adapter->work_lock);
  #line 2895 
  pi->link_fault = 1;
  #line 2896 
  cif_spin_unlock_work_lock_of_adapter(& adapter->work_lock);
  #line 2897 
  return;
}

#line 2899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int t3_adapter_error(struct adapter *adapter, int reset, int on_wq)
{
  #line 2901 
  int i;
  #line 2901 
  int ret = 0;
  #line 2903 
  if (is_offload(adapter) != 0) {
    #line 2903 
    if ((int)test_bit(15L,& adapter->open_device_map) != 0) {
      #line 2905 
      cxgb3_event_notify(& adapter->tdev,1U,0U);
      #line 2906 
      offload_close(& adapter->tdev);
    }
  }
  #line 2910 
  i = 0;
  #line 2910 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 2911 
      struct net_device *netdev = adapter->port[i];
      #line 2913 
      if ((int)netif_running(netdev) != 0) 
                                           #line 2914 
                                           __cxgb_close(netdev,on_wq);
    }
    #line 2910 
    i ++;
  }
  #line 2918 
  t3_stop_sge_timers(adapter);
  #line 2920 
  adapter->flags &= 18446744073709551614UL;
  #line 2922 
  if (reset != 0) 
                  #line 2923 
                  ret = t3_reset_adapter(adapter);
  #line 2925 
  pci_disable_device(adapter->pdev);
  #line 2927 
  return ret;
}

#line 2930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int t3_reenable_adapter(struct adapter *adapter)
{
  #line 2932 
  if (pci_enable_device(adapter->pdev) != 0) {
    #line 2933 
    _dev_err(& (adapter->pdev)->dev,(char *)"Cannot re-enable PCI device after reset.\n");
    #line 2935 
    goto err;
  }
  #line 2937 
  pci_set_master(adapter->pdev);
  #line 2938 
  pci_restore_state(adapter->pdev);
  #line 2939 
  pci_save_state(adapter->pdev);
  #line 2942 
  t3_free_sge_resources(adapter);
  #line 2944 
  if (t3_replay_prep_adapter(adapter) != 0) 
                                            #line 2945 
                                            goto err;
  #line 2947 
  return 0;
  #line 2948 
  err: 
       #line 2948 
  ;
  #line 2949 
  return -1;
}

#line 2952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void t3_resume_ports(struct adapter *adapter)
{
  #line 2954 
  int i;
  #line 2957 
  i = 0;
  #line 2957 
  while (adapter->params.nports > (unsigned int)i) {
    {
      #line 2958 
      struct net_device *netdev = adapter->port[i];
      #line 2960 
      if ((int)netif_running(netdev) != 0) {
        #line 2961 
        if (cxgb_open(netdev) != 0) {
          #line 2962 
          _dev_err(& (adapter->pdev)->dev,(char *)"can\'t bring device back up");
          #line 2965 
          goto __Cont;
        }
      }
    }
    #line 2957 
    __Cont: 
            #line 2957 
    i ++;
  }
  #line 2970 
  if (is_offload(adapter) != 0) 
    #line 2970 
    if (ofld_disable == 0) 
                           #line 2971 
                           cxgb3_event_notify(& adapter->tdev,0U,0U);
  #line 2972 
  return;
}

#line 2978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void fatal_error_task(struct work_struct *work)
{
  #line 2980 
  void *__mptr;
  #line 2991 
  char *tmp_0;
  #line 2980 
  __mptr = (void *)work;
  #line 2980 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709531864U));
  #line 2982 
  int err = 0;
  #line 2984 
  rtnl_lock();
  #line 2985 
  err = t3_adapter_error(adapter,1,1);
  #line 2986 
  if (err == 0) 
                #line 2987 
                err = t3_reenable_adapter(adapter);
  #line 2988 
  if (err == 0) 
                #line 2989 
                t3_resume_ports(adapter);
  #line 2991 
  if (err != 0) 
                #line 2991 
                tmp_0 = (char *)"failed"; else 
                                               #line 2991 
                                               tmp_0 = (char *)"succeeded";
  #line 2991 
  ;
  #line 2991 
  _dev_alert(& (adapter->pdev)->dev,(char *)"adapter reset %s\n",tmp_0);
  #line 2992 
  rtnl_unlock();
  #line 2993 
  return;
}

#line 2995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
void t3_fatal_err(struct adapter *adapter)
{
  #line 2997 
  unsigned int fw_status[4U];
  #line 2999 
  if ((adapter->flags & 1UL) != 0UL) {
    #line 3000 
    t3_sge_stop(adapter);
    #line 3001 
    t3_write_reg(adapter,2048U,0U);
    #line 3002 
    t3_write_reg(adapter,2060U,0U);
    #line 3003 
    t3_write_reg(adapter,2560U,0U);
    #line 3004 
    t3_write_reg(adapter,2572U,0U);
    #line 3006 
    cif_spin_lock_work_lock_of_adapter(& adapter->work_lock);
    #line 3007 
    t3_intr_disable(adapter);
    #line 3008 
    cif_queue_work_0(cxgb3_wq,& adapter->fatal_error_handler_task);
    #line 3009 
    cif_spin_unlock_work_lock_of_adapter(& adapter->work_lock);
  }
  #line 3011 
  _dev_alert(& (adapter->pdev)->dev,(char *)"encountered fatal error, operation suspended\n");
  #line 3012 
  if (t3_cim_ctl_blk_read(adapter,160U,4U,(unsigned int *)(& fw_status)) == 0) 
    #line 3013 
    _dev_alert(& (adapter->pdev)->dev,(char *)"FW status: 0x%x, 0x%x, 0x%x, 0x%x\n",fw_status[0],fw_status[1],fw_status[2],fw_status[3]);
  #line 3014 
  return;
}

#line 3026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static pci_ers_result_t t3_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 3029 
  struct adapter *adapter = pci_get_drvdata(pdev);
  #line 3031 
  if (state == 3U) 
                   #line 3032 
                   return 4U;
  #line 3034 
  t3_adapter_error(adapter,0,0);
  #line 3037 
  return 3U;
}

#line 3046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static pci_ers_result_t t3_io_slot_reset(struct pci_dev *pdev)
{
  #line 3048 
  struct adapter *adapter = pci_get_drvdata(pdev);
  #line 3050 
  if (t3_reenable_adapter(adapter) == 0) 
                                         #line 3051 
                                         return 5U;
  #line 3053 
  return 4U;
}

#line 3063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void t3_io_resume(struct pci_dev *pdev)
{
  #line 3065 
  struct adapter *adapter = pci_get_drvdata(pdev);
  #line 3067 
  ;
  #line 3067 
  _dev_alert(& (adapter->pdev)->dev,(char *)"adapter recovering, PEX ERR 0x%x\n",t3_read_reg(adapter,164U));
  #line 3070 
  rtnl_lock();
  #line 3071 
  t3_resume_ports(adapter);
  #line 3072 
  rtnl_unlock();
  #line 3073 
  return;
}

#line 3075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct pci_error_handlers t3_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& t3_io_error_detected), .slot_reset = & t3_io_slot_reset, .resume = & t3_io_resume};
#line 3086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void set_nqsets(struct adapter *adap)
{
  #line 3088 
  int i;
  #line 3088 
  int j = 0;
  #line 3089 
  int num_cpus = netif_get_num_default_rss_queues();
  #line 3090 
  int hwports = (int)adap->params.nports;
  #line 3091 
  int nqsets = adap->msix_nvectors + -1;
  #line 3093 
  if (adap->params.rev != 0U && (adap->flags & 4UL) != 0UL) {
    #line 3094 
    if (hwports == 2 && (hwports * nqsets > 8 || nqsets / hwports <= num_cpus)) 
      #line 3097 
      nqsets /= hwports;
    #line 3098 
    if (nqsets > num_cpus) 
                           #line 3099 
                           nqsets = num_cpus;
    #line 3100 
    if (nqsets <= 0 || hwports == 4) 
                                     #line 3101 
                                     nqsets = 1;
  }
  else 
       #line 3103 
       nqsets = 1;
  #line 3105 
  i = 0;
  #line 3105 
  while (adap->params.nports > (unsigned int)i) {
    {
      #line 3106 
      struct port_info *pi = adap2pinfo(adap,i);
      #line 3108 
      pi->first_qset = (unsigned char)j;
      #line 3109 
      pi->nqsets = (unsigned char)nqsets;
      #line 3110 
      j = (int)pi->first_qset + nqsets;
      #line 3112 
      _dev_info(& (adap->pdev)->dev,(char *)"Port %d using %d queue sets.\n",i,nqsets);
    }
    #line 3105 
    i ++;
  }
  #line 3114 
  return;
}

#line 3117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb_enable_msix(struct adapter *adap)
{
  #line 3119 
  struct msix_entry entries[9U];
  #line 3120 
  int vectors;
  #line 3121 
  int i;
  #line 3123 
  vectors = 9;
  #line 3124 
  i = 0;
  #line 3124 
  while (i < vectors) {
    #line 3125 
    entries[i].entry = (unsigned short)i;
    #line 3124 
    i ++;
  }
  #line 3127 
  vectors = pci_enable_msix_range(adap->pdev,(struct msix_entry *)(& entries),(int)(adap->params.nports + 1U),vectors);
  #line 3129 
  if (vectors < 0) 
                   #line 3130 
                   return vectors;
  #line 3132 
  i = 0;
  #line 3132 
  while (i < vectors) {
    #line 3133 
    adap->msix_info[i].vec = (unsigned short)entries[i].vector;
    #line 3132 
    i ++;
  }
  #line 3134 
  adap->msix_nvectors = vectors;
  #line 3136 
  return 0;
}

#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void print_port_info(struct adapter *adap, struct adapter_info *ai)
{
  #line 3145 
  int i;
  #line 3146 
  char buf[80U];
  #line 3141 
  char *pci_variant[5U] = {(char *)"PCI", (char *)"PCI-X", (char *)"PCI-X ECC", (char *)"PCI-X 266", (char *)"PCI Express"};
  #line 3148 
  if (is_pcie(adap) != 0U) 
                           #line 3149 
                           snprintf((char *)(& buf),80UL,(char *)"%s x%d",pci_variant[(int)adap->params.pci.variant],(int)adap->params.pci.width); else 
                                                                    #line 3153 
                                                                    snprintf((char *)(& buf),80UL,(char *)"%s %dMHz/%d-bit",pci_variant[(int)adap->params.pci.variant],(int)adap->params.pci.speed,(int)adap->params.pci.width);
  #line 3157 
  i = 0;
  #line 3157 
  while (adap->params.nports > (unsigned int)i) {
    {
      #line 3166 
      char *tmp_2;
      #line 3165 
      char *tmp_3;
      #line 3164 
      char *tmp_5;
      #line 3158 
      struct net_device *dev = adap->port[i];
      #line 3159 
      struct port_info *pi = netdev_priv(dev);
      #line 3161 
      if (! test_bit((long)i,& adap->registered_device_map)) 
                                                             #line 3162 
                                                             goto __Cont;
      #line 3165 
      if ((adap->flags & 4UL) == 0UL) {
        #line 3166 
        if ((adap->flags & 2UL) != 0UL) 
                                        #line 3166 
                                        tmp_2 = (char *)" MSI"; else 
                                                                  #line 3166 
                                                                  tmp_2 = (char *)"";
        #line 3165 
        tmp_3 = tmp_2;
      }
      else 
           #line 3165 
           tmp_3 = (char *)" MSI-X";
      #line 3163 
      ;
      #line 3164 
      if (is_offload(adap) != 0) 
                                 #line 3164 
                                 tmp_5 = (char *)"R"; else 
                                                           #line 3164 
                                                           tmp_5 = (char *)"";
      #line 3163 
      ;
      #line 3163 
      ;
      #line 3163 
      ;
      #line 3163 
      netdev_info(dev,(char *)"%s %s %sNIC (rev %d) %s%s\n",ai->desc,pi->phy.desc,tmp_5,adap->params.rev,(char *)(& buf),tmp_3);
      #line 3168 
      if (adap->name == (char *)(& dev->name) && adap->params.vpd.mclk != 0U) {
        #line 3169 
        ;
        #line 3169 
        ;
        #line 3169 
        printk((char *)"\001",adap->name,t3_mc7_size(& adap->cm) >> 20,t3_mc7_size(& adap->pmtx) >> 20,t3_mc7_size(& adap->pmrx) >> 20,(u8 *)(& adap->params.vpd.sn));
      }
    }
    #line 3157 
    __Cont: 
            #line 3157 
    i ++;
  }
  #line 3171 
  return;
}

#line 3177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct net_device_ops cxgb_netdev_ops = {.ndo_open = & cxgb_open, .ndo_stop = & cxgb_close, .ndo_start_xmit = & t3_eth_xmit, .ndo_set_rx_mode = & cxgb_set_rxmode, .ndo_set_mac_address = & cxgb_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & cxgb_ioctl, .ndo_change_mtu = & cxgb_change_mtu, .ndo_get_stats = & cxgb_get_stats, .ndo_poll_controller = & cxgb_netpoll, .ndo_fix_features = & cxgb_fix_features, .ndo_set_features = & cxgb_set_features};
#line 3194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void cxgb3_init_iscsi_mac(struct net_device *dev)
{
  #line 3196 
  struct port_info *pi = netdev_priv(dev);
  #line 3198 
  memcpy((void *)(& pi->iscsic.mac_addr),(void *)dev->dev_addr,6UL);
  #line 3199 
  pi->iscsic.mac_addr[3] = (unsigned char)((unsigned int)pi->iscsic.mac_addr[3] | 128U);
  #line 3200 
  return;
}

#line 3205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int init_one(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 3207 
  int i;
  #line 3207 
  int err;
  #line 3208 
  resource_size_t mmio_start;
  #line 3208 
  resource_size_t mmio_len;
  #line 3209 
  struct adapter_info *ai;
  #line 3211 
  struct port_info *pi;
  #line 3207 
  int pci_using_dac = 0;
  #line 3210 
  struct adapter *adapter = (struct adapter *)0;
  {
    #line 3213 
    bool __print_once;
    #line 3213 
    bool __ret_print_once = (_Bool)(! ((int)__print_once != 0));
    #line 3213 
    if (! __print_once) {
      #line 3213 
      __print_once = (_Bool)1;
      #line 3213 
      printk((char *)"\001",(char *)"Chelsio T3 Network Driver",(char *)"1.1.5-ko");
    }
    #line 3213 
    long tmp = (long)((int)__ret_print_once != 0);
  }
  #line 3215 
  if (cxgb3_wq == (struct workqueue_struct *)0) {
    #line 3216 
    cxgb3_wq = alloc_workqueue((char *)"%s",917514U,1,(char *)"cxgb3");
    #line 3217 
    if (cxgb3_wq == (struct workqueue_struct *)0) {
      #line 3218 
      printk((char *)"\001");
      #line 3219 
      return -12;
    }
  }
  #line 3223 
  err = pci_enable_device(pdev);
  #line 3224 
  if (err != 0) {
    #line 3225 
    _dev_err(& pdev->dev,(char *)"cannot enable PCI device\n");
    #line 3226 
    goto out;
  }
  #line 3229 
  err = pci_request_regions(pdev,(char *)"cxgb3");
  #line 3230 
  if (err != 0) {
    #line 3232 
    _dev_info(& pdev->dev,(char *)"cannot obtain PCI resources\n");
    #line 3233 
    goto out_disable_device;
  }
  #line 3236 
  if (pci_set_dma_mask(pdev,18446744073709551615ULL) == 0) {
    #line 3237 
    pci_using_dac = 1;
    #line 3238 
    err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
    #line 3239 
    if (err != 0) {
      #line 3240 
      _dev_err(& pdev->dev,(char *)"unable to obtain 64-bit DMA for ");
      #line 3242 
      goto out_release_regions;
    }
  }
  else {
    #line 3244 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 3244 
    if (err != 0) {
      #line 3245 
      _dev_err(& pdev->dev,(char *)"no usable DMA configuration\n");
      #line 3246 
      goto out_release_regions;
    }
  }
  #line 3249 
  pci_set_master(pdev);
  #line 3250 
  pci_save_state(pdev);
  #line 3252 
  mmio_start = pdev->resource[0].start;
  #line 3253 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 3253 
    mmio_len = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    #line 3253 
                                                                    mmio_len = 0ULL;
  #line 3254 
  ai = t3_get_adapter_info((unsigned int)ent->driver_data);
  #line 3256 
  adapter = (struct adapter *)kzalloc_0(20480UL,3264U);
  #line 3257 
  if (adapter == (struct adapter *)0) {
    #line 3258 
    err = -12;
    #line 3259 
    goto out_release_regions;
  }
  #line 3262 
  adapter->nofail_skb = alloc_skb(32U,3264U);
  #line 3264 
  if (adapter->nofail_skb == (struct sk_buff *)0) {
    #line 3265 
    _dev_err(& pdev->dev,(char *)"cannot allocate nofail buffer\n");
    #line 3266 
    err = -12;
    #line 3267 
    goto out_free_adapter;
  }
  #line 3270 
  adapter->regs = ioremap(mmio_start,(unsigned long)mmio_len);
  #line 3271 
  if (adapter->regs == (void *)0) {
    #line 3272 
    _dev_err(& pdev->dev,(char *)"cannot map device registers\n");
    #line 3273 
    err = -12;
    #line 3274 
    goto out_free_adapter_nofail;
  }
  #line 3277 
  adapter->pdev = pdev;
  #line 3278 
  adapter->name = pci_name(pdev);
  #line 3279 
  adapter->msg_enable = dflt_msg_enable;
  #line 3280 
  adapter->mmio_len = (unsigned int)mmio_len;
  {
    #line 3282 
    struct lock_class_key __key;
    #line 3282 
    __mutex_init(& adapter->mdio_lock,(char *)"&adapter->mdio_lock",& __key);
  }
  #line 3283 
  spinlock_check(& adapter->work_lock);
  {
    #line 3283 
    struct lock_class_key __key_0;
    #line 3283 
    __raw_spin_lock_init(& adapter->work_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->work_lock)->rlock",& __key_0);
  }
  #line 3284 
  spinlock_check(& adapter->stats_lock);
  {
    #line 3284 
    struct lock_class_key __key_1;
    #line 3284 
    __raw_spin_lock_init(& adapter->stats_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->stats_lock)->rlock",& __key_1);
  }
  #line 3286 
  INIT_LIST_HEAD_0(& adapter->adapter_list);
  {
    #line 3287 
    struct lock_class_key __key_2;
    #line 3287 
    __init_work(& adapter->ext_intr_handler_task,0);
    #line 3287 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 3287 
    adapter->ext_intr_handler_task.data = __constr_expr_34;
    #line 3287 
    lockdep_init_map(& adapter->ext_intr_handler_task.lockdep_map,(char *)"(work_completion)",& __key_2,0);
    #line 3287 
    INIT_LIST_HEAD_0(& adapter->ext_intr_handler_task.entry);
    #line 3287 
    adapter->ext_intr_handler_task.func = & ext_intr_task;
  }
  {
    #line 3288 
    struct lock_class_key __key_3;
    #line 3288 
    __init_work(& adapter->fatal_error_handler_task,0);
    #line 3288 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 3288 
    adapter->fatal_error_handler_task.data = __constr_expr_35;
    #line 3288 
    lockdep_init_map(& adapter->fatal_error_handler_task.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 3288 
    INIT_LIST_HEAD_0(& adapter->fatal_error_handler_task.entry);
    #line 3288 
    adapter->fatal_error_handler_task.func = & fatal_error_task;
  }
  {
    #line 3290 
    struct lock_class_key __key_4;
    #line 3290 
    __init_work(& adapter->db_full_task,0);
    #line 3290 
    atomic_long_t __constr_expr_36 = {.counter = 137438953408LL};
    #line 3290 
    adapter->db_full_task.data = __constr_expr_36;
    #line 3290 
    lockdep_init_map(& adapter->db_full_task.lockdep_map,(char *)"(work_completion)",& __key_4,0);
    #line 3290 
    INIT_LIST_HEAD_0(& adapter->db_full_task.entry);
    #line 3290 
    adapter->db_full_task.func = & db_full_task;
  }
  {
    #line 3291 
    struct lock_class_key __key_5;
    #line 3291 
    __init_work(& adapter->db_empty_task,0);
    #line 3291 
    atomic_long_t __constr_expr_37 = {.counter = 137438953408LL};
    #line 3291 
    adapter->db_empty_task.data = __constr_expr_37;
    #line 3291 
    lockdep_init_map(& adapter->db_empty_task.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 3291 
    INIT_LIST_HEAD_0(& adapter->db_empty_task.entry);
    #line 3291 
    adapter->db_empty_task.func = & db_empty_task;
  }
  {
    #line 3292 
    struct lock_class_key __key_6;
    #line 3292 
    __init_work(& adapter->db_drop_task,0);
    #line 3292 
    atomic_long_t __constr_expr_38 = {.counter = 137438953408LL};
    #line 3292 
    adapter->db_drop_task.data = __constr_expr_38;
    #line 3292 
    lockdep_init_map(& adapter->db_drop_task.lockdep_map,(char *)"(work_completion)",& __key_6,0);
    #line 3292 
    INIT_LIST_HEAD_0(& adapter->db_drop_task.entry);
    #line 3292 
    adapter->db_drop_task.func = & db_drop_task;
  }
  {
    #line 3294 
    struct lock_class_key __key_7;
    #line 3294 
    __init_work(& adapter->adap_check_task.work,0);
    #line 3294 
    atomic_long_t __constr_expr_39 = {.counter = 137438953408LL};
    #line 3294 
    adapter->adap_check_task.work.data = __constr_expr_39;
    #line 3294 
    lockdep_init_map(& adapter->adap_check_task.work.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 3294 
    INIT_LIST_HEAD_0(& adapter->adap_check_task.work.entry);
    #line 3294 
    adapter->adap_check_task.work.func = & t3_adap_check_task;
  }
  {
    #line 3294 
    struct lock_class_key __key_8;
    #line 3294 
    init_timer_key(& adapter->adap_check_task.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&adapter->adap_check_task)->timer",& __key_8);
  }
  #line 3296 
  i = 0;
  #line 3296 
  while ((int)ai->nports0 + (int)ai->nports1 > i) {
    {
      #line 3297 
      struct net_device *netdev;
      #line 3299 
      netdev = cif_alloc_etherdev_mqs(3944,8U,8U);
      #line 3300 
      if (netdev == (struct net_device *)0) {
        #line 3301 
        err = -12;
        #line 3302 
        goto out_free_dev;
      }
      #line 3305 
      netdev->dev.parent = & pdev->dev;
      #line 3307 
      adapter->port[i] = netdev;
      #line 3308 
      pi = (struct port_info *)netdev_priv(netdev);
      #line 3309 
      pi->adapter = adapter;
      #line 3310 
      pi->port_id = (unsigned char)i;
      #line 3311 
      netif_carrier_off(netdev);
      #line 3312 
      netdev->irq = (int)pdev->irq;
      #line 3313 
      netdev->mem_start = (unsigned long)mmio_start;
      #line 3314 
      netdev->mem_end = (unsigned long)((mmio_start + mmio_len) + 18446744073709551615ULL);
      #line 3315 
      netdev->hw_features = 549755879683ULL;
      #line 3317 
      netdev->features = (netdev->features | netdev->hw_features) | 128ULL;
      #line 3319 
      netdev->vlan_features |= netdev->features & 1376307ULL;
      #line 3320 
      if (pci_using_dac != 0) 
                              #line 3321 
                              netdev->features |= 32ULL;
      #line 3323 
      netdev->netdev_ops = & cxgb_netdev_ops;
      #line 3324 
      netdev->ethtool_ops = & cxgb_ethtool_ops;
      #line 3325 
      netdev->min_mtu = 81U;
      #line 3326 
      netdev->max_mtu = 65535U;
      #line 3327 
      netdev->dev_port = (unsigned short)pi->port_id;
    }
    #line 3296 
    i ++;
  }
  #line 3330 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 3331 
  if (t3_prep_adapter(adapter,ai,1) < 0) {
    #line 3332 
    err = -19;
    #line 3333 
    goto out_free_dev;
  }
  #line 3342 
  i = 0;
  #line 3342 
  while (adapter->params.nports > (unsigned int)i) {
    #line 3343 
    err = cif_register_netdev(adapter->port[i]);
    #line 3344 
    if (err != 0) 
                  #line 3345 
                  _dev_warn(& pdev->dev,(char *)"cannot register net device %s, skipping\n",(char *)(& (adapter->port[i])->name));
    else {
      #line 3353 
      if (adapter->registered_device_map == 0UL) 
                                                 #line 3354 
                                                 adapter->name = (char *)(& (adapter->port[i])->name);
      #line 3356 
      __set_bit((long)i,& adapter->registered_device_map);
    }
    #line 3342 
    i ++;
  }
  #line 3359 
  if (adapter->registered_device_map == 0UL) {
    #line 3360 
    _dev_err(& pdev->dev,(char *)"could not register any net devices\n");
    #line 3361 
    goto out_free_dev;
  }
  #line 3364 
  i = 0;
  #line 3364 
  while (adapter->params.nports > (unsigned int)i) {
    #line 3365 
    cxgb3_init_iscsi_mac(adapter->port[i]);
    #line 3364 
    i ++;
  }
  #line 3368 
  t3_led_ready(adapter);
  #line 3370 
  if (is_offload(adapter) != 0) {
    #line 3371 
    __set_bit(15L,& adapter->registered_device_map);
    #line 3372 
    cxgb3_adapter_ofld(adapter);
  }
  #line 3376 
  if (msi > 1) {
    #line 3376 
    if (cxgb_enable_msix(adapter) == 0) 
                                        #line 3377 
                                        adapter->flags |= 4UL; else 
                                                                    #line 3376 
                                                                    goto _LAND;
  }
  else {
    #line 3376 
    _LAND: 
           #line 3378 
    ;
    #line 3378 
    if (msi > 0) {
      #line 3378 
      if (pci_enable_msi(pdev) == 0) 
                                     #line 3379 
                                     adapter->flags |= 2UL;
    }
  }
  #line 3381 
  set_nqsets(adapter);
  #line 3383 
  err = sysfs_create_group(& (adapter->port[0])->dev.kobj,& cxgb3_attr_group);
  #line 3385 
  if (err != 0) {
    #line 3386 
    _dev_err(& pdev->dev,(char *)"cannot create sysfs group\n");
    #line 3387 
    goto out_close_led;
  }
  #line 3390 
  print_port_info(adapter,ai);
  #line 3391 
  return 0;
  #line 3393 
  out_close_led: 
                 #line 3393 
  ;
  #line 3394 
  t3_set_reg_field(adapter,208U,1U,0U);
  #line 3396 
  out_free_dev: 
                #line 3396 
  ;
  #line 3397 
  iounmap(adapter->regs);
  #line 3398 
  i = ((int)ai->nports0 + (int)ai->nports1) + -1;
  #line 3398 
  while (i >= 0) {
    #line 3399 
    if (adapter->port[i] != (struct net_device *)0) 
                                                    #line 3400 
                                                    cif_free_netdev(adapter->port[i]);
    #line 3398 
    i --;
  }
  #line 3402 
  out_free_adapter_nofail: 
                           #line 3402 
  ;
  #line 3403 
  kfree_skb(adapter->nofail_skb);
  #line 3405 
  out_free_adapter: 
                    #line 3405 
  ;
  #line 3406 
  kfree((void *)adapter);
  #line 3408 
  out_release_regions: 
                       #line 3408 
  ;
  #line 3409 
  pci_release_regions(pdev);
  #line 3410 
  out_disable_device: 
                      #line 3410 
  ;
  #line 3411 
  pci_disable_device(pdev);
  #line 3412 
  out: 
       #line 3412 
  ;
  #line 3413 
  return err;
}

#line 3416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void remove_one(struct pci_dev *pdev)
{
  #line 3418 
  struct adapter *adapter = pci_get_drvdata(pdev);
  #line 3420 
  if (adapter != (struct adapter *)0) {
    #line 3421 
    int i;
    #line 3423 
    t3_sge_stop(adapter);
    #line 3424 
    sysfs_remove_group(& (adapter->port[0])->dev.kobj,& cxgb3_attr_group);
    #line 3427 
    if (is_offload(adapter) != 0) {
      #line 3428 
      cxgb3_adapter_unofld(adapter);
      #line 3429 
      if ((int)test_bit(15L,& adapter->open_device_map) != 0) 
                                                              #line 3431 
                                                              offload_close(& adapter->tdev);
    }
    #line 3434 
    i = 0;
    #line 3434 
    while (adapter->params.nports > (unsigned int)i) {
      #line 3435 
      if ((int)test_bit((long)i,& adapter->registered_device_map) != 0) 
        #line 3436 
        cif_unregister_netdev(adapter->port[i]);
      #line 3434 
      i ++;
    }
    #line 3438 
    t3_stop_sge_timers(adapter);
    #line 3439 
    t3_free_sge_resources(adapter);
    #line 3440 
    cxgb_disable_msi(adapter);
    #line 3442 
    i = 0;
    #line 3442 
    while (adapter->params.nports > (unsigned int)i) {
      #line 3443 
      if (adapter->port[i] != (struct net_device *)0) 
                                                      #line 3444 
                                                      cif_free_netdev(adapter->port[i]);
      #line 3442 
      i ++;
    }
    #line 3446 
    iounmap(adapter->regs);
    #line 3447 
    kfree_skb(adapter->nofail_skb);
    #line 3448 
    kfree((void *)adapter);
    #line 3449 
    pci_release_regions(pdev);
    #line 3450 
    pci_disable_device(pdev);
  }
  #line 3452 
  return;
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static struct pci_driver driver = {.name = (char *)"cxgb3", .id_table = (struct pci_device_id *)(& cxgb3_pci_tbl), .probe = & init_one, .remove = & remove_one, .err_handler = & t3_err_handler};
#line 3462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static int cxgb3_init_module(void)
{
  #line 3464 
  int ret;
  #line 3466 
  cxgb3_offload_init();
  #line 3468 
  ret = cif___pci_register_driver(& driver,& __this_module,(char *)"cxgb3");
  #line 3469 
  return ret;
}

#line 3472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/cxgb3_main.c"
static void cxgb3_cleanup_module(void)
{
  #line 3474 
  cif_pci_unregister_driver(& driver);
  #line 3475 
  if (cxgb3_wq != (struct workqueue_struct *)0) 
                                                #line 3476 
                                                destroy_workqueue(cxgb3_wq);
  #line 3477 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
struct pci_device_id (*emg_alias_cxgb3_pci_tbl)[14U] = & cxgb3_pci_tbl;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
struct pci_driver *emg_alias_driver = & driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 101 
#line 101 
_Bool emg_flush_work(struct work_struct *arg0);
#line 102 
#line 102 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 103 
#line 103 
void emg_free_netdev(struct net_device *arg0);
#line 105 
#line 105 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 106 
#line 106 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 108 
#line 108 
int emg_register_netdev(struct net_device *arg0);
#line 109 
#line 109 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 113 
#line 113 
void emg_unregister_netdev(struct net_device *arg0);
#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_cxgb3_cleanup_module(void)
{
  #line 118 
  cxgb3_cleanup_module();
  #line 119 
  return;
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_cxgb3_init_module(void)
{
  #line 122 
  return cxgb3_init_module();
}

#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_cxgb_change_mtu(struct net_device *arg0, int arg1)
{
  #line 126 
  return cxgb_change_mtu(arg0,arg1);
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_cxgb_close(struct net_device *arg0)
{
  #line 131 
  return cxgb_close(arg0);
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
unsigned long long emg_wrapper_cxgb_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 136 
  return cxgb_fix_features(arg0,arg1);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
struct net_device_stats *emg_wrapper_cxgb_get_stats(struct net_device *arg0)
{
  #line 141 
  return cxgb_get_stats(arg0);
}

#line 145  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_cxgb_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 146 
  return cxgb_ioctl(arg0,arg1,arg2);
}

#line 150  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_cxgb_netpoll(struct net_device *arg0)
{
  #line 151 
  cxgb_netpoll(arg0);
  #line 152 
  return;
}

#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_cxgb_open(struct net_device *arg0)
{
  #line 156 
  return cxgb_open(arg0);
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_cxgb_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 161 
  return cxgb_set_features(arg0,arg1);
}

#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_cxgb_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 166 
  return cxgb_set_mac_addr(arg0,arg1);
}

#line 170  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_cxgb_set_rxmode(struct net_device *arg0)
{
  #line 171 
  cxgb_set_rxmode(arg0);
  #line 172 
  return;
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 176 
  return get_coalesce(arg0,arg1);
}

#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 181 
  get_drvinfo(arg0,arg1);
  #line 182 
  return;
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 186 
  return get_eeprom(arg0,arg1,arg2);
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_get_eeprom_len(struct net_device *arg0)
{
  #line 191 
  return get_eeprom_len(arg0);
}

#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 196 
  return get_link_ksettings(arg0,arg1);
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
unsigned int emg_wrapper_get_msglevel(struct net_device *arg0)
{
  #line 201 
  return get_msglevel(arg0);
}

#line 205  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 206 
  get_pauseparam(arg0,arg1);
  #line 207 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 211 
  get_regs(arg0,arg1,arg2);
  #line 212 
  return;
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_get_regs_len(struct net_device *arg0)
{
  #line 216 
  return get_regs_len(arg0);
}

#line 220  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_sge_param(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 221 
  get_sge_param(arg0,arg1);
  #line 222 
  return;
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 226 
  return get_sset_count(arg0,arg1);
}

#line 230  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 231 
  get_stats(arg0,arg1,arg2);
  #line 232 
  return;
}

#line 235  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 236 
  get_strings(arg0,arg1,arg2);
  #line 237 
  return;
}

#line 240  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 241 
  get_wol(arg0,arg1);
  #line 242 
  return;
}

#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_init_one(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 246 
  return init_one(arg0,arg1);
}

#line 250  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_remove_one(struct pci_dev *arg0)
{
  #line 251 
  remove_one(arg0);
  #line 252 
  return;
}

#line 255  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_restart_autoneg(struct net_device *arg0)
{
  #line 256 
  return restart_autoneg(arg0);
}

#line 260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 261 
  return set_coalesce(arg0,arg1);
}

#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 266 
  return set_eeprom(arg0,arg1,arg2);
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 271 
  return set_link_ksettings(arg0,arg1);
}

#line 275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
void emg_wrapper_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 276 
  set_msglevel(arg0,arg1);
  #line 277 
  return;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 281 
  return set_pauseparam(arg0,arg1);
}

#line 285  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_set_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 286 
  return set_phys_id(arg0,arg1);
}

#line 290  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
int emg_wrapper_set_sge_param(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 291 
  return set_sge_param(arg0,arg1);
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
enum irqreturn emg_wrapper_t3_async_intr_handler(int arg0, void *arg1)
{
  #line 296 
  return t3_async_intr_handler(arg0,arg1);
}

#line 315  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 318 
  ldv_set_bit(nr,addr);
  #line 319 
  return;
}

#line 322  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 325 
  ldv_clear_bit(nr,addr);
  #line 326 
  return;
}

#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 332 
  ldv_init_list_head(list);
  #line 333 
  return;
}

#line 406  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 409 
  return ldv_ptr_err(ptr);
}

#line 413  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 416 
  return ldv_is_err(ptr);
}

#line 499  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool cif_queue_work_0(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 503 
  return emg_queue_work(wq,work);
}

#line 507  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 511 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 656 
  return ldv_kmalloc(size,flags);
}

#line 688  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 691 
  return ldv_kzalloc(size,flags);
}

#line 868  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 872 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 880 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 884  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 887 
  return ldv_request_firmware(fw);
}

#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 894 
  ldv_release_firmware(fw);
  #line 895 
  return;
}

#line 898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_irq_lock_of_sge_rspq_0(spinlock_t *lock)
{
  #line 901 
  ldv_spin_model_lock((char *)"lock_of_sge_rspq");
  #line 903 
  spin_lock_irq_1(lock);
  #line 904 
  return;
}

#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_irq_lock_of_sge_rspq_0(spinlock_t *lock)
{
  #line 910 
  ldv_spin_model_unlock((char *)"lock_of_sge_rspq");
  #line 912 
  spin_unlock_irq_1(lock);
  #line 913 
  return;
}

#line 916  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_irq_work_lock_of_adapter(spinlock_t *lock)
{
  #line 919 
  ldv_spin_model_lock((char *)"work_lock_of_adapter");
  #line 921 
  spin_lock_irq_1(lock);
  #line 922 
  return;
}

#line 925  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_irq_work_lock_of_adapter(spinlock_t *lock)
{
  #line 928 
  ldv_spin_model_unlock((char *)"work_lock_of_adapter");
  #line 930 
  spin_unlock_irq_1(lock);
  #line 931 
  return;
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static bool cif_flush_work(struct work_struct *work)
{
  #line 938 
  return emg_flush_work(work);
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_stats_lock_of_adapter_0(spinlock_t *lock)
{
  #line 945 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  #line 947 
  spin_lock_2(lock);
  #line 948 
  return;
}

#line 951  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_stats_lock_of_adapter_0(spinlock_t *lock)
{
  #line 954 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  #line 956 
  spin_unlock_2(lock);
  #line 957 
  return;
}

#line 960  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_lock_work_lock_of_adapter(spinlock_t *lock)
{
  #line 963 
  ldv_spin_model_lock((char *)"work_lock_of_adapter");
  #line 965 
  spin_lock_2(lock);
  #line 966 
  return;
}

#line 969  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_spin_unlock_work_lock_of_adapter(spinlock_t *lock)
{
  #line 972 
  ldv_spin_model_unlock((char *)"work_lock_of_adapter");
  #line 974 
  spin_unlock_2(lock);
  #line 975 
  return;
}

#line 978  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 982 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 990 
  return emg_register_netdev(dev);
}

#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 998 
  emg_free_netdev(dev);
  #line 999 
  return;
}

#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1006 
  emg_unregister_netdev(dev);
  #line 1007 
  return;
}

#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1014 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/0/concurrency safety/weaver/cxgb3_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1022 
  emg_pci_unregister_driver(dev);
  #line 1023 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/adapter.h"
__inline static int phy2portid(struct cphy *phy)
{
  #line 291 
  struct adapter *adap = phy->adapter;
  #line 292 
  struct port_info *port0 = adap2pinfo(adap,0);
  #line 294 
  return & port0->phy != phy;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int set_phy_regs(struct cphy *phy, struct reg_val *rv)
{
  #line 86 
  int err;
  #line 88 
  err = 0;
  #line 88 
  while ((unsigned int)rv->mmd_addr != 0U && err == 0) {
    #line 89 
    if ((unsigned int)rv->clear_bits == 65535U) 
                                                #line 90 
                                                err = t3_mdio_write(phy,(int)rv->mmd_addr,(int)rv->reg_addr,(unsigned int)rv->set_bits); else 
                                                                    #line 93 
                                                                    err = t3_mdio_change_bits(phy,(int)rv->mmd_addr,(int)rv->reg_addr,(unsigned int)rv->clear_bits,(unsigned int)rv->set_bits);
    #line 88 
    rv ++;
  }
  #line 97 
  return err;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static void ael100x_txon(struct cphy *phy)
{
  #line 102 
  int tmp;
  #line 102 
  if (phy->mdio.prtad == 0) 
                            #line 102 
                            tmp = 128; else 
                                            #line 102 
                                            tmp = 4;
  #line 102 
  int tx_on_gpio = tmp;
  #line 105 
  msleep(100U);
  #line 106 
  t3_set_reg_field(phy->adapter,208U,0U,(unsigned int)tx_on_gpio);
  #line 107 
  msleep(30U);
  #line 108 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael_i2c_rd(struct cphy *phy, int dev_addr, int word_addr)
{
  #line 115 
  int i;
  #line 115 
  int err;
  #line 116 
  unsigned int stat;
  #line 116 
  unsigned int data;
  #line 118 
  err = t3_mdio_write(phy,1,49930,(unsigned int)(((dev_addr << 8) | 256) | word_addr));
  #line 120 
  if (err != 0) 
                #line 121 
                return err;
  #line 123 
  i = 0;
  #line 123 
  while (i <= 199) {
    #line 124 
    msleep(1U);
    #line 125 
    err = t3_mdio_read(phy,1,49932,& stat);
    #line 126 
    if (err != 0) 
                  #line 127 
                  return err;
    #line 128 
    if ((stat & 3U) == 1U) {
      #line 129 
      err = t3_mdio_read(phy,1,49931,& data);
      #line 131 
      if (err != 0) 
                    #line 132 
                    return err;
      #line 133 
      return (int)(data >> 8);
    }
    #line 123 
    i ++;
  }
  #line 136 
  _dev_warn(& ((phy->adapter)->pdev)->dev,(char *)"PHY %u i2c read of dev.addr %#x.%#x timed out\n",phy->mdio.prtad,dev_addr,word_addr);
  #line 138 
  return -110;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael1002_power_down(struct cphy *phy, int enable)
{
  #line 143 
  int err;
  #line 145 
  err = t3_mdio_write(phy,1,9,(unsigned int)(enable != 0));
  #line 146 
  if (err == 0) 
                #line 147 
                err = mdio_set_flag(& phy->mdio,phy->mdio.prtad,1,(unsigned short)0,2048,(_Bool)(enable != 0));
  #line 150 
  return err;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael1002_reset(struct cphy *phy, int wait)
{
  #line 155 
  int err;
  #line 157 
  err = ael1002_power_down(phy,0);
  #line 157 
  if (err != 0) 
                #line 164 
                return err;
  else {
    #line 158 
    err = t3_mdio_write(phy,1,49154,1U);
    #line 157 
    if (err != 0) 
                  #line 164 
                  return err;
    else {
      #line 159 
      err = t3_mdio_write(phy,1,49169,0U);
      #line 158 
      if (err != 0) 
                    #line 164 
                    return err;
      else {
        #line 160 
        err = t3_mdio_write(phy,1,49170,0U);
        #line 159 
        if (err != 0) 
                      #line 164 
                      return err;
        else {
          #line 161 
          err = t3_mdio_write(phy,1,49173,24U);
          #line 160 
          if (err != 0) 
                        #line 164 
                        return err;
          else {
            #line 162 
            err = t3_mdio_change_bits(phy,1,49175,0U,32U);
            #line 161 
            if (err != 0) 
                          #line 164 
                          return err;
          }
        }
      }
    }
  }
  #line 165 
  return 0;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael1002_intr_noop(struct cphy *phy)
{
  #line 170 
  return 0;
}

#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int get_link_status_r(struct cphy *phy, int *link_ok, int *speed, int *duplex, int *fc)
{
  #line 179 
  if (link_ok != (int *)0) {
    #line 180 
    unsigned int stat0;
    #line 180 
    unsigned int stat1;
    #line 180 
    unsigned int stat2;
    #line 181 
    int err = t3_mdio_read(phy,1,10,& stat0);
    #line 184 
    if (err == 0) 
                  #line 185 
                  err = t3_mdio_read(phy,3,32,& stat1);
    #line 187 
    if (err == 0) 
                  #line 188 
                  err = t3_mdio_read(phy,4,24,& stat2);
    #line 190 
    if (err != 0) 
                  #line 191 
                  return err;
    #line 192 
    *link_ok = (int)((stat0 & stat1) & (stat2 >> 12)) & 1;
  }
  #line 194 
  if (speed != (int *)0) 
                         #line 195 
                         *speed = 10000;
  #line 196 
  if (duplex != (int *)0) 
                          #line 197 
                          *duplex = 1;
  #line 198 
  return 0;
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct cphy_ops ael1002_ops = {.reset = & ael1002_reset, .intr_enable = & ael1002_intr_noop, .intr_disable = & ael1002_intr_noop, .intr_clear = & ael1002_intr_noop, .intr_handler = & ael1002_intr_noop, .get_link_status = & get_link_status_r, .power_down = & ael1002_power_down, .mmds = 26U};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
int t3_ael1002_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 215 
  cphy_init(phy,adapter,phy_addr,& ael1002_ops,mdio_ops,5376U,(char *)"10GBASE-R");
  #line 218 
  ael100x_txon(phy);
  #line 219 
  return 0;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael1006_reset(struct cphy *phy, int wait)
{
  #line 224 
  return t3_phy_reset(phy,1,wait);
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct cphy_ops ael1006_ops = {.reset = & ael1006_reset, .intr_enable = & t3_phy_lasi_intr_enable, .intr_disable = & t3_phy_lasi_intr_disable, .intr_clear = & t3_phy_lasi_intr_clear, .intr_handler = & t3_phy_lasi_intr_handler, .get_link_status = & get_link_status_r, .power_down = & ael1002_power_down, .mmds = 26U};
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
int t3_ael1006_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 241 
  cphy_init(phy,adapter,phy_addr,& ael1006_ops,mdio_ops,5376U,(char *)"10GBASE-SR");
  #line 244 
  ael100x_txon(phy);
  #line 245 
  return 0;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2xxx_get_module_type(struct cphy *phy, int delay_ms)
{
  #line 253 
  int v;
  #line 255 
  if (delay_ms != 0) 
                     #line 256 
                     msleep((unsigned int)delay_ms);
  #line 259 
  v = ael_i2c_rd(phy,160,3);
  #line 260 
  if (v < 0) 
             #line 261 
             return v;
  #line 263 
  if (v == 16) 
               #line 264 
               return 1;
  #line 265 
  if (v == 32) 
               #line 266 
               return 2;
  #line 267 
  if (v == 64) 
               #line 268 
               return 3;
  #line 270 
  v = ael_i2c_rd(phy,160,6);
  #line 271 
  if (v < 0) 
             #line 272 
             return v;
  #line 273 
  if (v != 4) 
              #line 274 
              goto unknown;
  #line 276 
  v = ael_i2c_rd(phy,160,10);
  #line 277 
  if (v < 0) 
             #line 278 
             return v;
  #line 280 
  if ((v & 128) != 0) {
    #line 284 
    int tmp;
    #line 281 
    v = ael_i2c_rd(phy,160,18);
    #line 282 
    if (v < 0) 
               #line 283 
               return v;
    #line 284 
    if (v > 10) 
                #line 284 
                tmp = 5; else 
                              #line 284 
                              tmp = 4;
    #line 284 
    return tmp;
  }
  #line 286 
  unknown: 
           #line 286 
  ;
  #line 287 
  return 6;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_setup_sr_edc(struct cphy *phy)
{
  #line 302 
  int i;
  #line 302 
  int err;
  #line 295 
  struct reg_val regs[4U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49155U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)385U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49168U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)17546U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49226U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)20992U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 304 
  err = set_phy_regs(phy,(struct reg_val *)(& regs));
  #line 305 
  if (err != 0) 
                #line 306 
                return err;
  #line 308 
  msleep(50U);
  #line 310 
  if ((int)phy->priv != 1) 
                           #line 311 
                           err = t3_get_edc_fw(phy,0,1084);
  #line 313 
  if (err != 0) 
                #line 314 
                return err;
  #line 316 
  i = 0;
  #line 316 
  while ((unsigned int)i <= 541U && err == 0) {
    #line 317 
    err = t3_mdio_write(phy,1,(int)phy->phy_cache[i],(unsigned int)phy->phy_cache[i + 1]);
    #line 316 
    i += 2;
  }
  #line 320 
  if (err == 0) 
                #line 321 
                phy->priv = (short)1;
  #line 322 
  return err;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_setup_twinax_edc(struct cphy *phy, int modtype)
{
  #line 336 
  int i;
  #line 336 
  int err;
  #line 327 
  struct reg_val regs[2U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49226U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)23040U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 331 
  struct reg_val preemphasis[3U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49172U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)65046U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49173U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)40960U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 338 
  err = set_phy_regs(phy,(struct reg_val *)(& regs));
  #line 339 
  if (err == 0 && modtype == 5) 
                                #line 340 
                                err = set_phy_regs(phy,(struct reg_val *)(& preemphasis));
  #line 341 
  if (err != 0) 
                #line 342 
                return err;
  #line 344 
  msleep(50U);
  #line 346 
  if ((int)phy->priv != 2) 
                           #line 347 
                           err = t3_get_edc_fw(phy,1,1464);
  #line 349 
  if (err != 0) 
                #line 350 
                return err;
  #line 352 
  i = 0;
  #line 352 
  while ((unsigned int)i <= 731U && err == 0) {
    #line 353 
    err = t3_mdio_write(phy,1,(int)phy->phy_cache[i],(unsigned int)phy->phy_cache[i + 1]);
    #line 352 
    i += 2;
  }
  #line 356 
  if (err == 0) 
                #line 357 
                phy->priv = (short)2;
  #line 358 
  return err;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_get_module_type(struct cphy *phy, int delay_ms)
{
  #line 363 
  int v;
  #line 364 
  unsigned int stat;
  #line 366 
  v = t3_mdio_read(phy,1,49684,& stat);
  #line 367 
  if (v != 0) 
              #line 368 
              return v;
  #line 370 
  if ((stat & 256U) != 0U) 
                           #line 371 
                           return 0;
  #line 373 
  return ael2xxx_get_module_type(phy,delay_ms);
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_intr_enable(struct cphy *phy)
{
  #line 379 
  int tmp_1;
  #line 378 
  int err = t3_mdio_write(phy,1,49684,512U);
  #line 379 
  if (err == 0) 
                #line 379 
                tmp_1 = t3_phy_lasi_intr_enable(phy); else 
                                                           #line 379 
                                                           tmp_1 = err;
  #line 379 
  return tmp_1;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_intr_disable(struct cphy *phy)
{
  #line 385 
  int tmp_1;
  #line 384 
  int err = t3_mdio_write(phy,1,49684,256U);
  #line 385 
  if (err == 0) 
                #line 385 
                tmp_1 = t3_phy_lasi_intr_disable(phy); else 
                                                            #line 385 
                                                            tmp_1 = err;
  #line 385 
  return tmp_1;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_intr_clear(struct cphy *phy)
{
  #line 391 
  int tmp_1;
  #line 390 
  int err = t3_mdio_write(phy,1,49684,3328U);
  #line 391 
  if (err == 0) 
                #line 391 
                tmp_1 = t3_phy_lasi_intr_clear(phy); else 
                                                          #line 391 
                                                          tmp_1 = err;
  #line 391 
  return tmp_1;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_reset(struct cphy *phy, int wait)
{
  #line 412 
  int err;
  #line 413 
  unsigned int lasi_ctrl;
  #line 396 
  struct reg_val regs0[8U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49153U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)32U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49175U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)32U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49171U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)62273U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49680U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)32768U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49680U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)33024U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49680U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)32768U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49680U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)0U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 406 
  struct reg_val regs1[3U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)51712U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)128U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)51730U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)0U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 415 
  err = t3_mdio_read(phy,1,36866,& lasi_ctrl);
  #line 417 
  if (err != 0) 
                #line 418 
                return err;
  #line 420 
  err = t3_phy_reset(phy,1,0);
  #line 421 
  if (err != 0) 
                #line 422 
                return err;
  #line 424 
  msleep(125U);
  #line 425 
  phy->priv = (short)0;
  #line 426 
  err = set_phy_regs(phy,(struct reg_val *)(& regs0));
  #line 427 
  if (err != 0) 
                #line 428 
                return err;
  #line 430 
  msleep(50U);
  #line 432 
  err = ael2005_get_module_type(phy,0);
  #line 433 
  if (err < 0) 
               #line 434 
               return err;
  #line 435 
  phy->modtype = (unsigned char)err;
  #line 437 
  if ((unsigned int)err + 4294967292U <= 1U) 
                                             #line 438 
                                             err = ael2005_setup_twinax_edc(phy,err); else 
                                                                    #line 440 
                                                                    err = ael2005_setup_sr_edc(phy);
  #line 441 
  if (err != 0) 
                #line 442 
                return err;
  #line 444 
  err = set_phy_regs(phy,(struct reg_val *)(& regs1));
  #line 445 
  if (err != 0) 
                #line 446 
                return err;
  #line 449 
  if ((lasi_ctrl & 1U) != 0U) 
                              #line 450 
                              err = ael2005_intr_enable(phy);
  #line 451 
  return err;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2005_intr_handler(struct cphy *phy)
{
  #line 456 
  unsigned int stat;
  #line 457 
  int ret;
  #line 457 
  int edc_needed;
  #line 495 
  int tmp_0;
  #line 457 
  int cause = 0;
  #line 459 
  ret = t3_mdio_read(phy,1,49685,& stat);
  #line 460 
  if (ret != 0) 
                #line 461 
                return ret;
  #line 463 
  if ((stat & 4U) != 0U) {
    #line 464 
    ret = t3_mdio_write(phy,1,49684,3328U);
    #line 466 
    if (ret != 0) 
                  #line 467 
                  return ret;
    #line 470 
    ret = ael2005_get_module_type(phy,300);
    #line 471 
    if (ret < 0) 
                 #line 472 
                 return ret;
    #line 474 
    phy->modtype = (unsigned char)ret;
    #line 475 
    if (ret == 0) 
                  #line 476 
                  edc_needed = (int)phy->priv;
    else 
      #line 477 
      if ((unsigned int)ret + 4294967292U <= 1U) 
                                                 #line 479 
                                                 edc_needed = 2; else 
                                                                   #line 481 
                                                                   edc_needed = 1;
    #line 483 
    if ((int)phy->priv != edc_needed) {
      #line 485 
      int tmp;
      #line 484 
      ret = ael2005_reset(phy,0);
      #line 485 
      if (ret != 0) 
                    #line 485 
                    tmp = ret; else 
                                    #line 485 
                                    tmp = 4;
      #line 485 
      return tmp;
    }
    #line 487 
    cause = 4;
  }
  #line 490 
  ret = t3_phy_lasi_intr_handler(phy);
  #line 491 
  if (ret < 0) 
               #line 492 
               return ret;
  #line 494 
  ret |= cause;
  #line 495 
  if (ret != 0) 
                #line 495 
                tmp_0 = ret; else 
                                  #line 495 
                                  tmp_0 = 1;
  #line 495 
  return tmp_0;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct cphy_ops ael2005_ops = {.reset = & ael2005_reset, .intr_enable = & ael2005_intr_enable, .intr_disable = & ael2005_intr_disable, .intr_clear = & ael2005_intr_clear, .intr_handler = & ael2005_intr_handler, .get_link_status = & get_link_status_r, .power_down = & ael1002_power_down, .mmds = 26U};
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
int t3_ael2005_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 512 
  cphy_init(phy,adapter,phy_addr,& ael2005_ops,mdio_ops,16782592U,(char *)"10GBASE-R");
  #line 515 
  msleep(125U);
  #line 516 
  return t3_mdio_change_bits(phy,1,49175,0U,32U);
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_setup_sr_edc(struct cphy *phy)
{
  #line 537 
  int err;
  #line 525 
  struct reg_val regs[5U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)52225U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)18570U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)51995U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)512U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)51996U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)240U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)52230U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)224U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 539 
  err = set_phy_regs(phy,(struct reg_val *)(& regs));
  #line 540 
  msleep(50U);
  #line 541 
  if (err != 0) 
                #line 542 
                return err;
  #line 544 
  phy->priv = (short)1;
  #line 545 
  return 0;
}

#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_setup_twinax_edc(struct cphy *phy, int modtype)
{
  #line 572 
  int i;
  #line 572 
  int err;
  #line 554 
  struct reg_val uCclock40MHz[3U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)65320U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)16385U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)65322U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)2U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 561 
  struct reg_val uCclockActivate[2U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)53248U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)20992U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 567 
  struct reg_val uCactivate[3U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)53376U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)256U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)53394U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)0U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 575 
  err = set_phy_regs(phy,(struct reg_val *)(& uCclock40MHz));
  #line 576 
  msleep(500U);
  #line 577 
  if (err != 0) 
                #line 578 
                return err;
  #line 579 
  err = set_phy_regs(phy,(struct reg_val *)(& uCclockActivate));
  #line 580 
  msleep(500U);
  #line 581 
  if (err != 0) 
                #line 582 
                return err;
  #line 584 
  if ((int)phy->priv != 2) 
                           #line 585 
                           err = t3_get_edc_fw(phy,2,1628);
  #line 587 
  if (err != 0) 
                #line 588 
                return err;
  #line 590 
  i = 0;
  #line 590 
  while ((unsigned int)i <= 813U && err == 0) {
    #line 591 
    err = t3_mdio_write(phy,1,(int)phy->phy_cache[i],(unsigned int)phy->phy_cache[i + 1]);
    #line 590 
    i += 2;
  }
  #line 595 
  err = set_phy_regs(phy,(struct reg_val *)(& uCactivate));
  #line 596 
  if (err == 0) 
                #line 597 
                phy->priv = (short)2;
  #line 598 
  return err;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_get_module_type(struct cphy *phy, int delay_ms)
{
  #line 606 
  int v;
  #line 607 
  unsigned int stat;
  #line 609 
  v = t3_mdio_read(phy,1,49420,& stat);
  #line 610 
  if (v != 0) 
              #line 611 
              return v;
  #line 613 
  if ((stat & 16U) != 0U) 
                          #line 615 
                          return 0;
  #line 618 
  return ael2xxx_get_module_type(phy,delay_ms);
}

#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_intr_enable(struct cphy *phy)
{
  #line 641 
  int err;
  #line 627 
  struct reg_val regs[4U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49426U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)4U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49416U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)2048U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49416U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)32U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 641 
  int link_ok = 0;
  #line 644 
  err = set_phy_regs(phy,(struct reg_val *)(& regs));
  #line 645 
  if (err != 0) 
                #line 646 
                return err;
  #line 648 
  err = get_link_status_r(phy,& link_ok,(int *)0,(int *)0,(int *)0);
  #line 649 
  if (err != 0) 
                #line 650 
                return err;
  #line 651 
  if (link_ok != 0) {
    #line 652 
    ;
    #line 652 
    t3_link_changed(phy->adapter,phy2portid(phy));
  }
  #line 655 
  err = t3_phy_lasi_intr_enable(phy);
  #line 656 
  if (err != 0) 
                #line 657 
                return err;
  #line 659 
  return 0;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_intr_disable(struct cphy *phy)
{
  #line 679 
  int err;
  #line 667 
  struct reg_val regs[3U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49416U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)2816U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49416U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)16U}, {.mmd_addr = (unsigned short)0U, .reg_addr = (unsigned short)0U, .clear_bits = (unsigned short)0U, .set_bits = (unsigned short)0U}};
  #line 682 
  err = set_phy_regs(phy,(struct reg_val *)(& regs));
  #line 683 
  if (err != 0) 
                #line 684 
                return err;
  #line 686 
  return t3_phy_lasi_intr_disable(phy);
}

#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_intr_clear(struct cphy *phy)
{
  #line 699 
  unsigned int stat;
  #line 701 
  int tmp_1;
  #line 700 
  int err = t3_mdio_read(phy,1,49411,& stat);
  #line 701 
  if (err == 0) 
                #line 701 
                tmp_1 = t3_phy_lasi_intr_clear(phy); else 
                                                          #line 701 
                                                          tmp_1 = err;
  #line 701 
  return tmp_1;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct reg_val ael2020_reset_regs[6U] = {{.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)49155U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)12545U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)52544U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)1U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)65282U, .clear_bits = (unsigned short)65535U, .set_bits = (unsigned short)35U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)65283U, .clear_bits = (unsigned short)65535U}, {.mmd_addr = (unsigned short)1U, .reg_addr = (unsigned short)65284U, .clear_bits = (unsigned short)65535U}};
#line 722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_reset(struct cphy *phy, int wait)
{
  #line 724 
  int err;
  #line 725 
  unsigned int lasi_ctrl;
  #line 728 
  err = t3_mdio_read(phy,1,36866,& lasi_ctrl);
  #line 730 
  if (err != 0) 
                #line 731 
                return err;
  #line 733 
  err = t3_phy_reset(phy,1,125);
  #line 734 
  if (err != 0) 
                #line 735 
                return err;
  #line 736 
  msleep(100U);
  #line 739 
  phy->priv = (short)0;
  #line 740 
  err = set_phy_regs(phy,(struct reg_val *)(& ael2020_reset_regs));
  #line 741 
  if (err != 0) 
                #line 742 
                return err;
  #line 745 
  err = ael2020_get_module_type(phy,0);
  #line 746 
  if (err < 0) 
               #line 747 
               return err;
  #line 748 
  phy->modtype = (unsigned char)err;
  #line 749 
  if ((unsigned int)err + 4294967292U <= 1U) 
                                             #line 750 
                                             err = ael2020_setup_twinax_edc(phy,err); else 
                                                                    #line 752 
                                                                    err = ael2020_setup_sr_edc(phy);
  #line 753 
  if (err != 0) 
                #line 754 
                return err;
  #line 757 
  if ((lasi_ctrl & 1U) != 0U) 
                              #line 758 
                              err = ael2005_intr_enable(phy);
  #line 759 
  return err;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int ael2020_intr_handler(struct cphy *phy)
{
  #line 767 
  unsigned int stat;
  #line 768 
  int ret;
  #line 768 
  int edc_needed;
  #line 801 
  int tmp_0;
  #line 768 
  int cause = 0;
  #line 770 
  ret = t3_mdio_read(phy,1,49411,& stat);
  #line 771 
  if (ret != 0) 
                #line 772 
                return ret;
  #line 774 
  if ((stat & 2U) != 0U) {
    #line 776 
    ret = ael2020_get_module_type(phy,300);
    #line 777 
    if (ret < 0) 
                 #line 778 
                 return ret;
    #line 780 
    phy->modtype = (unsigned char)ret;
    #line 781 
    if (ret == 0) 
                  #line 782 
                  edc_needed = (int)phy->priv;
    else 
      #line 783 
      if ((unsigned int)ret + 4294967292U <= 1U) 
                                                 #line 785 
                                                 edc_needed = 2; else 
                                                                   #line 787 
                                                                   edc_needed = 1;
    #line 789 
    if ((int)phy->priv != edc_needed) {
      #line 791 
      int tmp;
      #line 790 
      ret = ael2020_reset(phy,0);
      #line 791 
      if (ret != 0) 
                    #line 791 
                    tmp = ret; else 
                                    #line 791 
                                    tmp = 4;
      #line 791 
      return tmp;
    }
    #line 793 
    cause = 4;
  }
  #line 796 
  ret = t3_phy_lasi_intr_handler(phy);
  #line 797 
  if (ret < 0) 
               #line 798 
               return ret;
  #line 800 
  ret |= cause;
  #line 801 
  if (ret != 0) 
                #line 801 
                tmp_0 = ret; else 
                                  #line 801 
                                  tmp_0 = 1;
  #line 801 
  return tmp_0;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct cphy_ops ael2020_ops = {.reset = & ael2020_reset, .intr_enable = & ael2020_intr_enable, .intr_disable = & ael2020_intr_disable, .intr_clear = & ael2020_intr_clear, .intr_handler = & ael2020_intr_handler, .get_link_status = & get_link_status_r, .power_down = & ael1002_power_down, .mmds = 26U};
#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
int t3_ael2020_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 818 
  int err;
  #line 820 
  cphy_init(phy,adapter,phy_addr,& ael2020_ops,mdio_ops,16782592U,(char *)"10GBASE-R");
  #line 823 
  msleep(125U);
  #line 825 
  err = set_phy_regs(phy,(struct reg_val *)(& ael2020_reset_regs));
  #line 826 
  if (err != 0) 
                #line 827 
                return err;
  #line 828 
  return 0;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int get_link_status_x(struct cphy *phy, int *link_ok, int *speed, int *duplex, int *fc)
{
  #line 837 
  if (link_ok != (int *)0) {
    #line 838 
    unsigned int stat0;
    #line 838 
    unsigned int stat1;
    #line 838 
    unsigned int stat2;
    #line 839 
    int err = t3_mdio_read(phy,1,10,& stat0);
    #line 842 
    if (err == 0) 
                  #line 843 
                  err = t3_mdio_read(phy,3,24,& stat1);
    #line 845 
    if (err == 0) 
                  #line 846 
                  err = t3_mdio_read(phy,4,24,& stat2);
    #line 848 
    if (err != 0) 
                  #line 849 
                  return err;
    #line 850 
    *link_ok = (int)(((stat1 >> 12) & stat0) & (stat2 >> 12)) & 1;
  }
  #line 852 
  if (speed != (int *)0) 
                         #line 853 
                         *speed = 10000;
  #line 854 
  if (duplex != (int *)0) 
                          #line 855 
                          *duplex = 1;
  #line 856 
  return 0;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct cphy_ops qt2045_ops = {.reset = & ael1006_reset, .intr_enable = & t3_phy_lasi_intr_enable, .intr_disable = & t3_phy_lasi_intr_disable, .intr_clear = & t3_phy_lasi_intr_clear, .intr_handler = & t3_phy_lasi_intr_handler, .get_link_status = & get_link_status_x, .power_down = & ael1002_power_down, .mmds = 26U};
#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
int t3_qt2045_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 873 
  unsigned int stat;
  #line 875 
  cphy_init(phy,adapter,phy_addr,& qt2045_ops,mdio_ops,4480U,(char *)"10GBASE-CX4");
  #line 883 
  if (phy_addr == 0) {
    #line 883 
    if (t3_mdio_read(phy,1,1,& stat) == 0) 
      #line 884 
      if (stat == 65535U) 
                          #line 886 
                          phy->mdio.prtad = 1;
  }
  #line 887 
  return 0;
}

#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int xaui_direct_reset(struct cphy *phy, int wait)
{
  #line 892 
  return 0;
}

#line 895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int xaui_direct_get_link_status(struct cphy *phy, int *link_ok, int *speed, int *duplex, int *fc)
{
  #line 898 
  if (link_ok != (int *)0) {
    #line 899 
    unsigned int status;
    #line 900 
    int prtad = phy->mdio.prtad;
    #line 902 
    status = ((t3_read_reg(phy->adapter,(unsigned int)(prtad * 512 + 2288)) | t3_read_reg(phy->adapter,(unsigned int)(prtad * 512 + 2292))) | t3_read_reg(phy->adapter,(unsigned int)(prtad * 512 + 2296))) | t3_read_reg(phy->adapter,(unsigned int)(prtad * 512 + 2300));
    #line 910 
    *link_ok = (status & 1U) == 0U;
  }
  #line 912 
  if (speed != (int *)0) 
                         #line 913 
                         *speed = 10000;
  #line 914 
  if (duplex != (int *)0) 
                          #line 915 
                          *duplex = 1;
  #line 916 
  return 0;
}

#line 919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static int xaui_direct_power_down(struct cphy *phy, int enable)
{
  #line 921 
  return 0;
}

#line 924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
static struct cphy_ops xaui_direct_ops = {.reset = & xaui_direct_reset, .intr_enable = & ael1002_intr_noop, .intr_disable = & ael1002_intr_noop, .intr_clear = & ael1002_intr_noop, .intr_handler = & ael1002_intr_noop, .get_link_status = & xaui_direct_get_link_status, .power_down = & xaui_direct_power_down};
#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb3/ael1002.c"
int t3_xaui_direct_phy_prep(struct cphy *phy, struct adapter *adapter, int phy_addr, struct mdio_ops *mdio_ops)
{
  #line 937 
  cphy_init(phy,adapter,phy_addr,& xaui_direct_ops,mdio_ops,4480U,(char *)"10GBASE-CX4");
  #line 940 
  return 0;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 92  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
#line 202 
void emg_dispatch_deregister_17(struct net_device *arg0);
#line 93 
#line 168 
void emg_dispatch_deregister_9(struct pci_driver *arg0);
#line 94 
#line 139 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 95 
#line 157 
void emg_dispatch_instance_register_8(struct timer_list *arg0);
#line 96 
#line 148 
void emg_dispatch_irq_deregister_6(int arg0);
#line 97 
#line 188 
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 98 
#line 177 
void emg_dispatch_register_12(struct net_device *arg0);
#line 99 
#line 128 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 100 
#line 1346 
void *emg_entry_point_insmod(void *arg0);
#line 104 
#line 211 
void *emg_interrupt_interrupt_scenario_t3_async_intr_handler(void *arg0);
#line 106 
#line 274 
void *emg_net_random_allocationless_scenario_get_coalesce(void *arg0);
#line 107 
#line 713 
void *emg_pci_pci_scenario_driver(void *arg0);
#line 116 
#line 891 
void *emg_timer_timer_scenario_3(void *arg0);
#line 118 
#line 1375 
int main(void);
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 129 
  int ret;
  #line 130 
  struct emg_struct_pci_scenario_driver_20 *cf_arg_20;
  #line 131 
  cf_arg_20 = (struct emg_struct_pci_scenario_driver_20 *)ldv_xmalloc(16UL);
  #line 132 
  cf_arg_20->arg0 = arg0;
  #line 133 
  ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_pci_pci_scenario_driver,(void *)cf_arg_20);
  #line 134 
  __VERIFIER_assume(ret == 0);
  #line 135 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 140 
  int ret;
  #line 141 
  struct emg_struct_timer_scenario_3_21 *cf_arg_21;
  #line 142 
  ret = pthread_join(emg_thread_21,(void **)0);
  #line 143 
  __VERIFIER_assume(ret == 0);
  #line 144 
  return;
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 149 
  int ret;
  #line 150 
  struct emg_struct_free_irq_6 *cf_arg_18;
  #line 151 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 152 
  __VERIFIER_assume(ret == 0);
  #line 153 
  return;
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_8(struct timer_list *arg0)
{
  #line 158 
  int ret;
  #line 159 
  struct emg_struct_timer_scenario_3_21 *cf_arg_21;
  #line 160 
  cf_arg_21 = (struct emg_struct_timer_scenario_3_21 *)ldv_xmalloc(16UL);
  #line 161 
  cf_arg_21->arg0 = arg0;
  #line 162 
  ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_timer_timer_scenario_3,(void *)cf_arg_21);
  #line 163 
  __VERIFIER_assume(ret == 0);
  #line 164 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_9(struct pci_driver *arg0)
{
  #line 169 
  int ret;
  #line 170 
  struct emg_struct_pci_scenario_driver_20 *cf_arg_20;
  #line 171 
  ret = pthread_join(emg_thread_20,(void **)0);
  #line 172 
  __VERIFIER_assume(ret == 0);
  #line 173 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_12(struct net_device *arg0)
{
  #line 178 
  int ret;
  #line 179 
  struct emg_struct_random_allocationless_scenario_get_coalesce_19 *cf_arg_19;
  #line 180 
  cf_arg_19 = (struct emg_struct_random_allocationless_scenario_get_coalesce_19 *)ldv_xmalloc(16UL);
  #line 181 
  cf_arg_19->arg0 = arg0;
  #line 182 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_get_coalesce,(void *)cf_arg_19);
  #line 183 
  __VERIFIER_assume(ret == 0);
  #line 184 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 189 
  int ret;
  #line 190 
  struct emg_struct_interrupt_scenario_t3_async_intr_handler_18 *cf_arg_18;
  #line 191 
  cf_arg_18 = (struct emg_struct_interrupt_scenario_t3_async_intr_handler_18 *)ldv_xmalloc(40UL);
  #line 192 
  cf_arg_18->arg0 = arg0;
  #line 193 
  cf_arg_18->arg1 = arg1;
  #line 194 
  cf_arg_18->arg2 = arg2;
  #line 195 
  cf_arg_18->arg3 = arg3;
  #line 196 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_t3_async_intr_handler,(void *)cf_arg_18);
  #line 197 
  __VERIFIER_assume(ret == 0);
  #line 198 
  return;
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_17(struct net_device *arg0)
{
  #line 203 
  int ret;
  #line 204 
  struct emg_struct_random_allocationless_scenario_get_coalesce_19 *cf_arg_19;
  #line 205 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 206 
  __VERIFIER_assume(ret == 0);
  #line 207 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_t3_async_intr_handler(void *arg0)
{
  #line 214 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 215 
  void *emg_18_data;
  #line 216 
  int emg_18_line;
  #line 217 
  enum irqreturn emg_18_ret_val;
  #line 218 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 220 
  struct emg_struct_interrupt_scenario_t3_async_intr_handler_18 *data = (struct emg_struct_interrupt_scenario_t3_async_intr_handler_18 *)arg0;
  #line 223 
  emg_18_callback = & emg_wrapper_t3_async_intr_handler;
  #line 226 
  if (data != (struct emg_struct_interrupt_scenario_t3_async_intr_handler_18 *)0) {
    #line 227 
    emg_18_line = data->arg0;
    #line 228 
    emg_18_callback = data->arg1;
    #line 229 
    emg_18_thread = data->arg2;
    #line 230 
    emg_18_data = data->arg3;
    #line 231 
    ldv_free((void *)data);
  }
  #line 237 
  ldv_switch_to_interrupt_context();
  #line 241 
  emg_18_ret_val = emg_wrapper_t3_async_intr_handler(emg_18_line,emg_18_data);
  #line 246 
  ldv_switch_to_process_context();
  #line 249 
  if (ldv_undef_int() != 0) {
    #line 251 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 255 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 256 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 261 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 269 
  return (void *)0;
}

#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_get_coalesce(void *arg0)
{
  #line 277 
  struct net_device *emg_19_container;
  #line 278 
  struct sk_buff *emg_19_emg_param_0_21;
  #line 279 
  struct ethtool_coalesce *emg_19_emg_param_1_0;
  #line 280 
  struct ethtool_drvinfo *emg_19_emg_param_1_1;
  #line 281 
  struct ethtool_ringparam *emg_19_emg_param_1_10;
  #line 282 
  int emg_19_emg_param_1_11;
  #line 283 
  unsigned int emg_19_emg_param_1_12;
  #line 284 
  struct ethtool_wolinfo *emg_19_emg_param_1_14;
  #line 285 
  int emg_19_emg_param_1_15;
  #line 286 
  struct ifreq *emg_19_emg_param_1_16;
  #line 287 
  unsigned long long emg_19_emg_param_1_18;
  #line 288 
  unsigned long long emg_19_emg_param_1_19;
  #line 289 
  struct ethtool_eeprom *emg_19_emg_param_1_2;
  #line 290 
  void *emg_19_emg_param_1_20;
  #line 291 
  struct ethtool_coalesce *emg_19_emg_param_1_22;
  #line 292 
  struct ethtool_eeprom *emg_19_emg_param_1_23;
  #line 293 
  struct ethtool_link_ksettings *emg_19_emg_param_1_25;
  #line 294 
  unsigned int emg_19_emg_param_1_26;
  #line 295 
  struct ethtool_pauseparam *emg_19_emg_param_1_27;
  #line 296 
  enum ethtool_phys_id_state *emg_19_emg_param_1_28;
  #line 297 
  struct ethtool_ringparam *emg_19_emg_param_1_29;
  #line 298 
  struct ethtool_stats *emg_19_emg_param_1_4;
  #line 299 
  struct ethtool_link_ksettings *emg_19_emg_param_1_6;
  #line 300 
  struct ethtool_pauseparam *emg_19_emg_param_1_7;
  #line 301 
  struct ethtool_regs *emg_19_emg_param_1_8;
  #line 302 
  unsigned char *emg_19_emg_param_2_13;
  #line 303 
  int emg_19_emg_param_2_17;
  #line 304 
  unsigned char *emg_19_emg_param_2_24;
  #line 305 
  unsigned char *emg_19_emg_param_2_3;
  #line 306 
  unsigned long long *emg_19_emg_param_2_5;
  #line 307 
  void *emg_19_emg_param_2_9;
  #line 308 
  int emg_repeat_cnt_call_19 = 1;
  #line 310 
  struct emg_struct_random_allocationless_scenario_get_coalesce_19 *data = (struct emg_struct_random_allocationless_scenario_get_coalesce_19 *)arg0;
  #line 315 
  if (data != (struct emg_struct_random_allocationless_scenario_get_coalesce_19 *)0) {
    #line 316 
    emg_19_container = data->arg0;
    #line 317 
    ldv_free((void *)data);
  }
  #line 322 
  goto emg_call_19;
  #line 326 
  return (void *)0;
  #line 329 
  emg_call_19: 
               #line 329 
  ;
  #line 330 
  switch (ldv_undef_int()) {
    #line 331 
    case 0: 
            #line 331 
    ;
    #line 333 
    emg_19_emg_param_1_29 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 333 
    emg_19_emg_param_1_29 = emg_19_emg_param_1_29;
    #line 337 
    emg_wrapper_set_sge_param(emg_19_container,emg_19_emg_param_1_29);
    #line 341 
    ldv_free((void *)emg_19_emg_param_1_29);
    #line 343 
    break;
    #line 345 
    case 1: 
            #line 345 
    ;
    #line 347 
    emg_19_emg_param_1_28 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 347 
    emg_19_emg_param_1_28 = emg_19_emg_param_1_28;
    #line 351 
    emg_wrapper_set_phys_id(emg_19_container,*emg_19_emg_param_1_28);
    #line 355 
    ldv_free((void *)emg_19_emg_param_1_28);
    #line 357 
    break;
    #line 359 
    case 2: 
            #line 359 
    ;
    #line 361 
    emg_19_emg_param_1_27 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 361 
    emg_19_emg_param_1_27 = emg_19_emg_param_1_27;
    #line 365 
    emg_wrapper_set_pauseparam(emg_19_container,emg_19_emg_param_1_27);
    #line 369 
    ldv_free((void *)emg_19_emg_param_1_27);
    #line 371 
    break;
    #line 373 
    case 3: 
            #line 373 
    ;
    #line 375 
    emg_wrapper_set_msglevel(emg_19_container,emg_19_emg_param_1_26);
    #line 377 
    break;
    #line 379 
    case 4: 
            #line 379 
    ;
    #line 381 
    emg_19_emg_param_1_25 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 381 
    emg_19_emg_param_1_25 = emg_19_emg_param_1_25;
    #line 385 
    emg_wrapper_set_link_ksettings(emg_19_container,emg_19_emg_param_1_25);
    #line 389 
    ldv_free((void *)emg_19_emg_param_1_25);
    #line 391 
    break;
    #line 393 
    case 5: 
            #line 393 
    ;
    #line 395 
    emg_19_emg_param_1_23 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 395 
    emg_19_emg_param_1_23 = emg_19_emg_param_1_23;
    #line 396 
    emg_19_emg_param_2_24 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 396 
    emg_19_emg_param_2_24 = emg_19_emg_param_2_24;
    #line 400 
    emg_wrapper_set_eeprom(emg_19_container,emg_19_emg_param_1_23,emg_19_emg_param_2_24);
    #line 404 
    ldv_free((void *)emg_19_emg_param_1_23);
    #line 405 
    ldv_free((void *)emg_19_emg_param_2_24);
    #line 407 
    break;
    #line 409 
    case 6: 
            #line 409 
    ;
    #line 411 
    emg_19_emg_param_1_22 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 411 
    emg_19_emg_param_1_22 = emg_19_emg_param_1_22;
    #line 415 
    emg_wrapper_set_coalesce(emg_19_container,emg_19_emg_param_1_22);
    #line 419 
    ldv_free((void *)emg_19_emg_param_1_22);
    #line 421 
    break;
    #line 423 
    case 7: 
            #line 423 
    ;
    #line 425 
    emg_wrapper_restart_autoneg(emg_19_container);
    #line 427 
    break;
    #line 429 
    case 8: 
            #line 429 
    ;
    #line 431 
    (*emg_alias_eth_validate_addr)(emg_19_container);
    #line 433 
    break;
    #line 435 
    case 9: 
            #line 435 
    ;
    #line 437 
    emg_19_emg_param_0_21 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 437 
    emg_19_emg_param_0_21 = emg_19_emg_param_0_21;
    #line 441 
    t3_eth_xmit(emg_19_emg_param_0_21,emg_19_container);
    #line 445 
    ldv_free((void *)emg_19_emg_param_0_21);
    #line 447 
    break;
    #line 449 
    case 10: 
             #line 449 
    ;
    #line 451 
    emg_wrapper_cxgb_set_rxmode(emg_19_container);
    #line 453 
    break;
    #line 455 
    case 11: 
             #line 455 
    ;
    #line 457 
    emg_19_emg_param_1_20 = ldv_xmalloc_unknown_size(0UL);
    #line 457 
    emg_19_emg_param_1_20 = emg_19_emg_param_1_20;
    #line 461 
    emg_wrapper_cxgb_set_mac_addr(emg_19_container,emg_19_emg_param_1_20);
    #line 465 
    ldv_free(emg_19_emg_param_1_20);
    #line 467 
    break;
    #line 469 
    case 12: 
             #line 469 
    ;
    #line 471 
    emg_wrapper_cxgb_set_features(emg_19_container,emg_19_emg_param_1_19);
    #line 473 
    break;
    #line 475 
    case 13: 
             #line 475 
    ;
    #line 477 
    emg_wrapper_cxgb_netpoll(emg_19_container);
    #line 479 
    break;
    #line 481 
    case 14: 
             #line 481 
    ;
    #line 483 
    emg_wrapper_cxgb_get_stats(emg_19_container);
    #line 485 
    break;
    #line 487 
    case 15: 
             #line 487 
    ;
    #line 489 
    emg_wrapper_cxgb_fix_features(emg_19_container,emg_19_emg_param_1_18);
    #line 491 
    break;
    #line 493 
    case 16: 
             #line 493 
    ;
    #line 495 
    emg_19_emg_param_1_16 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 495 
    emg_19_emg_param_1_16 = emg_19_emg_param_1_16;
    #line 499 
    emg_wrapper_cxgb_ioctl(emg_19_container,emg_19_emg_param_1_16,emg_19_emg_param_2_17);
    #line 503 
    ldv_free((void *)emg_19_emg_param_1_16);
    #line 505 
    break;
    #line 507 
    case 17: 
             #line 507 
    ;
    #line 509 
    emg_wrapper_cxgb_change_mtu(emg_19_container,emg_19_emg_param_1_15);
    #line 511 
    break;
    #line 513 
    case 18: 
             #line 513 
    ;
    #line 515 
    emg_19_emg_param_1_14 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 515 
    emg_19_emg_param_1_14 = emg_19_emg_param_1_14;
    #line 519 
    emg_wrapper_get_wol(emg_19_container,emg_19_emg_param_1_14);
    #line 523 
    ldv_free((void *)emg_19_emg_param_1_14);
    #line 525 
    break;
    #line 527 
    case 19: 
             #line 527 
    ;
    #line 529 
    emg_19_emg_param_2_13 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 529 
    emg_19_emg_param_2_13 = emg_19_emg_param_2_13;
    #line 533 
    emg_wrapper_get_strings(emg_19_container,emg_19_emg_param_1_12,emg_19_emg_param_2_13);
    #line 537 
    ldv_free((void *)emg_19_emg_param_2_13);
    #line 539 
    break;
    #line 541 
    case 20: 
             #line 541 
    ;
    #line 543 
    emg_wrapper_get_sset_count(emg_19_container,emg_19_emg_param_1_11);
    #line 545 
    break;
    #line 547 
    case 21: 
             #line 547 
    ;
    #line 549 
    emg_19_emg_param_1_10 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 549 
    emg_19_emg_param_1_10 = emg_19_emg_param_1_10;
    #line 553 
    emg_wrapper_get_sge_param(emg_19_container,emg_19_emg_param_1_10);
    #line 557 
    ldv_free((void *)emg_19_emg_param_1_10);
    #line 559 
    break;
    #line 561 
    case 22: 
             #line 561 
    ;
    #line 563 
    emg_wrapper_get_regs_len(emg_19_container);
    #line 565 
    break;
    #line 567 
    case 23: 
             #line 567 
    ;
    #line 569 
    emg_19_emg_param_1_8 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 569 
    emg_19_emg_param_1_8 = emg_19_emg_param_1_8;
    #line 570 
    emg_19_emg_param_2_9 = ldv_xmalloc_unknown_size(0UL);
    #line 570 
    emg_19_emg_param_2_9 = emg_19_emg_param_2_9;
    #line 574 
    emg_wrapper_get_regs(emg_19_container,emg_19_emg_param_1_8,emg_19_emg_param_2_9);
    #line 578 
    ldv_free((void *)emg_19_emg_param_1_8);
    #line 579 
    ldv_free(emg_19_emg_param_2_9);
    #line 581 
    break;
    #line 583 
    case 24: 
             #line 583 
    ;
    #line 585 
    emg_19_emg_param_1_7 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 585 
    emg_19_emg_param_1_7 = emg_19_emg_param_1_7;
    #line 589 
    emg_wrapper_get_pauseparam(emg_19_container,emg_19_emg_param_1_7);
    #line 593 
    ldv_free((void *)emg_19_emg_param_1_7);
    #line 595 
    break;
    #line 597 
    case 25: 
             #line 597 
    ;
    #line 599 
    emg_wrapper_get_msglevel(emg_19_container);
    #line 601 
    break;
    #line 603 
    case 26: 
             #line 603 
    ;
    #line 605 
    emg_19_emg_param_1_6 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 605 
    emg_19_emg_param_1_6 = emg_19_emg_param_1_6;
    #line 609 
    emg_wrapper_get_link_ksettings(emg_19_container,emg_19_emg_param_1_6);
    #line 613 
    ldv_free((void *)emg_19_emg_param_1_6);
    #line 615 
    break;
    #line 617 
    case 27: 
             #line 617 
    ;
    #line 619 
    ethtool_op_get_link(emg_19_container);
    #line 621 
    break;
    #line 623 
    case 28: 
             #line 623 
    ;
    #line 625 
    emg_19_emg_param_1_4 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 625 
    emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
    #line 626 
    emg_19_emg_param_2_5 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 626 
    emg_19_emg_param_2_5 = emg_19_emg_param_2_5;
    #line 630 
    emg_wrapper_get_stats(emg_19_container,emg_19_emg_param_1_4,emg_19_emg_param_2_5);
    #line 634 
    ldv_free((void *)emg_19_emg_param_1_4);
    #line 635 
    ldv_free((void *)emg_19_emg_param_2_5);
    #line 637 
    break;
    #line 639 
    case 29: 
             #line 639 
    ;
    #line 641 
    emg_wrapper_get_eeprom_len(emg_19_container);
    #line 643 
    break;
    #line 645 
    case 30: 
             #line 645 
    ;
    #line 647 
    emg_19_emg_param_1_2 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 647 
    emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
    #line 648 
    emg_19_emg_param_2_3 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 648 
    emg_19_emg_param_2_3 = emg_19_emg_param_2_3;
    #line 652 
    emg_wrapper_get_eeprom(emg_19_container,emg_19_emg_param_1_2,emg_19_emg_param_2_3);
    #line 656 
    ldv_free((void *)emg_19_emg_param_1_2);
    #line 657 
    ldv_free((void *)emg_19_emg_param_2_3);
    #line 659 
    break;
    #line 661 
    case 31: 
             #line 661 
    ;
    #line 663 
    emg_19_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 663 
    emg_19_emg_param_1_1 = emg_19_emg_param_1_1;
    #line 667 
    emg_wrapper_get_drvinfo(emg_19_container,emg_19_emg_param_1_1);
    #line 671 
    ldv_free((void *)emg_19_emg_param_1_1);
    #line 673 
    break;
    #line 675 
    case 32: 
             #line 675 
    ;
    #line 677 
    emg_19_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 677 
    emg_19_emg_param_1_0 = emg_19_emg_param_1_0;
    #line 681 
    emg_wrapper_get_coalesce(emg_19_container,emg_19_emg_param_1_0);
    #line 685 
    ldv_free((void *)emg_19_emg_param_1_0);
    #line 688 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 689 
      emg_repeat_cnt_call_19 --;
      #line 691 
      goto emg_call_19;
    }
    else 
         #line 693 
         __VERIFIER_assume(0);
    #line 697 
    break;
    #line 699 
    case 33: 
             #line 699 
    ;
    #line 703 
    break;
    #line 705 
    default: 
             #line 705 
    ;
    #line 705 
    __VERIFIER_assume(0);
  }
  #line 708 
  return (void *)0;
}

#line 713  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_driver(void *arg0)
{
  #line 716 
  int emg_20_choice;
  #line 717 
  struct pci_driver *emg_20_container;
  #line 718 
  struct pci_device_id *emg_20_device_id;
  #line 719 
  struct pci_dev *emg_20_resource_0;
  #line 720 
  struct pm_message emg_20_resource_1;
  #line 721 
  int emg_20_ret;
  #line 722 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 723 
  int emg_repeat_cnt_call_20_1 = 1;
  #line 724 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 725 
  int emg_repeat_cnt_call_20_0 = 1;
  #line 727 
  struct emg_struct_pci_scenario_driver_20 *data = (struct emg_struct_pci_scenario_driver_20 *)arg0;
  #line 731 
  emg_20_choice = 0;
  #line 732 
  emg_20_ret = ldv_undef_int();
  #line 733 
  emg_20_choice = 0;
  #line 734 
  emg_20_container = emg_alias_driver;
  #line 735 
  emg_20_ret = ldv_undef_int();
  #line 737 
  __VERIFIER_assume(data->arg0 == emg_alias_driver);
  #line 739 
  if (data != (struct emg_struct_pci_scenario_driver_20 *)0) {
    #line 740 
    emg_20_container = data->arg0;
    #line 741 
    ldv_free((void *)data);
  }
  #line 746 
  emg_20_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 747 
  emg_20_choice = __ldv_undef_int_range(0,13);
  #line 748 
  emg_20_device_id = emg_20_container->id_table + (unsigned long)emg_20_choice;
  #line 752 
  goto emg_main_20;
  #line 756 
  return (void *)0;
  #line 759 
  emg_call_20: 
               #line 759 
  ;
  #line 760 
  switch (ldv_undef_int()) {
    #line 761 
    case 0: 
            #line 761 
    ;
    #line 766 
    if (emg_repeat_cnt_call_20_1 > 0) {
      #line 767 
      emg_repeat_cnt_call_20_1 --;
      #line 769 
      goto emg_call_20;
    }
    else 
         #line 771 
         __VERIFIER_assume(0);
    #line 775 
    break;
    #line 777 
    case 1: 
            #line 777 
    ;
    #line 779 
    if (emg_20_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 780 
      emg_20_ret = (*(emg_20_container->suspend))(emg_20_resource_0,emg_20_resource_1); else 
                                                                    #line 782 
                                                                    emg_20_ret = ldv_undef_int();
    #line 788 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 792 
    if (emg_20_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 793 
                                                                  (*(emg_20_container->resume))(emg_20_resource_0);
    #line 797 
    if (emg_repeat_cnt_call_20_0 > 0) {
      #line 798 
      emg_repeat_cnt_call_20_0 --;
      #line 800 
      goto emg_call_20;
    }
    else 
         #line 802 
         __VERIFIER_assume(0);
    #line 806 
    break;
    #line 808 
    case 2: 
            #line 808 
    ;
    #line 810 
    if (emg_20_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 811 
      (*(emg_20_container->shutdown))(emg_20_resource_0);
    #line 816 
    emg_wrapper_remove_one(emg_20_resource_0);
    #line 819 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 820 
      emg_repeat_cnt_main_20_0 --;
      #line 822 
      goto emg_main_20;
    }
    else 
         #line 824 
         __VERIFIER_assume(0);
    #line 828 
    break;
    #line 830 
    default: 
             #line 830 
    ;
    #line 830 
    __VERIFIER_assume(0);
  }
  #line 833 
  return (void *)0;
  #line 836 
  emg_main_20: 
               #line 836 
  ;
  #line 837 
  if (ldv_undef_int() != 0) {
    #line 840 
    ldv_pre_probe();
    #line 844 
    emg_20_ret = emg_wrapper_init_one(emg_20_resource_0,emg_20_device_id);
    #line 849 
    emg_20_ret = ldv_post_probe(emg_20_ret);
    #line 852 
    if (ldv_undef_int() != 0) {
      #line 854 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 858 
      goto emg_call_20;
    }
    else 
         #line 863 
         __VERIFIER_assume(emg_20_ret != 0);
    #line 867 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 868 
      emg_repeat_cnt_main_20_1 --;
      #line 870 
      goto emg_main_20;
    }
    else 
         #line 872 
         __VERIFIER_assume(0);
  }
  else 
       #line 878 
       ldv_free((void *)emg_20_resource_0);
  #line 886 
  return (void *)0;
}

#line 891  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_3(void *arg0)
{
  #line 894 
  struct timer_list *emg_21_container;
  #line 895 
  unsigned long emg_21_emg_param_0_0;
  #line 897 
  struct emg_struct_timer_scenario_3_21 *data = (struct emg_struct_timer_scenario_3_21 *)arg0;
  #line 902 
  if (data != (struct emg_struct_timer_scenario_3_21 *)0) {
    #line 903 
    emg_21_container = data->arg0;
    #line 904 
    ldv_free((void *)data);
  }
  #line 910 
  ldv_switch_to_interrupt_context();
  #line 914 
  if (emg_21_container->function != (void (*)(struct timer_list *))0) 
    #line 915 
    (*(emg_21_container->function))((struct timer_list *)emg_21_emg_param_0_0);
  #line 921 
  ldv_switch_to_process_context();
  #line 928 
  return (void *)0;
}

#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 936 
  struct pci_driver *emg_2_pci_driver;
  #line 938 
  emg_2_pci_driver = emg_alias_driver;
  #line 939 
  if (ldv_undef_int() != 0) {
    #line 941 
    emg_2_pci_driver = arg0;
    #line 945 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 949 
    return 0;
  }
  else {
    #line 953 
    return ldv_undef_int_negative();
  }
}

#line 961  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 964 
  struct net_device *emg_3_netdev;
  #line 966 
  if (ldv_undef_int() != 0) {
    #line 968 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 972 
    return emg_3_netdev;
  }
  else 
       #line 976 
       return (struct net_device *)0;
}

#line 984  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 987 
  struct timer_list *emg_4_timer_list;
  #line 990 
  emg_4_timer_list = arg0;
  #line 994 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 995 
  ;
  #line 995 
  return 0;
}

#line 1001  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_flush_work(struct work_struct *arg0)
{
  #line 1004 
  struct work_struct *emg_5_work_struct;
  #line 1006 
  if (ldv_undef_int() != 0) {
    #line 1008 
    emg_5_work_struct = arg0;
    #line 1012 
    if (emg_5_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1013 
      (*(emg_5_work_struct->func))(emg_5_work_struct);
    #line 1018 
    return (_Bool)1;
  }
  else 
       #line 1022 
       return (_Bool)0;
}

#line 1030  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1033 
  int emg_6_line;
  #line 1036 
  emg_6_line = (int)arg0;
  #line 1040 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 1041 
  ;
  #line 1041 
  return (void *)0;
}

#line 1047  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1050 
  struct net_device *emg_7_netdev;
  #line 1053 
  emg_7_netdev = arg0;
  #line 1054 
  ldv_free((void *)emg_7_netdev);
  #line 1057 
  return;
}

#line 1062  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1065 
  struct timer_list *emg_8_timer_list;
  #line 1067 
  if (ldv_undef_int() != 0) {
    #line 1069 
    emg_8_timer_list = arg0;
    #line 1073 
    emg_dispatch_instance_register_8(emg_8_timer_list);
    #line 1077 
    return 1;
  }
  else 
       #line 1081 
       return 0;
}

#line 1089  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1092 
  struct pci_driver *emg_9_pci_driver;
  #line 1094 
  emg_9_pci_driver = emg_alias_driver;
  #line 1096 
  emg_9_pci_driver = arg0;
  #line 1100 
  emg_dispatch_deregister_9(emg_9_pci_driver);
  #line 1103 
  return;
}

#line 1108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 1111 
  struct delayed_work *emg_10_delayed_work;
  #line 1112 
  struct work_struct *emg_10_emg_param_0_0;
  #line 1114 
  if (ldv_undef_int() != 0) {
    #line 1116 
    emg_10_delayed_work = arg1;
    #line 1120 
    emg_10_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1120 
    emg_10_emg_param_0_0 = emg_10_emg_param_0_0;
    #line 1124 
    if (emg_10_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1125 
      (*(emg_10_delayed_work->work.func))(emg_10_emg_param_0_0);
    #line 1130 
    ldv_free((void *)emg_10_emg_param_0_0);
    #line 1134 
    return (_Bool)1;
  }
  else 
       #line 1138 
       return (_Bool)0;
}

#line 1146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1149 
  struct work_struct *emg_11_work_struct;
  #line 1151 
  if (ldv_undef_int() != 0) {
    #line 1153 
    emg_11_work_struct = arg1;
    #line 1157 
    if (emg_11_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1158 
      (*(emg_11_work_struct->func))(emg_11_work_struct);
    #line 1163 
    return (_Bool)1;
  }
  else 
       #line 1167 
       return (_Bool)0;
}

#line 1175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1178 
  struct net_device *emg_12_netdev;
  #line 1179 
  int emg_12_ret;
  #line 1182 
  emg_12_ret = ldv_undef_int();
  #line 1183 
  emg_12_ret = ldv_undef_int();
  #line 1184 
  if (ldv_undef_int() != 0) {
    #line 1186 
    emg_12_netdev = arg0;
    #line 1190 
    emg_12_ret = emg_wrapper_cxgb_open(emg_12_netdev);
    #line 1193 
    if (ldv_undef_int() != 0) {
      #line 1195 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 1199 
      emg_dispatch_register_12(emg_12_netdev);
      #line 1203 
      return 0;
    }
    else {
      #line 1207 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 1208 
      ldv_failed_register_netdev();
      #line 1209 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1214 
    ldv_failed_register_netdev();
    #line 1215 
    return ldv_undef_int_negative();
  }
}

#line 1223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1226 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 1227 
  void *emg_13_data;
  #line 1228 
  int emg_13_line;
  #line 1229 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 1231 
  emg_13_callback = & emg_wrapper_t3_async_intr_handler;
  #line 1232 
  if (ldv_undef_int() != 0) {
    #line 1234 
    emg_13_line = (int)arg0;
    #line 1235 
    emg_13_callback = arg1;
    #line 1236 
    emg_13_thread = (enum irqreturn (*)(int , void *))0;
    #line 1237 
    emg_13_data = arg4;
    #line 1241 
    emg_dispatch_irq_register_13(emg_13_line,emg_13_callback,emg_13_thread,emg_13_data);
    #line 1245 
    return 0;
  }
  else {
    #line 1249 
    return ldv_undef_int_negative();
  }
}

#line 1257  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1260 
  struct work_struct *emg_14_work_struct;
  #line 1262 
  if (ldv_undef_int() != 0) {
    #line 1264 
    emg_14_work_struct = arg0;
    #line 1268 
    if (emg_14_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1269 
      (*(emg_14_work_struct->func))(emg_14_work_struct);
    #line 1274 
    return (_Bool)1;
  }
  else 
       #line 1278 
       return (_Bool)0;
}

#line 1286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 1291 
  arg0->func = arg1;
  #line 1292 
  arg0->data = arg2;
  #line 1293 
  arg0->count.counter = 0;
  #line 1296 
  return;
}

#line 1301  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 1304 
  unsigned long emg_16_emg_param_0_0;
  #line 1305 
  struct tasklet_struct *emg_16_tasklet_struct;
  #line 1308 
  emg_16_tasklet_struct = arg0;
  #line 1312 
  if (emg_16_tasklet_struct->count.counter == 0) 
    #line 1313 
    if (emg_16_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                    #line 1314 
                                                                    (*(emg_16_tasklet_struct->func))(emg_16_emg_param_0_0);
  #line 1319 
  return;
}

#line 1324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1327 
  struct net_device *emg_17_netdev;
  #line 1330 
  emg_17_netdev = arg0;
  #line 1334 
  emg_wrapper_cxgb_close(emg_17_netdev);
  #line 1338 
  emg_dispatch_deregister_17(emg_17_netdev);
  #line 1341 
  return;
}

#line 1346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1349 
  int emg_1_ret;
  #line 1352 
  emg_1_ret = emg_cxgb3_init_module();
  #line 1353 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1356 
  if (ldv_undef_int() != 0) {
    #line 1358 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1362 
    emg_cxgb3_cleanup_module();
  }
  else 
       #line 1366 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1370 
  return (void *)0;
}

#line 1375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb3/cxgb3.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1377 
  ldv_initialize();
  #line 1379 
  emg_entry_point_insmod((void *)0);
  #line 1381 
  return 0;
}

