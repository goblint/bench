/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int uint;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_161 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_161 nodemask_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212 
struct vdso_image;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_162 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_162 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct workqueue_struct;
#line 48 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_255 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct kobject;
#line 291 
struct poll_table_struct;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_438 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_437 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_438 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_437 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_510 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_511 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_512 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_513 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_510 ports ;
   struct __anonstruct_icmpt_511 icmpt ;
   struct __anonstruct_dnports_512 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_513 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_514 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_514 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14506 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14507 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14506 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14507 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_700 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_700 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_701 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_701 __anonCompField_bdi_writeback_161 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_702 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_702 __anonCompField_bio_162 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_705 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_706 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_708 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_709 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_707 {
   struct __anonstruct_elv_708 elv ;
   struct __anonstruct_flush_709 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_710 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_705 __anonCompField_request_163 ;
   union __anonunion_706 __anonCompField_request_164 ;
   union __anonunion_707 __anonCompField_request_165 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_710 __anonCompField_request_166 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_727 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_726 {
   void *validation_data ;
   struct __anonstruct_727 __anonCompField___anonunion_726_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_726 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_801 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_802 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_800 {
   struct __anonstruct_801 __anonCompField___anonunion_800_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_802 __anonCompField___anonunion_800_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_800 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_804 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_804 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_817 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_817 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_839 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_839 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_841 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_840 {
   __addrpair skc_addrpair ;
   struct __anonstruct_841 __anonCompField___anonunion_840_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_844 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   __portpair skc_portpair ;
   struct __anonstruct_844 __anonCompField___anonunion_843_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_840 __anonCompField_sock_common_177 ;
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_843 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_846 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_847 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_848 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_849 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_850 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_850 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_851 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_852 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_887 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_887 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_984 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_984 __anonCompField_ip_ra_chain_195 ;
   struct callback_head rcu ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_991 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_991 __anonCompField_inet_listen_hashbucket_196 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 2314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_1039 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_1039 __anonCompField_pci_dev_200 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna.h"
enum bfa_status {
    BFA_STATUS_OK = 0,
    BFA_STATUS_FAILED = 1,
    BFA_STATUS_EINVAL = 2,
    BFA_STATUS_ENOMEM = 3,
    BFA_STATUS_ENOSYS = 4,
    BFA_STATUS_ETIMER = 5,
    BFA_STATUS_EPROTOCOL = 6,
    BFA_STATUS_ENOFCPORTS = 7,
    BFA_STATUS_NOFLASH = 8,
    BFA_STATUS_BADFLASH = 9,
    BFA_STATUS_SFP_UNSUPP = 10,
    BFA_STATUS_UNKNOWN_VFID = 11,
    BFA_STATUS_DATACORRUPTED = 12,
    BFA_STATUS_DEVBUSY = 13,
    BFA_STATUS_ABORTED = 14,
    BFA_STATUS_NODEV = 15,
    BFA_STATUS_HDMA_FAILED = 16,
    BFA_STATUS_FLASH_BAD_LEN = 17,
    BFA_STATUS_UNKNOWN_LWWN = 18,
    BFA_STATUS_UNKNOWN_RWWN = 19,
    BFA_STATUS_FCPT_LS_RJT = 20,
    BFA_STATUS_VPORT_EXISTS = 21,
    BFA_STATUS_VPORT_MAX = 22,
    BFA_STATUS_UNSUPP_SPEED = 23,
    BFA_STATUS_INVLD_DFSZ = 24,
    BFA_STATUS_CNFG_FAILED = 25,
    BFA_STATUS_CMD_NOTSUPP = 26,
    BFA_STATUS_NO_ADAPTER = 27,
    BFA_STATUS_LINKDOWN = 28,
    BFA_STATUS_FABRIC_RJT = 29,
    BFA_STATUS_UNKNOWN_VWWN = 30,
    BFA_STATUS_NSLOGIN_FAILED = 31,
    BFA_STATUS_NO_RPORTS = 32,
    BFA_STATUS_NSQUERY_FAILED = 33,
    BFA_STATUS_PORT_OFFLINE = 34,
    BFA_STATUS_RPORT_OFFLINE = 35,
    BFA_STATUS_TGTOPEN_FAILED = 36,
    BFA_STATUS_BAD_LUNS = 37,
    BFA_STATUS_IO_FAILURE = 38,
    BFA_STATUS_NO_FABRIC = 39,
    BFA_STATUS_EBADF = 40,
    BFA_STATUS_EINTR = 41,
    BFA_STATUS_EIO = 42,
    BFA_STATUS_ENOTTY = 43,
    BFA_STATUS_ENXIO = 44,
    BFA_STATUS_EFOPEN = 45,
    BFA_STATUS_VPORT_WWN_BP = 46,
    BFA_STATUS_PORT_NOT_DISABLED = 47,
    BFA_STATUS_BADFRMHDR = 48,
    BFA_STATUS_BADFRMSZ = 49,
    BFA_STATUS_MISSINGFRM = 50,
    BFA_STATUS_LINKTIMEOUT = 51,
    BFA_STATUS_NO_FCPIM_NEXUS = 52,
    BFA_STATUS_CHECKSUM_FAIL = 53,
    BFA_STATUS_GZME_FAILED = 54,
    BFA_STATUS_SCSISTART_REQD = 55,
    BFA_STATUS_IOC_FAILURE = 56,
    BFA_STATUS_INVALID_WWN = 57,
    BFA_STATUS_MISMATCH = 58,
    BFA_STATUS_IOC_ENABLED = 59,
    BFA_STATUS_ADAPTER_ENABLED = 60,
    BFA_STATUS_IOC_NON_OP = 61,
    BFA_STATUS_ADDR_MAP_FAILURE = 62,
    BFA_STATUS_SAME_NAME = 63,
    BFA_STATUS_PENDING = 64,
    BFA_STATUS_8G_SPD = 65,
    BFA_STATUS_4G_SPD = 66,
    BFA_STATUS_AD_IS_ENABLE = 67,
    BFA_STATUS_EINVAL_TOV = 68,
    BFA_STATUS_EINVAL_QDEPTH = 69,
    BFA_STATUS_VERSION_FAIL = 70,
    BFA_STATUS_DIAG_BUSY = 71,
    BFA_STATUS_BEACON_ON = 72,
    BFA_STATUS_BEACON_OFF = 73,
    BFA_STATUS_LBEACON_ON = 74,
    BFA_STATUS_LBEACON_OFF = 75,
    BFA_STATUS_PORT_NOT_INITED = 76,
    BFA_STATUS_RPSC_ENABLED = 77,
    BFA_STATUS_ENOFSAVE = 78,
    BFA_STATUS_BAD_FILE = 79,
    BFA_STATUS_RLIM_EN = 80,
    BFA_STATUS_RLIM_DIS = 81,
    BFA_STATUS_IOC_DISABLED = 82,
    BFA_STATUS_ADAPTER_DISABLED = 83,
    BFA_STATUS_BIOS_DISABLED = 84,
    BFA_STATUS_AUTH_ENABLED = 85,
    BFA_STATUS_AUTH_DISABLED = 86,
    BFA_STATUS_ERROR_TRL_ENABLED = 87,
    BFA_STATUS_ERROR_QOS_ENABLED = 88,
    BFA_STATUS_NO_SFP_DEV = 89,
    BFA_STATUS_MEMTEST_FAILED = 90,
    BFA_STATUS_INVALID_DEVID = 91,
    BFA_STATUS_QOS_ENABLED = 92,
    BFA_STATUS_QOS_DISABLED = 93,
    BFA_STATUS_INCORRECT_DRV_CONFIG = 94,
    BFA_STATUS_REG_FAIL = 95,
    BFA_STATUS_IM_INV_CODE = 96,
    BFA_STATUS_IM_INV_VLAN = 97,
    BFA_STATUS_IM_INV_ADAPT_NAME = 98,
    BFA_STATUS_IM_LOW_RESOURCES = 99,
    BFA_STATUS_IM_VLANID_IS_PVID = 100,
    BFA_STATUS_IM_VLANID_EXISTS = 101,
    BFA_STATUS_IM_FW_UPDATE_FAIL = 102,
    BFA_STATUS_PORTLOG_ENABLED = 103,
    BFA_STATUS_PORTLOG_DISABLED = 104,
    BFA_STATUS_FILE_NOT_FOUND = 105,
    BFA_STATUS_QOS_FC_ONLY = 106,
    BFA_STATUS_RLIM_FC_ONLY = 107,
    BFA_STATUS_CT_SPD = 108,
    BFA_STATUS_LEDTEST_OP = 109,
    BFA_STATUS_CEE_NOT_DN = 110,
    BFA_STATUS_10G_SPD = 111,
    BFA_STATUS_IM_INV_TEAM_NAME = 112,
    BFA_STATUS_IM_DUP_TEAM_NAME = 113,
    BFA_STATUS_IM_ADAPT_ALREADY_IN_TEAM = 114,
    BFA_STATUS_IM_ADAPT_HAS_VLANS = 115,
    BFA_STATUS_IM_PVID_MISMATCH = 116,
    BFA_STATUS_IM_LINK_SPEED_MISMATCH = 117,
    BFA_STATUS_IM_MTU_MISMATCH = 118,
    BFA_STATUS_IM_RSS_MISMATCH = 119,
    BFA_STATUS_IM_HDS_MISMATCH = 120,
    BFA_STATUS_IM_OFFLOAD_MISMATCH = 121,
    BFA_STATUS_IM_PORT_PARAMS = 122,
    BFA_STATUS_IM_PORT_NOT_IN_TEAM = 123,
    BFA_STATUS_IM_CANNOT_REM_PRI = 124,
    BFA_STATUS_IM_MAX_PORTS_REACHED = 125,
    BFA_STATUS_IM_LAST_PORT_DELETE = 126,
    BFA_STATUS_IM_NO_DRIVER = 127,
    BFA_STATUS_IM_MAX_VLANS_REACHED = 128,
    BFA_STATUS_TOMCAT_SPD_NOT_ALLOWED = 129,
    BFA_STATUS_NO_MINPORT_DRIVER = 130,
    BFA_STATUS_CARD_TYPE_MISMATCH = 131,
    BFA_STATUS_BAD_ASICBLK = 132,
    BFA_STATUS_NO_DRIVER = 133,
    BFA_STATUS_INVALID_MAC = 134,
    BFA_STATUS_IM_NO_VLAN = 135,
    BFA_STATUS_IM_ETH_LB_FAILED = 136,
    BFA_STATUS_IM_PVID_REMOVE = 137,
    BFA_STATUS_IM_PVID_EDIT = 138,
    BFA_STATUS_CNA_NO_BOOT = 139,
    BFA_STATUS_IM_PVID_NON_ZERO = 140,
    BFA_STATUS_IM_INETCFG_LOCK_FAILED = 141,
    BFA_STATUS_IM_GET_INETCFG_FAILED = 142,
    BFA_STATUS_IM_NOT_BOUND = 143,
    BFA_STATUS_INSUFFICIENT_PERMS = 144,
    BFA_STATUS_IM_INV_VLAN_NAME = 145,
    BFA_STATUS_CMD_NOTSUPP_CNA = 146,
    BFA_STATUS_IM_PASSTHRU_EDIT = 147,
    BFA_STATUS_IM_BIND_FAILED = 148,
    BFA_STATUS_IM_UNBIND_FAILED = 149,
    BFA_STATUS_IM_PORT_IN_TEAM = 150,
    BFA_STATUS_IM_VLAN_NOT_FOUND = 151,
    BFA_STATUS_IM_TEAM_NOT_FOUND = 152,
    BFA_STATUS_IM_TEAM_CFG_NOT_ALLOWED = 153,
    BFA_STATUS_PBC = 154,
    BFA_STATUS_DEVID_MISSING = 155,
    BFA_STATUS_BAD_FWCFG = 156,
    BFA_STATUS_CREATE_FILE = 157,
    BFA_STATUS_INVALID_VENDOR = 158,
    BFA_STATUS_SFP_NOT_READY = 159,
    BFA_STATUS_FLASH_UNINIT = 160,
    BFA_STATUS_FLASH_EMPTY = 161,
    BFA_STATUS_FLASH_CKFAIL = 162,
    BFA_STATUS_TRUNK_UNSUPP = 163,
    BFA_STATUS_TRUNK_ENABLED = 164,
    BFA_STATUS_TRUNK_DISABLED = 165,
    BFA_STATUS_TRUNK_ERROR_TRL_ENABLED = 166,
    BFA_STATUS_BOOT_CODE_UPDATED = 167,
    BFA_STATUS_BOOT_VERSION = 168,
    BFA_STATUS_CARDTYPE_MISSING = 169,
    BFA_STATUS_INVALID_CARDTYPE = 170,
    BFA_STATUS_NO_TOPOLOGY_FOR_CNA = 171,
    BFA_STATUS_IM_VLAN_OVER_TEAM_DELETE_FAILED = 172,
    BFA_STATUS_ETHBOOT_ENABLED = 173,
    BFA_STATUS_ETHBOOT_DISABLED = 174,
    BFA_STATUS_IOPROFILE_OFF = 175,
    BFA_STATUS_NO_PORT_INSTANCE = 176,
    BFA_STATUS_BOOT_CODE_TIMEDOUT = 177,
    BFA_STATUS_NO_VPORT_LOCK = 178,
    BFA_STATUS_VPORT_NO_CNFG = 179,
    BFA_STATUS_MAX_VAL = 180
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs_mfg_comm.h"
struct bfa_mfg_vpd {
   u8 version ;
   u8 vpd_sig[3U] ;
   u8 chksum ;
   u8 vendor ;
   u8 len ;
   u8 rsv ;
   u8 data[512U] ;
} __attribute__((__packed__));
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_ioc_drv_stats {
   u32 ioc_isrs ;
   u32 ioc_enables ;
   u32 ioc_disables ;
   u32 ioc_hbfails ;
   u32 ioc_boots ;
   u32 stats_tmos ;
   u32 hb_count ;
   u32 disable_reqs ;
   u32 enable_reqs ;
   u32 disable_replies ;
   u32 enable_replies ;
   u32 rsvd ;
};
#line 231 
enum bfa_mode {
    BFA_MODE_HBA = 1,
    BFA_MODE_CNA = 2,
    BFA_MODE_NIC = 3
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
struct bfa_wc {
   void (*wc_resume)(void *) ;
   void *wc_cbarg ;
   int wc_count ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct __anonstruct_h2i_1041 {
   u8 qid ;
   u8 fn_lpu ;
} __attribute__((__packed__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
union __anonunion_mtag_1040 {
   struct __anonstruct_h2i_1041 h2i ;
   u16 i2htok ;
} __attribute__((__packed__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_mhdr {
   u8 msg_class ;
   u8 msg_id ;
   union __anonunion_mtag_1040 mtag ;
} __attribute__((__packed__));
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct __anonstruct_a32_1042 {
   u32 addr_lo ;
   u32 addr_hi ;
} __attribute__((__packed__));
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
union bfi_addr_u {
   struct __anonstruct_a32_1042 a32 ;
} __attribute__((__packed__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_mbmsg {
   struct bfi_mhdr mh ;
   u32 pl[7U] ;
} __attribute__((__packed__));
#line 90 
enum bfi_pcifn_class {
    BFI_PCIFN_CLASS_FC = 3076,
    BFI_PCIFN_CLASS_ETH = 512
};
#line 132 
enum bfi_asic_gen {
    BFI_ASIC_GEN_CB = 1,
    BFI_ASIC_GEN_CT = 2,
    BFI_ASIC_GEN_CT2 = 3
};
#line 138 
enum bfi_asic_mode {
    BFI_ASIC_MODE_FC = 1,
    BFI_ASIC_MODE_FC16 = 2,
    BFI_ASIC_MODE_ETH = 3,
    BFI_ASIC_MODE_COMBO = 4
};
#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_ioc_attr {
   u64 mfg_pwwn ;
   u64 mfg_nwwn ;
   u8 mfg_mac[6U] ;
   u8 port_mode ;
   u8 rsvd_a ;
   u64 pwwn ;
   u64 nwwn ;
   u8 mac[6U] ;
   u16 rsvd_b ;
   u8 fcoe_mac[6U] ;
   u16 rsvd_c ;
   char brcd_serialnum[12U] ;
   u8 pcie_gen ;
   u8 pcie_lanes_orig ;
   u8 pcie_lanes ;
   u8 rx_bbcredit ;
   u32 adapter_prop ;
   u16 maxfrsize ;
   char asic_rev ;
   u8 rsvd_d ;
   char fw_version[64U] ;
   char optrom_version[64U] ;
   struct bfa_mfg_vpd vpd ;
   u32 card_type ;
} __attribute__((__packed__));
#line 276 
enum bfi_port_mode {
    BFI_PORT_MODE_FC = 1,
    BFI_PORT_MODE_ETH = 2
};
#line 295 
enum bfi_ioc_state {
    BFI_IOC_UNINIT = 0,
    BFI_IOC_INITING = 1,
    BFI_IOC_HWINIT = 2,
    BFI_IOC_CFG = 3,
    BFI_IOC_OP = 4,
    BFI_IOC_DISABLING = 5,
    BFI_IOC_DISABLED = 6,
    BFI_IOC_CFG_DISABLED = 7,
    BFI_IOC_FAIL = 8,
    BFI_IOC_MEMTEST = 9
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq_mhdr {
   u8 msg_class ;
   u8 msg_id ;
   u16 msg_token ;
   u16 num_entries ;
   u8 enet_id ;
   u8 rsvd[1U] ;
} __attribute__((__packed__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_pcidev {
   int pci_slot ;
   u8 pci_func ;
   u16 device_id ;
   u16 ssid ;
   void *pci_bar_kva ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_dma {
   void *kva ;
   u64 pa ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_ioc_regs {
   void *hfn_mbox_cmd ;
   void *hfn_mbox ;
   void *lpu_mbox_cmd ;
   void *lpu_mbox ;
   void *lpu_read_stat ;
   void *pss_ctl_reg ;
   void *pss_err_status_reg ;
   void *app_pll_fast_ctl_reg ;
   void *app_pll_slow_ctl_reg ;
   void *ioc_sem_reg ;
   void *ioc_usage_sem_reg ;
   void *ioc_init_sem_reg ;
   void *ioc_usage_reg ;
   void *host_page_num_fn ;
   void *heartbeat ;
   void *ioc_fwstate ;
   void *alt_ioc_fwstate ;
   void *ll_halt ;
   void *alt_ll_halt ;
   void *err_set ;
   void *ioc_fail_sync ;
   void *shirq_isr_next ;
   void *shirq_msk_next ;
   void *smem_page_start ;
   u32 smem_pg0 ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_mbox_cmd {
   struct list_head qe ;
   void (*cbfn)(void *) ;
   void *cbarg ;
   u32 msg[8U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct __anonstruct_mbhdlr_1045 {
   void (*cbfn)(void *, struct bfi_mbmsg *) ;
   void *cbarg ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_ioc_mbox_mod {
   struct list_head cmd_q ;
   int nmclass ;
   struct __anonstruct_mbhdlr_1045 mbhdlr[34U] ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_ioc_cbfn {
   void (*enable_cbfn)(void *, enum bfa_status ) ;
   void (*disable_cbfn)(void *) ;
   void (*hbfail_cbfn)(void *) ;
   void (*reset_cbfn)(void *) ;
};
#line 128 
enum bfa_ioc_event {
    BFA_IOC_E_ENABLED = 1,
    BFA_IOC_E_DISABLED = 2,
    BFA_IOC_E_FAILED = 3
};
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_ioc_notify {
   struct list_head qe ;
   void (*cbfn)(void *, enum bfa_ioc_event ) ;
   void *cbarg ;
};
#line 150 
struct bfa_ioc;
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_iocpf {
   void (*fsm)(void *, int ) ;
   struct bfa_ioc *ioc ;
   bool fw_mismatch_notified ;
   bool auto_recover ;
   u32 poll_time ;
};
#line 158 
struct bfa;
#line 158 
struct bfa_ioc_hwif;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_ioc {
   void (*fsm)(void *, int ) ;
   struct bfa *bfa ;
   struct bfa_pcidev pcidev ;
   struct timer_list ioc_timer ;
   struct timer_list iocpf_timer ;
   struct timer_list sem_timer ;
   struct timer_list hb_timer ;
   u32 hb_count ;
   struct list_head notify_q ;
   void *dbg_fwsave ;
   int dbg_fwsave_len ;
   bool dbg_fwsave_once ;
   enum bfi_pcifn_class clscode ;
   struct bfa_ioc_regs ioc_regs ;
   struct bfa_ioc_drv_stats stats ;
   bool fcmode ;
   bool pllinit ;
   bool stats_busy ;
   u8 port_id ;
   struct bfa_dma attr_dma ;
   struct bfi_ioc_attr *attr ;
   struct bfa_ioc_cbfn *cbfn ;
   struct bfa_ioc_mbox_mod mbox_mod ;
   struct bfa_ioc_hwif *ioc_hwif ;
   struct bfa_iocpf iocpf ;
   enum bfi_asic_gen asic_gen ;
   enum bfi_asic_mode asic_mode ;
   enum bfi_port_mode port0_mode ;
   enum bfi_port_mode port1_mode ;
   enum bfa_mode port_mode ;
   u8 ad_cap_bm ;
   u8 port_mode_cfg ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_ioc_hwif {
   enum bfa_status (*ioc_pll_init)(void *, enum bfi_asic_mode ) ;
   bool (*ioc_firmware_lock)(struct bfa_ioc *) ;
   void (*ioc_firmware_unlock)(struct bfa_ioc *) ;
   void (*ioc_reg_init)(struct bfa_ioc *) ;
   void (*ioc_map_port)(struct bfa_ioc *) ;
   void (*ioc_isr_mode_set)(struct bfa_ioc *, bool ) ;
   void (*ioc_notify_fail)(struct bfa_ioc *) ;
   void (*ioc_ownership_reset)(struct bfa_ioc *) ;
   bool (*ioc_sync_start)(struct bfa_ioc *) ;
   void (*ioc_sync_join)(struct bfa_ioc *) ;
   void (*ioc_sync_leave)(struct bfa_ioc *) ;
   void (*ioc_sync_ack)(struct bfa_ioc *) ;
   bool (*ioc_sync_complete)(struct bfa_ioc *) ;
   bool (*ioc_lpu_read_stat)(struct bfa_ioc *) ;
   void (*ioc_set_fwstate)(struct bfa_ioc *, enum bfi_ioc_state ) ;
   enum bfi_ioc_state (*ioc_get_fwstate)(struct bfa_ioc *) ;
   void (*ioc_set_alt_fwstate)(struct bfa_ioc *, enum bfi_ioc_state ) ;
   enum bfi_ioc_state (*ioc_get_alt_fwstate)(struct bfa_ioc *) ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
struct bfa_flash {
   struct bfa_ioc *ioc ;
   u32 type ;
   u8 instance ;
   u8 rsv[3U] ;
   u32 op_busy ;
   u32 residue ;
   u32 offset ;
   enum bfa_status status ;
   u8 *dbuf_kva ;
   u64 dbuf_pa ;
   void (*cbfn)(void *, enum bfa_status ) ;
   void *cbarg ;
   u8 *ubuf ;
   u32 addr_off ;
   struct bfa_mbox_cmd mb ;
   struct bfa_ioc_notify ioc_notify ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_q {
   union bfi_addr_u pg_tbl ;
   union bfi_addr_u first_entry ;
   u16 pages ;
   u16 page_sz ;
} __attribute__((__packed__));
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_txq {
   struct bfi_enet_q q ;
   u8 priority ;
   u8 rsvd[3U] ;
} __attribute__((__packed__));
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rxq {
   struct bfi_enet_q q ;
   u16 rx_buffer_size ;
   u16 rsvd ;
} __attribute__((__packed__));
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_cq {
   struct bfi_enet_q q ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_ib_cfg {
   u8 int_pkt_dma ;
   u8 int_enabled ;
   u8 int_pkt_enabled ;
   u8 continuous_coalescing ;
   u8 msix ;
   u8 rsvd[3U] ;
   u32 coalescing_timeout ;
   u32 inter_pkt_timeout ;
   u8 inter_pkt_count ;
   u8 rsvd1[3U] ;
} __attribute__((__packed__));
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
union __anonunion_intr_1048 {
   u16 msix_index ;
   u16 intx_bitmask ;
} __attribute__((__packed__));
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_ib {
   union bfi_addr_u index_addr ;
   union __anonunion_intr_1048 intr ;
   u16 rsvd ;
} __attribute__((__packed__));
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_req {
   struct bfi_msgq_mhdr mh ;
} __attribute__((__packed__));
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_enable_req {
   struct bfi_msgq_mhdr mh ;
   u8 enable ;
   u8 rsvd[3U] ;
} __attribute__((__packed__));
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_attr_req {
   struct bfi_msgq_mhdr mh ;
} __attribute__((__packed__));
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_tx_cfg {
   u8 vlan_mode ;
   u8 rsvd ;
   u16 vlan_id ;
   u8 admit_tagged_frame ;
   u8 apply_vlan_filter ;
   u8 add_to_vswitch ;
   u8 rsvd1[1U] ;
} __attribute__((__packed__));
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct __anonstruct_q_cfg_1049 {
   struct bfi_enet_txq q ;
   struct bfi_enet_ib ib ;
} __attribute__((__packed__));
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_tx_cfg_req {
   struct bfi_msgq_mhdr mh ;
   u8 num_queues ;
   u8 rsvd[3U] ;
   struct __anonstruct_q_cfg_1049 q_cfg[8U] ;
   struct bfi_enet_ib_cfg ib_cfg ;
   struct bfi_enet_tx_cfg tx_cfg ;
};
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct __anonstruct_q_handles_1050 {
   u32 q_dbell ;
   u32 i_dbell ;
   u8 hw_qid ;
   u8 rsvd[3U] ;
} __attribute__((__packed__));
#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_tx_cfg_rsp {
   struct bfi_msgq_mhdr mh ;
   u8 error ;
   u8 hw_id ;
   u8 rsvd[2U] ;
   struct __anonstruct_q_handles_1050 q_handles[8U] ;
};
#line 450 
enum bfi_enet_hds_type {
    BFI_ENET_HDS_FORCED = 1,
    BFI_ENET_HDS_IPV6_UDP = 2,
    BFI_ENET_HDS_IPV6_TCP = 4,
    BFI_ENET_HDS_IPV4_TCP = 8,
    BFI_ENET_HDS_IPV4_UDP = 16
};
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct __anonstruct_hds_1051 {
   u8 max_header_size ;
   u8 force_offset ;
   u8 type ;
   u8 rsvd1 ;
} __attribute__((__packed__));
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rx_cfg {
   u8 rxq_type ;
   u8 rsvd[1U] ;
   u16 frame_size ;
   struct __anonstruct_hds_1051 hds ;
   u8 multi_buffer ;
   u8 strip_vlan ;
   u8 drop_untagged ;
   u8 rsvd2 ;
} __attribute__((__packed__));
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct __anonstruct_q_cfg_1052 {
   struct bfi_enet_rxq ql ;
   struct bfi_enet_rxq qs ;
   struct bfi_enet_cq cq ;
   struct bfi_enet_ib ib ;
} __attribute__((__packed__));
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rx_cfg_req {
   struct bfi_msgq_mhdr mh ;
   u8 num_queue_sets ;
   u8 rsvd[3U] ;
   struct __anonstruct_q_cfg_1052 q_cfg[16U] ;
   struct bfi_enet_ib_cfg ib_cfg ;
   struct bfi_enet_rx_cfg rx_cfg ;
} __attribute__((__packed__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct __anonstruct_q_handles_1053 {
   u32 ql_dbell ;
   u32 qs_dbell ;
   u32 i_dbell ;
   u8 hw_lqid ;
   u8 hw_sqid ;
   u8 hw_cqid ;
   u8 rsvd ;
} __attribute__((__packed__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rx_cfg_rsp {
   struct bfi_msgq_mhdr mh ;
   u8 error ;
   u8 hw_id ;
   u8 rsvd[2U] ;
   struct __anonstruct_q_handles_1053 q_handles[16U] ;
} __attribute__((__packed__));
#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rit_req {
   struct bfi_msgq_mhdr mh ;
   u16 size ;
   u8 rsvd[2U] ;
   u8 table[64U] ;
} __attribute__((__packed__));
#line 531 
enum bfi_enet_rss_type {
    BFI_ENET_RSS_IPV6 = 1,
    BFI_ENET_RSS_IPV6_TCP = 2,
    BFI_ENET_RSS_IPV4 = 4,
    BFI_ENET_RSS_IPV4_TCP = 8
};
#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rss_cfg {
   u8 type ;
   u8 mask ;
   u8 rsvd[2U] ;
   u32 key[10U] ;
} __attribute__((__packed__));
#line 551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rss_cfg_req {
   struct bfi_msgq_mhdr mh ;
   struct bfi_enet_rss_cfg cfg ;
} __attribute__((__packed__));
#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_ucast_req {
   struct bfi_msgq_mhdr mh ;
   u8 mac_addr[6U] ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_mcast_add_req {
   struct bfi_msgq_mhdr mh ;
   u8 mac_addr[6U] ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_mcast_del_req {
   struct bfi_msgq_mhdr mh ;
   u16 handle ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rx_vlan_req {
   struct bfi_msgq_mhdr mh ;
   u8 block_idx ;
   u8 rsvd[3U] ;
   u32 bit_mask[16U] ;
} __attribute__((__packed__));
#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_set_pause_req {
   struct bfi_msgq_mhdr mh ;
   u8 rsvd[2U] ;
   u8 tx_pause ;
   u8 rx_pause ;
} __attribute__((__packed__));
#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_diag_lb_req {
   struct bfi_msgq_mhdr mh ;
   u8 rsvd[2U] ;
   u8 mode ;
   u8 enable ;
} __attribute__((__packed__));
#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_req {
   struct bfi_msgq_mhdr mh ;
   u16 stats_mask ;
   u8 rsvd[2U] ;
   u32 rx_enet_mask ;
   u32 tx_enet_mask ;
   union bfi_addr_u host_buffer ;
} __attribute__((__packed__));
#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_txf {
   u64 ucast_octets ;
   u64 ucast ;
   u64 ucast_vlan ;
   u64 mcast_octets ;
   u64 mcast ;
   u64 mcast_vlan ;
   u64 bcast_octets ;
   u64 bcast ;
   u64 bcast_vlan ;
   u64 errors ;
   u64 filter_vlan ;
   u64 filter_mac_sa ;
} __attribute__((__packed__));
#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_rxf {
   u64 ucast_octets ;
   u64 ucast ;
   u64 ucast_vlan ;
   u64 mcast_octets ;
   u64 mcast ;
   u64 mcast_vlan ;
   u64 bcast_octets ;
   u64 bcast ;
   u64 bcast_vlan ;
   u64 frame_drops ;
} __attribute__((__packed__));
#line 711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_fc_tx {
   u64 txf_ucast_octets ;
   u64 txf_ucast ;
   u64 txf_ucast_vlan ;
   u64 txf_mcast_octets ;
   u64 txf_mcast ;
   u64 txf_mcast_vlan ;
   u64 txf_bcast_octets ;
   u64 txf_bcast ;
   u64 txf_bcast_vlan ;
   u64 txf_parity_errors ;
   u64 txf_timeout ;
   u64 txf_fid_parity_errors ;
} __attribute__((__packed__));
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_fc_rx {
   u64 rxf_ucast_octets ;
   u64 rxf_ucast ;
   u64 rxf_ucast_vlan ;
   u64 rxf_mcast_octets ;
   u64 rxf_mcast ;
   u64 rxf_mcast_vlan ;
   u64 rxf_bcast_octets ;
   u64 rxf_bcast ;
   u64 rxf_bcast_vlan ;
} __attribute__((__packed__));
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_rad {
   u64 rx_frames ;
   u64 rx_octets ;
   u64 rx_vlan_frames ;
   u64 rx_ucast ;
   u64 rx_ucast_octets ;
   u64 rx_ucast_vlan ;
   u64 rx_mcast ;
   u64 rx_mcast_octets ;
   u64 rx_mcast_vlan ;
   u64 rx_bcast ;
   u64 rx_bcast_octets ;
   u64 rx_bcast_vlan ;
   u64 rx_drops ;
} __attribute__((__packed__));
#line 766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_bpc {
   u64 tx_pause[8U] ;
   u64 tx_zero_pause[8U] ;
   u64 tx_first_pause[8U] ;
   u64 rx_pause[8U] ;
   u64 rx_zero_pause[8U] ;
   u64 rx_first_pause[8U] ;
} __attribute__((__packed__));
#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats_mac {
   u64 stats_clr_cnt ;
   u64 frame_64 ;
   u64 frame_65_127 ;
   u64 frame_128_255 ;
   u64 frame_256_511 ;
   u64 frame_512_1023 ;
   u64 frame_1024_1518 ;
   u64 frame_1519_1522 ;
   u64 rx_bytes ;
   u64 rx_packets ;
   u64 rx_fcs_error ;
   u64 rx_multicast ;
   u64 rx_broadcast ;
   u64 rx_control_frames ;
   u64 rx_pause ;
   u64 rx_unknown_opcode ;
   u64 rx_alignment_error ;
   u64 rx_frame_length_error ;
   u64 rx_code_error ;
   u64 rx_carrier_sense_error ;
   u64 rx_undersize ;
   u64 rx_oversize ;
   u64 rx_fragments ;
   u64 rx_jabber ;
   u64 rx_drop ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_multicast ;
   u64 tx_broadcast ;
   u64 tx_pause ;
   u64 tx_deferral ;
   u64 tx_excessive_deferral ;
   u64 tx_single_collision ;
   u64 tx_muliple_collision ;
   u64 tx_late_collision ;
   u64 tx_excessive_collision ;
   u64 tx_total_collision ;
   u64 tx_pause_honored ;
   u64 tx_drop ;
   u64 tx_jabber ;
   u64 tx_fcs_error ;
   u64 tx_control_frame ;
   u64 tx_oversize ;
   u64 tx_undersize ;
   u64 tx_fragments ;
} __attribute__((__packed__));
#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_stats {
   struct bfi_enet_stats_mac mac_stats ;
   struct bfi_enet_stats_bpc bpc_stats ;
   struct bfi_enet_stats_rad rad_stats ;
   struct bfi_enet_stats_rad rlb_stats ;
   struct bfi_enet_stats_fc_rx fc_rx_stats ;
   struct bfi_enet_stats_fc_tx fc_tx_stats ;
   struct bfi_enet_stats_rxf rxf_stats[32U] ;
   struct bfi_enet_stats_txf txf_stats[32U] ;
} __attribute__((__packed__));
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_bit_defn {
   u32 mbox_status_bits ;
   u32 mbox_mask_bits ;
   u32 error_status_bits ;
   u32 error_mask_bits ;
   u32 halt_status_bits ;
   u32 halt_mask_bits ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_reg {
   void *fn_int_status ;
   void *fn_int_mask ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_dma_addr {
   u32 msb ;
   u32 lsb ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_txq_wi_vector {
   u16 reserved ;
   u16 length ;
   struct bna_dma_addr host_addr ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct __anonstruct_wi_1055 {
   u8 reserved ;
   u8 num_vectors ;
   u16 opcode ;
   u16 flags ;
   u16 l4_hdr_size_n_offset ;
   u16 vlan_tag ;
   u16 lso_mss ;
   u32 frame_length ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct __anonstruct_wi_ext_1056 {
   u16 reserved ;
   u16 opcode ;
   u32 reserved2[3U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
union __anonunion_hdr_1054 {
   struct __anonstruct_wi_1055 wi ;
   struct __anonstruct_wi_ext_1056 wi_ext ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_txq_entry {
   union __anonunion_hdr_1054 hdr ;
   struct bna_txq_wi_vector vector[4U] ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_rxq_entry {
   struct bna_dma_addr host_addr ;
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_cq_entry {
   u32 flags ;
   u16 vlan_tag ;
   u16 length ;
   u32 rss_hash ;
   u8 valid ;
   u8 reserved1 ;
   u8 reserved2 ;
   u8 rxq_id ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs_cna.h"
struct bfa_cee_lldp_str {
   u8 sub_type ;
   u8 len ;
   u8 rsvd[2U] ;
   u8 value[128U] ;
} __attribute__((__packed__));
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs_cna.h"
struct bfa_cee_lldp_cfg {
   struct bfa_cee_lldp_str chassis_id ;
   struct bfa_cee_lldp_str port_id ;
   struct bfa_cee_lldp_str port_desc ;
   struct bfa_cee_lldp_str sys_name ;
   struct bfa_cee_lldp_str sys_desc ;
   struct bfa_cee_lldp_str mgmt_addr ;
   u16 time_to_live ;
   u16 enabled_system_cap ;
} __attribute__((__packed__));
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs_cna.h"
struct bfa_cee_dcbx_cfg {
   u8 pgid[8U] ;
   u8 pg_percentage[8U] ;
   u8 pfc_primap ;
   u8 fcoe_primap ;
   u8 iscsi_primap ;
   u8 dcbx_version ;
   u8 lls_fcoe ;
   u8 lls_lan ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs_cna.h"
struct bfa_cee_attr {
   u8 cee_status ;
   u8 error_reason ;
   struct bfa_cee_lldp_cfg lldp_remote ;
   struct bfa_cee_dcbx_cfg dcbx_remote ;
   u8 src_mac[6U] ;
   u8 link_speed ;
   u8 nw_priority ;
   u8 filler[2U] ;
} __attribute__((__packed__));
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs_cna.h"
struct bfa_cee_stats {
   u32 lldp_tx_frames ;
   u32 lldp_rx_frames ;
   u32 lldp_rx_frames_invalid ;
   u32 lldp_rx_frames_new ;
   u32 lldp_tlvs_unrecognized ;
   u32 lldp_rx_shutdown_tlvs ;
   u32 lldp_info_aged_out ;
   u32 dcbx_phylink_ups ;
   u32 dcbx_phylink_downs ;
   u32 dcbx_rx_tlvs ;
   u32 dcbx_rx_tlvs_invalid ;
   u32 dcbx_control_tlv_error ;
   u32 dcbx_feature_tlv_error ;
   u32 dcbx_cee_cfg_new ;
   u32 cee_status_down ;
   u32 cee_status_up ;
   u32 cee_hw_cfg_changed ;
   u32 cee_rx_invalid_cfg ;
} __attribute__((__packed__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.h"
struct bfa_cee_cbfn {
   void (*get_attr_cbfn)(void *, enum bfa_status ) ;
   void *get_attr_cbarg ;
   void (*get_stats_cbfn)(void *, enum bfa_status ) ;
   void *get_stats_cbarg ;
   void (*reset_stats_cbfn)(void *, enum bfa_status ) ;
   void *reset_stats_cbarg ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.h"
struct bfa_cee {
   void *dev ;
   bool get_attr_pending ;
   bool get_stats_pending ;
   bool reset_stats_pending ;
   enum bfa_status get_attr_status ;
   enum bfa_status get_stats_status ;
   enum bfa_status reset_stats_status ;
   struct bfa_cee_cbfn cbfn ;
   struct bfa_ioc_notify ioc_notify ;
   struct bfa_cee_attr *attr ;
   struct bfa_cee_stats *stats ;
   struct bfa_dma attr_dma ;
   struct bfa_dma stats_dma ;
   struct bfa_ioc *ioc ;
   struct bfa_mbox_cmd get_cfg_mb ;
   struct bfa_mbox_cmd get_stats_mb ;
   struct bfa_mbox_cmd reset_stats_mb ;
};
#line 56 
struct bfa_msgq;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
struct bfa_msgq_cmd_entry {
   struct list_head qe ;
   void (*cbfn)(void *, enum bfa_status ) ;
   void *cbarg ;
   size_t msg_size ;
   struct bfi_msgq_mhdr *msg_hdr ;
};
#line 53 
enum bfa_msgq_cmdq_flags {
    BFA_MSGQ_CMDQ_F_DB_UPDATE = 1
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
struct bfa_msgq_cmdq {
   void (*fsm)(void *, int ) ;
   enum bfa_msgq_cmdq_flags flags ;
   u16 producer_index ;
   u16 consumer_index ;
   u16 depth ;
   struct bfa_dma addr ;
   struct bfa_mbox_cmd dbell_mb ;
   u16 token ;
   int offset ;
   int bytes_to_copy ;
   struct bfa_mbox_cmd copy_mb ;
   struct list_head pending_q ;
   struct bfa_msgq *msgq ;
};
#line 77 
enum bfa_msgq_rspq_flags {
    BFA_MSGQ_RSPQ_F_DB_UPDATE = 1
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
struct __anonstruct_rsphdlr_1057 {
   void (*cbfn)(void *, struct bfi_msgq_mhdr *) ;
   void *cbarg ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
struct bfa_msgq_rspq {
   void (*fsm)(void *, int ) ;
   enum bfa_msgq_rspq_flags flags ;
   u16 producer_index ;
   u16 consumer_index ;
   u16 depth ;
   struct bfa_dma addr ;
   struct bfa_mbox_cmd dbell_mb ;
   int nmclass ;
   struct __anonstruct_rsphdlr_1057 rsphdlr[34U] ;
   struct bfa_msgq *msgq ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
struct bfa_msgq {
   struct bfa_msgq_cmdq cmdq ;
   struct bfa_msgq_rspq rspq ;
   struct bfa_wc init_wc ;
   struct bfa_mbox_cmd init_mb ;
   struct bfa_ioc_notify ioc_notify ;
   struct bfa_ioc *ioc ;
};
#line 122 
struct bna_mcam_handle;
#line 123 
struct bna_txq;
#line 124 
struct bna_tx;
#line 125 
struct bna_rxq;
#line 126 
struct bna_cq;
#line 127 
struct bna_rx;
#line 128 
struct bna_rxf;
#line 129 
struct bna_enet;
#line 130 
struct bna;
#line 131 
struct bnad;
#line 132 
enum bna_status {
    BNA_STATUS_T_DISABLED = 0,
    BNA_STATUS_T_ENABLED = 1
};
#line 137 
enum bna_cleanup_type {
    BNA_HARD_CLEANUP = 0,
    BNA_SOFT_CLEANUP = 1
};
#line 142 
enum bna_cb_status {
    BNA_CB_SUCCESS = 0,
    BNA_CB_FAIL = 1,
    BNA_CB_INTERRUPT = 2,
    BNA_CB_BUSY = 3,
    BNA_CB_INVALID_MAC = 4,
    BNA_CB_MCAST_LIST_FULL = 5,
    BNA_CB_UCAST_CAM_FULL = 6,
    BNA_CB_WAITING = 7,
    BNA_CB_NOT_EXEC = 8
};
#line 154 
enum bna_res_type {
    BNA_RES_T_MEM = 1,
    BNA_RES_T_INTR = 2
};
#line 159 
enum bna_mem_type {
    BNA_MEM_T_KVA = 1,
    BNA_MEM_T_DMA = 2
};
#line 164 
enum bna_intr_type {
    BNA_INTR_T_INTX = 1,
    BNA_INTR_T_MSIX = 2
};
#line 220 
enum bna_tx_type {
    BNA_TX_T_REGULAR = 0,
    BNA_TX_T_LOOPBACK = 1
};
#line 225 
enum bna_tx_flags {
    BNA_TX_F_ENET_STARTED = 1,
    BNA_TX_F_ENABLED = 2,
    BNA_TX_F_BW_UPDATED = 8
};
#line 231 
enum bna_tx_mod_flags {
    BNA_TX_MOD_F_ENET_STARTED = 1,
    BNA_TX_MOD_F_ENET_LOOPBACK = 2
};
#line 236 
enum bna_rx_type {
    BNA_RX_T_REGULAR = 0,
    BNA_RX_T_LOOPBACK = 1
};
#line 241 
enum bna_rxp_type {
    BNA_RXP_SINGLE = 1,
    BNA_RXP_SLR = 2,
    BNA_RXP_HDS = 3
};
#line 247 
enum bna_rxmode {
    BNA_RXMODE_PROMISC = 1,
    BNA_RXMODE_DEFAULT = 2,
    BNA_RXMODE_ALLMULTI = 4
};
#line 264 
enum bna_rx_flags {
    BNA_RX_F_ENET_STARTED = 1,
    BNA_RX_F_ENABLED = 2
};
#line 269 
enum bna_rx_mod_flags {
    BNA_RX_MOD_F_ENET_STARTED = 1,
    BNA_RX_MOD_F_ENET_LOOPBACK = 2
};
#line 282 
enum bna_enet_type {
    BNA_ENET_T_REGULAR = 0,
    BNA_ENET_T_LOOPBACK_INTERNAL = 1,
    BNA_ENET_T_LOOPBACK_EXTERNAL = 2
};
#line 288 
enum bna_link_status {
    BNA_LINK_DOWN = 0,
    BNA_LINK_UP = 1,
    BNA_CEE_UP = 2
};
#line 294 
enum bna_ethport_flags {
    BNA_ETHPORT_F_ADMIN_UP = 1,
    BNA_ETHPORT_F_PORT_ENABLED = 2,
    BNA_ETHPORT_F_RX_STARTED = 4
};
#line 300 
enum bna_enet_flags {
    BNA_ENET_F_IOCETH_READY = 1,
    BNA_ENET_F_ENABLED = 2,
    BNA_ENET_F_PAUSE_CHANGED = 4,
    BNA_ENET_F_MTU_CHANGED = 8
};
#line 307 
enum bna_rss_flags {
    BNA_RSS_F_RIT_PENDING = 1,
    BNA_RSS_F_CFG_PENDING = 2,
    BNA_RSS_F_STATUS_PENDING = 4
};
#line 313 
enum bna_mod_flags {
    BNA_MOD_F_INIT_DONE = 1
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ident {
   int id ;
   char name[64U] ;
};
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_mac {
   struct list_head qe ;
   u8 addr[6U] ;
   struct bna_mcam_handle *handle ;
};
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_mem_descr {
   u32 len ;
   void *kva ;
   struct bna_dma_addr dma ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_mem_info {
   enum bna_mem_type mem_type ;
   u32 len ;
   u32 num ;
   u32 align_sz ;
   struct bna_mem_descr *mdl ;
   void *cookie ;
};
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_intr_descr {
   int vector ;
};
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_intr_info {
   enum bna_intr_type intr_type ;
   int num ;
   struct bna_intr_descr *idl ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
union bna_res_u {
   struct bna_mem_info mem_info ;
   struct bna_intr_info intr_info ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_res_info {
   enum bna_res_type res_type ;
   union bna_res_u res_u ;
};
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_qpt {
   struct bna_dma_addr hw_qpt_ptr ;
   void *kv_qpt_ptr ;
   u32 page_count ;
   u32 page_size ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_attr {
   bool fw_query_complete ;
   int num_txq ;
   int num_rxp ;
   int num_ucmac ;
   int num_mcmac ;
   int max_rit_size ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ioceth {
   void (*fsm)(void *, int ) ;
   struct bfa_ioc ioc ;
   struct bna_attr attr ;
   struct bfa_msgq_cmd_entry msgq_cmd ;
   struct bfi_enet_attr_req attr_req ;
   void (*stop_cbfn)(struct bnad *) ;
   struct bnad *stop_cbarg ;
   struct bna *bna ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_pause_config {
   enum bna_status tx_pause ;
   enum bna_status rx_pause ;
};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_enet {
   void (*fsm)(void *, int ) ;
   enum bna_enet_flags flags ;
   enum bna_enet_type type ;
   struct bna_pause_config pause_config ;
   int mtu ;
   void (*stop_cbfn)(void *) ;
   void *stop_cbarg ;
   void (*mtu_cbfn)(struct bnad *) ;
   struct bfa_wc chld_stop_wc ;
   struct bfa_msgq_cmd_entry msgq_cmd ;
   struct bfi_enet_set_pause_req pause_req ;
   struct bna *bna ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
union __anonunion_bfi_enet_cmd_1058 {
   struct bfi_enet_enable_req admin_req ;
   struct bfi_enet_diag_lb_req lpbk_req ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ethport {
   void (*fsm)(void *, int ) ;
   enum bna_ethport_flags flags ;
   enum bna_link_status link_status ;
   int rx_started_count ;
   void (*stop_cbfn)(struct bna_enet *) ;
   void (*adminup_cbfn)(struct bnad *, enum bna_cb_status ) ;
   void (*link_cbfn)(struct bnad *, enum bna_link_status ) ;
   struct bfa_msgq_cmd_entry msgq_cmd ;
   union __anonunion_bfi_enet_cmd_1058 bfi_enet_cmd ;
   struct bna *bna ;
};
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ib_dbell {
   void *doorbell_addr ;
   u32 doorbell_ack ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ib {
   struct bna_dma_addr ib_seg_host_addr ;
   void *ib_seg_host_addr_kva ;
   struct bna_ib_dbell door_bell ;
   enum bna_intr_type intr_type ;
   int intr_vector ;
   u8 coalescing_timeo ;
   int interpkt_count ;
   int interpkt_timeo ;
};
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_tcb {
   void **sw_qpt ;
   void *sw_q ;
   void *unmap_q ;
   u32 producer_index ;
   u32 consumer_index ;
   u32 *hw_consumer_index ;
   u32 q_depth ;
   void *q_dbell ;
   struct bna_ib_dbell *i_dbell ;
   struct bna_txq *txq ;
   struct bnad *bnad ;
   void *priv ;
   enum bna_intr_type intr_type ;
   int intr_vector ;
   u8 priority ;
   unsigned long flags ;
   int id ;
   char name[16U] ;
};
#line 438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_txq {
   struct list_head qe ;
   u8 priority ;
   struct bna_qpt qpt ;
   struct bna_tcb *tcb ;
   struct bna_ib ib ;
   struct bna_tx *tx ;
   int hw_id ;
   u64 tx_packets ;
   u64 tx_bytes ;
};
#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
union __anonunion_bfi_enet_cmd_1059 {
   struct bfi_enet_tx_cfg_req cfg_req ;
   struct bfi_enet_req req ;
   struct bfi_enet_tx_cfg_rsp cfg_rsp ;
};
#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_tx {
   struct list_head qe ;
   int rid ;
   int hw_id ;
   void (*fsm)(void *, int ) ;
   enum bna_tx_flags flags ;
   enum bna_tx_type type ;
   int num_txq ;
   struct list_head txq_q ;
   u16 txf_vlan_id ;
   void (*tcb_setup_cbfn)(struct bnad *, struct bna_tcb *) ;
   void (*tcb_destroy_cbfn)(struct bnad *, struct bna_tcb *) ;
   void (*tx_stall_cbfn)(struct bnad *, struct bna_tx *) ;
   void (*tx_resume_cbfn)(struct bnad *, struct bna_tx *) ;
   void (*tx_cleanup_cbfn)(struct bnad *, struct bna_tx *) ;
   void (*stop_cbfn)(void *, struct bna_tx *) ;
   void *stop_cbarg ;
   struct bfa_msgq_cmd_entry msgq_cmd ;
   union __anonunion_bfi_enet_cmd_1059 bfi_enet_cmd ;
   struct bna *bna ;
   void *priv ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_tx_config {
   int num_txq ;
   int txq_depth ;
   int coalescing_timeo ;
   enum bna_tx_type tx_type ;
};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_tx_event_cbfn {
   void (*tcb_setup_cbfn)(struct bnad *, struct bna_tcb *) ;
   void (*tcb_destroy_cbfn)(struct bnad *, struct bna_tcb *) ;
   void (*tx_stall_cbfn)(struct bnad *, struct bna_tx *) ;
   void (*tx_resume_cbfn)(struct bnad *, struct bna_tx *) ;
   void (*tx_cleanup_cbfn)(struct bnad *, struct bna_tx *) ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_tx_mod {
   struct bna_tx *tx ;
   struct bna_txq *txq ;
   struct list_head tx_free_q ;
   struct list_head tx_active_q ;
   struct list_head txq_free_q ;
   void (*stop_cbfn)(struct bna_enet *) ;
   struct bfa_wc tx_stop_wc ;
   enum bna_tx_mod_flags flags ;
   u8 prio_map ;
   int default_prio ;
   int iscsi_over_cee ;
   int iscsi_prio ;
   int prio_reconfigured ;
   u32 rid_mask ;
   struct bna *bna ;
};
#line 543 
struct bna_ccb;
#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rcb {
   void **sw_qpt ;
   void *sw_q ;
   void *unmap_q ;
   u32 producer_index ;
   u32 consumer_index ;
   u32 q_depth ;
   void *q_dbell ;
   struct bna_rxq *rxq ;
   struct bna_ccb *ccb ;
   struct bnad *bnad ;
   void *priv ;
   unsigned long flags ;
   int id ;
};
#line 562 
struct bna_rxp;
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rxq {
   struct list_head qe ;
   int buffer_size ;
   int q_depth ;
   u32 num_vecs ;
   enum bna_status multi_buffer ;
   struct bna_qpt qpt ;
   struct bna_rcb *rcb ;
   struct bna_rxp *rxp ;
   struct bna_rx *rx ;
   int hw_id ;
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 rx_packets_with_error ;
   u64 rxbuf_alloc_failed ;
   u64 rxbuf_map_failed ;
};
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct __anonstruct_hds_1060 {
   struct bna_rxq *hdr ;
   struct bna_rxq *data ;
};
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct __anonstruct_slr_1061 {
   struct bna_rxq *small ;
   struct bna_rxq *large ;
};
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct __anonstruct_single_1062 {
   struct bna_rxq *only ;
   struct bna_rxq *reserved ;
};
#line 586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
union bna_rxq_u {
   struct __anonstruct_hds_1060 hds ;
   struct __anonstruct_slr_1061 slr ;
   struct __anonstruct_single_1062 single ;
};
#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_pkt_rate {
   u32 small_pkt_cnt ;
   u32 large_pkt_cnt ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ccb {
   void **sw_qpt ;
   void *sw_q ;
   u32 producer_index ;
   u32 *hw_producer_index ;
   u32 q_depth ;
   struct bna_ib_dbell *i_dbell ;
   struct bna_rcb *rcb[2U] ;
   void *ctrl ;
   struct bna_pkt_rate pkt_rate ;
   u32 pkts_una ;
   u32 bytes_per_intr ;
   struct bna_cq *cq ;
   struct bnad *bnad ;
   void *priv ;
   enum bna_intr_type intr_type ;
   int intr_vector ;
   u8 rx_coalescing_timeo ;
   int id ;
   char name[16U] ;
};
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_cq {
   struct bna_qpt qpt ;
   struct bna_ccb *ccb ;
   struct bna_ib ib ;
   struct bna_rx *rx ;
};
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rss_config {
   enum bfi_enet_rss_type hash_type ;
   u8 hash_mask ;
   u32 toeplitz_hash_key[10U] ;
};
#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_hds_config {
   enum bfi_enet_hds_type hdr_type ;
   int forced_offset ;
};
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rx_config {
   enum bna_rx_type rx_type ;
   int num_paths ;
   enum bna_rxp_type rxp_type ;
   int coalescing_timeo ;
   u32 frame_size ;
   u32 q1_depth ;
   u32 q1_buf_size ;
   u32 q0_depth ;
   u32 q0_buf_size ;
   u32 q0_num_vecs ;
   enum bna_status q0_multi_buf ;
   enum bna_status rss_status ;
   struct bna_rss_config rss_config ;
   struct bna_hds_config hds_config ;
   enum bna_status vlan_strip_status ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rxp {
   struct list_head qe ;
   enum bna_rxp_type type ;
   union bna_rxq_u rxq ;
   struct bna_cq cq ;
   struct bna_rx *rx ;
   int vector ;
   int hw_id ;
};
#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
union __anonunion_bfi_enet_cmd_1063 {
   struct bfi_enet_enable_req req ;
   struct bfi_enet_rss_cfg_req rss_req ;
   struct bfi_enet_rit_req rit_req ;
   struct bfi_enet_rx_vlan_req vlan_req ;
   struct bfi_enet_mcast_add_req mcast_add_req ;
   struct bfi_enet_mcast_del_req mcast_del_req ;
   struct bfi_enet_ucast_req ucast_req ;
};
#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rxf {
   void (*fsm)(void *, int ) ;
   struct bfa_msgq_cmd_entry msgq_cmd ;
   union __anonunion_bfi_enet_cmd_1063 bfi_enet_cmd ;
   void (*start_cbfn)(struct bna_rx *) ;
   struct bna_rx *start_cbarg ;
   void (*stop_cbfn)(struct bna_rx *) ;
   struct bna_rx *stop_cbarg ;
   void (*cam_fltr_cbfn)(struct bnad *, struct bna_rx *) ;
   struct bnad *cam_fltr_cbarg ;
   struct list_head ucast_pending_add_q ;
   struct list_head ucast_pending_del_q ;
   struct bna_mac *ucast_pending_mac ;
   int ucast_pending_set ;
   struct list_head ucast_active_q ;
   struct bna_mac ucast_active_mac ;
   int ucast_active_set ;
   struct list_head mcast_pending_add_q ;
   struct list_head mcast_pending_del_q ;
   struct list_head mcast_active_q ;
   struct list_head mcast_handle_q ;
   enum bna_rxmode rxmode_pending ;
   enum bna_rxmode rxmode_pending_bitmask ;
   enum bna_rxmode rxmode_active ;
   u8 vlan_pending_bitmask ;
   enum bna_status vlan_filter_status ;
   u32 vlan_filter_table[128U] ;
   bool vlan_strip_pending ;
   enum bna_status vlan_strip_status ;
   enum bna_rss_flags rss_pending ;
   enum bna_status rss_status ;
   struct bna_rss_config rss_cfg ;
   u8 *rit ;
   int rit_size ;
   struct bna_rx *rx ;
};
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
union __anonunion_bfi_enet_cmd_1064 {
   struct bfi_enet_rx_cfg_req cfg_req ;
   struct bfi_enet_req req ;
   struct bfi_enet_rx_cfg_rsp cfg_rsp ;
};
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rx {
   struct list_head qe ;
   int rid ;
   int hw_id ;
   void (*fsm)(void *, int ) ;
   enum bna_rx_type type ;
   int num_paths ;
   struct list_head rxp_q ;
   struct bna_hds_config hds_cfg ;
   struct bna_rxf rxf ;
   enum bna_rx_flags rx_flags ;
   struct bfa_msgq_cmd_entry msgq_cmd ;
   union __anonunion_bfi_enet_cmd_1064 bfi_enet_cmd ;
   void (*rcb_setup_cbfn)(struct bnad *, struct bna_rcb *) ;
   void (*rcb_destroy_cbfn)(struct bnad *, struct bna_rcb *) ;
   void (*ccb_setup_cbfn)(struct bnad *, struct bna_ccb *) ;
   void (*ccb_destroy_cbfn)(struct bnad *, struct bna_ccb *) ;
   void (*rx_stall_cbfn)(struct bnad *, struct bna_rx *) ;
   void (*rx_cleanup_cbfn)(struct bnad *, struct bna_rx *) ;
   void (*rx_post_cbfn)(struct bnad *, struct bna_rx *) ;
   void (*stop_cbfn)(void *, struct bna_rx *) ;
   void *stop_cbarg ;
   struct bna *bna ;
   void *priv ;
};
#line 815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rx_event_cbfn {
   void (*rcb_setup_cbfn)(struct bnad *, struct bna_rcb *) ;
   void (*rcb_destroy_cbfn)(struct bnad *, struct bna_rcb *) ;
   void (*ccb_setup_cbfn)(struct bnad *, struct bna_ccb *) ;
   void (*ccb_destroy_cbfn)(struct bnad *, struct bna_ccb *) ;
   void (*rx_stall_cbfn)(struct bnad *, struct bna_rx *) ;
   void (*rx_cleanup_cbfn)(struct bnad *, struct bna_rx *) ;
   void (*rx_post_cbfn)(struct bnad *, struct bna_rx *) ;
};
#line 828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_rx_mod {
   struct bna *bna ;
   struct bna_rx *rx ;
   struct bna_rxp *rxp ;
   struct bna_rxq *rxq ;
   struct list_head rx_free_q ;
   struct list_head rx_active_q ;
   int rx_free_count ;
   struct list_head rxp_free_q ;
   int rxp_free_count ;
   struct list_head rxq_free_q ;
   int rxq_free_count ;
   enum bna_rx_mod_flags flags ;
   void (*stop_cbfn)(struct bna_enet *) ;
   struct bfa_wc rx_stop_wc ;
   u32 dim_vector[8U][2U] ;
   u32 rid_mask ;
};
#line 856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_ucam_mod {
   struct bna_mac *ucmac ;
   struct list_head free_q ;
   struct list_head del_q ;
   struct bna *bna ;
};
#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_mcam_handle {
   struct list_head qe ;
   int handle ;
   int refcnt ;
};
#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_mcam_mod {
   struct bna_mac *mcmac ;
   struct bna_mcam_handle *mchandle ;
   struct list_head free_q ;
   struct list_head del_q ;
   struct list_head free_handle_q ;
   struct bna *bna ;
};
#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_stats {
   struct bna_dma_addr hw_stats_dma ;
   struct bfi_enet_stats *hw_stats_kva ;
   struct bfi_enet_stats hw_stats ;
};
#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna_stats_mod {
   bool ioc_ready ;
   bool stats_get_busy ;
   bool stats_clr_busy ;
   struct bfa_msgq_cmd_entry stats_get_cmd ;
   struct bfa_msgq_cmd_entry stats_clr_cmd ;
   struct bfi_enet_stats_req stats_get ;
   struct bfi_enet_stats_req stats_clr ;
};
#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_types.h"
struct bna {
   struct bna_ident ident ;
   struct bfa_pcidev pcidev ;
   struct bna_reg regs ;
   struct bna_bit_defn bits ;
   struct bna_stats stats ;
   struct bna_ioceth ioceth ;
   struct bfa_cee cee ;
   struct bfa_flash flash ;
   struct bfa_msgq msgq ;
   struct bna_ethport ethport ;
   struct bna_enet enet ;
   struct bna_stats_mod stats_mod ;
   struct bna_tx_mod tx_mod ;
   struct bna_rx_mod rx_mod ;
   struct bna_ucam_mod ucam_mod ;
   struct bna_mcam_mod mcam_mod ;
   enum bna_mod_flags mod_flags ;
   int default_mode_rid ;
   int promisc_rid ;
   struct bnad *bnad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_rx_ctrl {
   struct bna_ccb *ccb ;
   struct bnad *bnad ;
   unsigned long flags ;
   struct napi_struct napi ;
   u64 rx_intr_ctr ;
   u64 rx_poll_ctr ;
   u64 rx_schedule ;
   u64 rx_keep_poll ;
   u64 rx_complete ;
};
#line 58 
enum bnad_intr_source {
    BNAD_INTR_TX = 1,
    BNAD_INTR_RX = 2
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_iocmd_comp {
   struct bnad *bnad ;
   struct completion comp ;
   int comp_status ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_completion {
   struct completion ioc_comp ;
   struct completion ucast_comp ;
   struct completion mcast_comp ;
   struct completion tx_comp ;
   struct completion rx_comp ;
   struct completion stats_comp ;
   struct completion enet_comp ;
   struct completion mtu_comp ;
   u8 ioc_comp_status ;
   u8 ucast_comp_status ;
   u8 mcast_comp_status ;
   u8 tx_comp_status ;
   u8 rx_comp_status ;
   u8 stats_comp_status ;
   u8 port_comp_status ;
   u8 mtu_comp_status ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_drv_stats {
   u64 netif_queue_stop ;
   u64 netif_queue_wakeup ;
   u64 netif_queue_stopped ;
   u64 tso4 ;
   u64 tso6 ;
   u64 tso_err ;
   u64 tcpcsum_offload ;
   u64 udpcsum_offload ;
   u64 csum_help ;
   u64 tx_skb_too_short ;
   u64 tx_skb_stopping ;
   u64 tx_skb_max_vectors ;
   u64 tx_skb_mss_too_long ;
   u64 tx_skb_tso_too_short ;
   u64 tx_skb_tso_prepare ;
   u64 tx_skb_non_tso_too_long ;
   u64 tx_skb_tcp_hdr ;
   u64 tx_skb_udp_hdr ;
   u64 tx_skb_csum_err ;
   u64 tx_skb_headlen_too_long ;
   u64 tx_skb_headlen_zero ;
   u64 tx_skb_frag_zero ;
   u64 tx_skb_len_mismatch ;
   u64 tx_skb_map_failed ;
   u64 hw_stats_updates ;
   u64 netif_rx_dropped ;
   u64 link_toggle ;
   u64 cee_toggle ;
   u64 rxp_info_alloc_failed ;
   u64 mbox_intr_disabled ;
   u64 mbox_intr_enabled ;
   u64 tx_unmap_q_alloc_failed ;
   u64 rx_unmap_q_alloc_failed ;
   u64 rxbuf_alloc_failed ;
   u64 rxbuf_map_failed ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_stats {
   struct bnad_drv_stats drv_stats ;
   struct bna_stats *bna_stats ;
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_tx_res_info {
   struct bna_res_info res_info[7U] ;
};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_rx_res_info {
   struct bna_res_info res_info[16U] ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_tx_info {
   struct bna_tx *tx ;
   struct bna_tcb *tcb[8U] ;
   u32 tx_id ;
   struct delayed_work tx_cleanup_work ;
} __attribute__((__aligned__(64)));
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_rx_info {
   struct bna_rx *rx ;
   struct bnad_rx_ctrl rx_ctrl[16U] ;
   u32 rx_id ;
   struct work_struct rx_cleanup_work ;
} __attribute__((__aligned__(64)));
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_tx_vector {
   dma_addr_t dma_addr ;
   __u32 dma_len ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_tx_unmap {
   struct sk_buff *skb ;
   u32 nvecs ;
   struct bnad_tx_vector vectors[4U] ;
};
#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_rx_vector {
   dma_addr_t dma_addr ;
   u32 len ;
};
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_rx_unmap {
   struct page *page ;
   struct sk_buff *skb ;
   struct bnad_rx_vector vector ;
   u32 page_offset ;
};
#line 240 
enum bnad_rxbuf_type {
    BNAD_RXBUF_NONE = 0,
    BNAD_RXBUF_SK_BUFF = 1,
    BNAD_RXBUF_PAGE = 2,
    BNAD_RXBUF_MULTI_BUFF = 3
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_rx_unmap_q {
   int reuse_pi ;
   int alloc_order ;
   u32 map_size ;
   enum bnad_rxbuf_type type ;
   struct bnad_rx_unmap unmap[0U] ;
};
#line 280 
struct bnad_diag;
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad {
   struct net_device *netdev ;
   u32 id ;
   struct bnad_tx_info tx_info[1U] ;
   struct bnad_rx_info rx_info[1U] ;
   unsigned long active_vlans[64U] ;
   u32 num_tx ;
   u32 num_rx ;
   u32 num_txq_per_tx ;
   u32 num_rxp_per_rx ;
   u32 txq_depth ;
   u32 rxq_depth ;
   u8 tx_coalescing_timeo ;
   u8 rx_coalescing_timeo ;
   struct bna_rx_config rx_config[1U] ;
   struct bna_tx_config tx_config[1U] ;
   void *bar0 ;
   struct bna bna ;
   u32 cfg_flags ;
   unsigned long run_flags ;
   struct pci_dev *pcidev ;
   u64 mmio_start ;
   u64 mmio_len ;
   u32 msix_num ;
   struct msix_entry *msix_table ;
   struct mutex conf_mutex ;
   spinlock_t bna_lock ;
   struct timer_list ioc_timer ;
   struct timer_list dim_timer ;
   struct timer_list stats_timer ;
   struct bna_res_info res_info[4U] ;
   struct bna_res_info mod_res_info[8U] ;
   struct bnad_tx_res_info tx_res_info[1U] ;
   struct bnad_rx_res_info rx_res_info[1U] ;
   struct bnad_completion bnad_completions ;
   u8 perm_addr[6U] ;
   struct workqueue_struct *work_q ;
   struct bnad_stats stats ;
   struct bnad_diag *diag ;
   char adapter_name[64U] ;
   char port_name[64U] ;
   char mbox_irq_name[64U] ;
   char wq_name[64U] ;
   char *regdata ;
   u32 reglen ;
   struct dentry *bnad_dentry_files[5U] ;
   struct dentry *port_debugfs_root ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_adapter_attr {
   char manufacturer[8U] ;
   char serial_num[12U] ;
   u32 card_type ;
   char model[16U] ;
   char model_descr[128U] ;
   u64 pwwn ;
   char node_symname[256U] ;
   char hw_ver[64U] ;
   char fw_ver[64U] ;
   char optrom_ver[64U] ;
   char os_type[64U] ;
   struct bfa_mfg_vpd vpd ;
   u8 mac[6U] ;
   u8 nports ;
   u8 max_speed ;
   u8 prototype ;
   char asic_rev ;
   u8 pcie_gen ;
   u8 pcie_lanes_orig ;
   u8 pcie_lanes ;
   u8 cna_capable ;
   u8 is_mezz ;
   u8 trunk_capable ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_ioc_driver_attr {
   char driver[16U] ;
   char driver_ver[64U] ;
   char fw_ver[64U] ;
   char bios_ver[64U] ;
   char efi_ver[64U] ;
   char ob_ver[64U] ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_ioc_pci_attr {
   u16 vendor_id ;
   u16 device_id ;
   u16 ssid ;
   u16 ssvid ;
   u32 pcifn ;
   u32 rsvd ;
   char chip_rev[8U] ;
};
#line 92 
enum bfa_ioc_state {
    BFA_IOC_UNINIT = 1,
    BFA_IOC_RESET = 2,
    BFA_IOC_SEMWAIT = 3,
    BFA_IOC_HWINIT = 4,
    BFA_IOC_GETATTR = 5,
    BFA_IOC_OPERATIONAL = 6,
    BFA_IOC_INITFAIL = 7,
    BFA_IOC_FAIL = 8,
    BFA_IOC_DISABLING = 9,
    BFA_IOC_DISABLED = 10,
    BFA_IOC_FWMISMATCH = 11,
    BFA_IOC_ENABLING = 12,
    BFA_IOC_HWFAIL = 13
};
#line 141 
enum bfa_ioc_type {
    BFA_IOC_TYPE_FC = 1,
    BFA_IOC_TYPE_FCoE = 2,
    BFA_IOC_TYPE_LL = 3
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_ioc_attr {
   enum bfa_ioc_type ioc_type ;
   enum bfa_ioc_state state ;
   struct bfa_adapter_attr adapter_attr ;
   struct bfa_ioc_driver_attr driver_attr ;
   struct bfa_ioc_pci_attr pci_attr ;
   u8 port_id ;
   u8 port_mode ;
   u8 cap_bm ;
   u8 port_mode_cfg ;
   u8 def_fn ;
   u8 rsvd[3U] ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_flash_part_attr {
   u32 part_type ;
   u32 part_instance ;
   u32 part_off ;
   u32 part_size ;
   u32 part_len ;
   u32 part_status ;
   char rsv[8U] ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_defs.h"
struct bfa_flash_attr {
   u32 status ;
   u32 npart ;
   struct bfa_flash_part_attr part[32U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3207 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3209 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3211 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
enum bfi_enet_h2i_msgs {
    BFI_ENET_H2I_RX_CFG_SET_REQ = 1,
    BFI_ENET_H2I_RX_CFG_CLR_REQ = 2,
    BFI_ENET_H2I_RIT_CFG_REQ = 3,
    BFI_ENET_H2I_RSS_CFG_REQ = 4,
    BFI_ENET_H2I_RSS_ENABLE_REQ = 5,
    BFI_ENET_H2I_RX_PROMISCUOUS_REQ = 6,
    BFI_ENET_H2I_RX_DEFAULT_REQ = 7,
    BFI_ENET_H2I_MAC_UCAST_SET_REQ = 8,
    BFI_ENET_H2I_MAC_UCAST_CLR_REQ = 9,
    BFI_ENET_H2I_MAC_UCAST_ADD_REQ = 10,
    BFI_ENET_H2I_MAC_UCAST_DEL_REQ = 11,
    BFI_ENET_H2I_MAC_MCAST_ADD_REQ = 12,
    BFI_ENET_H2I_MAC_MCAST_DEL_REQ = 13,
    BFI_ENET_H2I_MAC_MCAST_FILTER_REQ = 14,
    BFI_ENET_H2I_RX_VLAN_SET_REQ = 15,
    BFI_ENET_H2I_RX_VLAN_STRIP_ENABLE_REQ = 16,
    BFI_ENET_H2I_TX_CFG_SET_REQ = 17,
    BFI_ENET_H2I_TX_CFG_CLR_REQ = 18,
    BFI_ENET_H2I_PORT_ADMIN_UP_REQ = 19,
    BFI_ENET_H2I_SET_PAUSE_REQ = 20,
    BFI_ENET_H2I_DIAG_LOOPBACK_REQ = 21,
    BFI_ENET_H2I_GET_ATTR_REQ = 22,
    BFI_ENET_H2I_STATS_GET_REQ = 23,
    BFI_ENET_H2I_STATS_CLR_REQ = 24,
    BFI_ENET_H2I_WOL_MAGIC_REQ = 25,
    BFI_ENET_H2I_WOL_FRAME_REQ = 26,
    BFI_ENET_H2I_MAX = 27
};
#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_rsp {
   struct bfi_msgq_mhdr mh ;
   u8 error ;
   u8 rsvd ;
   u16 cmd_offset ;
} __attribute__((__packed__));
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_mcast_add_rsp {
   struct bfi_msgq_mhdr mh ;
   u8 error ;
   u8 rsvd ;
   u16 cmd_offset ;
   u16 handle ;
   u8 rsvd1[2U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
enum bna_rx_event {
    RX_E_START = 1,
    RX_E_STOP = 2,
    RX_E_FAIL = 3,
    RX_E_STARTED = 4,
    RX_E_STOPPED = 5,
    RX_E_RXF_STARTED = 6,
    RX_E_RXF_STOPPED = 7,
    RX_E_CLEANUP_DONE = 8
};
#line 274 
enum bna_rxf_event {
    RXF_E_START = 1,
    RXF_E_STOP = 2,
    RXF_E_FAIL = 3,
    RXF_E_CONFIG = 4,
    RXF_E_FW_RESP = 7
};
#line 2774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
enum bna_tx_event {
    TX_E_START = 1,
    TX_E_STOP = 2,
    TX_E_FAIL = 3,
    TX_E_STARTED = 4,
    TX_E_STOPPED = 5,
    TX_E_CLEANUP_DONE = 7,
    TX_E_BW_UPDATE = 8
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3984 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3986 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
struct bnad_drvinfo {
   struct bfa_ioc_attr ioc_attr ;
   struct bfa_cee_attr cee_attr ;
   struct bfa_flash_attr flash_attr ;
   u32 cee_status ;
   u32 flash_status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
struct bnad_debug_info {
   char *debug_buffer ;
   void *i_private ;
   int buffer_len ;
};
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
struct bnad_debugfs_entry {
   char *name ;
   umode_t mode ;
   struct file_operations *fops ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4996 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4998 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5000 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
enum bfi_mclass {
    BFI_MC_IOC = 1,
    BFI_MC_DIAG = 2,
    BFI_MC_FLASH = 3,
    BFI_MC_CEE = 4,
    BFI_MC_FCPORT = 5,
    BFI_MC_IOCFC = 6,
    BFI_MC_LL = 7,
    BFI_MC_UF = 8,
    BFI_MC_FCXP = 9,
    BFI_MC_LPS = 10,
    BFI_MC_RPORT = 11,
    BFI_MC_ITNIM = 12,
    BFI_MC_IOIM_READ = 13,
    BFI_MC_IOIM_WRITE = 14,
    BFI_MC_IOIM_IO = 15,
    BFI_MC_IOIM = 16,
    BFI_MC_IOIM_IOCOM = 17,
    BFI_MC_TSKIM = 18,
    BFI_MC_SBOOT = 19,
    BFI_MC_IPFC = 20,
    BFI_MC_PORT = 21,
    BFI_MC_SFP = 22,
    BFI_MC_MSGQ = 23,
    BFI_MC_ENET = 24,
    BFI_MC_PHY = 25,
    BFI_MC_NBOOT = 26,
    BFI_MC_TIO_READ = 27,
    BFI_MC_TIO_WRITE = 28,
    BFI_MC_TIO_DATA_XFERED = 29,
    BFI_MC_TIO_IO = 30,
    BFI_MC_TIO = 31,
    BFI_MC_MFG = 32,
    BFI_MC_EDMA = 33,
    BFI_MC_MAX = 34
};
#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq {
   union bfi_addr_u addr ;
   u16 q_depth ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq_cfg_req {
   struct bfi_mhdr mh ;
   struct bfi_msgq cmdq ;
   struct bfi_msgq rspq ;
} __attribute__((__packed__));
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
union __anonunion_idx_5685 {
   u16 cmdq_pi ;
   u16 rspq_ci ;
} __attribute__((__packed__));
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq_h2i_db {
   struct bfi_mhdr mh ;
   union __anonunion_idx_5685 idx ;
} __attribute__((__packed__));
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
union __anonunion_idx_5686 {
   u16 rspq_pi ;
   u16 cmdq_ci ;
} __attribute__((__packed__));
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq_i2h_db {
   struct bfi_mhdr mh ;
   union __anonunion_idx_5686 idx ;
} __attribute__((__packed__));
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq_h2i_cmdq_copy_rsp {
   struct bfi_mhdr mh ;
   u8 data[28U] ;
} __attribute__((__packed__));
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_msgq_i2h_cmdq_copy_req {
   struct bfi_mhdr mh ;
   u16 offset ;
   u16 len ;
} __attribute__((__packed__));
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
enum cmdq_event {
    CMDQ_E_START = 1,
    CMDQ_E_STOP = 2,
    CMDQ_E_FAIL = 3,
    CMDQ_E_POST = 4,
    CMDQ_E_INIT_RESP = 5,
    CMDQ_E_DB_READY = 6
};
#line 312 
enum rspq_event {
    RSPQ_E_START = 1,
    RSPQ_E_STOP = 2,
    RSPQ_E_FAIL = 3,
    RSPQ_E_RESP = 4,
    RSPQ_E_INIT_RESP = 5,
    RSPQ_E_DB_READY = 6
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5701 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5703 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_enet.h"
struct bfi_enet_attr_rsp {
   struct bfi_msgq_mhdr mh ;
   u8 error ;
   u8 rsvd ;
   u16 cmd_offset ;
   u32 max_cfg ;
   u32 max_ucmac ;
   u32 rit_size ;
} __attribute__((__packed__));
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_hw_defs.h"
struct bna_reg_offset {
   u32 fn_int_status ;
   u32 fn_int_mask ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
enum bna_ethport_event {
    ETHPORT_E_START = 1,
    ETHPORT_E_STOP = 2,
    ETHPORT_E_FAIL = 3,
    ETHPORT_E_UP = 4,
    ETHPORT_E_DOWN = 5,
    ETHPORT_E_FWRESP_UP_OK = 6,
    ETHPORT_E_FWRESP_DOWN = 7,
    ETHPORT_E_FWRESP_UP_FAIL = 8
};
#line 38 
enum bna_enet_event {
    ENET_E_START = 1,
    ENET_E_STOP = 2,
    ENET_E_FAIL = 3,
    ENET_E_PAUSE_CFG = 4,
    ENET_E_MTU_CFG = 5,
    ENET_E_FWRESP_PAUSE = 6,
    ENET_E_CHLD_STOPPED = 7
};
#line 48 
enum bna_ioceth_event {
    IOCETH_E_ENABLE = 1,
    IOCETH_E_DISABLE = 2,
    IOCETH_E_IOC_RESET = 3,
    IOCETH_E_IOC_FAILED = 4,
    IOCETH_E_IOC_READY = 5,
    IOCETH_E_ENET_ATTR_RESP = 6,
    IOCETH_E_ENET_STOPPED = 7,
    IOCETH_E_IOC_DISABLED = 8
};
#line 2054  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
union __anonunion___u_6413 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 2066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
union __anonunion___u_6415 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_ioc_fwver {
   u8 major ;
   u8 minor ;
   u8 maint ;
   u8 patch ;
   u8 phase ;
   u8 build ;
   u8 rsvd[2U] ;
} __attribute__((__packed__));
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_ioc_image_hdr {
   u32 signature ;
   u8 asic_gen ;
   u8 asic_mode ;
   u8 port0_mode ;
   u8 port1_mode ;
   u32 exec ;
   u32 bootenv ;
   u32 rsvd_b[2U] ;
   struct bfi_ioc_fwver fwver ;
   u32 md5sum[4U] ;
} __attribute__((__packed__));
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
struct __anonstruct_ct_fnreg_7120 {
   u32 hfn_mbox ;
   u32 lpu_mbox ;
   u32 hfn_pgn ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
struct __anonstruct_ct_p0reg_7121 {
   u32 hfn ;
   u32 lpu ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
struct __anonstruct_ct_p1reg_7122 {
   u32 hfn ;
   u32 lpu ;
};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
struct __anonstruct_ct2_reg_7123 {
   u32 hfn_mbox ;
   u32 lpu_mbox ;
   u32 hfn_pgn ;
   u32 hfn ;
   u32 lpu ;
   u32 lpu_read ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_cna.h"
struct bfi_cee_get_req {
   struct bfi_mhdr mh ;
   union bfi_addr_u dma_addr ;
} __attribute__((__packed__));
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_cna.h"
struct bfi_cee_get_rsp {
   struct bfi_mhdr mh ;
   u8 cmd_status ;
   u8 rsvd[3U] ;
} __attribute__((__packed__));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_cna.h"
struct bfi_cee_stats_rsp {
   struct bfi_mhdr mh ;
   u8 cmd_status ;
   u8 rsvd[3U] ;
} __attribute__((__packed__));
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi_cna.h"
union bfi_cee_i2h_msg_u {
   struct bfi_mhdr mh ;
   struct bfi_cee_get_rsp get_rsp ;
   struct bfi_cee_stats_rsp stats_rsp ;
} __attribute__((__packed__));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7840 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7842 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_7844 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
struct bfa_sm_table {
   void (*sm)(void *, int ) ;
   int state ;
   char *name ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_alen {
   union bfi_addr_u al_addr ;
   u32 al_len ;
} __attribute__((__packed__));
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_ioc_getattr_req {
   struct bfi_mhdr mh ;
   union bfi_addr_u attr_addr ;
} __attribute__((__packed__));
#line 263 
enum bfi_ioc_img_ver_cmp {
    BFI_IOC_IMG_VER_INCOMP = 0,
    BFI_IOC_IMG_VER_OLD = 1,
    BFI_IOC_IMG_VER_SAME = 2,
    BFI_IOC_IMG_VER_BETTER = 3
};
#line 270 
enum bfi_fwboot_type {
    BFI_FWBOOT_TYPE_NORMAL = 0,
    BFI_FWBOOT_TYPE_FLASH = 1,
    BFI_FWBOOT_TYPE_MEMTEST = 2
};
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_ioc_ctrl_req {
   struct bfi_mhdr mh ;
   u16 clscode ;
   u16 rsvd ;
   u32 tv_sec ;
} __attribute__((__packed__));
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_ioc_ctrl_reply {
   struct bfi_mhdr mh ;
   u8 status ;
   u8 port_mode ;
   u8 cap_bm ;
   u8 rsvd ;
} __attribute__((__packed__));
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
union bfi_ioc_i2h_msg_u {
   struct bfi_mhdr mh ;
   struct bfi_ioc_ctrl_reply fw_event ;
   u32 mboxmsg[8U] ;
} __attribute__((__packed__));
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_flash_query_req {
   struct bfi_mhdr mh ;
   struct bfi_alen alen ;
} __attribute__((__packed__));
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_flash_write_req {
   struct bfi_mhdr mh ;
   struct bfi_alen alen ;
   u32 type ;
   u8 instance ;
   u8 last ;
   u8 rsv[2U] ;
   u32 offset ;
   u32 length ;
} __attribute__((__packed__));
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_flash_read_req {
   struct bfi_mhdr mh ;
   u32 type ;
   u8 instance ;
   u8 rsv[3U] ;
   u32 offset ;
   u32 length ;
   struct bfi_alen alen ;
} __attribute__((__packed__));
#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_flash_query_rsp {
   struct bfi_mhdr mh ;
   u32 status ;
} __attribute__((__packed__));
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_flash_read_rsp {
   struct bfi_mhdr mh ;
   u32 type ;
   u8 instance ;
   u8 rsv[3U] ;
   u32 status ;
   u32 length ;
} __attribute__((__packed__));
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfi.h"
struct bfi_flash_write_rsp {
   struct bfi_mhdr mh ;
   u32 type ;
   u8 instance ;
   u8 rsv[3U] ;
   u32 status ;
   u32 length ;
} __attribute__((__packed__));
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
enum ioc_event {
    IOC_E_RESET = 1,
    IOC_E_ENABLE = 2,
    IOC_E_DISABLE = 3,
    IOC_E_DETACH = 4,
    IOC_E_ENABLED = 5,
    IOC_E_FWRSP_GETATTR = 6,
    IOC_E_DISABLED = 7,
    IOC_E_PFFAILED = 8,
    IOC_E_HBFAIL = 9,
    IOC_E_HWERROR = 10,
    IOC_E_TIMEOUT = 11,
    IOC_E_HWFAILED = 12
};
#line 139 
enum iocpf_event {
    IOCPF_E_ENABLE = 1,
    IOCPF_E_DISABLE = 2,
    IOCPF_E_STOP = 3,
    IOCPF_E_FWREADY = 4,
    IOCPF_E_FWRSP_ENABLE = 5,
    IOCPF_E_FWRSP_DISABLE = 6,
    IOCPF_E_FAIL = 7,
    IOCPF_E_INITFAIL = 8,
    IOCPF_E_GETATTRFAIL = 9,
    IOCPF_E_SEMLOCKED = 10,
    IOCPF_E_TIMEOUT = 11,
    IOCPF_E_SEM_ERROR = 12
};
#line 154 
enum bfa_iocpf_state {
    BFA_IOCPF_RESET = 1,
    BFA_IOCPF_SEMWAIT = 2,
    BFA_IOCPF_HWINIT = 3,
    BFA_IOCPF_READY = 4,
    BFA_IOCPF_INITFAIL = 5,
    BFA_IOCPF_FAIL = 6,
    BFA_IOCPF_DISABLING = 7,
    BFA_IOCPF_DISABLED = 8,
    BFA_IOCPF_FWMISMATCH = 9
};
#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
struct __anonstruct_r_8532 {
   u32 cmd : 8 ;
   u32 addr_cnt : 4 ;
   u32 read_cnt : 9 ;
   u32 write_cnt : 9 ;
   u32 rsv : 1 ;
   u32 act : 1 ;
};
#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
union bfa_flash_cmd_reg {
   struct __anonstruct_r_8532 r ;
   u32 i ;
};
#line 1458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
struct __anonstruct_r_8533 {
   u32 good : 1 ;
   u32 bad : 1 ;
   u32 present : 1 ;
   u32 init_status : 1 ;
   u32 busy : 1 ;
   u32 fifo_cnt : 6 ;
   u32 rsv : 21 ;
};
#line 1458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
union bfa_flash_dev_status_reg {
   struct __anonstruct_r_8533 r ;
   u32 i ;
};
#line 1482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
struct __anonstruct_r_8534 {
   u32 dummy : 8 ;
   u32 addr : 24 ;
};
#line 1482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
union bfa_flash_addr_reg {
   struct __anonstruct_r_8534 r ;
   u32 i ;
};
#line 3121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
union __anonunion_m_8536 {
   struct bfi_flash_query_rsp *query ;
   struct bfi_flash_write_rsp *write ;
   struct bfi_flash_read_rsp *read ;
   struct bfi_mbmsg *msg ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10315 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_10315 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10316 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_10316 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_10332 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_10332 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_10336 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_10336 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10337 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_10338 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_10337 __anonCompField_media_link_90 ;
   union __anonunion_10338 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_10340 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_10339 {
   struct __anonstruct_dev_10340 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_10339 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_10354 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_10355 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_10353 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_10354 i2c ;
   struct __anonstruct_custom_10355 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_10353 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_11256 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_11256 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_9 {
   int arg0 ;
   int signal_pending ;
};
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_bnad_msix_rx_23 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_bnad_pci_driver_26 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_9_27 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 11 
#line 11 
int ldv_atomic_add_return(int i, atomic_t *v);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size)
{
  #line 31 
  if (0 != 0) {
    #line 38 
    int tmp_0;
    #line 38 
    int tmp_32;
    #line 38 
    int tmp_33;
    #line 38 
    int tmp_1;
    #line 38 
    int tmp_2;
    #line 38 
    int tmp_34;
    #line 38 
    int tmp_35;
    #line 38 
    int tmp_3;
    #line 38 
    int tmp_4;
    #line 38 
    int tmp_36;
    #line 38 
    int tmp_37;
    #line 38 
    int tmp_5;
    #line 38 
    int tmp_6;
    #line 38 
    int tmp_38;
    #line 38 
    int tmp_39;
    #line 38 
    int tmp_7;
    #line 38 
    int tmp_8;
    #line 38 
    int tmp_40;
    #line 38 
    int tmp_41;
    #line 38 
    int tmp_9;
    #line 38 
    int tmp_10;
    #line 38 
    int tmp_42;
    #line 38 
    int tmp_43;
    #line 38 
    int tmp_11;
    #line 38 
    int tmp_12;
    #line 38 
    int tmp_44;
    #line 38 
    int tmp_45;
    #line 38 
    int tmp_13;
    #line 38 
    int tmp_14;
    #line 38 
    int tmp_46;
    #line 38 
    int tmp_47;
    #line 38 
    int tmp_15;
    #line 38 
    int tmp_16;
    #line 38 
    int tmp_48;
    #line 38 
    int tmp_49;
    #line 38 
    int tmp_17;
    #line 38 
    int tmp_18;
    #line 38 
    int tmp_50;
    #line 38 
    int tmp_51;
    #line 38 
    int tmp_19;
    #line 38 
    int tmp_20;
    #line 38 
    int tmp_52;
    #line 38 
    int tmp_53;
    #line 38 
    int tmp_21;
    #line 38 
    int tmp_22;
    #line 38 
    int tmp_54;
    #line 38 
    int tmp_55;
    #line 38 
    int tmp_23;
    #line 38 
    int tmp_24;
    #line 38 
    int tmp_56;
    #line 38 
    int tmp_57;
    #line 38 
    int tmp_25;
    #line 38 
    int tmp_26;
    #line 38 
    int tmp_58;
    #line 38 
    int tmp_59;
    #line 38 
    int tmp_27;
    #line 38 
    int tmp_28;
    #line 38 
    int tmp_60;
    #line 38 
    int tmp_61;
    #line 38 
    int tmp_29;
    #line 38 
    int tmp_30;
    #line 38 
    int tmp_31;
    #line 38 
    int tmp;
    #line 38 
    int tmp_63;
    #line 32 
    if (size == 0UL) 
                     #line 33 
                     return 52;
    #line 35 
    if (size <= 4095UL) 
                        #line 36 
                        return 0;
    #line 38 
    if (0 != 0) {
      #line 38 
      if (size + 18446744073709551615UL > 1UL) {
        #line 38 
        if (((unsigned long long)(size + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
          #line 38 
          if (((unsigned long long)(size + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
            #line 38 
            if (((unsigned long long)(size + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
              #line 38 
              if (((unsigned long long)(size + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                #line 38 
                if (((unsigned long long)(size + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                  #line 38 
                  if (((unsigned long long)(size + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                    #line 38 
                    if (((unsigned long long)(size + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                      #line 38 
                      if (((unsigned long long)(size + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                        #line 38 
                        if (((unsigned long long)(size + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                          #line 38 
                          if (((unsigned long long)(size + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                            #line 38 
                            if (((unsigned long long)(size + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                              #line 38 
                              if (((unsigned long long)(size + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                #line 38 
                                if (((unsigned long long)(size + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                  #line 38 
                                  if (((unsigned long long)(size + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                    #line 38 
                                    if (((unsigned long long)(size + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                      #line 38 
                                      if (((unsigned long long)(size + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                        #line 38 
                                        if (((unsigned long long)(size + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                          #line 38 
                                          if (((unsigned long long)(size + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                            #line 38 
                                            if (((unsigned long long)(size + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                              #line 38 
                                              if (((unsigned long long)(size + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                #line 38 
                                                if (((unsigned long long)(size + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                  #line 38 
                                                  if (((unsigned long long)(size + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                    #line 38 
                                                    if (((unsigned long long)(size + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                      #line 38 
                                                      if (((unsigned long long)(size + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                        #line 38 
                                                        if (((unsigned long long)(size + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                          #line 38 
                                                          if (((unsigned long long)(size + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                            #line 38 
                                                            if (((unsigned long long)(size + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                              #line 38 
                                                              if (((unsigned long long)(size + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                #line 38 
                                                                if (((unsigned long long)(size + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                  #line 38 
                                                                  if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 38 
                                                                    tmp = -9; else 
                                                                    #line 38 
                                                                    tmp = -10;
                                                                    #line 38 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_0 = -8;
                                                                    #line 38 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_1 = -7;
                                                                    #line 38 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_2 = -6;
                                                                    #line 38 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_3 = -5;
                                                                    #line 38 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_4 = -4;
                                                                    #line 38 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_5 = -3;
                                                                    #line 38 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_6 = -2;
                                                                    #line 38 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_7 = -1;
                                                                    #line 38 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_8 = 0;
                                                                    #line 38 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_9 = 1;
                                                                    #line 38 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_10 = 2;
                                                                    #line 38 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_11 = 3;
                                                                    #line 38 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_12 = 4;
                                                                    #line 38 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_13 = 5;
                                                                    #line 38 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_14 = 6;
                                                                    #line 38 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_15 = 7;
                                                                    #line 38 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_16 = 8;
                                                                    #line 38 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_17 = 9;
                                                                    #line 38 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_18 = 10;
                                                                    #line 38 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_19 = 11;
                                                                    #line 38 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_20 = 12;
                                                                    #line 38 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_21 = 13;
                                                                    #line 38 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_22 = 14;
                                                                    #line 38 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_23 = 15;
                                                                    #line 38 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_24 = 16;
                                                                    #line 38 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_25 = 17;
                                                                    #line 38 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_26 = 18;
                                                                    #line 38 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_27 = 19;
                                                                    #line 38 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_28 = 20;
                                                                    #line 38 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_29 = 21;
                                                                    #line 38 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_30 = 22;
                                                                    #line 38 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 38 
                                                                    tmp_31 = 23;
                                                                  #line 38 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 38 
                                                                  tmp_32 = 24;
                                                                #line 38 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 38 
                                                                   tmp_33 = 25;
                                                              #line 38 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 38 
                                                                 tmp_34 = 26;
                                                            #line 38 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 38 
                                                               tmp_35 = 27;
                                                          #line 38 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 38 
                                                             tmp_36 = 28;
                                                        #line 38 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 38 
                                                           tmp_37 = 29;
                                                      #line 38 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 38 
                                                         tmp_38 = 30;
                                                    #line 38 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 38 
                                                       tmp_39 = 31;
                                                  #line 38 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 38 
                                                     tmp_40 = 32;
                                                #line 38 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 38 
                                                   tmp_41 = 33;
                                              #line 38 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 38 
                                                 tmp_42 = 34;
                                            #line 38 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 38 
                                               tmp_43 = 35;
                                          #line 38 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 38 
                                             tmp_44 = 36;
                                        #line 38 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 38 
                                           tmp_45 = 37;
                                      #line 38 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 38 
                                         tmp_46 = 38;
                                    #line 38 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 38 
                                       tmp_47 = 39;
                                  #line 38 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 38 
                                     tmp_48 = 40;
                                #line 38 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 38 
                                   tmp_49 = 41;
                              #line 38 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 38 
                                 tmp_50 = 42;
                            #line 38 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 38 
                               tmp_51 = 43;
                          #line 38 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 38 
                             tmp_52 = 44;
                        #line 38 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 38 
                           tmp_53 = 45;
                      #line 38 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 38 
                         tmp_54 = 46;
                    #line 38 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 38 
                       tmp_55 = 47;
                  #line 38 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 38 
                     tmp_56 = 48;
                #line 38 
                tmp_57 = tmp_56;
              }
              else 
                   #line 38 
                   tmp_57 = 49;
              #line 38 
              tmp_58 = tmp_57;
            }
            else 
                 #line 38 
                 tmp_58 = 50;
            #line 38 
            tmp_59 = tmp_58;
          }
          else 
               #line 38 
               tmp_59 = 51;
          #line 38 
          tmp_60 = tmp_59;
        }
        else 
             #line 38 
             tmp_60 = 52;
        #line 38 
        tmp_61 = tmp_60;
      }
      else 
           #line 38 
           tmp_61 = -11;
      #line 38 
      tmp_63 = tmp_61;
    }
    else {
      #line 38 
      tmp_63 = __ilog2_u64((unsigned long long)(size + 18446744073709551615UL)) + -11;
    }
    #line 38 
    return tmp_63;
  }
  #line 41 
  size --;
  #line 42 
  size >>= 12;
  #line 46 
  return fls64((unsigned long long)size);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 69 
#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int atomic_add_return(int i, atomic_t *v);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
__inline static int atomic_inc_return(atomic_t *v)
{
  #line 284 
  return atomic_add_return(1,v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_spin_unlock_irqrestore_bna_lock_of_bnad(spinlock_t *lock, unsigned long flags);
#line 26 
#line 958 
static void cif_mutex_lock_conf_mutex_of_bnad(struct mutex *lock);
#line 26 
#line 972 
static void cif_mutex_lock_bnad_fwimg_mutex(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 908 
static void cif___ldv_spin_lock_bna_lock_of_bnad(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 926  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 965  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_mutex_unlock_conf_mutex_of_bnad(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_mutex_unlock_bnad_fwimg_mutex(struct mutex *lock);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 103 
#line 103 
void wait_for_completion(struct completion *);
#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 118 
#line 118 
void complete(struct completion *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 454 
#line 454 
void flush_workqueue(struct workqueue_struct *);
#line 496 
#line 391  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_255 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_44.__anonCompField___anonunion_186_39.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 460  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_44.__anonCompField___anonunion_186_43.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_44.__anonCompField___anonunion_186_32.index == 18446744073709551615UL);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  #line 25 
  ldv_inline_asm();
  #line 30 
  return (unsigned short)(~ sum >> 16);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 90 
  ldv_inline_asm();
  #line 98 
  return sum;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len, __u8 proto, __wsum sum)
{
  #line 117 
  return csum_fold(csum_tcpudp_nofold(saddr,daddr,len,(unsigned char)((int)proto),sum));
}

#line 180 
#line 180 
__sum16 csum_ipv6_magic(struct in6_addr *, struct in6_addr *, __u32, __u8, __wsum);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  #line 2801 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  #line 2805 
  return skb;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  #line 2811 
  return __netdev_alloc_skb_ip_align(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3422 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3423 
  netif_tx_stop_queue(txq);
  #line 3424 
  return;
}

#line 3454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
  #line 3456 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  #line 3458 
  netif_tx_wake_queue(txq);
  #line 3459 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3666 
#line 3666 
void napi_gro_flush(struct napi_struct *, bool);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4131 
#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1034  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1170 
#line 1170 
void pci_intx(struct pci_dev *, int);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1026  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 268 
void bfa_nw_ioc_auto_recover(bool auto_recover);
#line 299 
#line 299 
void bfa_nw_ioc_timeout(struct bfa_ioc *ioc);
#line 300 
#line 300 
void bfa_nw_ioc_hb_check(struct bfa_ioc *ioc);
#line 301 
#line 301 
void bfa_nw_iocpf_timeout(struct bfa_ioc *ioc);
#line 302 
#line 302 
void bfa_nw_iocpf_sem_timeout(struct bfa_ioc *ioc);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
u32 bna_napi_dim_vector[8U][2U];
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 258 
void bna_res_req(struct bna_res_info *res_info);
#line 259 
#line 259 
void bna_mod_res_req(struct bna *bna, struct bna_res_info *res_info);
#line 260 
#line 260 
void bna_init(struct bna *bna, struct bnad *bnad, struct bfa_pcidev *pcidev, struct bna_res_info *res_info);
#line 263 
#line 263 
void bna_mod_init(struct bna *bna, struct bna_res_info *res_info);
#line 264 
#line 264 
void bna_uninit(struct bna *bna);
#line 265 
#line 265 
int bna_num_txq_set(struct bna *bna, int num_txq);
#line 266 
#line 266 
int bna_num_rxp_set(struct bna *bna, int num_rxp);
#line 267 
#line 267 
void bna_hw_stats_get(struct bna *bna);
#line 278 
#line 278 
void bna_mbox_handler(struct bna *bna, u32 intr_status);
#line 306 
#line 306 
void bna_tx_res_req(int num_txq, int txq_depth, struct bna_res_info *res_info);
#line 308 
#line 308 
struct bna_tx *bna_tx_create(struct bna *bna, struct bnad *bnad, struct bna_tx_config *tx_cfg, struct bna_tx_event_cbfn *tx_cbfn, struct bna_res_info *res_info, void *priv);
#line 312 
#line 312 
void bna_tx_destroy(struct bna_tx *tx);
#line 313 
#line 313 
void bna_tx_enable(struct bna_tx *tx);
#line 314 
#line 314 
void bna_tx_disable(struct bna_tx *tx, enum bna_cleanup_type type, void (*cbfn)(void *, struct bna_tx *));
#line 316 
#line 316 
void bna_tx_cleanup_complete(struct bna_tx *tx);
#line 317 
#line 317 
void bna_tx_coalescing_timeo_set(struct bna_tx *tx, int coalescing_timeo);
#line 343 
#line 343 
void bna_rx_res_req(struct bna_rx_config *q_cfg, struct bna_res_info *res_info);
#line 345 
#line 345 
struct bna_rx *bna_rx_create(struct bna *bna, struct bnad *bnad, struct bna_rx_config *rx_cfg, struct bna_rx_event_cbfn *rx_cbfn, struct bna_res_info *res_info, void *priv);
#line 349 
#line 349 
void bna_rx_destroy(struct bna_rx *rx);
#line 350 
#line 350 
void bna_rx_enable(struct bna_rx *rx);
#line 351 
#line 351 
void bna_rx_disable(struct bna_rx *rx, enum bna_cleanup_type type, void (*cbfn)(void *, struct bna_rx *));
#line 353 
#line 353 
void bna_rx_cleanup_complete(struct bna_rx *rx);
#line 354 
#line 354 
void bna_rx_coalescing_timeo_set(struct bna_rx *rx, int coalescing_timeo);
#line 355 
#line 355 
void bna_rx_dim_reconfig(struct bna *bna, u32 (*vector)[2U]);
#line 356 
#line 356 
void bna_rx_dim_update(struct bna_ccb *ccb);
#line 357 
#line 357 
enum bna_cb_status bna_rx_ucast_set(struct bna_rx *rx, u8 *ucmac);
#line 358 
#line 358 
enum bna_cb_status bna_rx_ucast_listset(struct bna_rx *rx, int count, u8 *uclist);
#line 360 
#line 360 
enum bna_cb_status bna_rx_mcast_add(struct bna_rx *rx, u8 *addr, void (*cbfn)(struct bnad *, struct bna_rx *));
#line 363 
#line 363 
enum bna_cb_status bna_rx_mcast_listset(struct bna_rx *rx, int count, u8 *mclist);
#line 366 
#line 366 
void bna_rx_mcast_delall(struct bna_rx *rx);
#line 368 
#line 368 
enum bna_cb_status bna_rx_mode_set(struct bna_rx *rx, enum bna_rxmode new_mode, enum bna_rxmode bitmask);
#line 370 
#line 370 
void bna_rx_vlan_add(struct bna_rx *rx, int vlan_id);
#line 371 
#line 371 
void bna_rx_vlan_del(struct bna_rx *rx, int vlan_id);
#line 372 
#line 372 
void bna_rx_vlanfilter_enable(struct bna_rx *rx);
#line 373 
#line 373 
void bna_rx_vlan_strip_enable(struct bna_rx *rx);
#line 374 
#line 374 
void bna_rx_vlan_strip_disable(struct bna_rx *rx);
#line 385 
#line 385 
void bna_enet_enable(struct bna_enet *enet);
#line 386 
#line 386 
void bna_enet_disable(struct bna_enet *enet, enum bna_cleanup_type type, void (*cbfn)(void *));
#line 388 
#line 388 
void bna_enet_pause_config(struct bna_enet *enet, struct bna_pause_config *pause_config);
#line 390 
#line 390 
void bna_enet_mtu_set(struct bna_enet *enet, int mtu, void (*cbfn)(struct bnad *));
#line 392 
#line 392 
void bna_enet_perm_mac_get(struct bna_enet *enet, u8 *mac);
#line 397 
#line 397 
void bna_ioceth_enable(struct bna_ioceth *ioceth);
#line 398 
#line 398 
void bna_ioceth_disable(struct bna_ioceth *ioceth, enum bna_cleanup_type type);
#line 404 
#line 927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ethport_link_status(struct bnad *bnad, enum bna_link_status link_status);
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ioceth_ready(struct bnad *bnad);
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ioceth_failed(struct bnad *bnad);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ioceth_disabled(struct bnad *bnad);
#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_mbox_intr_enable(struct bnad *bnad);
#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_mbox_intr_disable(struct bnad *bnad);
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_stats_get(struct bnad *bnad, enum bna_cb_status status, struct bna_stats *stats);
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
struct firmware *bfi_fw;
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 377 
u32 *cna_get_firmware_buf(struct pci_dev *pdev);
#line 379 
#line 3200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_set_rx_mode(struct net_device *netdev);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_mac_addr_set_locked(struct bnad *bnad, u8 *mac_addr);
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_enable_default_bcast(struct bnad *bnad);
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_restore_vlans(struct bnad *bnad, u32 rx_id);
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 384 
void bnad_set_ethtool_ops(struct net_device *netdev);
#line 385 
#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_completion(void *arg, enum bfa_status status);
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_tx_coalescing_timeo_set(struct bnad *bnad);
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_rx_coalescing_timeo_set(struct bnad *bnad);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_setup_rx(struct bnad *bnad, u32 rx_id);
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_setup_tx(struct bnad *bnad, u32 tx_id);
#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 1911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_destroy_tx(struct bnad *bnad, u32 tx_id);
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_destroy_rx(struct bnad *bnad, u32 rx_id);
#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_dim_timer_start(struct bnad *bnad);
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_netdev_qstats_fill(struct bnad *bnad, struct rtnl_link_stats64 *stats);
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 2426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_netdev_hwstats_fill(struct bnad *bnad, struct rtnl_link_stats64 *stats);
#line 406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.h"
#line 406 
void bnad_debugfs_init(struct bnad *bnad);
#line 407 
#line 407 
void bnad_debugfs_uninit(struct bnad *bnad);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static struct mutex bnad_fwimg_mutex = {.wait_lock = {.__anonCompField_spinlock_25 = {.rlock = {.magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.name = (char *)"bnad_fwimg_mutex.wait_lock"}}}}, .wait_list = {.next = & bnad_fwimg_mutex.wait_list, .prev = & bnad_fwimg_mutex.wait_list}, .magic = (void *)(& bnad_fwimg_mutex), .dep_map = {.name = (char *)"bnad_fwimg_mutex"}};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static uint bnad_msix_disable;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static uint bnad_ioc_auto_recover = 1U;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static uint bna_debugfs_enable = 1U;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_rxqs_per_cq = 2U;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static atomic_t bna_id;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u8 bnad_bcast_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cq_cleanup(struct bnad *bnad, struct bna_ccb *ccb)
{
  #line 75 
  struct bna_cq_entry *cmpl;
  #line 76 
  int i;
  #line 78 
  i = 0;
  #line 78 
  while (ccb->q_depth > (unsigned int)i) {
    #line 79 
    cmpl = (struct bna_cq_entry *)ccb->sw_q + (unsigned long)i;
    #line 80 
    cmpl->valid = (unsigned char)0U;
    #line 78 
    i ++;
  }
  #line 82 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_tx_buff_unmap(struct bnad *bnad, struct bnad_tx_unmap *unmap_q, u32 q_depth, u32 index)
{
  #line 93 
  struct bnad_tx_unmap *unmap;
  #line 94 
  struct sk_buff *skb;
  #line 95 
  int vector;
  #line 95 
  int nvecs;
  #line 97 
  unmap = unmap_q + (unsigned long)index;
  #line 98 
  nvecs = (int)unmap->nvecs;
  #line 100 
  skb = unmap->skb;
  #line 101 
  unmap->skb = (struct sk_buff *)0;
  #line 102 
  unmap->nvecs = 0U;
  #line 103 
  ;
  #line 103 
  ;
  #line 103 
  dma_unmap_single_attrs(& (bnad->pcidev)->dev,unmap->vectors[0].dma_addr,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 106 
  unmap->vectors[0].dma_addr = 0ULL;
  #line 107 
  nvecs --;
  #line 109 
  vector = 0;
  #line 110 
  while (nvecs != 0) {
    #line 111 
    vector ++;
    #line 112 
    if (vector == 4) {
      #line 113 
      vector = 0;
      #line 114 
      index = (index + 1U) & (q_depth + 4294967295U);
      #line 115 
      unmap = unmap_q + (unsigned long)index;
    }
    #line 118 
    dma_unmap_page_attrs(& (bnad->pcidev)->dev,unmap->vectors[vector].dma_addr,(unsigned long)unmap->vectors[vector].dma_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 122 
    unmap->vectors[vector].dma_addr = 0ULL;
    #line 123 
    nvecs --;
  }
  #line 126 
  index = (index + 1U) & (q_depth + 4294967295U);
  #line 128 
  return index;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_txq_cleanup(struct bnad *bnad, struct bna_tcb *tcb)
{
  #line 140 
  struct sk_buff *skb;
  #line 141 
  int i;
  #line 139 
  struct bnad_tx_unmap *unmap_q = (struct bnad_tx_unmap *)tcb->unmap_q;
  #line 143 
  i = 0;
  #line 143 
  while (tcb->q_depth > (unsigned int)i) {
    #line 144 
    skb = (unmap_q + (unsigned long)i)->skb;
    #line 145 
    if (skb == (struct sk_buff *)0) 
                                    #line 146 
                                    goto __Cont;
    #line 147 
    bnad_tx_buff_unmap(bnad,unmap_q,tcb->q_depth,(unsigned int)i);
    #line 149 
    dev_kfree_skb_any(skb);
    #line 143 
    __Cont: 
            #line 143 
    i ++;
  }
  #line 151 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_txcmpl_process(struct bnad *bnad, struct bna_tcb *tcb)
{
  #line 162 
  u32 wis;
  #line 162 
  u32 unmap_wis;
  #line 162 
  u32 hw_cons;
  #line 162 
  u32 cons;
  #line 162 
  u32 q_depth;
  #line 164 
  struct bnad_tx_unmap *unmap;
  #line 165 
  struct sk_buff *skb;
  #line 161 
  u32 sent_packets = 0U;
  #line 161 
  u32 sent_bytes = 0U;
  #line 163 
  struct bnad_tx_unmap *unmap_q = (struct bnad_tx_unmap *)tcb->unmap_q;
  #line 168 
  if (! test_bit(1L,& tcb->flags)) 
                                   #line 169 
                                   return 0U;
  #line 171 
  hw_cons = *(tcb->hw_consumer_index);
  #line 172 
  ldv_inline_asm();
  #line 173 
  cons = tcb->consumer_index;
  #line 174 
  q_depth = tcb->q_depth;
  #line 176 
  wis = (hw_cons - cons) & (q_depth + 4294967295U);
  #line 177 
  if ((long)(((tcb->producer_index - tcb->consumer_index) & (tcb->q_depth + 4294967295U)) < wis) != 0L) {
    #line 178 
    ldv_inline_asm();
    #line 179 
    ldv_inline_asm();
    #line 180 
    ldv_inline_asm();
    #line 177 
    ;
  }
  #line 179 
  while (wis != 0U) {
    #line 180 
    unmap = unmap_q + (unsigned long)cons;
    #line 182 
    skb = unmap->skb;
    #line 184 
    sent_packets ++;
    #line 185 
    sent_bytes = skb->len + sent_bytes;
    #line 187 
    unmap_wis = (unmap->nvecs + 3U) >> 2;
    #line 188 
    wis -= unmap_wis;
    #line 190 
    cons = bnad_tx_buff_unmap(bnad,unmap_q,q_depth,cons);
    #line 191 
    dev_kfree_skb_any(skb);
  }
  #line 195 
  tcb->consumer_index = hw_cons;
  #line 197 
  (tcb->txq)->tx_packets += (unsigned long long)sent_packets;
  #line 198 
  (tcb->txq)->tx_bytes += (unsigned long long)sent_bytes;
  #line 200 
  return sent_packets;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_tx_complete(struct bnad *bnad, struct bna_tcb *tcb)
{
  #line 206 
  struct net_device *netdev = bnad->netdev;
  #line 207 
  u32 sent = 0U;
  #line 209 
  if ((int)test_and_set_bit(0L,& tcb->flags) != 0) 
                                                   #line 210 
                                                   return 0U;
  #line 212 
  sent = bnad_txcmpl_process(bnad,tcb);
  #line 213 
  if (sent != 0U) {
    #line 214 
    if ((int)netif_queue_stopped(netdev) != 0) {
      #line 214 
      if ((int)netif_carrier_ok(netdev) != 0) 
        #line 215 
        if ((((tcb->consumer_index - tcb->producer_index) + 4294967295U) & (tcb->q_depth + 4294967295U)) > 7U) {
          #line 218 
          if ((int)test_bit(1L,& tcb->flags) != 0) {
            #line 219 
            netif_wake_queue(netdev);
            #line 220 
            (bnad->stats.drv_stats.netif_queue_wakeup) ++;
          }
        }
    }
  }
  #line 225 
  if ((long)((int)test_bit(1L,& tcb->flags) != 0) != 0L) 
                                                         #line 226 
                                                         writel((tcb->i_dbell)->doorbell_ack | sent,(tcb->i_dbell)->doorbell_addr);
  #line 229 
  cif_clear_bit(0L,& tcb->flags);
  #line 231 
  return sent;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static irqreturn_t bnad_msix_tx(int irq, void *data)
{
  #line 238 
  struct bna_tcb *tcb = (struct bna_tcb *)data;
  #line 239 
  struct bnad *bnad = tcb->bnad;
  #line 241 
  bnad_tx_complete(bnad,tcb);
  #line 243 
  return IRQ_HANDLED;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
__inline static void bnad_rxq_alloc_uninit(struct bnad *bnad, struct bna_rcb *rcb)
{
  #line 249 
  struct bnad_rx_unmap_q *unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 251 
  unmap_q->reuse_pi = -1;
  #line 252 
  unmap_q->alloc_order = -1;
  #line 253 
  unmap_q->map_size = 0U;
  #line 254 
  unmap_q->type = BNAD_RXBUF_NONE;
  #line 255 
  return;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_rxq_alloc_init(struct bnad *bnad, struct bna_rcb *rcb)
{
  #line 262 
  int order;
  #line 261 
  struct bnad_rx_unmap_q *unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 264 
  bnad_rxq_alloc_uninit(bnad,rcb);
  #line 266 
  order = get_order((unsigned long)(rcb->rxq)->buffer_size);
  #line 268 
  unmap_q->type = BNAD_RXBUF_PAGE;
  #line 270 
  if ((rcb->id & 1) != 0) {
    #line 271 
    unmap_q->alloc_order = 0;
    #line 272 
    unmap_q->map_size = (unsigned int)(rcb->rxq)->buffer_size;
  }
  else 
    #line 274 
    if ((rcb->rxq)->multi_buffer != (unsigned int)BNA_STATUS_T_DISABLED) {
      #line 275 
      unmap_q->alloc_order = 0;
      #line 276 
      unmap_q->map_size = (unsigned int)(rcb->rxq)->buffer_size;
      #line 277 
      unmap_q->type = BNAD_RXBUF_MULTI_BUFF;
    }
    else {
      #line 279 
      unmap_q->alloc_order = order;
      #line 280 
      if ((rcb->rxq)->buffer_size > 2048) 
                                          #line 280 
                                          unmap_q->map_size = (unsigned int)(4096UL << order); else 
                                                                    #line 280 
                                                                    unmap_q->map_size = 2048U;
    }
  #line 286 
  if ((long)((4096UL << order) % (unsigned long)unmap_q->map_size != 0UL) != 0L) {
    #line 287 
    ldv_inline_asm();
    #line 288 
    ldv_inline_asm();
    #line 289 
    ldv_inline_asm();
    #line 286 
    ;
  }
  #line 288 
  return 0;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
__inline static void bnad_rxq_cleanup_page(struct bnad *bnad, struct bnad_rx_unmap *unmap)
{
  #line 294 
  if (unmap->page == (struct page *)0) 
                                       #line 295 
                                       return;
  #line 297 
  dma_unmap_page_attrs(& (bnad->pcidev)->dev,unmap->vector.dma_addr,(unsigned long)unmap->vector.len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 300 
  put_page(unmap->page);
  #line 301 
  unmap->page = (struct page *)0;
  #line 302 
  unmap->vector.dma_addr = 0ULL;
  #line 303 
  unmap->vector.len = 0U;
  #line 304 
  return;
}

#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
__inline static void bnad_rxq_cleanup_skb(struct bnad *bnad, struct bnad_rx_unmap *unmap)
{
  #line 309 
  if (unmap->skb == (struct sk_buff *)0) 
                                         #line 310 
                                         return;
  #line 312 
  dma_unmap_single_attrs(& (bnad->pcidev)->dev,unmap->vector.dma_addr,(unsigned long)unmap->vector.len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 315 
  dev_kfree_skb_any(unmap->skb);
  #line 316 
  unmap->skb = (struct sk_buff *)0;
  #line 317 
  unmap->vector.dma_addr = 0ULL;
  #line 318 
  unmap->vector.len = 0U;
  #line 319 
  return;
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_rxq_cleanup(struct bnad *bnad, struct bna_rcb *rcb)
{
  #line 325 
  int i;
  #line 324 
  struct bnad_rx_unmap_q *unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 327 
  i = 0;
  #line 327 
  while (rcb->q_depth > (unsigned int)i) {
    {
      #line 328 
      struct bnad_rx_unmap *unmap = & unmap_q->unmap[i];
      #line 330 
      if (unmap_q->type == (unsigned int)BNAD_RXBUF_SK_BUFF) 
                                                             #line 331 
                                                             bnad_rxq_cleanup_skb(bnad,unmap); else 
                                                                    #line 333 
                                                                    bnad_rxq_cleanup_page(bnad,unmap);
    }
    #line 327 
    i ++;
  }
  #line 335 
  bnad_rxq_alloc_uninit(bnad,rcb);
  #line 336 
  return;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_rxq_refill_page(struct bnad *bnad, struct bna_rcb *rcb, u32 nalloc)
{
  #line 341 
  u32 alloced;
  #line 341 
  u32 prod;
  #line 341 
  u32 q_depth;
  #line 343 
  struct bnad_rx_unmap *unmap;
  #line 343 
  struct bnad_rx_unmap *prev;
  #line 344 
  struct bna_rxq_entry *rxent;
  #line 345 
  struct page *page;
  #line 346 
  u32 page_offset;
  #line 346 
  u32 alloc_size;
  #line 347 
  dma_addr_t dma_addr;
  #line 342 
  struct bnad_rx_unmap_q *unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 349 
  prod = rcb->producer_index;
  #line 350 
  q_depth = rcb->q_depth;
  #line 352 
  alloc_size = (unsigned int)(4096UL << unmap_q->alloc_order);
  #line 353 
  alloced = 0U;
  #line 355 
  while (1) {
    #line 355 
    u32 tmp_1;
    #line 355 
    tmp_1 = nalloc;
    #line 355 
    nalloc --;
    #line 355 
    ;
    #line 355 
    if (! (tmp_1 != 0U)) 
                         #line 355 
                         break;
    {
      #line 356 
      unmap = & unmap_q->unmap[prod];
      #line 358 
      if (unmap_q->reuse_pi < 0) {
        #line 359 
        page = alloc_pages(264736U,(unsigned int)unmap_q->alloc_order);
        #line 361 
        page_offset = 0U;
      }
      else {
        #line 363 
        prev = & unmap_q->unmap[unmap_q->reuse_pi];
        #line 364 
        page = prev->page;
        #line 365 
        page_offset = prev->page_offset + unmap_q->map_size;
        #line 366 
        get_page(page);
      }
      #line 369 
      if ((long)(page == (struct page *)0) != 0L) {
        #line 370 
        (bnad->stats.drv_stats.rxbuf_alloc_failed) ++;
        #line 371 
        ((rcb->rxq)->rxbuf_alloc_failed) ++;
        #line 372 
        goto finishing;
      }
      #line 375 
      dma_addr = dma_map_page_attrs(& (bnad->pcidev)->dev,page,(unsigned long)page_offset,(unsigned long)unmap_q->map_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 377 
      if (dma_mapping_error(& (bnad->pcidev)->dev,dma_addr) != 0) {
        #line 378 
        put_page(page);
        #line 379 
        (bnad->stats.drv_stats.rxbuf_map_failed) ++;
        #line 380 
        ((rcb->rxq)->rxbuf_map_failed) ++;
        #line 381 
        goto finishing;
      }
      #line 384 
      unmap->page = page;
      #line 385 
      unmap->page_offset = page_offset;
      #line 386 
      unmap->vector.dma_addr = dma_addr;
      #line 387 
      unmap->vector.len = unmap_q->map_size;
      #line 388 
      page_offset = unmap_q->map_size + page_offset;
      #line 390 
      if (page_offset < alloc_size) 
                                    #line 391 
                                    unmap_q->reuse_pi = (int)prod; else 
                                                                    #line 393 
                                                                    unmap_q->reuse_pi = -1;
      #line 395 
      rxent = (struct bna_rxq_entry *)rcb->sw_q + (unsigned long)prod;
      {
        #line 396 
        u64 tmp_addr = __builtin_bswap64((unsigned long)dma_addr);
        #line 396 
        rxent->host_addr.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
        #line 396 
        rxent->host_addr.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
      }
      #line 397 
      prod = (prod + 1U) & (q_depth + 4294967295U);
      #line 398 
      alloced ++;
    }
  }
  #line 401 
  finishing: 
             #line 401 
  ;
  #line 402 
  if ((long)(alloced != 0U) != 0L) {
    #line 403 
    rcb->producer_index = prod;
    #line 404 
    ldv_inline_asm();
    #line 405 
    if ((long)((int)test_bit(1L,& rcb->flags) != 0) != 0L) 
                                                           #line 406 
                                                           writel(rcb->producer_index | 2147483648U,rcb->q_dbell);
  }
  #line 409 
  return alloced;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_rxq_refill_skb(struct bnad *bnad, struct bna_rcb *rcb, u32 nalloc)
{
  #line 415 
  u32 alloced;
  #line 415 
  u32 prod;
  #line 415 
  u32 q_depth;
  #line 415 
  u32 buff_sz;
  #line 417 
  struct bnad_rx_unmap *unmap;
  #line 418 
  struct bna_rxq_entry *rxent;
  #line 419 
  struct sk_buff *skb;
  #line 420 
  dma_addr_t dma_addr;
  #line 416 
  struct bnad_rx_unmap_q *unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 422 
  buff_sz = (unsigned int)(rcb->rxq)->buffer_size;
  #line 423 
  prod = rcb->producer_index;
  #line 424 
  q_depth = rcb->q_depth;
  #line 426 
  alloced = 0U;
  #line 427 
  while (1) {
    #line 427 
    u32 tmp_1;
    #line 427 
    tmp_1 = nalloc;
    #line 427 
    nalloc --;
    #line 427 
    ;
    #line 427 
    if (! (tmp_1 != 0U)) 
                         #line 427 
                         break;
    {
      #line 428 
      unmap = & unmap_q->unmap[prod];
      #line 430 
      skb = netdev_alloc_skb_ip_align(bnad->netdev,buff_sz);
      #line 432 
      if ((long)(skb == (struct sk_buff *)0) != 0L) {
        #line 433 
        (bnad->stats.drv_stats.rxbuf_alloc_failed) ++;
        #line 434 
        ((rcb->rxq)->rxbuf_alloc_failed) ++;
        #line 435 
        goto finishing;
      }
      #line 438 
      dma_addr = dma_map_single_attrs(& (bnad->pcidev)->dev,(void *)skb->data,(unsigned long)buff_sz,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 440 
      if (dma_mapping_error(& (bnad->pcidev)->dev,dma_addr) != 0) {
        #line 441 
        dev_kfree_skb_any(skb);
        #line 442 
        (bnad->stats.drv_stats.rxbuf_map_failed) ++;
        #line 443 
        ((rcb->rxq)->rxbuf_map_failed) ++;
        #line 444 
        goto finishing;
      }
      #line 447 
      unmap->skb = skb;
      #line 448 
      unmap->vector.dma_addr = dma_addr;
      #line 449 
      unmap->vector.len = buff_sz;
      #line 451 
      rxent = (struct bna_rxq_entry *)rcb->sw_q + (unsigned long)prod;
      {
        #line 452 
        u64 tmp_addr = __builtin_bswap64((unsigned long)dma_addr);
        #line 452 
        rxent->host_addr.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
        #line 452 
        rxent->host_addr.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
      }
      #line 453 
      prod = (prod + 1U) & (q_depth + 4294967295U);
      #line 454 
      alloced ++;
    }
  }
  #line 457 
  finishing: 
             #line 457 
  ;
  #line 458 
  if ((long)(alloced != 0U) != 0L) {
    #line 459 
    rcb->producer_index = prod;
    #line 460 
    ldv_inline_asm();
    #line 461 
    if ((long)((int)test_bit(1L,& rcb->flags) != 0) != 0L) 
                                                           #line 462 
                                                           writel(rcb->producer_index | 2147483648U,rcb->q_dbell);
  }
  #line 465 
  return alloced;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
__inline static void bnad_rxq_post(struct bnad *bnad, struct bna_rcb *rcb)
{
  #line 472 
  u32 to_alloc;
  #line 471 
  struct bnad_rx_unmap_q *unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 474 
  to_alloc = ((rcb->consumer_index - rcb->producer_index) + 4294967295U) & (rcb->q_depth + 4294967295U);
  #line 475 
  if (to_alloc >> 3 == 0U) 
                           #line 476 
                           return;
  #line 478 
  if (unmap_q->type == (unsigned int)BNAD_RXBUF_SK_BUFF) 
                                                         #line 479 
                                                         bnad_rxq_refill_skb(bnad,rcb,to_alloc); else 
                                                                    #line 481 
                                                                    bnad_rxq_refill_page(bnad,rcb,to_alloc);
  #line 482 
  return;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cq_drop_packet(struct bnad *bnad, struct bna_rcb *rcb, u32 sop_ci, u32 nvecs)
{
  #line 502 
  struct bnad_rx_unmap_q *unmap_q;
  #line 503 
  struct bnad_rx_unmap *unmap;
  #line 504 
  u32 ci;
  #line 504 
  u32 vec;
  #line 506 
  unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 507 
  vec = 0U;
  #line 507 
  ci = sop_ci;
  #line 507 
  while (vec < nvecs) {
    #line 508 
    unmap = & unmap_q->unmap[ci];
    #line 509 
    ci = (ci + 1U) & (rcb->q_depth + 4294967295U);
    #line 511 
    if (unmap_q->type == (unsigned int)BNAD_RXBUF_SK_BUFF) 
                                                           #line 512 
                                                           bnad_rxq_cleanup_skb(bnad,unmap); else 
                                                                    #line 514 
                                                                    bnad_rxq_cleanup_page(bnad,unmap);
    #line 507 
    vec ++;
  }
  #line 516 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cq_setup_skb_frags(struct bna_ccb *ccb, struct sk_buff *skb, u32 nvecs)
{
  #line 521 
  struct bna_rcb *rcb;
  #line 522 
  struct bnad *bnad;
  #line 523 
  struct bnad_rx_unmap_q *unmap_q;
  #line 524 
  struct bna_cq_entry *cq;
  #line 524 
  struct bna_cq_entry *cmpl;
  #line 525 
  u32 ci;
  #line 525 
  u32 pi;
  #line 525 
  u32 totlen = 0U;
  #line 527 
  cq = (struct bna_cq_entry *)ccb->sw_q;
  #line 528 
  pi = ccb->producer_index;
  #line 529 
  cmpl = cq + (unsigned long)pi;
  #line 531 
  if (((int)cmpl->rxq_id & 1) != 0) 
                                    #line 531 
                                    rcb = ccb->rcb[1]; else 
                                                            #line 531 
                                                            rcb = ccb->rcb[0];
  #line 532 
  unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
  #line 533 
  bnad = rcb->bnad;
  #line 534 
  ci = rcb->consumer_index;
  #line 537 
  ;
  #line 537 
  __builtin_prefetch((void const *)(lowmem_page_address(unmap_q->unmap[ci].page) + (unsigned long)unmap_q->unmap[ci].page_offset));
  #line 540 
  while (1) {
    #line 540 
    u32 tmp_2;
    #line 540 
    tmp_2 = nvecs;
    #line 540 
    nvecs --;
    #line 540 
    ;
    #line 540 
    if (! (tmp_2 != 0U)) 
                         #line 540 
                         break;
    {
      #line 541 
      struct bnad_rx_unmap *unmap;
      #line 542 
      u32 len;
      #line 544 
      unmap = & unmap_q->unmap[ci];
      #line 545 
      ci = (ci + 1U) & (rcb->q_depth + 4294967295U);
      #line 547 
      dma_unmap_page_attrs(& (bnad->pcidev)->dev,unmap->vector.dma_addr,(unsigned long)unmap->vector.len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 551 
      len = (unsigned int)__builtin_bswap16((unsigned short)((int)cmpl->length));
      #line 552 
      skb->truesize += unmap->vector.len;
      #line 553 
      totlen += len;
      #line 555 
      ;
      #line 555 
      ;
      #line 555 
      ;
      #line 555 
      ;
      #line 555 
      skb_fill_page_desc(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,unmap->page,(int)unmap->page_offset,(int)len);
      #line 558 
      unmap->page = (struct page *)0;
      #line 559 
      unmap->vector.len = 0U;
      #line 561 
      pi = (pi + 1U) & (ccb->q_depth + 4294967295U);
      #line 562 
      cmpl = cq + (unsigned long)pi;
    }
  }
  #line 565 
  skb->len += totlen;
  #line 566 
  skb->data_len += totlen;
  #line 567 
  return;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
__inline static void bnad_cq_setup_skb(struct bnad *bnad, struct sk_buff *skb, struct bnad_rx_unmap *unmap, u32 len)
{
  #line 573 
  __builtin_prefetch((void const *)((void *)skb->data));
  #line 575 
  dma_unmap_single_attrs(& (bnad->pcidev)->dev,unmap->vector.dma_addr,(unsigned long)unmap->vector.len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 579 
  skb_put(skb,len);
  #line 580 
  skb->protocol = eth_type_trans(skb,bnad->netdev);
  #line 582 
  unmap->skb = (struct sk_buff *)0;
  #line 583 
  unmap->vector.len = 0U;
  #line 584 
  return;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_cq_process(struct bnad *bnad, struct bna_ccb *ccb, int budget)
{
  #line 589 
  struct bna_cq_entry *cq;
  #line 589 
  struct bna_cq_entry *cmpl;
  #line 589 
  struct bna_cq_entry *next_cmpl;
  #line 591 
  struct bnad_rx_unmap_q *unmap_q;
  #line 597 
  u32 pi;
  #line 597 
  u32 vec;
  #line 598 
  u32 flags;
  #line 598 
  u32 masked_flags;
  #line 590 
  struct bna_rcb *rcb = (struct bna_rcb *)0;
  #line 592 
  struct bnad_rx_unmap *unmap = (struct bnad_rx_unmap *)0;
  #line 593 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 594 
  struct bna_pkt_rate *pkt_rt = & ccb->pkt_rate;
  #line 595 
  struct bnad_rx_ctrl *rx_ctrl = (struct bnad_rx_ctrl *)ccb->ctrl;
  #line 596 
  u32 packets = 0U;
  #line 596 
  u32 len = 0U;
  #line 596 
  u32 totlen = 0U;
  #line 597 
  u32 sop_ci = 0U;
  #line 597 
  u32 nvecs = 0U;
  #line 600 
  __builtin_prefetch((void const *)((void *)bnad->netdev));
  #line 602 
  cq = (struct bna_cq_entry *)ccb->sw_q;
  #line 604 
  while (packets < (unsigned int)budget) {
    #line 605 
    cmpl = cq + (unsigned long)ccb->producer_index;
    #line 606 
    if ((unsigned int)cmpl->valid == 0U) 
                                         #line 607 
                                         break;
    #line 608 
    ldv_inline_asm();
    #line 617 
    if ((unsigned int)__builtin_bswap16((unsigned short)((int)cmpl->length)) > 1000U) 
      #line 617 
      (pkt_rt->large_pkt_cnt) ++; else 
                                       #line 617 
                                       (pkt_rt->small_pkt_cnt) ++;
    #line 619 
    if (((int)cmpl->rxq_id & 1) != 0) 
                                      #line 620 
                                      rcb = ccb->rcb[1]; else 
                                                              #line 622 
                                                              rcb = ccb->rcb[0];
    #line 624 
    unmap_q = (struct bnad_rx_unmap_q *)rcb->unmap_q;
    #line 627 
    sop_ci = rcb->consumer_index;
    #line 629 
    if (unmap_q->type == (unsigned int)BNAD_RXBUF_SK_BUFF) {
      #line 630 
      unmap = & unmap_q->unmap[sop_ci];
      #line 631 
      skb = unmap->skb;
    }
    else {
      #line 633 
      skb = napi_get_frags(& rx_ctrl->napi);
      #line 634 
      if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                    #line 635 
                                                    break;
    }
    #line 637 
    __builtin_prefetch((void const *)((void *)skb));
    #line 639 
    flags = __builtin_bswap32(cmpl->flags);
    #line 640 
    len = (unsigned int)__builtin_bswap16((unsigned short)((int)cmpl->length));
    #line 641 
    totlen = len;
    #line 642 
    nvecs = 1U;
    #line 647 
    if (unmap_q->type == (unsigned int)BNAD_RXBUF_MULTI_BUFF && ((unsigned long)flags & 2147483648UL) == 0UL) {
      #line 649 
      pi = ccb->producer_index;
      #line 650 
      while (1) {
        {
          #line 651 
          pi = (pi + 1U) & (ccb->q_depth + 4294967295U);
          #line 652 
          next_cmpl = cq + (unsigned long)pi;
          #line 654 
          if ((unsigned int)next_cmpl->valid == 0U) 
                                                    #line 655 
                                                    break;
          #line 656 
          ldv_inline_asm();
          #line 667 
          len = (unsigned int)__builtin_bswap16((unsigned short)((int)next_cmpl->length));
          #line 668 
          flags = __builtin_bswap32(next_cmpl->flags);
          #line 670 
          nvecs ++;
          #line 671 
          totlen += len;
        }
        #line 672 
        if (! (((unsigned long)flags & 2147483648UL) == 0UL)) 
                                                              #line 650 
                                                              break;
      }
      #line 674 
      if ((unsigned int)next_cmpl->valid == 0U) 
                                                #line 675 
                                                break;
    }
    #line 677 
    packets ++;
    #line 680 
    if ((long)(((unsigned long)flags & 7UL) != 0UL) != 0L) {
      #line 683 
      bnad_cq_drop_packet(bnad,rcb,sop_ci,nvecs);
      #line 684 
      ((rcb->rxq)->rx_packets_with_error) ++;
      #line 686 
      goto next;
    }
    #line 689 
    if (unmap_q->type == (unsigned int)BNAD_RXBUF_SK_BUFF) 
                                                           #line 690 
                                                           bnad_cq_setup_skb(bnad,skb,unmap,len); else 
                                                                    #line 692 
                                                                    bnad_cq_setup_skb_frags(ccb,skb,nvecs);
    #line 694 
    ((rcb->rxq)->rx_packets) ++;
    #line 695 
    (rcb->rxq)->rx_bytes += (unsigned long long)totlen;
    #line 696 
    ccb->bytes_per_intr += totlen;
    #line 698 
    masked_flags = flags & 7008U;
    #line 700 
    if ((long)(((bnad->netdev)->features & 549755813888ULL) != 0ULL) != 0L && (((long)((masked_flags == 4704U || masked_flags == 4448U) != 0) != 0L || (long)((masked_flags == 2592U || masked_flags == 2336U) != 0) != 0L) != 0) != 0) 
      #line 706 
      skb->ip_summed = (unsigned char)1U; else 
                                               #line 708 
                                               skb_checksum_none_assert(skb);
    #line 710 
    if (((unsigned long)flags & 8192UL) != 0UL && ((bnad->netdev)->features & 256ULL) != 0ULL) {
      #line 712 
      ;
      #line 712 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)cmpl->vlan_tag))));
    }
    #line 714 
    if (unmap_q->type == (unsigned int)BNAD_RXBUF_SK_BUFF) 
                                                           #line 715 
                                                           netif_receive_skb(skb); else 
                                                                    #line 717 
                                                                    napi_gro_frags(& rx_ctrl->napi);
    #line 719 
    next: 
          #line 719 
    ;
    #line 720 
    rcb->consumer_index = (rcb->consumer_index + nvecs) & (rcb->q_depth + 4294967295U);
    #line 721 
    vec = 0U;
    #line 721 
    while (vec < nvecs) {
      #line 722 
      cmpl = cq + (unsigned long)ccb->producer_index;
      #line 723 
      cmpl->valid = (unsigned char)0U;
      #line 724 
      ccb->producer_index = (ccb->producer_index + 1U) & (ccb->q_depth + 4294967295U);
      #line 721 
      vec ++;
    }
  }
  #line 728 
  napi_gro_flush(& rx_ctrl->napi,(_Bool)0);
  #line 729 
  if ((long)((int)test_bit(0L,& (ccb->rcb[0])->flags) != 0) != 0L) 
                                                                   #line 730 
                                                                   writel(packets | 2147483648U,(ccb->i_dbell)->doorbell_addr);
  #line 732 
  bnad_rxq_post(bnad,ccb->rcb[0]);
  #line 733 
  if (ccb->rcb[1] != (struct bna_rcb *)0) 
                                          #line 734 
                                          bnad_rxq_post(bnad,ccb->rcb[1]);
  #line 736 
  return packets;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_netif_rx_schedule_poll(struct bnad *bnad, struct bna_ccb *ccb)
{
  #line 742 
  struct bnad_rx_ctrl *rx_ctrl = (struct bnad_rx_ctrl *)ccb->ctrl;
  #line 743 
  struct napi_struct *napi = & rx_ctrl->napi;
  #line 745 
  if ((long)((int)napi_schedule_prep(napi) != 0) != 0L) {
    #line 746 
    __napi_schedule(napi);
    #line 747 
    (rx_ctrl->rx_schedule) ++;
  }
  #line 749 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static irqreturn_t bnad_msix_rx(int irq, void *data)
{
  #line 755 
  struct bna_ccb *ccb = (struct bna_ccb *)data;
  #line 757 
  if (ccb != (struct bna_ccb *)0) {
    #line 758 
    (((struct bnad_rx_ctrl *)ccb->ctrl)->rx_intr_ctr) ++;
    #line 759 
    bnad_netif_rx_schedule_poll(ccb->bnad,ccb);
  }
  #line 762 
  return IRQ_HANDLED;
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static irqreturn_t bnad_msix_mbox_handler(int irq, void *data)
{
  #line 771 
  u32 intr_status;
  #line 772 
  unsigned long flags;
  #line 773 
  struct bnad *bnad = (struct bnad *)data;
  #line 775 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 776 
  if ((long)((int)test_bit(2L,& bnad->run_flags) != 0) != 0L) {
    #line 777 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 778 
    return IRQ_HANDLED;
  }
  #line 781 
  intr_status = readl(bnad->bna.regs.fn_int_status);
  #line 781 
  if (intr_status != 0U) 
                         #line 781 
                         writel(~ bnad->bna.bits.mbox_status_bits & intr_status,bnad->bna.regs.fn_int_status);
  #line 783 
  if (((bnad->bna.bits.mbox_status_bits | bnad->bna.bits.error_status_bits) & intr_status) != 0U) 
    #line 784 
    bna_mbox_handler(& bnad->bna,intr_status);
  #line 786 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 788 
  return IRQ_HANDLED;
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static irqreturn_t bnad_isr(int irq, void *data)
{
  #line 794 
  int i;
  #line 794 
  int j;
  #line 795 
  u32 intr_status;
  #line 796 
  unsigned long flags;
  #line 798 
  struct bnad_rx_info *rx_info;
  #line 799 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 797 
  struct bnad *bnad = (struct bnad *)data;
  #line 800 
  struct bna_tcb *tcb = (struct bna_tcb *)0;
  #line 802 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 803 
  if ((long)((int)test_bit(2L,& bnad->run_flags) != 0) != 0L) {
    #line 804 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 805 
    return IRQ_NONE;
  }
  #line 808 
  intr_status = readl(bnad->bna.regs.fn_int_status);
  #line 808 
  if (intr_status != 0U) 
                         #line 808 
                         writel(~ bnad->bna.bits.mbox_status_bits & intr_status,bnad->bna.regs.fn_int_status);
  #line 810 
  if ((long)(intr_status == 0U) != 0L) {
    #line 811 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 812 
    return IRQ_NONE;
  }
  #line 815 
  if (((bnad->bna.bits.mbox_status_bits | bnad->bna.bits.error_status_bits) & intr_status) != 0U) 
    #line 816 
    bna_mbox_handler(& bnad->bna,intr_status);
  #line 818 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 820 
  if ((intr_status & 65535U) == 0U) 
                                    #line 821 
                                    return IRQ_HANDLED;
  #line 825 
  i = 0;
  #line 825 
  while (bnad->num_tx > (unsigned int)i) {
    #line 826 
    j = 0;
    #line 826 
    while (bnad->num_txq_per_tx > (unsigned int)j) {
      #line 827 
      tcb = bnad->tx_info[i].tcb[j];
      #line 828 
      if (tcb != (struct bna_tcb *)0) {
        #line 828 
        if ((int)test_bit(1L,& tcb->flags) != 0) 
                                                 #line 829 
                                                 bnad_tx_complete(bnad,bnad->tx_info[i].tcb[j]);
      }
      #line 826 
      j ++;
    }
    #line 825 
    i ++;
  }
  #line 833 
  i = 0;
  #line 833 
  while (bnad->num_rx > (unsigned int)i) {
    #line 834 
    rx_info = & bnad->rx_info[i];
    #line 835 
    if (rx_info->rx == (struct bna_rx *)0) 
                                           #line 836 
                                           goto __Cont;
    #line 837 
    j = 0;
    #line 837 
    while (bnad->num_rxp_per_rx > (unsigned int)j) {
      #line 838 
      rx_ctrl = & rx_info->rx_ctrl[j];
      #line 839 
      if (rx_ctrl->ccb != (struct bna_ccb *)0) 
                                               #line 840 
                                               bnad_netif_rx_schedule_poll(bnad,rx_ctrl->ccb);
      #line 837 
      j ++;
    }
    #line 833 
    __Cont: 
            #line 833 
    i ++;
  }
  #line 844 
  return IRQ_HANDLED;
}

#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_enable_mbox_irq(struct bnad *bnad)
{
  #line 854 
  cif_clear_bit(2L,& bnad->run_flags);
  #line 856 
  (bnad->stats.drv_stats.mbox_intr_enabled) ++;
  #line 857 
  return;
}

#line 864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_disable_mbox_irq(struct bnad *bnad)
{
  #line 866 
  cif_set_bit(2L,& bnad->run_flags);
  #line 868 
  (bnad->stats.drv_stats.mbox_intr_disabled) ++;
  #line 869 
  return;
}

#line 872  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_set_netdev_perm_addr(struct bnad *bnad)
{
  #line 874 
  struct net_device *netdev = bnad->netdev;
  #line 876 
  ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 *)(& bnad->perm_addr));
  #line 877 
  if ((int)is_zero_ether_addr(netdev->dev_addr) != 0) 
                                                      #line 878 
                                                      ether_addr_copy(netdev->dev_addr,(u8 *)(& bnad->perm_addr));
  #line 879 
  return;
}

#line 885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_mbox_intr_enable(struct bnad *bnad)
{
  #line 887 
  bnad_enable_mbox_irq(bnad);
  #line 888 
  return;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_mbox_intr_disable(struct bnad *bnad)
{
  #line 893 
  bnad_disable_mbox_irq(bnad);
  #line 894 
  return;
}

#line 897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ioceth_ready(struct bnad *bnad)
{
  #line 899 
  bnad->bnad_completions.ioc_comp_status = (unsigned char)0U;
  #line 900 
  complete(& bnad->bnad_completions.ioc_comp);
  #line 901 
  return;
}

#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ioceth_failed(struct bnad *bnad)
{
  #line 906 
  bnad->bnad_completions.ioc_comp_status = (unsigned char)1U;
  #line 907 
  complete(& bnad->bnad_completions.ioc_comp);
  #line 908 
  return;
}

#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ioceth_disabled(struct bnad *bnad)
{
  #line 913 
  bnad->bnad_completions.ioc_comp_status = (unsigned char)0U;
  #line 914 
  complete(& bnad->bnad_completions.ioc_comp);
  #line 915 
  return;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_enet_disabled(void *arg)
{
  #line 920 
  struct bnad *bnad = (struct bnad *)arg;
  #line 922 
  netif_carrier_off(bnad->netdev);
  #line 923 
  complete(& bnad->bnad_completions.enet_comp);
  #line 924 
  return;
}

#line 927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_ethport_link_status(struct bnad *bnad, enum bna_link_status link_status)
{
  #line 930 
  bool link_up = (_Bool)0;
  #line 932 
  link_up = (_Bool)((unsigned int)link_status + 4294967295U <= 1U);
  #line 934 
  if (link_status == (unsigned int)BNA_CEE_UP) {
    #line 935 
    if (! test_bit(0L,& bnad->run_flags)) 
                                          #line 936 
                                          (bnad->stats.drv_stats.cee_toggle) ++;
    #line 937 
    cif_set_bit(0L,& bnad->run_flags);
  }
  else {
    #line 939 
    if ((int)test_bit(0L,& bnad->run_flags) != 0) 
                                                  #line 940 
                                                  (bnad->stats.drv_stats.cee_toggle) ++;
    #line 941 
    cif_clear_bit(0L,& bnad->run_flags);
  }
  #line 944 
  if ((int)link_up != 0) {
    #line 945 
    if (! netif_carrier_ok(bnad->netdev)) {
      #line 946 
      uint tx_id;
      #line 946 
      uint tcb_id;
      #line 947 
      netdev_info(bnad->netdev,(char *)"link up\n");
      #line 948 
      netif_carrier_on(bnad->netdev);
      #line 949 
      (bnad->stats.drv_stats.link_toggle) ++;
      #line 950 
      tx_id = 0U;
      #line 950 
      while (bnad->num_tx > tx_id) {
        #line 951 
        tcb_id = 0U;
        #line 951 
        while (bnad->num_txq_per_tx > tcb_id) {
          {
            #line 955 
            u32 txq_id;
            #line 953 
            struct bna_tcb *tcb = bnad->tx_info[tx_id].tcb[tcb_id];
            #line 956 
            if (tcb == (struct bna_tcb *)0) 
                                            #line 957 
                                            goto __Cont;
            #line 959 
            txq_id = (unsigned int)tcb->id;
            #line 961 
            if ((int)test_bit(1L,& tcb->flags) != 0) {
              #line 966 
              netif_wake_subqueue(bnad->netdev,(unsigned short)((int)((unsigned short)txq_id)));
              #line 969 
              (bnad->stats.drv_stats.netif_queue_wakeup) ++;
            }
            else {
              #line 972 
              netif_stop_subqueue(bnad->netdev,(unsigned short)((int)((unsigned short)txq_id)));
              #line 975 
              (bnad->stats.drv_stats.netif_queue_stop) ++;
            }
          }
          #line 951 
          __Cont: 
                  #line 951 
          tcb_id ++;
        }
        #line 950 
        tx_id ++;
      }
    }
  }
  else {
    #line 982 
    if ((int)netif_carrier_ok(bnad->netdev) != 0) {
      #line 983 
      netdev_info(bnad->netdev,(char *)"link down\n");
      #line 984 
      netif_carrier_off(bnad->netdev);
      #line 985 
      (bnad->stats.drv_stats.link_toggle) ++;
    }
  }
  #line 987 
  return;
}

#line 991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_tx_disabled(void *arg, struct bna_tx *tx)
{
  #line 993 
  struct bnad *bnad = (struct bnad *)arg;
  #line 995 
  complete(& bnad->bnad_completions.tx_comp);
  #line 996 
  return;
}

#line 999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_tcb_setup(struct bnad *bnad, struct bna_tcb *tcb)
{
  #line 1001 
  struct bnad_tx_info *tx_info = (struct bnad_tx_info *)((tcb->txq)->tx)->priv;
  #line 1004 
  tcb->priv = (void *)tcb;
  #line 1005 
  tx_info->tcb[tcb->id] = tcb;
  #line 1006 
  return;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_tcb_destroy(struct bnad *bnad, struct bna_tcb *tcb)
{
  #line 1011 
  struct bnad_tx_info *tx_info = (struct bnad_tx_info *)((tcb->txq)->tx)->priv;
  #line 1014 
  tx_info->tcb[tcb->id] = (struct bna_tcb *)0;
  #line 1015 
  tcb->priv = (void *)0;
  #line 1016 
  return;
}

#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_ccb_setup(struct bnad *bnad, struct bna_ccb *ccb)
{
  #line 1021 
  struct bnad_rx_info *rx_info = (struct bnad_rx_info *)((ccb->cq)->rx)->priv;
  #line 1024 
  rx_info->rx_ctrl[ccb->id].ccb = ccb;
  #line 1025 
  ccb->ctrl = (void *)(& rx_info->rx_ctrl[ccb->id]);
  #line 1026 
  return;
}

#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_ccb_destroy(struct bnad *bnad, struct bna_ccb *ccb)
{
  #line 1031 
  struct bnad_rx_info *rx_info = (struct bnad_rx_info *)((ccb->cq)->rx)->priv;
  #line 1034 
  rx_info->rx_ctrl[ccb->id].ccb = (struct bna_ccb *)0;
  #line 1035 
  return;
}

#line 1038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_tx_stall(struct bnad *bnad, struct bna_tx *tx)
{
  #line 1042 
  struct bna_tcb *tcb;
  #line 1043 
  u32 txq_id;
  #line 1044 
  int i;
  #line 1040 
  struct bnad_tx_info *tx_info = (struct bnad_tx_info *)tx->priv;
  #line 1046 
  i = 0;
  #line 1046 
  while (i <= 7) {
    #line 1047 
    tcb = tx_info->tcb[i];
    #line 1048 
    if (tcb == (struct bna_tcb *)0) 
                                    #line 1049 
                                    goto __Cont;
    #line 1050 
    txq_id = (unsigned int)tcb->id;
    #line 1051 
    cif_clear_bit(1L,& tcb->flags);
    #line 1052 
    netif_stop_subqueue(bnad->netdev,(unsigned short)((int)((unsigned short)txq_id)));
    #line 1046 
    __Cont: 
            #line 1046 
    i ++;
  }
  #line 1054 
  return;
}

#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_tx_resume(struct bnad *bnad, struct bna_tx *tx)
{
  #line 1060 
  struct bna_tcb *tcb;
  #line 1061 
  u32 txq_id;
  #line 1062 
  int i;
  #line 1059 
  struct bnad_tx_info *tx_info = (struct bnad_tx_info *)tx->priv;
  #line 1064 
  i = 0;
  #line 1064 
  while (i <= 7) {
    {
      #line 1065 
      tcb = tx_info->tcb[i];
      #line 1066 
      if (tcb == (struct bna_tcb *)0) 
                                      #line 1067 
                                      goto __Cont;
      #line 1068 
      txq_id = (unsigned int)tcb->id;
      #line 1070 
      if ((long)((int)test_bit(1L,& tcb->flags) != 0) != 0L) {
        #line 1071 
        ldv_inline_asm();
        #line 1072 
        ldv_inline_asm();
        #line 1073 
        ldv_inline_asm();
        #line 1070 
        ;
      }
      #line 1071 
      cif_set_bit(1L,& tcb->flags);
      #line 1072 
      if ((long)(*(tcb->hw_consumer_index) != 0U) != 0L) {
        #line 1073 
        ldv_inline_asm();
        #line 1074 
        ldv_inline_asm();
        #line 1075 
        ldv_inline_asm();
        #line 1072 
        ;
      }
      #line 1074 
      if ((int)netif_carrier_ok(bnad->netdev) != 0) {
        #line 1075 
        netif_wake_subqueue(bnad->netdev,(unsigned short)((int)((unsigned short)txq_id)));
        #line 1076 
        (bnad->stats.drv_stats.netif_queue_wakeup) ++;
      }
    }
    #line 1064 
    __Cont: 
            #line 1064 
    i ++;
  }
  #line 1085 
  if ((int)is_zero_ether_addr((u8 *)(& bnad->perm_addr)) != 0) {
    #line 1086 
    bna_enet_perm_mac_get(& bnad->bna.enet,(u8 *)(& bnad->perm_addr));
    #line 1087 
    bnad_set_netdev_perm_addr(bnad);
  }
  #line 1089 
  return;
}

#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_tx_cleanup(struct delayed_work *work)
{
  #line 1098 
  void *__mptr;
  #line 1100 
  struct bna_tcb *tcb;
  #line 1101 
  unsigned long flags;
  #line 1102 
  u32 i;
  #line 1098 
  __mptr = (void *)work;
  #line 1097 
  struct bnad_tx_info *tx_info = ((struct bnad_tx_info *)(__mptr + 18446744073709551536U));
  #line 1099 
  struct bnad *bnad = (struct bnad *)0;
  #line 1102 
  u32 pending = 0U;
  #line 1104 
  i = 0U;
  #line 1104 
  while (i <= 7U) {
    {
      #line 1105 
      tcb = tx_info->tcb[i];
      #line 1106 
      if (tcb == (struct bna_tcb *)0) 
                                      #line 1107 
                                      goto __Cont;
      #line 1109 
      bnad = tcb->bnad;
      #line 1111 
      if ((int)test_and_set_bit(0L,& tcb->flags) != 0) {
        #line 1112 
        pending ++;
        #line 1113 
        goto __Cont;
      }
      #line 1116 
      bnad_txq_cleanup(bnad,tcb);
      #line 1119 
      cif_clear_bit(0L,& tcb->flags);
    }
    #line 1104 
    __Cont: 
            #line 1104 
    i ++;
  }
  #line 1122 
  if (pending != 0U) {
    #line 1123 
    ;
    #line 1123 
    ;
    #line 1123 
    cif_queue_delayed_work(bnad->work_q,& tx_info->tx_cleanup_work,msecs_to_jiffies(1U));
    #line 1125 
    return;
  }
  #line 1128 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1129 
  bna_tx_cleanup_complete(tx_info->tx);
  #line 1130 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1131 
  return;
}

#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_tx_cleanup(struct bnad *bnad, struct bna_tx *tx)
{
  #line 1137 
  struct bna_tcb *tcb;
  #line 1138 
  int i;
  #line 1136 
  struct bnad_tx_info *tx_info = (struct bnad_tx_info *)tx->priv;
  #line 1140 
  i = 0;
  #line 1140 
  while (i <= 7) {
    #line 1141 
    tcb = tx_info->tcb[i];
    #line 1142 
    if (tcb == (struct bna_tcb *)0) 
                                    #line 1143 
                                    goto __Cont;
    #line 1140 
    __Cont: 
            #line 1140 
    i ++;
  }
  #line 1146 
  cif_queue_delayed_work(bnad->work_q,& tx_info->tx_cleanup_work,0UL);
  #line 1147 
  return;
}

#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_rx_stall(struct bnad *bnad, struct bna_rx *rx)
{
  #line 1153 
  struct bna_ccb *ccb;
  #line 1154 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 1155 
  int i;
  #line 1152 
  struct bnad_rx_info *rx_info = (struct bnad_rx_info *)rx->priv;
  #line 1157 
  i = 0;
  #line 1157 
  while (i <= 15) {
    #line 1158 
    rx_ctrl = & rx_info->rx_ctrl[i];
    #line 1159 
    ccb = rx_ctrl->ccb;
    #line 1160 
    if (ccb == (struct bna_ccb *)0) 
                                    #line 1161 
                                    goto __Cont;
    #line 1163 
    cif_clear_bit(1L,& (ccb->rcb[0])->flags);
    #line 1165 
    if (ccb->rcb[1] != (struct bna_rcb *)0) 
                                            #line 1166 
                                            cif_clear_bit(1L,& (ccb->rcb[1])->flags);
    #line 1157 
    __Cont: 
            #line 1157 
    i ++;
  }
  #line 1168 
  return;
}

#line 1174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_rx_cleanup(void *work)
{
  #line 1177 
  void *__mptr;
  #line 1178 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 1180 
  unsigned long flags;
  #line 1181 
  u32 i;
  #line 1177 
  __mptr = work;
  #line 1176 
  struct bnad_rx_info *rx_info = ((struct bnad_rx_info *)(__mptr + 18446744073709544304U));
  #line 1179 
  struct bnad *bnad = (struct bnad *)0;
  #line 1183 
  i = 0U;
  #line 1183 
  while (i <= 15U) {
    #line 1184 
    rx_ctrl = & rx_info->rx_ctrl[i];
    #line 1186 
    if (rx_ctrl->ccb == (struct bna_ccb *)0) 
                                             #line 1187 
                                             goto __Cont;
    #line 1189 
    bnad = (rx_ctrl->ccb)->bnad;
    #line 1195 
    napi_disable(& rx_ctrl->napi);
    #line 1197 
    bnad_cq_cleanup(bnad,rx_ctrl->ccb);
    #line 1198 
    bnad_rxq_cleanup(bnad,(rx_ctrl->ccb)->rcb[0]);
    #line 1199 
    if ((rx_ctrl->ccb)->rcb[1] != (struct bna_rcb *)0) 
                                                       #line 1200 
                                                       bnad_rxq_cleanup(bnad,(rx_ctrl->ccb)->rcb[1]);
    #line 1183 
    __Cont: 
            #line 1183 
    i ++;
  }
  #line 1203 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1204 
  bna_rx_cleanup_complete(rx_info->rx);
  #line 1205 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1206 
  return;
}

#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_rx_cleanup(struct bnad *bnad, struct bna_rx *rx)
{
  #line 1212 
  struct bna_ccb *ccb;
  #line 1213 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 1214 
  int i;
  #line 1211 
  struct bnad_rx_info *rx_info = (struct bnad_rx_info *)rx->priv;
  #line 1216 
  i = 0;
  #line 1216 
  while (i <= 15) {
    #line 1217 
    rx_ctrl = & rx_info->rx_ctrl[i];
    #line 1218 
    ccb = rx_ctrl->ccb;
    #line 1219 
    if (ccb == (struct bna_ccb *)0) 
                                    #line 1220 
                                    goto __Cont;
    #line 1222 
    cif_clear_bit(0L,& (ccb->rcb[0])->flags);
    #line 1224 
    if (ccb->rcb[1] != (struct bna_rcb *)0) 
                                            #line 1225 
                                            cif_clear_bit(0L,& (ccb->rcb[1])->flags);
    #line 1216 
    __Cont: 
            #line 1216 
    i ++;
  }
  #line 1228 
  cif_queue_work(bnad->work_q,& rx_info->rx_cleanup_work);
  #line 1229 
  return;
}

#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_rx_post(struct bnad *bnad, struct bna_rx *rx)
{
  #line 1235 
  struct bna_ccb *ccb;
  #line 1236 
  struct bna_rcb *rcb;
  #line 1237 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 1238 
  int i;
  #line 1238 
  int j;
  #line 1234 
  struct bnad_rx_info *rx_info = (struct bnad_rx_info *)rx->priv;
  #line 1240 
  i = 0;
  #line 1240 
  while (i <= 15) {
    #line 1241 
    rx_ctrl = & rx_info->rx_ctrl[i];
    #line 1242 
    ccb = rx_ctrl->ccb;
    #line 1243 
    if (ccb == (struct bna_ccb *)0) 
                                    #line 1244 
                                    goto __Cont;
    #line 1246 
    napi_enable(& rx_ctrl->napi);
    #line 1248 
    j = 0;
    #line 1248 
    while (j <= 1) {
      #line 1249 
      rcb = ccb->rcb[j];
      #line 1250 
      if (rcb == (struct bna_rcb *)0) 
                                      #line 1251 
                                      goto __Cont_0;
      #line 1253 
      bnad_rxq_alloc_init(bnad,rcb);
      #line 1254 
      cif_set_bit(0L,& rcb->flags);
      #line 1255 
      cif_set_bit(1L,& rcb->flags);
      #line 1256 
      bnad_rxq_post(bnad,rcb);
      #line 1248 
      __Cont_0: 
                #line 1248 
      j ++;
    }
    #line 1240 
    __Cont: 
            #line 1240 
    i ++;
  }
  #line 1259 
  return;
}

#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_rx_disabled(void *arg, struct bna_rx *rx)
{
  #line 1264 
  struct bnad *bnad = (struct bnad *)arg;
  #line 1266 
  complete(& bnad->bnad_completions.rx_comp);
  #line 1267 
  return;
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_rx_mcast_add(struct bnad *bnad, struct bna_rx *rx)
{
  #line 1272 
  bnad->bnad_completions.mcast_comp_status = (unsigned char)0U;
  #line 1273 
  complete(& bnad->bnad_completions.mcast_comp);
  #line 1274 
  return;
}

#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_stats_get(struct bnad *bnad, enum bna_cb_status status, struct bna_stats *stats)
{
  #line 1280 
  if (status == (unsigned int)BNA_CB_SUCCESS) 
                                              #line 1281 
                                              (bnad->stats.drv_stats.hw_stats_updates) ++;
  #line 1283 
  if (netif_running(bnad->netdev)) {
    #line 1284 
    if (! test_bit(5L,& bnad->run_flags)) 
                                          #line 1285 
                                          return;
  }
  else 
       #line 1285 
       return;
  #line 1287 
  ;
  #line 1287 
  ;
  #line 1287 
  cif_mod_timer(& bnad->stats_timer,msecs_to_jiffies(1000U) + jiffies);
  #line 1289 
  return;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_cb_enet_mtu_set(struct bnad *bnad)
{
  #line 1294 
  bnad->bnad_completions.mtu_comp_status = (unsigned char)0U;
  #line 1295 
  complete(& bnad->bnad_completions.mtu_comp);
  #line 1296 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_cb_completion(void *arg, enum bfa_status status)
{
  #line 1301 
  struct bnad_iocmd_comp *iocmd_comp = (struct bnad_iocmd_comp *)arg;
  #line 1304 
  iocmd_comp->comp_status = (int)status;
  #line 1305 
  complete(& iocmd_comp->comp);
  #line 1306 
  return;
}

#line 1311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_mem_free(struct bnad *bnad, struct bna_mem_info *mem_info)
{
  #line 1314 
  int i;
  #line 1315 
  dma_addr_t dma_pa;
  #line 1317 
  if (mem_info->mdl == (struct bna_mem_descr *)0) 
                                                  #line 1318 
                                                  return;
  #line 1320 
  i = 0;
  #line 1320 
  while (mem_info->num > (unsigned int)i) {
    #line 1321 
    if ((mem_info->mdl + (unsigned long)i)->kva != (void *)0) 
      #line 1322 
      if (mem_info->mem_type == (unsigned int)BNA_MEM_T_DMA) {
        #line 1323 
        dma_pa = ((unsigned long long)__builtin_bswap32((mem_info->mdl + (unsigned long)i)->dma.msb) << 32) | (unsigned long long)__builtin_bswap32((mem_info->mdl + (unsigned long)i)->dma.lsb);
        #line 1325 
        dma_free_coherent(& (bnad->pcidev)->dev,(unsigned long)(mem_info->mdl + (unsigned long)i)->len,(mem_info->mdl + (unsigned long)i)->kva,dma_pa);
      }
      else 
           #line 1329 
           kfree((mem_info->mdl + (unsigned long)i)->kva);
    #line 1320 
    i ++;
  }
  #line 1332 
  kfree((void *)mem_info->mdl);
  #line 1333 
  mem_info->mdl = (struct bna_mem_descr *)0;
  #line 1334 
  return;
}

#line 1337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_mem_alloc(struct bnad *bnad, struct bna_mem_info *mem_info)
{
  #line 1340 
  int i;
  #line 1341 
  dma_addr_t dma_pa;
  #line 1343 
  if (mem_info->num == 0U || mem_info->len == 0U) {
    #line 1344 
    mem_info->mdl = (struct bna_mem_descr *)0;
    #line 1345 
    return 0;
  }
  #line 1348 
  mem_info->mdl = (struct bna_mem_descr *)kcalloc((unsigned long)mem_info->num,24UL,3264U);
  #line 1350 
  if (mem_info->mdl == (struct bna_mem_descr *)0) 
                                                  #line 1351 
                                                  return -12;
  #line 1353 
  if (mem_info->mem_type == (unsigned int)BNA_MEM_T_DMA) {
    #line 1354 
    i = 0;
    #line 1354 
    while (mem_info->num > (unsigned int)i) {
      #line 1355 
      (mem_info->mdl + (unsigned long)i)->len = mem_info->len;
      #line 1356 
      (mem_info->mdl + (unsigned long)i)->kva = dma_alloc_coherent(& (bnad->pcidev)->dev,(unsigned long)mem_info->len,& dma_pa,3264U);
      #line 1360 
      if ((mem_info->mdl + (unsigned long)i)->kva == (void *)0) 
                                                                #line 1361 
                                                                goto err_return;
      {
        #line 1363 
        u64 tmp_addr = __builtin_bswap64((unsigned long)dma_pa);
        #line 1363 
        (mem_info->mdl + (unsigned long)i)->dma.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
        #line 1363 
        (mem_info->mdl + (unsigned long)i)->dma.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
      }
      #line 1354 
      i ++;
    }
  }
  else {
    #line 1367 
    i = 0;
    #line 1367 
    while (mem_info->num > (unsigned int)i) {
      #line 1368 
      (mem_info->mdl + (unsigned long)i)->len = mem_info->len;
      #line 1369 
      (mem_info->mdl + (unsigned long)i)->kva = kzalloc((unsigned long)mem_info->len,3264U);
      #line 1371 
      if ((mem_info->mdl + (unsigned long)i)->kva == (void *)0) 
                                                                #line 1372 
                                                                goto err_return;
      #line 1367 
      i ++;
    }
  }
  #line 1376 
  return 0;
  #line 1378 
  err_return: 
              #line 1378 
  ;
  #line 1379 
  bnad_mem_free(bnad,mem_info);
  #line 1380 
  return -12;
}

#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_mbox_irq_free(struct bnad *bnad)
{
  #line 1387 
  int irq;
  #line 1388 
  unsigned long flags;
  #line 1390 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1391 
  bnad_disable_mbox_irq(bnad);
  #line 1392 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1394 
  if ((bnad->cfg_flags & 16U) != 0U) 
                                     #line 1394 
                                     irq = (int)(bnad->msix_table)->vector; else 
                                                                    #line 1394 
                                                                    irq = (int)(bnad->pcidev)->irq;
  #line 1395 
  cif_free_irq((unsigned int)irq,(void *)bnad);
  #line 1396 
  return;
}

#line 1404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_mbox_irq_alloc(struct bnad *bnad)
{
  #line 1407 
  unsigned long irq_flags;
  #line 1407 
  unsigned long flags;
  #line 1408 
  u32 irq;
  #line 1409 
  irqreturn_t (*irq_handler)(int , void *);
  #line 1406 
  int err = 0;
  #line 1411 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1412 
  if ((bnad->cfg_flags & 16U) != 0U) {
    #line 1413 
    irq_handler = & bnad_msix_mbox_handler;
    #line 1414 
    irq = (bnad->msix_table)->vector;
    #line 1415 
    irq_flags = 0UL;
  }
  else {
    #line 1417 
    irq_handler = & bnad_isr;
    #line 1418 
    irq = (bnad->pcidev)->irq;
    #line 1419 
    irq_flags = 128UL;
  }
  #line 1422 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1423 
  sprintf((char *)(& bnad->mbox_irq_name),(char *)"%s",(char *)"bna");
  #line 1429 
  cif_set_bit(2L,& bnad->run_flags);
  #line 1431 
  (bnad->stats.drv_stats.mbox_intr_disabled) ++;
  #line 1433 
  err = cif_request_irq(irq,irq_handler,irq_flags,(char *)(& bnad->mbox_irq_name),(void *)bnad);
  #line 1436 
  return err;
}

#line 1440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_txrx_irq_free(struct bnad *bnad, struct bna_intr_info *intr_info)
{
  #line 1442 
  kfree((void *)intr_info->idl);
  #line 1443 
  intr_info->idl = (struct bna_intr_descr *)0;
  #line 1444 
  return;
}

#line 1448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_txrx_irq_alloc(struct bnad *bnad, enum bnad_intr_source src, u32 txrx_id, struct bna_intr_info *intr_info)
{
  #line 1451 
  int i;
  #line 1452 
  u32 cfg_flags;
  #line 1453 
  unsigned long flags;
  #line 1451 
  int vector_start = 0;
  #line 1455 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1456 
  cfg_flags = bnad->cfg_flags;
  #line 1457 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1459 
  if ((cfg_flags & 16U) != 0U) {
    #line 1460 
    intr_info->intr_type = BNA_INTR_T_MSIX;
    #line 1461 
    intr_info->idl = (struct bna_intr_descr *)kcalloc((unsigned long)intr_info->num,4UL,3264U);
    #line 1464 
    if (intr_info->idl == (struct bna_intr_descr *)0) 
                                                      #line 1465 
                                                      return -12;
    #line 1467 
    switch ((unsigned int)src) {
      #line 1468 
      case (unsigned int)1: 
                            #line 1468 
      ;
      #line 1469 
      vector_start = (int)(txrx_id + 1U);
      #line 1470 
      break;
      #line 1472 
      case (unsigned int)2: 
                            #line 1472 
      ;
      #line 1473 
      vector_start = (int)((bnad->num_tx * bnad->num_txq_per_tx + txrx_id) + 1U);
      #line 1476 
      break;
      #line 1478 
      default: 
               #line 1478 
      ;
      #line 1480 
      ldv_inline_asm();
      #line 1481 
      ldv_inline_asm();
      #line 1482 
      ldv_inline_asm();
      #line 1479 
      ;
    }
    #line 1482 
    i = 0;
    #line 1482 
    while (intr_info->num > i) {
      #line 1483 
      (intr_info->idl + (unsigned long)i)->vector = vector_start + i;
      #line 1482 
      i ++;
    }
  }
  else {
    #line 1485 
    intr_info->intr_type = BNA_INTR_T_INTX;
    #line 1486 
    intr_info->num = 1;
    #line 1487 
    intr_info->idl = (struct bna_intr_descr *)kcalloc((unsigned long)intr_info->num,4UL,3264U);
    #line 1490 
    if (intr_info->idl == (struct bna_intr_descr *)0) 
                                                      #line 1491 
                                                      return -12;
    #line 1493 
    switch ((unsigned int)src) {
      #line 1494 
      case (unsigned int)1: 
                            #line 1494 
      ;
      #line 1495 
      (intr_info->idl)->vector = 1;
      #line 1496 
      break;
      #line 1498 
      case (unsigned int)2: 
                            #line 1498 
      ;
      #line 1499 
      (intr_info->idl)->vector = 2;
      #line 1500 
      break;
    }
  }
  #line 1503 
  return 0;
}

#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_tx_msix_unregister(struct bnad *bnad, struct bnad_tx_info *tx_info, int num_txqs)
{
  #line 1513 
  int i;
  #line 1514 
  int vector_num;
  #line 1516 
  i = 0;
  #line 1516 
  while (i < num_txqs) {
    #line 1517 
    if (tx_info->tcb[i] == (struct bna_tcb *)0) 
                                                #line 1518 
                                                goto __Cont;
    #line 1520 
    vector_num = (tx_info->tcb[i])->intr_vector;
    #line 1521 
    cif_free_irq((bnad->msix_table + (unsigned long)vector_num)->vector,(void *)tx_info->tcb[i]);
    #line 1516 
    __Cont: 
            #line 1516 
    i ++;
  }
  #line 1523 
  return;
}

#line 1529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_tx_msix_register(struct bnad *bnad, struct bnad_tx_info *tx_info, u32 tx_id, int num_txqs)
{
  #line 1532 
  int i;
  #line 1533 
  int err;
  #line 1534 
  int vector_num;
  #line 1536 
  i = 0;
  #line 1536 
  while (i < num_txqs) {
    #line 1537 
    vector_num = (tx_info->tcb[i])->intr_vector;
    #line 1538 
    sprintf((char *)(& (tx_info->tcb[i])->name),(char *)"%s TXQ %d",(char *)(& (bnad->netdev)->name),(unsigned int)(tx_info->tcb[i])->id + tx_id);
    #line 1540 
    err = cif_request_irq((bnad->msix_table + (unsigned long)vector_num)->vector,& bnad_msix_tx,0UL,(char *)(& (tx_info->tcb[i])->name),(void *)tx_info->tcb[i]);
    #line 1544 
    if (err != 0) 
                  #line 1545 
                  goto err_return;
    #line 1536 
    i ++;
  }
  #line 1548 
  return 0;
  #line 1550 
  err_return: 
              #line 1550 
  ;
  #line 1551 
  if (i > 0) 
             #line 1552 
             bnad_tx_msix_unregister(bnad,tx_info,i + -1);
  #line 1553 
  return -1;
}

#line 1560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_rx_msix_unregister(struct bnad *bnad, struct bnad_rx_info *rx_info, int num_rxps)
{
  #line 1563 
  int i;
  #line 1564 
  int vector_num;
  #line 1566 
  i = 0;
  #line 1566 
  while (i < num_rxps) {
    #line 1567 
    if (rx_info->rx_ctrl[i].ccb == (struct bna_ccb *)0) 
                                                        #line 1568 
                                                        goto __Cont;
    #line 1570 
    vector_num = (rx_info->rx_ctrl[i].ccb)->intr_vector;
    #line 1571 
    cif_free_irq((bnad->msix_table + (unsigned long)vector_num)->vector,(void *)rx_info->rx_ctrl[i].ccb);
    #line 1566 
    __Cont: 
            #line 1566 
    i ++;
  }
  #line 1574 
  return;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_rx_msix_register(struct bnad *bnad, struct bnad_rx_info *rx_info, u32 rx_id, int num_rxps)
{
  #line 1583 
  int i;
  #line 1584 
  int err;
  #line 1585 
  int vector_num;
  #line 1587 
  i = 0;
  #line 1587 
  while (i < num_rxps) {
    #line 1588 
    vector_num = (rx_info->rx_ctrl[i].ccb)->intr_vector;
    #line 1589 
    sprintf((char *)(& (rx_info->rx_ctrl[i].ccb)->name),(char *)"%s CQ %d",(char *)(& (bnad->netdev)->name),(unsigned int)(rx_info->rx_ctrl[i].ccb)->id + rx_id);
    #line 1592 
    err = cif_request_irq((bnad->msix_table + (unsigned long)vector_num)->vector,& bnad_msix_rx,0UL,(char *)(& (rx_info->rx_ctrl[i].ccb)->name),(void *)rx_info->rx_ctrl[i].ccb);
    #line 1596 
    if (err != 0) 
                  #line 1597 
                  goto err_return;
    #line 1587 
    i ++;
  }
  #line 1600 
  return 0;
  #line 1602 
  err_return: 
              #line 1602 
  ;
  #line 1603 
  if (i > 0) 
             #line 1604 
             bnad_rx_msix_unregister(bnad,rx_info,i + -1);
  #line 1605 
  return -1;
}

#line 1610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_tx_res_free(struct bnad *bnad, struct bna_res_info *res_info)
{
  #line 1612 
  int i;
  #line 1614 
  i = 0;
  #line 1614 
  while (i <= 6) {
    #line 1615 
    if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_MEM) 
      #line 1616 
      bnad_mem_free(bnad,& (res_info + (unsigned long)i)->res_u.mem_info);
    else 
      #line 1617 
      if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_INTR) 
        #line 1618 
        bnad_txrx_irq_free(bnad,& (res_info + (unsigned long)i)->res_u.intr_info);
    #line 1614 
    i ++;
  }
  #line 1619 
  return;
}

#line 1624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_tx_res_alloc(struct bnad *bnad, struct bna_res_info *res_info, u32 tx_id)
{
  #line 1627 
  int i;
  #line 1627 
  int err = 0;
  #line 1629 
  i = 0;
  #line 1629 
  while (i <= 6) {
    #line 1630 
    if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_MEM) 
      #line 1631 
      err = bnad_mem_alloc(bnad,& (res_info + (unsigned long)i)->res_u.mem_info);
    else 
      #line 1633 
      if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_INTR) 
        #line 1634 
        err = bnad_txrx_irq_alloc(bnad,(enum bnad_intr_source)BNAD_INTR_TX,tx_id,& (res_info + (unsigned long)i)->res_u.intr_info);
    #line 1636 
    if (err != 0) 
                  #line 1637 
                  goto err_return;
    #line 1629 
    i ++;
  }
  #line 1639 
  return 0;
  #line 1641 
  err_return: 
              #line 1641 
  ;
  #line 1642 
  bnad_tx_res_free(bnad,res_info);
  #line 1643 
  return err;
}

#line 1648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_rx_res_free(struct bnad *bnad, struct bna_res_info *res_info)
{
  #line 1650 
  int i;
  #line 1652 
  i = 0;
  #line 1652 
  while (i <= 15) {
    #line 1653 
    if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_MEM) 
      #line 1654 
      bnad_mem_free(bnad,& (res_info + (unsigned long)i)->res_u.mem_info);
    else 
      #line 1655 
      if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_INTR) 
        #line 1656 
        bnad_txrx_irq_free(bnad,& (res_info + (unsigned long)i)->res_u.intr_info);
    #line 1652 
    i ++;
  }
  #line 1657 
  return;
}

#line 1662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_rx_res_alloc(struct bnad *bnad, struct bna_res_info *res_info, uint rx_id)
{
  #line 1665 
  int i;
  #line 1665 
  int err = 0;
  #line 1668 
  i = 0;
  #line 1668 
  while (i <= 15) {
    #line 1669 
    if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_MEM) 
      #line 1670 
      err = bnad_mem_alloc(bnad,& (res_info + (unsigned long)i)->res_u.mem_info);
    else 
      #line 1672 
      if ((res_info + (unsigned long)i)->res_type == (unsigned int)BNA_RES_T_INTR) 
        #line 1673 
        err = bnad_txrx_irq_alloc(bnad,(enum bnad_intr_source)BNAD_INTR_RX,rx_id,& (res_info + (unsigned long)i)->res_u.intr_info);
    #line 1675 
    if (err != 0) 
                  #line 1676 
                  goto err_return;
    #line 1668 
    i ++;
  }
  #line 1678 
  return 0;
  #line 1680 
  err_return: 
              #line 1680 
  ;
  #line 1681 
  bnad_rx_res_free(bnad,res_info);
  #line 1682 
  return err;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_ioc_timeout(struct timer_list *t)
{
  #line 1690 
  void *__mptr;
  #line 1691 
  unsigned long flags;
  #line 1690 
  __mptr = (void *)t;
  #line 1690 
  struct bnad *bnad = ((struct bnad *)(__mptr + 18446744073709536128U));
  #line 1693 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1694 
  bfa_nw_ioc_timeout(& bnad->bna.ioceth.ioc);
  #line 1695 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1696 
  return;
}

#line 1699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_ioc_hb_check(struct timer_list *t)
{
  #line 1701 
  void *__mptr;
  #line 1702 
  unsigned long flags;
  #line 1701 
  __mptr = (void *)t;
  #line 1701 
  struct bnad *bnad = ((struct bnad *)(__mptr + 18446744073709535864U));
  #line 1704 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1705 
  bfa_nw_ioc_hb_check(& bnad->bna.ioceth.ioc);
  #line 1706 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1707 
  return;
}

#line 1710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_iocpf_timeout(struct timer_list *t)
{
  #line 1712 
  void *__mptr;
  #line 1713 
  unsigned long flags;
  #line 1712 
  __mptr = (void *)t;
  #line 1712 
  struct bnad *bnad = ((struct bnad *)(__mptr + 18446744073709536040U));
  #line 1715 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1716 
  bfa_nw_iocpf_timeout(& bnad->bna.ioceth.ioc);
  #line 1717 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1718 
  return;
}

#line 1721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_iocpf_sem_timeout(struct timer_list *t)
{
  #line 1723 
  void *__mptr;
  #line 1724 
  unsigned long flags;
  #line 1723 
  __mptr = (void *)t;
  #line 1723 
  struct bnad *bnad = ((struct bnad *)(__mptr + 18446744073709535952U));
  #line 1726 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1727 
  bfa_nw_iocpf_sem_timeout(& bnad->bna.ioceth.ioc);
  #line 1728 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1729 
  return;
}

#line 1743  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_dim_timeout(struct timer_list *t)
{
  #line 1745 
  void *__mptr;
  #line 1746 
  struct bnad_rx_info *rx_info;
  #line 1747 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 1748 
  int i;
  #line 1748 
  int j;
  #line 1749 
  unsigned long flags;
  #line 1745 
  __mptr = (void *)t;
  #line 1745 
  struct bnad *bnad = ((struct bnad *)(__mptr + 18446744073709531872U));
  #line 1751 
  if (! netif_carrier_ok(bnad->netdev)) 
                                        #line 1752 
                                        return;
  #line 1754 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1755 
  i = 0;
  #line 1755 
  while (bnad->num_rx > (unsigned int)i) {
    #line 1756 
    rx_info = & bnad->rx_info[i];
    #line 1757 
    if (rx_info->rx == (struct bna_rx *)0) 
                                           #line 1758 
                                           goto __Cont;
    #line 1759 
    j = 0;
    #line 1759 
    while (bnad->num_rxp_per_rx > (unsigned int)j) {
      #line 1760 
      rx_ctrl = & rx_info->rx_ctrl[j];
      #line 1761 
      if (rx_ctrl->ccb == (struct bna_ccb *)0) 
                                               #line 1762 
                                               goto __Cont_0;
      #line 1763 
      bna_rx_dim_update(rx_ctrl->ccb);
      #line 1759 
      __Cont_0: 
                #line 1759 
      j ++;
    }
    #line 1755 
    __Cont: 
            #line 1755 
    i ++;
  }
  #line 1768 
  if ((int)test_bit(4L,& bnad->run_flags) != 0) {
    #line 1769 
    ;
    #line 1769 
    ;
    #line 1769 
    cif_mod_timer(& bnad->dim_timer,msecs_to_jiffies(1000U) + jiffies);
  }
  #line 1771 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1772 
  return;
}

#line 1776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_stats_timeout(struct timer_list *t)
{
  #line 1778 
  void *__mptr;
  #line 1779 
  unsigned long flags;
  #line 1778 
  __mptr = (void *)t;
  #line 1778 
  struct bnad *bnad = ((struct bnad *)(__mptr + 18446744073709531784U));
  #line 1781 
  if (netif_running(bnad->netdev)) {
    #line 1782 
    if (! test_bit(5L,& bnad->run_flags)) 
                                          #line 1783 
                                          return;
  }
  else 
       #line 1783 
       return;
  #line 1785 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1786 
  bna_hw_stats_get(& bnad->bna);
  #line 1787 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1788 
  return;
}

#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_dim_timer_start(struct bnad *bnad)
{
  #line 1797 
  if ((bnad->cfg_flags & 1U) != 0U) {
    #line 1798 
    if (! test_bit(4L,& bnad->run_flags)) {
      {
        #line 1799 
        struct lock_class_key __key;
        #line 1799 
        init_timer_key(& bnad->dim_timer,& bnad_dim_timeout,0U,(char *)"(&bnad->dim_timer)",& __key);
      }
      #line 1800 
      cif_set_bit(4L,& bnad->run_flags);
      #line 1801 
      ;
      #line 1801 
      ;
      #line 1801 
      cif_mod_timer(& bnad->dim_timer,msecs_to_jiffies(1000U) + jiffies);
    }
  }
  #line 1804 
  return;
}

#line 1811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_stats_timer_start(struct bnad *bnad)
{
  #line 1813 
  unsigned long flags;
  #line 1815 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1816 
  if (! test_and_set_bit(5L,& bnad->run_flags)) {
    {
      #line 1817 
      struct lock_class_key __key;
      #line 1817 
      init_timer_key(& bnad->stats_timer,& bnad_stats_timeout,0U,(char *)"(&bnad->stats_timer)",& __key);
    }
    #line 1818 
    ;
    #line 1818 
    ;
    #line 1818 
    cif_mod_timer(& bnad->stats_timer,msecs_to_jiffies(1000U) + jiffies);
  }
  #line 1821 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1822 
  return;
}

#line 1829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_stats_timer_stop(struct bnad *bnad)
{
  #line 1832 
  unsigned long flags;
  #line 1831 
  int to_del = 0;
  #line 1834 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1835 
  if ((int)test_and_set_bit(5L,& bnad->run_flags) != 0) 
                                                        #line 1836 
                                                        to_del = 1;
  #line 1837 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1838 
  if (to_del != 0) 
                   #line 1839 
                   cif_del_timer_sync(& bnad->stats_timer);
  #line 1840 
  return;
}

#line 1845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_netdev_mc_list_get(struct net_device *netdev, u8 *mc_list)
{
  #line 1850 
  void *__mptr;
  #line 1848 
  struct netdev_hw_addr *mc_addr;
  #line 1847 
  int i = 1;
  #line 1850 
  __mptr = (void *)netdev->mc.list.next;
  #line 1850 
  mc_addr = ((struct netdev_hw_addr *)__mptr);
  #line 1850 
  while (& mc_addr->list != & netdev->mc.list) {
    #line 1850 
    void *__mptr_0;
    #line 1851 
    ether_addr_copy(mc_list + (unsigned long)(i * 6),& mc_addr->addr[0]);
    #line 1852 
    i ++;
    #line 1850 
    __mptr_0 = (void *)mc_addr->list.next;
    #line 1850 
    mc_addr = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 1854 
  return;
}

#line 1857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_napi_poll_rx(struct napi_struct *napi, int budget)
{
  #line 1860 
  void *__mptr;
  #line 1860 
  __mptr = (void *)napi;
  #line 1859 
  struct bnad_rx_ctrl *rx_ctrl = ((struct bnad_rx_ctrl *)(__mptr + 18446744073709551592U));
  #line 1861 
  struct bnad *bnad = rx_ctrl->bnad;
  #line 1862 
  int rcvd = 0;
  #line 1864 
  (rx_ctrl->rx_poll_ctr) ++;
  #line 1866 
  if (! netif_carrier_ok(bnad->netdev)) 
                                        #line 1867 
                                        goto poll_exit;
  #line 1869 
  rcvd = (int)bnad_cq_process(bnad,rx_ctrl->ccb,budget);
  #line 1870 
  if (rcvd >= budget) 
                      #line 1871 
                      return rcvd;
  #line 1873 
  poll_exit: 
             #line 1873 
  ;
  #line 1874 
  napi_complete_done(napi,rcvd);
  #line 1876 
  (rx_ctrl->rx_complete) ++;
  #line 1878 
  if (rx_ctrl->ccb != (struct bna_ccb *)0) {
    #line 1879 
    if ((long)((int)test_bit(0L,& ((rx_ctrl->ccb)->rcb[0])->flags) != 0) != 0L) {
      #line 1879 
      ((rx_ctrl->ccb)->i_dbell)->doorbell_ack = (unsigned int)((int)(rx_ctrl->ccb)->rx_coalescing_timeo << 16) | 2147483648U;
      #line 1879 
      writel(((rx_ctrl->ccb)->i_dbell)->doorbell_ack,((rx_ctrl->ccb)->i_dbell)->doorbell_addr);
    }
  }
  #line 1881 
  return rcvd;
}

#line 1886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_napi_add(struct bnad *bnad, u32 rx_id)
{
  #line 1888 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 1889 
  int i;
  #line 1892 
  i = 0;
  #line 1892 
  while (bnad->num_rxp_per_rx > (unsigned int)i) {
    #line 1893 
    rx_ctrl = & bnad->rx_info[rx_id].rx_ctrl[i];
    #line 1894 
    netif_napi_add(bnad->netdev,& rx_ctrl->napi,& bnad_napi_poll_rx,64);
    #line 1892 
    i ++;
  }
  #line 1897 
  return;
}

#line 1900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_napi_delete(struct bnad *bnad, u32 rx_id)
{
  #line 1902 
  int i;
  #line 1905 
  i = 0;
  #line 1905 
  while (bnad->num_rxp_per_rx > (unsigned int)i) {
    #line 1906 
    netif_napi_del(& bnad->rx_info[rx_id].rx_ctrl[i].napi);
    #line 1905 
    i ++;
  }
  #line 1907 
  return;
}

#line 1911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_destroy_tx(struct bnad *bnad, u32 tx_id)
{
  #line 1915 
  unsigned long flags;
  #line 1913 
  struct bnad_tx_info *tx_info = & bnad->tx_info[tx_id];
  #line 1914 
  struct bna_res_info *res_info = & bnad->tx_res_info[tx_id].res_info[0];
  #line 1917 
  if (tx_info->tx == (struct bna_tx *)0) 
                                         #line 1918 
                                         return;
  #line 1920 
  __init_completion(& bnad->bnad_completions.tx_comp);
  #line 1921 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1922 
  bna_tx_disable(tx_info->tx,(enum bna_cleanup_type)BNA_HARD_CLEANUP,& bnad_cb_tx_disabled);
  #line 1923 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1924 
  wait_for_completion(& bnad->bnad_completions.tx_comp);
  #line 1926 
  if ((tx_info->tcb[0])->intr_type == (unsigned int)BNA_INTR_T_MSIX) 
    #line 1927 
    bnad_tx_msix_unregister(bnad,tx_info,(int)bnad->num_txq_per_tx);
  #line 1930 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1931 
  bna_tx_destroy(tx_info->tx);
  #line 1932 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1934 
  tx_info->tx = (struct bna_tx *)0;
  #line 1935 
  tx_info->tx_id = 0U;
  #line 1937 
  bnad_tx_res_free(bnad,res_info);
  #line 1938 
  return;
}

#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_setup_tx(struct bnad *bnad, u32 tx_id)
{
  #line 1944 
  int err;
  #line 1958 
  struct bna_tx *tx;
  #line 1959 
  unsigned long flags;
  #line 1945 
  struct bnad_tx_info *tx_info = & bnad->tx_info[tx_id];
  #line 1946 
  struct bna_res_info *res_info = & bnad->tx_res_info[tx_id].res_info[0];
  #line 1947 
  struct bna_intr_info *intr_info = & (res_info + 6U)->res_u.intr_info;
  #line 1949 
  struct bna_tx_config *tx_config = & bnad->tx_config[tx_id];
  #line 1950 
  struct bna_tx_event_cbfn tx_cbfn = {.tcb_setup_cbfn = & bnad_cb_tcb_setup, .tcb_destroy_cbfn = & bnad_cb_tcb_destroy, .tx_stall_cbfn = & bnad_cb_tx_stall, .tx_resume_cbfn = & bnad_cb_tx_resume, .tx_cleanup_cbfn = & bnad_cb_tx_cleanup};
  #line 1961 
  tx_info->tx_id = tx_id;
  #line 1964 
  tx_config->num_txq = (int)bnad->num_txq_per_tx;
  #line 1965 
  tx_config->txq_depth = (int)bnad->txq_depth;
  #line 1966 
  tx_config->tx_type = BNA_TX_T_REGULAR;
  #line 1967 
  tx_config->coalescing_timeo = (int)bnad->tx_coalescing_timeo;
  #line 1970 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1971 
  bna_tx_res_req((int)bnad->num_txq_per_tx,(int)bnad->txq_depth,res_info);
  #line 1973 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1976 
  (res_info + 1U)->res_type = BNA_RES_T_MEM;
  #line 1976 
  (res_info + 1U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1976 
  (res_info + 1U)->res_u.mem_info.num = bnad->num_txq_per_tx;
  #line 1976 
  (res_info + 1U)->res_u.mem_info.len = bnad->txq_depth * 80U;
  #line 1981 
  err = bnad_tx_res_alloc(bnad,res_info,tx_id);
  #line 1982 
  if (err != 0) 
                #line 1983 
                return err;
  #line 1986 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1987 
  tx = bna_tx_create(& bnad->bna,bnad,tx_config,& tx_cbfn,res_info,(void *)tx_info);
  #line 1989 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 1990 
  if (tx == (struct bna_tx *)0) {
    #line 1991 
    err = -12;
    #line 1992 
    goto err_return;
  }
  #line 1994 
  tx_info->tx = tx;
  {
    #line 1996 
    struct lock_class_key __key;
    #line 1996 
    __init_work(& tx_info->tx_cleanup_work.work,0);
    #line 1996 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1996 
    tx_info->tx_cleanup_work.work.data = __constr_expr_44;
    #line 1996 
    lockdep_init_map(& tx_info->tx_cleanup_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1996 
    INIT_LIST_HEAD(& tx_info->tx_cleanup_work.work.entry);
    #line 1996 
    tx_info->tx_cleanup_work.work.func = (void (*)(struct work_struct *))(& bnad_tx_cleanup);
  }
  {
    #line 1996 
    struct lock_class_key __key_0;
    #line 1996 
    init_timer_key(& tx_info->tx_cleanup_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&tx_info->tx_cleanup_work)->timer",& __key_0);
  }
  #line 2000 
  if (intr_info->intr_type == (unsigned int)BNA_INTR_T_MSIX) {
    #line 2001 
    err = bnad_tx_msix_register(bnad,tx_info,tx_id,(int)bnad->num_txq_per_tx);
    #line 2003 
    if (err != 0) 
                  #line 2004 
                  goto cleanup_tx;
  }
  #line 2007 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2008 
  bna_tx_enable(tx);
  #line 2009 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2011 
  return 0;
  #line 2013 
  cleanup_tx: 
              #line 2013 
  ;
  #line 2014 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2015 
  bna_tx_destroy(tx_info->tx);
  #line 2016 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2017 
  tx_info->tx = (struct bna_tx *)0;
  #line 2018 
  tx_info->tx_id = 0U;
  #line 2019 
  err_return: 
              #line 2019 
  ;
  #line 2020 
  bnad_tx_res_free(bnad,res_info);
  #line 2021 
  return err;
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_init_rx_config(struct bnad *bnad, struct bna_rx_config *rx_config)
{
  #line 2029 
  memset((void *)rx_config,0,108UL);
  #line 2030 
  rx_config->rx_type = BNA_RX_T_REGULAR;
  #line 2031 
  rx_config->num_paths = (int)bnad->num_rxp_per_rx;
  #line 2032 
  rx_config->coalescing_timeo = (int)bnad->rx_coalescing_timeo;
  #line 2034 
  if (bnad->num_rxp_per_rx > 1U) {
    #line 2035 
    rx_config->rss_status = BNA_STATUS_T_ENABLED;
    #line 2036 
    rx_config->rss_config.hash_type = (enum bfi_enet_rss_type)15;
    #line 2041 
    rx_config->rss_config.hash_mask = (unsigned char)((unsigned int)((unsigned char)bnad->num_rxp_per_rx) + 255U);
    #line 2043 
    netdev_rss_key_fill((void *)(& rx_config->rss_config.toeplitz_hash_key),40UL);
  }
  else {
    #line 2046 
    rx_config->rss_status = BNA_STATUS_T_DISABLED;
    #line 2047 
    memset((void *)(& rx_config->rss_config),0,48UL);
  }
  #line 2051 
  rx_config->frame_size = (bnad->netdev)->mtu + 22U;
  #line 2052 
  rx_config->q0_multi_buf = BNA_STATUS_T_DISABLED;
  #line 2059 
  rx_config->rxp_type = BNA_RXP_SLR;
  #line 2061 
  if ((unsigned int)(bnad->pcidev)->device == 34U && rx_config->frame_size > 4096U) {
    #line 2067 
    rx_config->q0_buf_size = 2048U;
    #line 2069 
    rx_config->q0_num_vecs = 4U;
    #line 2070 
    rx_config->q0_depth = bnad->rxq_depth * rx_config->q0_num_vecs;
    #line 2071 
    rx_config->q0_multi_buf = BNA_STATUS_T_ENABLED;
  }
  else {
    #line 2073 
    rx_config->q0_buf_size = rx_config->frame_size;
    #line 2074 
    rx_config->q0_num_vecs = 1U;
    #line 2075 
    rx_config->q0_depth = bnad->rxq_depth;
  }
  #line 2079 
  if (rx_config->rxp_type == (unsigned int)BNA_RXP_SLR) {
    #line 2080 
    rx_config->q1_depth = bnad->rxq_depth;
    #line 2081 
    rx_config->q1_buf_size = 128U;
  }
  #line 2084 
  rx_config->vlan_strip_status = (enum bna_status)((int)((bnad->netdev)->features >> 8) & 1);
  #line 2087 
  return;
}

#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_rx_ctrl_init(struct bnad *bnad, u32 rx_id)
{
  #line 2093 
  int i;
  #line 2092 
  struct bnad_rx_info *rx_info = & bnad->rx_info[rx_id];
  #line 2095 
  i = 0;
  #line 2095 
  while (bnad->num_rxp_per_rx > (unsigned int)i) {
    #line 2096 
    rx_info->rx_ctrl[i].bnad = bnad;
    #line 2095 
    i ++;
  }
  #line 2097 
  return;
}

#line 2101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static u32 bnad_reinit_rx(struct bnad *bnad)
{
  #line 2106 
  unsigned long flags;
  #line 2103 
  struct net_device *netdev = bnad->netdev;
  #line 2104 
  u32 err = 0U;
  #line 2104 
  u32 current_err = 0U;
  #line 2105 
  u32 rx_id = 0U;
  #line 2105 
  u32 count = 0U;
  #line 2109 
  rx_id = 0U;
  #line 2109 
  while (bnad->num_rx > rx_id) {
    #line 2110 
    if (bnad->rx_info[rx_id].rx == (struct bna_rx *)0) 
                                                       #line 2111 
                                                       goto __Cont;
    #line 2112 
    bnad_destroy_rx(bnad,rx_id);
    #line 2109 
    __Cont: 
            #line 2109 
    rx_id ++;
  }
  #line 2115 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2116 
  bna_enet_mtu_set(& bnad->bna.enet,(int)((bnad->netdev)->mtu + 22U),(void (*)(struct bnad *))0);
  #line 2118 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2120 
  rx_id = 0U;
  #line 2120 
  while (bnad->num_rx > rx_id) {
    {
      #line 2121 
      count ++;
      #line 2122 
      current_err = (unsigned int)bnad_setup_rx(bnad,rx_id);
      #line 2123 
      if (current_err != 0U && err == 0U) {
        #line 2124 
        err = current_err;
        #line 2125 
        netdev_err(netdev,(char *)"RXQ:%u setup failed\n",rx_id);
      }
    }
    #line 2120 
    rx_id ++;
  }
  #line 2130 
  if (bnad->rx_info[0].rx != (struct bna_rx *)0 && err == 0U) {
    #line 2131 
    bnad_restore_vlans(bnad,0U);
    #line 2132 
    bnad_enable_default_bcast(bnad);
    #line 2133 
    cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
    #line 2134 
    bnad_mac_addr_set_locked(bnad,netdev->dev_addr);
    #line 2135 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 2136 
    bnad_set_rx_mode(netdev);
  }
  #line 2139 
  return count;
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_destroy_rx(struct bnad *bnad, u32 rx_id)
{
  #line 2149 
  unsigned long flags;
  #line 2146 
  struct bnad_rx_info *rx_info = & bnad->rx_info[rx_id];
  #line 2147 
  struct bna_rx_config *rx_config = & bnad->rx_config[rx_id];
  #line 2148 
  struct bna_res_info *res_info = & bnad->rx_res_info[rx_id].res_info[0];
  #line 2150 
  int to_del = 0;
  #line 2152 
  if (rx_info->rx == (struct bna_rx *)0) 
                                         #line 2153 
                                         return;
  #line 2155 
  if (rx_id == 0U) {
    #line 2156 
    cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
    #line 2157 
    if ((bnad->cfg_flags & 1U) != 0U) {
      #line 2157 
      if ((int)test_bit(4L,& bnad->run_flags) != 0) {
        #line 2159 
        cif_clear_bit(4L,& bnad->run_flags);
        #line 2160 
        to_del = 1;
      }
    }
    #line 2162 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 2163 
    if (to_del != 0) 
                     #line 2164 
                     cif_del_timer_sync(& bnad->dim_timer);
  }
  #line 2167 
  __init_completion(& bnad->bnad_completions.rx_comp);
  #line 2168 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2169 
  bna_rx_disable(rx_info->rx,(enum bna_cleanup_type)BNA_HARD_CLEANUP,& bnad_cb_rx_disabled);
  #line 2170 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2171 
  wait_for_completion(& bnad->bnad_completions.rx_comp);
  #line 2173 
  if ((rx_info->rx_ctrl[0].ccb)->intr_type == (unsigned int)BNA_INTR_T_MSIX) 
    #line 2174 
    bnad_rx_msix_unregister(bnad,rx_info,rx_config->num_paths);
  #line 2176 
  bnad_napi_delete(bnad,rx_id);
  #line 2178 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2179 
  bna_rx_destroy(rx_info->rx);
  #line 2181 
  rx_info->rx = (struct bna_rx *)0;
  #line 2182 
  rx_info->rx_id = 0U;
  #line 2183 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2185 
  bnad_rx_res_free(bnad,res_info);
  #line 2186 
  return;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_setup_rx(struct bnad *bnad, u32 rx_id)
{
  #line 2192 
  int err;
  #line 2207 
  struct bna_rx *rx;
  #line 2208 
  unsigned long flags;
  #line 2193 
  struct bnad_rx_info *rx_info = & bnad->rx_info[rx_id];
  #line 2194 
  struct bna_res_info *res_info = & bnad->rx_res_info[rx_id].res_info[0];
  #line 2195 
  struct bna_intr_info *intr_info = & (res_info + 15U)->res_u.intr_info;
  #line 2197 
  struct bna_rx_config *rx_config = & bnad->rx_config[rx_id];
  #line 2198 
  struct bna_rx_event_cbfn rx_cbfn = {.rcb_setup_cbfn = (void (*)(struct bnad *, struct bna_rcb *))0, .rcb_destroy_cbfn = (void (*)(struct bnad *, struct bna_rcb *))0, .ccb_setup_cbfn = & bnad_cb_ccb_setup, .ccb_destroy_cbfn = & bnad_cb_ccb_destroy, .rx_stall_cbfn = & bnad_cb_rx_stall, .rx_cleanup_cbfn = & bnad_cb_rx_cleanup, .rx_post_cbfn = & bnad_cb_rx_post};
  #line 2210 
  rx_info->rx_id = rx_id;
  #line 2213 
  bnad_init_rx_config(bnad,rx_config);
  #line 2216 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2217 
  bna_rx_res_req(rx_config,res_info);
  #line 2218 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2221 
  (res_info + 3U)->res_type = BNA_RES_T_MEM;
  #line 2221 
  (res_info + 3U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 2221 
  (res_info + 3U)->res_u.mem_info.num = (unsigned int)rx_config->num_paths;
  #line 2221 
  (res_info + 3U)->res_u.mem_info.len = rx_config->q0_depth * 40U + 64U;
  #line 2227 
  if (rx_config->rxp_type != (unsigned int)BNA_RXP_SINGLE) {
    #line 2228 
    (res_info + 2U)->res_type = BNA_RES_T_MEM;
    #line 2228 
    (res_info + 2U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
    #line 2228 
    (res_info + 2U)->res_u.mem_info.num = (unsigned int)rx_config->num_paths;
    #line 2228 
    (res_info + 2U)->res_u.mem_info.len = rx_config->q1_depth * 40U + 64U;
  }
  #line 2235 
  err = bnad_rx_res_alloc(bnad,res_info,rx_id);
  #line 2236 
  if (err != 0) 
                #line 2237 
                return err;
  #line 2239 
  bnad_rx_ctrl_init(bnad,rx_id);
  #line 2242 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2243 
  rx = bna_rx_create(& bnad->bna,bnad,rx_config,& rx_cbfn,res_info,(void *)rx_info);
  #line 2245 
  if (rx == (struct bna_rx *)0) {
    #line 2246 
    err = -12;
    #line 2247 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 2248 
    goto err_return;
  }
  #line 2250 
  rx_info->rx = rx;
  #line 2251 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  {
    #line 2253 
    struct lock_class_key __key;
    #line 2253 
    __init_work(& rx_info->rx_cleanup_work,0);
    #line 2253 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 2253 
    rx_info->rx_cleanup_work.data = __constr_expr_45;
    #line 2253 
    lockdep_init_map(& rx_info->rx_cleanup_work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 2253 
    INIT_LIST_HEAD(& rx_info->rx_cleanup_work.entry);
    #line 2253 
    rx_info->rx_cleanup_work.func = (void (*)(struct work_struct *))(& bnad_rx_cleanup);
  }
  #line 2260 
  bnad_napi_add(bnad,rx_id);
  #line 2263 
  if (intr_info->intr_type == (unsigned int)BNA_INTR_T_MSIX) {
    #line 2264 
    err = bnad_rx_msix_register(bnad,rx_info,rx_id,rx_config->num_paths);
    #line 2266 
    if (err != 0) 
                  #line 2267 
                  goto err_return;
  }
  #line 2270 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2271 
  if (rx_id == 0U) {
    #line 2273 
    if ((bnad->cfg_flags & 1U) != 0U) 
                                      #line 2274 
                                      bna_rx_dim_reconfig(& bnad->bna,(u32 (*)[2U])(& bna_napi_dim_vector));
    #line 2277 
    bna_rx_vlanfilter_enable(rx);
    #line 2280 
    bnad_dim_timer_start(bnad);
  }
  #line 2283 
  bna_rx_enable(rx);
  #line 2284 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2286 
  return 0;
  #line 2288 
  err_return: 
              #line 2288 
  ;
  #line 2289 
  bnad_destroy_rx(bnad,rx_id);
  #line 2290 
  return err;
}

#line 2295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_tx_coalescing_timeo_set(struct bnad *bnad)
{
  #line 2297 
  struct bnad_tx_info *tx_info;
  #line 2299 
  tx_info = & bnad->tx_info[0];
  #line 2300 
  if (tx_info->tx == (struct bna_tx *)0) 
                                         #line 2301 
                                         return;
  #line 2303 
  bna_tx_coalescing_timeo_set(tx_info->tx,(int)bnad->tx_coalescing_timeo);
  #line 2304 
  return;
}

#line 2308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_rx_coalescing_timeo_set(struct bnad *bnad)
{
  #line 2310 
  struct bnad_rx_info *rx_info;
  #line 2311 
  int i;
  #line 2313 
  i = 0;
  #line 2313 
  while (bnad->num_rx > (unsigned int)i) {
    #line 2314 
    rx_info = & bnad->rx_info[i];
    #line 2315 
    if (rx_info->rx == (struct bna_rx *)0) 
                                           #line 2316 
                                           goto __Cont;
    #line 2317 
    bna_rx_coalescing_timeo_set(rx_info->rx,(int)bnad->rx_coalescing_timeo);
    #line 2313 
    __Cont: 
            #line 2313 
    i ++;
  }
  #line 2320 
  return;
}

#line 2326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_mac_addr_set_locked(struct bnad *bnad, u8 *mac_addr)
{
  #line 2328 
  int ret;
  #line 2330 
  if (! is_valid_ether_addr(mac_addr)) 
                                       #line 2331 
                                       return -99;
  #line 2334 
  if (bnad->rx_info[0].rx == (struct bna_rx *)0) 
                                                 #line 2335 
                                                 return 0;
  #line 2337 
  ret = (int)bna_rx_ucast_set(bnad->rx_info[0].rx,mac_addr);
  #line 2338 
  if (ret != 0) 
                #line 2339 
                return -99;
  #line 2341 
  return 0;
}

#line 2346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
int bnad_enable_default_bcast(struct bnad *bnad)
{
  #line 2349 
  int ret;
  #line 2350 
  unsigned long flags;
  #line 2348 
  struct bnad_rx_info *rx_info = & bnad->rx_info[0];
  #line 2352 
  __init_completion(& bnad->bnad_completions.mcast_comp);
  #line 2354 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2355 
  ret = (int)bna_rx_mcast_add(rx_info->rx,(u8 *)(& bnad_bcast_addr),
                       & bnad_cb_rx_mcast_add);
  #line 2357 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2359 
  if (ret == 0) 
                #line 2360 
                wait_for_completion(& bnad->bnad_completions.mcast_comp); else 
                                                                    #line 2362 
                                                                    return -19;
  #line 2364 
  if ((unsigned int)bnad->bnad_completions.mcast_comp_status != 0U) 
                                                                    #line 2365 
                                                                    return -19;
  #line 2367 
  return 0;
}

#line 2372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_restore_vlans(struct bnad *bnad, u32 rx_id)
{
  #line 2374 
  u16 vid;
  #line 2375 
  unsigned long flags;
  #line 2377 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& bnad->active_vlans),4096UL);
  #line 2377 
  while ((unsigned int)vid <= 4095U) {
    #line 2378 
    cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
    #line 2379 
    bna_rx_vlan_add(bnad->rx_info[rx_id].rx,(int)vid);
    #line 2380 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 2377 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& bnad->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  #line 2382 
  return;
}

#line 2386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_netdev_qstats_fill(struct bnad *bnad, struct rtnl_link_stats64 *stats)
{
  #line 2388 
  int i;
  #line 2388 
  int j;
  #line 2390 
  i = 0;
  #line 2390 
  while (bnad->num_rx > (unsigned int)i) {
    #line 2391 
    j = 0;
    #line 2391 
    while (bnad->num_rxp_per_rx > (unsigned int)j) {
      #line 2392 
      if (bnad->rx_info[i].rx_ctrl[j].ccb != (struct bna_ccb *)0) {
        #line 2393 
        stats->rx_packets += (((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0])->rxq)->rx_packets;
        #line 2395 
        stats->rx_bytes += (((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0])->rxq)->rx_bytes;
        #line 2397 
        if ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1] != (struct bna_rcb *)0 && ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1])->rxq != (struct bna_rxq *)0) {
          #line 2400 
          stats->rx_packets += (((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1])->rxq)->rx_packets;
          #line 2403 
          stats->rx_bytes += (((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1])->rxq)->rx_bytes;
        }
      }
      #line 2391 
      j ++;
    }
    #line 2390 
    i ++;
  }
  #line 2410 
  i = 0;
  #line 2410 
  while (bnad->num_tx > (unsigned int)i) {
    #line 2411 
    j = 0;
    #line 2411 
    while (bnad->num_txq_per_tx > (unsigned int)j) {
      #line 2412 
      if (bnad->tx_info[i].tcb[j] != (struct bna_tcb *)0) {
        #line 2413 
        stats->tx_packets += ((bnad->tx_info[i].tcb[j])->txq)->tx_packets;
        #line 2415 
        stats->tx_bytes += ((bnad->tx_info[i].tcb[j])->txq)->tx_bytes;
      }
      #line 2411 
      j ++;
    }
    #line 2410 
    i ++;
  }
  #line 2419 
  return;
}

#line 2426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_netdev_hwstats_fill(struct bnad *bnad, struct rtnl_link_stats64 *stats)
{
  #line 2428 
  struct bfi_enet_stats_mac *mac_stats;
  #line 2429 
  u32 bmap;
  #line 2430 
  int i;
  #line 2432 
  mac_stats = & (bnad->stats.bna_stats)->hw_stats.mac_stats;
  #line 2433 
  stats->rx_errors = (((mac_stats->rx_fcs_error + mac_stats->rx_alignment_error) + mac_stats->rx_frame_length_error) + mac_stats->rx_code_error) + mac_stats->rx_undersize;
  #line 2437 
  stats->tx_errors = mac_stats->tx_fcs_error + mac_stats->tx_undersize;
  #line 2439 
  stats->rx_dropped = mac_stats->rx_drop;
  #line 2440 
  stats->tx_dropped = mac_stats->tx_drop;
  #line 2441 
  stats->multicast = mac_stats->rx_multicast;
  #line 2442 
  stats->collisions = mac_stats->tx_total_collision;
  #line 2444 
  stats->rx_length_errors = mac_stats->rx_frame_length_error;
  #line 2448 
  stats->rx_crc_errors = mac_stats->rx_fcs_error;
  #line 2449 
  stats->rx_frame_errors = mac_stats->rx_alignment_error;
  #line 2451 
  bmap = bnad->bna.rx_mod.rid_mask;
  #line 2452 
  i = 0;
  #line 2452 
  while (bmap != 0U) {
    #line 2453 
    if ((bmap & 1U) != 0U) {
      #line 2454 
      stats->rx_fifo_errors += (bnad->stats.bna_stats)->hw_stats.rxf_stats[i].frame_drops;
      #line 2457 
      break;
    }
    #line 2459 
    bmap >>= 1;
    #line 2452 
    i ++;
  }
  #line 2461 
  return;
}

#line 2464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_mbox_irq_sync(struct bnad *bnad)
{
  #line 2466 
  u32 irq;
  #line 2467 
  unsigned long flags;
  #line 2469 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2470 
  if ((bnad->cfg_flags & 16U) != 0U) 
                                     #line 2471 
                                     irq = (bnad->msix_table)->vector; else 
                                                                    #line 2473 
                                                                    irq = (bnad->pcidev)->irq;
  #line 2474 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2476 
  synchronize_irq(irq);
  #line 2477 
  return;
}

#line 2481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_tso_prepare(struct bnad *bnad, struct sk_buff *skb)
{
  #line 2483 
  int err;
  #line 2485 
  err = skb_cow_head(skb,0U);
  #line 2486 
  if (err < 0) {
    #line 2487 
    (bnad->stats.drv_stats.tso_err) ++;
    #line 2488 
    return err;
  }
  #line 2495 
  if ((unsigned int)vlan_get_protocol(skb) == 8U) {
    #line 2496 
    struct iphdr *iph = ip_hdr(skb);
    #line 2499 
    iph->tot_len = (unsigned short)0U;
    #line 2500 
    iph->check = (unsigned short)0U;
    #line 2502 
    tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_tcpudp_magic(iph->saddr,iph->daddr,0U,(unsigned char)6,0U)));
    #line 2505 
    (bnad->stats.drv_stats.tso4) ++;
  }
  else {
    #line 2507 
    struct ipv6hdr *ipv6h = ipv6_hdr(skb);
    #line 2509 
    ipv6h->payload_len = (unsigned short)0U;
    #line 2510 
    tcp_hdr(skb)->check = (unsigned short)(~ ((int)csum_ipv6_magic(& ipv6h->saddr,& ipv6h->daddr,0U,(unsigned char)6,0U)));
    #line 2513 
    (bnad->stats.drv_stats.tso6) ++;
  }
  #line 2516 
  return 0;
}

#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_q_num_init(struct bnad *bnad)
{
  #line 2529 
  unsigned int __UNIQUE_ID___x563;
  #line 2529 
  unsigned int tmp_0;
  #line 2527 
  int rxps;
  {
    #line 2529 
    __UNIQUE_ID___x563 = num_online_cpus();
    #line 2529 
    unsigned int __UNIQUE_ID___y564 = 16U;
    #line 2529 
    if (__UNIQUE_ID___x563 < __UNIQUE_ID___y564) 
                                                 #line 2529 
                                                 tmp_0 = __UNIQUE_ID___x563; else 
                                                                    #line 2529 
                                                                    tmp_0 = __UNIQUE_ID___y564;
    }
  #line 2529 
  rxps = (int)tmp_0;
  #line 2532 
  if ((bnad->cfg_flags & 16U) == 0U) 
                                     #line 2533 
                                     rxps = 1;
  #line 2535 
  bnad->num_rx = 1U;
  #line 2536 
  bnad->num_tx = 1U;
  #line 2537 
  bnad->num_rxp_per_rx = (unsigned int)rxps;
  #line 2538 
  bnad->num_txq_per_tx = 1U;
  #line 2539 
  return;
}

#line 2548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_q_num_adjust(struct bnad *bnad, int msix_vectors, int temp)
{
  #line 2550 
  bnad->num_txq_per_tx = 1U;
  #line 2551 
  if ((bnad->num_tx * bnad->num_txq_per_tx + bnad_rxqs_per_cq) + 1U <= (unsigned int)msix_vectors && (bnad->cfg_flags & 16U) != 0U) 
    #line 2554 
    bnad->num_rxp_per_rx = ((unsigned int)msix_vectors - bnad->num_tx * bnad->num_txq_per_tx) + 4294967295U; else 
                                                                    #line 2558 
                                                                    bnad->num_rxp_per_rx = 1U;
  #line 2559 
  return;
}

#line 2563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_ioceth_disable(struct bnad *bnad)
{
  #line 2565 
  unsigned long flags;
  #line 2566 
  int err = 0;
  #line 2568 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2569 
  __init_completion(& bnad->bnad_completions.ioc_comp);
  #line 2570 
  bna_ioceth_disable(& bnad->bna.ioceth,(enum bna_cleanup_type)BNA_HARD_CLEANUP);
  #line 2571 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2573 
  ;
  #line 2573 
  wait_for_completion_timeout(& bnad->bnad_completions.ioc_comp,msecs_to_jiffies(10000U));
  #line 2576 
  err = (int)bnad->bnad_completions.ioc_comp_status;
  #line 2577 
  return err;
}

#line 2581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_ioceth_enable(struct bnad *bnad)
{
  #line 2584 
  unsigned long flags;
  #line 2583 
  int err = 0;
  #line 2586 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2587 
  __init_completion(& bnad->bnad_completions.ioc_comp);
  #line 2588 
  bnad->bnad_completions.ioc_comp_status = (unsigned char)7U;
  #line 2589 
  bna_ioceth_enable(& bnad->bna.ioceth);
  #line 2590 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2592 
  ;
  #line 2592 
  wait_for_completion_timeout(& bnad->bnad_completions.ioc_comp,msecs_to_jiffies(10000U));
  #line 2595 
  err = (int)bnad->bnad_completions.ioc_comp_status;
  #line 2597 
  return err;
}

#line 2602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_res_free(struct bnad *bnad, struct bna_res_info *res_info, u32 res_val_max)
{
  #line 2605 
  int i;
  #line 2607 
  i = 0;
  #line 2607 
  while ((unsigned int)i < res_val_max) {
    #line 2608 
    bnad_mem_free(bnad,& (res_info + (unsigned long)i)->res_u.mem_info);
    #line 2607 
    i ++;
  }
  #line 2609 
  return;
}

#line 2613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_res_alloc(struct bnad *bnad, struct bna_res_info *res_info, u32 res_val_max)
{
  #line 2616 
  int i;
  #line 2616 
  int err;
  #line 2618 
  i = 0;
  #line 2618 
  while ((unsigned int)i < res_val_max) {
    #line 2619 
    err = bnad_mem_alloc(bnad,& (res_info + (unsigned long)i)->res_u.mem_info);
    #line 2620 
    if (err != 0) 
                  #line 2621 
                  goto err_return;
    #line 2618 
    i ++;
  }
  #line 2623 
  return 0;
  #line 2625 
  err_return: 
              #line 2625 
  ;
  #line 2626 
  bnad_res_free(bnad,res_info,res_val_max);
  #line 2627 
  return err;
}

#line 2632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_enable_msix(struct bnad *bnad)
{
  #line 2634 
  int i;
  #line 2634 
  int ret;
  #line 2635 
  unsigned long flags;
  #line 2637 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2638 
  if ((bnad->cfg_flags & 16U) == 0U) {
    #line 2639 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 2640 
    return;
  }
  #line 2642 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2644 
  if (bnad->msix_table != (struct msix_entry *)0) 
                                                  #line 2645 
                                                  return;
  #line 2648 
  bnad->msix_table = (struct msix_entry *)kcalloc((unsigned long)bnad->msix_num,8UL,3264U);
  #line 2650 
  if (bnad->msix_table == (struct msix_entry *)0) 
                                                  #line 2651 
                                                  goto intx_mode;
  #line 2653 
  i = 0;
  #line 2653 
  while (bnad->msix_num > (unsigned int)i) {
    #line 2654 
    (bnad->msix_table + (unsigned long)i)->entry = (unsigned short)i;
    #line 2653 
    i ++;
  }
  #line 2656 
  ret = pci_enable_msix_range(bnad->pcidev,bnad->msix_table,1,(int)bnad->msix_num);
  #line 2658 
  if (ret < 0) 
               #line 2659 
               goto intx_mode;
  else 
    #line 2660 
    if (bnad->msix_num > (unsigned int)ret) {
      #line 2661 
      _dev_warn(& (bnad->pcidev)->dev,(char *)"%d MSI-X vectors allocated < %d requested\n",ret,bnad->msix_num);
      #line 2665 
      cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
      #line 2667 
      bnad_q_num_adjust(bnad,(ret + -1) / 2,(ret + -1) / 2);
      #line 2669 
      cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
      #line 2671 
      bnad->msix_num = (bnad->num_tx * bnad->num_txq_per_tx + bnad->num_rx * bnad->num_rxp_per_rx) + 1U;
      #line 2674 
      if (bnad->msix_num > (unsigned int)ret) {
        #line 2675 
        pci_disable_msix(bnad->pcidev);
        #line 2676 
        goto intx_mode;
      }
    }
  #line 2680 
  pci_intx(bnad->pcidev,0);
  #line 2682 
  return;
  #line 2684 
  intx_mode: 
             #line 2684 
  ;
  #line 2685 
  _dev_warn(& (bnad->pcidev)->dev,(char *)"MSI-X enable failed - operating in INTx mode\n");
  #line 2688 
  kfree((void *)bnad->msix_table);
  #line 2689 
  bnad->msix_table = (struct msix_entry *)0;
  #line 2690 
  bnad->msix_num = 0U;
  #line 2691 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2692 
  bnad->cfg_flags &= 4294967279U;
  #line 2693 
  bnad_q_num_init(bnad);
  #line 2694 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2695 
  return;
}

#line 2698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_disable_msix(struct bnad *bnad)
{
  #line 2700 
  u32 cfg_flags;
  #line 2701 
  unsigned long flags;
  #line 2703 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2704 
  cfg_flags = bnad->cfg_flags;
  #line 2705 
  if ((bnad->cfg_flags & 16U) != 0U) 
                                     #line 2706 
                                     bnad->cfg_flags &= 4294967279U;
  #line 2707 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2709 
  if ((cfg_flags & 16U) != 0U) {
    #line 2710 
    pci_disable_msix(bnad->pcidev);
    #line 2711 
    kfree((void *)bnad->msix_table);
    #line 2712 
    bnad->msix_table = (struct msix_entry *)0;
  }
  #line 2714 
  return;
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_open(struct net_device *netdev)
{
  #line 2720 
  int err;
  #line 2722 
  struct bna_pause_config pause_config;
  #line 2723 
  unsigned long flags;
  #line 2721 
  struct bnad *bnad = netdev_priv(netdev);
  #line 2725 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 2728 
  err = bnad_setup_tx(bnad,0U);
  #line 2729 
  if (err != 0) 
                #line 2730 
                goto err_return;
  #line 2733 
  err = bnad_setup_rx(bnad,0U);
  #line 2734 
  if (err != 0) 
                #line 2735 
                goto cleanup_tx;
  #line 2738 
  pause_config.tx_pause = BNA_STATUS_T_DISABLED;
  #line 2739 
  pause_config.rx_pause = BNA_STATUS_T_DISABLED;
  #line 2741 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2742 
  bna_enet_mtu_set(& bnad->bna.enet,(int)((bnad->netdev)->mtu + 22U),(void (*)(struct bnad *))0);
  #line 2744 
  bna_enet_pause_config(& bnad->bna.enet,& pause_config);
  #line 2745 
  bna_enet_enable(& bnad->bna.enet);
  #line 2746 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2749 
  bnad_enable_default_bcast(bnad);
  #line 2752 
  bnad_restore_vlans(bnad,0U);
  #line 2755 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2756 
  bnad_mac_addr_set_locked(bnad,netdev->dev_addr);
  #line 2757 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2760 
  bnad_stats_timer_start(bnad);
  #line 2762 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 2764 
  return 0;
  #line 2766 
  cleanup_tx: 
              #line 2766 
  ;
  #line 2767 
  bnad_destroy_tx(bnad,0U);
  #line 2769 
  err_return: 
              #line 2769 
  ;
  #line 2770 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 2771 
  return err;
}

#line 2775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_stop(struct net_device *netdev)
{
  #line 2778 
  unsigned long flags;
  #line 2777 
  struct bnad *bnad = netdev_priv(netdev);
  #line 2780 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 2783 
  bnad_stats_timer_stop(bnad);
  #line 2785 
  __init_completion(& bnad->bnad_completions.enet_comp);
  #line 2787 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 2788 
  bna_enet_disable(& bnad->bna.enet,(enum bna_cleanup_type)BNA_HARD_CLEANUP,& bnad_cb_enet_disabled);
  #line 2790 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 2792 
  wait_for_completion(& bnad->bnad_completions.enet_comp);
  #line 2794 
  bnad_destroy_tx(bnad,0U);
  #line 2795 
  bnad_destroy_rx(bnad,0U);
  #line 2798 
  bnad_mbox_irq_sync(bnad);
  #line 2800 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 2802 
  return 0;
}

#line 2808  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_txq_wi_prepare(struct bnad *bnad, struct bna_tcb *tcb, struct sk_buff *skb, struct bna_txq_entry *txqent)
{
  #line 2812 
  u32 gso_size;
  #line 2811 
  u16 flags = (unsigned short)0U;
  #line 2813 
  u16 vlan_tag = (unsigned short)0U;
  #line 2815 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 2816 
    vlan_tag = skb->vlan_tci;
    #line 2817 
    flags = (unsigned short)((unsigned int)flags | 24U);
  }
  #line 2819 
  if ((int)test_bit(0L,& bnad->run_flags) != 0) {
    #line 2820 
    vlan_tag = (unsigned short)(((int)tcb->priority << 13) | ((int)vlan_tag & 8191));
    #line 2822 
    flags = (unsigned short)((unsigned int)flags | 24U);
  }
  #line 2824 
  txqent->hdr.wi.vlan_tag = __builtin_bswap16((unsigned short)((int)vlan_tag));
  #line 2826 
  if ((int)skb_is_gso(skb) != 0) {
    #line 2827 
    gso_size = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 2828 
    if ((long)((bnad->netdev)->mtu < gso_size) != 0L) {
      #line 2829 
      (bnad->stats.drv_stats.tx_skb_mss_too_long) ++;
      #line 2830 
      return -22;
    }
    #line 2832 
    ;
    #line 2832 
    if ((long)(((unsigned int)skb_transport_offset(skb) + gso_size) + tcp_hdrlen(skb) >= skb->len) != 0L) {
      #line 2834 
      txqent->hdr.wi.opcode = (unsigned short)516U;
      #line 2835 
      txqent->hdr.wi.lso_mss = (unsigned short)0U;
      #line 2836 
      (bnad->stats.drv_stats.tx_skb_tso_too_short) ++;
    }
    else {
      #line 2838 
      txqent->hdr.wi.opcode = (unsigned short)772U;
      #line 2839 
      txqent->hdr.wi.lso_mss = __builtin_bswap16((unsigned short)((int)((unsigned short)gso_size)));
    }
    #line 2842 
    if (bnad_tso_prepare(bnad,skb) != 0) {
      #line 2843 
      (bnad->stats.drv_stats.tx_skb_tso_prepare) ++;
      #line 2844 
      return -22;
    }
    #line 2847 
    flags = (unsigned short)((unsigned int)flags | 3U);
    #line 2848 
    txqent->hdr.wi.l4_hdr_size_n_offset = __builtin_bswap16((unsigned short)((int)((unsigned int)((int)((unsigned short)(tcp_hdrlen(skb) >> 2)) << 10U) | ((unsigned int)((unsigned short)skb_transport_offset(skb)) & 1023U))));
  }
  else {
    #line 2852 
    txqent->hdr.wi.opcode = (unsigned short)516U;
    #line 2853 
    txqent->hdr.wi.lso_mss = (unsigned short)0U;
    #line 2855 
    if ((long)(skb->len > (bnad->netdev)->mtu + 18U) != 0L) {
      #line 2856 
      (bnad->stats.drv_stats.tx_skb_non_tso_too_long) ++;
      #line 2857 
      return -22;
    }
    #line 2860 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 2861 
      __be16 net_proto = vlan_get_protocol(skb);
      #line 2862 
      u8 proto = (unsigned char)0U;
      #line 2864 
      if ((unsigned int)net_proto == 8U) {
        #line 2865 
        proto = ip_hdr(skb)->protocol;
      }
      else 
        #line 2867 
        if ((unsigned int)net_proto == 56710U) {
          #line 2869 
          proto = ipv6_hdr(skb)->nexthdr;
        }
      #line 2872 
      if ((unsigned int)proto == 6U) {
        #line 2873 
        flags = (unsigned short)((unsigned int)flags | 2U);
        #line 2874 
        txqent->hdr.wi.l4_hdr_size_n_offset = __builtin_bswap16((unsigned short)((int)((unsigned short)skb_transport_offset(skb)) & 1023));
        #line 2878 
        (bnad->stats.drv_stats.tcpcsum_offload) ++;
        #line 2880 
        if ((long)(skb_headlen(skb) < (unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb)) != 0L) {
          #line 2883 
          (bnad->stats.drv_stats.tx_skb_tcp_hdr) ++;
          #line 2884 
          return -22;
        }
      }
      else 
        #line 2886 
        if ((unsigned int)proto == 17U) {
          #line 2887 
          flags = (unsigned short)((unsigned int)flags | 4U);
          #line 2888 
          txqent->hdr.wi.l4_hdr_size_n_offset = __builtin_bswap16((unsigned short)((int)((unsigned short)skb_transport_offset(skb)) & 1023));
          #line 2892 
          (bnad->stats.drv_stats.udpcsum_offload) ++;
          #line 2893 
          if ((long)((unsigned long)skb_headlen(skb) < (unsigned long)skb_transport_offset(skb) + 8UL) != 0L) {
            #line 2896 
            (bnad->stats.drv_stats.tx_skb_udp_hdr) ++;
            #line 2897 
            return -22;
          }
        }
        else {
          #line 2901 
          (bnad->stats.drv_stats.tx_skb_csum_err) ++;
          #line 2902 
          return -22;
        }
    }
    else 
         #line 2905 
         txqent->hdr.wi.l4_hdr_size_n_offset = (unsigned short)0U;
  }
  #line 2908 
  txqent->hdr.wi.flags = __builtin_bswap16((unsigned short)((int)flags));
  #line 2909 
  txqent->hdr.wi.frame_length = __builtin_bswap32(skb->len);
  #line 2911 
  return 0;
}

#line 2919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static netdev_tx_t bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
{
  #line 2924 
  struct bnad_tx_unmap *unmap_q;
  #line 2924 
  struct bnad_tx_unmap *unmap;
  #line 2924 
  struct bnad_tx_unmap *head_unmap;
  #line 2925 
  u32 prod;
  #line 2925 
  u32 q_depth;
  #line 2925 
  u32 vect_id;
  #line 2926 
  u32 wis;
  #line 2926 
  u32 vectors;
  #line 2926 
  u32 len;
  #line 2927 
  int i;
  #line 2928 
  dma_addr_t dma_addr;
  #line 2929 
  struct bna_txq_entry *txqent;
  #line 3090 
  int tmp_13;
  #line 2921 
  struct bnad *bnad = netdev_priv(netdev);
  #line 2922 
  u32 txq_id = 0U;
  #line 2923 
  struct bna_tcb *tcb = (struct bna_tcb *)0;
  #line 2931 
  len = skb_headlen(skb);
  #line 2935 
  if ((long)(skb->len <= 14U) != 0L) {
    #line 2936 
    dev_kfree_skb_any(skb);
    #line 2937 
    (bnad->stats.drv_stats.tx_skb_too_short) ++;
    #line 2938 
    return NETDEV_TX_OK;
  }
  #line 2940 
  if ((long)(len > 65535U) != 0L) {
    #line 2941 
    dev_kfree_skb_any(skb);
    #line 2942 
    (bnad->stats.drv_stats.tx_skb_headlen_zero) ++;
    #line 2943 
    return NETDEV_TX_OK;
  }
  #line 2945 
  if ((long)(len == 0U) != 0L) {
    #line 2946 
    dev_kfree_skb_any(skb);
    #line 2947 
    (bnad->stats.drv_stats.tx_skb_headlen_zero) ++;
    #line 2948 
    return NETDEV_TX_OK;
  }
  #line 2951 
  tcb = bnad->tx_info[0].tcb[txq_id];
  #line 2957 
  if ((long)(tcb == (struct bna_tcb *)0) != 0L) 
                                                #line 2957 
                                                goto _LOR;
  else {
    #line 2957 
    int tmp_1;
    #line 2957 
    if (test_bit(1L,& tcb->flags)) 
                                   #line 2957 
                                   tmp_1 = 0; else 
                                                   #line 2957 
                                                   tmp_1 = 1;
    #line 2957 
    if ((long)tmp_1 != 0L) {
      #line 2957 
      _LOR: {
              #line 2958 
              dev_kfree_skb_any(skb);
              #line 2959 
              (bnad->stats.drv_stats.tx_skb_stopping) ++;
              #line 2960 
              return NETDEV_TX_OK;
            }
    }
  }
  #line 2963 
  q_depth = tcb->q_depth;
  #line 2964 
  prod = tcb->producer_index;
  #line 2965 
  unmap_q = (struct bnad_tx_unmap *)tcb->unmap_q;
  #line 2967 
  vectors = (unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1);
  #line 2968 
  wis = (vectors + 3U) >> 2;
  #line 2970 
  if ((long)(vectors > 255U) != 0L) {
    #line 2971 
    dev_kfree_skb_any(skb);
    #line 2972 
    (bnad->stats.drv_stats.tx_skb_max_vectors) ++;
    #line 2973 
    return NETDEV_TX_OK;
  }
  #line 2977 
  if ((long)((((tcb->consumer_index - tcb->producer_index) + 4294967295U) & (q_depth + 4294967295U)) < wis) != 0L) {
    #line 2978 
    if (*(tcb->hw_consumer_index) != tcb->consumer_index) {
      #line 2979 
      if (test_and_set_bit(0L,& tcb->flags)) 
                                             #line 2978 
                                             goto _LAND;
      else {
        #line 2980 
        u32 sent;
        #line 2981 
        sent = bnad_txcmpl_process(bnad,tcb);
        #line 2982 
        if ((long)((int)test_bit(1L,& tcb->flags) != 0) != 0L) 
                                                               #line 2983 
                                                               writel((tcb->i_dbell)->doorbell_ack | sent,(tcb->i_dbell)->doorbell_addr);
        #line 2985 
        cif_clear_bit(0L,& tcb->flags);
      }
    }
    else {
      #line 2978 
      _LAND: {
               #line 2987 
               netif_stop_queue(netdev);
               #line 2988 
               (bnad->stats.drv_stats.netif_queue_stop) ++;
             }
    }
    #line 2990 
    ldv_inline_asm();
    #line 2997 
    if ((long)((((tcb->consumer_index - tcb->producer_index) + 4294967295U) & (q_depth + 4294967295U)) < wis) != 0L) {
      #line 2998 
      (bnad->stats.drv_stats.netif_queue_stop) ++;
      #line 2999 
      return NETDEV_TX_BUSY;
    }
    else {
      #line 3001 
      netif_wake_queue(netdev);
      #line 3002 
      (bnad->stats.drv_stats.netif_queue_wakeup) ++;
    }
  }
  #line 3006 
  txqent = (struct bna_txq_entry *)tcb->sw_q + (unsigned long)prod;
  #line 3007 
  head_unmap = unmap_q + (unsigned long)prod;
  #line 3010 
  if (bnad_txq_wi_prepare(bnad,tcb,skb,txqent) != 0) {
    #line 3011 
    dev_kfree_skb_any(skb);
    #line 3012 
    return NETDEV_TX_OK;
  }
  #line 3014 
  txqent->hdr.wi.reserved = (unsigned char)0U;
  #line 3015 
  txqent->hdr.wi.num_vectors = (unsigned char)vectors;
  #line 3017 
  head_unmap->skb = skb;
  #line 3018 
  head_unmap->nvecs = 0U;
  #line 3021 
  unmap = head_unmap;
  #line 3022 
  dma_addr = dma_map_single_attrs(& (bnad->pcidev)->dev,(void *)skb->data,(unsigned long)len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 3024 
  if (dma_mapping_error(& (bnad->pcidev)->dev,dma_addr) != 0) {
    #line 3025 
    dev_kfree_skb_any(skb);
    #line 3026 
    (bnad->stats.drv_stats.tx_skb_map_failed) ++;
    #line 3027 
    return NETDEV_TX_OK;
  }
  {
    #line 3029 
    u64 tmp_addr = __builtin_bswap64((unsigned long)dma_addr);
    #line 3029 
    txqent->vector[0].host_addr.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
    #line 3029 
    txqent->vector[0].host_addr.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
  }
  #line 3030 
  txqent->vector[0].length = __builtin_bswap16((unsigned short)((int)((unsigned short)len)));
  #line 3031 
  unmap->vectors[0].dma_addr = dma_addr;
  #line 3032 
  (head_unmap->nvecs) ++;
  #line 3034 
  i = 0;
  #line 3034 
  vect_id = 0U;
  #line 3034 
  while (vectors + 4294967295U > (unsigned int)i) {
    {
      #line 3035 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 3036 
      u32 size = skb_frag_size(frag);
      #line 3038 
      if ((long)(size == 0U) != 0L) {
        #line 3040 
        bnad_tx_buff_unmap(bnad,unmap_q,q_depth,tcb->producer_index);
        #line 3042 
        dev_kfree_skb_any(skb);
        #line 3043 
        (bnad->stats.drv_stats.tx_skb_frag_zero) ++;
        #line 3044 
        return NETDEV_TX_OK;
      }
      #line 3047 
      len += size;
      #line 3049 
      vect_id ++;
      #line 3050 
      if (vect_id == 4U) {
        #line 3051 
        vect_id = 0U;
        #line 3052 
        prod = (prod + 1U) & (q_depth + 4294967295U);
        #line 3053 
        txqent = (struct bna_txq_entry *)tcb->sw_q + (unsigned long)prod;
        #line 3054 
        txqent->hdr.wi_ext.opcode = (unsigned short)1025U;
        #line 3055 
        unmap = unmap_q + (unsigned long)prod;
      }
      #line 3058 
      dma_addr = skb_frag_dma_map(& (bnad->pcidev)->dev,frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
      #line 3060 
      if (dma_mapping_error(& (bnad->pcidev)->dev,dma_addr) != 0) {
        #line 3062 
        bnad_tx_buff_unmap(bnad,unmap_q,q_depth,tcb->producer_index);
        #line 3064 
        dev_kfree_skb_any(skb);
        #line 3065 
        (bnad->stats.drv_stats.tx_skb_map_failed) ++;
        #line 3066 
        return NETDEV_TX_OK;
      }
      #line 3069 
      unmap->vectors[vect_id].dma_len = size;
      {
        #line 3070 
        u64 tmp_addr_0 = __builtin_bswap64((unsigned long)dma_addr);
        #line 3070 
        txqent->vector[vect_id].host_addr.msb = ((struct bna_dma_addr *)(& tmp_addr_0))->msb;
        #line 3070 
        txqent->vector[vect_id].host_addr.lsb = ((struct bna_dma_addr *)(& tmp_addr_0))->lsb;
      }
      #line 3071 
      txqent->vector[vect_id].length = __builtin_bswap16((unsigned short)((int)((unsigned short)size)));
      #line 3072 
      unmap->vectors[vect_id].dma_addr = dma_addr;
      #line 3074 
      (head_unmap->nvecs) ++;
    }
    #line 3034 
    i ++;
  }
  #line 3077 
  if ((long)(skb->len != len) != 0L) {
    #line 3079 
    bnad_tx_buff_unmap(bnad,unmap_q,q_depth,tcb->producer_index);
    #line 3080 
    dev_kfree_skb_any(skb);
    #line 3081 
    (bnad->stats.drv_stats.tx_skb_len_mismatch) ++;
    #line 3082 
    return NETDEV_TX_OK;
  }
  #line 3085 
  prod = (prod + 1U) & (q_depth + 4294967295U);
  #line 3086 
  tcb->producer_index = prod;
  #line 3087 
  ldv_inline_asm();
  #line 3090 
  if (test_bit(1L,& tcb->flags)) 
                                 #line 3090 
                                 tmp_13 = 0; else 
                                                  #line 3090 
                                                  tmp_13 = 1;
  #line 3090 
  if ((long)tmp_13 != 0L) 
                          #line 3091 
                          return NETDEV_TX_OK;
  #line 3093 
  skb_tx_timestamp(skb);
  #line 3095 
  writel(tcb->producer_index | 2147483648U,tcb->q_dbell);
  #line 3097 
  return NETDEV_TX_OK;
}

#line 3105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  #line 3108 
  unsigned long flags;
  #line 3107 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3110 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3112 
  bnad_netdev_qstats_fill(bnad,stats);
  #line 3113 
  bnad_netdev_hwstats_fill(bnad,stats);
  #line 3115 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3116 
  return;
}

#line 3119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_set_rx_ucast_fltr(struct bnad *bnad)
{
  #line 3141 
  void *__mptr;
  #line 3123 
  enum bna_cb_status ret;
  #line 3124 
  u8 *mac_list;
  #line 3125 
  struct netdev_hw_addr *ha;
  #line 3126 
  int entry;
  #line 3121 
  struct net_device *netdev = bnad->netdev;
  #line 3122 
  int uc_count = netdev->uc.count;
  #line 3128 
  if ((bnad->netdev)->uc.count == 0) {
    #line 3129 
    bna_rx_ucast_listset(bnad->rx_info[0].rx,0,(u8 *)0U);
    #line 3130 
    return;
  }
  #line 3133 
  if (bnad->bna.ioceth.attr.num_ucmac < uc_count) 
                                                  #line 3134 
                                                  goto mode_default;
  #line 3136 
  mac_list = (u8 *)kcalloc(6UL,(unsigned long)uc_count,2592U);
  #line 3137 
  if (mac_list == (u8 *)0U) 
                            #line 3138 
                            goto mode_default;
  #line 3140 
  entry = 0;
  #line 3141 
  __mptr = (void *)netdev->uc.list.next;
  #line 3141 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 3141 
  while (& ha->list != & netdev->uc.list) {
    #line 3141 
    void *__mptr_0;
    #line 3142 
    ether_addr_copy(mac_list + (unsigned long)(entry * 6),& ha->addr[0]);
    #line 3143 
    entry ++;
    #line 3141 
    __mptr_0 = (void *)ha->list.next;
    #line 3141 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 3146 
  ret = bna_rx_ucast_listset(bnad->rx_info[0].rx,entry,mac_list);
  #line 3147 
  kfree((void *)mac_list);
  #line 3149 
  if (ret != (unsigned int)BNA_CB_SUCCESS) 
                                           #line 3150 
                                           goto mode_default;
  #line 3152 
  return;
  #line 3155 
  mode_default: 
                #line 3155 
  ;
  #line 3156 
  bnad->cfg_flags |= 8U;
  #line 3157 
  bna_rx_ucast_listset(bnad->rx_info[0].rx,0,(u8 *)0U);
  #line 3158 
  return;
}

#line 3161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_set_rx_mcast_fltr(struct bnad *bnad)
{
  #line 3165 
  enum bna_cb_status ret;
  #line 3166 
  u8 *mac_list;
  #line 3163 
  struct net_device *netdev = bnad->netdev;
  #line 3164 
  int mc_count = netdev->mc.count;
  #line 3168 
  if ((netdev->flags & 512U) != 0U) 
                                    #line 3169 
                                    goto mode_allmulti;
  #line 3171 
  if (netdev->mc.count == 0) 
                             #line 3172 
                             return;
  #line 3174 
  if (bnad->bna.ioceth.attr.num_mcmac < mc_count) 
                                                  #line 3175 
                                                  goto mode_allmulti;
  #line 3177 
  mac_list = (u8 *)kcalloc((unsigned long)(mc_count + 1),6UL,2592U);
  #line 3179 
  if (mac_list == (u8 *)0U) 
                            #line 3180 
                            goto mode_allmulti;
  #line 3182 
  ether_addr_copy(mac_list,bnad_bcast_addr);
  #line 3185 
  bnad_netdev_mc_list_get(netdev,mac_list);
  #line 3186 
  ret = bna_rx_mcast_listset(bnad->rx_info[0].rx,mc_count + 1,mac_list);
  #line 3187 
  kfree((void *)mac_list);
  #line 3189 
  if (ret != (unsigned int)BNA_CB_SUCCESS) 
                                           #line 3190 
                                           goto mode_allmulti;
  #line 3192 
  return;
  #line 3194 
  mode_allmulti: 
                 #line 3194 
  ;
  #line 3195 
  bnad->cfg_flags |= 4U;
  #line 3196 
  bna_rx_mcast_delall(bnad->rx_info[0].rx);
  #line 3197 
  return;
}

#line 3200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
void bnad_set_rx_mode(struct net_device *netdev)
{
  #line 3203 
  enum bna_rxmode new_mode;
  #line 3203 
  enum bna_rxmode mode_mask;
  #line 3204 
  unsigned long flags;
  #line 3202 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3206 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3208 
  if (bnad->rx_info[0].rx == (struct bna_rx *)0) {
    #line 3209 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    #line 3210 
    return;
  }
  #line 3214 
  bnad->cfg_flags &= 4294967281U;
  #line 3217 
  new_mode = (enum bna_rxmode)0;
  #line 3218 
  if ((netdev->flags & 256U) != 0U) {
    #line 3219 
    new_mode = (enum bna_rxmode)((unsigned int)new_mode | 1U);
    #line 3220 
    bnad->cfg_flags |= 2U;
  }
  else {
    #line 3222 
    bnad_set_rx_mcast_fltr(bnad);
    #line 3224 
    if ((bnad->cfg_flags & 4U) != 0U) 
                                      #line 3225 
                                      new_mode = (enum bna_rxmode)((unsigned int)new_mode | 4U);
    #line 3227 
    bnad_set_rx_ucast_fltr(bnad);
    #line 3229 
    if ((bnad->cfg_flags & 8U) != 0U) 
                                      #line 3230 
                                      new_mode = (enum bna_rxmode)((unsigned int)new_mode | 2U);
  }
  #line 3233 
  mode_mask = (enum bna_rxmode)7;
  #line 3235 
  bna_rx_mode_set(bnad->rx_info[0].rx,new_mode,mode_mask);
  #line 3237 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3238 
  return;
}

#line 3246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_set_mac_address(struct net_device *netdev, void *addr)
{
  #line 3248 
  int err;
  #line 3251 
  unsigned long flags;
  #line 3249 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3250 
  struct sockaddr *sa = (struct sockaddr *)addr;
  #line 3253 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3255 
  err = bnad_mac_addr_set_locked(bnad,(u8 *)(& sa->sa_data));
  #line 3256 
  if (err == 0) 
                #line 3257 
                ether_addr_copy(netdev->dev_addr,(u8 *)(& sa->sa_data));
  #line 3259 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3261 
  return err;
}

#line 3265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_mtu_set(struct bnad *bnad, int frame_size)
{
  #line 3267 
  unsigned long flags;
  #line 3269 
  __init_completion(& bnad->bnad_completions.mtu_comp);
  #line 3271 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3272 
  bna_enet_mtu_set(& bnad->bna.enet,frame_size,& bnad_cb_enet_mtu_set);
  #line 3273 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3275 
  wait_for_completion(& bnad->bnad_completions.mtu_comp);
  #line 3277 
  return (int)bnad->bnad_completions.mtu_comp_status;
}

#line 3281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_change_mtu(struct net_device *netdev, int new_mtu)
{
  #line 3283 
  int err;
  #line 3283 
  int mtu;
  #line 3285 
  u32 frame;
  #line 3285 
  u32 new_frame;
  #line 3284 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3285 
  u32 rx_count = 0U;
  #line 3287 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3289 
  mtu = (int)netdev->mtu;
  #line 3290 
  netdev->mtu = (unsigned int)new_mtu;
  #line 3292 
  frame = (unsigned int)(mtu + 22);
  #line 3293 
  new_frame = (unsigned int)(new_mtu + 22);
  #line 3296 
  if ((unsigned int)(bnad->pcidev)->device == 34U) {
    #line 3296 
    if ((int)netif_running(bnad->netdev) != 0) 
      #line 3299 
      if ((frame <= 4096U) ^ (new_frame <= 4096U)) 
                                                   #line 3301 
                                                   rx_count = bnad_reinit_rx(bnad);
  }
  #line 3307 
  err = bnad_mtu_set(bnad,(int)new_frame);
  #line 3308 
  if (err != 0) 
                #line 3309 
                err = -16;
  #line 3311 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3312 
  return err;
}

#line 3316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 3319 
  unsigned long flags;
  #line 3318 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3321 
  if (bnad->rx_info[0].rx == (struct bna_rx *)0) 
                                                 #line 3322 
                                                 return 0;
  #line 3324 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3326 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3327 
  bna_rx_vlan_add(bnad->rx_info[0].rx,(int)vid);
  #line 3328 
  cif_set_bit((long)vid,(unsigned long *)(& bnad->active_vlans));
  #line 3329 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3331 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3333 
  return 0;
}

#line 3337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  #line 3340 
  unsigned long flags;
  #line 3339 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3342 
  if (bnad->rx_info[0].rx == (struct bna_rx *)0) 
                                                 #line 3343 
                                                 return 0;
  #line 3345 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3347 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3348 
  cif_clear_bit((long)vid,(unsigned long *)(& bnad->active_vlans));
  #line 3349 
  bna_rx_vlan_del(bnad->rx_info[0].rx,(int)vid);
  #line 3350 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3352 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3354 
  return 0;
}

#line 3357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 3359 
  struct bnad *bnad = netdev_priv(dev);
  #line 3360 
  netdev_features_t changed = dev->features ^ features;
  #line 3362 
  if ((changed & 256ULL) != 0ULL) {
    #line 3362 
    if ((int)netif_running(dev) != 0) {
      #line 3363 
      unsigned long flags;
      #line 3365 
      cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
      #line 3367 
      if ((features & 256ULL) != 0ULL) 
                                       #line 3368 
                                       bna_rx_vlan_strip_enable(bnad->rx_info[0].rx); else 
                                                                    #line 3370 
                                                                    bna_rx_vlan_strip_disable(bnad->rx_info[0].rx);
      #line 3372 
      cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
    }
  }
  #line 3375 
  return 0;
}

#line 3380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_netpoll(struct net_device *netdev)
{
  #line 3383 
  struct bnad_rx_info *rx_info;
  #line 3384 
  struct bnad_rx_ctrl *rx_ctrl;
  #line 3385 
  u32 curr_mask;
  #line 3386 
  int i;
  #line 3386 
  int j;
  #line 3382 
  struct bnad *bnad = netdev_priv(netdev);
  #line 3388 
  if ((bnad->cfg_flags & 16U) == 0U) {
    #line 3389 
    curr_mask = readl(bnad->bna.regs.fn_int_mask);
    #line 3389 
    writel(4294967295U,bnad->bna.regs.fn_int_mask);
    #line 3390 
    bnad_isr((int)(bnad->pcidev)->irq,(void *)netdev);
    #line 3391 
    writel(curr_mask,bnad->bna.regs.fn_int_mask);
  }
  else {
    #line 3399 
    i = 0;
    #line 3399 
    while (bnad->num_rx > (unsigned int)i) {
      #line 3400 
      rx_info = & bnad->rx_info[i];
      #line 3401 
      if (rx_info->rx == (struct bna_rx *)0) 
                                             #line 3402 
                                             goto __Cont;
      #line 3403 
      j = 0;
      #line 3403 
      while (bnad->num_rxp_per_rx > (unsigned int)j) {
        #line 3404 
        rx_ctrl = & rx_info->rx_ctrl[j];
        #line 3405 
        if (rx_ctrl->ccb != (struct bna_ccb *)0) 
                                                 #line 3406 
                                                 bnad_netif_rx_schedule_poll(bnad,rx_ctrl->ccb);
        #line 3403 
        j ++;
      }
      #line 3399 
      __Cont: 
              #line 3399 
      i ++;
    }
  }
  #line 3411 
  return;
}

#line 3414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static struct net_device_ops bnad_netdev_ops = {.ndo_open = & bnad_open, .ndo_stop = & bnad_stop, .ndo_start_xmit = & bnad_start_xmit, .ndo_set_rx_mode = & bnad_set_rx_mode, .ndo_set_mac_address = & bnad_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & bnad_change_mtu, .ndo_get_stats64 = & bnad_get_stats64, .ndo_vlan_rx_add_vid = & bnad_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & bnad_vlan_rx_kill_vid, .ndo_poll_controller = & bnad_netpoll, .ndo_set_features = & bnad_set_features};
#line 3432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_netdev_init(struct bnad *bnad, bool using_dac)
{
  #line 3434 
  struct net_device *netdev = bnad->netdev;
  #line 3436 
  netdev->hw_features = 549756928403ULL;
  #line 3441 
  netdev->vlan_features = 1114163ULL;
  #line 3445 
  netdev->features = (netdev->features | netdev->hw_features) | 512ULL;
  #line 3447 
  if ((int)using_dac != 0) 
                           #line 3448 
                           netdev->features |= 32ULL;
  #line 3450 
  netdev->mem_start = (unsigned long)bnad->mmio_start;
  #line 3451 
  netdev->mem_end = (unsigned long)((bnad->mmio_start + bnad->mmio_len) + 18446744073709551615ULL);
  #line 3454 
  netdev->min_mtu = 46U;
  #line 3455 
  netdev->max_mtu = 9000U;
  #line 3457 
  netdev->netdev_ops = & bnad_netdev_ops;
  #line 3458 
  bnad_set_ethtool_ops(netdev);
  #line 3459 
  return;
}

#line 3468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_init(struct bnad *bnad, struct pci_dev *pdev, struct net_device *netdev)
{
  #line 3471 
  unsigned long flags;
  #line 3473 
  netdev->dev.parent = & pdev->dev;
  #line 3474 
  pci_set_drvdata(pdev,(void *)netdev);
  #line 3476 
  bnad->netdev = netdev;
  #line 3477 
  bnad->pcidev = pdev;
  #line 3478 
  bnad->mmio_start = pdev->resource[0].start;
  #line 3479 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    #line 3479 
    bnad->mmio_len = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    #line 3479 
                                                                    bnad->mmio_len = 0ULL;
  #line 3480 
  bnad->bar0 = ioremap(bnad->mmio_start,(unsigned long)bnad->mmio_len);
  #line 3481 
  if (bnad->bar0 == (void *)0) {
    #line 3482 
    _dev_err(& pdev->dev,(char *)"ioremap for bar0 failed\n");
    #line 3483 
    return -12;
  }
  #line 3485 
  _dev_info(& pdev->dev,(char *)"bar0 mapped to %p, len %llu\n",bnad->bar0,bnad->mmio_len);
  #line 3488 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3489 
  if (bnad_msix_disable == 0U) 
                               #line 3490 
                               bnad->cfg_flags = 16U;
  #line 3492 
  bnad->cfg_flags |= 1U;
  #line 3494 
  bnad_q_num_init(bnad);
  #line 3495 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3497 
  bnad->msix_num = (bnad->num_tx * bnad->num_txq_per_tx + bnad->num_rx * bnad->num_rxp_per_rx) + 1U;
  #line 3501 
  bnad->txq_depth = 2048U;
  #line 3502 
  bnad->rxq_depth = 2048U;
  #line 3504 
  bnad->tx_coalescing_timeo = (unsigned char)20U;
  #line 3505 
  bnad->rx_coalescing_timeo = (unsigned char)12U;
  #line 3507 
  sprintf((char *)(& bnad->wq_name),(char *)"%s_wq_%d",(char *)"bna",bnad->id);
  #line 3508 
  bnad->work_q = alloc_workqueue((char *)"%s",917514U,1,(char *)(& bnad->wq_name));
  #line 3509 
  if (bnad->work_q == (struct workqueue_struct *)0) {
    #line 3510 
    iounmap(bnad->bar0);
    #line 3511 
    return -12;
  }
  #line 3514 
  return 0;
}

#line 3523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_uninit(struct bnad *bnad)
{
  #line 3525 
  if (bnad->work_q != (struct workqueue_struct *)0) {
    #line 3526 
    flush_workqueue(bnad->work_q);
    #line 3527 
    destroy_workqueue(bnad->work_q);
    #line 3528 
    bnad->work_q = (struct workqueue_struct *)0;
  }
  #line 3531 
  if (bnad->bar0 != (void *)0) 
                               #line 3532 
                               iounmap(bnad->bar0);
  #line 3533 
  return;
}

#line 3542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_lock_init(struct bnad *bnad)
{
  #line 3544 
  spinlock_check(& bnad->bna_lock);
  {
    #line 3544 
    struct lock_class_key __key;
    #line 3544 
    __raw_spin_lock_init(& bnad->bna_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bnad->bna_lock)->rlock",& __key);
  }
  {
    #line 3545 
    struct lock_class_key __key_0;
    #line 3545 
    __mutex_init(& bnad->conf_mutex,(char *)"&bnad->conf_mutex",& __key_0);
  }
  #line 3547 
  return;
}

#line 3549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_lock_uninit(struct bnad *bnad)
{
  #line 3551 
  mutex_destroy(& bnad->conf_mutex);
  #line 3552 
  return;
}

#line 3556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_pci_init(struct bnad *bnad, struct pci_dev *pdev, bool *using_dac)
{
  #line 3559 
  int err;
  #line 3561 
  err = pci_enable_device(pdev);
  #line 3562 
  if (err != 0) 
                #line 3563 
                return err;
  #line 3564 
  err = pci_request_regions(pdev,(char *)"bna");
  #line 3565 
  if (err != 0) 
                #line 3566 
                goto disable_device;
  #line 3567 
  if (dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL) == 0) 
    #line 3568 
    *using_dac = (_Bool)1;
  else {
    #line 3570 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    #line 3571 
    if (err != 0) 
                  #line 3572 
                  goto release_regions;
    #line 3573 
    *using_dac = (_Bool)0;
  }
  #line 3575 
  pci_set_master(pdev);
  #line 3576 
  return 0;
  #line 3578 
  release_regions: 
                   #line 3578 
  ;
  #line 3579 
  pci_release_regions(pdev);
  #line 3580 
  disable_device: 
                  #line 3580 
  ;
  #line 3581 
  pci_disable_device(pdev);
  #line 3583 
  return err;
}

#line 3587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_pci_uninit(struct pci_dev *pdev)
{
  #line 3589 
  pci_release_regions(pdev);
  #line 3590 
  pci_disable_device(pdev);
  #line 3591 
  return;
}

#line 3594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_pci_probe(struct pci_dev *pdev, struct pci_device_id *pcidev_id)
{
  #line 3597 
  bool using_dac;
  #line 3598 
  int err;
  #line 3599 
  struct bnad *bnad;
  #line 3600 
  struct bna *bna;
  #line 3601 
  struct net_device *netdev;
  #line 3602 
  struct bfa_pcidev pcidev_info;
  #line 3603 
  unsigned long flags;
  #line 3605 
  cif_mutex_lock_bnad_fwimg_mutex(& bnad_fwimg_mutex);
  #line 3606 
  if (cna_get_firmware_buf(pdev) == (u32 *)0U) {
    #line 3607 
    cif_mutex_unlock_bnad_fwimg_mutex(& bnad_fwimg_mutex);
    #line 3608 
    _dev_err(& pdev->dev,(char *)"failed to load firmware image!\n");
    #line 3609 
    return -19;
  }
  #line 3611 
  cif_mutex_unlock_bnad_fwimg_mutex(& bnad_fwimg_mutex);
  #line 3617 
  netdev = cif_alloc_etherdev_mqs(22784,1U,1U);
  #line 3618 
  if (netdev == (struct net_device *)0) {
    #line 3619 
    err = -12;
    #line 3620 
    return err;
  }
  #line 3622 
  bnad = (struct bnad *)netdev_priv(netdev);
  #line 3623 
  bnad_lock_init(bnad);
  #line 3624 
  bnad->id = (unsigned int)(atomic_inc_return(& bna_id) + -1);
  #line 3626 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3632 
  using_dac = (_Bool)0;
  #line 3633 
  err = bnad_pci_init(bnad,pdev,& using_dac);
  #line 3634 
  if (err != 0) 
                #line 3635 
                goto unlock_mutex;
  #line 3641 
  err = bnad_init(bnad,pdev,netdev);
  #line 3642 
  if (err != 0) 
                #line 3643 
                goto pci_uninit;
  #line 3646 
  bnad_netdev_init(bnad,(_Bool)((bool)((int)using_dac) != 0));
  #line 3649 
  netif_carrier_off(netdev);
  #line 3652 
  if (bna_debugfs_enable != 0U) 
                                #line 3653 
                                bnad_debugfs_init(bnad);
  #line 3656 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3657 
  bna_res_req(& bnad->res_info[0]);
  #line 3658 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3661 
  err = bnad_res_alloc(bnad,& bnad->res_info[0],4U);
  #line 3662 
  if (err != 0) 
                #line 3663 
                goto drv_uninit;
  #line 3665 
  bna = & bnad->bna;
  #line 3668 
  pcidev_info.pci_slot = (int)((bnad->pcidev)->devfn >> 3) & 31;
  #line 3669 
  pcidev_info.pci_func = (unsigned char)((unsigned int)((unsigned char)(bnad->pcidev)->devfn) & 7U);
  #line 3670 
  pcidev_info.device_id = (bnad->pcidev)->device;
  #line 3671 
  pcidev_info.pci_bar_kva = bnad->bar0;
  #line 3673 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3674 
  bna_init(bna,bnad,& pcidev_info,& bnad->res_info[0]);
  #line 3675 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3677 
  bnad->stats.bna_stats = & bna->stats;
  #line 3679 
  bnad_enable_msix(bnad);
  #line 3680 
  err = bnad_mbox_irq_alloc(bnad);
  #line 3681 
  if (err != 0) 
                #line 3682 
                goto res_free;
  {
    #line 3685 
    struct lock_class_key __key;
    #line 3685 
    init_timer_key(& bnad->bna.ioceth.ioc.ioc_timer,& bnad_ioc_timeout,0U,(char *)"(&bnad->bna.ioceth.ioc.ioc_timer)",& __key);
  }
  {
    #line 3686 
    struct lock_class_key __key_0;
    #line 3686 
    init_timer_key(& bnad->bna.ioceth.ioc.hb_timer,& bnad_ioc_hb_check,0U,(char *)"(&bnad->bna.ioceth.ioc.hb_timer)",& __key_0);
  }
  {
    #line 3687 
    struct lock_class_key __key_1;
    #line 3687 
    init_timer_key(& bnad->bna.ioceth.ioc.iocpf_timer,& bnad_iocpf_timeout,0U,(char *)"(&bnad->bna.ioceth.ioc.iocpf_timer)",& __key_1);
  }
  {
    #line 3688 
    struct lock_class_key __key_2;
    #line 3688 
    init_timer_key(& bnad->bna.ioceth.ioc.sem_timer,& bnad_iocpf_sem_timeout,0U,(char *)"(&bnad->bna.ioceth.ioc.sem_timer)",& __key_2);
  }
  #line 3696 
  err = bnad_ioceth_enable(bnad);
  #line 3697 
  if (err != 0) {
    #line 3698 
    _dev_err(& pdev->dev,(char *)"initialization failed err=%d\n",err);
    #line 3699 
    goto probe_success;
  }
  #line 3702 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3703 
  if (bna_num_txq_set(bna,(int)(bnad->num_tx * bnad->num_txq_per_tx + 1U)) != 0) 
    #line 3703 
    goto _LOR;
  else {
    #line 3703 
    if (bna_num_rxp_set(bna,(int)(bnad->num_rx * bnad->num_rxp_per_rx + 1U)) != 0) {
      #line 3703 
      _LOR: {
              #line 3705 
              bnad_q_num_adjust(bnad,bna->ioceth.attr.num_txq + -1,bna->ioceth.attr.num_rxp + -1);
              #line 3707 
              if (bna_num_txq_set(bna,(int)(bnad->num_tx * bnad->num_txq_per_tx + 1U)) != 0) 
                #line 3709 
                err = -5;
              else {
                #line 3707 
                if (bna_num_rxp_set(bna,(int)(bnad->num_rx * bnad->num_rxp_per_rx + 1U)) != 0) 
                  #line 3709 
                  err = -5;
              }
            }
    }
  }
  #line 3711 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3712 
  if (err != 0) 
                #line 3713 
                goto disable_ioceth;
  #line 3715 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3716 
  bna_mod_res_req(& bnad->bna,& bnad->mod_res_info[0]);
  #line 3717 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3719 
  err = bnad_res_alloc(bnad,& bnad->mod_res_info[0],8U);
  #line 3720 
  if (err != 0) {
    #line 3721 
    err = -5;
    #line 3722 
    goto disable_ioceth;
  }
  #line 3725 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3726 
  bna_mod_init(& bnad->bna,& bnad->mod_res_info[0]);
  #line 3727 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3730 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3731 
  bna_enet_perm_mac_get(& bna->enet,(u8 *)(& bnad->perm_addr));
  #line 3732 
  bnad_set_netdev_perm_addr(bnad);
  #line 3733 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3735 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3738 
  err = cif_register_netdev(netdev);
  #line 3739 
  if (err != 0) {
    #line 3740 
    _dev_err(& pdev->dev,(char *)"registering net device failed\n");
    #line 3741 
    goto probe_uninit;
  }
  #line 3743 
  cif_set_bit(3L,& bnad->run_flags);
  #line 3745 
  return 0;
  #line 3747 
  probe_success: 
                 #line 3747 
  ;
  #line 3748 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3749 
  return 0;
  #line 3751 
  probe_uninit: 
                #line 3751 
  ;
  #line 3752 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3753 
  bnad_res_free(bnad,& bnad->mod_res_info[0],8U);
  #line 3754 
  disable_ioceth: 
                  #line 3754 
  ;
  #line 3755 
  bnad_ioceth_disable(bnad);
  #line 3756 
  cif_del_timer_sync(& bnad->bna.ioceth.ioc.ioc_timer);
  #line 3757 
  cif_del_timer_sync(& bnad->bna.ioceth.ioc.sem_timer);
  #line 3758 
  cif_del_timer_sync(& bnad->bna.ioceth.ioc.hb_timer);
  #line 3759 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3760 
  bna_uninit(bna);
  #line 3761 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3762 
  bnad_mbox_irq_free(bnad);
  #line 3763 
  bnad_disable_msix(bnad);
  #line 3764 
  res_free: 
            #line 3764 
  ;
  #line 3765 
  bnad_res_free(bnad,& bnad->res_info[0],4U);
  #line 3766 
  drv_uninit: 
              #line 3766 
  ;
  #line 3768 
  kfree((void *)bnad->regdata);
  #line 3769 
  bnad_debugfs_uninit(bnad);
  #line 3770 
  bnad_uninit(bnad);
  #line 3771 
  pci_uninit: 
              #line 3771 
  ;
  #line 3772 
  bnad_pci_uninit(pdev);
  #line 3773 
  unlock_mutex: 
                #line 3773 
  ;
  #line 3774 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3775 
  bnad_lock_uninit(bnad);
  #line 3776 
  cif_free_netdev(netdev);
  #line 3777 
  return err;
}

#line 3781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_pci_remove(struct pci_dev *pdev)
{
  #line 3784 
  struct bnad *bnad;
  #line 3785 
  struct bna *bna;
  #line 3786 
  unsigned long flags;
  #line 3783 
  struct net_device *netdev = pci_get_drvdata(pdev);
  #line 3788 
  if (netdev == (struct net_device *)0) 
                                        #line 3789 
                                        return;
  #line 3791 
  bnad = (struct bnad *)netdev_priv(netdev);
  #line 3792 
  bna = & bnad->bna;
  #line 3794 
  if ((int)test_and_set_bit(3L,& bnad->run_flags) != 0) 
                                                        #line 3795 
                                                        cif_unregister_netdev(netdev);
  #line 3797 
  cif_mutex_lock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3798 
  bnad_ioceth_disable(bnad);
  #line 3799 
  cif_del_timer_sync(& bnad->bna.ioceth.ioc.ioc_timer);
  #line 3800 
  cif_del_timer_sync(& bnad->bna.ioceth.ioc.sem_timer);
  #line 3801 
  cif_del_timer_sync(& bnad->bna.ioceth.ioc.hb_timer);
  #line 3802 
  cif___ldv_spin_lock_bna_lock_of_bnad(& bnad->bna_lock);
  #line 3803 
  bna_uninit(bna);
  #line 3804 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad(& bnad->bna_lock,flags);
  #line 3806 
  bnad_res_free(bnad,& bnad->mod_res_info[0],8U);
  #line 3807 
  bnad_res_free(bnad,& bnad->res_info[0],4U);
  #line 3808 
  bnad_mbox_irq_free(bnad);
  #line 3809 
  bnad_disable_msix(bnad);
  #line 3810 
  bnad_pci_uninit(pdev);
  #line 3811 
  cif_mutex_unlock_conf_mutex_of_bnad(& bnad->conf_mutex);
  #line 3812 
  bnad_lock_uninit(bnad);
  #line 3814 
  kfree((void *)bnad->regdata);
  #line 3815 
  bnad_debugfs_uninit(bnad);
  #line 3816 
  bnad_uninit(bnad);
  #line 3817 
  cif_free_netdev(netdev);
  #line 3818 
  return;
}

#line 3820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static struct pci_device_id bnad_pci_id_table[3U] = {{.vendor = 5719U, .device = 20U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 16776960U}, {.vendor = 5719U, .device = 34U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 16776960U}};
#line 3836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
struct pci_device_id __mod_pci__bnad_pci_id_table_device_table[3U];
#line 3838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static struct pci_driver bnad_pci_driver = {.name = (char *)"bna", .id_table = (struct pci_device_id *)(& bnad_pci_id_table), .probe = & bnad_pci_probe, .remove = & bnad_pci_remove};
#line 3846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static int bnad_module_init(void)
{
  #line 3848 
  int err;
  #line 3850 
  printk((char *)"\001",(char *)"3.2.25.1");
  #line 3853 
  bfa_nw_ioc_auto_recover((_Bool)(bnad_ioc_auto_recover != 0U));
  #line 3855 
  err = cif___pci_register_driver(& bnad_pci_driver,& __this_module,(char *)"bna");
  #line 3856 
  if (err < 0) {
    #line 3857 
    printk((char *)"\001",err);
    #line 3858 
    return err;
  }
  #line 3861 
  return 0;
}

#line 3865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad.c"
static void bnad_module_exit(void)
{
  #line 3867 
  cif_pci_unregister_driver(& bnad_pci_driver);
  #line 3868 
  cif_release_firmware(bfi_fw);
  #line 3869 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
struct pci_driver *emg_alias_bnad_pci_driver = & bnad_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
struct pci_device_id (*emg_alias_bnad_pci_id_table)[3U] = & bnad_pci_id_table;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int (*emg_alias_eth_validate_addr)(struct net_device *) = & eth_validate_addr;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 101 
#line 101 
int emg_del_timer_sync(struct timer_list *arg0);
#line 102 
#line 102 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 103 
#line 103 
void emg_free_netdev(struct net_device *arg0);
#line 104 
#line 104 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 105 
#line 105 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 106 
#line 106 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 107 
#line 107 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 108 
#line 108 
int emg_register_netdev(struct net_device *arg0);
#line 109 
#line 109 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 110 
#line 110 
void emg_unregister_netdev(struct net_device *arg0);
#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
void emg_bnad_module_exit(void)
{
  #line 115 
  bnad_module_exit();
  #line 116 
  return;
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_bnad_module_init(void)
{
  #line 119 
  return bnad_module_init();
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_change_mtu(struct net_device *arg0, int arg1)
{
  #line 123 
  return bnad_change_mtu(arg0,arg1);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
void emg_wrapper_bnad_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 128 
  bnad_get_stats64(arg0,arg1);
  #line 129 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
enum irqreturn emg_wrapper_bnad_msix_rx(int arg0, void *arg1)
{
  #line 133 
  return bnad_msix_rx(arg0,arg1);
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
enum irqreturn emg_wrapper_bnad_msix_tx(int arg0, void *arg1)
{
  #line 138 
  return bnad_msix_tx(arg0,arg1);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
void emg_wrapper_bnad_netpoll(struct net_device *arg0)
{
  #line 143 
  bnad_netpoll(arg0);
  #line 144 
  return;
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_open(struct net_device *arg0)
{
  #line 148 
  return bnad_open(arg0);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 153 
  return bnad_pci_probe(arg0,arg1);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
void emg_wrapper_bnad_pci_remove(struct pci_dev *arg0)
{
  #line 158 
  bnad_pci_remove(arg0);
  #line 159 
  return;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 163 
  return bnad_set_features(arg0,arg1);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 168 
  return bnad_set_mac_address(arg0,arg1);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
enum netdev_tx emg_wrapper_bnad_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 173 
  return bnad_start_xmit(arg0,arg1);
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_stop(struct net_device *arg0)
{
  #line 178 
  return bnad_stop(arg0);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 183 
  return bnad_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                           (unsigned short)((int)arg2));
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
int emg_wrapper_bnad_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 188 
  return bnad_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 200  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 203 
  return ldv_find_next_bit(addr,size,offset);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 210 
  ldv_set_bit(nr,addr);
  #line 211 
  return;
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 217 
  ldv_clear_bit(nr,addr);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 224 
  ldv_init_list_head(list);
  #line 225 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 245 
  return ldv_find_first_bit(addr,size);
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int atomic_add_return(int i, atomic_t *v)
{
  #line 259 
  return ldv_atomic_add_return(i,v);
}

#line 270  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 273 
  ldv_atomic_inc(v);
  #line 274 
  return;
}

#line 391  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 395 
  return emg_queue_work(wq,work);
}

#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 403 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 439  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 442 
  return ldv_kcalloc(n,size,flags);
}

#line 460  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 463 
  return ldv_kzalloc(size,flags);
}

#line 908  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif___ldv_spin_lock_bna_lock_of_bnad(spinlock_t *lock)
{
  #line 911 
  ldv_spin_model_lock((char *)"bna_lock_of_bnad");
  #line 913 
  __ldv_spin_lock(lock);
  #line 914 
  return;
}

#line 917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_spin_unlock_irqrestore_bna_lock_of_bnad(spinlock_t *lock, unsigned long flags)
{
  #line 920 
  ldv_spin_model_unlock((char *)"bna_lock_of_bnad");
  #line 922 
  spin_unlock_irqrestore(lock,flags);
  #line 923 
  return;
}

#line 926  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 930 
  return emg_mod_timer(timer,expires);
}

#line 934  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 938 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 946 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 954 
  return emg_del_timer_sync(timer);
}

#line 958  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_mutex_lock_conf_mutex_of_bnad(struct mutex *lock)
{
  #line 961 
  ldv_mutex_model_lock(lock,(char *)"conf_mutex_of_bnad");
  #line 962 
  return;
}

#line 965  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_mutex_unlock_conf_mutex_of_bnad(struct mutex *lock)
{
  #line 968 
  ldv_mutex_model_unlock(lock,(char *)"conf_mutex_of_bnad");
  #line 969 
  return;
}

#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_mutex_lock_bnad_fwimg_mutex(struct mutex *lock)
{
  #line 975 
  ldv_mutex_model_lock(lock,(char *)"bnad_fwimg_mutex");
  #line 976 
  return;
}

#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_mutex_unlock_bnad_fwimg_mutex(struct mutex *lock)
{
  #line 982 
  ldv_mutex_model_unlock(lock,(char *)"bnad_fwimg_mutex");
  #line 983 
  return;
}

#line 986  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 990 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 994  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 998 
  return emg_register_netdev(dev);
}

#line 1002  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1006 
  emg_free_netdev(dev);
  #line 1007 
  return;
}

#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1014 
  emg_unregister_netdev(dev);
  #line 1015 
  return;
}

#line 1018  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1022 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1026  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1030 
  emg_pci_unregister_driver(dev);
  #line 1031 
  return;
}

#line 1034  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1037 
  ldv_release_firmware(fw);
  #line 1038 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  #line 47 
  return (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 88 
#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static size_t cif_strlen(char *s);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 29 
void _raw_spin_lock_irq(raw_spinlock_t *);
#line 41 
#line 41 
void _raw_spin_unlock_irq(raw_spinlock_t *);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_spin_lock_irq_bna_lock_of_bnad(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 966  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_spin_unlock_irq_bna_lock_of_bnad(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(spinlock_t *lock, unsigned long flags);
#line 26 
#line 928 
static void cif_mutex_lock_conf_mutex_of_bnad_0(struct mutex *lock);
#line 35 
#line 910 
static void cif___ldv_spin_lock_bna_lock_of_bnad_0(spinlock_t *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_mutex_unlock_conf_mutex_of_bnad_0(struct mutex *lock);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 935  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 582  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 4752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 280 
void bfa_nw_ioc_get_attr(struct bfa_ioc *ioc, struct bfa_ioc_attr *ioc_attr);
#line 334 
#line 334 
enum bfa_status bfa_nw_flash_get_attr(struct bfa_flash *flash, struct bfa_flash_attr *attr, void (*cbfn)(void *, enum bfa_status ), void *cbarg);
#line 337 
#line 337 
enum bfa_status bfa_nw_flash_update_part(struct bfa_flash *flash, u32 type, u8 instance, void *buf, u32 len, u32 offset, void (*cbfn)(void *, enum bfa_status ), void *cbarg);
#line 340 
#line 340 
enum bfa_status bfa_nw_flash_read_part(struct bfa_flash *flash, u32 type, u8 instance, void *buf, u32 len, u32 offset, void (*cbfn)(void *, enum bfa_status ), void *cbarg);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_release_firmware_0(struct firmware *fw);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static char *bnad_net_stats_strings[189U] = {(char *)"rx_packets", (char *)"tx_packets", (char *)"rx_bytes", (char *)"tx_bytes", (char *)"rx_errors", (char *)"tx_errors", (char *)"rx_dropped", (char *)"tx_dropped", (char *)"multicast", (char *)"collisions", (char *)"rx_length_errors", (char *)"rx_crc_errors", (char *)"rx_frame_errors", (char *)"tx_fifo_errors", (char *)"netif_queue_stop", (char *)"netif_queue_wakeup", (char *)"netif_queue_stopped", (char *)"tso4", (char *)"tso6", (char *)"tso_err", (char *)"tcpcsum_offload", (char *)"udpcsum_offload", (char *)"csum_help", (char *)"tx_skb_too_short", (char *)"tx_skb_stopping", (char *)"tx_skb_max_vectors", (char *)"tx_skb_mss_too_long", (char *)"tx_skb_tso_too_short", (char *)"tx_skb_tso_prepare", (char *)"tx_skb_non_tso_too_long", (char *)"tx_skb_tcp_hdr", (char *)"tx_skb_udp_hdr", (char *)"tx_skb_csum_err", (char *)"tx_skb_headlen_too_long", (char *)"tx_skb_headlen_zero", (char *)"tx_skb_frag_zero", (char *)"tx_skb_len_mismatch", (char *)"tx_skb_map_failed", (char *)"hw_stats_updates", (char *)"netif_rx_dropped", (char *)"link_toggle", (char *)"cee_toggle", (char *)"rxp_info_alloc_failed", (char *)"mbox_intr_disabled", (char *)"mbox_intr_enabled", (char *)"tx_unmap_q_alloc_failed", (char *)"rx_unmap_q_alloc_failed", (char *)"rxbuf_alloc_failed", (char *)"rxbuf_map_failed", (char *)"mac_stats_clr_cnt", (char *)"mac_frame_64", (char *)"mac_frame_65_127", (char *)"mac_frame_128_255", (char *)"mac_frame_256_511", (char *)"mac_frame_512_1023", (char *)"mac_frame_1024_1518", (char *)"mac_frame_1518_1522", (char *)"mac_rx_bytes", (char *)"mac_rx_packets", (char *)"mac_rx_fcs_error", (char *)"mac_rx_multicast", (char *)"mac_rx_broadcast", (char *)"mac_rx_control_frames", (char *)"mac_rx_pause", (char *)"mac_rx_unknown_opcode", (char *)"mac_rx_alignment_error", (char *)"mac_rx_frame_length_error", (char *)"mac_rx_code_error", (char *)"mac_rx_carrier_sense_error", (char *)"mac_rx_undersize", (char *)"mac_rx_oversize", (char *)"mac_rx_fragments", (char *)"mac_rx_jabber", (char *)"mac_rx_drop", (char *)"mac_tx_bytes", (char *)"mac_tx_packets", (char *)"mac_tx_multicast", (char *)"mac_tx_broadcast", (char *)"mac_tx_pause", (char *)"mac_tx_deferral", (char *)"mac_tx_excessive_deferral", (char *)"mac_tx_single_collision", (char *)"mac_tx_muliple_collision", (char *)"mac_tx_late_collision", (char *)"mac_tx_excessive_collision", (char *)"mac_tx_total_collision", (char *)"mac_tx_pause_honored", (char *)"mac_tx_drop", (char *)"mac_tx_jabber", (char *)"mac_tx_fcs_error", (char *)"mac_tx_control_frame", (char *)"mac_tx_oversize", (char *)"mac_tx_undersize", (char *)"mac_tx_fragments", (char *)"bpc_tx_pause_0", (char *)"bpc_tx_pause_1", (char *)"bpc_tx_pause_2", (char *)"bpc_tx_pause_3", (char *)"bpc_tx_pause_4", (char *)"bpc_tx_pause_5", (char *)"bpc_tx_pause_6", (char *)"bpc_tx_pause_7", (char *)"bpc_tx_zero_pause_0", (char *)"bpc_tx_zero_pause_1", (char *)"bpc_tx_zero_pause_2", (char *)"bpc_tx_zero_pause_3", (char *)"bpc_tx_zero_pause_4", (char *)"bpc_tx_zero_pause_5", (char *)"bpc_tx_zero_pause_6", (char *)"bpc_tx_zero_pause_7", (char *)"bpc_tx_first_pause_0", (char *)"bpc_tx_first_pause_1", (char *)"bpc_tx_first_pause_2", (char *)"bpc_tx_first_pause_3", (char *)"bpc_tx_first_pause_4", (char *)"bpc_tx_first_pause_5", (char *)"bpc_tx_first_pause_6", (char *)"bpc_tx_first_pause_7", (char *)"bpc_rx_pause_0", (char *)"bpc_rx_pause_1", (char *)"bpc_rx_pause_2", (char *)"bpc_rx_pause_3", (char *)"bpc_rx_pause_4", (char *)"bpc_rx_pause_5", (char *)"bpc_rx_pause_6", (char *)"bpc_rx_pause_7", (char *)"bpc_rx_zero_pause_0", (char *)"bpc_rx_zero_pause_1", (char *)"bpc_rx_zero_pause_2", (char *)"bpc_rx_zero_pause_3", (char *)"bpc_rx_zero_pause_4", (char *)"bpc_rx_zero_pause_5", (char *)"bpc_rx_zero_pause_6", (char *)"bpc_rx_zero_pause_7", (char *)"bpc_rx_first_pause_0", (char *)"bpc_rx_first_pause_1", (char *)"bpc_rx_first_pause_2", (char *)"bpc_rx_first_pause_3", (char *)"bpc_rx_first_pause_4", (char *)"bpc_rx_first_pause_5", (char *)"bpc_rx_first_pause_6", (char *)"bpc_rx_first_pause_7", (char *)"rad_rx_frames", (char *)"rad_rx_octets", (char *)"rad_rx_vlan_frames", (char *)"rad_rx_ucast", (char *)"rad_rx_ucast_octets", (char *)"rad_rx_ucast_vlan", (char *)"rad_rx_mcast", (char *)"rad_rx_mcast_octets", (char *)"rad_rx_mcast_vlan", (char *)"rad_rx_bcast", (char *)"rad_rx_bcast_octets", (char *)"rad_rx_bcast_vlan", (char *)"rad_rx_drops", (char *)"rlb_rad_rx_frames", (char *)"rlb_rad_rx_octets", (char *)"rlb_rad_rx_vlan_frames", (char *)"rlb_rad_rx_ucast", (char *)"rlb_rad_rx_ucast_octets", (char *)"rlb_rad_rx_ucast_vlan", (char *)"rlb_rad_rx_mcast", (char *)"rlb_rad_rx_mcast_octets", (char *)"rlb_rad_rx_mcast_vlan", (char *)"rlb_rad_rx_bcast", (char *)"rlb_rad_rx_bcast_octets", (char *)"rlb_rad_rx_bcast_vlan", (char *)"rlb_rad_rx_drops", (char *)"fc_rx_ucast_octets", (char *)"fc_rx_ucast", (char *)"fc_rx_ucast_vlan", (char *)"fc_rx_mcast_octets", (char *)"fc_rx_mcast", (char *)"fc_rx_mcast_vlan", (char *)"fc_rx_bcast_octets", (char *)"fc_rx_bcast", (char *)"fc_rx_bcast_vlan", (char *)"fc_tx_ucast_octets", (char *)"fc_tx_ucast", (char *)"fc_tx_ucast_vlan", (char *)"fc_tx_mcast_octets", (char *)"fc_tx_mcast", (char *)"fc_tx_mcast_vlan", (char *)"fc_tx_bcast_octets", (char *)"fc_tx_bcast", (char *)"fc_tx_bcast_vlan", (char *)"fc_tx_parity_errors", (char *)"fc_tx_timeout", (char *)"fc_tx_fid_parity_errors"};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_get_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 238 
  u32 supported;
  #line 238 
  u32 advertising;
  #line 240 
  supported = 4096U;
  #line 241 
  advertising = 4096U;
  #line 242 
  cmd->base.autoneg = (unsigned char)0U;
  #line 243 
  supported |= 1024U;
  #line 244 
  advertising |= 1024U;
  #line 245 
  cmd->base.port = (unsigned char)3U;
  #line 246 
  cmd->base.phy_address = (unsigned char)0U;
  #line 248 
  if ((int)netif_carrier_ok(netdev) != 0) {
    #line 249 
    cmd->base.speed = 10000U;
    #line 250 
    cmd->base.duplex = (unsigned char)1U;
  }
  else {
    #line 252 
    cmd->base.speed = 4294967295U;
    #line 253 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 256 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 258 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 261 
  return 0;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_set_link_ksettings(struct net_device *netdev, struct ethtool_link_ksettings *cmd)
{
  #line 269 
  if ((unsigned int)cmd->base.autoneg == 1U) 
                                             #line 270 
                                             return -95;
  #line 272 
  if (cmd->base.speed == 10000U && (unsigned int)cmd->base.duplex == 1U) 
    #line 274 
    return 0;
  #line 276 
  return -95;
}

#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static void bnad_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  #line 283 
  struct bfa_ioc_attr *ioc_attr;
  #line 284 
  unsigned long flags;
  #line 282 
  struct bnad *bnad = netdev_priv(netdev);
  #line 286 
  strlcpy((char *)(& drvinfo->driver),(char *)"bna",32UL);
  #line 287 
  strlcpy((char *)(& drvinfo->version),(char *)"3.2.25.1",32UL);
  #line 289 
  ioc_attr = (struct bfa_ioc_attr *)kzalloc_0(1600UL,3264U);
  #line 290 
  if (ioc_attr != (struct bfa_ioc_attr *)0) {
    #line 291 
    cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
    #line 292 
    bfa_nw_ioc_get_attr(& bnad->bna.ioceth.ioc,ioc_attr);
    #line 293 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
    #line 295 
    strlcpy((char *)(& drvinfo->fw_version),(char *)(& ioc_attr->adapter_attr.fw_ver),32UL);
    #line 297 
    kfree((void *)ioc_attr);
  }
  #line 300 
  ;
  #line 300 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(bnad->pcidev),32UL);
  #line 301 
  return;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static void bnad_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wolinfo)
{
  #line 307 
  wolinfo->supported = 0U;
  #line 308 
  wolinfo->wolopts = 0U;
  #line 309 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *coalesce)
{
  #line 315 
  unsigned long flags;
  #line 314 
  struct bnad *bnad = netdev_priv(netdev);
  #line 318 
  cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
  #line 319 
  coalesce->use_adaptive_rx_coalesce = bnad->cfg_flags & 1U;
  #line 321 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  #line 323 
  coalesce->rx_coalesce_usecs = (unsigned int)((int)bnad->rx_coalescing_timeo * 5);
  #line 325 
  coalesce->tx_coalesce_usecs = (unsigned int)((int)bnad->tx_coalescing_timeo * 5);
  #line 327 
  coalesce->tx_max_coalesced_frames = 12U;
  #line 329 
  return 0;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *coalesce)
{
  #line 336 
  unsigned long flags;
  #line 335 
  struct bnad *bnad = netdev_priv(netdev);
  #line 337 
  int to_del = 0;
  #line 339 
  if (coalesce->rx_coalesce_usecs + 4294967295U > 1274U) 
                                                         #line 342 
                                                         return -22;
  #line 344 
  if (coalesce->tx_coalesce_usecs + 4294967295U > 1274U) 
                                                         #line 347 
                                                         return -22;
  #line 349 
  cif_mutex_lock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 355 
  cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
  #line 356 
  if (coalesce->use_adaptive_rx_coalesce != 0U) {
    #line 357 
    if ((bnad->cfg_flags & 1U) == 0U) {
      #line 358 
      bnad->cfg_flags |= 1U;
      #line 359 
      bnad_dim_timer_start(bnad);
    }
  }
  else 
    #line 362 
    if ((bnad->cfg_flags & 1U) != 0U) {
      #line 363 
      bnad->cfg_flags &= 4294967294U;
      #line 364 
      if ((bnad->cfg_flags & 1U) != 0U) {
        #line 364 
        if ((int)test_bit(4L,& bnad->run_flags) != 0) {
          #line 367 
          cif_clear_bit_0(4L,& bnad->run_flags);
          #line 369 
          to_del = 1;
        }
      }
      #line 371 
      cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
      #line 372 
      if (to_del != 0) 
                       #line 373 
                       cif_del_timer_sync_0(& bnad->dim_timer);
      #line 374 
      cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
      #line 375 
      bnad_rx_coalescing_timeo_set(bnad);
    }
  #line 378 
  if ((unsigned int)bnad->tx_coalescing_timeo != coalesce->tx_coalesce_usecs / 5U) {
    #line 380 
    bnad->tx_coalescing_timeo = (unsigned char)(coalesce->tx_coalesce_usecs / 5U);
    #line 382 
    bnad_tx_coalescing_timeo_set(bnad);
  }
  #line 385 
  if ((unsigned int)bnad->rx_coalescing_timeo != coalesce->rx_coalesce_usecs / 5U) {
    #line 387 
    bnad->rx_coalescing_timeo = (unsigned char)(coalesce->rx_coalesce_usecs / 5U);
    #line 390 
    if ((bnad->cfg_flags & 1U) == 0U) 
                                      #line 391 
                                      bnad_rx_coalescing_timeo_set(bnad);
  }
  #line 397 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  #line 399 
  cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 400 
  return 0;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static void bnad_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ringparam)
{
  #line 407 
  struct bnad *bnad = netdev_priv(netdev);
  #line 409 
  ringparam->rx_max_pending = 16384U;
  #line 410 
  ringparam->tx_max_pending = 2048U;
  #line 412 
  ringparam->rx_pending = bnad->rxq_depth;
  #line 413 
  ringparam->tx_pending = bnad->txq_depth;
  #line 414 
  return;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ringparam)
{
  #line 420 
  int i;
  #line 420 
  int current_err;
  #line 422 
  unsigned long flags;
  #line 420 
  int err = 0;
  #line 421 
  struct bnad *bnad = netdev_priv(netdev);
  #line 424 
  cif_mutex_lock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 425 
  if (ringparam->rx_pending == bnad->rxq_depth && ringparam->tx_pending == bnad->txq_depth) {
    #line 427 
    cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
    #line 428 
    return 0;
  }
  #line 431 
  if (ringparam->rx_pending + 4294966784U > 15872U) 
                                                    #line 431 
                                                    goto _LOR;
  else {
    #line 433 
    if (! is_power_of_2((unsigned long)ringparam->rx_pending)) {
      #line 431 
      _LOR: {
              #line 434 
              cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
              #line 435 
              return -22;
            }
    }
  }
  #line 437 
  if (ringparam->tx_pending + 4294966784U > 1536U) 
                                                   #line 437 
                                                   goto _LOR_0;
  else {
    #line 439 
    if (! is_power_of_2((unsigned long)ringparam->tx_pending)) {
      #line 437 
      _LOR_0: {
                #line 440 
                cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
                #line 441 
                return -22;
              }
    }
  }
  #line 444 
  if (ringparam->rx_pending != bnad->rxq_depth) {
    #line 445 
    bnad->rxq_depth = ringparam->rx_pending;
    #line 446 
    if (! netif_running(netdev)) {
      #line 447 
      cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
      #line 448 
      return 0;
    }
    #line 451 
    i = 0;
    #line 451 
    while (bnad->num_rx > (unsigned int)i) {
      #line 452 
      if (bnad->rx_info[i].rx == (struct bna_rx *)0) 
                                                     #line 453 
                                                     goto __Cont;
      #line 454 
      bnad_destroy_rx(bnad,(unsigned int)i);
      #line 455 
      current_err = bnad_setup_rx(bnad,(unsigned int)i);
      #line 456 
      if (current_err != 0 && err == 0) 
                                        #line 457 
                                        err = current_err;
      #line 451 
      __Cont: 
              #line 451 
      i ++;
    }
    #line 460 
    if (err == 0 && bnad->rx_info[0].rx != (struct bna_rx *)0) {
      #line 462 
      bnad_restore_vlans(bnad,0U);
      #line 463 
      bnad_enable_default_bcast(bnad);
      #line 464 
      cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
      #line 465 
      bnad_mac_addr_set_locked(bnad,netdev->dev_addr);
      #line 466 
      cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
      #line 467 
      bnad->cfg_flags &= 4294967289U;
      #line 469 
      bnad_set_rx_mode(netdev);
    }
  }
  #line 472 
  if (ringparam->tx_pending != bnad->txq_depth) {
    #line 473 
    bnad->txq_depth = ringparam->tx_pending;
    #line 474 
    if (! netif_running(netdev)) {
      #line 475 
      cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
      #line 476 
      return 0;
    }
    #line 479 
    i = 0;
    #line 479 
    while (bnad->num_tx > (unsigned int)i) {
      #line 480 
      if (bnad->tx_info[i].tx == (struct bna_tx *)0) 
                                                     #line 481 
                                                     goto __Cont_0;
      #line 482 
      bnad_destroy_tx(bnad,(unsigned int)i);
      #line 483 
      current_err = bnad_setup_tx(bnad,(unsigned int)i);
      #line 484 
      if (current_err != 0 && err == 0) 
                                        #line 485 
                                        err = current_err;
      #line 479 
      __Cont_0: 
                #line 479 
      i ++;
    }
  }
  #line 489 
  cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 490 
  return err;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static void bnad_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pauseparam)
{
  #line 497 
  struct bnad *bnad = netdev_priv(netdev);
  #line 499 
  pauseparam->autoneg = 0U;
  #line 500 
  pauseparam->rx_pause = (unsigned int)bnad->bna.enet.pause_config.rx_pause;
  #line 501 
  pauseparam->tx_pause = (unsigned int)bnad->bna.enet.pause_config.tx_pause;
  #line 502 
  return;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pauseparam)
{
  #line 509 
  struct bna_pause_config pause_config;
  #line 510 
  unsigned long flags;
  #line 508 
  struct bnad *bnad = netdev_priv(netdev);
  #line 512 
  if (pauseparam->autoneg == 1U) 
                                 #line 513 
                                 return -22;
  #line 515 
  cif_mutex_lock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 516 
  if (pauseparam->rx_pause != (unsigned int)bnad->bna.enet.pause_config.rx_pause || pauseparam->tx_pause != (unsigned int)bnad->bna.enet.pause_config.tx_pause) {
    #line 518 
    pause_config.rx_pause = (enum bna_status)pauseparam->rx_pause;
    #line 519 
    pause_config.tx_pause = (enum bna_status)pauseparam->tx_pause;
    #line 520 
    cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
    #line 521 
    bna_enet_pause_config(& bnad->bna.enet,& pause_config);
    #line 522 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  }
  #line 524 
  cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 525 
  return 0;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static void bnad_get_strings(struct net_device *netdev, u32 stringset, u8 *string)
{
  #line 532 
  int i;
  #line 532 
  int j;
  #line 532 
  int q_num;
  #line 533 
  u32 bmap;
  #line 531 
  struct bnad *bnad = netdev_priv(netdev);
  #line 535 
  cif_mutex_lock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 537 
  switch (stringset) {
    #line 538 
    case (u32)1: 
                 #line 538 
    ;
    #line 539 
    i = 0;
    #line 539 
    while ((unsigned int)i <= 188U) {
      {
        #line 540 
        if ((long)(cif_strlen(bnad_net_stats_strings[i]) > 31UL) != 0L) {
          #line 541 
          ldv_inline_asm();
          #line 542 
          ldv_inline_asm();
          #line 543 
          ldv_inline_asm();
          #line 540 
          ;
        }
        #line 542 
        strncpy((char *)string,bnad_net_stats_strings[i],32UL);
        #line 544 
        string += 32U;
      }
      #line 539 
      i ++;
    }
    #line 546 
    bmap = bnad->bna.tx_mod.rid_mask;
    #line 547 
    i = 0;
    #line 547 
    while (bmap != 0U) {
      #line 548 
      if ((bmap & 1U) != 0U) {
        #line 549 
        sprintf((char *)string,(char *)"txf%d_ucast_octets",i);
        #line 550 
        string += 32U;
        #line 551 
        sprintf((char *)string,(char *)"txf%d_ucast",i);
        #line 552 
        string += 32U;
        #line 553 
        sprintf((char *)string,(char *)"txf%d_ucast_vlan",i);
        #line 554 
        string += 32U;
        #line 555 
        sprintf((char *)string,(char *)"txf%d_mcast_octets",i);
        #line 556 
        string += 32U;
        #line 557 
        sprintf((char *)string,(char *)"txf%d_mcast",i);
        #line 558 
        string += 32U;
        #line 559 
        sprintf((char *)string,(char *)"txf%d_mcast_vlan",i);
        #line 560 
        string += 32U;
        #line 561 
        sprintf((char *)string,(char *)"txf%d_bcast_octets",i);
        #line 562 
        string += 32U;
        #line 563 
        sprintf((char *)string,(char *)"txf%d_bcast",i);
        #line 564 
        string += 32U;
        #line 565 
        sprintf((char *)string,(char *)"txf%d_bcast_vlan",i);
        #line 566 
        string += 32U;
        #line 567 
        sprintf((char *)string,(char *)"txf%d_errors",i);
        #line 568 
        string += 32U;
        #line 569 
        sprintf((char *)string,(char *)"txf%d_filter_vlan",i);
        #line 570 
        string += 32U;
        #line 571 
        sprintf((char *)string,(char *)"txf%d_filter_mac_sa",i);
        #line 572 
        string += 32U;
      }
      #line 574 
      bmap >>= 1;
      #line 547 
      i ++;
    }
    #line 577 
    bmap = bnad->bna.rx_mod.rid_mask;
    #line 578 
    i = 0;
    #line 578 
    while (bmap != 0U) {
      #line 579 
      if ((bmap & 1U) != 0U) {
        #line 580 
        sprintf((char *)string,(char *)"rxf%d_ucast_octets",i);
        #line 581 
        string += 32U;
        #line 582 
        sprintf((char *)string,(char *)"rxf%d_ucast",i);
        #line 583 
        string += 32U;
        #line 584 
        sprintf((char *)string,(char *)"rxf%d_ucast_vlan",i);
        #line 585 
        string += 32U;
        #line 586 
        sprintf((char *)string,(char *)"rxf%d_mcast_octets",i);
        #line 587 
        string += 32U;
        #line 588 
        sprintf((char *)string,(char *)"rxf%d_mcast",i);
        #line 589 
        string += 32U;
        #line 590 
        sprintf((char *)string,(char *)"rxf%d_mcast_vlan",i);
        #line 591 
        string += 32U;
        #line 592 
        sprintf((char *)string,(char *)"rxf%d_bcast_octets",i);
        #line 593 
        string += 32U;
        #line 594 
        sprintf((char *)string,(char *)"rxf%d_bcast",i);
        #line 595 
        string += 32U;
        #line 596 
        sprintf((char *)string,(char *)"rxf%d_bcast_vlan",i);
        #line 597 
        string += 32U;
        #line 598 
        sprintf((char *)string,(char *)"rxf%d_frame_drops",i);
        #line 599 
        string += 32U;
      }
      #line 601 
      bmap >>= 1;
      #line 578 
      i ++;
    }
    #line 604 
    q_num = 0;
    #line 605 
    i = 0;
    #line 605 
    while (bnad->num_rx > (unsigned int)i) {
      #line 606 
      if (bnad->rx_info[i].rx == (struct bna_rx *)0) 
                                                     #line 607 
                                                     goto __Cont;
      #line 608 
      j = 0;
      #line 608 
      while (bnad->num_rxp_per_rx > (unsigned int)j) {
        #line 609 
        sprintf((char *)string,(char *)"cq%d_producer_index",q_num);
        #line 610 
        string += 32U;
        #line 611 
        sprintf((char *)string,(char *)"cq%d_consumer_index",q_num);
        #line 612 
        string += 32U;
        #line 613 
        sprintf((char *)string,(char *)"cq%d_hw_producer_index",q_num);
        #line 615 
        string += 32U;
        #line 616 
        sprintf((char *)string,(char *)"cq%d_intr",q_num);
        #line 617 
        string += 32U;
        #line 618 
        sprintf((char *)string,(char *)"cq%d_poll",q_num);
        #line 619 
        string += 32U;
        #line 620 
        sprintf((char *)string,(char *)"cq%d_schedule",q_num);
        #line 621 
        string += 32U;
        #line 622 
        sprintf((char *)string,(char *)"cq%d_keep_poll",q_num);
        #line 623 
        string += 32U;
        #line 624 
        sprintf((char *)string,(char *)"cq%d_complete",q_num);
        #line 625 
        string += 32U;
        #line 626 
        q_num ++;
        #line 608 
        j ++;
      }
      #line 605 
      __Cont: 
              #line 605 
      i ++;
    }
    #line 630 
    q_num = 0;
    #line 631 
    i = 0;
    #line 631 
    while (bnad->num_rx > (unsigned int)i) {
      #line 632 
      if (bnad->rx_info[i].rx == (struct bna_rx *)0) 
                                                     #line 633 
                                                     goto __Cont_0;
      #line 634 
      j = 0;
      #line 634 
      while (bnad->num_rxp_per_rx > (unsigned int)j) {
        #line 635 
        sprintf((char *)string,(char *)"rxq%d_packets",q_num);
        #line 636 
        string += 32U;
        #line 637 
        sprintf((char *)string,(char *)"rxq%d_bytes",q_num);
        #line 638 
        string += 32U;
        #line 639 
        sprintf((char *)string,(char *)"rxq%d_packets_with_error",q_num);
        #line 641 
        string += 32U;
        #line 642 
        sprintf((char *)string,(char *)"rxq%d_allocbuf_failed",q_num);
        #line 643 
        string += 32U;
        #line 644 
        sprintf((char *)string,(char *)"rxq%d_mapbuf_failed",q_num);
        #line 645 
        string += 32U;
        #line 646 
        sprintf((char *)string,(char *)"rxq%d_producer_index",q_num);
        #line 647 
        string += 32U;
        #line 648 
        sprintf((char *)string,(char *)"rxq%d_consumer_index",q_num);
        #line 649 
        string += 32U;
        #line 650 
        q_num ++;
        #line 651 
        if ((bnad->rx_info[i].rx_ctrl[j].ccb != (struct bna_ccb *)0 && (bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1] != (struct bna_rcb *)0) && ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1])->rxq != (struct bna_rxq *)0) {
          #line 656 
          sprintf((char *)string,(char *)"rxq%d_packets",q_num);
          #line 657 
          string += 32U;
          #line 658 
          sprintf((char *)string,(char *)"rxq%d_bytes",q_num);
          #line 659 
          string += 32U;
          #line 660 
          sprintf((char *)string,(char *)"rxq%d_packets_with_error",q_num);
          #line 662 
          string += 32U;
          #line 663 
          sprintf((char *)string,(char *)"rxq%d_allocbuf_failed",q_num);
          #line 665 
          string += 32U;
          #line 666 
          sprintf((char *)string,(char *)"rxq%d_mapbuf_failed",q_num);
          #line 668 
          string += 32U;
          #line 669 
          sprintf((char *)string,(char *)"rxq%d_producer_index",q_num);
          #line 671 
          string += 32U;
          #line 672 
          sprintf((char *)string,(char *)"rxq%d_consumer_index",q_num);
          #line 674 
          string += 32U;
          #line 675 
          q_num ++;
        }
        #line 634 
        j ++;
      }
      #line 631 
      __Cont_0: 
                #line 631 
      i ++;
    }
    #line 680 
    q_num = 0;
    #line 681 
    i = 0;
    #line 681 
    while (bnad->num_tx > (unsigned int)i) {
      #line 682 
      if (bnad->tx_info[i].tx == (struct bna_tx *)0) 
                                                     #line 683 
                                                     goto __Cont_1;
      #line 684 
      j = 0;
      #line 684 
      while (bnad->num_txq_per_tx > (unsigned int)j) {
        #line 685 
        sprintf((char *)string,(char *)"txq%d_packets",q_num);
        #line 686 
        string += 32U;
        #line 687 
        sprintf((char *)string,(char *)"txq%d_bytes",q_num);
        #line 688 
        string += 32U;
        #line 689 
        sprintf((char *)string,(char *)"txq%d_producer_index",q_num);
        #line 690 
        string += 32U;
        #line 691 
        sprintf((char *)string,(char *)"txq%d_consumer_index",q_num);
        #line 692 
        string += 32U;
        #line 693 
        sprintf((char *)string,(char *)"txq%d_hw_consumer_index",q_num);
        #line 695 
        string += 32U;
        #line 696 
        q_num ++;
        #line 684 
        j ++;
      }
      #line 681 
      __Cont_1: 
                #line 681 
      i ++;
    }
    #line 700 
    break;
    #line 702 
    default: 
             #line 702 
    ;
    #line 703 
    break;
  }
  #line 706 
  cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 707 
  return;
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_get_stats_count_locked(struct net_device *netdev)
{
  #line 713 
  int i;
  #line 713 
  int j;
  #line 714 
  u32 bmap;
  #line 712 
  struct bnad *bnad = netdev_priv(netdev);
  #line 713 
  int count = 0;
  #line 713 
  int rxf_active_num = 0;
  #line 713 
  int txf_active_num = 0;
  #line 716 
  bmap = bnad->bna.tx_mod.rid_mask;
  #line 717 
  i = 0;
  #line 717 
  while (bmap != 0U) {
    #line 718 
    if ((bmap & 1U) != 0U) 
                           #line 719 
                           txf_active_num ++;
    #line 720 
    bmap >>= 1;
    #line 717 
    i ++;
  }
  #line 722 
  bmap = bnad->bna.rx_mod.rid_mask;
  #line 723 
  i = 0;
  #line 723 
  while (bmap != 0U) {
    #line 724 
    if ((bmap & 1U) != 0U) 
                           #line 725 
                           rxf_active_num ++;
    #line 726 
    bmap >>= 1;
    #line 723 
    i ++;
  }
  #line 728 
  count = (int)((unsigned int)(txf_active_num * 12 + rxf_active_num * 10) + 189U);
  #line 732 
  i = 0;
  #line 732 
  while (bnad->num_rx > (unsigned int)i) {
    #line 733 
    if (bnad->rx_info[i].rx == (struct bna_rx *)0) 
                                                   #line 734 
                                                   goto __Cont;
    #line 735 
    count = (int)(bnad->num_rxp_per_rx * 8U + (unsigned int)count);
    #line 736 
    count = (int)(bnad->num_rxp_per_rx * 7U + (unsigned int)count);
    #line 737 
    j = 0;
    #line 737 
    while (bnad->num_rxp_per_rx > (unsigned int)j) {
      #line 738 
      if ((bnad->rx_info[i].rx_ctrl[j].ccb != (struct bna_ccb *)0 && (bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1] != (struct bna_rcb *)0) && ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1])->rxq != (struct bna_rxq *)0) 
        #line 741 
        count += 7;
      #line 737 
      j ++;
    }
    #line 732 
    __Cont: 
            #line 732 
    i ++;
  }
  #line 744 
  i = 0;
  #line 744 
  while (bnad->num_tx > (unsigned int)i) {
    #line 745 
    if (bnad->tx_info[i].tx == (struct bna_tx *)0) 
                                                   #line 746 
                                                   goto __Cont_0;
    #line 747 
    count = (int)(bnad->num_txq_per_tx * 5U + (unsigned int)count);
    #line 744 
    __Cont_0: 
              #line 744 
    i ++;
  }
  #line 749 
  return count;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_per_q_stats_fill(struct bnad *bnad, u64 *buf, int bi)
{
  #line 755 
  int i;
  #line 755 
  int j;
  #line 756 
  struct bna_rcb *rcb = (struct bna_rcb *)0;
  #line 757 
  struct bna_tcb *tcb = (struct bna_tcb *)0;
  #line 759 
  i = 0;
  #line 759 
  while (bnad->num_rx > (unsigned int)i) {
    #line 760 
    if (bnad->rx_info[i].rx == (struct bna_rx *)0) 
                                                   #line 761 
                                                   goto __Cont;
    #line 762 
    j = 0;
    #line 762 
    while (bnad->num_rxp_per_rx > (unsigned int)j) {
      #line 763 
      if ((bnad->rx_info[i].rx_ctrl[j].ccb != (struct bna_ccb *)0 && (bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0] != (struct bna_rcb *)0) && ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0])->rxq != (struct bna_rxq *)0) {
        #line 766 
        int tmp;
        #line 768 
        int tmp_0;
        #line 769 
        int tmp_1;
        #line 772 
        int tmp_2;
        #line 774 
        int tmp_3;
        #line 776 
        int tmp_4;
        #line 778 
        int tmp_5;
        #line 780 
        int tmp_6;
        #line 766 
        tmp = bi;
        #line 766 
        bi ++;
        #line 766 
        *(buf + (unsigned long)tmp) = (unsigned long long)(bnad->rx_info[i].rx_ctrl[j].ccb)->producer_index;
        #line 768 
        tmp_0 = bi;
        #line 768 
        bi ++;
        #line 768 
        *(buf + (unsigned long)tmp_0) = 0ULL;
        #line 769 
        tmp_1 = bi;
        #line 769 
        bi ++;
        #line 769 
        *(buf + (unsigned long)tmp_1) = (unsigned long long)*((bnad->rx_info[i].rx_ctrl[j].ccb)->hw_producer_index);
        #line 772 
        tmp_2 = bi;
        #line 772 
        bi ++;
        #line 772 
        *(buf + (unsigned long)tmp_2) = bnad->rx_info[i].rx_ctrl[j].rx_intr_ctr;
        #line 774 
        tmp_3 = bi;
        #line 774 
        bi ++;
        #line 774 
        *(buf + (unsigned long)tmp_3) = bnad->rx_info[i].rx_ctrl[j].rx_poll_ctr;
        #line 776 
        tmp_4 = bi;
        #line 776 
        bi ++;
        #line 776 
        *(buf + (unsigned long)tmp_4) = bnad->rx_info[i].rx_ctrl[j].rx_schedule;
        #line 778 
        tmp_5 = bi;
        #line 778 
        bi ++;
        #line 778 
        *(buf + (unsigned long)tmp_5) = bnad->rx_info[i].rx_ctrl[j].rx_keep_poll;
        #line 780 
        tmp_6 = bi;
        #line 780 
        bi ++;
        #line 780 
        *(buf + (unsigned long)tmp_6) = bnad->rx_info[i].rx_ctrl[j].rx_complete;
      }
      #line 762 
      j ++;
    }
    #line 759 
    __Cont: 
            #line 759 
    i ++;
  }
  #line 784 
  i = 0;
  #line 784 
  while (bnad->num_rx > (unsigned int)i) {
    #line 785 
    if (bnad->rx_info[i].rx == (struct bna_rx *)0) 
                                                   #line 786 
                                                   goto __Cont_0;
    #line 787 
    j = 0;
    #line 787 
    while (bnad->num_rxp_per_rx > (unsigned int)j) {
      #line 788 
      if (bnad->rx_info[i].rx_ctrl[j].ccb != (struct bna_ccb *)0) {
        #line 789 
        if ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0] != (struct bna_rcb *)0 && ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0])->rxq != (struct bna_rxq *)0) {
          #line 794 
          int tmp_7;
          #line 795 
          int tmp_8;
          #line 796 
          int tmp_9;
          #line 798 
          int tmp_10;
          #line 800 
          int tmp_11;
          #line 801 
          int tmp_12;
          #line 802 
          int tmp_13;
          #line 792 
          rcb = (bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[0];
          #line 794 
          tmp_7 = bi;
          #line 794 
          bi ++;
          #line 794 
          *(buf + (unsigned long)tmp_7) = (rcb->rxq)->rx_packets;
          #line 795 
          tmp_8 = bi;
          #line 795 
          bi ++;
          #line 795 
          *(buf + (unsigned long)tmp_8) = (rcb->rxq)->rx_bytes;
          #line 796 
          tmp_9 = bi;
          #line 796 
          bi ++;
          #line 796 
          *(buf + (unsigned long)tmp_9) = (rcb->rxq)->rx_packets_with_error;
          #line 798 
          tmp_10 = bi;
          #line 798 
          bi ++;
          #line 798 
          *(buf + (unsigned long)tmp_10) = (rcb->rxq)->rxbuf_alloc_failed;
          #line 800 
          tmp_11 = bi;
          #line 800 
          bi ++;
          #line 800 
          *(buf + (unsigned long)tmp_11) = (rcb->rxq)->rxbuf_map_failed;
          #line 801 
          tmp_12 = bi;
          #line 801 
          bi ++;
          #line 801 
          *(buf + (unsigned long)tmp_12) = (unsigned long long)rcb->producer_index;
          #line 802 
          tmp_13 = bi;
          #line 802 
          bi ++;
          #line 802 
          *(buf + (unsigned long)tmp_13) = (unsigned long long)rcb->consumer_index;
        }
        #line 804 
        if ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1] != (struct bna_rcb *)0 && ((bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1])->rxq != (struct bna_rxq *)0) {
          #line 809 
          int tmp_14;
          #line 810 
          int tmp_15;
          #line 811 
          int tmp_16;
          #line 813 
          int tmp_17;
          #line 815 
          int tmp_18;
          #line 816 
          int tmp_19;
          #line 817 
          int tmp_20;
          #line 807 
          rcb = (bnad->rx_info[i].rx_ctrl[j].ccb)->rcb[1];
          #line 809 
          tmp_14 = bi;
          #line 809 
          bi ++;
          #line 809 
          *(buf + (unsigned long)tmp_14) = (rcb->rxq)->rx_packets;
          #line 810 
          tmp_15 = bi;
          #line 810 
          bi ++;
          #line 810 
          *(buf + (unsigned long)tmp_15) = (rcb->rxq)->rx_bytes;
          #line 811 
          tmp_16 = bi;
          #line 811 
          bi ++;
          #line 811 
          *(buf + (unsigned long)tmp_16) = (rcb->rxq)->rx_packets_with_error;
          #line 813 
          tmp_17 = bi;
          #line 813 
          bi ++;
          #line 813 
          *(buf + (unsigned long)tmp_17) = (rcb->rxq)->rxbuf_alloc_failed;
          #line 815 
          tmp_18 = bi;
          #line 815 
          bi ++;
          #line 815 
          *(buf + (unsigned long)tmp_18) = (rcb->rxq)->rxbuf_map_failed;
          #line 816 
          tmp_19 = bi;
          #line 816 
          bi ++;
          #line 816 
          *(buf + (unsigned long)tmp_19) = (unsigned long long)rcb->producer_index;
          #line 817 
          tmp_20 = bi;
          #line 817 
          bi ++;
          #line 817 
          *(buf + (unsigned long)tmp_20) = (unsigned long long)rcb->consumer_index;
        }
      }
      #line 787 
      j ++;
    }
    #line 784 
    __Cont_0: 
              #line 784 
    i ++;
  }
  #line 822 
  i = 0;
  #line 822 
  while (bnad->num_tx > (unsigned int)i) {
    #line 823 
    if (bnad->tx_info[i].tx == (struct bna_tx *)0) 
                                                   #line 824 
                                                   goto __Cont_1;
    #line 825 
    j = 0;
    #line 825 
    while (bnad->num_txq_per_tx > (unsigned int)j) {
      #line 826 
      if (bnad->tx_info[i].tcb[j] != (struct bna_tcb *)0 && (bnad->tx_info[i].tcb[j])->txq != (struct bna_txq *)0) {
        #line 829 
        int tmp_21;
        #line 830 
        int tmp_22;
        #line 831 
        int tmp_23;
        #line 832 
        int tmp_24;
        #line 833 
        int tmp_25;
        #line 828 
        tcb = bnad->tx_info[i].tcb[j];
        #line 829 
        tmp_21 = bi;
        #line 829 
        bi ++;
        #line 829 
        *(buf + (unsigned long)tmp_21) = (tcb->txq)->tx_packets;
        #line 830 
        tmp_22 = bi;
        #line 830 
        bi ++;
        #line 830 
        *(buf + (unsigned long)tmp_22) = (tcb->txq)->tx_bytes;
        #line 831 
        tmp_23 = bi;
        #line 831 
        bi ++;
        #line 831 
        *(buf + (unsigned long)tmp_23) = (unsigned long long)tcb->producer_index;
        #line 832 
        tmp_24 = bi;
        #line 832 
        bi ++;
        #line 832 
        *(buf + (unsigned long)tmp_24) = (unsigned long long)tcb->consumer_index;
        #line 833 
        tmp_25 = bi;
        #line 833 
        bi ++;
        #line 833 
        *(buf + (unsigned long)tmp_25) = (unsigned long long)*(tcb->hw_consumer_index);
      }
      #line 825 
      j ++;
    }
    #line 822 
    __Cont_1: 
              #line 822 
    i ++;
  }
  #line 837 
  return bi;
}

#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static void bnad_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *buf)
{
  #line 845 
  int i;
  #line 845 
  int j;
  #line 846 
  unsigned long flags;
  #line 847 
  struct rtnl_link_stats64 net_stats64;
  #line 848 
  u64 *stats64;
  #line 849 
  u32 bmap;
  #line 867 
  int tmp_1;
  #line 868 
  int tmp_2;
  #line 869 
  int tmp_3;
  #line 870 
  int tmp_4;
  #line 871 
  int tmp_5;
  #line 872 
  int tmp_6;
  #line 873 
  int tmp_7;
  #line 874 
  int tmp_8;
  #line 875 
  int tmp_9;
  #line 876 
  int tmp_10;
  #line 877 
  int tmp_11;
  #line 878 
  int tmp_12;
  #line 879 
  int tmp_13;
  #line 880 
  int tmp_14;
  #line 844 
  struct bnad *bnad = netdev_priv(netdev);
  #line 845 
  int bi = 0;
  #line 851 
  cif_mutex_lock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 852 
  ;
  #line 852 
  if ((unsigned int)bnad_get_stats_count_locked(netdev) != stats->n_stats) {
    #line 853 
    cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
    #line 854 
    return;
  }
  #line 861 
  cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
  #line 863 
  memset((void *)(& net_stats64),0,192UL);
  #line 864 
  bnad_netdev_qstats_fill(bnad,& net_stats64);
  #line 865 
  bnad_netdev_hwstats_fill(bnad,& net_stats64);
  #line 867 
  tmp_1 = bi;
  #line 867 
  bi ++;
  #line 867 
  *(buf + (unsigned long)tmp_1) = net_stats64.rx_packets;
  #line 868 
  tmp_2 = bi;
  #line 868 
  bi ++;
  #line 868 
  *(buf + (unsigned long)tmp_2) = net_stats64.tx_packets;
  #line 869 
  tmp_3 = bi;
  #line 869 
  bi ++;
  #line 869 
  *(buf + (unsigned long)tmp_3) = net_stats64.rx_bytes;
  #line 870 
  tmp_4 = bi;
  #line 870 
  bi ++;
  #line 870 
  *(buf + (unsigned long)tmp_4) = net_stats64.tx_bytes;
  #line 871 
  tmp_5 = bi;
  #line 871 
  bi ++;
  #line 871 
  *(buf + (unsigned long)tmp_5) = net_stats64.rx_errors;
  #line 872 
  tmp_6 = bi;
  #line 872 
  bi ++;
  #line 872 
  *(buf + (unsigned long)tmp_6) = net_stats64.tx_errors;
  #line 873 
  tmp_7 = bi;
  #line 873 
  bi ++;
  #line 873 
  *(buf + (unsigned long)tmp_7) = net_stats64.rx_dropped;
  #line 874 
  tmp_8 = bi;
  #line 874 
  bi ++;
  #line 874 
  *(buf + (unsigned long)tmp_8) = net_stats64.tx_dropped;
  #line 875 
  tmp_9 = bi;
  #line 875 
  bi ++;
  #line 875 
  *(buf + (unsigned long)tmp_9) = net_stats64.multicast;
  #line 876 
  tmp_10 = bi;
  #line 876 
  bi ++;
  #line 876 
  *(buf + (unsigned long)tmp_10) = net_stats64.collisions;
  #line 877 
  tmp_11 = bi;
  #line 877 
  bi ++;
  #line 877 
  *(buf + (unsigned long)tmp_11) = net_stats64.rx_length_errors;
  #line 878 
  tmp_12 = bi;
  #line 878 
  bi ++;
  #line 878 
  *(buf + (unsigned long)tmp_12) = net_stats64.rx_crc_errors;
  #line 879 
  tmp_13 = bi;
  #line 879 
  bi ++;
  #line 879 
  *(buf + (unsigned long)tmp_13) = net_stats64.rx_frame_errors;
  #line 880 
  tmp_14 = bi;
  #line 880 
  bi ++;
  #line 880 
  *(buf + (unsigned long)tmp_14) = net_stats64.tx_fifo_errors;
  #line 883 
  bnad->stats.drv_stats.netif_queue_stopped = (unsigned long long)netif_queue_stopped(netdev);
  #line 886 
  stats64 = (u64 *)(& bnad->stats.drv_stats);
  #line 887 
  i = 0;
  #line 887 
  while ((unsigned int)i <= 34U) {
    #line 888 
    int tmp_16;
    #line 888 
    tmp_16 = bi;
    #line 888 
    bi ++;
    #line 888 
    *(buf + (unsigned long)tmp_16) = *(stats64 + (unsigned long)i);
    #line 887 
    i ++;
  }
  #line 891 
  stats64 = (u64 *)(& (bnad->stats.bna_stats)->hw_stats);
  #line 892 
  i = 0;
  #line 892 
  while ((unsigned int)i <= 139U) {
    #line 896 
    int tmp_17;
    #line 896 
    tmp_17 = bi;
    #line 896 
    bi ++;
    #line 896 
    *(buf + (unsigned long)tmp_17) = *(stats64 + (unsigned long)i);
    #line 893 
    i ++;
  }
  #line 899 
  bmap = bnad->bna.tx_mod.rid_mask;
  #line 900 
  i = 0;
  #line 900 
  while (bmap != 0U) {
    #line 901 
    if ((bmap & 1U) != 0U) {
      #line 902 
      stats64 = (u64 *)(& (bnad->stats.bna_stats)->hw_stats.txf_stats[i]);
      #line 904 
      j = 0;
      #line 904 
      while ((unsigned int)j <= 11U) {
        #line 906 
        int tmp_18;
        #line 906 
        tmp_18 = bi;
        #line 906 
        bi ++;
        #line 906 
        *(buf + (unsigned long)tmp_18) = *(stats64 + (unsigned long)j);
        #line 904 
        j ++;
      }
    }
    #line 908 
    bmap >>= 1;
    #line 900 
    i ++;
  }
  #line 912 
  bmap = bnad->bna.rx_mod.rid_mask;
  #line 913 
  i = 0;
  #line 913 
  while (bmap != 0U) {
    #line 914 
    if ((bmap & 1U) != 0U) {
      #line 915 
      stats64 = (u64 *)(& (bnad->stats.bna_stats)->hw_stats.rxf_stats[i]);
      #line 917 
      j = 0;
      #line 917 
      while ((unsigned int)j <= 9U) {
        #line 919 
        int tmp_19;
        #line 919 
        tmp_19 = bi;
        #line 919 
        bi ++;
        #line 919 
        *(buf + (unsigned long)tmp_19) = *(stats64 + (unsigned long)j);
        #line 917 
        j ++;
      }
    }
    #line 921 
    bmap >>= 1;
    #line 913 
    i ++;
  }
  #line 925 
  bi = bnad_per_q_stats_fill(bnad,buf,bi);
  #line 927 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  #line 929 
  cif_mutex_unlock_conf_mutex_of_bnad_0(& bnad->conf_mutex);
  #line 930 
  return;
}

#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_get_sset_count(struct net_device *netdev, int sset)
{
  #line 935 
  switch (sset) {
    #line 936 
    case 1: 
            #line 936 
    ;
    #line 937 
    return bnad_get_stats_count_locked(netdev);
    #line 938 
    default: 
             #line 938 
    ;
    #line 939 
    return -95;
  }
}

#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static u32 bnad_get_flash_partition_by_offset(struct bnad *bnad, u32 offset, u32 *base_offset)
{
  #line 947 
  struct bfa_flash_attr *flash_attr;
  #line 948 
  struct bnad_iocmd_comp fcomp;
  #line 949 
  u32 i;
  #line 949 
  u32 ret;
  #line 949 
  u32 flash_part = 0U;
  #line 950 
  unsigned long flags = 0UL;
  #line 952 
  flash_attr = (struct bfa_flash_attr *)kzalloc_0(1032UL,3264U);
  #line 953 
  if (flash_attr == (struct bfa_flash_attr *)0) 
                                                #line 954 
                                                return 0U;
  #line 956 
  fcomp.bnad = bnad;
  #line 957 
  fcomp.comp_status = 0;
  #line 959 
  __init_completion(& fcomp.comp);
  #line 960 
  cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
  #line 961 
  ret = (unsigned int)bfa_nw_flash_get_attr(& bnad->bna.flash,flash_attr,
                              & bnad_cb_completion,(void *)(& fcomp));
  #line 963 
  if (ret != 0U) {
    #line 964 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
    #line 965 
    kfree((void *)flash_attr);
    #line 966 
    return 0U;
  }
  #line 968 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  #line 969 
  wait_for_completion(& fcomp.comp);
  #line 970 
  ret = (unsigned int)fcomp.comp_status;
  #line 973 
  if (ret == 0U) {
    #line 974 
    i = 0U;
    #line 974 
    while (flash_attr->npart > i) {
      #line 975 
      if (flash_attr->part[i].part_off <= offset && flash_attr->part[i].part_off + flash_attr->part[i].part_size > offset) {
        #line 978 
        flash_part = flash_attr->part[i].part_type;
        #line 979 
        *base_offset = flash_attr->part[i].part_off;
        #line 980 
        break;
      }
      #line 974 
      i ++;
    }
  }
  #line 984 
  kfree((void *)flash_attr);
  #line 985 
  return flash_part;
}

#line 989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_get_eeprom_len(struct net_device *netdev)
{
  #line 991 
  return 4194304;
}

#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 999 
  struct bnad_iocmd_comp fcomp;
  #line 998 
  struct bnad *bnad = netdev_priv(netdev);
  #line 1000 
  u32 flash_part = 0U;
  #line 1000 
  u32 base_offset = 0U;
  #line 1001 
  unsigned long flags = 0UL;
  #line 1002 
  int ret = 0;
  #line 1005 
  eeprom->magic = (unsigned int)((int)(bnad->pcidev)->vendor | ((int)(bnad->pcidev)->device << 16));
  #line 1008 
  flash_part = bnad_get_flash_partition_by_offset(bnad,eeprom->offset,& base_offset);
  #line 1010 
  if (flash_part == 0U) 
                        #line 1011 
                        return -14;
  #line 1013 
  fcomp.bnad = bnad;
  #line 1014 
  fcomp.comp_status = 0;
  #line 1016 
  __init_completion(& fcomp.comp);
  #line 1017 
  cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
  #line 1018 
  ret = (int)bfa_nw_flash_read_part(& bnad->bna.flash,flash_part,
                               (unsigned char)((int)((unsigned char)bnad->id)),
                               (void *)bytes,eeprom->len,
                               eeprom->offset - base_offset,
                               & bnad_cb_completion,(void *)(& fcomp));
  #line 1022 
  if (ret != 0) {
    #line 1023 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
    #line 1024 
    goto done;
  }
  #line 1027 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  #line 1028 
  wait_for_completion(& fcomp.comp);
  #line 1029 
  ret = fcomp.comp_status;
  #line 1030 
  done: 
        #line 1030 
  ;
  #line 1031 
  return ret;
}

#line 1035  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  #line 1039 
  struct bnad_iocmd_comp fcomp;
  #line 1038 
  struct bnad *bnad = netdev_priv(netdev);
  #line 1040 
  u32 flash_part = 0U;
  #line 1040 
  u32 base_offset = 0U;
  #line 1041 
  unsigned long flags = 0UL;
  #line 1042 
  int ret = 0;
  #line 1045 
  if (eeprom->magic != (unsigned int)((int)(bnad->pcidev)->vendor | ((int)(bnad->pcidev)->device << 16))) 
    #line 1047 
    return -22;
  #line 1050 
  flash_part = bnad_get_flash_partition_by_offset(bnad,eeprom->offset,& base_offset);
  #line 1052 
  if (flash_part == 0U) 
                        #line 1053 
                        return -14;
  #line 1055 
  fcomp.bnad = bnad;
  #line 1056 
  fcomp.comp_status = 0;
  #line 1058 
  __init_completion(& fcomp.comp);
  #line 1059 
  cif___ldv_spin_lock_bna_lock_of_bnad_0(& bnad->bna_lock);
  #line 1060 
  ret = (int)bfa_nw_flash_update_part(& bnad->bna.flash,flash_part,
                                 (unsigned char)((int)((unsigned char)bnad->id)),
                                 (void *)bytes,eeprom->len,
                                 eeprom->offset - base_offset,
                                 & bnad_cb_completion,(void *)(& fcomp));
  #line 1064 
  if (ret != 0) {
    #line 1065 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
    #line 1066 
    goto done;
  }
  #line 1069 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(& bnad->bna_lock,flags);
  #line 1070 
  wait_for_completion(& fcomp.comp);
  #line 1071 
  ret = fcomp.comp_status;
  #line 1072 
  done: 
        #line 1072 
  ;
  #line 1073 
  return ret;
}

#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static int bnad_flash_device(struct net_device *netdev, struct ethtool_flash *eflash)
{
  #line 1080 
  struct bnad_iocmd_comp fcomp;
  #line 1081 
  struct firmware *fw;
  #line 1079 
  struct bnad *bnad = netdev_priv(netdev);
  #line 1082 
  int ret = 0;
  #line 1084 
  ret = cif_request_firmware(& fw,(char *)(& eflash->data),& (bnad->pcidev)->dev);
  #line 1085 
  if (ret != 0) {
    #line 1086 
    netdev_err(netdev,(char *)"can\'t load firmware %s\n",(char *)(& eflash->data));
    #line 1087 
    goto out;
  }
  #line 1090 
  fcomp.bnad = bnad;
  #line 1091 
  fcomp.comp_status = 0;
  #line 1093 
  __init_completion(& fcomp.comp);
  #line 1094 
  cif_spin_lock_irq_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1095 
  ret = (int)bfa_nw_flash_update_part(& bnad->bna.flash,2U,
                                 (unsigned char)((int)((unsigned char)bnad->id)),
                                 (void *)fw->data,(unsigned int)fw->size,0U,
                                 & bnad_cb_completion,(void *)(& fcomp));
  #line 1098 
  if (ret != 0) {
    #line 1099 
    netdev_warn(netdev,(char *)"flash update failed with err=%d\n",ret);
    #line 1100 
    ret = -5;
    #line 1101 
    cif_spin_unlock_irq_bna_lock_of_bnad(& bnad->bna_lock);
    #line 1102 
    goto out;
  }
  #line 1105 
  cif_spin_unlock_irq_bna_lock_of_bnad(& bnad->bna_lock);
  #line 1106 
  wait_for_completion(& fcomp.comp);
  #line 1107 
  if (fcomp.comp_status != 0) {
    #line 1108 
    ret = -5;
    #line 1109 
    netdev_warn(netdev,(char *)"firmware image update failed with err=%d\n",fcomp.comp_status);
  }
  #line 1113 
  out: 
       #line 1113 
  ;
  #line 1114 
  cif_release_firmware_0(fw);
  #line 1115 
  return ret;
}

#line 1118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
static struct ethtool_ops bnad_ethtool_ops = {.get_drvinfo = & bnad_get_drvinfo, .get_wol = & bnad_get_wol, .get_link = & ethtool_op_get_link, .get_eeprom_len = & bnad_get_eeprom_len, .get_eeprom = & bnad_get_eeprom, .set_eeprom = & bnad_set_eeprom, .get_coalesce = & bnad_get_coalesce, .set_coalesce = & bnad_set_coalesce, .get_ringparam = & bnad_get_ringparam, .set_ringparam = & bnad_set_ringparam, .get_pauseparam = & bnad_get_pauseparam, .set_pauseparam = & bnad_set_pauseparam, .get_strings = & bnad_get_strings, .get_ethtool_stats = & bnad_get_ethtool_stats, .get_sset_count = & bnad_get_sset_count, .flash_device = & bnad_flash_device, .get_ts_info = & ethtool_op_get_ts_info, .get_link_ksettings = & bnad_get_link_ksettings, .set_link_ksettings = & bnad_set_link_ksettings};
#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_ethtool.c"
void bnad_set_ethtool_ops(struct net_device *netdev)
{
  #line 1143 
  netdev->ethtool_ops = & bnad_ethtool_ops;
  #line 1144 
  return;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_flash_device(struct net_device *arg0, struct ethtool_flash *arg1)
{
  #line 110 
  return bnad_flash_device(arg0,arg1);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 115 
  return bnad_get_coalesce(arg0,arg1);
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
void emg_wrapper_bnad_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 120 
  bnad_get_drvinfo(arg0,arg1);
  #line 121 
  return;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_get_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 125 
  return bnad_get_eeprom(arg0,arg1,arg2);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_get_eeprom_len(struct net_device *arg0)
{
  #line 130 
  return bnad_get_eeprom_len(arg0);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
void emg_wrapper_bnad_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 135 
  bnad_get_ethtool_stats(arg0,arg1,arg2);
  #line 136 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 140 
  return bnad_get_link_ksettings(arg0,arg1);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
void emg_wrapper_bnad_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 145 
  bnad_get_pauseparam(arg0,arg1);
  #line 146 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
void emg_wrapper_bnad_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 150 
  bnad_get_ringparam(arg0,arg1);
  #line 151 
  return;
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 155 
  return bnad_get_sset_count(arg0,arg1);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
void emg_wrapper_bnad_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 160 
  bnad_get_strings(arg0,arg1,arg2);
  #line 161 
  return;
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
void emg_wrapper_bnad_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 165 
  bnad_get_wol(arg0,arg1);
  #line 166 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 170 
  return bnad_set_coalesce(arg0,arg1);
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_set_eeprom(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  #line 175 
  return bnad_set_eeprom(arg0,arg1,arg2);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 180 
  return bnad_set_link_ksettings(arg0,arg1);
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 185 
  return bnad_set_pauseparam(arg0,arg1);
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
int emg_wrapper_bnad_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 190 
  return bnad_set_ringparam(arg0,arg1);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 219 
  ldv_clear_bit(nr,addr);
  #line 220 
  return;
}

#line 237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static size_t cif_strlen(char *s)
{
  #line 240 
  return ldv_strlen(s);
}

#line 582  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 585 
  return ldv_kzalloc(size,flags);
}

#line 910  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif___ldv_spin_lock_bna_lock_of_bnad_0(spinlock_t *lock)
{
  #line 913 
  ldv_spin_model_lock((char *)"bna_lock_of_bnad");
  #line 915 
  __ldv_spin_lock(lock);
  #line 916 
  return;
}

#line 919  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_spin_unlock_irqrestore_bna_lock_of_bnad_0(spinlock_t *lock, unsigned long flags)
{
  #line 922 
  ldv_spin_model_unlock((char *)"bna_lock_of_bnad");
  #line 924 
  spin_unlock_irqrestore_0(lock,flags);
  #line 925 
  return;
}

#line 928  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_mutex_lock_conf_mutex_of_bnad_0(struct mutex *lock)
{
  #line 931 
  ldv_mutex_model_lock(lock,(char *)"conf_mutex_of_bnad");
  #line 932 
  return;
}

#line 935  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer)
{
  #line 939 
  return emg_del_timer_sync(timer);
}

#line 943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_mutex_unlock_conf_mutex_of_bnad_0(struct mutex *lock)
{
  #line 946 
  ldv_mutex_model_unlock(lock,(char *)"conf_mutex_of_bnad");
  #line 947 
  return;
}

#line 950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 953 
  return ldv_request_firmware(fw);
}

#line 957  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_spin_lock_irq_bna_lock_of_bnad(spinlock_t *lock)
{
  #line 960 
  ldv_spin_model_lock((char *)"bna_lock_of_bnad");
  #line 962 
  spin_lock_irq(lock);
  #line 963 
  return;
}

#line 966  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_spin_unlock_irq_bna_lock_of_bnad(spinlock_t *lock)
{
  #line 969 
  ldv_spin_model_unlock((char *)"bna_lock_of_bnad");
  #line 971 
  spin_unlock_irq(lock);
  #line 972 
  return;
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_ethtool.i.aux"
static void cif_release_firmware_0(struct firmware *fw)
{
  #line 978 
  ldv_release_firmware(fw);
  #line 979 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/cna_fwimg.i.aux"
static int cif_request_firmware_0(struct firmware **fw, char *name, struct device *device);
#line 1708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1708 
void _dev_alert(struct device *, char * , ...);
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
u32 *bfa_cb_image_get_chunk(enum bfi_asic_gen asic_gen, u32 off);
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
u32 bfa_cb_image_get_size(enum bfi_asic_gen asic_gen);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
struct firmware *bfi_fw;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
static u32 *bfi_image_ct_cna;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
static u32 *bfi_image_ct2_cna;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
static u32 bfi_image_ct_cna_size;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
static u32 bfi_image_ct2_cna_size;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
static u32 *cna_read_firmware(struct pci_dev *pdev, u32 **bfi_image, u32 *bfi_image_size, char *fw_name)
{
  #line 24 
  struct firmware *fw;
  #line 25 
  u32 n;
  #line 27 
  if (cif_request_firmware_0(& fw,fw_name,& pdev->dev) != 0) {
    #line 28 
    _dev_alert(& pdev->dev,(char *)"can\'t load firmware %s\n",fw_name);
    #line 29 
    goto error;
  }
  #line 32 
  *bfi_image = (u32 *)fw->data;
  #line 33 
  *bfi_image_size = (unsigned int)(fw->size / 4UL);
  #line 34 
  bfi_fw = fw;
  #line 39 
  n = 0U;
  #line 39 
  while (*bfi_image_size > n) {
    #line 40 
    u32 *tmp_2 = *bfi_image + (unsigned long)n;
    #line 39 
    n ++;
  }
  #line 42 
  return *bfi_image;
  #line 43 
  error: 
         #line 43 
  ;
  #line 44 
  return (u32 *)0U;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
u32 *cna_get_firmware_buf(struct pci_dev *pdev)
{
  #line 50 
  if ((unsigned int)pdev->device == 34U) {
    #line 51 
    if (bfi_image_ct2_cna_size == 0U) 
                                      #line 52 
                                      cna_read_firmware(pdev,& bfi_image_ct2_cna,& bfi_image_ct2_cna_size,(char *)"ct2fw-3.2.5.1.bin");
    #line 54 
    return bfi_image_ct2_cna;
  }
  else 
    #line 55 
    if ((unsigned int)pdev->device == 20U || (unsigned int)pdev->device == 33U) {
      #line 56 
      if (bfi_image_ct_cna_size == 0U) 
                                       #line 57 
                                       cna_read_firmware(pdev,& bfi_image_ct_cna,& bfi_image_ct_cna_size,(char *)"ctfw-3.2.5.1.bin");
      #line 59 
      return bfi_image_ct_cna;
    }
  #line 62 
  return (u32 *)0U;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
u32 *bfa_cb_image_get_chunk(enum bfi_asic_gen asic_gen, u32 off)
{
  #line 68 
  switch ((unsigned int)asic_gen) {
    #line 69 
    case (unsigned int)2: 
                          #line 69 
    ;
    #line 70 
    return bfi_image_ct_cna + (unsigned long)off;
    #line 71 
    case (unsigned int)3: 
                          #line 71 
    ;
    #line 72 
    return bfi_image_ct2_cna + (unsigned long)off;
    #line 73 
    default: 
             #line 73 
    ;
    #line 74 
    return (u32 *)0U;
  }
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/cna_fwimg.c"
u32 bfa_cb_image_get_size(enum bfi_asic_gen asic_gen)
{
  #line 81 
  switch ((unsigned int)asic_gen) {
    #line 82 
    case (unsigned int)2: 
                          #line 82 
    ;
    #line 83 
    return bfi_image_ct_cna_size;
    #line 84 
    case (unsigned int)3: 
                          #line 84 
    ;
    #line 85 
    return bfi_image_ct2_cna_size;
    #line 86 
    default: 
             #line 86 
    ;
    #line 87 
    return 0U;
  }
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/cna_fwimg.i.aux"
static int cif_request_firmware_0(struct firmware **fw, char *name, struct device *device)
{
  #line 826 
  return ldv_request_firmware(fw);
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bna_tx_rx.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3207 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3209 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_move_tail(struct list_head *list, struct list_head *head)
{
  #line 213 
  __list_del_entry(list);
  #line 214 
  list_add_tail(list,head);
  #line 215 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3211 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
__inline static void bfa_wc_up(struct bfa_wc *wc)
{
  #line 75 
  (wc->wc_count) ++;
  #line 76 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
__inline static void bfa_wc_down(struct bfa_wc *wc)
{
  #line 81 
  (wc->wc_count) --;
  #line 82 
  if (wc->wc_count == 0) 
                         #line 83 
                         (*(wc->wc_resume))(wc->wc_cbarg);
  #line 84 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
__inline static void bfa_wc_init(struct bfa_wc *wc, void (*wc_resume)(void *), void *wc_cbarg)
{
  #line 90 
  wc->wc_resume = wc_resume;
  #line 91 
  wc->wc_cbarg = wc_cbarg;
  #line 92 
  wc->wc_count = 0;
  #line 93 
  bfa_wc_up(wc);
  #line 94 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
__inline static void bfa_wc_wait(struct bfa_wc *wc)
{
  #line 100 
  bfa_wc_down(wc);
  #line 101 
  return;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
#line 119 
void bfa_msgq_cmd_post(struct bfa_msgq *msgq, struct bfa_msgq_cmd_entry *cmd);
#line 121 
#line 121 
void bfa_msgq_rsp_copy(struct bfa_msgq *msgq, u8 *buf, size_t buf_len);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
__inline static struct bna_mac *bna_mac_find(struct list_head *q, u8 *addr)
{
  #line 242 
  void *__mptr;
  #line 240 
  struct bna_mac *mac;
  #line 242 
  __mptr = (void *)q->next;
  #line 242 
  mac = ((struct bna_mac *)__mptr);
  #line 242 
  while (& mac->qe != q) {
    #line 242 
    void *__mptr_0;
    #line 243 
    if ((int)ether_addr_equal((u8 *)(& mac->addr),addr) != 0) 
                                                              #line 244 
                                                              return mac;
    #line 242 
    __mptr_0 = (void *)mac->qe.next;
    #line 242 
    mac = ((struct bna_mac *)__mptr_0);
  }
  #line 245 
  return (struct bna_mac *)0;
}

#line 270 
#line 270 
struct bna_mac *bna_cam_mod_mac_get(struct list_head *head);
#line 271 
#line 271 
struct bna_mcam_handle *bna_mcam_mod_handle_get(struct bna_mcam_mod *mcam_mod);
#line 272 
#line 272 
void bna_mcam_mod_handle_put(struct bna_mcam_mod *mcam_mod, struct bna_mcam_handle *handle);
#line 283 
#line 283 
void bna_ethport_cb_rx_started(struct bna_ethport *ethport);
#line 284 
#line 284 
void bna_ethport_cb_rx_stopped(struct bna_ethport *ethport);
#line 289 
#line 3270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_tx_enet_start_rsp(struct bna_tx *tx, struct bfi_msgq_mhdr *msghdr);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_tx_enet_stop_rsp(struct bna_tx *tx, struct bfi_msgq_mhdr *msghdr);
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_bw_update_aen(struct bna_tx_mod *tx_mod);
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_init(struct bna_tx_mod *tx_mod, struct bna *bna, struct bna_res_info *res_info);
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_uninit(struct bna_tx_mod *tx_mod);
#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_start(struct bna_tx_mod *tx_mod, enum bna_tx_type type);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_stop(struct bna_tx_mod *tx_mod, enum bna_tx_type type);
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 3649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_fail(struct bna_tx_mod *tx_mod);
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 2086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rx_enet_start_rsp(struct bna_rx *rx, struct bfi_msgq_mhdr *msghdr);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rx_enet_stop_rsp(struct bna_rx *rx, struct bfi_msgq_mhdr *msghdr);
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rxf_cfg_rsp(struct bna_rxf *rxf, struct bfi_msgq_mhdr *msghdr);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rxf_mcast_add_rsp(struct bna_rxf *rxf, struct bfi_msgq_mhdr *msghdr);
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rxf_ucast_set_rsp(struct bna_rxf *rxf, struct bfi_msgq_mhdr *msghdr);
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 2023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_init(struct bna_rx_mod *rx_mod, struct bna *bna, struct bna_res_info *res_info);
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 2080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_uninit(struct bna_rx_mod *rx_mod);
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 1977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_start(struct bna_rx_mod *rx_mod, enum bna_rx_type type);
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_stop(struct bna_rx_mod *rx_mod, enum bna_rx_type type);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 2012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_fail(struct bna_rx_mod *rx_mod);
#line 378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna.h"
#line 378 
int bna_enet_mtu_get(struct bna_enet *enet);
#line 381 
#line 381 
void bna_enet_cb_tx_stopped(struct bna_enet *enet);
#line 382 
#line 382 
void bna_enet_cb_rx_stopped(struct bna_enet *enet);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_ib_coalescing_timeo_set(struct bna_ib *ib, u8 coalescing_timeo)
{
  #line 18 
  ib->coalescing_timeo = coalescing_timeo;
  #line 19 
  ib->door_bell.doorbell_ack = ((unsigned int)ib->coalescing_timeo << 16) | 2147483648U;
  #line 20 
  return;
}

#line 39 
#line 521 
static int bna_rxf_cfg_apply(struct bna_rxf *rxf);
#line 40 
#line 548 
static void bna_rxf_cfg_reset(struct bna_rxf *rxf);
#line 41 
#line 954 
static int bna_rxf_ucast_cfg_apply(struct bna_rxf *rxf);
#line 42 
#line 1037 
static int bna_rxf_promisc_cfg_apply(struct bna_rxf *rxf);
#line 43 
#line 1097 
static int bna_rxf_allmulti_cfg_apply(struct bna_rxf *rxf);
#line 44 
#line 1251 
static int bna_rxf_vlan_strip_cfg_apply(struct bna_rxf *rxf);
#line 45 
#line 991 
static int bna_rxf_ucast_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup);
#line 47 
#line 1065 
static int bna_rxf_promisc_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup);
#line 49 
#line 1122 
static int bna_rxf_allmulti_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup);
#line 52 
#line 68 
static void bna_rxf_sm_stopped(struct bna_rxf *rxf, enum bna_rxf_event event);
#line 52 
#line 62 
static void bna_rxf_sm_stopped_entry(struct bna_rxf *rxf);
#line 54 
#line 102 
static void bna_rxf_sm_cfg_wait(struct bna_rxf *rxf, enum bna_rxf_event event);
#line 54 
#line 93 
static void bna_rxf_sm_cfg_wait_entry(struct bna_rxf *rxf);
#line 56 
#line 140 
static void bna_rxf_sm_started(struct bna_rxf *rxf, enum bna_rxf_event event);
#line 56 
#line 133 
static void bna_rxf_sm_started_entry(struct bna_rxf *rxf);
#line 58 
#line 164 
static void bna_rxf_sm_last_resp_wait(struct bna_rxf *rxf, enum bna_rxf_event event);
#line 58 
#line 159 
static void bna_rxf_sm_last_resp_wait_entry(struct bna_rxf *rxf);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_stopped_entry(struct bna_rxf *rxf)
{
  #line 64 
  if (rxf->stop_cbfn != (void (*)(struct bna_rx *))0) {
    #line 64 
    void (*cbfn)(struct bna_rx *);
    #line 64 
    struct bna_rx *cbarg;
    #line 64 
    cbfn = rxf->stop_cbfn;
    #line 64 
    cbarg = rxf->stop_cbarg;
    #line 64 
    rxf->stop_cbfn = (void (*)(struct bna_rx *))0;
    #line 64 
    rxf->stop_cbarg = (struct bna_rx *)0;
    #line 64 
    (*cbfn)(cbarg);
  }
  #line 66 
  return;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_stopped(struct bna_rxf *rxf, enum bna_rxf_event event)
{
  #line 70 
  switch ((unsigned int)event) {
    #line 71 
    case (unsigned int)1: 
                          #line 71 
    ;
    #line 72 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_cfg_wait);
    #line 72 
    bna_rxf_sm_cfg_wait_entry(rxf);
    #line 73 
    break;
    #line 75 
    case (unsigned int)2: 
                          #line 75 
    ;
    #line 76 
    if (rxf->stop_cbfn != (void (*)(struct bna_rx *))0) {
      #line 76 
      void (*cbfn)(struct bna_rx *);
      #line 76 
      struct bna_rx *cbarg;
      #line 76 
      cbfn = rxf->stop_cbfn;
      #line 76 
      cbarg = rxf->stop_cbarg;
      #line 76 
      rxf->stop_cbfn = (void (*)(struct bna_rx *))0;
      #line 76 
      rxf->stop_cbarg = (struct bna_rx *)0;
      #line 76 
      (*cbfn)(cbarg);
    }
    #line 77 
    break;
    #line 79 
    case (unsigned int)3: 
                          #line 79 
    ;
    #line 81 
    break;
    #line 83 
    case (unsigned int)4: 
                          #line 83 
    ;
    #line 84 
    if (rxf->cam_fltr_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) {
      #line 84 
      void (*cbfn_0)(struct bnad *, struct bna_rx *);
      #line 84 
      struct bnad *cbarg_0;
      #line 84 
      cbfn_0 = rxf->cam_fltr_cbfn;
      #line 84 
      cbarg_0 = rxf->cam_fltr_cbarg;
      #line 84 
      rxf->cam_fltr_cbfn = (void (*)(struct bnad *, struct bna_rx *))0;
      #line 84 
      rxf->cam_fltr_cbarg = (struct bnad *)0;
      #line 84 
      (*cbfn_0)(cbarg_0,rxf->rx);
    }
    #line 85 
    break;
    #line 87 
    default: 
             #line 87 
    ;
    #line 88 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",88,(unsigned int)event);
  }
  #line 90 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_cfg_wait_entry(struct bna_rxf *rxf)
{
  #line 95 
  if (bna_rxf_cfg_apply(rxf) == 0) {
    #line 97 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_started);
    #line 97 
    bna_rxf_sm_started_entry(rxf);
  }
  #line 99 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_cfg_wait(struct bna_rxf *rxf, enum bna_rxf_event event)
{
  #line 104 
  switch ((unsigned int)event) {
    #line 105 
    case (unsigned int)2: 
                          #line 105 
    ;
    #line 106 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_last_resp_wait);
    #line 106 
    bna_rxf_sm_last_resp_wait_entry(rxf);
    #line 107 
    break;
    #line 109 
    case (unsigned int)3: 
                          #line 109 
    ;
    #line 110 
    bna_rxf_cfg_reset(rxf);
    #line 111 
    if (rxf->start_cbfn != (void (*)(struct bna_rx *))0) {
      #line 111 
      void (*cbfn)(struct bna_rx *);
      #line 111 
      struct bna_rx *cbarg;
      #line 111 
      cbfn = rxf->start_cbfn;
      #line 111 
      cbarg = rxf->start_cbarg;
      #line 111 
      rxf->start_cbfn = (void (*)(struct bna_rx *))0;
      #line 111 
      rxf->start_cbarg = (struct bna_rx *)0;
      #line 111 
      (*cbfn)(cbarg);
    }
    #line 112 
    if (rxf->cam_fltr_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) {
      #line 112 
      void (*cbfn_0)(struct bnad *, struct bna_rx *);
      #line 112 
      struct bnad *cbarg_0;
      #line 112 
      cbfn_0 = rxf->cam_fltr_cbfn;
      #line 112 
      cbarg_0 = rxf->cam_fltr_cbarg;
      #line 112 
      rxf->cam_fltr_cbfn = (void (*)(struct bnad *, struct bna_rx *))0;
      #line 112 
      rxf->cam_fltr_cbarg = (struct bnad *)0;
      #line 112 
      (*cbfn_0)(cbarg_0,rxf->rx);
    }
    #line 113 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_stopped);
    #line 113 
    bna_rxf_sm_stopped_entry(rxf);
    #line 114 
    break;
    #line 116 
    case (unsigned int)4: 
                          #line 116 
    ;
    #line 118 
    break;
    #line 120 
    case (unsigned int)7: 
                          #line 120 
    ;
    #line 121 
    if (bna_rxf_cfg_apply(rxf) == 0) {
      #line 123 
      rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_started);
      #line 123 
      bna_rxf_sm_started_entry(rxf);
    }
    #line 125 
    break;
    #line 127 
    default: 
             #line 127 
    ;
    #line 128 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",128,(unsigned int)event);
  }
  #line 130 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_started_entry(struct bna_rxf *rxf)
{
  #line 135 
  if (rxf->start_cbfn != (void (*)(struct bna_rx *))0) {
    #line 135 
    void (*cbfn)(struct bna_rx *);
    #line 135 
    struct bna_rx *cbarg;
    #line 135 
    cbfn = rxf->start_cbfn;
    #line 135 
    cbarg = rxf->start_cbarg;
    #line 135 
    rxf->start_cbfn = (void (*)(struct bna_rx *))0;
    #line 135 
    rxf->start_cbarg = (struct bna_rx *)0;
    #line 135 
    (*cbfn)(cbarg);
  }
  #line 136 
  if (rxf->cam_fltr_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) {
    #line 136 
    void (*cbfn_0)(struct bnad *, struct bna_rx *);
    #line 136 
    struct bnad *cbarg_0;
    #line 136 
    cbfn_0 = rxf->cam_fltr_cbfn;
    #line 136 
    cbarg_0 = rxf->cam_fltr_cbarg;
    #line 136 
    rxf->cam_fltr_cbfn = (void (*)(struct bnad *, struct bna_rx *))0;
    #line 136 
    rxf->cam_fltr_cbarg = (struct bnad *)0;
    #line 136 
    (*cbfn_0)(cbarg_0,rxf->rx);
  }
  #line 138 
  return;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_started(struct bna_rxf *rxf, enum bna_rxf_event event)
{
  #line 142 
  switch ((unsigned int)event) {
    #line 143 
    case (unsigned int)2: 
                          #line 143 
    ;
    #line 144 
    case (unsigned int)3: 
                          #line 144 
    ;
    #line 145 
    bna_rxf_cfg_reset(rxf);
    #line 146 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_stopped);
    #line 146 
    bna_rxf_sm_stopped_entry(rxf);
    #line 147 
    break;
    #line 149 
    case (unsigned int)4: 
                          #line 149 
    ;
    #line 150 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_cfg_wait);
    #line 150 
    bna_rxf_sm_cfg_wait_entry(rxf);
    #line 151 
    break;
    #line 153 
    default: 
             #line 153 
    ;
    #line 154 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",154,(unsigned int)event);
  }
  #line 156 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_last_resp_wait_entry(struct bna_rxf *rxf)
{
  #line 161 
  return;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_sm_last_resp_wait(struct bna_rxf *rxf, enum bna_rxf_event event)
{
  #line 166 
  switch ((unsigned int)event) {
    #line 167 
    case (unsigned int)3: 
                          #line 167 
    ;
    #line 168 
    case (unsigned int)7: 
                          #line 168 
    ;
    #line 169 
    bna_rxf_cfg_reset(rxf);
    #line 170 
    rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_stopped);
    #line 170 
    bna_rxf_sm_stopped_entry(rxf);
    #line 171 
    break;
    #line 173 
    default: 
             #line 173 
    ;
    #line 174 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",174,(unsigned int)event);
  }
  #line 176 
  return;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_ucast_req(struct bna_rxf *rxf, struct bna_mac *mac, enum bfi_enet_h2i_msgs req_type)
{
  #line 182 
  struct bfi_enet_ucast_req *req = & rxf->bfi_enet_cmd.ucast_req;
  #line 184 
  req->mh.msg_class = (unsigned char)24U;
  #line 184 
  req->mh.msg_id = (unsigned char)req_type;
  #line 184 
  req->mh.msg_token = (unsigned short)0U;
  #line 184 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 185 
  req->mh.num_entries = (unsigned short)256U;
  #line 187 
  ether_addr_copy((u8 *)(& req->mac_addr),(u8 *)(& mac->addr));
  #line 188 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 188 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 188 
  rxf->msgq_cmd.msg_size = 16UL;
  #line 188 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 190 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 191 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_mcast_add_req(struct bna_rxf *rxf, struct bna_mac *mac)
{
  #line 196 
  struct bfi_enet_mcast_add_req *req = & rxf->bfi_enet_cmd.mcast_add_req;
  #line 199 
  req->mh.msg_class = (unsigned char)24U;
  #line 199 
  req->mh.msg_id = (unsigned char)12U;
  #line 199 
  req->mh.msg_token = (unsigned short)0U;
  #line 199 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 201 
  req->mh.num_entries = (unsigned short)256U;
  #line 203 
  ether_addr_copy((u8 *)(& req->mac_addr),(u8 *)(& mac->addr));
  #line 204 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 204 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 204 
  rxf->msgq_cmd.msg_size = 16UL;
  #line 204 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 206 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 207 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_mcast_del_req(struct bna_rxf *rxf, u16 handle)
{
  #line 212 
  struct bfi_enet_mcast_del_req *req = & rxf->bfi_enet_cmd.mcast_del_req;
  #line 215 
  req->mh.msg_class = (unsigned char)24U;
  #line 215 
  req->mh.msg_id = (unsigned char)13U;
  #line 215 
  req->mh.msg_token = (unsigned short)0U;
  #line 215 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 217 
  req->mh.num_entries = (unsigned short)256U;
  #line 219 
  req->handle = __builtin_bswap16((unsigned short)((int)handle));
  #line 220 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 220 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 220 
  rxf->msgq_cmd.msg_size = 12UL;
  #line 220 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 222 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 223 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_mcast_filter_req(struct bna_rxf *rxf, enum bna_status status)
{
  #line 228 
  struct bfi_enet_enable_req *req = & rxf->bfi_enet_cmd.req;
  #line 230 
  req->mh.msg_class = (unsigned char)24U;
  #line 230 
  req->mh.msg_id = (unsigned char)14U;
  #line 230 
  req->mh.msg_token = (unsigned short)0U;
  #line 230 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 232 
  req->mh.num_entries = (unsigned short)256U;
  #line 234 
  req->enable = (unsigned char)status;
  #line 235 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 235 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 235 
  rxf->msgq_cmd.msg_size = 12UL;
  #line 235 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 237 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 238 
  return;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rx_promisc_req(struct bna_rxf *rxf, enum bna_status status)
{
  #line 243 
  struct bfi_enet_enable_req *req = & rxf->bfi_enet_cmd.req;
  #line 245 
  req->mh.msg_class = (unsigned char)24U;
  #line 245 
  req->mh.msg_id = (unsigned char)6U;
  #line 245 
  req->mh.msg_token = (unsigned short)0U;
  #line 245 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 247 
  req->mh.num_entries = (unsigned short)256U;
  #line 249 
  req->enable = (unsigned char)status;
  #line 250 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 250 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 250 
  rxf->msgq_cmd.msg_size = 12UL;
  #line 250 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 252 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 253 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rx_vlan_filter_set(struct bna_rxf *rxf, u8 block_idx)
{
  #line 259 
  int i;
  #line 260 
  int j;
  #line 258 
  struct bfi_enet_rx_vlan_req *req = & rxf->bfi_enet_cmd.vlan_req;
  #line 262 
  req->mh.msg_class = (unsigned char)24U;
  #line 262 
  req->mh.msg_id = (unsigned char)15U;
  #line 262 
  req->mh.msg_token = (unsigned short)0U;
  #line 262 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 264 
  req->mh.num_entries = (unsigned short)512U;
  #line 266 
  req->block_idx = block_idx;
  #line 267 
  i = 0;
  #line 267 
  while (i <= 15) {
    #line 268 
    j = (int)block_idx * 16 + i;
    #line 269 
    if (rxf->vlan_filter_status == (unsigned int)BNA_STATUS_T_ENABLED) 
      #line 270 
      req->bit_mask[i] = __builtin_bswap32(rxf->vlan_filter_table[j]); else 
                                                                    #line 273 
                                                                    req->bit_mask[i] = 4294967295U;
    #line 267 
    i ++;
  }
  #line 275 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 275 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 275 
  rxf->msgq_cmd.msg_size = 76UL;
  #line 275 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 277 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 278 
  return;
}

#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_vlan_strip_enable(struct bna_rxf *rxf)
{
  #line 283 
  struct bfi_enet_enable_req *req = & rxf->bfi_enet_cmd.req;
  #line 285 
  req->mh.msg_class = (unsigned char)24U;
  #line 285 
  req->mh.msg_id = (unsigned char)16U;
  #line 285 
  req->mh.msg_token = (unsigned short)0U;
  #line 285 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 287 
  req->mh.num_entries = (unsigned short)256U;
  #line 289 
  req->enable = (unsigned char)rxf->vlan_strip_status;
  #line 290 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 290 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 290 
  rxf->msgq_cmd.msg_size = 12UL;
  #line 290 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 292 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 293 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rit_cfg(struct bna_rxf *rxf)
{
  #line 298 
  struct bfi_enet_rit_req *req = & rxf->bfi_enet_cmd.rit_req;
  #line 300 
  req->mh.msg_class = (unsigned char)24U;
  #line 300 
  req->mh.msg_id = (unsigned char)3U;
  #line 300 
  req->mh.msg_token = (unsigned short)0U;
  #line 300 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 302 
  req->mh.num_entries = (unsigned short)512U;
  #line 304 
  req->size = __builtin_bswap16((unsigned short)((int)((unsigned short)rxf->rit_size)));
  #line 305 
  memcpy((void *)(& req->table[0]),(void *)rxf->rit,(unsigned long)rxf->rit_size);
  #line 306 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 306 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 306 
  rxf->msgq_cmd.msg_size = 76UL;
  #line 306 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 308 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 309 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rss_cfg(struct bna_rxf *rxf)
{
  #line 315 
  int i;
  #line 314 
  struct bfi_enet_rss_cfg_req *req = & rxf->bfi_enet_cmd.rss_req;
  #line 317 
  req->mh.msg_class = (unsigned char)24U;
  #line 317 
  req->mh.msg_id = (unsigned char)4U;
  #line 317 
  req->mh.msg_token = (unsigned short)0U;
  #line 317 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 319 
  req->mh.num_entries = (unsigned short)256U;
  #line 321 
  req->cfg.type = (unsigned char)rxf->rss_cfg.hash_type;
  #line 322 
  req->cfg.mask = rxf->rss_cfg.hash_mask;
  #line 323 
  i = 0;
  #line 323 
  while (i <= 9) {
    #line 324 
    req->cfg.key[i] = __builtin_bswap32(rxf->rss_cfg.toeplitz_hash_key[i]);
    #line 323 
    i ++;
  }
  #line 326 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 326 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 326 
  rxf->msgq_cmd.msg_size = 52UL;
  #line 326 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 328 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 329 
  return;
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rss_enable(struct bna_rxf *rxf)
{
  #line 334 
  struct bfi_enet_enable_req *req = & rxf->bfi_enet_cmd.req;
  #line 336 
  req->mh.msg_class = (unsigned char)24U;
  #line 336 
  req->mh.msg_id = (unsigned char)5U;
  #line 336 
  req->mh.msg_token = (unsigned short)0U;
  #line 336 
  req->mh.enet_id = (unsigned char)(rxf->rx)->rid;
  #line 338 
  req->mh.num_entries = (unsigned short)256U;
  #line 340 
  req->enable = (unsigned char)rxf->rss_status;
  #line 341 
  rxf->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 341 
  rxf->msgq_cmd.cbarg = (void *)0;
  #line 341 
  rxf->msgq_cmd.msg_size = 12UL;
  #line 341 
  rxf->msgq_cmd.msg_hdr = & req->mh;
  #line 343 
  bfa_msgq_cmd_post(& ((rxf->rx)->bna)->msgq,& rxf->msgq_cmd);
  #line 344 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static struct bna_mac *bna_rxf_mcmac_get(struct bna_rxf *rxf, u8 *mac_addr)
{
  #line 356 
  void *__mptr_1;
  #line 352 
  void *__mptr;
  #line 350 
  struct bna_mac *mac;
  #line 352 
  __mptr = (void *)rxf->mcast_active_q.next;
  #line 352 
  mac = ((struct bna_mac *)__mptr);
  #line 352 
  while (& mac->qe != & rxf->mcast_active_q) {
    #line 352 
    void *__mptr_0;
    #line 353 
    if ((int)ether_addr_equal((u8 *)(& mac->addr),mac_addr) != 0) 
                                                                  #line 354 
                                                                  return mac;
    #line 352 
    __mptr_0 = (void *)mac->qe.next;
    #line 352 
    mac = ((struct bna_mac *)__mptr_0);
  }
  #line 356 
  __mptr_1 = (void *)rxf->mcast_pending_del_q.next;
  #line 356 
  mac = ((struct bna_mac *)__mptr_1);
  #line 356 
  while (& mac->qe != & rxf->mcast_pending_del_q) {
    #line 356 
    void *__mptr_2;
    #line 357 
    if ((int)ether_addr_equal((u8 *)(& mac->addr),mac_addr) != 0) 
                                                                  #line 358 
                                                                  return mac;
    #line 356 
    __mptr_2 = (void *)mac->qe.next;
    #line 356 
    mac = ((struct bna_mac *)__mptr_2);
  }
  #line 360 
  return (struct bna_mac *)0;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static struct bna_mcam_handle *bna_rxf_mchandle_get(struct bna_rxf *rxf, int handle)
{
  #line 368 
  void *__mptr;
  #line 366 
  struct bna_mcam_handle *mchandle;
  #line 368 
  __mptr = (void *)rxf->mcast_handle_q.next;
  #line 368 
  mchandle = ((struct bna_mcam_handle *)__mptr);
  #line 368 
  while (& mchandle->qe != & rxf->mcast_handle_q) {
    #line 368 
    void *__mptr_0;
    #line 369 
    if (mchandle->handle == handle) 
                                    #line 370 
                                    return mchandle;
    #line 368 
    __mptr_0 = (void *)mchandle->qe.next;
    #line 368 
    mchandle = ((struct bna_mcam_handle *)__mptr_0);
  }
  #line 372 
  return (struct bna_mcam_handle *)0;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_mchandle_attach(struct bna_rxf *rxf, u8 *mac_addr, int handle)
{
  #line 378 
  struct bna_mac *mcmac;
  #line 379 
  struct bna_mcam_handle *mchandle;
  #line 381 
  mcmac = bna_rxf_mcmac_get(rxf,mac_addr);
  #line 382 
  mchandle = bna_rxf_mchandle_get(rxf,handle);
  #line 383 
  if (mchandle == (struct bna_mcam_handle *)0) {
    #line 384 
    mchandle = bna_mcam_mod_handle_get(& ((rxf->rx)->bna)->mcam_mod);
    #line 385 
    mchandle->handle = handle;
    #line 386 
    mchandle->refcnt = 0;
    #line 387 
    list_add_tail(& mchandle->qe,& rxf->mcast_handle_q);
  }
  #line 389 
  (mchandle->refcnt) ++;
  #line 390 
  mcmac->handle = mchandle;
  #line 391 
  return;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_mcast_del(struct bna_rxf *rxf, struct bna_mac *mac, enum bna_cleanup_type cleanup)
{
  #line 397 
  struct bna_mcam_handle *mchandle;
  #line 398 
  int ret = 0;
  #line 400 
  mchandle = mac->handle;
  #line 401 
  if (mchandle == (struct bna_mcam_handle *)0) 
                                               #line 402 
                                               return ret;
  #line 404 
  (mchandle->refcnt) --;
  #line 405 
  if (mchandle->refcnt == 0) {
    #line 406 
    if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
      #line 407 
      bna_bfi_mcast_del_req(rxf,(unsigned short)((int)((unsigned short)mchandle->handle)));
      #line 408 
      ret = 1;
    }
    #line 410 
    list_del(& mchandle->qe);
    #line 411 
    bna_mcam_mod_handle_put(& ((rxf->rx)->bna)->mcam_mod,mchandle);
  }
  #line 413 
  mac->handle = (struct bna_mcam_handle *)0;
  #line 415 
  return ret;
}

#line 419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_mcast_cfg_apply(struct bna_rxf *rxf)
{
  #line 422 
  int ret;
  #line 421 
  struct bna_mac *mac = (struct bna_mac *)0;
  #line 425 
  while (1) {
    #line 425 
    if (! (list_empty(& rxf->mcast_pending_del_q) == 0)) 
                                                         #line 425 
                                                         break;
    {
      #line 426 
      void *__mptr;
      #line 426 
      __mptr = (void *)rxf->mcast_pending_del_q.next;
      #line 426 
      mac = ((struct bna_mac *)__mptr);
      #line 428 
      ret = bna_rxf_mcast_del(rxf,mac,(enum bna_cleanup_type)BNA_HARD_CLEANUP);
      #line 429 
      list_move_tail(& mac->qe,& ((rxf->rx)->bna)->mcam_mod.del_q);
      #line 430 
      if (ret != 0) 
                    #line 431 
                    return ret;
    }
  }
  #line 435 
  if (list_empty(& rxf->mcast_pending_add_q) == 0) {
    #line 436 
    void *__mptr_0;
    #line 436 
    __mptr_0 = (void *)rxf->mcast_pending_add_q.next;
    #line 436 
    mac = ((struct bna_mac *)__mptr_0);
    #line 438 
    list_move_tail(& mac->qe,& rxf->mcast_active_q);
    #line 439 
    bna_bfi_mcast_add_req(rxf,mac);
    #line 440 
    return 1;
  }
  #line 443 
  return 0;
}

#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_vlan_cfg_apply(struct bna_rxf *rxf)
{
  #line 449 
  u8 vlan_pending_bitmask;
  #line 450 
  int block_idx = 0;
  #line 452 
  if ((unsigned int)rxf->vlan_pending_bitmask != 0U) {
    #line 453 
    vlan_pending_bitmask = rxf->vlan_pending_bitmask;
    #line 454 
    while (((int)vlan_pending_bitmask & 1) == 0) {
      #line 455 
      block_idx ++;
      #line 456 
      vlan_pending_bitmask = (unsigned char)((int)vlan_pending_bitmask >> 1);
    }
    #line 458 
    rxf->vlan_pending_bitmask = (unsigned char)((int)rxf->vlan_pending_bitmask & ~ ((int)((unsigned char)(1UL << block_idx))));
    #line 459 
    bna_bfi_rx_vlan_filter_set(rxf,(unsigned char)((int)((unsigned char)block_idx)));
    #line 460 
    return 1;
  }
  #line 463 
  return 0;
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_mcast_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup)
{
  #line 469 
  struct bna_mac *mac;
  #line 470 
  int ret;
  #line 473 
  while (1) {
    #line 473 
    if (! (list_empty(& rxf->mcast_pending_del_q) == 0)) 
                                                         #line 473 
                                                         break;
    {
      #line 474 
      void *__mptr;
      #line 474 
      __mptr = (void *)rxf->mcast_pending_del_q.next;
      #line 474 
      mac = ((struct bna_mac *)__mptr);
      #line 476 
      ret = bna_rxf_mcast_del(rxf,mac,cleanup);
      #line 477 
      list_move_tail(& mac->qe,& ((rxf->rx)->bna)->mcam_mod.del_q);
      #line 478 
      if (ret != 0) 
                    #line 479 
                    return ret;
    }
  }
  #line 483 
  while (1) {
    #line 483 
    if (! (list_empty(& rxf->mcast_active_q) == 0)) 
                                                    #line 483 
                                                    break;
    {
      #line 484 
      void *__mptr_0;
      #line 484 
      __mptr_0 = (void *)rxf->mcast_active_q.next;
      #line 484 
      mac = ((struct bna_mac *)__mptr_0);
      #line 486 
      list_move_tail(& mac->qe,& rxf->mcast_pending_add_q);
      #line 487 
      if (bna_rxf_mcast_del(rxf,mac,cleanup) != 0) 
                                                   #line 488 
                                                   return 1;
    }
  }
  #line 491 
  return 0;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_rss_cfg_apply(struct bna_rxf *rxf)
{
  #line 497 
  if (rxf->rss_pending != (unsigned int)0) {
    #line 498 
    if (((unsigned int)rxf->rss_pending & 1U) != 0U) {
      #line 499 
      rxf->rss_pending = (enum bna_rss_flags)((unsigned int)rxf->rss_pending & 4294967294U);
      #line 500 
      bna_bfi_rit_cfg(rxf);
      #line 501 
      return 1;
    }
    #line 504 
    if (((unsigned int)rxf->rss_pending & 2U) != 0U) {
      #line 505 
      rxf->rss_pending = (enum bna_rss_flags)((unsigned int)rxf->rss_pending & 4294967293U);
      #line 506 
      bna_bfi_rss_cfg(rxf);
      #line 507 
      return 1;
    }
    #line 510 
    if (((unsigned int)rxf->rss_pending & 4U) != 0U) {
      #line 511 
      rxf->rss_pending = (enum bna_rss_flags)((unsigned int)rxf->rss_pending & 4294967291U);
      #line 512 
      bna_bfi_rss_enable(rxf);
      #line 513 
      return 1;
    }
  }
  #line 517 
  return 0;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_cfg_apply(struct bna_rxf *rxf)
{
  #line 523 
  if (bna_rxf_ucast_cfg_apply(rxf) != 0) 
                                         #line 524 
                                         return 1;
  #line 526 
  if (bna_rxf_mcast_cfg_apply(rxf) != 0) 
                                         #line 527 
                                         return 1;
  #line 529 
  if (bna_rxf_promisc_cfg_apply(rxf) != 0) 
                                           #line 530 
                                           return 1;
  #line 532 
  if (bna_rxf_allmulti_cfg_apply(rxf) != 0) 
                                            #line 533 
                                            return 1;
  #line 535 
  if (bna_rxf_vlan_cfg_apply(rxf) != 0) 
                                        #line 536 
                                        return 1;
  #line 538 
  if (bna_rxf_vlan_strip_cfg_apply(rxf) != 0) 
                                              #line 539 
                                              return 1;
  #line 541 
  if (bna_rxf_rss_cfg_apply(rxf) != 0) 
                                       #line 542 
                                       return 1;
  #line 544 
  return 0;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_cfg_reset(struct bna_rxf *rxf)
{
  #line 550 
  bna_rxf_ucast_cfg_reset(rxf,(enum bna_cleanup_type)BNA_SOFT_CLEANUP);
  #line 551 
  bna_rxf_mcast_cfg_reset(rxf,(enum bna_cleanup_type)BNA_SOFT_CLEANUP);
  #line 552 
  bna_rxf_promisc_cfg_reset(rxf,(enum bna_cleanup_type)BNA_SOFT_CLEANUP);
  #line 553 
  bna_rxf_allmulti_cfg_reset(rxf,(enum bna_cleanup_type)BNA_SOFT_CLEANUP);
  #line 554 
  rxf->vlan_pending_bitmask = (unsigned char)255U;
  #line 554 
  rxf->vlan_strip_pending = (_Bool)1;
  #line 555 
  if (rxf->rss_status == (unsigned int)BNA_STATUS_T_ENABLED) 
                                                             #line 555 
                                                             rxf->rss_pending = (enum bna_rss_flags)7;
  #line 556 
  return;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rit_init(struct bna_rxf *rxf, int rit_size)
{
  #line 566 
  void *__mptr;
  #line 562 
  struct bna_rxp *rxp;
  #line 561 
  struct bna_rx *rx = rxf->rx;
  #line 563 
  int offset = 0;
  #line 565 
  rxf->rit_size = rit_size;
  #line 566 
  __mptr = (void *)rx->rxp_q.next;
  #line 566 
  rxp = ((struct bna_rxp *)__mptr);
  #line 566 
  while (& rxp->qe != & rx->rxp_q) {
    #line 566 
    void *__mptr_0;
    #line 567 
    *(rxf->rit + (unsigned long)offset) = (unsigned char)(rxp->cq.ccb)->id;
    #line 568 
    offset ++;
    #line 566 
    __mptr_0 = (void *)rxp->qe.next;
    #line 566 
    rxp = ((struct bna_rxp *)__mptr_0);
  }
  #line 570 
  return;
}

#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rxf_cfg_rsp(struct bna_rxf *rxf, struct bfi_msgq_mhdr *msghdr)
{
  #line 575 
  (*(rxf->fsm))((void *)rxf,7);
  #line 576 
  return;
}

#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rxf_ucast_set_rsp(struct bna_rxf *rxf, struct bfi_msgq_mhdr *msghdr)
{
  #line 583 
  void *__mptr;
  #line 583 
  __mptr = (void *)msghdr;
  #line 582 
  struct bfi_enet_rsp *rsp = ((struct bfi_enet_rsp *)__mptr);
  #line 585 
  if ((unsigned int)rsp->error != 0U) 
                                      #line 587 
                                      rxf->ucast_active_set = 0;
  #line 590 
  (*(rxf->fsm))((void *)rxf,7);
  #line 591 
  return;
}

#line 594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rxf_mcast_add_rsp(struct bna_rxf *rxf, struct bfi_msgq_mhdr *msghdr)
{
  #line 600 
  void *__mptr;
  #line 597 
  struct bfi_enet_mcast_add_req *req = & rxf->bfi_enet_cmd.mcast_add_req;
  #line 600 
  __mptr = (void *)msghdr;
  #line 599 
  struct bfi_enet_mcast_add_rsp *rsp = ((struct bfi_enet_mcast_add_rsp *)__mptr);
  #line 602 
  ;
  #line 602 
  ;
  #line 602 
  bna_rxf_mchandle_attach(rxf,(u8 *)(& req->mac_addr),(int)__builtin_bswap16((unsigned short)((int)rsp->handle)));
  #line 604 
  (*(rxf->fsm))((void *)rxf,7);
  #line 605 
  return;
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_init(struct bna_rxf *rxf, struct bna_rx *rx, struct bna_rx_config *q_config, struct bna_res_info *res_info)
{
  #line 613 
  rxf->rx = rx;
  #line 615 
  INIT_LIST_HEAD_0(& rxf->ucast_pending_add_q);
  #line 616 
  INIT_LIST_HEAD_0(& rxf->ucast_pending_del_q);
  #line 617 
  rxf->ucast_pending_set = 0;
  #line 618 
  rxf->ucast_active_set = 0;
  #line 619 
  INIT_LIST_HEAD_0(& rxf->ucast_active_q);
  #line 620 
  rxf->ucast_pending_mac = (struct bna_mac *)0;
  #line 622 
  INIT_LIST_HEAD_0(& rxf->mcast_pending_add_q);
  #line 623 
  INIT_LIST_HEAD_0(& rxf->mcast_pending_del_q);
  #line 624 
  INIT_LIST_HEAD_0(& rxf->mcast_active_q);
  #line 625 
  INIT_LIST_HEAD_0(& rxf->mcast_handle_q);
  #line 627 
  rxf->rit = (u8 *)((res_info + 14U)->res_u.mem_info.mdl)->kva;
  #line 629 
  bna_rit_init(rxf,q_config->num_paths);
  #line 631 
  rxf->rss_status = q_config->rss_status;
  #line 632 
  if (rxf->rss_status == (unsigned int)BNA_STATUS_T_ENABLED) {
    #line 633 
    rxf->rss_cfg = q_config->rss_config;
    #line 634 
    rxf->rss_pending = (enum bna_rss_flags)((unsigned int)rxf->rss_pending | 2U);
    #line 635 
    rxf->rss_pending = (enum bna_rss_flags)((unsigned int)rxf->rss_pending | 1U);
    #line 636 
    rxf->rss_pending = (enum bna_rss_flags)((unsigned int)rxf->rss_pending | 4U);
  }
  #line 639 
  rxf->vlan_filter_status = BNA_STATUS_T_DISABLED;
  #line 640 
  memset((void *)(& rxf->vlan_filter_table),0,512UL);
  #line 642 
  rxf->vlan_filter_table[0] |= 1U;
  #line 643 
  rxf->vlan_pending_bitmask = (unsigned char)255U;
  #line 645 
  rxf->vlan_strip_status = q_config->vlan_strip_status;
  #line 647 
  rxf->fsm = (void (*)(void *, int ))(& bna_rxf_sm_stopped);
  #line 647 
  bna_rxf_sm_stopped_entry(rxf);
  #line 649 
  return;
}

#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_uninit(struct bna_rxf *rxf)
{
  #line 653 
  struct bna_mac *mac;
  #line 655 
  rxf->ucast_pending_set = 0;
  #line 656 
  rxf->ucast_active_set = 0;
  #line 658 
  while (1) {
    #line 658 
    if (! (list_empty(& rxf->ucast_pending_add_q) == 0)) 
                                                         #line 658 
                                                         break;
    {
      #line 659 
      void *__mptr;
      #line 659 
      __mptr = (void *)rxf->ucast_pending_add_q.next;
      #line 659 
      mac = ((struct bna_mac *)__mptr);
      #line 661 
      list_move_tail(& mac->qe,& ((rxf->rx)->bna)->ucam_mod.free_q);
    }
  }
  #line 664 
  if (rxf->ucast_pending_mac != (struct bna_mac *)0) {
    #line 665 
    list_add_tail(& (rxf->ucast_pending_mac)->qe,& ((rxf->rx)->bna)->ucam_mod.free_q);
    #line 667 
    rxf->ucast_pending_mac = (struct bna_mac *)0;
  }
  #line 670 
  while (1) {
    #line 670 
    if (! (list_empty(& rxf->mcast_pending_add_q) == 0)) 
                                                         #line 670 
                                                         break;
    {
      #line 671 
      void *__mptr_0;
      #line 671 
      __mptr_0 = (void *)rxf->mcast_pending_add_q.next;
      #line 671 
      mac = ((struct bna_mac *)__mptr_0);
      #line 673 
      list_move_tail(& mac->qe,& ((rxf->rx)->bna)->mcam_mod.free_q);
    }
  }
  #line 676 
  rxf->rxmode_pending = (enum bna_rxmode)0;
  #line 677 
  rxf->rxmode_pending_bitmask = (enum bna_rxmode)0;
  #line 678 
  if (((rxf->rx)->bna)->promisc_rid == (rxf->rx)->rid) 
                                                       #line 679 
                                                       ((rxf->rx)->bna)->promisc_rid = -1;
  #line 680 
  if (((rxf->rx)->bna)->default_mode_rid == (rxf->rx)->rid) 
                                                            #line 681 
                                                            ((rxf->rx)->bna)->default_mode_rid = -1;
  #line 683 
  rxf->rss_pending = (enum bna_rss_flags)0;
  #line 684 
  rxf->vlan_strip_pending = (_Bool)0;
  #line 686 
  rxf->rx = (struct bna_rx *)0;
  #line 687 
  return;
}

#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_cb_rxf_started(struct bna_rx *rx)
{
  #line 692 
  (*(rx->fsm))((void *)rx,6);
  #line 693 
  return;
}

#line 696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_start(struct bna_rxf *rxf)
{
  #line 698 
  rxf->start_cbfn = & bna_rx_cb_rxf_started;
  #line 699 
  rxf->start_cbarg = rxf->rx;
  #line 700 
  (*(rxf->fsm))((void *)rxf,1);
  #line 701 
  return;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_cb_rxf_stopped(struct bna_rx *rx)
{
  #line 706 
  (*(rx->fsm))((void *)rx,7);
  #line 707 
  return;
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_stop(struct bna_rxf *rxf)
{
  #line 712 
  rxf->stop_cbfn = & bna_rx_cb_rxf_stopped;
  #line 713 
  rxf->stop_cbarg = rxf->rx;
  #line 714 
  (*(rxf->fsm))((void *)rxf,2);
  #line 715 
  return;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxf_fail(struct bna_rxf *rxf)
{
  #line 720 
  (*(rxf->fsm))((void *)rxf,3);
  #line 721 
  return;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
enum bna_cb_status bna_rx_ucast_set(struct bna_rx *rx, u8 *ucmac)
{
  #line 726 
  struct bna_rxf *rxf = & rx->rxf;
  #line 728 
  if (rxf->ucast_pending_mac == (struct bna_mac *)0) {
    #line 729 
    rxf->ucast_pending_mac = bna_cam_mod_mac_get(& ((rxf->rx)->bna)->ucam_mod.free_q);
    #line 731 
    if (rxf->ucast_pending_mac == (struct bna_mac *)0) 
                                                       #line 732 
                                                       return BNA_CB_UCAST_CAM_FULL;
  }
  #line 735 
  ether_addr_copy((u8 *)(& (rxf->ucast_pending_mac)->addr),ucmac);
  #line 736 
  rxf->ucast_pending_set = 1;
  #line 737 
  rxf->cam_fltr_cbfn = (void (*)(struct bnad *, struct bna_rx *))0;
  #line 738 
  rxf->cam_fltr_cbarg = (rx->bna)->bnad;
  #line 740 
  (*(rxf->fsm))((void *)rxf,4);
  #line 742 
  return BNA_CB_SUCCESS;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
enum bna_cb_status bna_rx_mcast_add(struct bna_rx *rx, u8 *addr, void (*cbfn)(struct bnad *, struct bna_rx *))
{
  #line 750 
  struct bna_mac *mac;
  #line 749 
  struct bna_rxf *rxf = & rx->rxf;
  #line 753 
  if (bna_mac_find(& rxf->mcast_active_q,addr) != (struct bna_mac *)0) 
    #line 753 
    goto _LOR;
  else {
    #line 753 
    if (bna_mac_find(& rxf->mcast_pending_add_q,addr) != (struct bna_mac *)0) {
      #line 753 
      _LOR: {
              #line 755 
              if (cbfn != (void (*)(struct bnad *, struct bna_rx *))0) 
                #line 756 
                (*cbfn)((rx->bna)->bnad,rx);
              #line 757 
              return BNA_CB_SUCCESS;
            }
    }
  }
  #line 760 
  mac = bna_cam_mod_mac_get(& ((rxf->rx)->bna)->mcam_mod.free_q);
  #line 761 
  if (mac == (struct bna_mac *)0) 
                                  #line 762 
                                  return BNA_CB_MCAST_LIST_FULL;
  #line 763 
  ether_addr_copy((u8 *)(& mac->addr),addr);
  #line 764 
  list_add_tail(& mac->qe,& rxf->mcast_pending_add_q);
  #line 766 
  rxf->cam_fltr_cbfn = cbfn;
  #line 767 
  rxf->cam_fltr_cbarg = (rx->bna)->bnad;
  #line 769 
  (*(rxf->fsm))((void *)rxf,4);
  #line 771 
  return BNA_CB_SUCCESS;
}

#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
enum bna_cb_status bna_rx_ucast_listset(struct bna_rx *rx, int count, u8 *uclist)
{
  #line 779 
  struct list_head list_head;
  #line 780 
  u8 *mcaddr;
  #line 781 
  struct bna_mac *mac;
  #line 781 
  struct bna_mac *del_mac;
  #line 782 
  int i;
  #line 777 
  struct bna_ucam_mod *ucam_mod = & (rx->bna)->ucam_mod;
  #line 778 
  struct bna_rxf *rxf = & rx->rxf;
  #line 785 
  while (1) {
    #line 785 
    if (! (list_empty(& rxf->ucast_pending_add_q) == 0)) 
                                                         #line 785 
                                                         break;
    {
      #line 786 
      void *__mptr;
      #line 786 
      __mptr = (void *)rxf->ucast_pending_add_q.next;
      #line 786 
      mac = ((struct bna_mac *)__mptr);
      #line 788 
      list_move_tail(& mac->qe,& ucam_mod->free_q);
    }
  }
  #line 792 
  while (1) {
    #line 792 
    if (! (list_empty(& rxf->ucast_active_q) == 0)) 
                                                    #line 792 
                                                    break;
    {
      #line 793 
      void *__mptr_0;
      #line 793 
      __mptr_0 = (void *)rxf->ucast_active_q.next;
      #line 793 
      mac = ((struct bna_mac *)__mptr_0);
      #line 795 
      del_mac = bna_cam_mod_mac_get(& ucam_mod->del_q);
      #line 796 
      ether_addr_copy((u8 *)(& del_mac->addr),(u8 *)(& mac->addr));
      #line 797 
      del_mac->handle = mac->handle;
      #line 798 
      list_add_tail(& del_mac->qe,& rxf->ucast_pending_del_q);
      #line 799 
      list_move_tail(& mac->qe,& ucam_mod->free_q);
    }
  }
  #line 803 
  INIT_LIST_HEAD_0(& list_head);
  #line 804 
  i = 0;
  #line 804 
  mcaddr = uclist;
  #line 804 
  while (i < count) {
    #line 805 
    mac = bna_cam_mod_mac_get(& ucam_mod->free_q);
    #line 806 
    if (mac == (struct bna_mac *)0) 
                                    #line 807 
                                    goto err_return;
    #line 808 
    ether_addr_copy((u8 *)(& mac->addr),mcaddr);
    #line 809 
    list_add_tail(& mac->qe,& list_head);
    #line 810 
    mcaddr += 6U;
    #line 804 
    i ++;
  }
  #line 814 
  while (1) {
    #line 814 
    if (! (list_empty(& list_head) == 0)) 
                                          #line 814 
                                          break;
    {
      #line 815 
      void *__mptr_1;
      #line 815 
      __mptr_1 = (void *)list_head.next;
      #line 815 
      mac = ((struct bna_mac *)__mptr_1);
      #line 816 
      list_move_tail(& mac->qe,& rxf->ucast_pending_add_q);
    }
  }
  #line 819 
  (*(rxf->fsm))((void *)rxf,4);
  #line 821 
  return BNA_CB_SUCCESS;
  #line 823 
  err_return: 
              #line 823 
  ;
  #line 824 
  while (1) {
    #line 824 
    if (! (list_empty(& list_head) == 0)) 
                                          #line 824 
                                          break;
    {
      #line 825 
      void *__mptr_2;
      #line 825 
      __mptr_2 = (void *)list_head.next;
      #line 825 
      mac = ((struct bna_mac *)__mptr_2);
      #line 826 
      list_move_tail(& mac->qe,& ucam_mod->free_q);
    }
  }
  #line 829 
  return BNA_CB_UCAST_CAM_FULL;
}

#line 833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
enum bna_cb_status bna_rx_mcast_listset(struct bna_rx *rx, int count, u8 *mclist)
{
  #line 837 
  struct list_head list_head;
  #line 838 
  u8 *mcaddr;
  #line 839 
  struct bna_mac *mac;
  #line 839 
  struct bna_mac *del_mac;
  #line 840 
  int i;
  #line 835 
  struct bna_mcam_mod *mcam_mod = & (rx->bna)->mcam_mod;
  #line 836 
  struct bna_rxf *rxf = & rx->rxf;
  #line 843 
  while (1) {
    #line 843 
    if (! (list_empty(& rxf->mcast_pending_add_q) == 0)) 
                                                         #line 843 
                                                         break;
    {
      #line 844 
      void *__mptr;
      #line 844 
      __mptr = (void *)rxf->mcast_pending_add_q.next;
      #line 844 
      mac = ((struct bna_mac *)__mptr);
      #line 846 
      list_move_tail(& mac->qe,& mcam_mod->free_q);
    }
  }
  #line 850 
  while (1) {
    #line 850 
    if (! (list_empty(& rxf->mcast_active_q) == 0)) 
                                                    #line 850 
                                                    break;
    {
      #line 851 
      void *__mptr_0;
      #line 851 
      __mptr_0 = (void *)rxf->mcast_active_q.next;
      #line 851 
      mac = ((struct bna_mac *)__mptr_0);
      #line 853 
      del_mac = bna_cam_mod_mac_get(& mcam_mod->del_q);
      #line 854 
      ether_addr_copy((u8 *)(& del_mac->addr),(u8 *)(& mac->addr));
      #line 855 
      del_mac->handle = mac->handle;
      #line 856 
      list_add_tail(& del_mac->qe,& rxf->mcast_pending_del_q);
      #line 857 
      mac->handle = (struct bna_mcam_handle *)0;
      #line 858 
      list_move_tail(& mac->qe,& mcam_mod->free_q);
    }
  }
  #line 862 
  INIT_LIST_HEAD_0(& list_head);
  #line 863 
  i = 0;
  #line 863 
  mcaddr = mclist;
  #line 863 
  while (i < count) {
    #line 864 
    mac = bna_cam_mod_mac_get(& mcam_mod->free_q);
    #line 865 
    if (mac == (struct bna_mac *)0) 
                                    #line 866 
                                    goto err_return;
    #line 867 
    ether_addr_copy((u8 *)(& mac->addr),mcaddr);
    #line 868 
    list_add_tail(& mac->qe,& list_head);
    #line 870 
    mcaddr += 6U;
    #line 863 
    i ++;
  }
  #line 874 
  while (1) {
    #line 874 
    if (! (list_empty(& list_head) == 0)) 
                                          #line 874 
                                          break;
    {
      #line 875 
      void *__mptr_1;
      #line 875 
      __mptr_1 = (void *)list_head.next;
      #line 875 
      mac = ((struct bna_mac *)__mptr_1);
      #line 876 
      list_move_tail(& mac->qe,& rxf->mcast_pending_add_q);
    }
  }
  #line 879 
  (*(rxf->fsm))((void *)rxf,4);
  #line 881 
  return BNA_CB_SUCCESS;
  #line 883 
  err_return: 
              #line 883 
  ;
  #line 884 
  while (1) {
    #line 884 
    if (! (list_empty(& list_head) == 0)) 
                                          #line 884 
                                          break;
    {
      #line 885 
      void *__mptr_2;
      #line 885 
      __mptr_2 = (void *)list_head.next;
      #line 885 
      mac = ((struct bna_mac *)__mptr_2);
      #line 886 
      list_move_tail(& mac->qe,& mcam_mod->free_q);
    }
  }
  #line 889 
  return BNA_CB_MCAST_LIST_FULL;
}

#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mcast_delall(struct bna_rx *rx)
{
  #line 896 
  struct bna_mac *mac;
  #line 896 
  struct bna_mac *del_mac;
  #line 895 
  struct bna_rxf *rxf = & rx->rxf;
  #line 897 
  int need_hw_config = 0;
  #line 900 
  while (1) {
    #line 900 
    if (! (list_empty(& rxf->mcast_pending_add_q) == 0)) 
                                                         #line 900 
                                                         break;
    {
      #line 901 
      void *__mptr;
      #line 901 
      __mptr = (void *)rxf->mcast_pending_add_q.next;
      #line 901 
      mac = ((struct bna_mac *)__mptr);
      #line 903 
      list_move_tail(& mac->qe,& ((rxf->rx)->bna)->mcam_mod.free_q);
    }
  }
  #line 907 
  while (1) {
    #line 907 
    if (! (list_empty(& rxf->mcast_active_q) == 0)) 
                                                    #line 907 
                                                    break;
    {
      #line 908 
      void *__mptr_0;
      #line 908 
      __mptr_0 = (void *)rxf->mcast_active_q.next;
      #line 908 
      mac = ((struct bna_mac *)__mptr_0);
      #line 910 
      list_del(& mac->qe);
      #line 911 
      del_mac = bna_cam_mod_mac_get(& ((rxf->rx)->bna)->mcam_mod.del_q);
      #line 912 
      memcpy((void *)del_mac,(void *)mac,32UL);
      #line 913 
      list_add_tail(& del_mac->qe,& rxf->mcast_pending_del_q);
      #line 914 
      mac->handle = (struct bna_mcam_handle *)0;
      #line 915 
      list_add_tail(& mac->qe,& ((rxf->rx)->bna)->mcam_mod.free_q);
      #line 916 
      need_hw_config = 1;
    }
  }
  #line 919 
  if (need_hw_config != 0) 
                           #line 920 
                           (*(rxf->fsm))((void *)rxf,4);
  #line 921 
  return;
}

#line 924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_vlan_add(struct bna_rx *rx, int vlan_id)
{
  #line 926 
  struct bna_rxf *rxf = & rx->rxf;
  #line 927 
  int index = vlan_id >> 5;
  #line 928 
  int bit = (int)(1UL << (vlan_id & 31));
  #line 929 
  int group_id = vlan_id >> 9;
  #line 931 
  rxf->vlan_filter_table[index] |= (unsigned int)bit;
  #line 932 
  if (rxf->vlan_filter_status == (unsigned int)BNA_STATUS_T_ENABLED) {
    #line 933 
    rxf->vlan_pending_bitmask = (unsigned char)((int)rxf->vlan_pending_bitmask | (int)((unsigned char)(1UL << group_id)));
    #line 934 
    (*(rxf->fsm))((void *)rxf,4);
  }
  #line 936 
  return;
}

#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_vlan_del(struct bna_rx *rx, int vlan_id)
{
  #line 941 
  struct bna_rxf *rxf = & rx->rxf;
  #line 942 
  int index = vlan_id >> 5;
  #line 943 
  int bit = (int)(1UL << (vlan_id & 31));
  #line 944 
  int group_id = vlan_id >> 9;
  #line 946 
  rxf->vlan_filter_table[index] &= (unsigned int)(~ bit);
  #line 947 
  if (rxf->vlan_filter_status == (unsigned int)BNA_STATUS_T_ENABLED) {
    #line 948 
    rxf->vlan_pending_bitmask = (unsigned char)((int)rxf->vlan_pending_bitmask | (int)((unsigned char)(1UL << group_id)));
    #line 949 
    (*(rxf->fsm))((void *)rxf,4);
  }
  #line 951 
  return;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_ucast_cfg_apply(struct bna_rxf *rxf)
{
  #line 956 
  struct bna_mac *mac = (struct bna_mac *)0;
  #line 959 
  if (list_empty(& rxf->ucast_pending_del_q) == 0) {
    #line 960 
    void *__mptr;
    #line 960 
    __mptr = (void *)rxf->ucast_pending_del_q.next;
    #line 960 
    mac = ((struct bna_mac *)__mptr);
    #line 962 
    bna_bfi_ucast_req(rxf,mac,(enum bfi_enet_h2i_msgs)BFI_ENET_H2I_MAC_UCAST_DEL_REQ);
    #line 963 
    list_move_tail(& mac->qe,& ((rxf->rx)->bna)->ucam_mod.del_q);
    #line 964 
    return 1;
  }
  #line 968 
  if (rxf->ucast_pending_set != 0) {
    #line 969 
    rxf->ucast_pending_set = 0;
    #line 970 
    ether_addr_copy((u8 *)(& rxf->ucast_active_mac.addr),(u8 *)(& (rxf->ucast_pending_mac)->addr));
    #line 972 
    rxf->ucast_active_set = 1;
    #line 973 
    bna_bfi_ucast_req(rxf,& rxf->ucast_active_mac,(enum bfi_enet_h2i_msgs)BFI_ENET_H2I_MAC_UCAST_SET_REQ);
    #line 975 
    return 1;
  }
  #line 979 
  if (list_empty(& rxf->ucast_pending_add_q) == 0) {
    #line 980 
    void *__mptr_0;
    #line 980 
    __mptr_0 = (void *)rxf->ucast_pending_add_q.next;
    #line 980 
    mac = ((struct bna_mac *)__mptr_0);
    #line 982 
    list_move_tail(& mac->qe,& rxf->ucast_active_q);
    #line 983 
    bna_bfi_ucast_req(rxf,mac,(enum bfi_enet_h2i_msgs)BFI_ENET_H2I_MAC_UCAST_ADD_REQ);
    #line 984 
    return 1;
  }
  #line 987 
  return 0;
}

#line 991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_ucast_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup)
{
  #line 993 
  struct bna_mac *mac;
  #line 996 
  while (1) {
    #line 996 
    if (! (list_empty(& rxf->ucast_pending_del_q) == 0)) 
                                                         #line 996 
                                                         break;
    {
      #line 997 
      void *__mptr;
      #line 997 
      __mptr = (void *)rxf->ucast_pending_del_q.next;
      #line 997 
      mac = ((struct bna_mac *)__mptr);
      #line 999 
      if (cleanup == (unsigned int)BNA_SOFT_CLEANUP) 
                                                     #line 1000 
                                                     list_move_tail(& mac->qe,& ((rxf->rx)->bna)->ucam_mod.del_q);
      else {
        #line 1003 
        bna_bfi_ucast_req(rxf,mac,(enum bfi_enet_h2i_msgs)BFI_ENET_H2I_MAC_UCAST_DEL_REQ);
        #line 1005 
        list_move_tail(& mac->qe,& ((rxf->rx)->bna)->ucam_mod.del_q);
        #line 1007 
        return 1;
      }
    }
  }
  #line 1012 
  while (1) {
    #line 1012 
    if (! (list_empty(& rxf->ucast_active_q) == 0)) 
                                                    #line 1012 
                                                    break;
    {
      #line 1013 
      void *__mptr_0;
      #line 1013 
      __mptr_0 = (void *)rxf->ucast_active_q.next;
      #line 1013 
      mac = ((struct bna_mac *)__mptr_0);
      #line 1015 
      list_move_tail(& mac->qe,& rxf->ucast_pending_add_q);
      #line 1016 
      if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
        #line 1017 
        bna_bfi_ucast_req(rxf,mac,(enum bfi_enet_h2i_msgs)BFI_ENET_H2I_MAC_UCAST_DEL_REQ);
        #line 1019 
        return 1;
      }
    }
  }
  #line 1023 
  if (rxf->ucast_active_set != 0) {
    #line 1024 
    rxf->ucast_pending_set = 1;
    #line 1025 
    rxf->ucast_active_set = 0;
    #line 1026 
    if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
      #line 1027 
      bna_bfi_ucast_req(rxf,& rxf->ucast_active_mac,(enum bfi_enet_h2i_msgs)BFI_ENET_H2I_MAC_UCAST_CLR_REQ);
      #line 1029 
      return 1;
    }
  }
  #line 1033 
  return 0;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_promisc_cfg_apply(struct bna_rxf *rxf)
{
  #line 1039 
  struct bna *bna = (rxf->rx)->bna;
  #line 1042 
  if (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) != 0U) {
    #line 1045 
    rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967294U);
    #line 1045 
    rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967294U);
    #line 1047 
    rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active | 1U);
    #line 1048 
    bna_bfi_rx_promisc_req(rxf,(enum bna_status)BNA_STATUS_T_ENABLED);
    #line 1049 
    return 1;
  }
  else 
    #line 1050 
    if (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) == 0U) {
      #line 1053 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967294U);
      #line 1053 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967294U);
      #line 1055 
      rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active & 4294967294U);
      #line 1056 
      bna->promisc_rid = -1;
      #line 1057 
      bna_bfi_rx_promisc_req(rxf,(enum bna_status)BNA_STATUS_T_DISABLED);
      #line 1058 
      return 1;
    }
  #line 1061 
  return 0;
}

#line 1065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_promisc_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup)
{
  #line 1067 
  struct bna *bna = (rxf->rx)->bna;
  #line 1070 
  if (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) == 0U) {
    #line 1072 
    rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967294U);
    #line 1072 
    rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967294U);
    #line 1074 
    rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active & 4294967294U);
    #line 1075 
    bna->promisc_rid = -1;
    #line 1076 
    if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
      #line 1077 
      bna_bfi_rx_promisc_req(rxf,(enum bna_status)BNA_STATUS_T_DISABLED);
      #line 1078 
      return 1;
    }
  }
  #line 1083 
  if (((unsigned int)rxf->rxmode_active & 1U) != 0U) {
    #line 1084 
    rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask | 1U);
    #line 1084 
    rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending | 1U);
    #line 1086 
    rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active & 4294967294U);
    #line 1087 
    if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
      #line 1088 
      bna_bfi_rx_promisc_req(rxf,(enum bna_status)BNA_STATUS_T_DISABLED);
      #line 1089 
      return 1;
    }
  }
  #line 1093 
  return 0;
}

#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_allmulti_cfg_apply(struct bna_rxf *rxf)
{
  #line 1100 
  if (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) != 0U) {
    #line 1103 
    rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967291U);
    #line 1103 
    rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967291U);
    #line 1105 
    rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active | 4U);
    #line 1106 
    bna_bfi_mcast_filter_req(rxf,(enum bna_status)BNA_STATUS_T_DISABLED);
    #line 1107 
    return 1;
  }
  else 
    #line 1108 
    if (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) == 0U) {
      #line 1111 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967291U);
      #line 1111 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967291U);
      #line 1113 
      rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active & 4294967291U);
      #line 1114 
      bna_bfi_mcast_filter_req(rxf,(enum bna_status)BNA_STATUS_T_ENABLED);
      #line 1115 
      return 1;
    }
  #line 1118 
  return 0;
}

#line 1122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_allmulti_cfg_reset(struct bna_rxf *rxf, enum bna_cleanup_type cleanup)
{
  #line 1125 
  if (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) == 0U) {
    #line 1127 
    rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967291U);
    #line 1127 
    rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967291U);
    #line 1129 
    rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active & 4294967291U);
    #line 1130 
    if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
      #line 1131 
      bna_bfi_mcast_filter_req(rxf,(enum bna_status)BNA_STATUS_T_ENABLED);
      #line 1132 
      return 1;
    }
  }
  #line 1137 
  if (((unsigned int)rxf->rxmode_active & 4U) != 0U) {
    #line 1138 
    rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask | 4U);
    #line 1138 
    rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending | 4U);
    #line 1140 
    rxf->rxmode_active = (enum bna_rxmode)((unsigned int)rxf->rxmode_active & 4294967291U);
    #line 1141 
    if (cleanup == (unsigned int)BNA_HARD_CLEANUP) {
      #line 1142 
      bna_bfi_mcast_filter_req(rxf,(enum bna_status)BNA_STATUS_T_ENABLED);
      #line 1143 
      return 1;
    }
  }
  #line 1147 
  return 0;
}

#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_promisc_enable(struct bna_rxf *rxf)
{
  #line 1153 
  struct bna *bna = (rxf->rx)->bna;
  #line 1154 
  int ret = 0;
  #line 1156 
  if (! (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) != 0U || ((unsigned int)rxf->rxmode_active & 1U) != 0U)) 
    #line 1160 
    if (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) == 0U) {
      #line 1163 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967294U);
      #line 1163 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967294U);
    }
    else {
      #line 1167 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask | 1U);
      #line 1167 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending | 1U);
      #line 1169 
      bna->promisc_rid = (rxf->rx)->rid;
      #line 1170 
      ret = 1;
    }
  #line 1173 
  return ret;
}

#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_promisc_disable(struct bna_rxf *rxf)
{
  #line 1179 
  struct bna *bna = (rxf->rx)->bna;
  #line 1180 
  int ret = 0;
  #line 1182 
  if (! (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) == 0U || ((unsigned int)rxf->rxmode_active & 1U) == 0U)) 
    #line 1186 
    if (((unsigned int)rxf->rxmode_pending_bitmask & 1U) != 0U && ((unsigned int)rxf->rxmode_pending & 1U) != 0U) {
      #line 1189 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967294U);
      #line 1189 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967294U);
      #line 1191 
      bna->promisc_rid = -1;
    }
    else 
      #line 1192 
      if (((unsigned int)rxf->rxmode_active & 1U) != 0U) {
        #line 1194 
        rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask | 1U);
        #line 1194 
        rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967294U);
        #line 1196 
        ret = 1;
      }
  #line 1199 
  return ret;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_allmulti_enable(struct bna_rxf *rxf)
{
  #line 1205 
  int ret = 0;
  #line 1207 
  if (! (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) != 0U || ((unsigned int)rxf->rxmode_active & 4U) != 0U)) 
    #line 1211 
    if (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) == 0U) {
      #line 1214 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967291U);
      #line 1214 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967291U);
    }
    else {
      #line 1218 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask | 4U);
      #line 1218 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending | 4U);
      #line 1220 
      ret = 1;
    }
  #line 1223 
  return ret;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_allmulti_disable(struct bna_rxf *rxf)
{
  #line 1229 
  int ret = 0;
  #line 1231 
  if (! (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) == 0U || ((unsigned int)rxf->rxmode_active & 4U) == 0U)) 
    #line 1235 
    if (((unsigned int)rxf->rxmode_pending_bitmask & 4U) != 0U && ((unsigned int)rxf->rxmode_pending & 4U) != 0U) {
      #line 1238 
      rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask & 4294967291U);
      #line 1238 
      rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967291U);
    }
    else 
      #line 1240 
      if (((unsigned int)rxf->rxmode_active & 4U) != 0U) {
        #line 1242 
        rxf->rxmode_pending_bitmask = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending_bitmask | 4U);
        #line 1242 
        rxf->rxmode_pending = (enum bna_rxmode)((unsigned int)rxf->rxmode_pending & 4294967291U);
        #line 1244 
        ret = 1;
      }
  #line 1247 
  return ret;
}

#line 1251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rxf_vlan_strip_cfg_apply(struct bna_rxf *rxf)
{
  #line 1253 
  if ((int)rxf->vlan_strip_pending != 0) {
    #line 1254 
    rxf->vlan_strip_pending = (_Bool)0;
    #line 1255 
    bna_bfi_vlan_strip_enable(rxf);
    #line 1256 
    return 1;
  }
  #line 1259 
  return 0;
}

#line 1301 
#line 1613 
static void bna_bfi_rx_enet_start(struct bna_rx *rx);
#line 1302 
#line 1729 
static void bna_rx_enet_stop(struct bna_rx *rx);
#line 1303 
#line 1930 
static void bna_rx_mod_cb_rx_stopped(void *arg, struct bna_rx *rx);
#line 1305 
#line 1331 
static void bna_rx_sm_stopped(struct bna_rx *rx, enum bna_rx_event event);
#line 1305 
#line 1326 
static void bna_rx_sm_stopped_entry(struct bna_rx *rx);
#line 1307 
#line 1383 
static void bna_rx_sm_start_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1307 
#line 1353 
static void bna_rx_sm_start_wait_entry(struct bna_rx *rx);
#line 1309 
#line 1450 
static void bna_rx_sm_start_stop_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1309 
#line 1445 
static void bna_rx_sm_start_stop_wait_entry(struct bna_rx *rx);
#line 1311 
#line 1504 
static void bna_rx_sm_rxf_start_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1311 
#line 1405 
static void bna_rx_sm_rxf_start_wait_entry(struct bna_rx *rx);
#line 1313 
#line 1481 
static void bna_rx_sm_started(struct bna_rx *rx, enum bna_rx_event event);
#line 1313 
#line 1468 
static void bna_rx_sm_started_entry(struct bna_rx *rx);
#line 1315 
#line 1417 
static void bna_rx_sm_rxf_stop_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1315 
#line 1412 
static void bna_rx_sm_rxf_stop_wait_entry(struct bna_rx *rx);
#line 1317 
#line 1364 
static void bna_rx_sm_stop_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1317 
#line 1359 
static void bna_rx_sm_stop_wait_entry(struct bna_rx *rx);
#line 1319 
#line 1535 
static void bna_rx_sm_cleanup_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1319 
#line 1530 
static void bna_rx_sm_cleanup_wait_entry(struct bna_rx *rx);
#line 1321 
#line 1559 
static void bna_rx_sm_failed(struct bna_rx *rx, enum bna_rx_event event);
#line 1321 
#line 1554 
static void bna_rx_sm_failed_entry(struct bna_rx *rx);
#line 1323 
#line 1591 
static void bna_rx_sm_quiesce_wait(struct bna_rx *rx, enum bna_rx_event event);
#line 1323 
#line 1586 
static void bna_rx_sm_quiesce_wait_entry(struct bna_rx *rx);
#line 1326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_stopped_entry(struct bna_rx *rx)
{
  #line 1328 
  if (rx->stop_cbfn != (void (*)(void *, struct bna_rx *))0) {
    #line 1328 
    void (*cbfn)(void *, struct bna_rx *);
    #line 1328 
    void *cbarg;
    #line 1328 
    cbfn = rx->stop_cbfn;
    #line 1328 
    cbarg = rx->stop_cbarg;
    #line 1328 
    rx->stop_cbfn = (void (*)(void *, struct bna_rx *))0;
    #line 1328 
    rx->stop_cbarg = (void *)0;
    #line 1328 
    (*cbfn)(cbarg,rx);
  }
  #line 1330 
  return;
}

#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_stopped(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1334 
  switch ((unsigned int)event) {
    #line 1335 
    case (unsigned int)1: 
                          #line 1335 
    ;
    #line 1336 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_start_wait);
    #line 1336 
    bna_rx_sm_start_wait_entry(rx);
    #line 1337 
    break;
    #line 1339 
    case (unsigned int)2: 
                          #line 1339 
    ;
    #line 1340 
    if (rx->stop_cbfn != (void (*)(void *, struct bna_rx *))0) {
      #line 1340 
      void (*cbfn)(void *, struct bna_rx *);
      #line 1340 
      void *cbarg;
      #line 1340 
      cbfn = rx->stop_cbfn;
      #line 1340 
      cbarg = rx->stop_cbarg;
      #line 1340 
      rx->stop_cbfn = (void (*)(void *, struct bna_rx *))0;
      #line 1340 
      rx->stop_cbarg = (void *)0;
      #line 1340 
      (*cbfn)(cbarg,rx);
    }
    #line 1341 
    break;
    #line 1343 
    case (unsigned int)3: 
                          #line 1343 
    ;
    #line 1345 
    break;
    #line 1347 
    default: 
             #line 1347 
    ;
    #line 1348 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1348,(unsigned int)event);
    #line 1349 
    break;
  }
  #line 1351 
  return;
}

#line 1353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_start_wait_entry(struct bna_rx *rx)
{
  #line 1355 
  bna_bfi_rx_enet_start(rx);
  #line 1356 
  return;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_stop_wait_entry(struct bna_rx *rx)
{
  #line 1361 
  return;
}

#line 1364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_stop_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1366 
  switch ((unsigned int)event) {
    #line 1367 
    case (unsigned int)3: 
                          #line 1367 
    ;
    #line 1368 
    case (unsigned int)5: 
                          #line 1368 
    ;
    #line 1369 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_cleanup_wait);
    #line 1369 
    bna_rx_sm_cleanup_wait_entry(rx);
    #line 1370 
    (*(rx->rx_cleanup_cbfn))((rx->bna)->bnad,rx);
    #line 1371 
    break;
    #line 1373 
    case (unsigned int)4: 
                          #line 1373 
    ;
    #line 1374 
    bna_rx_enet_stop(rx);
    #line 1375 
    break;
    #line 1377 
    default: 
             #line 1377 
    ;
    #line 1378 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1378,(unsigned int)event);
    #line 1379 
    break;
  }
  #line 1381 
  return;
}

#line 1383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_start_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1386 
  switch ((unsigned int)event) {
    #line 1387 
    case (unsigned int)2: 
                          #line 1387 
    ;
    #line 1388 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_start_stop_wait);
    #line 1388 
    bna_rx_sm_start_stop_wait_entry(rx);
    #line 1389 
    break;
    #line 1391 
    case (unsigned int)3: 
                          #line 1391 
    ;
    #line 1392 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_stopped);
    #line 1392 
    bna_rx_sm_stopped_entry(rx);
    #line 1393 
    break;
    #line 1395 
    case (unsigned int)4: 
                          #line 1395 
    ;
    #line 1396 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_rxf_start_wait);
    #line 1396 
    bna_rx_sm_rxf_start_wait_entry(rx);
    #line 1397 
    break;
    #line 1399 
    default: 
             #line 1399 
    ;
    #line 1400 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1400,(unsigned int)event);
    #line 1401 
    break;
  }
  #line 1403 
  return;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_rxf_start_wait_entry(struct bna_rx *rx)
{
  #line 1407 
  (*(rx->rx_post_cbfn))((rx->bna)->bnad,rx);
  #line 1408 
  bna_rxf_start(& rx->rxf);
  #line 1409 
  return;
}

#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_rxf_stop_wait_entry(struct bna_rx *rx)
{
  #line 1414 
  return;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_rxf_stop_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1419 
  switch ((unsigned int)event) {
    #line 1420 
    case (unsigned int)3: 
                          #line 1420 
    ;
    #line 1421 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_cleanup_wait);
    #line 1421 
    bna_rx_sm_cleanup_wait_entry(rx);
    #line 1422 
    bna_rxf_fail(& rx->rxf);
    #line 1423 
    if (rx->rx_stall_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) 
      #line 1423 
      (*(rx->rx_stall_cbfn))((rx->bna)->bnad,rx);
    #line 1424 
    (*(rx->rx_cleanup_cbfn))((rx->bna)->bnad,rx);
    #line 1425 
    break;
    #line 1427 
    case (unsigned int)6: 
                          #line 1427 
    ;
    #line 1428 
    bna_rxf_stop(& rx->rxf);
    #line 1429 
    break;
    #line 1431 
    case (unsigned int)7: 
                          #line 1431 
    ;
    #line 1432 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_stop_wait);
    #line 1432 
    bna_rx_sm_stop_wait_entry(rx);
    #line 1433 
    if (rx->rx_stall_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) 
      #line 1433 
      (*(rx->rx_stall_cbfn))((rx->bna)->bnad,rx);
    #line 1434 
    bna_rx_enet_stop(rx);
    #line 1435 
    break;
    #line 1437 
    default: 
             #line 1437 
    ;
    #line 1438 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1438,(unsigned int)event);
    #line 1439 
    break;
  }
  #line 1441 
  return;
}

#line 1445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_start_stop_wait_entry(struct bna_rx *rx)
{
  #line 1447 
  return;
}

#line 1450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_start_stop_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1452 
  switch ((unsigned int)event) {
    #line 1453 
    case (unsigned int)3: 
                          #line 1453 
    ;
    #line 1454 
    case (unsigned int)5: 
                          #line 1454 
    ;
    #line 1455 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_stopped);
    #line 1455 
    bna_rx_sm_stopped_entry(rx);
    #line 1456 
    break;
    #line 1458 
    case (unsigned int)4: 
                          #line 1458 
    ;
    #line 1459 
    bna_rx_enet_stop(rx);
    #line 1460 
    break;
    #line 1462 
    default: 
             #line 1462 
    ;
    #line 1463 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1463,(unsigned int)event);
  }
  #line 1465 
  return;
}

#line 1468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_started_entry(struct bna_rx *rx)
{
  #line 1474 
  void *__mptr;
  #line 1470 
  struct bna_rxp *rxp;
  #line 1471 
  int is_regular = rx->type == (unsigned int)BNA_RX_T_REGULAR;
  #line 1474 
  __mptr = (void *)rx->rxp_q.next;
  #line 1474 
  rxp = ((struct bna_rxp *)__mptr);
  #line 1474 
  while (& rxp->qe != & rx->rxp_q) {
    #line 1474 
    void *__mptr_0;
    {
      #line 1475 
      u32 intx_mask;
      #line 1475 
      struct bna_ib *ib = & rxp->cq.ib;
      #line 1475 
      if (ib->intr_type == (unsigned int)BNA_INTR_T_INTX) {
        #line 1475 
        intx_mask = readl((rx->bna)->regs.fn_int_mask);
        #line 1475 
        writel(4294967295U,(rx->bna)->regs.fn_int_mask);
        #line 1475 
        intx_mask = (unsigned int)(~ ib->intr_vector) & intx_mask;
        #line 1475 
        writel(intx_mask,(rx->bna)->regs.fn_int_mask);
      }
      #line 1475 
      ib->door_bell.doorbell_ack = (unsigned int)((int)ib->coalescing_timeo << 16) | 2147483648U;
      #line 1475 
      if (is_regular != 0) 
                           #line 1475 
                           writel(ib->door_bell.doorbell_ack,ib->door_bell.doorbell_addr);
    }
    #line 1474 
    __mptr_0 = (void *)rxp->qe.next;
    #line 1474 
    rxp = ((struct bna_rxp *)__mptr_0);
  }
  #line 1477 
  bna_ethport_cb_rx_started(& (rx->bna)->ethport);
  #line 1478 
  return;
}

#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_started(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1483 
  switch ((unsigned int)event) {
    #line 1484 
    case (unsigned int)2: 
                          #line 1484 
    ;
    #line 1485 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_rxf_stop_wait);
    #line 1485 
    bna_rx_sm_rxf_stop_wait_entry(rx);
    #line 1486 
    bna_ethport_cb_rx_stopped(& (rx->bna)->ethport);
    #line 1487 
    bna_rxf_stop(& rx->rxf);
    #line 1488 
    break;
    #line 1490 
    case (unsigned int)3: 
                          #line 1490 
    ;
    #line 1491 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_failed);
    #line 1491 
    bna_rx_sm_failed_entry(rx);
    #line 1492 
    bna_ethport_cb_rx_stopped(& (rx->bna)->ethport);
    #line 1493 
    bna_rxf_fail(& rx->rxf);
    #line 1494 
    if (rx->rx_stall_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) 
      #line 1494 
      (*(rx->rx_stall_cbfn))((rx->bna)->bnad,rx);
    #line 1495 
    (*(rx->rx_cleanup_cbfn))((rx->bna)->bnad,rx);
    #line 1496 
    break;
    #line 1498 
    default: 
             #line 1498 
    ;
    #line 1499 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1499,(unsigned int)event);
    #line 1500 
    break;
  }
  #line 1502 
  return;
}

#line 1504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_rxf_start_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1507 
  switch ((unsigned int)event) {
    #line 1508 
    case (unsigned int)2: 
                          #line 1508 
    ;
    #line 1509 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_rxf_stop_wait);
    #line 1509 
    bna_rx_sm_rxf_stop_wait_entry(rx);
    #line 1510 
    break;
    #line 1512 
    case (unsigned int)3: 
                          #line 1512 
    ;
    #line 1513 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_failed);
    #line 1513 
    bna_rx_sm_failed_entry(rx);
    #line 1514 
    bna_rxf_fail(& rx->rxf);
    #line 1515 
    if (rx->rx_stall_cbfn != (void (*)(struct bnad *, struct bna_rx *))0) 
      #line 1515 
      (*(rx->rx_stall_cbfn))((rx->bna)->bnad,rx);
    #line 1516 
    (*(rx->rx_cleanup_cbfn))((rx->bna)->bnad,rx);
    #line 1517 
    break;
    #line 1519 
    case (unsigned int)6: 
                          #line 1519 
    ;
    #line 1520 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_started);
    #line 1520 
    bna_rx_sm_started_entry(rx);
    #line 1521 
    break;
    #line 1523 
    default: 
             #line 1523 
    ;
    #line 1524 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1524,(unsigned int)event);
    #line 1525 
    break;
  }
  #line 1527 
  return;
}

#line 1530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_cleanup_wait_entry(struct bna_rx *rx)
{
  #line 1532 
  return;
}

#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_cleanup_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1537 
  switch ((unsigned int)event) {
    #line 1538 
    case (unsigned int)3: 
                          #line 1538 
    ;
    #line 1539 
    case (unsigned int)7: 
                          #line 1539 
    ;
    #line 1541 
    break;
    #line 1543 
    case (unsigned int)8: 
                          #line 1543 
    ;
    #line 1544 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_stopped);
    #line 1544 
    bna_rx_sm_stopped_entry(rx);
    #line 1545 
    break;
    #line 1547 
    default: 
             #line 1547 
    ;
    #line 1548 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1548,(unsigned int)event);
    #line 1549 
    break;
  }
  #line 1551 
  return;
}

#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_failed_entry(struct bna_rx *rx)
{
  #line 1556 
  return;
}

#line 1559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_failed(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1561 
  switch ((unsigned int)event) {
    #line 1562 
    case (unsigned int)1: 
                          #line 1562 
    ;
    #line 1563 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_quiesce_wait);
    #line 1563 
    bna_rx_sm_quiesce_wait_entry(rx);
    #line 1564 
    break;
    #line 1566 
    case (unsigned int)2: 
                          #line 1566 
    ;
    #line 1567 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_cleanup_wait);
    #line 1567 
    bna_rx_sm_cleanup_wait_entry(rx);
    #line 1568 
    break;
    #line 1570 
    case (unsigned int)3: 
                          #line 1570 
    ;
    #line 1571 
    case (unsigned int)6: 
                          #line 1571 
    ;
    #line 1572 
    case (unsigned int)7: 
                          #line 1572 
    ;
    #line 1574 
    break;
    #line 1576 
    case (unsigned int)8: 
                          #line 1576 
    ;
    #line 1577 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_stopped);
    #line 1577 
    bna_rx_sm_stopped_entry(rx);
    #line 1578 
    break;
    #line 1580 
    default: 
             #line 1580 
    ;
    #line 1581 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1581,(unsigned int)event);
    #line 1582 
    break;
  }
  #line 1584 
  return;
}

#line 1586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_quiesce_wait_entry(struct bna_rx *rx)
{
  #line 1588 
  return;
}

#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_sm_quiesce_wait(struct bna_rx *rx, enum bna_rx_event event)
{
  #line 1593 
  switch ((unsigned int)event) {
    #line 1594 
    case (unsigned int)2: 
                          #line 1594 
    ;
    #line 1595 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_cleanup_wait);
    #line 1595 
    bna_rx_sm_cleanup_wait_entry(rx);
    #line 1596 
    break;
    #line 1598 
    case (unsigned int)3: 
                          #line 1598 
    ;
    #line 1599 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_failed);
    #line 1599 
    bna_rx_sm_failed_entry(rx);
    #line 1600 
    break;
    #line 1602 
    case (unsigned int)8: 
                          #line 1602 
    ;
    #line 1603 
    rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_start_wait);
    #line 1603 
    bna_rx_sm_start_wait_entry(rx);
    #line 1604 
    break;
    #line 1606 
    default: 
             #line 1606 
    ;
    #line 1607 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",1607,(unsigned int)event);
    #line 1608 
    break;
  }
  #line 1610 
  return;
}

#line 1613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rx_enet_start(struct bna_rx *rx)
{
  #line 1618 
  int i;
  #line 1615 
  struct bfi_enet_rx_cfg_req *cfg_req = & rx->bfi_enet_cmd.cfg_req;
  #line 1616 
  struct bna_rxp *rxp = (struct bna_rxp *)0;
  #line 1617 
  struct bna_rxq *q0 = (struct bna_rxq *)0;
  #line 1617 
  struct bna_rxq *q1 = (struct bna_rxq *)0;
  #line 1620 
  cfg_req->mh.msg_class = (unsigned char)24U;
  #line 1620 
  cfg_req->mh.msg_id = (unsigned char)1U;
  #line 1620 
  cfg_req->mh.msg_token = (unsigned short)0U;
  #line 1620 
  cfg_req->mh.enet_id = (unsigned char)rx->rid;
  #line 1622 
  cfg_req->mh.num_entries = (unsigned short)5376U;
  #line 1625 
  cfg_req->rx_cfg.frame_size = (unsigned short)bna_enet_mtu_get(& (rx->bna)->enet);
  #line 1626 
  cfg_req->num_queue_sets = (unsigned char)rx->num_paths;
  #line 1627 
  i = 0;
  #line 1627 
  while (rx->num_paths > i) {
    #line 1628 
    if (rxp != (struct bna_rxp *)0) {
      #line 1628 
      void *__mptr;
      #line 1628 
      __mptr = (void *)rxp->qe.next;
      #line 1628 
      rxp = ((struct bna_rxp *)__mptr);
    }
    else {
      #line 1629 
      void *__mptr_0;
      #line 1629 
      __mptr_0 = (void *)rx->rxp_q.next;
      #line 1628 
      rxp = ((struct bna_rxp *)__mptr_0);
    }
    #line 1630 
    switch ((unsigned int)rxp->type) {
      #line 1630 
      case (unsigned int)1: 
                            #line 1630 
      ;
      #line 1630 
      q0 = rxp->rxq.single.only;
      #line 1630 
      q1 = (struct bna_rxq *)0;
      #line 1630 
      break;
      #line 1630 
      case (unsigned int)2: 
                            #line 1630 
      ;
      #line 1630 
      q0 = rxp->rxq.slr.large;
      #line 1630 
      q1 = rxp->rxq.slr.small;
      #line 1630 
      break;
      #line 1630 
      case (unsigned int)3: 
                            #line 1630 
      ;
      #line 1630 
      q0 = rxp->rxq.hds.data;
      #line 1630 
      q1 = rxp->rxq.hds.hdr;
      #line 1630 
      break;
    }
    #line 1631 
    switch ((unsigned int)rxp->type) {
      #line 1632 
      case (unsigned int)2: 
                            #line 1632 
      ;
      #line 1633 
      case (unsigned int)3: 
                            #line 1633 
      ;
      {
        #line 1635 
        struct bna_dma_addr cur_q_addr = *((struct bna_dma_addr *)q1->qpt.kv_qpt_ptr);
        #line 1635 
        cfg_req->q_cfg[i].qs.q.pg_tbl.a32.addr_lo = q1->qpt.hw_qpt_ptr.lsb;
        #line 1635 
        cfg_req->q_cfg[i].qs.q.pg_tbl.a32.addr_hi = q1->qpt.hw_qpt_ptr.msb;
        #line 1635 
        cfg_req->q_cfg[i].qs.q.first_entry.a32.addr_lo = cur_q_addr.lsb;
        #line 1635 
        cfg_req->q_cfg[i].qs.q.first_entry.a32.addr_hi = cur_q_addr.msb;
        #line 1635 
        cfg_req->q_cfg[i].qs.q.pages = __builtin_bswap16((unsigned short)((int)((unsigned short)q1->qpt.page_count)));
        #line 1635 
        cfg_req->q_cfg[i].qs.q.page_sz = __builtin_bswap16((unsigned short)((int)((unsigned short)q1->qpt.page_size)));
      }
      #line 1637 
      cfg_req->q_cfg[i].qs.rx_buffer_size = __builtin_bswap16((unsigned short)((int)((unsigned short)q1->buffer_size)));
      #line 1641 
      case (unsigned int)1: 
                            #line 1641 
      ;
      {
        #line 1643 
        struct bna_dma_addr cur_q_addr_0 = *((struct bna_dma_addr *)q0->qpt.kv_qpt_ptr);
        #line 1643 
        cfg_req->q_cfg[i].ql.q.pg_tbl.a32.addr_lo = q0->qpt.hw_qpt_ptr.lsb;
        #line 1643 
        cfg_req->q_cfg[i].ql.q.pg_tbl.a32.addr_hi = q0->qpt.hw_qpt_ptr.msb;
        #line 1643 
        cfg_req->q_cfg[i].ql.q.first_entry.a32.addr_lo = cur_q_addr_0.lsb;
        #line 1643 
        cfg_req->q_cfg[i].ql.q.first_entry.a32.addr_hi = cur_q_addr_0.msb;
        #line 1643 
        cfg_req->q_cfg[i].ql.q.pages = __builtin_bswap16((unsigned short)((int)((unsigned short)q0->qpt.page_count)));
        #line 1643 
        cfg_req->q_cfg[i].ql.q.page_sz = __builtin_bswap16((unsigned short)((int)((unsigned short)q0->qpt.page_size)));
      }
      #line 1645 
      if (q0->multi_buffer != (unsigned int)BNA_STATUS_T_DISABLED) 
                                                                   #line 1651 
                                                                   cfg_req->rx_cfg.multi_buffer = (unsigned char)1U; else 
                                                                    #line 1654 
                                                                    q0->buffer_size = bna_enet_mtu_get(& (rx->bna)->enet);
      #line 1656 
      cfg_req->q_cfg[i].ql.rx_buffer_size = __builtin_bswap16((unsigned short)((int)((unsigned short)q0->buffer_size)));
      #line 1658 
      break;
      #line 1660 
      default: 
               #line 1660 
      ;
      #line 1662 
      ldv_inline_asm();
      #line 1663 
      ldv_inline_asm();
      #line 1664 
      ldv_inline_asm();
      #line 1661 
      ;
    }
    {
      #line 1664 
      struct bna_dma_addr cur_q_addr_1 = *((struct bna_dma_addr *)rxp->cq.qpt.kv_qpt_ptr);
      #line 1664 
      cfg_req->q_cfg[i].cq.q.pg_tbl.a32.addr_lo = rxp->cq.qpt.hw_qpt_ptr.lsb;
      #line 1664 
      cfg_req->q_cfg[i].cq.q.pg_tbl.a32.addr_hi = rxp->cq.qpt.hw_qpt_ptr.msb;
      #line 1664 
      cfg_req->q_cfg[i].cq.q.first_entry.a32.addr_lo = cur_q_addr_1.lsb;
      #line 1664 
      cfg_req->q_cfg[i].cq.q.first_entry.a32.addr_hi = cur_q_addr_1.msb;
      #line 1664 
      cfg_req->q_cfg[i].cq.q.pages = __builtin_bswap16((unsigned short)((int)((unsigned short)rxp->cq.qpt.page_count)));
      #line 1664 
      cfg_req->q_cfg[i].cq.q.page_sz = __builtin_bswap16((unsigned short)((int)((unsigned short)rxp->cq.qpt.page_size)));
    }
    #line 1667 
    cfg_req->q_cfg[i].ib.index_addr.a32.addr_lo = rxp->cq.ib.ib_seg_host_addr.lsb;
    #line 1669 
    cfg_req->q_cfg[i].ib.index_addr.a32.addr_hi = rxp->cq.ib.ib_seg_host_addr.msb;
    #line 1671 
    cfg_req->q_cfg[i].ib.intr.msix_index = __builtin_bswap16((unsigned short)((int)((unsigned short)rxp->cq.ib.intr_vector)));
    #line 1627 
    i ++;
  }
  #line 1675 
  cfg_req->ib_cfg.int_pkt_dma = (unsigned char)0U;
  #line 1676 
  cfg_req->ib_cfg.int_enabled = (unsigned char)1U;
  #line 1677 
  cfg_req->ib_cfg.int_pkt_enabled = (unsigned char)0U;
  #line 1678 
  cfg_req->ib_cfg.continuous_coalescing = (unsigned char)0U;
  #line 1679 
  cfg_req->ib_cfg.msix = (unsigned char)(rxp->cq.ib.intr_type == (unsigned int)BNA_INTR_T_MSIX);
  #line 1682 
  cfg_req->ib_cfg.coalescing_timeout = __builtin_bswap32((unsigned int)rxp->cq.ib.coalescing_timeo);
  #line 1684 
  cfg_req->ib_cfg.inter_pkt_timeout = __builtin_bswap32((unsigned int)rxp->cq.ib.interpkt_timeo);
  #line 1686 
  cfg_req->ib_cfg.inter_pkt_count = (unsigned char)rxp->cq.ib.interpkt_count;
  #line 1688 
  switch ((unsigned int)rxp->type) {
    #line 1689 
    case (unsigned int)2: 
                          #line 1689 
    ;
    #line 1690 
    cfg_req->rx_cfg.rxq_type = (unsigned char)2U;
    #line 1691 
    break;
    #line 1693 
    case (unsigned int)3: 
                          #line 1693 
    ;
    #line 1694 
    cfg_req->rx_cfg.rxq_type = (unsigned char)3U;
    #line 1695 
    cfg_req->rx_cfg.hds.type = (unsigned char)rx->hds_cfg.hdr_type;
    #line 1696 
    cfg_req->rx_cfg.hds.force_offset = (unsigned char)rx->hds_cfg.forced_offset;
    #line 1697 
    cfg_req->rx_cfg.hds.max_header_size = (unsigned char)rx->hds_cfg.forced_offset;
    #line 1698 
    break;
    #line 1700 
    case (unsigned int)1: 
                          #line 1700 
    ;
    #line 1701 
    cfg_req->rx_cfg.rxq_type = (unsigned char)1U;
    #line 1702 
    break;
    #line 1704 
    default: 
             #line 1704 
    ;
    #line 1706 
    ldv_inline_asm();
    #line 1707 
    ldv_inline_asm();
    #line 1708 
    ldv_inline_asm();
    #line 1705 
    ;
  }
  #line 1707 
  cfg_req->rx_cfg.strip_vlan = (unsigned char)rx->rxf.vlan_strip_status;
  #line 1709 
  rx->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 1709 
  rx->msgq_cmd.cbarg = (void *)0;
  #line 1709 
  rx->msgq_cmd.msg_size = 1324UL;
  #line 1709 
  rx->msgq_cmd.msg_hdr = & cfg_req->mh;
  #line 1711 
  bfa_msgq_cmd_post(& (rx->bna)->msgq,& rx->msgq_cmd);
  #line 1712 
  return;
}

#line 1715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_rx_enet_stop(struct bna_rx *rx)
{
  #line 1717 
  struct bfi_enet_req *req = & rx->bfi_enet_cmd.req;
  #line 1719 
  req->mh.msg_class = (unsigned char)24U;
  #line 1719 
  req->mh.msg_id = (unsigned char)2U;
  #line 1719 
  req->mh.msg_token = (unsigned short)0U;
  #line 1719 
  req->mh.enet_id = (unsigned char)rx->rid;
  #line 1721 
  req->mh.num_entries = (unsigned short)256U;
  #line 1723 
  rx->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 1723 
  rx->msgq_cmd.cbarg = (void *)0;
  #line 1723 
  rx->msgq_cmd.msg_size = 8UL;
  #line 1723 
  rx->msgq_cmd.msg_hdr = & req->mh;
  #line 1725 
  bfa_msgq_cmd_post(& (rx->bna)->msgq,& rx->msgq_cmd);
  #line 1726 
  return;
}

#line 1729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_enet_stop(struct bna_rx *rx)
{
  #line 1734 
  void *__mptr;
  #line 1731 
  struct bna_rxp *rxp;
  #line 1734 
  __mptr = (void *)rx->rxp_q.next;
  #line 1734 
  rxp = ((struct bna_rxp *)__mptr);
  #line 1734 
  while (& rxp->qe != & rx->rxp_q) {
    #line 1734 
    void *__mptr_0;
    {
      #line 1735 
      u32 intx_mask;
      #line 1735 
      struct bna_ib *ib = & rxp->cq.ib;
      #line 1735 
      writel(1073741824U,ib->door_bell.doorbell_addr);
      #line 1735 
      if (ib->intr_type == (unsigned int)BNA_INTR_T_INTX) {
        #line 1735 
        intx_mask = readl((rx->bna)->regs.fn_int_mask);
        #line 1735 
        writel(4294967295U,(rx->bna)->regs.fn_int_mask);
        #line 1735 
        intx_mask = (unsigned int)ib->intr_vector | intx_mask;
        #line 1735 
        writel(intx_mask,(rx->bna)->regs.fn_int_mask);
      }
    }
    #line 1734 
    __mptr_0 = (void *)rxp->qe.next;
    #line 1734 
    rxp = ((struct bna_rxp *)__mptr_0);
  }
  #line 1737 
  bna_bfi_rx_enet_stop(rx);
  #line 1738 
  return;
}

#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static int bna_rx_res_check(struct bna_rx_mod *rx_mod, struct bna_rx_config *rx_cfg)
{
  #line 1743 
  if ((rx_mod->rx_free_count == 0 || rx_mod->rxp_free_count == 0) || rx_mod->rxq_free_count == 0) 
    #line 1746 
    return 0;
  #line 1748 
  if (rx_cfg->rxp_type == (unsigned int)BNA_RXP_SINGLE) {
    #line 1749 
    if (rx_mod->rxp_free_count < rx_cfg->num_paths || rx_mod->rxq_free_count < rx_cfg->num_paths) 
      #line 1751 
      return 0;
  }
  else 
    #line 1753 
    if (rx_mod->rxp_free_count < rx_cfg->num_paths || rx_mod->rxq_free_count < rx_cfg->num_paths * 2) 
      #line 1755 
      return 0;
  #line 1758 
  return 1;
}

#line 1762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static struct bna_rxq *bna_rxq_get(struct bna_rx_mod *rx_mod)
{
  #line 1766 
  void *__mptr;
  #line 1764 
  struct bna_rxq *rxq = (struct bna_rxq *)0;
  #line 1766 
  __mptr = (void *)rx_mod->rxq_free_q.next;
  #line 1766 
  rxq = ((struct bna_rxq *)__mptr);
  #line 1767 
  list_del(& rxq->qe);
  #line 1768 
  (rx_mod->rxq_free_count) --;
  #line 1770 
  return rxq;
}

#line 1774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxq_put(struct bna_rx_mod *rx_mod, struct bna_rxq *rxq)
{
  #line 1776 
  list_add_tail(& rxq->qe,& rx_mod->rxq_free_q);
  #line 1777 
  (rx_mod->rxq_free_count) ++;
  #line 1778 
  return;
}

#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static struct bna_rxp *bna_rxp_get(struct bna_rx_mod *rx_mod)
{
  #line 1785 
  void *__mptr;
  #line 1783 
  struct bna_rxp *rxp = (struct bna_rxp *)0;
  #line 1785 
  __mptr = (void *)rx_mod->rxp_free_q.next;
  #line 1785 
  rxp = ((struct bna_rxp *)__mptr);
  #line 1786 
  list_del(& rxp->qe);
  #line 1787 
  (rx_mod->rxp_free_count) --;
  #line 1789 
  return rxp;
}

#line 1793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxp_put(struct bna_rx_mod *rx_mod, struct bna_rxp *rxp)
{
  #line 1795 
  list_add_tail(& rxp->qe,& rx_mod->rxp_free_q);
  #line 1796 
  (rx_mod->rxp_free_count) ++;
  #line 1797 
  return;
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static struct bna_rx *bna_rx_get(struct bna_rx_mod *rx_mod, enum bna_rx_type type)
{
  #line 1802 
  struct bna_rx *rx = (struct bna_rx *)0;
  #line 1804 
  if ((long)(list_empty(& rx_mod->rx_free_q) != 0) != 0L) {
    #line 1805 
    ldv_inline_asm();
    #line 1806 
    ldv_inline_asm();
    #line 1807 
    ldv_inline_asm();
    #line 1804 
    ;
  }
  #line 1805 
  if (type == (unsigned int)BNA_RX_T_REGULAR) {
    #line 1806 
    void *__mptr;
    #line 1806 
    __mptr = (void *)rx_mod->rx_free_q.next;
    #line 1806 
    rx = ((struct bna_rx *)__mptr);
  }
  else {
    #line 1808 
    void *__mptr_0;
    #line 1808 
    __mptr_0 = (void *)rx_mod->rx_free_q.prev;
    #line 1808 
    rx = ((struct bna_rx *)__mptr_0);
  }
  #line 1810 
  (rx_mod->rx_free_count) --;
  #line 1811 
  list_move_tail(& rx->qe,& rx_mod->rx_active_q);
  #line 1812 
  rx->type = type;
  #line 1814 
  return rx;
}

#line 1818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_put(struct bna_rx_mod *rx_mod, struct bna_rx *rx)
{
  #line 1820 
  struct list_head *qe;
  #line 1822 
  qe = rx_mod->rx_free_q.prev;
  #line 1822 
  while (& rx_mod->rx_free_q != qe) {
    #line 1823 
    if (((struct bna_rx *)qe)->rid < rx->rid) 
                                              #line 1824 
                                              break;
    #line 1822 
    qe = qe->prev;
  }
  #line 1826 
  list_add(& rx->qe,qe);
  #line 1827 
  (rx_mod->rx_free_count) ++;
  #line 1828 
  return;
}

#line 1831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxp_add_rxqs(struct bna_rxp *rxp, struct bna_rxq *q0, struct bna_rxq *q1)
{
  #line 1834 
  switch ((unsigned int)rxp->type) {
    #line 1835 
    case (unsigned int)1: 
                          #line 1835 
    ;
    #line 1836 
    rxp->rxq.single.only = q0;
    #line 1837 
    rxp->rxq.single.reserved = (struct bna_rxq *)0;
    #line 1838 
    break;
    #line 1839 
    case (unsigned int)2: 
                          #line 1839 
    ;
    #line 1840 
    rxp->rxq.slr.large = q0;
    #line 1841 
    rxp->rxq.slr.small = q1;
    #line 1842 
    break;
    #line 1843 
    case (unsigned int)3: 
                          #line 1843 
    ;
    #line 1844 
    rxp->rxq.hds.data = q0;
    #line 1845 
    rxp->rxq.hds.hdr = q1;
    #line 1846 
    break;
    #line 1847 
    default: 
             #line 1847 
    ;
    #line 1848 
    break;
  }
  #line 1850 
  return;
}

#line 1853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxq_qpt_setup(struct bna_rxq *rxq, struct bna_rxp *rxp, u32 page_count, u32 page_size, struct bna_mem_descr *qpt_mem, struct bna_mem_descr *swqpt_mem, struct bna_mem_descr *page_mem)
{
  #line 1861 
  u8 *kva;
  #line 1862 
  u64 dma;
  #line 1863 
  struct bna_dma_addr bna_dma;
  #line 1864 
  int i;
  #line 1866 
  rxq->qpt.hw_qpt_ptr.lsb = qpt_mem->dma.lsb;
  #line 1867 
  rxq->qpt.hw_qpt_ptr.msb = qpt_mem->dma.msb;
  #line 1868 
  rxq->qpt.kv_qpt_ptr = qpt_mem->kva;
  #line 1869 
  rxq->qpt.page_count = page_count;
  #line 1870 
  rxq->qpt.page_size = page_size;
  #line 1872 
  (rxq->rcb)->sw_qpt = (void **)swqpt_mem->kva;
  #line 1873 
  (rxq->rcb)->sw_q = page_mem->kva;
  #line 1875 
  kva = (u8 *)page_mem->kva;
  #line 1876 
  dma = ((unsigned long long)__builtin_bswap32(page_mem->dma.msb) << 32) | (unsigned long long)__builtin_bswap32(page_mem->dma.lsb);
  #line 1878 
  i = 0;
  #line 1878 
  while (rxq->qpt.page_count > (unsigned int)i) {
    #line 1879 
    *((rxq->rcb)->sw_qpt + (unsigned long)i) = (void *)kva;
    #line 1880 
    kva += 4096UL;
    {
      #line 1882 
      u64 tmp_addr = __builtin_bswap64((unsigned long)dma);
      #line 1882 
      bna_dma.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
      #line 1882 
      bna_dma.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
    }
    #line 1883 
    ((struct bna_dma_addr *)rxq->qpt.kv_qpt_ptr + (unsigned long)i)->lsb = bna_dma.lsb;
    #line 1885 
    ((struct bna_dma_addr *)rxq->qpt.kv_qpt_ptr + (unsigned long)i)->msb = bna_dma.msb;
    #line 1887 
    dma += 4096ULL;
    #line 1878 
    i ++;
  }
  #line 1889 
  return;
}

#line 1892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rxp_cqpt_setup(struct bna_rxp *rxp, u32 page_count, u32 page_size, struct bna_mem_descr *qpt_mem, struct bna_mem_descr *swqpt_mem, struct bna_mem_descr *page_mem)
{
  #line 1899 
  u8 *kva;
  #line 1900 
  u64 dma;
  #line 1901 
  struct bna_dma_addr bna_dma;
  #line 1902 
  int i;
  #line 1904 
  rxp->cq.qpt.hw_qpt_ptr.lsb = qpt_mem->dma.lsb;
  #line 1905 
  rxp->cq.qpt.hw_qpt_ptr.msb = qpt_mem->dma.msb;
  #line 1906 
  rxp->cq.qpt.kv_qpt_ptr = qpt_mem->kva;
  #line 1907 
  rxp->cq.qpt.page_count = page_count;
  #line 1908 
  rxp->cq.qpt.page_size = page_size;
  #line 1910 
  (rxp->cq.ccb)->sw_qpt = (void **)swqpt_mem->kva;
  #line 1911 
  (rxp->cq.ccb)->sw_q = page_mem->kva;
  #line 1913 
  kva = (u8 *)page_mem->kva;
  #line 1914 
  dma = ((unsigned long long)__builtin_bswap32(page_mem->dma.msb) << 32) | (unsigned long long)__builtin_bswap32(page_mem->dma.lsb);
  #line 1916 
  i = 0;
  #line 1916 
  while (rxp->cq.qpt.page_count > (unsigned int)i) {
    #line 1917 
    *((rxp->cq.ccb)->sw_qpt + (unsigned long)i) = (void *)kva;
    #line 1918 
    kva += 4096UL;
    {
      #line 1920 
      u64 tmp_addr = __builtin_bswap64((unsigned long)dma);
      #line 1920 
      bna_dma.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
      #line 1920 
      bna_dma.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
    }
    #line 1921 
    ((struct bna_dma_addr *)rxp->cq.qpt.kv_qpt_ptr + (unsigned long)i)->lsb = bna_dma.lsb;
    #line 1923 
    ((struct bna_dma_addr *)rxp->cq.qpt.kv_qpt_ptr + (unsigned long)i)->msb = bna_dma.msb;
    #line 1925 
    dma += 4096ULL;
    #line 1916 
    i ++;
  }
  #line 1927 
  return;
}

#line 1930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_mod_cb_rx_stopped(void *arg, struct bna_rx *rx)
{
  #line 1932 
  struct bna_rx_mod *rx_mod = (struct bna_rx_mod *)arg;
  #line 1934 
  bfa_wc_down(& rx_mod->rx_stop_wc);
  #line 1935 
  return;
}

#line 1938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_mod_cb_rx_stopped_all(void *arg)
{
  #line 1940 
  struct bna_rx_mod *rx_mod = (struct bna_rx_mod *)arg;
  #line 1942 
  if (rx_mod->stop_cbfn != (void (*)(struct bna_enet *))0) 
                                                           #line 1943 
                                                           (*(rx_mod->stop_cbfn))(& (rx_mod->bna)->enet);
  #line 1944 
  rx_mod->stop_cbfn = (void (*)(struct bna_enet *))0;
  #line 1945 
  return;
}

#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_start(struct bna_rx *rx)
{
  #line 1950 
  rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags | 1U);
  #line 1951 
  if (((unsigned int)rx->rx_flags & 2U) != 0U) 
                                               #line 1952 
                                               (*(rx->fsm))((void *)rx,1);
  #line 1953 
  return;
}

#line 1956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_stop(struct bna_rx *rx)
{
  #line 1958 
  rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags & 4294967294U);
  #line 1959 
  if (rx->fsm == (void (*)(void *, int ))(& bna_rx_sm_stopped)) 
                                                                #line 1960 
                                                                bna_rx_mod_cb_rx_stopped((void *)(& (rx->bna)->rx_mod),rx);
  else {
    #line 1962 
    rx->stop_cbfn = & bna_rx_mod_cb_rx_stopped;
    #line 1963 
    rx->stop_cbarg = (void *)(& (rx->bna)->rx_mod);
    #line 1964 
    (*(rx->fsm))((void *)rx,2);
  }
  #line 1966 
  return;
}

#line 1969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_rx_fail(struct bna_rx *rx)
{
  #line 1972 
  rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags & 4294967294U);
  #line 1973 
  (*(rx->fsm))((void *)rx,3);
  #line 1974 
  return;
}

#line 1977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_start(struct bna_rx_mod *rx_mod, enum bna_rx_type type)
{
  #line 1985 
  void *__mptr;
  #line 1979 
  struct bna_rx *rx;
  #line 1981 
  rx_mod->flags = (enum bna_rx_mod_flags)((unsigned int)rx_mod->flags | 1U);
  #line 1982 
  if (type == (unsigned int)BNA_RX_T_LOOPBACK) 
                                               #line 1983 
                                               rx_mod->flags = (enum bna_rx_mod_flags)((unsigned int)rx_mod->flags | 2U);
  #line 1985 
  __mptr = (void *)rx_mod->rx_active_q.next;
  #line 1985 
  rx = ((struct bna_rx *)__mptr);
  #line 1985 
  while (& rx->qe != & rx_mod->rx_active_q) {
    #line 1985 
    void *__mptr_0;
    #line 1986 
    if (rx->type == type) 
                          #line 1987 
                          bna_rx_start(rx);
    #line 1985 
    __mptr_0 = (void *)rx->qe.next;
    #line 1985 
    rx = ((struct bna_rx *)__mptr_0);
  }
  #line 1988 
  return;
}

#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_stop(struct bna_rx_mod *rx_mod, enum bna_rx_type type)
{
  #line 2002 
  void *__mptr;
  #line 1993 
  struct bna_rx *rx;
  #line 1995 
  rx_mod->flags = (enum bna_rx_mod_flags)((unsigned int)rx_mod->flags & 4294967294U);
  #line 1996 
  rx_mod->flags = (enum bna_rx_mod_flags)((unsigned int)rx_mod->flags & 4294967293U);
  #line 1998 
  rx_mod->stop_cbfn = & bna_enet_cb_rx_stopped;
  #line 2000 
  bfa_wc_init(& rx_mod->rx_stop_wc,& bna_rx_mod_cb_rx_stopped_all,(void *)rx_mod);
  #line 2002 
  __mptr = (void *)rx_mod->rx_active_q.next;
  #line 2002 
  rx = ((struct bna_rx *)__mptr);
  #line 2002 
  while (& rx->qe != & rx_mod->rx_active_q) {
    #line 2002 
    void *__mptr_0;
    #line 2003 
    if (rx->type == type) {
      #line 2004 
      bfa_wc_up(& rx_mod->rx_stop_wc);
      #line 2005 
      bna_rx_stop(rx);
    }
    #line 2002 
    __mptr_0 = (void *)rx->qe.next;
    #line 2002 
    rx = ((struct bna_rx *)__mptr_0);
  }
  #line 2008 
  bfa_wc_wait(& rx_mod->rx_stop_wc);
  #line 2009 
  return;
}

#line 2012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_fail(struct bna_rx_mod *rx_mod)
{
  #line 2019 
  void *__mptr;
  #line 2014 
  struct bna_rx *rx;
  #line 2016 
  rx_mod->flags = (enum bna_rx_mod_flags)((unsigned int)rx_mod->flags & 4294967294U);
  #line 2017 
  rx_mod->flags = (enum bna_rx_mod_flags)((unsigned int)rx_mod->flags & 4294967293U);
  #line 2019 
  __mptr = (void *)rx_mod->rx_active_q.next;
  #line 2019 
  rx = ((struct bna_rx *)__mptr);
  #line 2019 
  while (& rx->qe != & rx_mod->rx_active_q) {
    #line 2019 
    void *__mptr_0;
    #line 2020 
    bna_rx_fail(rx);
    #line 2019 
    __mptr_0 = (void *)rx->qe.next;
    #line 2019 
    rx = ((struct bna_rx *)__mptr_0);
  }
  #line 2021 
  return;
}

#line 2023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_init(struct bna_rx_mod *rx_mod, struct bna *bna, struct bna_res_info *res_info)
{
  #line 2026 
  int index;
  #line 2027 
  struct bna_rx *rx_ptr;
  #line 2028 
  struct bna_rxp *rxp_ptr;
  #line 2029 
  struct bna_rxq *rxq_ptr;
  #line 2031 
  rx_mod->bna = bna;
  #line 2032 
  rx_mod->flags = (enum bna_rx_mod_flags)0;
  #line 2034 
  rx_mod->rx = (struct bna_rx *)((res_info + 2U)->res_u.mem_info.mdl)->kva;
  #line 2036 
  rx_mod->rxp = (struct bna_rxp *)((res_info + 3U)->res_u.mem_info.mdl)->kva;
  #line 2038 
  rx_mod->rxq = (struct bna_rxq *)((res_info + 4U)->res_u.mem_info.mdl)->kva;
  #line 2042 
  INIT_LIST_HEAD_0(& rx_mod->rx_free_q);
  #line 2043 
  rx_mod->rx_free_count = 0;
  #line 2044 
  INIT_LIST_HEAD_0(& rx_mod->rxq_free_q);
  #line 2045 
  rx_mod->rxq_free_count = 0;
  #line 2046 
  INIT_LIST_HEAD_0(& rx_mod->rxp_free_q);
  #line 2047 
  rx_mod->rxp_free_count = 0;
  #line 2048 
  INIT_LIST_HEAD_0(& rx_mod->rx_active_q);
  #line 2051 
  index = 0;
  #line 2051 
  while (bna->ioceth.attr.num_rxp > index) {
    #line 2052 
    rx_ptr = rx_mod->rx + (unsigned long)index;
    #line 2054 
    INIT_LIST_HEAD_0(& rx_ptr->rxp_q);
    #line 2055 
    rx_ptr->bna = (struct bna *)0;
    #line 2056 
    rx_ptr->rid = index;
    #line 2057 
    rx_ptr->stop_cbfn = (void (*)(void *, struct bna_rx *))0;
    #line 2058 
    rx_ptr->stop_cbarg = (void *)0;
    #line 2060 
    list_add_tail(& rx_ptr->qe,& rx_mod->rx_free_q);
    #line 2061 
    (rx_mod->rx_free_count) ++;
    #line 2051 
    index ++;
  }
  #line 2065 
  index = 0;
  #line 2065 
  while (bna->ioceth.attr.num_rxp > index) {
    #line 2066 
    rxp_ptr = rx_mod->rxp + (unsigned long)index;
    #line 2067 
    list_add_tail(& rxp_ptr->qe,& rx_mod->rxp_free_q);
    #line 2068 
    (rx_mod->rxp_free_count) ++;
    #line 2065 
    index ++;
  }
  #line 2072 
  index = 0;
  #line 2072 
  while (bna->ioceth.attr.num_rxp * 2 > index) {
    #line 2073 
    rxq_ptr = rx_mod->rxq + (unsigned long)index;
    #line 2074 
    list_add_tail(& rxq_ptr->qe,& rx_mod->rxq_free_q);
    #line 2075 
    (rx_mod->rxq_free_count) ++;
    #line 2072 
    index ++;
  }
  #line 2077 
  return;
}

#line 2080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_mod_uninit(struct bna_rx_mod *rx_mod)
{
  #line 2082 
  rx_mod->bna = (struct bna *)0;
  #line 2083 
  return;
}

#line 2086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rx_enet_start_rsp(struct bna_rx *rx, struct bfi_msgq_mhdr *msghdr)
{
  #line 2098 
  void *__mptr;
  #line 2091 
  int i;
  #line 2088 
  struct bfi_enet_rx_cfg_rsp *cfg_rsp = & rx->bfi_enet_cmd.cfg_rsp;
  #line 2089 
  struct bna_rxp *rxp = (struct bna_rxp *)0;
  #line 2090 
  struct bna_rxq *q0 = (struct bna_rxq *)0;
  #line 2090 
  struct bna_rxq *q1 = (struct bna_rxq *)0;
  #line 2093 
  bfa_msgq_rsp_copy(& (rx->bna)->msgq,(u8 *)cfg_rsp,268UL);
  #line 2096 
  rx->hw_id = (int)cfg_rsp->hw_id;
  #line 2098 
  i = 0;
  #line 2098 
  __mptr = (void *)rx->rxp_q.next;
  #line 2098 
  rxp = ((struct bna_rxp *)__mptr);
  #line 2098 
  while (rx->num_paths > i) {
    #line 2099 
    void *__mptr_0;
    {
      #line 2100 
      switch ((unsigned int)rxp->type) {
        #line 2100 
        case (unsigned int)1: 
                              #line 2100 
        ;
        #line 2100 
        q0 = rxp->rxq.single.only;
        #line 2100 
        q1 = (struct bna_rxq *)0;
        #line 2100 
        break;
        #line 2100 
        case (unsigned int)2: 
                              #line 2100 
        ;
        #line 2100 
        q0 = rxp->rxq.slr.large;
        #line 2100 
        q1 = rxp->rxq.slr.small;
        #line 2100 
        break;
        #line 2100 
        case (unsigned int)3: 
                              #line 2100 
        ;
        #line 2100 
        q0 = rxp->rxq.hds.data;
        #line 2100 
        q1 = rxp->rxq.hds.hdr;
        #line 2100 
        break;
      }
      #line 2103 
      ((rxp->cq.ccb)->i_dbell)->doorbell_addr = (rx->bna)->pcidev.pci_bar_kva + (unsigned long)__builtin_bswap32(cfg_rsp->q_handles[i].i_dbell);
      #line 2106 
      rxp->hw_id = (int)cfg_rsp->q_handles[i].hw_cqid;
      #line 2107 
      (q0->rcb)->q_dbell = (rx->bna)->pcidev.pci_bar_kva + (unsigned long)__builtin_bswap32(cfg_rsp->q_handles[i].ql_dbell);
      #line 2110 
      q0->hw_id = (int)cfg_rsp->q_handles[i].hw_lqid;
      #line 2111 
      if (q1 != (struct bna_rxq *)0) {
        #line 2112 
        (q1->rcb)->q_dbell = (rx->bna)->pcidev.pci_bar_kva + (unsigned long)__builtin_bswap32(cfg_rsp->q_handles[i].qs_dbell);
        #line 2115 
        q1->hw_id = (int)cfg_rsp->q_handles[i].hw_sqid;
      }
      #line 2119 
      *((rxp->cq.ccb)->hw_producer_index) = 0U;
      #line 2120 
      (rxp->cq.ccb)->producer_index = 0U;
      #line 2121 
      (q0->rcb)->consumer_index = 0U;
      #line 2121 
      (q0->rcb)->producer_index = 0U;
      #line 2122 
      if (q1 != (struct bna_rxq *)0) {
        #line 2123 
        (q1->rcb)->consumer_index = 0U;
        #line 2123 
        (q1->rcb)->producer_index = 0U;
      }
    }
    #line 2099 
    i ++;
    #line 2099 
    __mptr_0 = (void *)rxp->qe.next;
    #line 2099 
    rxp = ((struct bna_rxp *)__mptr_0);
  }
  #line 2126 
  (*(rx->fsm))((void *)rx,4);
  #line 2127 
  return;
}

#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_rx_enet_stop_rsp(struct bna_rx *rx, struct bfi_msgq_mhdr *msghdr)
{
  #line 2132 
  (*(rx->fsm))((void *)rx,5);
  #line 2133 
  return;
}

#line 2136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_res_req(struct bna_rx_config *q_cfg, struct bna_res_info *res_info)
{
  #line 2138 
  u32 cq_size;
  #line 2138 
  u32 hq_size;
  #line 2138 
  u32 dq_size;
  #line 2139 
  u32 cpage_count;
  #line 2139 
  u32 hpage_count;
  #line 2139 
  u32 dpage_count;
  #line 2140 
  struct bna_mem_info *mem_info;
  #line 2141 
  u32 cq_depth;
  #line 2142 
  u32 hq_depth;
  #line 2143 
  u32 dq_depth;
  #line 2176 
  int tmp_200;
  #line 2145 
  dq_depth = q_cfg->q0_depth;
  #line 2146 
  if (q_cfg->rxp_type != (unsigned int)BNA_RXP_SINGLE) 
                                                       #line 2146 
                                                       hq_depth = q_cfg->q1_depth; else 
                                                                    #line 2146 
                                                                    hq_depth = 0U;
  #line 2147 
  if (0 != 0) {
    #line 2147 
    unsigned int tmp_7;
    #line 2147 
    unsigned int tmp_39;
    #line 2147 
    unsigned int tmp_40;
    #line 2147 
    unsigned int tmp_8;
    #line 2147 
    unsigned int tmp_9;
    #line 2147 
    unsigned int tmp_41;
    #line 2147 
    unsigned int tmp_42;
    #line 2147 
    unsigned int tmp_10;
    #line 2147 
    unsigned int tmp_11;
    #line 2147 
    unsigned int tmp_43;
    #line 2147 
    unsigned int tmp_44;
    #line 2147 
    unsigned int tmp_12;
    #line 2147 
    unsigned int tmp_13;
    #line 2147 
    unsigned int tmp_45;
    #line 2147 
    unsigned int tmp_46;
    #line 2147 
    unsigned int tmp_14;
    #line 2147 
    unsigned int tmp_15;
    #line 2147 
    unsigned int tmp_47;
    #line 2147 
    unsigned int tmp_48;
    #line 2147 
    unsigned int tmp_16;
    #line 2147 
    unsigned int tmp_17;
    #line 2147 
    unsigned int tmp_49;
    #line 2147 
    unsigned int tmp_50;
    #line 2147 
    unsigned int tmp_18;
    #line 2147 
    unsigned int tmp_19;
    #line 2147 
    unsigned int tmp_51;
    #line 2147 
    unsigned int tmp_52;
    #line 2147 
    unsigned int tmp_20;
    #line 2147 
    unsigned int tmp_21;
    #line 2147 
    unsigned int tmp_53;
    #line 2147 
    unsigned int tmp_54;
    #line 2147 
    unsigned int tmp_22;
    #line 2147 
    unsigned int tmp_23;
    #line 2147 
    unsigned int tmp_55;
    #line 2147 
    unsigned int tmp_56;
    #line 2147 
    unsigned int tmp_24;
    #line 2147 
    unsigned int tmp_25;
    #line 2147 
    unsigned int tmp_57;
    #line 2147 
    unsigned int tmp_58;
    #line 2147 
    unsigned int tmp_26;
    #line 2147 
    unsigned int tmp_27;
    #line 2147 
    unsigned int tmp_59;
    #line 2147 
    unsigned int tmp_60;
    #line 2147 
    unsigned int tmp_28;
    #line 2147 
    unsigned int tmp_29;
    #line 2147 
    unsigned int tmp_61;
    #line 2147 
    unsigned int tmp_30;
    #line 2147 
    unsigned int tmp_63;
    #line 2147 
    unsigned int tmp;
    #line 2147 
    unsigned int tmp_31;
    #line 2147 
    unsigned int tmp_32;
    #line 2147 
    unsigned int tmp_0;
    #line 2147 
    unsigned int tmp_1;
    #line 2147 
    unsigned int tmp_33;
    #line 2147 
    unsigned int tmp_34;
    #line 2147 
    unsigned int tmp_2;
    #line 2147 
    unsigned int tmp_3;
    #line 2147 
    unsigned int tmp_35;
    #line 2147 
    unsigned int tmp_36;
    #line 2147 
    unsigned int tmp_4;
    #line 2147 
    unsigned int tmp_5;
    #line 2147 
    unsigned int tmp_37;
    #line 2147 
    unsigned int tmp_38;
    #line 2147 
    unsigned int tmp_6;
    #line 2147 
    unsigned int tmp_64;
    #line 2147 
    if (dq_depth + hq_depth != 1U) {
      #line 2147 
      if (0 != 0) {
        #line 2147 
        if ((dq_depth + hq_depth) + 4294967295U > 1U) {
          #line 2147 
          if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 2147 
            if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 2147 
              if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 2147 
                if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 2147 
                  if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 2147 
                    if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 2147 
                      if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 2147 
                        if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 2147 
                          if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 2147 
                            if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 2147 
                              if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 2147 
                                if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 2147 
                                  if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 2147 
                                    if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 2147 
                                      if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 2147 
                                        if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 2147 
                                          if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 2147 
                                            if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 2147 
                                              if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 2147 
                                                if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 2147 
                                                  if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 2147 
                                                    if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 2147 
                                                      if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 2147 
                                                        if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 2147 
                                                          if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 2147 
                                                            if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 2147 
                                                              if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 2147 
                                                                if (((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 2147 
                                                                  if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 2147 
                                                                    if (
                                                                    ((unsigned long long)((dq_depth + hq_depth) + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 2147 
                                                                    tmp = 8U; else 
                                                                    #line 2147 
                                                                    tmp = 4U;
                                                                    #line 2147 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_0 = 16U;
                                                                    #line 2147 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_1 = 32U;
                                                                    #line 2147 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_2 = 64U;
                                                                    #line 2147 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_3 = 128U;
                                                                    #line 2147 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_4 = 256U;
                                                                    #line 2147 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_5 = 512U;
                                                                    #line 2147 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_6 = 1024U;
                                                                    #line 2147 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_7 = 2048U;
                                                                    #line 2147 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_8 = 4096U;
                                                                    #line 2147 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_9 = 8192U;
                                                                    #line 2147 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_10 = 16384U;
                                                                    #line 2147 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_11 = 32768U;
                                                                    #line 2147 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_12 = 65536U;
                                                                    #line 2147 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_13 = 131072U;
                                                                    #line 2147 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_14 = 262144U;
                                                                    #line 2147 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_15 = 524288U;
                                                                    #line 2147 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_16 = 1048576U;
                                                                    #line 2147 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_17 = 2097152U;
                                                                    #line 2147 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_18 = 4194304U;
                                                                    #line 2147 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_19 = 8388608U;
                                                                    #line 2147 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_20 = 16777216U;
                                                                    #line 2147 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_21 = 33554432U;
                                                                    #line 2147 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_22 = 67108864U;
                                                                    #line 2147 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_23 = 134217728U;
                                                                    #line 2147 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_24 = 268435456U;
                                                                    #line 2147 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_25 = 536870912U;
                                                                    #line 2147 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_26 = 1073741824U;
                                                                    #line 2147 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_27 = 2147483648U;
                                                                    #line 2147 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_28 = 0U;
                                                                    #line 2147 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_29 = 0U;
                                                                    #line 2147 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_30 = 0U;
                                                                    #line 2147 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 2147 
                                                                    tmp_31 = 0U;
                                                                    #line 2147 
                                                                    tmp_32 = tmp_31;
                                                                  }
                                                                  else 
                                                                    #line 2147 
                                                                    tmp_32 = 0U;
                                                                  #line 2147 
                                                                  tmp_33 = tmp_32;
                                                                }
                                                                else 
                                                                  #line 2147 
                                                                  tmp_33 = 0U;
                                                                #line 2147 
                                                                tmp_34 = tmp_33;
                                                              }
                                                              else 
                                                                   #line 2147 
                                                                   tmp_34 = 0U;
                                                              #line 2147 
                                                              tmp_35 = tmp_34;
                                                            }
                                                            else 
                                                                 #line 2147 
                                                                 tmp_35 = 0U;
                                                            #line 2147 
                                                            tmp_36 = tmp_35;
                                                          }
                                                          else 
                                                               #line 2147 
                                                               tmp_36 = 0U;
                                                          #line 2147 
                                                          tmp_37 = tmp_36;
                                                        }
                                                        else 
                                                             #line 2147 
                                                             tmp_37 = 0U;
                                                        #line 2147 
                                                        tmp_38 = tmp_37;
                                                      }
                                                      else 
                                                           #line 2147 
                                                           tmp_38 = 0U;
                                                      #line 2147 
                                                      tmp_39 = tmp_38;
                                                    }
                                                    else 
                                                         #line 2147 
                                                         tmp_39 = 0U;
                                                    #line 2147 
                                                    tmp_40 = tmp_39;
                                                  }
                                                  else 
                                                       #line 2147 
                                                       tmp_40 = 0U;
                                                  #line 2147 
                                                  tmp_41 = tmp_40;
                                                }
                                                else 
                                                     #line 2147 
                                                     tmp_41 = 0U;
                                                #line 2147 
                                                tmp_42 = tmp_41;
                                              }
                                              else 
                                                   #line 2147 
                                                   tmp_42 = 0U;
                                              #line 2147 
                                              tmp_43 = tmp_42;
                                            }
                                            else 
                                                 #line 2147 
                                                 tmp_43 = 0U;
                                            #line 2147 
                                            tmp_44 = tmp_43;
                                          }
                                          else 
                                               #line 2147 
                                               tmp_44 = 0U;
                                          #line 2147 
                                          tmp_45 = tmp_44;
                                        }
                                        else 
                                             #line 2147 
                                             tmp_45 = 0U;
                                        #line 2147 
                                        tmp_46 = tmp_45;
                                      }
                                      else 
                                           #line 2147 
                                           tmp_46 = 0U;
                                      #line 2147 
                                      tmp_47 = tmp_46;
                                    }
                                    else 
                                         #line 2147 
                                         tmp_47 = 0U;
                                    #line 2147 
                                    tmp_48 = tmp_47;
                                  }
                                  else 
                                       #line 2147 
                                       tmp_48 = 0U;
                                  #line 2147 
                                  tmp_49 = tmp_48;
                                }
                                else 
                                     #line 2147 
                                     tmp_49 = 0U;
                                #line 2147 
                                tmp_50 = tmp_49;
                              }
                              else 
                                   #line 2147 
                                   tmp_50 = 0U;
                              #line 2147 
                              tmp_51 = tmp_50;
                            }
                            else 
                                 #line 2147 
                                 tmp_51 = 0U;
                            #line 2147 
                            tmp_52 = tmp_51;
                          }
                          else 
                               #line 2147 
                               tmp_52 = 0U;
                          #line 2147 
                          tmp_53 = tmp_52;
                        }
                        else 
                             #line 2147 
                             tmp_53 = 0U;
                        #line 2147 
                        tmp_54 = tmp_53;
                      }
                      else 
                           #line 2147 
                           tmp_54 = 0U;
                      #line 2147 
                      tmp_55 = tmp_54;
                    }
                    else 
                         #line 2147 
                         tmp_55 = 0U;
                    #line 2147 
                    tmp_56 = tmp_55;
                  }
                  else 
                       #line 2147 
                       tmp_56 = 0U;
                  #line 2147 
                  tmp_57 = tmp_56;
                }
                else 
                     #line 2147 
                     tmp_57 = 0U;
                #line 2147 
                tmp_58 = tmp_57;
              }
              else 
                   #line 2147 
                   tmp_58 = 0U;
              #line 2147 
              tmp_59 = tmp_58;
            }
            else 
                 #line 2147 
                 tmp_59 = 0U;
            #line 2147 
            tmp_60 = tmp_59;
          }
          else 
               #line 2147 
               tmp_60 = 0U;
          #line 2147 
          tmp_61 = tmp_60;
        }
        else 
             #line 2147 
             tmp_61 = 2U;
        #line 2147 
        tmp_63 = tmp_61;
      }
      else {
        #line 2147 
        tmp_63 = (unsigned int)(1UL << (__ilog2_u32((dq_depth + hq_depth) + 4294967295U) + 1));
      }
      #line 2147 
      tmp_64 = tmp_63;
    }
    else 
         #line 2147 
         tmp_64 = 1U;
    #line 2147 
    cq_depth = tmp_64;
  }
  else {
    #line 2147 
    cq_depth = (unsigned int)__roundup_pow_of_two((unsigned long)(dq_depth + hq_depth));
  }
  #line 2149 
  cq_size = cq_depth * 16U;
  #line 2150 
  cq_size = (cq_size + 4095U) & 4294963200U;
  #line 2151 
  cpage_count = (cq_size >> 12) + (unsigned int)((((unsigned long)cq_size & 4095UL) + 4095UL) >> 12);
  #line 2153 
  if (0 != 0) {
    #line 2153 
    unsigned int tmp_103;
    #line 2153 
    unsigned int tmp_71;
    #line 2153 
    unsigned int tmp_72;
    #line 2153 
    unsigned int tmp_104;
    #line 2153 
    unsigned int tmp_105;
    #line 2153 
    unsigned int tmp_73;
    #line 2153 
    unsigned int tmp_74;
    #line 2153 
    unsigned int tmp_106;
    #line 2153 
    unsigned int tmp_107;
    #line 2153 
    unsigned int tmp_75;
    #line 2153 
    unsigned int tmp_76;
    #line 2153 
    unsigned int tmp_108;
    #line 2153 
    unsigned int tmp_109;
    #line 2153 
    unsigned int tmp_77;
    #line 2153 
    unsigned int tmp_78;
    #line 2153 
    unsigned int tmp_110;
    #line 2153 
    unsigned int tmp_111;
    #line 2153 
    unsigned int tmp_79;
    #line 2153 
    unsigned int tmp_80;
    #line 2153 
    unsigned int tmp_112;
    #line 2153 
    unsigned int tmp_113;
    #line 2153 
    unsigned int tmp_81;
    #line 2153 
    unsigned int tmp_82;
    #line 2153 
    unsigned int tmp_114;
    #line 2153 
    unsigned int tmp_115;
    #line 2153 
    unsigned int tmp_83;
    #line 2153 
    unsigned int tmp_84;
    #line 2153 
    unsigned int tmp_116;
    #line 2153 
    unsigned int tmp_117;
    #line 2153 
    unsigned int tmp_85;
    #line 2153 
    unsigned int tmp_86;
    #line 2153 
    unsigned int tmp_118;
    #line 2153 
    unsigned int tmp_119;
    #line 2153 
    unsigned int tmp_87;
    #line 2153 
    unsigned int tmp_88;
    #line 2153 
    unsigned int tmp_120;
    #line 2153 
    unsigned int tmp_121;
    #line 2153 
    unsigned int tmp_89;
    #line 2153 
    unsigned int tmp_90;
    #line 2153 
    unsigned int tmp_122;
    #line 2153 
    unsigned int tmp_123;
    #line 2153 
    unsigned int tmp_91;
    #line 2153 
    unsigned int tmp_92;
    #line 2153 
    unsigned int tmp_124;
    #line 2153 
    unsigned int tmp_125;
    #line 2153 
    unsigned int tmp_93;
    #line 2153 
    unsigned int tmp_94;
    #line 2153 
    unsigned int tmp_126;
    #line 2153 
    unsigned int tmp_127;
    #line 2153 
    unsigned int tmp_95;
    #line 2153 
    unsigned int tmp_96;
    #line 2153 
    unsigned int tmp_128;
    #line 2153 
    unsigned int tmp_97;
    #line 2153 
    unsigned int tmp_130;
    #line 2153 
    unsigned int tmp_66;
    #line 2153 
    unsigned int tmp_98;
    #line 2153 
    unsigned int tmp_99;
    #line 2153 
    unsigned int tmp_67;
    #line 2153 
    unsigned int tmp_68;
    #line 2153 
    unsigned int tmp_100;
    #line 2153 
    unsigned int tmp_101;
    #line 2153 
    unsigned int tmp_69;
    #line 2153 
    unsigned int tmp_70;
    #line 2153 
    unsigned int tmp_102;
    #line 2153 
    unsigned int tmp_131;
    #line 2153 
    if (dq_depth != 1U) {
      #line 2153 
      if (0 != 0) {
        #line 2153 
        if (dq_depth + 4294967295U > 1U) {
          #line 2153 
          if (((unsigned long long)(dq_depth + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 2153 
            if (((unsigned long long)(dq_depth + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 2153 
              if (((unsigned long long)(dq_depth + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 2153 
                if (((unsigned long long)(dq_depth + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 2153 
                  if (((unsigned long long)(dq_depth + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 2153 
                    if (((unsigned long long)(dq_depth + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 2153 
                      if (((unsigned long long)(dq_depth + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 2153 
                        if (((unsigned long long)(dq_depth + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 2153 
                          if (((unsigned long long)(dq_depth + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 2153 
                            if (((unsigned long long)(dq_depth + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 2153 
                              if (((unsigned long long)(dq_depth + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 2153 
                                if (((unsigned long long)(dq_depth + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 2153 
                                  if (((unsigned long long)(dq_depth + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 2153 
                                    if (((unsigned long long)(dq_depth + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 2153 
                                      if (((unsigned long long)(dq_depth + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 2153 
                                        if (((unsigned long long)(dq_depth + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 2153 
                                          if (((unsigned long long)(dq_depth + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 2153 
                                            if (((unsigned long long)(dq_depth + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 2153 
                                              if (((unsigned long long)(dq_depth + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 2153 
                                                if (((unsigned long long)(dq_depth + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 2153 
                                                  if (((unsigned long long)(dq_depth + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 2153 
                                                    if (((unsigned long long)(dq_depth + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 2153 
                                                      if (((unsigned long long)(dq_depth + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 2153 
                                                        if (((unsigned long long)(dq_depth + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 2153 
                                                          if (((unsigned long long)(dq_depth + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 2153 
                                                            if (((unsigned long long)(dq_depth + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 2153 
                                                              if (((unsigned long long)(dq_depth + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 2153 
                                                                if (((unsigned long long)(dq_depth + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 2153 
                                                                  if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 2153 
                                                                    if (
                                                                    ((unsigned long long)(dq_depth + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 2153 
                                                                    tmp_66 = 8U; else 
                                                                    #line 2153 
                                                                    tmp_66 = 4U;
                                                                    #line 2153 
                                                                    tmp_67 = tmp_66;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_67 = 16U;
                                                                    #line 2153 
                                                                    tmp_68 = tmp_67;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_68 = 32U;
                                                                    #line 2153 
                                                                    tmp_69 = tmp_68;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_69 = 64U;
                                                                    #line 2153 
                                                                    tmp_70 = tmp_69;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_70 = 128U;
                                                                    #line 2153 
                                                                    tmp_71 = tmp_70;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_71 = 256U;
                                                                    #line 2153 
                                                                    tmp_72 = tmp_71;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_72 = 512U;
                                                                    #line 2153 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_73 = 1024U;
                                                                    #line 2153 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_74 = 2048U;
                                                                    #line 2153 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_75 = 4096U;
                                                                    #line 2153 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_76 = 8192U;
                                                                    #line 2153 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_77 = 16384U;
                                                                    #line 2153 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_78 = 32768U;
                                                                    #line 2153 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_79 = 65536U;
                                                                    #line 2153 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_80 = 131072U;
                                                                    #line 2153 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_81 = 262144U;
                                                                    #line 2153 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_82 = 524288U;
                                                                    #line 2153 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_83 = 1048576U;
                                                                    #line 2153 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_84 = 2097152U;
                                                                    #line 2153 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_85 = 4194304U;
                                                                    #line 2153 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_86 = 8388608U;
                                                                    #line 2153 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_87 = 16777216U;
                                                                    #line 2153 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_88 = 33554432U;
                                                                    #line 2153 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_89 = 67108864U;
                                                                    #line 2153 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_90 = 134217728U;
                                                                    #line 2153 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_91 = 268435456U;
                                                                    #line 2153 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_92 = 536870912U;
                                                                    #line 2153 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_93 = 1073741824U;
                                                                    #line 2153 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_94 = 2147483648U;
                                                                    #line 2153 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_95 = 0U;
                                                                    #line 2153 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_96 = 0U;
                                                                    #line 2153 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_97 = 0U;
                                                                    #line 2153 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    #line 2153 
                                                                    tmp_98 = 0U;
                                                                    #line 2153 
                                                                    tmp_99 = tmp_98;
                                                                  }
                                                                  else 
                                                                    #line 2153 
                                                                    tmp_99 = 0U;
                                                                  #line 2153 
                                                                  tmp_100 = tmp_99;
                                                                }
                                                                else 
                                                                  #line 2153 
                                                                  tmp_100 = 0U;
                                                                #line 2153 
                                                                tmp_101 = tmp_100;
                                                              }
                                                              else 
                                                                   #line 2153 
                                                                   tmp_101 = 0U;
                                                              #line 2153 
                                                              tmp_102 = tmp_101;
                                                            }
                                                            else 
                                                                 #line 2153 
                                                                 tmp_102 = 0U;
                                                            #line 2153 
                                                            tmp_103 = tmp_102;
                                                          }
                                                          else 
                                                               #line 2153 
                                                               tmp_103 = 0U;
                                                          #line 2153 
                                                          tmp_104 = tmp_103;
                                                        }
                                                        else 
                                                             #line 2153 
                                                             tmp_104 = 0U;
                                                        #line 2153 
                                                        tmp_105 = tmp_104;
                                                      }
                                                      else 
                                                           #line 2153 
                                                           tmp_105 = 0U;
                                                      #line 2153 
                                                      tmp_106 = tmp_105;
                                                    }
                                                    else 
                                                         #line 2153 
                                                         tmp_106 = 0U;
                                                    #line 2153 
                                                    tmp_107 = tmp_106;
                                                  }
                                                  else 
                                                       #line 2153 
                                                       tmp_107 = 0U;
                                                  #line 2153 
                                                  tmp_108 = tmp_107;
                                                }
                                                else 
                                                     #line 2153 
                                                     tmp_108 = 0U;
                                                #line 2153 
                                                tmp_109 = tmp_108;
                                              }
                                              else 
                                                   #line 2153 
                                                   tmp_109 = 0U;
                                              #line 2153 
                                              tmp_110 = tmp_109;
                                            }
                                            else 
                                                 #line 2153 
                                                 tmp_110 = 0U;
                                            #line 2153 
                                            tmp_111 = tmp_110;
                                          }
                                          else 
                                               #line 2153 
                                               tmp_111 = 0U;
                                          #line 2153 
                                          tmp_112 = tmp_111;
                                        }
                                        else 
                                             #line 2153 
                                             tmp_112 = 0U;
                                        #line 2153 
                                        tmp_113 = tmp_112;
                                      }
                                      else 
                                           #line 2153 
                                           tmp_113 = 0U;
                                      #line 2153 
                                      tmp_114 = tmp_113;
                                    }
                                    else 
                                         #line 2153 
                                         tmp_114 = 0U;
                                    #line 2153 
                                    tmp_115 = tmp_114;
                                  }
                                  else 
                                       #line 2153 
                                       tmp_115 = 0U;
                                  #line 2153 
                                  tmp_116 = tmp_115;
                                }
                                else 
                                     #line 2153 
                                     tmp_116 = 0U;
                                #line 2153 
                                tmp_117 = tmp_116;
                              }
                              else 
                                   #line 2153 
                                   tmp_117 = 0U;
                              #line 2153 
                              tmp_118 = tmp_117;
                            }
                            else 
                                 #line 2153 
                                 tmp_118 = 0U;
                            #line 2153 
                            tmp_119 = tmp_118;
                          }
                          else 
                               #line 2153 
                               tmp_119 = 0U;
                          #line 2153 
                          tmp_120 = tmp_119;
                        }
                        else 
                             #line 2153 
                             tmp_120 = 0U;
                        #line 2153 
                        tmp_121 = tmp_120;
                      }
                      else 
                           #line 2153 
                           tmp_121 = 0U;
                      #line 2153 
                      tmp_122 = tmp_121;
                    }
                    else 
                         #line 2153 
                         tmp_122 = 0U;
                    #line 2153 
                    tmp_123 = tmp_122;
                  }
                  else 
                       #line 2153 
                       tmp_123 = 0U;
                  #line 2153 
                  tmp_124 = tmp_123;
                }
                else 
                     #line 2153 
                     tmp_124 = 0U;
                #line 2153 
                tmp_125 = tmp_124;
              }
              else 
                   #line 2153 
                   tmp_125 = 0U;
              #line 2153 
              tmp_126 = tmp_125;
            }
            else 
                 #line 2153 
                 tmp_126 = 0U;
            #line 2153 
            tmp_127 = tmp_126;
          }
          else 
               #line 2153 
               tmp_127 = 0U;
          #line 2153 
          tmp_128 = tmp_127;
        }
        else 
             #line 2153 
             tmp_128 = 2U;
        #line 2153 
        tmp_130 = tmp_128;
      }
      else {
        #line 2153 
        tmp_130 = (unsigned int)(1UL << (__ilog2_u32(dq_depth + 4294967295U) + 1));
      }
      #line 2153 
      tmp_131 = tmp_130;
    }
    else 
         #line 2153 
         tmp_131 = 1U;
    #line 2153 
    dq_depth = tmp_131;
  }
  else {
    #line 2153 
    dq_depth = (unsigned int)__roundup_pow_of_two((unsigned long)dq_depth);
  }
  #line 2154 
  dq_size = dq_depth * 8U;
  #line 2155 
  dq_size = (dq_size + 4095U) & 4294963200U;
  #line 2156 
  dpage_count = (dq_size >> 12) + (unsigned int)((((unsigned long)dq_size & 4095UL) + 4095UL) >> 12);
  #line 2158 
  if (q_cfg->rxp_type != (unsigned int)BNA_RXP_SINGLE) {
    #line 2159 
    if (0 != 0) {
      #line 2159 
      unsigned int tmp_135;
      #line 2159 
      unsigned int tmp_167;
      #line 2159 
      unsigned int tmp_168;
      #line 2159 
      unsigned int tmp_136;
      #line 2159 
      unsigned int tmp_137;
      #line 2159 
      unsigned int tmp_169;
      #line 2159 
      unsigned int tmp_170;
      #line 2159 
      unsigned int tmp_138;
      #line 2159 
      unsigned int tmp_139;
      #line 2159 
      unsigned int tmp_171;
      #line 2159 
      unsigned int tmp_172;
      #line 2159 
      unsigned int tmp_140;
      #line 2159 
      unsigned int tmp_141;
      #line 2159 
      unsigned int tmp_173;
      #line 2159 
      unsigned int tmp_174;
      #line 2159 
      unsigned int tmp_142;
      #line 2159 
      unsigned int tmp_143;
      #line 2159 
      unsigned int tmp_175;
      #line 2159 
      unsigned int tmp_176;
      #line 2159 
      unsigned int tmp_144;
      #line 2159 
      unsigned int tmp_145;
      #line 2159 
      unsigned int tmp_177;
      #line 2159 
      unsigned int tmp_178;
      #line 2159 
      unsigned int tmp_146;
      #line 2159 
      unsigned int tmp_147;
      #line 2159 
      unsigned int tmp_179;
      #line 2159 
      unsigned int tmp_180;
      #line 2159 
      unsigned int tmp_148;
      #line 2159 
      unsigned int tmp_149;
      #line 2159 
      unsigned int tmp_181;
      #line 2159 
      unsigned int tmp_182;
      #line 2159 
      unsigned int tmp_150;
      #line 2159 
      unsigned int tmp_151;
      #line 2159 
      unsigned int tmp_183;
      #line 2159 
      unsigned int tmp_184;
      #line 2159 
      unsigned int tmp_152;
      #line 2159 
      unsigned int tmp_153;
      #line 2159 
      unsigned int tmp_185;
      #line 2159 
      unsigned int tmp_186;
      #line 2159 
      unsigned int tmp_154;
      #line 2159 
      unsigned int tmp_155;
      #line 2159 
      unsigned int tmp_187;
      #line 2159 
      unsigned int tmp_188;
      #line 2159 
      unsigned int tmp_156;
      #line 2159 
      unsigned int tmp_157;
      #line 2159 
      unsigned int tmp_189;
      #line 2159 
      unsigned int tmp_190;
      #line 2159 
      unsigned int tmp_158;
      #line 2159 
      unsigned int tmp_159;
      #line 2159 
      unsigned int tmp_191;
      #line 2159 
      unsigned int tmp_192;
      #line 2159 
      unsigned int tmp_160;
      #line 2159 
      unsigned int tmp_161;
      #line 2159 
      unsigned int tmp_193;
      #line 2159 
      unsigned int tmp_194;
      #line 2159 
      unsigned int tmp_162;
      #line 2159 
      unsigned int tmp_163;
      #line 2159 
      unsigned int tmp_195;
      #line 2159 
      unsigned int tmp_164;
      #line 2159 
      unsigned int tmp_197;
      #line 2159 
      unsigned int tmp_133;
      #line 2159 
      unsigned int tmp_165;
      #line 2159 
      unsigned int tmp_166;
      #line 2159 
      unsigned int tmp_134;
      #line 2159 
      unsigned int tmp_198;
      #line 2159 
      if (hq_depth != 1U) {
        #line 2159 
        if (0 != 0) {
          #line 2159 
          if (hq_depth + 4294967295U > 1U) {
            #line 2159 
            if (((unsigned long long)(hq_depth + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
              #line 2159 
              if (((unsigned long long)(hq_depth + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
                #line 2159 
                if (((unsigned long long)(hq_depth + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                  #line 2159 
                  if (((unsigned long long)(hq_depth + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                    #line 2159 
                    if (((unsigned long long)(hq_depth + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                      #line 2159 
                      if (((unsigned long long)(hq_depth + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                        #line 2159 
                        if (((unsigned long long)(hq_depth + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                          #line 2159 
                          if (((unsigned long long)(hq_depth + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                            #line 2159 
                            if (((unsigned long long)(hq_depth + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                              #line 2159 
                              if (((unsigned long long)(hq_depth + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                                #line 2159 
                                if (((unsigned long long)(hq_depth + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                  #line 2159 
                                  if (((unsigned long long)(hq_depth + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                    #line 2159 
                                    if (((unsigned long long)(hq_depth + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                      #line 2159 
                                      if (((unsigned long long)(hq_depth + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                        #line 2159 
                                        if (((unsigned long long)(hq_depth + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                          #line 2159 
                                          if (((unsigned long long)(hq_depth + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                            #line 2159 
                                            if (((unsigned long long)(hq_depth + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                              #line 2159 
                                              if (((unsigned long long)(hq_depth + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                                #line 2159 
                                                if (((unsigned long long)(hq_depth + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                  #line 2159 
                                                  if (((unsigned long long)(hq_depth + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                    #line 2159 
                                                    if (((unsigned long long)(hq_depth + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                      #line 2159 
                                                      if (((unsigned long long)(hq_depth + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                        #line 2159 
                                                        if (((unsigned long long)(hq_depth + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                          #line 2159 
                                                          if (((unsigned long long)(hq_depth + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                            #line 2159 
                                                            if (((unsigned long long)(hq_depth + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                              #line 2159 
                                                              if (((unsigned long long)(hq_depth + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                                #line 2159 
                                                                if (((unsigned long long)(hq_depth + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                  #line 2159 
                                                                  if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 2159 
                                                                    if (
                                                                    ((unsigned long long)(hq_depth + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 2159 
                                                                    tmp_133 = 8U; else 
                                                                    #line 2159 
                                                                    tmp_133 = 4U;
                                                                    #line 2159 
                                                                    tmp_134 = tmp_133;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_134 = 16U;
                                                                    #line 2159 
                                                                    tmp_135 = tmp_134;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_135 = 32U;
                                                                    #line 2159 
                                                                    tmp_136 = tmp_135;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_136 = 64U;
                                                                    #line 2159 
                                                                    tmp_137 = tmp_136;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_137 = 128U;
                                                                    #line 2159 
                                                                    tmp_138 = tmp_137;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_138 = 256U;
                                                                    #line 2159 
                                                                    tmp_139 = tmp_138;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_139 = 512U;
                                                                    #line 2159 
                                                                    tmp_140 = tmp_139;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_140 = 1024U;
                                                                    #line 2159 
                                                                    tmp_141 = tmp_140;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_141 = 2048U;
                                                                    #line 2159 
                                                                    tmp_142 = tmp_141;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_142 = 4096U;
                                                                    #line 2159 
                                                                    tmp_143 = tmp_142;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_143 = 8192U;
                                                                    #line 2159 
                                                                    tmp_144 = tmp_143;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_144 = 16384U;
                                                                    #line 2159 
                                                                    tmp_145 = tmp_144;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_145 = 32768U;
                                                                    #line 2159 
                                                                    tmp_146 = tmp_145;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_146 = 65536U;
                                                                    #line 2159 
                                                                    tmp_147 = tmp_146;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_147 = 131072U;
                                                                    #line 2159 
                                                                    tmp_148 = tmp_147;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_148 = 262144U;
                                                                    #line 2159 
                                                                    tmp_149 = tmp_148;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_149 = 524288U;
                                                                    #line 2159 
                                                                    tmp_150 = tmp_149;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_150 = 1048576U;
                                                                    #line 2159 
                                                                    tmp_151 = tmp_150;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_151 = 2097152U;
                                                                    #line 2159 
                                                                    tmp_152 = tmp_151;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_152 = 4194304U;
                                                                    #line 2159 
                                                                    tmp_153 = tmp_152;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_153 = 8388608U;
                                                                    #line 2159 
                                                                    tmp_154 = tmp_153;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_154 = 16777216U;
                                                                    #line 2159 
                                                                    tmp_155 = tmp_154;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_155 = 33554432U;
                                                                    #line 2159 
                                                                    tmp_156 = tmp_155;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_156 = 67108864U;
                                                                    #line 2159 
                                                                    tmp_157 = tmp_156;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_157 = 134217728U;
                                                                    #line 2159 
                                                                    tmp_158 = tmp_157;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_158 = 268435456U;
                                                                    #line 2159 
                                                                    tmp_159 = tmp_158;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_159 = 536870912U;
                                                                    #line 2159 
                                                                    tmp_160 = tmp_159;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_160 = 1073741824U;
                                                                    #line 2159 
                                                                    tmp_161 = tmp_160;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_161 = 2147483648U;
                                                                    #line 2159 
                                                                    tmp_162 = tmp_161;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_162 = 0U;
                                                                    #line 2159 
                                                                    tmp_163 = tmp_162;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_163 = 0U;
                                                                    #line 2159 
                                                                    tmp_164 = tmp_163;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_164 = 0U;
                                                                    #line 2159 
                                                                    tmp_165 = tmp_164;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_165 = 0U;
                                                                    #line 2159 
                                                                    tmp_166 = tmp_165;
                                                                    }
                                                                    else 
                                                                    #line 2159 
                                                                    tmp_166 = 0U;
                                                                    #line 2159 
                                                                    tmp_167 = tmp_166;
                                                                  }
                                                                  else 
                                                                    #line 2159 
                                                                    tmp_167 = 0U;
                                                                  #line 2159 
                                                                  tmp_168 = tmp_167;
                                                                }
                                                                else 
                                                                  #line 2159 
                                                                  tmp_168 = 0U;
                                                                #line 2159 
                                                                tmp_169 = tmp_168;
                                                              }
                                                              else 
                                                                   #line 2159 
                                                                   tmp_169 = 0U;
                                                              #line 2159 
                                                              tmp_170 = tmp_169;
                                                            }
                                                            else 
                                                                 #line 2159 
                                                                 tmp_170 = 0U;
                                                            #line 2159 
                                                            tmp_171 = tmp_170;
                                                          }
                                                          else 
                                                               #line 2159 
                                                               tmp_171 = 0U;
                                                          #line 2159 
                                                          tmp_172 = tmp_171;
                                                        }
                                                        else 
                                                             #line 2159 
                                                             tmp_172 = 0U;
                                                        #line 2159 
                                                        tmp_173 = tmp_172;
                                                      }
                                                      else 
                                                           #line 2159 
                                                           tmp_173 = 0U;
                                                      #line 2159 
                                                      tmp_174 = tmp_173;
                                                    }
                                                    else 
                                                         #line 2159 
                                                         tmp_174 = 0U;
                                                    #line 2159 
                                                    tmp_175 = tmp_174;
                                                  }
                                                  else 
                                                       #line 2159 
                                                       tmp_175 = 0U;
                                                  #line 2159 
                                                  tmp_176 = tmp_175;
                                                }
                                                else 
                                                     #line 2159 
                                                     tmp_176 = 0U;
                                                #line 2159 
                                                tmp_177 = tmp_176;
                                              }
                                              else 
                                                   #line 2159 
                                                   tmp_177 = 0U;
                                              #line 2159 
                                              tmp_178 = tmp_177;
                                            }
                                            else 
                                                 #line 2159 
                                                 tmp_178 = 0U;
                                            #line 2159 
                                            tmp_179 = tmp_178;
                                          }
                                          else 
                                               #line 2159 
                                               tmp_179 = 0U;
                                          #line 2159 
                                          tmp_180 = tmp_179;
                                        }
                                        else 
                                             #line 2159 
                                             tmp_180 = 0U;
                                        #line 2159 
                                        tmp_181 = tmp_180;
                                      }
                                      else 
                                           #line 2159 
                                           tmp_181 = 0U;
                                      #line 2159 
                                      tmp_182 = tmp_181;
                                    }
                                    else 
                                         #line 2159 
                                         tmp_182 = 0U;
                                    #line 2159 
                                    tmp_183 = tmp_182;
                                  }
                                  else 
                                       #line 2159 
                                       tmp_183 = 0U;
                                  #line 2159 
                                  tmp_184 = tmp_183;
                                }
                                else 
                                     #line 2159 
                                     tmp_184 = 0U;
                                #line 2159 
                                tmp_185 = tmp_184;
                              }
                              else 
                                   #line 2159 
                                   tmp_185 = 0U;
                              #line 2159 
                              tmp_186 = tmp_185;
                            }
                            else 
                                 #line 2159 
                                 tmp_186 = 0U;
                            #line 2159 
                            tmp_187 = tmp_186;
                          }
                          else 
                               #line 2159 
                               tmp_187 = 0U;
                          #line 2159 
                          tmp_188 = tmp_187;
                        }
                        else 
                             #line 2159 
                             tmp_188 = 0U;
                        #line 2159 
                        tmp_189 = tmp_188;
                      }
                      else 
                           #line 2159 
                           tmp_189 = 0U;
                      #line 2159 
                      tmp_190 = tmp_189;
                    }
                    else 
                         #line 2159 
                         tmp_190 = 0U;
                    #line 2159 
                    tmp_191 = tmp_190;
                  }
                  else 
                       #line 2159 
                       tmp_191 = 0U;
                  #line 2159 
                  tmp_192 = tmp_191;
                }
                else 
                     #line 2159 
                     tmp_192 = 0U;
                #line 2159 
                tmp_193 = tmp_192;
              }
              else 
                   #line 2159 
                   tmp_193 = 0U;
              #line 2159 
              tmp_194 = tmp_193;
            }
            else 
                 #line 2159 
                 tmp_194 = 0U;
            #line 2159 
            tmp_195 = tmp_194;
          }
          else 
               #line 2159 
               tmp_195 = 2U;
          #line 2159 
          tmp_197 = tmp_195;
        }
        else {
          #line 2159 
          tmp_197 = (unsigned int)(1UL << (__ilog2_u32(hq_depth + 4294967295U) + 1));
        }
        #line 2159 
        tmp_198 = tmp_197;
      }
      else 
           #line 2159 
           tmp_198 = 1U;
      #line 2159 
      hq_depth = tmp_198;
    }
    else {
      #line 2159 
      hq_depth = (unsigned int)__roundup_pow_of_two((unsigned long)hq_depth);
    }
    #line 2160 
    hq_size = hq_depth * 8U;
    #line 2161 
    hq_size = (hq_size + 4095U) & 4294963200U;
    #line 2162 
    hpage_count = (hq_size >> 12) + (unsigned int)((((unsigned long)hq_size & 4095UL) + 4095UL) >> 12);
  }
  else 
       #line 2164 
       hpage_count = 0U;
  #line 2166 
  res_info->res_type = BNA_RES_T_MEM;
  #line 2167 
  mem_info = & res_info->res_u.mem_info;
  #line 2168 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 2169 
  mem_info->len = 144U;
  #line 2170 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2172 
  (res_info + 1U)->res_type = BNA_RES_T_MEM;
  #line 2173 
  mem_info = & (res_info + 1U)->res_u.mem_info;
  #line 2174 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 2175 
  mem_info->len = 96U;
  #line 2176 
  if (q_cfg->rxp_type == (unsigned int)BNA_RXP_SINGLE) 
                                                       #line 2176 
                                                       tmp_200 = q_cfg->num_paths; else 
                                                                    #line 2176 
                                                                    tmp_200 = q_cfg->num_paths * 2;
  #line 2176 
  mem_info->num = (unsigned int)tmp_200;
  #line 2178 
  (res_info + 4U)->res_type = BNA_RES_T_MEM;
  #line 2179 
  mem_info = & (res_info + 4U)->res_u.mem_info;
  #line 2180 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2181 
  mem_info->len = cpage_count * 8U;
  #line 2182 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2184 
  (res_info + 5U)->res_type = BNA_RES_T_MEM;
  #line 2185 
  mem_info = & (res_info + 5U)->res_u.mem_info;
  #line 2186 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 2187 
  mem_info->len = cpage_count * 8U;
  #line 2188 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2190 
  (res_info + 6U)->res_type = BNA_RES_T_MEM;
  #line 2191 
  mem_info = & (res_info + 6U)->res_u.mem_info;
  #line 2192 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2193 
  mem_info->len = cpage_count * 4096U;
  #line 2194 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2196 
  (res_info + 8U)->res_type = BNA_RES_T_MEM;
  #line 2197 
  mem_info = & (res_info + 8U)->res_u.mem_info;
  #line 2198 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2199 
  mem_info->len = dpage_count * 8U;
  #line 2200 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2202 
  (res_info + 10U)->res_type = BNA_RES_T_MEM;
  #line 2203 
  mem_info = & (res_info + 10U)->res_u.mem_info;
  #line 2204 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 2205 
  mem_info->len = dpage_count * 8U;
  #line 2206 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2208 
  (res_info + 11U)->res_type = BNA_RES_T_MEM;
  #line 2209 
  mem_info = & (res_info + 11U)->res_u.mem_info;
  #line 2210 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2211 
  mem_info->len = dpage_count * 4096U;
  #line 2212 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2214 
  (res_info + 7U)->res_type = BNA_RES_T_MEM;
  #line 2215 
  mem_info = & (res_info + 7U)->res_u.mem_info;
  #line 2216 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2217 
  mem_info->len = hpage_count * 8U;
  #line 2218 
  if (hpage_count != 0U) 
                         #line 2218 
                         mem_info->num = (unsigned int)q_cfg->num_paths; else 
                                                                    #line 2218 
                                                                    mem_info->num = 0U;
  #line 2220 
  (res_info + 9U)->res_type = BNA_RES_T_MEM;
  #line 2221 
  mem_info = & (res_info + 9U)->res_u.mem_info;
  #line 2222 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 2223 
  mem_info->len = hpage_count * 8U;
  #line 2224 
  if (hpage_count != 0U) 
                         #line 2224 
                         mem_info->num = (unsigned int)q_cfg->num_paths; else 
                                                                    #line 2224 
                                                                    mem_info->num = 0U;
  #line 2226 
  (res_info + 12U)->res_type = BNA_RES_T_MEM;
  #line 2227 
  mem_info = & (res_info + 12U)->res_u.mem_info;
  #line 2228 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2229 
  mem_info->len = hpage_count * 4096U;
  #line 2230 
  if (hpage_count != 0U) 
                         #line 2230 
                         mem_info->num = (unsigned int)q_cfg->num_paths; else 
                                                                    #line 2230 
                                                                    mem_info->num = 0U;
  #line 2232 
  (res_info + 13U)->res_type = BNA_RES_T_MEM;
  #line 2233 
  mem_info = & (res_info + 13U)->res_u.mem_info;
  #line 2234 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 2235 
  mem_info->len = 4U;
  #line 2236 
  mem_info->num = (unsigned int)q_cfg->num_paths;
  #line 2238 
  (res_info + 14U)->res_type = BNA_RES_T_MEM;
  #line 2239 
  mem_info = & (res_info + 14U)->res_u.mem_info;
  #line 2240 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 2241 
  mem_info->len = 64U;
  #line 2242 
  mem_info->num = 1U;
  #line 2244 
  (res_info + 15U)->res_type = BNA_RES_T_INTR;
  #line 2245 
  (res_info + 15U)->res_u.intr_info.intr_type = BNA_INTR_T_MSIX;
  #line 2246 
  (res_info + 15U)->res_u.intr_info.num = q_cfg->num_paths;
  #line 2247 
  return;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
struct bna_rx *bna_rx_create(struct bna *bna, struct bnad *bnad, struct bna_rx_config *rx_cfg, struct bna_rx_event_cbfn *rx_cbfn, struct bna_res_info *res_info, void *priv)
{
  #line 2257 
  struct bna_rx *rx;
  #line 2258 
  struct bna_rxp *rxp;
  #line 2259 
  struct bna_rxq *q0;
  #line 2260 
  struct bna_rxq *q1;
  #line 2261 
  struct bna_intr_info *intr_info;
  #line 2262 
  struct bna_mem_descr *hqunmap_mem;
  #line 2263 
  struct bna_mem_descr *dqunmap_mem;
  #line 2264 
  struct bna_mem_descr *ccb_mem;
  #line 2265 
  struct bna_mem_descr *rcb_mem;
  #line 2266 
  struct bna_mem_descr *cqpt_mem;
  #line 2267 
  struct bna_mem_descr *cswqpt_mem;
  #line 2268 
  struct bna_mem_descr *cpage_mem;
  #line 2269 
  struct bna_mem_descr *hqpt_mem;
  #line 2270 
  struct bna_mem_descr *dqpt_mem;
  #line 2271 
  struct bna_mem_descr *hsqpt_mem;
  #line 2272 
  struct bna_mem_descr *dsqpt_mem;
  #line 2273 
  struct bna_mem_descr *hpage_mem;
  #line 2274 
  struct bna_mem_descr *dpage_mem;
  #line 2275 
  u32 dpage_count;
  #line 2275 
  u32 hpage_count;
  #line 2276 
  u32 hq_idx;
  #line 2276 
  u32 dq_idx;
  #line 2276 
  u32 rcb_idx;
  #line 2277 
  u32 cq_depth;
  #line 2277 
  u32 i;
  #line 2278 
  u32 page_count;
  #line 2256 
  struct bna_rx_mod *rx_mod = & bna->rx_mod;
  #line 2280 
  if (bna_rx_res_check(rx_mod,rx_cfg) == 0) 
                                            #line 2281 
                                            return (struct bna_rx *)0;
  #line 2283 
  intr_info = & (res_info + 15U)->res_u.intr_info;
  #line 2284 
  ccb_mem = res_info->res_u.mem_info.mdl;
  #line 2285 
  rcb_mem = (res_info + 1U)->res_u.mem_info.mdl;
  #line 2286 
  dqunmap_mem = (res_info + 3U)->res_u.mem_info.mdl;
  #line 2287 
  hqunmap_mem = (res_info + 2U)->res_u.mem_info.mdl;
  #line 2288 
  cqpt_mem = (res_info + 4U)->res_u.mem_info.mdl;
  #line 2289 
  cswqpt_mem = (res_info + 5U)->res_u.mem_info.mdl;
  #line 2290 
  cpage_mem = (res_info + 6U)->res_u.mem_info.mdl;
  #line 2291 
  hqpt_mem = (res_info + 7U)->res_u.mem_info.mdl;
  #line 2292 
  dqpt_mem = (res_info + 8U)->res_u.mem_info.mdl;
  #line 2293 
  hsqpt_mem = (res_info + 9U)->res_u.mem_info.mdl;
  #line 2294 
  dsqpt_mem = (res_info + 10U)->res_u.mem_info.mdl;
  #line 2295 
  hpage_mem = (res_info + 12U)->res_u.mem_info.mdl;
  #line 2296 
  dpage_mem = (res_info + 11U)->res_u.mem_info.mdl;
  #line 2298 
  page_count = (res_info + 6U)->res_u.mem_info.len / 4096U;
  #line 2301 
  dpage_count = (res_info + 11U)->res_u.mem_info.len / 4096U;
  #line 2304 
  hpage_count = (res_info + 12U)->res_u.mem_info.len / 4096U;
  #line 2307 
  rx = bna_rx_get(rx_mod,rx_cfg->rx_type);
  #line 2308 
  rx->bna = bna;
  #line 2309 
  rx->rx_flags = (enum bna_rx_flags)0;
  #line 2310 
  INIT_LIST_HEAD_0(& rx->rxp_q);
  #line 2311 
  rx->stop_cbfn = (void (*)(void *, struct bna_rx *))0;
  #line 2312 
  rx->stop_cbarg = (void *)0;
  #line 2313 
  rx->priv = priv;
  #line 2315 
  rx->rcb_setup_cbfn = rx_cbfn->rcb_setup_cbfn;
  #line 2316 
  rx->rcb_destroy_cbfn = rx_cbfn->rcb_destroy_cbfn;
  #line 2317 
  rx->ccb_setup_cbfn = rx_cbfn->ccb_setup_cbfn;
  #line 2318 
  rx->ccb_destroy_cbfn = rx_cbfn->ccb_destroy_cbfn;
  #line 2319 
  rx->rx_stall_cbfn = rx_cbfn->rx_stall_cbfn;
  #line 2321 
  rx->rx_cleanup_cbfn = rx_cbfn->rx_cleanup_cbfn;
  #line 2322 
  rx->rx_post_cbfn = rx_cbfn->rx_post_cbfn;
  #line 2324 
  if (((unsigned int)(rx->bna)->rx_mod.flags & 1U) != 0U) 
    #line 2325 
    switch ((unsigned int)rx->type) {
      #line 2326 
      case (unsigned int)0: 
                            #line 2326 
      ;
      #line 2327 
      if (((unsigned int)(rx->bna)->rx_mod.flags & 2U) == 0U) 
                                                              #line 2329 
                                                              rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags | 1U);
      #line 2330 
      break;
      #line 2331 
      case (unsigned int)1: 
                            #line 2331 
      ;
      #line 2332 
      if (((unsigned int)(rx->bna)->rx_mod.flags & 2U) != 0U) 
                                                              #line 2333 
                                                              rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags | 1U);
      #line 2334 
      break;
    }
  #line 2338 
  rx->num_paths = rx_cfg->num_paths;
  #line 2339 
  i = 0U;
  #line 2339 
  hq_idx = 0U;
  #line 2339 
  dq_idx = 0U;
  #line 2339 
  rcb_idx = 0U;
  #line 2339 
  while ((unsigned int)rx->num_paths > i) {
    {
      #line 2437 
      u32 tmp_4;
      #line 2341 
      rxp = bna_rxp_get(rx_mod);
      #line 2342 
      list_add_tail(& rxp->qe,& rx->rxp_q);
      #line 2343 
      rxp->type = rx_cfg->rxp_type;
      #line 2344 
      rxp->rx = rx;
      #line 2345 
      rxp->cq.rx = rx;
      #line 2347 
      q0 = bna_rxq_get(rx_mod);
      #line 2348 
      if (rx_cfg->rxp_type == (unsigned int)BNA_RXP_SINGLE) 
                                                            #line 2349 
                                                            q1 = (struct bna_rxq *)0; else 
                                                                    #line 2351 
                                                                    q1 = bna_rxq_get(rx_mod);
      #line 2353 
      if (intr_info->num == 1) 
                               #line 2354 
                               rxp->vector = (intr_info->idl)->vector; else 
                                                                    #line 2356 
                                                                    rxp->vector = (intr_info->idl + (unsigned long)i)->vector;
      #line 2360 
      rxp->cq.ib.ib_seg_host_addr.lsb = ((res_info + 13U)->res_u.mem_info.mdl + (unsigned long)i)->dma.lsb;
      #line 2362 
      rxp->cq.ib.ib_seg_host_addr.msb = ((res_info + 13U)->res_u.mem_info.mdl + (unsigned long)i)->dma.msb;
      #line 2364 
      rxp->cq.ib.ib_seg_host_addr_kva = ((res_info + 13U)->res_u.mem_info.mdl + (unsigned long)i)->kva;
      #line 2366 
      rxp->cq.ib.intr_type = intr_info->intr_type;
      #line 2367 
      if (intr_info->intr_type == (unsigned int)BNA_INTR_T_MSIX) 
                                                                 #line 2368 
                                                                 rxp->cq.ib.intr_vector = rxp->vector; else 
                                                                    #line 2370 
                                                                    rxp->cq.ib.intr_vector = (int)(1UL << rxp->vector);
      #line 2371 
      rxp->cq.ib.coalescing_timeo = (unsigned char)rx_cfg->coalescing_timeo;
      #line 2372 
      rxp->cq.ib.interpkt_count = 6;
      #line 2373 
      rxp->cq.ib.interpkt_timeo = 3;
      #line 2375 
      bna_rxp_add_rxqs(rxp,q0,q1);
      #line 2379 
      q0->rx = rx;
      #line 2380 
      q0->rxp = rxp;
      #line 2382 
      q0->rcb = (struct bna_rcb *)(rcb_mem + (unsigned long)rcb_idx)->kva;
      #line 2383 
      (q0->rcb)->unmap_q = (dqunmap_mem + (unsigned long)dq_idx)->kva;
      #line 2384 
      rcb_idx ++;
      #line 2384 
      dq_idx ++;
      #line 2385 
      (q0->rcb)->q_depth = rx_cfg->q0_depth;
      #line 2386 
      q0->q_depth = (int)rx_cfg->q0_depth;
      #line 2387 
      q0->multi_buffer = rx_cfg->q0_multi_buf;
      #line 2388 
      q0->buffer_size = (int)rx_cfg->q0_buf_size;
      #line 2389 
      q0->num_vecs = rx_cfg->q0_num_vecs;
      #line 2390 
      (q0->rcb)->rxq = q0;
      #line 2391 
      (q0->rcb)->bnad = bna->bnad;
      #line 2392 
      (q0->rcb)->id = 0;
      #line 2393 
      q0->rx_bytes = 0ULL;
      #line 2393 
      q0->rx_packets = 0ULL;
      #line 2394 
      q0->rxbuf_alloc_failed = 0ULL;
      #line 2394 
      q0->rx_packets_with_error = 0ULL;
      #line 2395 
      q0->rxbuf_map_failed = 0ULL;
      #line 2397 
      bna_rxq_qpt_setup(q0,rxp,dpage_count,4096U,dqpt_mem + (unsigned long)i,dsqpt_mem + (unsigned long)i,dpage_mem + (unsigned long)i);
      #line 2400 
      if (rx->rcb_setup_cbfn != (void (*)(struct bnad *, struct bna_rcb *))0) 
        #line 2401 
        (*(rx->rcb_setup_cbfn))(bnad,q0->rcb);
      #line 2405 
      if (q1 != (struct bna_rxq *)0) {
        #line 2406 
        q1->rx = rx;
        #line 2407 
        q1->rxp = rxp;
        #line 2409 
        q1->rcb = (struct bna_rcb *)(rcb_mem + (unsigned long)rcb_idx)->kva;
        #line 2410 
        (q1->rcb)->unmap_q = (hqunmap_mem + (unsigned long)hq_idx)->kva;
        #line 2411 
        rcb_idx ++;
        #line 2411 
        hq_idx ++;
        #line 2412 
        (q1->rcb)->q_depth = rx_cfg->q1_depth;
        #line 2413 
        q1->q_depth = (int)rx_cfg->q1_depth;
        #line 2414 
        q1->multi_buffer = BNA_STATUS_T_DISABLED;
        #line 2415 
        q1->num_vecs = 1U;
        #line 2416 
        (q1->rcb)->rxq = q1;
        #line 2417 
        (q1->rcb)->bnad = bna->bnad;
        #line 2418 
        (q1->rcb)->id = 1;
        #line 2419 
        if (rx_cfg->rxp_type == (unsigned int)BNA_RXP_HDS) 
                                                           #line 2419 
                                                           q1->buffer_size = rx_cfg->hds_config.forced_offset; else 
                                                                    #line 2419 
                                                                    q1->buffer_size = (int)rx_cfg->q1_buf_size;
        #line 2422 
        q1->rx_bytes = 0ULL;
        #line 2422 
        q1->rx_packets = 0ULL;
        #line 2423 
        q1->rxbuf_alloc_failed = 0ULL;
        #line 2423 
        q1->rx_packets_with_error = 0ULL;
        #line 2424 
        q1->rxbuf_map_failed = 0ULL;
        #line 2426 
        bna_rxq_qpt_setup(q1,rxp,hpage_count,4096U,hqpt_mem + (unsigned long)i,hsqpt_mem + (unsigned long)i,hpage_mem + (unsigned long)i);
        #line 2430 
        if (rx->rcb_setup_cbfn != (void (*)(struct bnad *, struct bna_rcb *))0) 
          #line 2431 
          (*(rx->rcb_setup_cbfn))(bnad,q1->rcb);
      }
      #line 2436 
      rxp->cq.ccb = (struct bna_ccb *)(ccb_mem + (unsigned long)i)->kva;
      #line 2437 
      if (rx_cfg->rxp_type != (unsigned int)BNA_RXP_SINGLE) 
                                                            #line 2437 
                                                            tmp_4 = rx_cfg->q1_depth; else 
                                                                    #line 2437 
                                                                    tmp_4 = 0U;
      #line 2437 
      cq_depth = rx_cfg->q0_depth + tmp_4;
      #line 2443 
      if (0 != 0) {
        #line 2443 
        unsigned int tmp_40;
        #line 2443 
        unsigned int tmp_8;
        #line 2443 
        unsigned int tmp_9;
        #line 2443 
        unsigned int tmp_41;
        #line 2443 
        unsigned int tmp_42;
        #line 2443 
        unsigned int tmp_10;
        #line 2443 
        unsigned int tmp_11;
        #line 2443 
        unsigned int tmp_43;
        #line 2443 
        unsigned int tmp_44;
        #line 2443 
        unsigned int tmp_12;
        #line 2443 
        unsigned int tmp_13;
        #line 2443 
        unsigned int tmp_45;
        #line 2443 
        unsigned int tmp_46;
        #line 2443 
        unsigned int tmp_14;
        #line 2443 
        unsigned int tmp_15;
        #line 2443 
        unsigned int tmp_47;
        #line 2443 
        unsigned int tmp_48;
        #line 2443 
        unsigned int tmp_16;
        #line 2443 
        unsigned int tmp_17;
        #line 2443 
        unsigned int tmp_49;
        #line 2443 
        unsigned int tmp_50;
        #line 2443 
        unsigned int tmp_18;
        #line 2443 
        unsigned int tmp_19;
        #line 2443 
        unsigned int tmp_51;
        #line 2443 
        unsigned int tmp_52;
        #line 2443 
        unsigned int tmp_20;
        #line 2443 
        unsigned int tmp_21;
        #line 2443 
        unsigned int tmp_53;
        #line 2443 
        unsigned int tmp_54;
        #line 2443 
        unsigned int tmp_22;
        #line 2443 
        unsigned int tmp_23;
        #line 2443 
        unsigned int tmp_55;
        #line 2443 
        unsigned int tmp_56;
        #line 2443 
        unsigned int tmp_24;
        #line 2443 
        unsigned int tmp_25;
        #line 2443 
        unsigned int tmp_57;
        #line 2443 
        unsigned int tmp_58;
        #line 2443 
        unsigned int tmp_26;
        #line 2443 
        unsigned int tmp_27;
        #line 2443 
        unsigned int tmp_59;
        #line 2443 
        unsigned int tmp_60;
        #line 2443 
        unsigned int tmp_28;
        #line 2443 
        unsigned int tmp_29;
        #line 2443 
        unsigned int tmp_61;
        #line 2443 
        unsigned int tmp_62;
        #line 2443 
        unsigned int tmp_30;
        #line 2443 
        unsigned int tmp_31;
        #line 2443 
        unsigned int tmp_63;
        #line 2443 
        unsigned int tmp_64;
        #line 2443 
        unsigned int tmp_32;
        #line 2443 
        unsigned int tmp_33;
        #line 2443 
        unsigned int tmp_65;
        #line 2443 
        unsigned int tmp_66;
        #line 2443 
        unsigned int tmp_34;
        #line 2443 
        unsigned int tmp_35;
        #line 2443 
        unsigned int tmp_67;
        #line 2443 
        unsigned int tmp_36;
        #line 2443 
        unsigned int tmp_69;
        #line 2443 
        unsigned int tmp_5;
        #line 2443 
        unsigned int tmp_37;
        #line 2443 
        unsigned int tmp_38;
        #line 2443 
        unsigned int tmp_6;
        #line 2443 
        unsigned int tmp_7;
        #line 2443 
        unsigned int tmp_39;
        #line 2443 
        unsigned int tmp_70;
        #line 2443 
        if (cq_depth != 1U) {
          #line 2443 
          if (0 != 0) {
            #line 2443 
            if (cq_depth + 4294967295U > 1U) {
              #line 2443 
              if (((unsigned long long)(cq_depth + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
                #line 2443 
                if (((unsigned long long)(cq_depth + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
                  #line 2443 
                  if (((unsigned long long)(cq_depth + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                    #line 2443 
                    if (((unsigned long long)(cq_depth + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                      #line 2443 
                      if (((unsigned long long)(cq_depth + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                        #line 2443 
                        if (((unsigned long long)(cq_depth + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                          #line 2443 
                          if (((unsigned long long)(cq_depth + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                            #line 2443 
                            if (((unsigned long long)(cq_depth + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                              #line 2443 
                              if (((unsigned long long)(cq_depth + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                                #line 2443 
                                if (((unsigned long long)(cq_depth + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                                  #line 2443 
                                  if (((unsigned long long)(cq_depth + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                    #line 2443 
                                    if (((unsigned long long)(cq_depth + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                      #line 2443 
                                      if (((unsigned long long)(cq_depth + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                        #line 2443 
                                        if (((unsigned long long)(cq_depth + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                          #line 2443 
                                          if (((unsigned long long)(cq_depth + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                            #line 2443 
                                            if (((unsigned long long)(cq_depth + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                              #line 2443 
                                              if (((unsigned long long)(cq_depth + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                                #line 2443 
                                                if (((unsigned long long)(cq_depth + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                                  #line 2443 
                                                  if (((unsigned long long)(cq_depth + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                    #line 2443 
                                                    if (((unsigned long long)(cq_depth + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                      #line 2443 
                                                      if (((unsigned long long)(cq_depth + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                        #line 2443 
                                                        if (((unsigned long long)(cq_depth + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                          #line 2443 
                                                          if (((unsigned long long)(cq_depth + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                            #line 2443 
                                                            if (((unsigned long long)(cq_depth + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                              #line 2443 
                                                              if (((unsigned long long)(cq_depth + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                                #line 2443 
                                                                if (((unsigned long long)(cq_depth + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                                  #line 2443 
                                                                  if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 2443 
                                                                    if (
                                                                    ((unsigned long long)(cq_depth + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 2443 
                                                                    tmp_5 = 8U; else 
                                                                    #line 2443 
                                                                    tmp_5 = 4U;
                                                                    #line 2443 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_6 = 16U;
                                                                    #line 2443 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_7 = 32U;
                                                                    #line 2443 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_8 = 64U;
                                                                    #line 2443 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_9 = 128U;
                                                                    #line 2443 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_10 = 256U;
                                                                    #line 2443 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_11 = 512U;
                                                                    #line 2443 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_12 = 1024U;
                                                                    #line 2443 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_13 = 2048U;
                                                                    #line 2443 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_14 = 4096U;
                                                                    #line 2443 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_15 = 8192U;
                                                                    #line 2443 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_16 = 16384U;
                                                                    #line 2443 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_17 = 32768U;
                                                                    #line 2443 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_18 = 65536U;
                                                                    #line 2443 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_19 = 131072U;
                                                                    #line 2443 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_20 = 262144U;
                                                                    #line 2443 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_21 = 524288U;
                                                                    #line 2443 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_22 = 1048576U;
                                                                    #line 2443 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_23 = 2097152U;
                                                                    #line 2443 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_24 = 4194304U;
                                                                    #line 2443 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_25 = 8388608U;
                                                                    #line 2443 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_26 = 16777216U;
                                                                    #line 2443 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_27 = 33554432U;
                                                                    #line 2443 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_28 = 67108864U;
                                                                    #line 2443 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_29 = 134217728U;
                                                                    #line 2443 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_30 = 268435456U;
                                                                    #line 2443 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_31 = 536870912U;
                                                                    #line 2443 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_32 = 1073741824U;
                                                                    #line 2443 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_33 = 2147483648U;
                                                                    #line 2443 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_34 = 0U;
                                                                    #line 2443 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_35 = 0U;
                                                                    #line 2443 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_36 = 0U;
                                                                    #line 2443 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_37 = 0U;
                                                                    #line 2443 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_38 = 0U;
                                                                    #line 2443 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    #line 2443 
                                                                    tmp_39 = 0U;
                                                                    #line 2443 
                                                                    tmp_40 = tmp_39;
                                                                  }
                                                                  else 
                                                                    #line 2443 
                                                                    tmp_40 = 0U;
                                                                  #line 2443 
                                                                  tmp_41 = tmp_40;
                                                                }
                                                                else 
                                                                  #line 2443 
                                                                  tmp_41 = 0U;
                                                                #line 2443 
                                                                tmp_42 = tmp_41;
                                                              }
                                                              else 
                                                                   #line 2443 
                                                                   tmp_42 = 0U;
                                                              #line 2443 
                                                              tmp_43 = tmp_42;
                                                            }
                                                            else 
                                                                 #line 2443 
                                                                 tmp_43 = 0U;
                                                            #line 2443 
                                                            tmp_44 = tmp_43;
                                                          }
                                                          else 
                                                               #line 2443 
                                                               tmp_44 = 0U;
                                                          #line 2443 
                                                          tmp_45 = tmp_44;
                                                        }
                                                        else 
                                                             #line 2443 
                                                             tmp_45 = 0U;
                                                        #line 2443 
                                                        tmp_46 = tmp_45;
                                                      }
                                                      else 
                                                           #line 2443 
                                                           tmp_46 = 0U;
                                                      #line 2443 
                                                      tmp_47 = tmp_46;
                                                    }
                                                    else 
                                                         #line 2443 
                                                         tmp_47 = 0U;
                                                    #line 2443 
                                                    tmp_48 = tmp_47;
                                                  }
                                                  else 
                                                       #line 2443 
                                                       tmp_48 = 0U;
                                                  #line 2443 
                                                  tmp_49 = tmp_48;
                                                }
                                                else 
                                                     #line 2443 
                                                     tmp_49 = 0U;
                                                #line 2443 
                                                tmp_50 = tmp_49;
                                              }
                                              else 
                                                   #line 2443 
                                                   tmp_50 = 0U;
                                              #line 2443 
                                              tmp_51 = tmp_50;
                                            }
                                            else 
                                                 #line 2443 
                                                 tmp_51 = 0U;
                                            #line 2443 
                                            tmp_52 = tmp_51;
                                          }
                                          else 
                                               #line 2443 
                                               tmp_52 = 0U;
                                          #line 2443 
                                          tmp_53 = tmp_52;
                                        }
                                        else 
                                             #line 2443 
                                             tmp_53 = 0U;
                                        #line 2443 
                                        tmp_54 = tmp_53;
                                      }
                                      else 
                                           #line 2443 
                                           tmp_54 = 0U;
                                      #line 2443 
                                      tmp_55 = tmp_54;
                                    }
                                    else 
                                         #line 2443 
                                         tmp_55 = 0U;
                                    #line 2443 
                                    tmp_56 = tmp_55;
                                  }
                                  else 
                                       #line 2443 
                                       tmp_56 = 0U;
                                  #line 2443 
                                  tmp_57 = tmp_56;
                                }
                                else 
                                     #line 2443 
                                     tmp_57 = 0U;
                                #line 2443 
                                tmp_58 = tmp_57;
                              }
                              else 
                                   #line 2443 
                                   tmp_58 = 0U;
                              #line 2443 
                              tmp_59 = tmp_58;
                            }
                            else 
                                 #line 2443 
                                 tmp_59 = 0U;
                            #line 2443 
                            tmp_60 = tmp_59;
                          }
                          else 
                               #line 2443 
                               tmp_60 = 0U;
                          #line 2443 
                          tmp_61 = tmp_60;
                        }
                        else 
                             #line 2443 
                             tmp_61 = 0U;
                        #line 2443 
                        tmp_62 = tmp_61;
                      }
                      else 
                           #line 2443 
                           tmp_62 = 0U;
                      #line 2443 
                      tmp_63 = tmp_62;
                    }
                    else 
                         #line 2443 
                         tmp_63 = 0U;
                    #line 2443 
                    tmp_64 = tmp_63;
                  }
                  else 
                       #line 2443 
                       tmp_64 = 0U;
                  #line 2443 
                  tmp_65 = tmp_64;
                }
                else 
                     #line 2443 
                     tmp_65 = 0U;
                #line 2443 
                tmp_66 = tmp_65;
              }
              else 
                   #line 2443 
                   tmp_66 = 0U;
              #line 2443 
              tmp_67 = tmp_66;
            }
            else 
                 #line 2443 
                 tmp_67 = 2U;
            #line 2443 
            tmp_69 = tmp_67;
          }
          else {
            #line 2443 
            tmp_69 = (unsigned int)(1UL << (__ilog2_u32(cq_depth + 4294967295U) + 1));
          }
          #line 2443 
          tmp_70 = tmp_69;
        }
        else 
             #line 2443 
             tmp_70 = 1U;
        #line 2443 
        cq_depth = tmp_70;
      }
      else {
        #line 2443 
        cq_depth = (unsigned int)__roundup_pow_of_two((unsigned long)cq_depth);
      }
      #line 2444 
      (rxp->cq.ccb)->q_depth = cq_depth;
      #line 2445 
      (rxp->cq.ccb)->cq = & rxp->cq;
      #line 2446 
      (rxp->cq.ccb)->rcb[0] = q0->rcb;
      #line 2447 
      (q0->rcb)->ccb = rxp->cq.ccb;
      #line 2448 
      if (q1 != (struct bna_rxq *)0) {
        #line 2449 
        (rxp->cq.ccb)->rcb[1] = q1->rcb;
        #line 2450 
        (q1->rcb)->ccb = rxp->cq.ccb;
      }
      #line 2452 
      (rxp->cq.ccb)->hw_producer_index = (u32 *)rxp->cq.ib.ib_seg_host_addr_kva;
      #line 2454 
      (rxp->cq.ccb)->i_dbell = & rxp->cq.ib.door_bell;
      #line 2455 
      (rxp->cq.ccb)->intr_type = rxp->cq.ib.intr_type;
      #line 2456 
      (rxp->cq.ccb)->intr_vector = rxp->cq.ib.intr_vector;
      #line 2457 
      (rxp->cq.ccb)->rx_coalescing_timeo = rxp->cq.ib.coalescing_timeo;
      #line 2459 
      (rxp->cq.ccb)->pkt_rate.small_pkt_cnt = 0U;
      #line 2460 
      (rxp->cq.ccb)->pkt_rate.large_pkt_cnt = 0U;
      #line 2461 
      (rxp->cq.ccb)->bnad = bna->bnad;
      #line 2462 
      (rxp->cq.ccb)->id = (int)i;
      #line 2464 
      bna_rxp_cqpt_setup(rxp,page_count,4096U,cqpt_mem + (unsigned long)i,cswqpt_mem + (unsigned long)i,cpage_mem + (unsigned long)i);
      #line 2467 
      if (rx->ccb_setup_cbfn != (void (*)(struct bnad *, struct bna_ccb *))0) 
        #line 2468 
        (*(rx->ccb_setup_cbfn))(bnad,rxp->cq.ccb);
    }
    #line 2340 
    i ++;
  }
  #line 2471 
  rx->hds_cfg = rx_cfg->hds_config;
  #line 2473 
  bna_rxf_init(& rx->rxf,rx,rx_cfg,res_info);
  #line 2475 
  rx->fsm = (void (*)(void *, int ))(& bna_rx_sm_stopped);
  #line 2475 
  bna_rx_sm_stopped_entry(rx);
  #line 2477 
  rx_mod->rid_mask |= (unsigned int)(1UL << rx->rid);
  #line 2479 
  return rx;
}

#line 2483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_destroy(struct bna_rx *rx)
{
  #line 2488 
  struct bna_rxp *rxp;
  #line 2489 
  struct list_head *qe;
  #line 2485 
  struct bna_rx_mod *rx_mod = & (rx->bna)->rx_mod;
  #line 2486 
  struct bna_rxq *q0 = (struct bna_rxq *)0;
  #line 2487 
  struct bna_rxq *q1 = (struct bna_rxq *)0;
  #line 2491 
  bna_rxf_uninit(& rx->rxf);
  #line 2493 
  while (1) {
    #line 2493 
    if (! (list_empty(& rx->rxp_q) == 0)) 
                                          #line 2493 
                                          break;
    {
      #line 2494 
      void *__mptr;
      #line 2494 
      __mptr = (void *)rx->rxp_q.next;
      #line 2494 
      rxp = ((struct bna_rxp *)__mptr);
      #line 2495 
      list_del(& rxp->qe);
      #line 2496 
      switch ((unsigned int)rxp->type) {
        #line 2496 
        case (unsigned int)1: 
                              #line 2496 
        ;
        #line 2496 
        q0 = rxp->rxq.single.only;
        #line 2496 
        q1 = (struct bna_rxq *)0;
        #line 2496 
        break;
        #line 2496 
        case (unsigned int)2: 
                              #line 2496 
        ;
        #line 2496 
        q0 = rxp->rxq.slr.large;
        #line 2496 
        q1 = rxp->rxq.slr.small;
        #line 2496 
        break;
        #line 2496 
        case (unsigned int)3: 
                              #line 2496 
        ;
        #line 2496 
        q0 = rxp->rxq.hds.data;
        #line 2496 
        q1 = rxp->rxq.hds.hdr;
        #line 2496 
        break;
      }
      #line 2497 
      if (rx->rcb_destroy_cbfn != (void (*)(struct bnad *, struct bna_rcb *))0) 
        #line 2498 
        (*(rx->rcb_destroy_cbfn))((rx->bna)->bnad,q0->rcb);
      #line 2499 
      q0->rcb = (struct bna_rcb *)0;
      #line 2500 
      q0->rxp = (struct bna_rxp *)0;
      #line 2501 
      q0->rx = (struct bna_rx *)0;
      #line 2502 
      bna_rxq_put(rx_mod,q0);
      #line 2504 
      if (q1 != (struct bna_rxq *)0) {
        #line 2505 
        if (rx->rcb_destroy_cbfn != (void (*)(struct bnad *, struct bna_rcb *))0) 
          #line 2506 
          (*(rx->rcb_destroy_cbfn))((rx->bna)->bnad,q1->rcb);
        #line 2507 
        q1->rcb = (struct bna_rcb *)0;
        #line 2508 
        q1->rxp = (struct bna_rxp *)0;
        #line 2509 
        q1->rx = (struct bna_rx *)0;
        #line 2510 
        bna_rxq_put(rx_mod,q1);
      }
      #line 2512 
      rxp->rxq.slr.large = (struct bna_rxq *)0;
      #line 2513 
      rxp->rxq.slr.small = (struct bna_rxq *)0;
      #line 2515 
      if (rx->ccb_destroy_cbfn != (void (*)(struct bnad *, struct bna_ccb *))0) 
        #line 2516 
        (*(rx->ccb_destroy_cbfn))((rx->bna)->bnad,rxp->cq.ccb);
      #line 2517 
      rxp->cq.ccb = (struct bna_ccb *)0;
      #line 2518 
      rxp->rx = (struct bna_rx *)0;
      #line 2519 
      bna_rxp_put(rx_mod,rxp);
    }
  }
  #line 2522 
  qe = rx_mod->rx_active_q.next;
  #line 2522 
  while (& rx_mod->rx_active_q != qe) {
    #line 2523 
    if (& rx->qe == qe) {
      #line 2524 
      list_del(& rx->qe);
      #line 2525 
      break;
    }
    #line 2522 
    qe = qe->next;
  }
  #line 2528 
  rx_mod->rid_mask &= ~ ((unsigned int)(1UL << rx->rid));
  #line 2530 
  rx->bna = (struct bna *)0;
  #line 2531 
  rx->priv = (void *)0;
  #line 2532 
  bna_rx_put(rx_mod,rx);
  #line 2533 
  return;
}

#line 2536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_enable(struct bna_rx *rx)
{
  #line 2538 
  if (rx->fsm != (void (*)(void *, int ))(& bna_rx_sm_stopped)) 
                                                                #line 2539 
                                                                return;
  #line 2541 
  rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags | 2U);
  #line 2542 
  if (((unsigned int)rx->rx_flags & 1U) != 0U) 
                                               #line 2543 
                                               (*(rx->fsm))((void *)rx,1);
  #line 2544 
  return;
}

#line 2547  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_disable(struct bna_rx *rx, enum bna_cleanup_type type, void (*cbfn)(void *, struct bna_rx *))
{
  #line 2550 
  if (type == (unsigned int)BNA_SOFT_CLEANUP) 
                                              #line 2552 
                                              (*cbfn)((void *)(rx->bna)->bnad,rx);
  else {
    #line 2554 
    rx->stop_cbfn = cbfn;
    #line 2555 
    rx->stop_cbarg = (void *)(rx->bna)->bnad;
    #line 2557 
    rx->rx_flags = (enum bna_rx_flags)((unsigned int)rx->rx_flags & 4294967293U);
    #line 2559 
    (*(rx->fsm))((void *)rx,2);
  }
  #line 2561 
  return;
}

#line 2564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_cleanup_complete(struct bna_rx *rx)
{
  #line 2566 
  (*(rx->fsm))((void *)rx,8);
  #line 2567 
  return;
}

#line 2570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_vlan_strip_enable(struct bna_rx *rx)
{
  #line 2572 
  struct bna_rxf *rxf = & rx->rxf;
  #line 2574 
  if (rxf->vlan_strip_status == (unsigned int)BNA_STATUS_T_DISABLED) {
    #line 2575 
    rxf->vlan_strip_status = BNA_STATUS_T_ENABLED;
    #line 2576 
    rxf->vlan_strip_pending = (_Bool)1;
    #line 2577 
    (*(rxf->fsm))((void *)rxf,4);
  }
  #line 2579 
  return;
}

#line 2582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_vlan_strip_disable(struct bna_rx *rx)
{
  #line 2584 
  struct bna_rxf *rxf = & rx->rxf;
  #line 2586 
  if (rxf->vlan_strip_status != (unsigned int)BNA_STATUS_T_DISABLED) {
    #line 2587 
    rxf->vlan_strip_status = BNA_STATUS_T_DISABLED;
    #line 2588 
    rxf->vlan_strip_pending = (_Bool)1;
    #line 2589 
    (*(rxf->fsm))((void *)rxf,4);
  }
  #line 2591 
  return;
}

#line 2594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
enum bna_cb_status bna_rx_mode_set(struct bna_rx *rx, enum bna_rxmode new_mode, enum bna_rxmode bitmask)
{
  #line 2597 
  struct bna_rxf *rxf = & rx->rxf;
  #line 2598 
  int need_hw_config = 0;
  #line 2602 
  if (((unsigned int)bitmask & 1U) != 0U && ((unsigned int)new_mode & 1U) != 0U) {
    #line 2604 
    if ((rx->bna)->promisc_rid != -1 && (rx->bna)->promisc_rid != (rxf->rx)->rid) 
      #line 2606 
      goto err_return;
    #line 2609 
    if ((rx->bna)->default_mode_rid != -1) 
                                           #line 2610 
                                           goto err_return;
    #line 2613 
    if (((unsigned int)bitmask & 2U) != 0U && ((unsigned int)new_mode & 2U) != 0U) 
      #line 2614 
      goto err_return;
  }
  #line 2617 
  if (((unsigned int)bitmask & 2U) != 0U && ((unsigned int)new_mode & 2U) != 0U) {
    #line 2619 
    if ((rx->bna)->default_mode_rid != -1 && (rx->bna)->default_mode_rid != (rxf->rx)->rid) 
      #line 2621 
      goto err_return;
    #line 2625 
    if ((rx->bna)->promisc_rid != -1) 
                                      #line 2626 
                                      goto err_return;
  }
  #line 2631 
  if (((unsigned int)bitmask & 1U) != 0U && ((unsigned int)new_mode & 1U) != 0U) {
    #line 2632 
    if (bna_rxf_promisc_enable(rxf) != 0) 
                                          #line 2633 
                                          need_hw_config = 1;
  }
  else 
    #line 2634 
    if (((unsigned int)bitmask & 1U) != 0U && ((unsigned int)new_mode & 1U) == 0U) {
      #line 2635 
      if (bna_rxf_promisc_disable(rxf) != 0) 
                                             #line 2636 
                                             need_hw_config = 1;
    }
  #line 2639 
  if (((unsigned int)bitmask & 4U) != 0U && ((unsigned int)new_mode & 4U) != 0U) {
    #line 2640 
    if (bna_rxf_allmulti_enable(rxf) != 0) 
                                           #line 2641 
                                           need_hw_config = 1;
  }
  else 
    #line 2642 
    if (((unsigned int)bitmask & 4U) != 0U && ((unsigned int)new_mode & 4U) == 0U) {
      #line 2643 
      if (bna_rxf_allmulti_disable(rxf) != 0) 
                                              #line 2644 
                                              need_hw_config = 1;
    }
  #line 2649 
  if (need_hw_config != 0) {
    #line 2650 
    rxf->cam_fltr_cbfn = (void (*)(struct bnad *, struct bna_rx *))0;
    #line 2651 
    rxf->cam_fltr_cbarg = (rx->bna)->bnad;
    #line 2652 
    (*(rxf->fsm))((void *)rxf,4);
  }
  #line 2655 
  return BNA_CB_SUCCESS;
  #line 2657 
  err_return: 
              #line 2657 
  ;
  #line 2658 
  return BNA_CB_FAIL;
}

#line 2662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_vlanfilter_enable(struct bna_rx *rx)
{
  #line 2664 
  struct bna_rxf *rxf = & rx->rxf;
  #line 2666 
  if (rxf->vlan_filter_status == (unsigned int)BNA_STATUS_T_DISABLED) {
    #line 2667 
    rxf->vlan_filter_status = BNA_STATUS_T_ENABLED;
    #line 2668 
    rxf->vlan_pending_bitmask = (unsigned char)255U;
    #line 2669 
    (*(rxf->fsm))((void *)rxf,4);
  }
  #line 2671 
  return;
}

#line 2674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_coalescing_timeo_set(struct bna_rx *rx, int coalescing_timeo)
{
  #line 2678 
  void *__mptr;
  #line 2676 
  struct bna_rxp *rxp;
  #line 2678 
  __mptr = (void *)rx->rxp_q.next;
  #line 2678 
  rxp = ((struct bna_rxp *)__mptr);
  #line 2678 
  while (& rxp->qe != & rx->rxp_q) {
    #line 2678 
    void *__mptr_0;
    #line 2679 
    (rxp->cq.ccb)->rx_coalescing_timeo = (unsigned char)coalescing_timeo;
    #line 2680 
    bna_ib_coalescing_timeo_set(& rxp->cq.ib,(unsigned char)((int)((unsigned char)coalescing_timeo)));
    #line 2678 
    __mptr_0 = (void *)rxp->qe.next;
    #line 2678 
    rxp = ((struct bna_rxp *)__mptr_0);
  }
  #line 2682 
  return;
}

#line 2685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_dim_reconfig(struct bna *bna, u32 (*vector)[2U])
{
  #line 2687 
  int i;
  #line 2687 
  int j;
  #line 2689 
  i = 0;
  #line 2689 
  while (i <= 7) {
    #line 2690 
    j = 0;
    #line 2690 
    while (j <= 1) {
      #line 2691 
      bna->rx_mod.dim_vector[i][j] = (*(vector + (unsigned long)i))[j];
      #line 2690 
      j ++;
    }
    #line 2689 
    i ++;
  }
  #line 2693 
  return;
}

#line 2695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_rx_dim_update(struct bna_ccb *ccb)
{
  #line 2698 
  u32 load;
  #line 2698 
  u32 bias;
  #line 2699 
  u32 pkt_rt;
  #line 2699 
  u32 small_rt;
  #line 2699 
  u32 large_rt;
  #line 2700 
  u8 coalescing_timeo;
  #line 2697 
  struct bna *bna = ((ccb->cq)->rx)->bna;
  #line 2702 
  if (ccb->pkt_rate.small_pkt_cnt == 0U && ccb->pkt_rate.large_pkt_cnt == 0U) 
    #line 2704 
    return;
  #line 2708 
  small_rt = ccb->pkt_rate.small_pkt_cnt;
  #line 2709 
  large_rt = ccb->pkt_rate.large_pkt_cnt;
  #line 2711 
  pkt_rt = small_rt + large_rt;
  #line 2713 
  if (pkt_rt <= 9999U) 
                       #line 2714 
                       load = 7U;
  else 
    #line 2715 
    if (pkt_rt <= 19999U) 
                          #line 2716 
                          load = 6U;
    else 
      #line 2717 
      if (pkt_rt <= 29999U) 
                            #line 2718 
                            load = 5U;
      else 
        #line 2719 
        if (pkt_rt <= 39999U) 
                              #line 2720 
                              load = 4U;
        else 
          #line 2721 
          if (pkt_rt <= 49999U) 
                                #line 2722 
                                load = 3U;
          else 
            #line 2723 
            if (pkt_rt <= 59999U) 
                                  #line 2724 
                                  load = 2U;
            else 
              #line 2725 
              if (pkt_rt <= 79999U) 
                                    #line 2726 
                                    load = 1U; else 
                                                    #line 2728 
                                                    load = 0U;
  #line 2730 
  if (large_rt << 1 < small_rt) 
                                #line 2731 
                                bias = 0U; else 
                                                #line 2733 
                                                bias = 1U;
  #line 2735 
  ccb->pkt_rate.small_pkt_cnt = 0U;
  #line 2736 
  ccb->pkt_rate.large_pkt_cnt = 0U;
  #line 2738 
  coalescing_timeo = (unsigned char)bna->rx_mod.dim_vector[load][bias];
  #line 2739 
  ccb->rx_coalescing_timeo = coalescing_timeo;
  #line 2742 
  bna_ib_coalescing_timeo_set(& (ccb->cq)->ib,(unsigned char)((int)coalescing_timeo));
  #line 2743 
  return;
}

#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
u32 bna_napi_dim_vector[8U][2U] = {{12U, 12U}, {6U, 10U}, {5U, 10U}, {4U, 8U}, {3U, 6U}, {3U, 6U}, {2U, 4U}, {1U, 2U}};
#line 2771 
#line 3559 
static void bna_tx_mod_cb_tx_stopped(void *arg, struct bna_tx *tx);
#line 2772 
#line 3086 
static void bna_bfi_tx_enet_start(struct bna_tx *tx);
#line 2773 
#line 3149 
static void bna_tx_enet_stop(struct bna_tx *tx);
#line 2785 
#line 2806 
static void bna_tx_sm_stopped(struct bna_tx *tx, enum bna_tx_event event);
#line 2785 
#line 2800 
static void bna_tx_sm_stopped_entry(struct bna_tx *tx);
#line 2786 
#line 2837 
static void bna_tx_sm_start_wait(struct bna_tx *tx, enum bna_tx_event event);
#line 2786 
#line 2831 
static void bna_tx_sm_start_wait_entry(struct bna_tx *tx);
#line 2787 
#line 2882 
static void bna_tx_sm_started(struct bna_tx *tx, enum bna_tx_event event);
#line 2787 
#line 2868 
static void bna_tx_sm_started_entry(struct bna_tx *tx);
#line 2788 
#line 2912 
static void bna_tx_sm_stop_wait(struct bna_tx *tx, enum bna_tx_event event);
#line 2788 
#line 2907 
static void bna_tx_sm_stop_wait_entry(struct bna_tx *tx);
#line 2789 
#line 2944 
static void bna_tx_sm_cleanup_wait(struct bna_tx *tx, enum bna_tx_event event);
#line 2789 
#line 2939 
static void bna_tx_sm_cleanup_wait_entry(struct bna_tx *tx);
#line 2791 
#line 2969 
static void bna_tx_sm_prio_stop_wait(struct bna_tx *tx, enum bna_tx_event event);
#line 2791 
#line 2962 
static void bna_tx_sm_prio_stop_wait_entry(struct bna_tx *tx);
#line 2793 
#line 3001 
static void bna_tx_sm_prio_cleanup_wait(struct bna_tx *tx, enum bna_tx_event event);
#line 2793 
#line 2995 
static void bna_tx_sm_prio_cleanup_wait_entry(struct bna_tx *tx);
#line 2795 
#line 3031 
static void bna_tx_sm_failed(struct bna_tx *tx, enum bna_tx_event event);
#line 2795 
#line 3026 
static void bna_tx_sm_failed_entry(struct bna_tx *tx);
#line 2796 
#line 3061 
static void bna_tx_sm_quiesce_wait(struct bna_tx *tx, enum bna_tx_event event);
#line 2796 
#line 3056 
static void bna_tx_sm_quiesce_wait_entry(struct bna_tx *tx);
#line 2800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_stopped_entry(struct bna_tx *tx)
{
  #line 2802 
  if (tx->stop_cbfn != (void (*)(void *, struct bna_tx *))0) {
    #line 2802 
    void (*cbfn)(void *, struct bna_tx *);
    #line 2802 
    void *cbarg;
    #line 2802 
    cbfn = tx->stop_cbfn;
    #line 2802 
    cbarg = tx->stop_cbarg;
    #line 2802 
    tx->stop_cbfn = (void (*)(void *, struct bna_tx *))0;
    #line 2802 
    tx->stop_cbarg = (void *)0;
    #line 2802 
    (*cbfn)(cbarg,tx);
  }
  #line 2804 
  return;
}

#line 2806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_stopped(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 2808 
  switch ((unsigned int)event) {
    #line 2809 
    case (unsigned int)1: 
                          #line 2809 
    ;
    #line 2810 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_start_wait);
    #line 2810 
    bna_tx_sm_start_wait_entry(tx);
    #line 2811 
    break;
    #line 2813 
    case (unsigned int)2: 
                          #line 2813 
    ;
    #line 2814 
    if (tx->stop_cbfn != (void (*)(void *, struct bna_tx *))0) {
      #line 2814 
      void (*cbfn)(void *, struct bna_tx *);
      #line 2814 
      void *cbarg;
      #line 2814 
      cbfn = tx->stop_cbfn;
      #line 2814 
      cbarg = tx->stop_cbarg;
      #line 2814 
      tx->stop_cbfn = (void (*)(void *, struct bna_tx *))0;
      #line 2814 
      tx->stop_cbarg = (void *)0;
      #line 2814 
      (*cbfn)(cbarg,tx);
    }
    #line 2815 
    break;
    #line 2817 
    case (unsigned int)3: 
                          #line 2817 
    ;
    #line 2819 
    break;
    #line 2821 
    case (unsigned int)8: 
                          #line 2821 
    ;
    #line 2823 
    break;
    #line 2825 
    default: 
             #line 2825 
    ;
    #line 2826 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",2826,(unsigned int)event);
  }
  #line 2828 
  return;
}

#line 2831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_start_wait_entry(struct bna_tx *tx)
{
  #line 2833 
  bna_bfi_tx_enet_start(tx);
  #line 2834 
  return;
}

#line 2837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_start_wait(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 2839 
  switch ((unsigned int)event) {
    #line 2840 
    case (unsigned int)2: 
                          #line 2840 
    ;
    #line 2841 
    tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags & 4294967287U);
    #line 2842 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stop_wait);
    #line 2842 
    bna_tx_sm_stop_wait_entry(tx);
    #line 2843 
    break;
    #line 2845 
    case (unsigned int)3: 
                          #line 2845 
    ;
    #line 2846 
    tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags & 4294967287U);
    #line 2847 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stopped);
    #line 2847 
    bna_tx_sm_stopped_entry(tx);
    #line 2848 
    break;
    #line 2850 
    case (unsigned int)4: 
                          #line 2850 
    ;
    #line 2851 
    if (((unsigned int)tx->flags & 8U) != 0U) {
      #line 2852 
      tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags & 4294967287U);
      #line 2853 
      tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_prio_stop_wait);
      #line 2853 
      bna_tx_sm_prio_stop_wait_entry(tx);
    }
    else {
      #line 2855 
      tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_started);
      #line 2855 
      bna_tx_sm_started_entry(tx);
    }
    #line 2856 
    break;
    #line 2858 
    case (unsigned int)8: 
                          #line 2858 
    ;
    #line 2859 
    tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags | 8U);
    #line 2860 
    break;
    #line 2862 
    default: 
             #line 2862 
    ;
    #line 2863 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",2863,(unsigned int)event);
  }
  #line 2865 
  return;
}

#line 2868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_started_entry(struct bna_tx *tx)
{
  #line 2873 
  void *__mptr;
  #line 2870 
  struct bna_txq *txq;
  #line 2871 
  int is_regular = tx->type == (unsigned int)BNA_TX_T_REGULAR;
  #line 2873 
  __mptr = (void *)tx->txq_q.next;
  #line 2873 
  txq = ((struct bna_txq *)__mptr);
  #line 2873 
  while (& txq->qe != & tx->txq_q) {
    #line 2873 
    void *__mptr_0;
    #line 2874 
    (txq->tcb)->priority = txq->priority;
    {
      #line 2876 
      u32 intx_mask;
      #line 2876 
      struct bna_ib *ib = & txq->ib;
      #line 2876 
      if (ib->intr_type == (unsigned int)BNA_INTR_T_INTX) {
        #line 2876 
        intx_mask = readl((tx->bna)->regs.fn_int_mask);
        #line 2876 
        writel(4294967295U,(tx->bna)->regs.fn_int_mask);
        #line 2876 
        intx_mask = (unsigned int)(~ ib->intr_vector) & intx_mask;
        #line 2876 
        writel(intx_mask,(tx->bna)->regs.fn_int_mask);
      }
      #line 2876 
      ib->door_bell.doorbell_ack = (unsigned int)((int)ib->coalescing_timeo << 16) | 2147483648U;
      #line 2876 
      if (is_regular != 0) 
                           #line 2876 
                           writel(ib->door_bell.doorbell_ack,ib->door_bell.doorbell_addr);
    }
    #line 2873 
    __mptr_0 = (void *)txq->qe.next;
    #line 2873 
    txq = ((struct bna_txq *)__mptr_0);
  }
  #line 2878 
  (*(tx->tx_resume_cbfn))((tx->bna)->bnad,tx);
  #line 2879 
  return;
}

#line 2882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_started(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 2884 
  switch ((unsigned int)event) {
    #line 2885 
    case (unsigned int)2: 
                          #line 2885 
    ;
    #line 2886 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stop_wait);
    #line 2886 
    bna_tx_sm_stop_wait_entry(tx);
    #line 2887 
    (*(tx->tx_stall_cbfn))((tx->bna)->bnad,tx);
    #line 2888 
    bna_tx_enet_stop(tx);
    #line 2889 
    break;
    #line 2891 
    case (unsigned int)3: 
                          #line 2891 
    ;
    #line 2892 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_failed);
    #line 2892 
    bna_tx_sm_failed_entry(tx);
    #line 2893 
    (*(tx->tx_stall_cbfn))((tx->bna)->bnad,tx);
    #line 2894 
    (*(tx->tx_cleanup_cbfn))((tx->bna)->bnad,tx);
    #line 2895 
    break;
    #line 2897 
    case (unsigned int)8: 
                          #line 2897 
    ;
    #line 2898 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_prio_stop_wait);
    #line 2898 
    bna_tx_sm_prio_stop_wait_entry(tx);
    #line 2899 
    break;
    #line 2901 
    default: 
             #line 2901 
    ;
    #line 2902 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",2902,(unsigned int)event);
  }
  #line 2904 
  return;
}

#line 2907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_stop_wait_entry(struct bna_tx *tx)
{
  #line 2909 
  return;
}

#line 2912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_stop_wait(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 2914 
  switch ((unsigned int)event) {
    #line 2915 
    case (unsigned int)3: 
                          #line 2915 
    ;
    #line 2916 
    case (unsigned int)5: 
                          #line 2916 
    ;
    #line 2917 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_cleanup_wait);
    #line 2917 
    bna_tx_sm_cleanup_wait_entry(tx);
    #line 2918 
    (*(tx->tx_cleanup_cbfn))((tx->bna)->bnad,tx);
    #line 2919 
    break;
    #line 2921 
    case (unsigned int)4: 
                          #line 2921 
    ;
    #line 2926 
    bna_tx_enet_stop(tx);
    #line 2927 
    break;
    #line 2929 
    case (unsigned int)8: 
                          #line 2929 
    ;
    #line 2931 
    break;
    #line 2933 
    default: 
             #line 2933 
    ;
    #line 2934 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",2934,(unsigned int)event);
  }
  #line 2936 
  return;
}

#line 2939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_cleanup_wait_entry(struct bna_tx *tx)
{
  #line 2941 
  return;
}

#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_cleanup_wait(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 2946 
  switch ((unsigned int)event) {
    #line 2947 
    case (unsigned int)3: 
                          #line 2947 
    ;
    #line 2948 
    case (unsigned int)8: 
                          #line 2948 
    ;
    #line 2950 
    break;
    #line 2952 
    case (unsigned int)7: 
                          #line 2952 
    ;
    #line 2953 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stopped);
    #line 2953 
    bna_tx_sm_stopped_entry(tx);
    #line 2954 
    break;
    #line 2956 
    default: 
             #line 2956 
    ;
    #line 2957 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",2957,(unsigned int)event);
  }
  #line 2959 
  return;
}

#line 2962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_prio_stop_wait_entry(struct bna_tx *tx)
{
  #line 2964 
  (*(tx->tx_stall_cbfn))((tx->bna)->bnad,tx);
  #line 2965 
  bna_tx_enet_stop(tx);
  #line 2966 
  return;
}

#line 2969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_prio_stop_wait(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 2971 
  switch ((unsigned int)event) {
    #line 2972 
    case (unsigned int)2: 
                          #line 2972 
    ;
    #line 2973 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stop_wait);
    #line 2973 
    bna_tx_sm_stop_wait_entry(tx);
    #line 2974 
    break;
    #line 2976 
    case (unsigned int)3: 
                          #line 2976 
    ;
    #line 2977 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_failed);
    #line 2977 
    bna_tx_sm_failed_entry(tx);
    #line 2978 
    (*(tx->tx_cleanup_cbfn))((tx->bna)->bnad,tx);
    #line 2979 
    break;
    #line 2981 
    case (unsigned int)5: 
                          #line 2981 
    ;
    #line 2982 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_prio_cleanup_wait);
    #line 2982 
    bna_tx_sm_prio_cleanup_wait_entry(tx);
    #line 2983 
    break;
    #line 2985 
    case (unsigned int)8: 
                          #line 2985 
    ;
    #line 2987 
    break;
    #line 2989 
    default: 
             #line 2989 
    ;
    #line 2990 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",2990,(unsigned int)event);
  }
  #line 2992 
  return;
}

#line 2995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_prio_cleanup_wait_entry(struct bna_tx *tx)
{
  #line 2997 
  (*(tx->tx_cleanup_cbfn))((tx->bna)->bnad,tx);
  #line 2998 
  return;
}

#line 3001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_prio_cleanup_wait(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 3003 
  switch ((unsigned int)event) {
    #line 3004 
    case (unsigned int)2: 
                          #line 3004 
    ;
    #line 3005 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_cleanup_wait);
    #line 3005 
    bna_tx_sm_cleanup_wait_entry(tx);
    #line 3006 
    break;
    #line 3008 
    case (unsigned int)3: 
                          #line 3008 
    ;
    #line 3009 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_failed);
    #line 3009 
    bna_tx_sm_failed_entry(tx);
    #line 3010 
    break;
    #line 3012 
    case (unsigned int)8: 
                          #line 3012 
    ;
    #line 3014 
    break;
    #line 3016 
    case (unsigned int)7: 
                          #line 3016 
    ;
    #line 3017 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_start_wait);
    #line 3017 
    bna_tx_sm_start_wait_entry(tx);
    #line 3018 
    break;
    #line 3020 
    default: 
             #line 3020 
    ;
    #line 3021 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",3021,(unsigned int)event);
  }
  #line 3023 
  return;
}

#line 3026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_failed_entry(struct bna_tx *tx)
{
  #line 3028 
  return;
}

#line 3031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_failed(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 3033 
  switch ((unsigned int)event) {
    #line 3034 
    case (unsigned int)1: 
                          #line 3034 
    ;
    #line 3035 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_quiesce_wait);
    #line 3035 
    bna_tx_sm_quiesce_wait_entry(tx);
    #line 3036 
    break;
    #line 3038 
    case (unsigned int)2: 
                          #line 3038 
    ;
    #line 3039 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_cleanup_wait);
    #line 3039 
    bna_tx_sm_cleanup_wait_entry(tx);
    #line 3040 
    break;
    #line 3042 
    case (unsigned int)3: 
                          #line 3042 
    ;
    #line 3044 
    break;
    #line 3046 
    case (unsigned int)7: 
                          #line 3046 
    ;
    #line 3047 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stopped);
    #line 3047 
    bna_tx_sm_stopped_entry(tx);
    #line 3048 
    break;
    #line 3050 
    default: 
             #line 3050 
    ;
    #line 3051 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",3051,(unsigned int)event);
  }
  #line 3053 
  return;
}

#line 3056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_quiesce_wait_entry(struct bna_tx *tx)
{
  #line 3058 
  return;
}

#line 3061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_sm_quiesce_wait(struct bna_tx *tx, enum bna_tx_event event)
{
  #line 3063 
  switch ((unsigned int)event) {
    #line 3064 
    case (unsigned int)2: 
                          #line 3064 
    ;
    #line 3065 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_cleanup_wait);
    #line 3065 
    bna_tx_sm_cleanup_wait_entry(tx);
    #line 3066 
    break;
    #line 3068 
    case (unsigned int)3: 
                          #line 3068 
    ;
    #line 3069 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_failed);
    #line 3069 
    bna_tx_sm_failed_entry(tx);
    #line 3070 
    break;
    #line 3072 
    case (unsigned int)7: 
                          #line 3072 
    ;
    #line 3073 
    tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_start_wait);
    #line 3073 
    bna_tx_sm_start_wait_entry(tx);
    #line 3074 
    break;
    #line 3076 
    case (unsigned int)8: 
                          #line 3076 
    ;
    #line 3078 
    break;
    #line 3080 
    default: 
             #line 3080 
    ;
    #line 3081 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c",3081,(unsigned int)event);
  }
  #line 3083 
  return;
}

#line 3086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_tx_enet_start(struct bna_tx *tx)
{
  #line 3090 
  int i;
  #line 3088 
  struct bfi_enet_tx_cfg_req *cfg_req = & tx->bfi_enet_cmd.cfg_req;
  #line 3089 
  struct bna_txq *txq = (struct bna_txq *)0;
  #line 3092 
  cfg_req->mh.msg_class = (unsigned char)24U;
  #line 3092 
  cfg_req->mh.msg_id = (unsigned char)17U;
  #line 3092 
  cfg_req->mh.msg_token = (unsigned short)0U;
  #line 3092 
  cfg_req->mh.enet_id = (unsigned char)tx->rid;
  #line 3094 
  cfg_req->mh.num_entries = (unsigned short)1536U;
  #line 3097 
  cfg_req->num_queues = (unsigned char)tx->num_txq;
  #line 3098 
  i = 0;
  #line 3098 
  while (tx->num_txq > i) {
    #line 3099 
    if (txq != (struct bna_txq *)0) {
      #line 3099 
      void *__mptr;
      #line 3099 
      __mptr = (void *)txq->qe.next;
      #line 3099 
      txq = ((struct bna_txq *)__mptr);
    }
    else {
      #line 3100 
      void *__mptr_0;
      #line 3100 
      __mptr_0 = (void *)tx->txq_q.next;
      #line 3099 
      txq = ((struct bna_txq *)__mptr_0);
    }
    {
      #line 3101 
      struct bna_dma_addr cur_q_addr = *((struct bna_dma_addr *)txq->qpt.kv_qpt_ptr);
      #line 3101 
      cfg_req->q_cfg[i].q.q.pg_tbl.a32.addr_lo = txq->qpt.hw_qpt_ptr.lsb;
      #line 3101 
      cfg_req->q_cfg[i].q.q.pg_tbl.a32.addr_hi = txq->qpt.hw_qpt_ptr.msb;
      #line 3101 
      cfg_req->q_cfg[i].q.q.first_entry.a32.addr_lo = cur_q_addr.lsb;
      #line 3101 
      cfg_req->q_cfg[i].q.q.first_entry.a32.addr_hi = cur_q_addr.msb;
      #line 3101 
      cfg_req->q_cfg[i].q.q.pages = __builtin_bswap16((unsigned short)((int)((unsigned short)txq->qpt.page_count)));
      #line 3101 
      cfg_req->q_cfg[i].q.q.page_sz = __builtin_bswap16((unsigned short)((int)((unsigned short)txq->qpt.page_size)));
    }
    #line 3102 
    cfg_req->q_cfg[i].q.priority = txq->priority;
    #line 3104 
    cfg_req->q_cfg[i].ib.index_addr.a32.addr_lo = txq->ib.ib_seg_host_addr.lsb;
    #line 3106 
    cfg_req->q_cfg[i].ib.index_addr.a32.addr_hi = txq->ib.ib_seg_host_addr.msb;
    #line 3108 
    cfg_req->q_cfg[i].ib.intr.msix_index = __builtin_bswap16((unsigned short)((int)((unsigned short)txq->ib.intr_vector)));
    #line 3098 
    i ++;
  }
  #line 3112 
  cfg_req->ib_cfg.int_pkt_dma = (unsigned char)1U;
  #line 3113 
  cfg_req->ib_cfg.int_enabled = (unsigned char)1U;
  #line 3114 
  cfg_req->ib_cfg.int_pkt_enabled = (unsigned char)0U;
  #line 3115 
  cfg_req->ib_cfg.continuous_coalescing = (unsigned char)1U;
  #line 3116 
  cfg_req->ib_cfg.msix = (unsigned char)(txq->ib.intr_type == (unsigned int)BNA_INTR_T_MSIX);
  #line 3118 
  cfg_req->ib_cfg.coalescing_timeout = __builtin_bswap32((unsigned int)txq->ib.coalescing_timeo);
  #line 3120 
  cfg_req->ib_cfg.inter_pkt_timeout = __builtin_bswap32((unsigned int)txq->ib.interpkt_timeo);
  #line 3122 
  cfg_req->ib_cfg.inter_pkt_count = (unsigned char)txq->ib.interpkt_count;
  #line 3124 
  cfg_req->tx_cfg.vlan_mode = (unsigned char)2U;
  #line 3125 
  cfg_req->tx_cfg.vlan_id = __builtin_bswap16((unsigned short)((int)tx->txf_vlan_id));
  #line 3126 
  cfg_req->tx_cfg.admit_tagged_frame = (unsigned char)1U;
  #line 3127 
  cfg_req->tx_cfg.apply_vlan_filter = (unsigned char)0U;
  #line 3129 
  tx->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 3129 
  tx->msgq_cmd.cbarg = (void *)0;
  #line 3129 
  tx->msgq_cmd.msg_size = 328UL;
  #line 3129 
  tx->msgq_cmd.msg_hdr = & cfg_req->mh;
  #line 3131 
  bfa_msgq_cmd_post(& (tx->bna)->msgq,& tx->msgq_cmd);
  #line 3132 
  return;
}

#line 3135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_bfi_tx_enet_stop(struct bna_tx *tx)
{
  #line 3137 
  struct bfi_enet_req *req = & tx->bfi_enet_cmd.req;
  #line 3139 
  req->mh.msg_class = (unsigned char)24U;
  #line 3139 
  req->mh.msg_id = (unsigned char)18U;
  #line 3139 
  req->mh.msg_token = (unsigned short)0U;
  #line 3139 
  req->mh.enet_id = (unsigned char)tx->rid;
  #line 3141 
  req->mh.num_entries = (unsigned short)256U;
  #line 3143 
  tx->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 3143 
  tx->msgq_cmd.cbarg = (void *)0;
  #line 3143 
  tx->msgq_cmd.msg_size = 8UL;
  #line 3143 
  tx->msgq_cmd.msg_hdr = & req->mh;
  #line 3145 
  bfa_msgq_cmd_post(& (tx->bna)->msgq,& tx->msgq_cmd);
  #line 3146 
  return;
}

#line 3149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_enet_stop(struct bna_tx *tx)
{
  #line 3154 
  void *__mptr;
  #line 3151 
  struct bna_txq *txq;
  #line 3154 
  __mptr = (void *)tx->txq_q.next;
  #line 3154 
  txq = ((struct bna_txq *)__mptr);
  #line 3154 
  while (& txq->qe != & tx->txq_q) {
    #line 3154 
    void *__mptr_0;
    {
      #line 3155 
      u32 intx_mask;
      #line 3155 
      struct bna_ib *ib = & txq->ib;
      #line 3155 
      writel(1073741824U,ib->door_bell.doorbell_addr);
      #line 3155 
      if (ib->intr_type == (unsigned int)BNA_INTR_T_INTX) {
        #line 3155 
        intx_mask = readl((tx->bna)->regs.fn_int_mask);
        #line 3155 
        writel(4294967295U,(tx->bna)->regs.fn_int_mask);
        #line 3155 
        intx_mask = (unsigned int)ib->intr_vector | intx_mask;
        #line 3155 
        writel(intx_mask,(tx->bna)->regs.fn_int_mask);
      }
    }
    #line 3154 
    __mptr_0 = (void *)txq->qe.next;
    #line 3154 
    txq = ((struct bna_txq *)__mptr_0);
  }
  #line 3157 
  bna_bfi_tx_enet_stop(tx);
  #line 3158 
  return;
}

#line 3161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_txq_qpt_setup(struct bna_txq *txq, int page_count, int page_size, struct bna_mem_descr *qpt_mem, struct bna_mem_descr *swqpt_mem, struct bna_mem_descr *page_mem)
{
  #line 3166 
  u8 *kva;
  #line 3167 
  u64 dma;
  #line 3168 
  struct bna_dma_addr bna_dma;
  #line 3169 
  int i;
  #line 3171 
  txq->qpt.hw_qpt_ptr.lsb = qpt_mem->dma.lsb;
  #line 3172 
  txq->qpt.hw_qpt_ptr.msb = qpt_mem->dma.msb;
  #line 3173 
  txq->qpt.kv_qpt_ptr = qpt_mem->kva;
  #line 3174 
  txq->qpt.page_count = (unsigned int)page_count;
  #line 3175 
  txq->qpt.page_size = (unsigned int)page_size;
  #line 3177 
  (txq->tcb)->sw_qpt = (void **)swqpt_mem->kva;
  #line 3178 
  (txq->tcb)->sw_q = page_mem->kva;
  #line 3180 
  kva = (u8 *)page_mem->kva;
  #line 3181 
  dma = ((unsigned long long)__builtin_bswap32(page_mem->dma.msb) << 32) | (unsigned long long)__builtin_bswap32(page_mem->dma.lsb);
  #line 3183 
  i = 0;
  #line 3183 
  while (i < page_count) {
    #line 3184 
    *((txq->tcb)->sw_qpt + (unsigned long)i) = (void *)kva;
    #line 3185 
    kva += 4096UL;
    {
      #line 3187 
      u64 tmp_addr = __builtin_bswap64((unsigned long)dma);
      #line 3187 
      bna_dma.msb = ((struct bna_dma_addr *)(& tmp_addr))->msb;
      #line 3187 
      bna_dma.lsb = ((struct bna_dma_addr *)(& tmp_addr))->lsb;
    }
    #line 3188 
    ((struct bna_dma_addr *)txq->qpt.kv_qpt_ptr + (unsigned long)i)->lsb = bna_dma.lsb;
    #line 3190 
    ((struct bna_dma_addr *)txq->qpt.kv_qpt_ptr + (unsigned long)i)->msb = bna_dma.msb;
    #line 3192 
    dma += 4096ULL;
    #line 3183 
    i ++;
  }
  #line 3194 
  return;
}

#line 3197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static struct bna_tx *bna_tx_get(struct bna_tx_mod *tx_mod, enum bna_tx_type type)
{
  #line 3199 
  struct bna_tx *tx = (struct bna_tx *)0;
  #line 3201 
  if (list_empty(& tx_mod->tx_free_q) != 0) 
                                            #line 3202 
                                            return (struct bna_tx *)0;
  #line 3203 
  if (type == (unsigned int)BNA_TX_T_REGULAR) {
    #line 3204 
    void *__mptr;
    #line 3204 
    __mptr = (void *)tx_mod->tx_free_q.next;
    #line 3204 
    tx = ((struct bna_tx *)__mptr);
  }
  else {
    #line 3206 
    void *__mptr_0;
    #line 3206 
    __mptr_0 = (void *)tx_mod->tx_free_q.prev;
    #line 3206 
    tx = ((struct bna_tx *)__mptr_0);
  }
  #line 3207 
  list_del(& tx->qe);
  #line 3208 
  tx->type = type;
  #line 3210 
  return tx;
}

#line 3214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_free(struct bna_tx *tx)
{
  #line 3217 
  struct bna_txq *txq;
  #line 3218 
  struct list_head *qe;
  #line 3216 
  struct bna_tx_mod *tx_mod = & (tx->bna)->tx_mod;
  #line 3220 
  while (1) {
    #line 3220 
    if (! (list_empty(& tx->txq_q) == 0)) 
                                          #line 3220 
                                          break;
    {
      #line 3221 
      void *__mptr;
      #line 3221 
      __mptr = (void *)tx->txq_q.next;
      #line 3221 
      txq = ((struct bna_txq *)__mptr);
      #line 3222 
      txq->tcb = (struct bna_tcb *)0;
      #line 3223 
      txq->tx = (struct bna_tx *)0;
      #line 3224 
      list_move_tail(& txq->qe,& tx_mod->txq_free_q);
    }
  }
  #line 3227 
  qe = tx_mod->tx_active_q.next;
  #line 3227 
  while (& tx_mod->tx_active_q != qe) {
    #line 3228 
    if (& tx->qe == qe) {
      #line 3229 
      list_del(& tx->qe);
      #line 3230 
      break;
    }
    #line 3227 
    qe = qe->next;
  }
  #line 3234 
  tx->bna = (struct bna *)0;
  #line 3235 
  tx->priv = (void *)0;
  #line 3237 
  qe = tx_mod->tx_free_q.prev;
  #line 3237 
  while (& tx_mod->tx_free_q != qe) {
    #line 3238 
    if (((struct bna_tx *)qe)->rid < tx->rid) 
                                              #line 3239 
                                              break;
    #line 3237 
    qe = qe->prev;
  }
  #line 3241 
  list_add(& tx->qe,qe);
  #line 3242 
  return;
}

#line 3245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_start(struct bna_tx *tx)
{
  #line 3247 
  tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags | 1U);
  #line 3248 
  if (((unsigned int)tx->flags & 2U) != 0U) 
                                            #line 3249 
                                            (*(tx->fsm))((void *)tx,1);
  #line 3250 
  return;
}

#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_stop(struct bna_tx *tx)
{
  #line 3255 
  tx->stop_cbfn = & bna_tx_mod_cb_tx_stopped;
  #line 3256 
  tx->stop_cbarg = (void *)(& (tx->bna)->tx_mod);
  #line 3258 
  tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags & 4294967294U);
  #line 3259 
  (*(tx->fsm))((void *)tx,2);
  #line 3260 
  return;
}

#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_fail(struct bna_tx *tx)
{
  #line 3265 
  tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags & 4294967294U);
  #line 3266 
  (*(tx->fsm))((void *)tx,3);
  #line 3267 
  return;
}

#line 3270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_tx_enet_start_rsp(struct bna_tx *tx, struct bfi_msgq_mhdr *msghdr)
{
  #line 3281 
  void *__mptr;
  #line 3274 
  int i;
  #line 3272 
  struct bfi_enet_tx_cfg_rsp *cfg_rsp = & tx->bfi_enet_cmd.cfg_rsp;
  #line 3273 
  struct bna_txq *txq = (struct bna_txq *)0;
  #line 3276 
  bfa_msgq_rsp_copy(& (tx->bna)->msgq,(u8 *)cfg_rsp,108UL);
  #line 3279 
  tx->hw_id = (int)cfg_rsp->hw_id;
  #line 3281 
  i = 0;
  #line 3281 
  __mptr = (void *)tx->txq_q.next;
  #line 3281 
  txq = ((struct bna_txq *)__mptr);
  #line 3281 
  while (tx->num_txq > i) {
    #line 3282 
    void *__mptr_0;
    {
      #line 3284 
      ((txq->tcb)->i_dbell)->doorbell_addr = (tx->bna)->pcidev.pci_bar_kva + (unsigned long)__builtin_bswap32(cfg_rsp->q_handles[i].i_dbell);
      #line 3287 
      (txq->tcb)->q_dbell = (tx->bna)->pcidev.pci_bar_kva + (unsigned long)__builtin_bswap32(cfg_rsp->q_handles[i].q_dbell);
      #line 3290 
      txq->hw_id = (int)cfg_rsp->q_handles[i].hw_qid;
      #line 3293 
      *((txq->tcb)->hw_consumer_index) = 0U;
      #line 3294 
      (txq->tcb)->consumer_index = 0U;
      #line 3294 
      (txq->tcb)->producer_index = 0U;
    }
    #line 3282 
    i ++;
    #line 3282 
    __mptr_0 = (void *)txq->qe.next;
    #line 3282 
    txq = ((struct bna_txq *)__mptr_0);
  }
  #line 3297 
  (*(tx->fsm))((void *)tx,4);
  #line 3298 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_tx_enet_stop_rsp(struct bna_tx *tx, struct bfi_msgq_mhdr *msghdr)
{
  #line 3303 
  (*(tx->fsm))((void *)tx,5);
  #line 3304 
  return;
}

#line 3307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_bfi_bw_update_aen(struct bna_tx_mod *tx_mod)
{
  #line 3311 
  void *__mptr;
  #line 3309 
  struct bna_tx *tx;
  #line 3311 
  __mptr = (void *)tx_mod->tx_active_q.next;
  #line 3311 
  tx = ((struct bna_tx *)__mptr);
  #line 3311 
  while (& tx->qe != & tx_mod->tx_active_q) {
    #line 3311 
    void *__mptr_0;
    #line 3312 
    (*(tx->fsm))((void *)tx,8);
    #line 3311 
    __mptr_0 = (void *)tx->qe.next;
    #line 3311 
    tx = ((struct bna_tx *)__mptr_0);
  }
  #line 3313 
  return;
}

#line 3316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_res_req(int num_txq, int txq_depth, struct bna_res_info *res_info)
{
  #line 3318 
  u32 q_size;
  #line 3319 
  u32 page_count;
  #line 3320 
  struct bna_mem_info *mem_info;
  #line 3322 
  res_info->res_type = BNA_RES_T_MEM;
  #line 3323 
  mem_info = & res_info->res_u.mem_info;
  #line 3324 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 3325 
  mem_info->len = 136U;
  #line 3326 
  mem_info->num = (unsigned int)num_txq;
  #line 3328 
  q_size = (unsigned int)(txq_depth * 64);
  #line 3329 
  q_size = (q_size + 4095U) & 4294963200U;
  #line 3330 
  page_count = q_size >> 12;
  #line 3332 
  (res_info + 2U)->res_type = BNA_RES_T_MEM;
  #line 3333 
  mem_info = & (res_info + 2U)->res_u.mem_info;
  #line 3334 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 3335 
  mem_info->len = page_count * 8U;
  #line 3336 
  mem_info->num = (unsigned int)num_txq;
  #line 3338 
  (res_info + 3U)->res_type = BNA_RES_T_MEM;
  #line 3339 
  mem_info = & (res_info + 3U)->res_u.mem_info;
  #line 3340 
  mem_info->mem_type = BNA_MEM_T_KVA;
  #line 3341 
  mem_info->len = page_count * 8U;
  #line 3342 
  mem_info->num = (unsigned int)num_txq;
  #line 3344 
  (res_info + 4U)->res_type = BNA_RES_T_MEM;
  #line 3345 
  mem_info = & (res_info + 4U)->res_u.mem_info;
  #line 3346 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 3347 
  mem_info->len = page_count * 4096U;
  #line 3348 
  mem_info->num = (unsigned int)num_txq;
  #line 3350 
  (res_info + 5U)->res_type = BNA_RES_T_MEM;
  #line 3351 
  mem_info = & (res_info + 5U)->res_u.mem_info;
  #line 3352 
  mem_info->mem_type = BNA_MEM_T_DMA;
  #line 3353 
  mem_info->len = 4U;
  #line 3354 
  mem_info->num = (unsigned int)num_txq;
  #line 3356 
  (res_info + 6U)->res_type = BNA_RES_T_INTR;
  #line 3357 
  (res_info + 6U)->res_u.intr_info.intr_type = BNA_INTR_T_MSIX;
  #line 3359 
  (res_info + 6U)->res_u.intr_info.num = num_txq;
  #line 3360 
  return;
}

#line 3363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
struct bna_tx *bna_tx_create(struct bna *bna, struct bnad *bnad, struct bna_tx_config *tx_cfg, struct bna_tx_event_cbfn *tx_cbfn, struct bna_res_info *res_info, void *priv)
{
  #line 3441 
  void *__mptr_0;
  #line 3368 
  struct bna_intr_info *intr_info;
  #line 3370 
  struct bna_tx *tx;
  #line 3371 
  struct bna_txq *txq;
  #line 3372 
  int page_count;
  #line 3373 
  int i;
  #line 3369 
  struct bna_tx_mod *tx_mod = & bna->tx_mod;
  #line 3375 
  intr_info = & (res_info + 6U)->res_u.intr_info;
  #line 3376 
  page_count = (int)((res_info + 4U)->res_u.mem_info.len / 4096U);
  #line 3383 
  if (intr_info->num != 1 && intr_info->num != tx_cfg->num_txq) 
                                                                #line 3384 
                                                                return (struct bna_tx *)0;
  #line 3388 
  tx = bna_tx_get(tx_mod,tx_cfg->tx_type);
  #line 3389 
  if (tx == (struct bna_tx *)0) 
                                #line 3390 
                                return (struct bna_tx *)0;
  #line 3391 
  tx->bna = bna;
  #line 3392 
  tx->priv = priv;
  #line 3396 
  INIT_LIST_HEAD_0(& tx->txq_q);
  #line 3397 
  i = 0;
  #line 3397 
  while (tx_cfg->num_txq > i) {
    {
      #line 3401 
      void *__mptr;
      #line 3398 
      if (list_empty(& tx_mod->txq_free_q) != 0) 
                                                 #line 3399 
                                                 goto err_return;
      #line 3401 
      __mptr = (void *)tx_mod->txq_free_q.next;
      #line 3401 
      txq = ((struct bna_txq *)__mptr);
      #line 3402 
      list_move_tail(& txq->qe,& tx->txq_q);
      #line 3403 
      txq->tx = tx;
    }
    #line 3397 
    i ++;
  }
  #line 3412 
  tx->tcb_setup_cbfn = tx_cbfn->tcb_setup_cbfn;
  #line 3413 
  tx->tcb_destroy_cbfn = tx_cbfn->tcb_destroy_cbfn;
  #line 3415 
  tx->tx_stall_cbfn = tx_cbfn->tx_stall_cbfn;
  #line 3416 
  tx->tx_resume_cbfn = tx_cbfn->tx_resume_cbfn;
  #line 3417 
  tx->tx_cleanup_cbfn = tx_cbfn->tx_cleanup_cbfn;
  #line 3419 
  list_add_tail(& tx->qe,& tx_mod->tx_active_q);
  #line 3421 
  tx->num_txq = tx_cfg->num_txq;
  #line 3423 
  tx->flags = (enum bna_tx_flags)0;
  #line 3424 
  if (((unsigned int)(tx->bna)->tx_mod.flags & 1U) != 0U) 
    #line 3425 
    switch ((unsigned int)tx->type) {
      #line 3426 
      case (unsigned int)0: 
                            #line 3426 
      ;
      #line 3427 
      if (((unsigned int)(tx->bna)->tx_mod.flags & 2U) == 0U) 
                                                              #line 3429 
                                                              tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags | 1U);
      #line 3430 
      break;
      #line 3431 
      case (unsigned int)1: 
                            #line 3431 
      ;
      #line 3432 
      if (((unsigned int)(tx->bna)->tx_mod.flags & 2U) != 0U) 
                                                              #line 3433 
                                                              tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags | 1U);
      #line 3434 
      break;
    }
  #line 3440 
  i = 0;
  #line 3441 
  __mptr_0 = (void *)tx->txq_q.next;
  #line 3441 
  txq = ((struct bna_txq *)__mptr_0);
  #line 3441 
  while (& txq->qe != & tx->txq_q) {
    #line 3441 
    void *__mptr_1;
    #line 3442 
    txq->tcb = (struct bna_tcb *)(res_info->res_u.mem_info.mdl + (unsigned long)i)->kva;
    #line 3444 
    txq->tx_packets = 0ULL;
    #line 3445 
    txq->tx_bytes = 0ULL;
    #line 3448 
    txq->ib.ib_seg_host_addr.lsb = ((res_info + 5U)->res_u.mem_info.mdl + (unsigned long)i)->dma.lsb;
    #line 3450 
    txq->ib.ib_seg_host_addr.msb = ((res_info + 5U)->res_u.mem_info.mdl + (unsigned long)i)->dma.msb;
    #line 3452 
    txq->ib.ib_seg_host_addr_kva = ((res_info + 5U)->res_u.mem_info.mdl + (unsigned long)i)->kva;
    #line 3454 
    txq->ib.intr_type = intr_info->intr_type;
    #line 3455 
    if (intr_info->num == 1) 
                             #line 3455 
                             txq->ib.intr_vector = (intr_info->idl)->vector; else 
                                                                    #line 3455 
                                                                    txq->ib.intr_vector = (intr_info->idl + (unsigned long)i)->vector;
    #line 3458 
    if (intr_info->intr_type == (unsigned int)BNA_INTR_T_INTX) 
                                                               #line 3459 
                                                               txq->ib.intr_vector = (int)(1UL << txq->ib.intr_vector);
    #line 3460 
    txq->ib.coalescing_timeo = (unsigned char)tx_cfg->coalescing_timeo;
    #line 3461 
    txq->ib.interpkt_timeo = 15;
    #line 3462 
    txq->ib.interpkt_count = 12;
    #line 3466 
    (txq->tcb)->q_depth = (unsigned int)tx_cfg->txq_depth;
    #line 3467 
    (txq->tcb)->unmap_q = ((res_info + 1U)->res_u.mem_info.mdl + (unsigned long)i)->kva;
    #line 3469 
    (txq->tcb)->hw_consumer_index = (u32 *)txq->ib.ib_seg_host_addr_kva;
    #line 3471 
    (txq->tcb)->i_dbell = & txq->ib.door_bell;
    #line 3472 
    (txq->tcb)->intr_type = txq->ib.intr_type;
    #line 3473 
    (txq->tcb)->intr_vector = txq->ib.intr_vector;
    #line 3474 
    (txq->tcb)->txq = txq;
    #line 3475 
    (txq->tcb)->bnad = bnad;
    #line 3476 
    (txq->tcb)->id = i;
    #line 3479 
    bna_txq_qpt_setup(txq,page_count,4096,(res_info + 2U)->res_u.mem_info.mdl + (unsigned long)i,(res_info + 3U)->res_u.mem_info.mdl + (unsigned long)i,(res_info + 4U)->res_u.mem_info.mdl + (unsigned long)i);
    #line 3486 
    if (tx->tcb_setup_cbfn != (void (*)(struct bnad *, struct bna_tcb *))0) 
      #line 3487 
      (*(tx->tcb_setup_cbfn))(bna->bnad,txq->tcb);
    #line 3489 
    if (tx_cfg->num_txq == 8) 
                              #line 3490 
                              txq->priority = (unsigned char)(txq->tcb)->id; else 
                                                                    #line 3492 
                                                                    txq->priority = (unsigned char)tx_mod->default_prio;
    #line 3494 
    i ++;
    #line 3441 
    __mptr_1 = (void *)txq->qe.next;
    #line 3441 
    txq = ((struct bna_txq *)__mptr_1);
  }
  #line 3497 
  tx->txf_vlan_id = (unsigned short)0U;
  #line 3499 
  tx->fsm = (void (*)(void *, int ))(& bna_tx_sm_stopped);
  #line 3499 
  bna_tx_sm_stopped_entry(tx);
  #line 3501 
  tx_mod->rid_mask |= (unsigned int)(1UL << tx->rid);
  #line 3503 
  return tx;
  #line 3505 
  err_return: 
              #line 3505 
  ;
  #line 3506 
  bna_tx_free(tx);
  #line 3507 
  return (struct bna_tx *)0;
}

#line 3511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_destroy(struct bna_tx *tx)
{
  #line 3515 
  void *__mptr;
  #line 3513 
  struct bna_txq *txq;
  #line 3515 
  __mptr = (void *)tx->txq_q.next;
  #line 3515 
  txq = ((struct bna_txq *)__mptr);
  #line 3515 
  while (& txq->qe != & tx->txq_q) {
    #line 3515 
    void *__mptr_0;
    #line 3516 
    if (tx->tcb_destroy_cbfn != (void (*)(struct bnad *, struct bna_tcb *))0) 
      #line 3517 
      (*(tx->tcb_destroy_cbfn))((tx->bna)->bnad,txq->tcb);
    #line 3515 
    __mptr_0 = (void *)txq->qe.next;
    #line 3515 
    txq = ((struct bna_txq *)__mptr_0);
  }
  #line 3519 
  (tx->bna)->tx_mod.rid_mask &= ~ ((unsigned int)(1UL << tx->rid));
  #line 3520 
  bna_tx_free(tx);
  #line 3521 
  return;
}

#line 3524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_enable(struct bna_tx *tx)
{
  #line 3526 
  if (tx->fsm != (void (*)(void *, int ))(& bna_tx_sm_stopped)) 
                                                                #line 3527 
                                                                return;
  #line 3529 
  tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags | 2U);
  #line 3531 
  if (((unsigned int)tx->flags & 1U) != 0U) 
                                            #line 3532 
                                            (*(tx->fsm))((void *)tx,1);
  #line 3533 
  return;
}

#line 3536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_disable(struct bna_tx *tx, enum bna_cleanup_type type, void (*cbfn)(void *, struct bna_tx *))
{
  #line 3539 
  if (type == (unsigned int)BNA_SOFT_CLEANUP) {
    #line 3540 
    (*cbfn)((void *)(tx->bna)->bnad,tx);
    #line 3541 
    return;
  }
  #line 3544 
  tx->stop_cbfn = cbfn;
  #line 3545 
  tx->stop_cbarg = (void *)(tx->bna)->bnad;
  #line 3547 
  tx->flags = (enum bna_tx_flags)((unsigned int)tx->flags & 4294967293U);
  #line 3549 
  (*(tx->fsm))((void *)tx,2);
  #line 3550 
  return;
}

#line 3553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_cleanup_complete(struct bna_tx *tx)
{
  #line 3555 
  (*(tx->fsm))((void *)tx,7);
  #line 3556 
  return;
}

#line 3559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_mod_cb_tx_stopped(void *arg, struct bna_tx *tx)
{
  #line 3561 
  struct bna_tx_mod *tx_mod = (struct bna_tx_mod *)arg;
  #line 3563 
  bfa_wc_down(& tx_mod->tx_stop_wc);
  #line 3564 
  return;
}

#line 3567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
static void bna_tx_mod_cb_tx_stopped_all(void *arg)
{
  #line 3569 
  struct bna_tx_mod *tx_mod = (struct bna_tx_mod *)arg;
  #line 3571 
  if (tx_mod->stop_cbfn != (void (*)(struct bna_enet *))0) 
                                                           #line 3572 
                                                           (*(tx_mod->stop_cbfn))(& (tx_mod->bna)->enet);
  #line 3573 
  tx_mod->stop_cbfn = (void (*)(struct bna_enet *))0;
  #line 3574 
  return;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_init(struct bna_tx_mod *tx_mod, struct bna *bna, struct bna_res_info *res_info)
{
  #line 3580 
  int i;
  #line 3582 
  tx_mod->bna = bna;
  #line 3583 
  tx_mod->flags = (enum bna_tx_mod_flags)0;
  #line 3585 
  tx_mod->tx = (struct bna_tx *)(res_info->res_u.mem_info.mdl)->kva;
  #line 3587 
  tx_mod->txq = (struct bna_txq *)((res_info + 1U)->res_u.mem_info.mdl)->kva;
  #line 3590 
  INIT_LIST_HEAD_0(& tx_mod->tx_free_q);
  #line 3591 
  INIT_LIST_HEAD_0(& tx_mod->tx_active_q);
  #line 3593 
  INIT_LIST_HEAD_0(& tx_mod->txq_free_q);
  #line 3595 
  i = 0;
  #line 3595 
  while (bna->ioceth.attr.num_txq > i) {
    #line 3596 
    (tx_mod->tx + (unsigned long)i)->rid = i;
    #line 3597 
    list_add_tail(& (tx_mod->tx + (unsigned long)i)->qe,& tx_mod->tx_free_q);
    #line 3598 
    list_add_tail(& (tx_mod->txq + (unsigned long)i)->qe,& tx_mod->txq_free_q);
    #line 3595 
    i ++;
  }
  #line 3601 
  tx_mod->prio_map = (unsigned char)255U;
  #line 3602 
  tx_mod->default_prio = 0;
  #line 3603 
  tx_mod->iscsi_over_cee = 0;
  #line 3604 
  tx_mod->iscsi_prio = -1;
  #line 3605 
  return;
}

#line 3608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_uninit(struct bna_tx_mod *tx_mod)
{
  #line 3610 
  tx_mod->bna = (struct bna *)0;
  #line 3611 
  return;
}

#line 3614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_start(struct bna_tx_mod *tx_mod, enum bna_tx_type type)
{
  #line 3622 
  void *__mptr;
  #line 3616 
  struct bna_tx *tx;
  #line 3618 
  tx_mod->flags = (enum bna_tx_mod_flags)((unsigned int)tx_mod->flags | 1U);
  #line 3619 
  if (type == (unsigned int)BNA_TX_T_LOOPBACK) 
                                               #line 3620 
                                               tx_mod->flags = (enum bna_tx_mod_flags)((unsigned int)tx_mod->flags | 2U);
  #line 3622 
  __mptr = (void *)tx_mod->tx_active_q.next;
  #line 3622 
  tx = ((struct bna_tx *)__mptr);
  #line 3622 
  while (& tx->qe != & tx_mod->tx_active_q) {
    #line 3622 
    void *__mptr_0;
    #line 3623 
    if (tx->type == type) 
                          #line 3624 
                          bna_tx_start(tx);
    #line 3622 
    __mptr_0 = (void *)tx->qe.next;
    #line 3622 
    tx = ((struct bna_tx *)__mptr_0);
  }
  #line 3625 
  return;
}

#line 3628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_stop(struct bna_tx_mod *tx_mod, enum bna_tx_type type)
{
  #line 3639 
  void *__mptr;
  #line 3630 
  struct bna_tx *tx;
  #line 3632 
  tx_mod->flags = (enum bna_tx_mod_flags)((unsigned int)tx_mod->flags & 4294967294U);
  #line 3633 
  tx_mod->flags = (enum bna_tx_mod_flags)((unsigned int)tx_mod->flags & 4294967293U);
  #line 3635 
  tx_mod->stop_cbfn = & bna_enet_cb_tx_stopped;
  #line 3637 
  bfa_wc_init(& tx_mod->tx_stop_wc,& bna_tx_mod_cb_tx_stopped_all,(void *)tx_mod);
  #line 3639 
  __mptr = (void *)tx_mod->tx_active_q.next;
  #line 3639 
  tx = ((struct bna_tx *)__mptr);
  #line 3639 
  while (& tx->qe != & tx_mod->tx_active_q) {
    #line 3639 
    void *__mptr_0;
    #line 3640 
    if (tx->type == type) {
      #line 3641 
      bfa_wc_up(& tx_mod->tx_stop_wc);
      #line 3642 
      bna_tx_stop(tx);
    }
    #line 3639 
    __mptr_0 = (void *)tx->qe.next;
    #line 3639 
    tx = ((struct bna_tx *)__mptr_0);
  }
  #line 3645 
  bfa_wc_wait(& tx_mod->tx_stop_wc);
  #line 3646 
  return;
}

#line 3649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_mod_fail(struct bna_tx_mod *tx_mod)
{
  #line 3656 
  void *__mptr;
  #line 3651 
  struct bna_tx *tx;
  #line 3653 
  tx_mod->flags = (enum bna_tx_mod_flags)((unsigned int)tx_mod->flags & 4294967294U);
  #line 3654 
  tx_mod->flags = (enum bna_tx_mod_flags)((unsigned int)tx_mod->flags & 4294967293U);
  #line 3656 
  __mptr = (void *)tx_mod->tx_active_q.next;
  #line 3656 
  tx = ((struct bna_tx *)__mptr);
  #line 3656 
  while (& tx->qe != & tx_mod->tx_active_q) {
    #line 3656 
    void *__mptr_0;
    #line 3657 
    bna_tx_fail(tx);
    #line 3656 
    __mptr_0 = (void *)tx->qe.next;
    #line 3656 
    tx = ((struct bna_tx *)__mptr_0);
  }
  #line 3658 
  return;
}

#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_tx_rx.c"
void bna_tx_coalescing_timeo_set(struct bna_tx *tx, int coalescing_timeo)
{
  #line 3665 
  void *__mptr;
  #line 3663 
  struct bna_txq *txq;
  #line 3665 
  __mptr = (void *)tx->txq_q.next;
  #line 3665 
  txq = ((struct bna_txq *)__mptr);
  #line 3665 
  while (& txq->qe != & tx->txq_q) {
    #line 3665 
    void *__mptr_0;
    #line 3666 
    bna_ib_coalescing_timeo_set(& txq->ib,(unsigned char)((int)((unsigned char)coalescing_timeo)));
    #line 3665 
    __mptr_0 = (void *)txq->qe.next;
    #line 3665 
    txq = ((struct bna_txq *)__mptr_0);
  }
  #line 3667 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bna_tx_rx.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 139 
  ldv_init_list_head(list);
  #line 140 
  return;
}

#line 8  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 487 
#line 487 
int sscanf(char *, char * , ...);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 13 
void *memdup_user(void *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_3984 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_3986 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 237 
#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void atomic_dec(atomic_t *v);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static bool IS_ERR(void *ptr);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 899  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(spinlock_t *lock, unsigned long flags);
#line 26 
#line 908 
static void cif_mutex_lock_conf_mutex_of_bnad_1(struct mutex *lock);
#line 35 
#line 890 
static void cif___ldv_spin_lock_bna_lock_of_bnad_1(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void reinit_completion(struct completion *x)
{
  #line 100 
  x->done = 0U;
  #line 101 
  return;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_mutex_unlock_conf_mutex_of_bnad_1(struct mutex *lock);
#line 3138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3138 
loff_t fixed_size_llseek(struct file *, loff_t, int, loff_t);
#line 3337 
#line 3337 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void *, size_t);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_debugfs_remove(struct dentry *dentry);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 293 
int bfa_nw_ioc_debug_fwtrc(struct bfa_ioc *ioc, void *trcdata, int *trclen);
#line 294 
#line 294 
int bfa_nw_ioc_debug_fwsave(struct bfa_ioc *ioc, void *trcdata, int *trclen);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.h"
#line 55 
enum bfa_status bfa_nw_cee_get_attr(struct bfa_cee *cee, struct bfa_cee_attr *attr, void (*cbfn)(void *, enum bfa_status ), void *cbarg);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_debugfs_open_fwtrc(struct inode *inode, struct file *file)
{
  #line 44 
  struct bnad_debug_info *fw_debug;
  #line 45 
  unsigned long flags;
  #line 46 
  int rc;
  #line 43 
  struct bnad *bnad = (struct bnad *)inode->i_private;
  #line 48 
  fw_debug = (struct bnad_debug_info *)kzalloc_1(24UL,3264U);
  #line 49 
  if (fw_debug == (struct bnad_debug_info *)0) 
                                               #line 50 
                                               return -12;
  #line 52 
  fw_debug->buffer_len = 4128;
  #line 54 
  fw_debug->debug_buffer = (char *)kzalloc_1((unsigned long)fw_debug->buffer_len,3264U);
  #line 55 
  if (fw_debug->debug_buffer == (char *)0) {
    #line 56 
    kfree((void *)fw_debug);
    #line 57 
    fw_debug = (struct bnad_debug_info *)0;
    #line 58 
    return -12;
  }
  #line 61 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 62 
  rc = bfa_nw_ioc_debug_fwtrc(& bnad->bna.ioceth.ioc,(void *)fw_debug->debug_buffer,& fw_debug->buffer_len);
  #line 65 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 66 
  if (rc != 0) {
    #line 67 
    kfree((void *)fw_debug->debug_buffer);
    #line 68 
    fw_debug->debug_buffer = (char *)0;
    #line 69 
    kfree((void *)fw_debug);
    #line 70 
    fw_debug = (struct bnad_debug_info *)0;
    #line 71 
    netdev_warn(bnad->netdev,(char *)"failed to collect fwtrc\n");
    #line 72 
    return -12;
  }
  #line 75 
  file->private_data = (void *)fw_debug;
  #line 77 
  return 0;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_debugfs_open_fwsave(struct inode *inode, struct file *file)
{
  #line 84 
  struct bnad_debug_info *fw_debug;
  #line 85 
  unsigned long flags;
  #line 86 
  int rc;
  #line 83 
  struct bnad *bnad = (struct bnad *)inode->i_private;
  #line 88 
  fw_debug = (struct bnad_debug_info *)kzalloc_1(24UL,3264U);
  #line 89 
  if (fw_debug == (struct bnad_debug_info *)0) 
                                               #line 90 
                                               return -12;
  #line 92 
  fw_debug->buffer_len = 4128;
  #line 94 
  fw_debug->debug_buffer = (char *)kzalloc_1((unsigned long)fw_debug->buffer_len,3264U);
  #line 95 
  if (fw_debug->debug_buffer == (char *)0) {
    #line 96 
    kfree((void *)fw_debug);
    #line 97 
    fw_debug = (struct bnad_debug_info *)0;
    #line 98 
    return -12;
  }
  #line 101 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 102 
  rc = bfa_nw_ioc_debug_fwsave(& bnad->bna.ioceth.ioc,(void *)fw_debug->debug_buffer,& fw_debug->buffer_len);
  #line 105 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 106 
  if (rc != 0 && rc != 78) {
    #line 107 
    kfree((void *)fw_debug->debug_buffer);
    #line 108 
    fw_debug->debug_buffer = (char *)0;
    #line 109 
    kfree((void *)fw_debug);
    #line 110 
    fw_debug = (struct bnad_debug_info *)0;
    #line 111 
    netdev_warn(bnad->netdev,(char *)"failed to collect fwsave\n");
    #line 112 
    return -12;
  }
  #line 115 
  file->private_data = (void *)fw_debug;
  #line 117 
  return 0;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_debugfs_open_reg(struct inode *inode, struct file *file)
{
  #line 123 
  struct bnad_debug_info *reg_debug;
  #line 125 
  reg_debug = (struct bnad_debug_info *)kzalloc_1(24UL,3264U);
  #line 126 
  if (reg_debug == (struct bnad_debug_info *)0) 
                                                #line 127 
                                                return -12;
  #line 129 
  reg_debug->i_private = inode->i_private;
  #line 131 
  file->private_data = (void *)reg_debug;
  #line 133 
  return 0;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_get_debug_drvinfo(struct bnad *bnad, void *buffer, u32 len)
{
  #line 140 
  struct bnad_iocmd_comp fcomp;
  #line 139 
  struct bnad_drvinfo *drvinfo = (struct bnad_drvinfo *)buffer;
  #line 141 
  unsigned long flags = 0UL;
  #line 142 
  int ret = 1;
  #line 145 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 146 
  bfa_nw_ioc_get_attr(& bnad->bna.ioceth.ioc,& drvinfo->ioc_attr);
  #line 147 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 150 
  fcomp.bnad = bnad;
  #line 151 
  fcomp.comp_status = 0;
  #line 152 
  __init_completion(& fcomp.comp);
  #line 153 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 154 
  ret = (int)bfa_nw_cee_get_attr(& bnad->bna.cee,& drvinfo->cee_attr,
                          & bnad_cb_completion,(void *)(& fcomp));
  #line 156 
  if (ret != 0) {
    #line 157 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
    #line 158 
    goto out;
  }
  #line 160 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 161 
  wait_for_completion(& fcomp.comp);
  #line 162 
  drvinfo->cee_status = (unsigned int)fcomp.comp_status;
  #line 165 
  fcomp.comp_status = 0;
  #line 166 
  reinit_completion(& fcomp.comp);
  #line 167 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 168 
  ret = (int)bfa_nw_flash_get_attr(& bnad->bna.flash,& drvinfo->flash_attr,
                              & bnad_cb_completion,(void *)(& fcomp));
  #line 170 
  if (ret != 0) {
    #line 171 
    cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
    #line 172 
    goto out;
  }
  #line 174 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 175 
  wait_for_completion(& fcomp.comp);
  #line 176 
  drvinfo->flash_status = (unsigned int)fcomp.comp_status;
  #line 177 
  out: 
       #line 177 
  ;
  #line 178 
  return ret;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_debugfs_open_drvinfo(struct inode *inode, struct file *file)
{
  #line 185 
  struct bnad_debug_info *drv_info;
  #line 186 
  int rc;
  #line 184 
  struct bnad *bnad = (struct bnad *)inode->i_private;
  #line 188 
  drv_info = (struct bnad_debug_info *)kzalloc_1(24UL,3264U);
  #line 189 
  if (drv_info == (struct bnad_debug_info *)0) 
                                               #line 190 
                                               return -12;
  #line 192 
  drv_info->buffer_len = 3472;
  #line 194 
  drv_info->debug_buffer = (char *)kzalloc_1((unsigned long)drv_info->buffer_len,3264U);
  #line 195 
  if (drv_info->debug_buffer == (char *)0) {
    #line 196 
    kfree((void *)drv_info);
    #line 197 
    drv_info = (struct bnad_debug_info *)0;
    #line 198 
    return -12;
  }
  #line 201 
  cif_mutex_lock_conf_mutex_of_bnad_1(& bnad->conf_mutex);
  #line 202 
  rc = bnad_get_debug_drvinfo(bnad,(void *)drv_info->debug_buffer,(unsigned int)drv_info->buffer_len);
  #line 204 
  cif_mutex_unlock_conf_mutex_of_bnad_1(& bnad->conf_mutex);
  #line 205 
  if (rc != 0) {
    #line 206 
    kfree((void *)drv_info->debug_buffer);
    #line 207 
    drv_info->debug_buffer = (char *)0;
    #line 208 
    kfree((void *)drv_info);
    #line 209 
    drv_info = (struct bnad_debug_info *)0;
    #line 210 
    netdev_warn(bnad->netdev,(char *)"failed to collect drvinfo\n");
    #line 211 
    return -12;
  }
  #line 214 
  file->private_data = (void *)drv_info;
  #line 216 
  return 0;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static loff_t bnad_debugfs_lseek(struct file *file, loff_t offset, int orig)
{
  #line 223 
  struct bnad_debug_info *debug = (struct bnad_debug_info *)file->private_data;
  #line 225 
  if (debug == (struct bnad_debug_info *)0) 
                                            #line 226 
                                            return -22LL;
  #line 228 
  return fixed_size_llseek(file,offset,orig,(long long)debug->buffer_len);
}

#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static ssize_t bnad_debugfs_read(struct file *file, char *buf, size_t nbytes, loff_t *pos)
{
  #line 235 
  struct bnad_debug_info *debug = (struct bnad_debug_info *)file->private_data;
  #line 237 
  if (debug == (struct bnad_debug_info *)0 || debug->debug_buffer == (char *)0) 
    #line 238 
    return 0L;
  #line 240 
  return simple_read_from_buffer((void *)buf,nbytes,pos,
                              (void *)debug->debug_buffer,
                              (unsigned long)debug->buffer_len);
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bna_reg_offset_check(struct bfa_ioc *ioc, u32 offset, u32 len)
{
  #line 257 
  u8 area;
  #line 260 
  area = (unsigned char)((unsigned int)((unsigned char)(offset >> 15)) & 7U);
  #line 261 
  if ((unsigned int)area == 0U) {
    #line 263 
    if ((len << 2) + offset > 32768U) 
                                      #line 264 
                                      return 2;
  }
  else 
    #line 265 
    if ((unsigned int)area == 1U) {
      #line 267 
      if ((len << 2) + offset > 65536U) 
                                        #line 268 
                                        return 2;
    }
    else {
      #line 271 
      unsigned int tmp;
      #line 271 
      if (((unsigned int)ioc->pcidev.device_id == 20U || (unsigned int)ioc->pcidev.device_id == 33U) || (unsigned int)ioc->pcidev.device_id == 34U) 
        #line 271 
        tmp = 262143U; else 
                            #line 271 
                            tmp = 131071U;
      #line 271 
      ;
      #line 271 
      if ((len << 2) + offset > tmp) 
                                     #line 272 
                                     return 2;
    }
  #line 274 
  return 0;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static ssize_t bnad_debugfs_read_regrd(struct file *file, char *buf, size_t nbytes, loff_t *pos)
{
  #line 283 
  ssize_t rc;
  #line 281 
  struct bnad_debug_info *regrd_debug = (struct bnad_debug_info *)file->private_data;
  #line 282 
  struct bnad *bnad = (struct bnad *)regrd_debug->i_private;
  #line 285 
  if (bnad->regdata == (char *)0) 
                                  #line 286 
                                  return 0L;
  #line 288 
  rc = simple_read_from_buffer((void *)buf,nbytes,pos,(void *)bnad->regdata,(unsigned long)bnad->reglen);
  #line 291 
  if ((unsigned long long)*pos + (unsigned long long)nbytes >= (unsigned long long)bnad->reglen) {
    #line 292 
    kfree((void *)bnad->regdata);
    #line 293 
    bnad->regdata = (char *)0;
    #line 294 
    bnad->reglen = 0U;
  }
  #line 297 
  return rc;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static ssize_t bnad_debugfs_write_regrd(struct file *file, char *buf, size_t nbytes, loff_t *ppos)
{
  #line 307 
  int rc;
  #line 307 
  int i;
  #line 308 
  u32 addr;
  #line 308 
  u32 len;
  #line 309 
  u32 *regbuf;
  #line 310 
  void *rb;
  #line 310 
  void *reg_addr;
  #line 311 
  unsigned long flags;
  #line 312 
  void *kern_buf;
  #line 336 
  unsigned int tmp_2;
  #line 304 
  struct bnad_debug_info *regrd_debug = (struct bnad_debug_info *)file->private_data;
  #line 305 
  struct bnad *bnad = (struct bnad *)regrd_debug->i_private;
  #line 306 
  struct bfa_ioc *ioc = & bnad->bna.ioceth.ioc;
  #line 315 
  kern_buf = memdup_user((void *)buf,nbytes);
  #line 316 
  if ((int)IS_ERR(kern_buf) != 0) {
    #line 317 
    return PTR_ERR(kern_buf);
  }
  #line 319 
  rc = sscanf((char *)kern_buf,(char *)"%x:%x",& addr,& len);
  #line 320 
  if (rc <= 1 || len > 1073741823U) {
    #line 321 
    netdev_warn(bnad->netdev,(char *)"failed to read user buffer\n");
    #line 322 
    kfree(kern_buf);
    #line 323 
    return -22L;
  }
  #line 326 
  kfree(kern_buf);
  #line 327 
  kfree((void *)bnad->regdata);
  #line 328 
  bnad->reglen = 0U;
  #line 330 
  bnad->regdata = (char *)kzalloc_1((unsigned long)(len << 2),3264U);
  #line 331 
  if (bnad->regdata == (char *)0) 
                                  #line 332 
                                  return -12L;
  #line 334 
  bnad->reglen = len << 2;
  #line 335 
  rb = ioc->pcidev.pci_bar_kva;
  #line 336 
  if (((unsigned int)ioc->pcidev.device_id == 20U || (unsigned int)ioc->pcidev.device_id == 33U) || (unsigned int)ioc->pcidev.device_id == 34U) 
    #line 336 
    tmp_2 = 262143U; else 
                          #line 336 
                          tmp_2 = 131071U;
  #line 336 
  addr = tmp_2 & addr;
  #line 339 
  rc = bna_reg_offset_check(ioc,addr,len);
  #line 340 
  if (rc != 0) {
    #line 341 
    netdev_warn(bnad->netdev,(char *)"failed reg offset check\n");
    #line 342 
    kfree((void *)bnad->regdata);
    #line 343 
    bnad->regdata = (char *)0;
    #line 344 
    bnad->reglen = 0U;
    #line 345 
    return -22L;
  }
  #line 348 
  reg_addr = rb + (unsigned long)addr;
  #line 349 
  regbuf = (u32 *)bnad->regdata;
  #line 350 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 351 
  i = 0;
  #line 351 
  while ((unsigned int)i < len) {
    #line 352 
    *regbuf = readl(reg_addr);
    #line 353 
    regbuf ++;
    #line 354 
    reg_addr += 4UL;
    #line 351 
    i ++;
  }
  #line 356 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 358 
  return (long)nbytes;
}

#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static ssize_t bnad_debugfs_write_regwr(struct file *file, char *buf, size_t nbytes, loff_t *ppos)
{
  #line 368 
  int rc;
  #line 369 
  u32 addr;
  #line 369 
  u32 val;
  #line 370 
  void *reg_addr;
  #line 371 
  unsigned long flags;
  #line 372 
  void *kern_buf;
  #line 387 
  unsigned int tmp_1;
  #line 365 
  struct bnad_debug_info *debug = (struct bnad_debug_info *)file->private_data;
  #line 366 
  struct bnad *bnad = (struct bnad *)debug->i_private;
  #line 367 
  struct bfa_ioc *ioc = & bnad->bna.ioceth.ioc;
  #line 375 
  kern_buf = memdup_user((void *)buf,nbytes);
  #line 376 
  if ((int)IS_ERR(kern_buf) != 0) {
    #line 377 
    return PTR_ERR(kern_buf);
  }
  #line 379 
  rc = sscanf((char *)kern_buf,(char *)"%x:%x",& addr,& val);
  #line 380 
  if (rc <= 1) {
    #line 381 
    netdev_warn(bnad->netdev,(char *)"failed to read user buffer\n");
    #line 382 
    kfree(kern_buf);
    #line 383 
    return -22L;
  }
  #line 385 
  kfree(kern_buf);
  #line 387 
  if (((unsigned int)ioc->pcidev.device_id == 20U || (unsigned int)ioc->pcidev.device_id == 33U) || (unsigned int)ioc->pcidev.device_id == 34U) 
    #line 387 
    tmp_1 = 262143U; else 
                          #line 387 
                          tmp_1 = 131071U;
  #line 387 
  addr = tmp_1 & addr;
  #line 390 
  rc = bna_reg_offset_check(ioc,addr,1U);
  #line 391 
  if (rc != 0) {
    #line 392 
    netdev_warn(bnad->netdev,(char *)"failed reg offset check\n");
    #line 393 
    return -22L;
  }
  #line 396 
  reg_addr = ioc->pcidev.pci_bar_kva + (unsigned long)addr;
  #line 397 
  cif___ldv_spin_lock_bna_lock_of_bnad_1(& bnad->bna_lock);
  #line 398 
  writel(val,reg_addr);
  #line 399 
  cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(& bnad->bna_lock,flags);
  #line 401 
  return (long)nbytes;
}

#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_debugfs_release(struct inode *inode, struct file *file)
{
  #line 407 
  struct bnad_debug_info *debug = (struct bnad_debug_info *)file->private_data;
  #line 409 
  if (debug == (struct bnad_debug_info *)0) 
                                            #line 410 
                                            return 0;
  #line 412 
  file->private_data = (void *)0;
  #line 413 
  kfree((void *)debug);
  #line 414 
  return 0;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static int bnad_debugfs_buffer_release(struct inode *inode, struct file *file)
{
  #line 420 
  struct bnad_debug_info *debug = (struct bnad_debug_info *)file->private_data;
  #line 422 
  if (debug == (struct bnad_debug_info *)0) 
                                            #line 423 
                                            return 0;
  #line 425 
  kfree((void *)debug->debug_buffer);
  #line 427 
  file->private_data = (void *)0;
  #line 428 
  kfree((void *)debug);
  #line 429 
  debug = (struct bnad_debug_info *)0;
  #line 430 
  return 0;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct file_operations bnad_debugfs_op_fwtrc = {.owner = & __this_module, .llseek = & bnad_debugfs_lseek, .read = & bnad_debugfs_read, .open = & bnad_debugfs_open_fwtrc, .release = & bnad_debugfs_buffer_release};
#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct file_operations bnad_debugfs_op_fwsave = {.owner = & __this_module, .llseek = & bnad_debugfs_lseek, .read = & bnad_debugfs_read, .open = & bnad_debugfs_open_fwsave, .release = & bnad_debugfs_buffer_release};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct file_operations bnad_debugfs_op_regrd = {.owner = & __this_module, .llseek = & bnad_debugfs_lseek, .read = & bnad_debugfs_read_regrd, .write = & bnad_debugfs_write_regrd, .open = & bnad_debugfs_open_reg, .release = & bnad_debugfs_release};
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct file_operations bnad_debugfs_op_regwr = {.owner = & __this_module, .llseek = & bnad_debugfs_lseek, .write = & bnad_debugfs_write_regwr, .open = & bnad_debugfs_open_reg, .release = & bnad_debugfs_release};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct file_operations bnad_debugfs_op_drvinfo = {.owner = & __this_module, .llseek = & bnad_debugfs_lseek, .read = & bnad_debugfs_read, .open = & bnad_debugfs_open_drvinfo, .release = & bnad_debugfs_buffer_release};
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct bnad_debugfs_entry bnad_debugfs_files[5U] = {{.name = (char *)"fwtrc", .mode = (unsigned short)33060U, .fops = & bnad_debugfs_op_fwtrc}, {.name = (char *)"fwsave", .mode = (unsigned short)33060U, .fops = & bnad_debugfs_op_fwsave}, {.name = (char *)"regrd", .mode = (unsigned short)33188U, .fops = & bnad_debugfs_op_regrd}, {.name = (char *)"regwr", .mode = (unsigned short)32896U, .fops = & bnad_debugfs_op_regwr}, {.name = (char *)"drvinfo", .mode = (unsigned short)33060U, .fops = & bnad_debugfs_op_drvinfo}};
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static struct dentry *bna_debugfs_root;
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
static atomic_t bna_debugfs_port_count;
#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
void bnad_debugfs_init(struct bnad *bnad)
{
  #line 495 
  struct bnad_debugfs_entry *file;
  #line 496 
  char name[64U];
  #line 497 
  int i;
  #line 500 
  if (bna_debugfs_root == (struct dentry *)0) {
    #line 501 
    bna_debugfs_root = cif_debugfs_create_dir((char *)"bna",(struct dentry *)0);
    #line 502 
    atomic_set(& bna_debugfs_port_count,0);
    #line 503 
    if (bna_debugfs_root == (struct dentry *)0) {
      #line 504 
      netdev_warn(bnad->netdev,(char *)"debugfs root dir creation failed\n");
      #line 506 
      return;
    }
  }
  #line 511 
  snprintf((char *)(& name),64UL,(char *)"pci_dev:%s",pci_name(bnad->pcidev));
  #line 512 
  if (bnad->port_debugfs_root == (struct dentry *)0) {
    #line 513 
    bnad->port_debugfs_root = cif_debugfs_create_dir((char *)(& name),bna_debugfs_root);
    #line 515 
    if (bnad->port_debugfs_root == (struct dentry *)0) {
      #line 516 
      netdev_warn(bnad->netdev,(char *)"debugfs root dir creation failed\n");
      #line 518 
      return;
    }
    #line 521 
    atomic_inc_0(& bna_debugfs_port_count);
    #line 523 
    i = 0;
    #line 523 
    while ((unsigned int)i <= 4U) {
      #line 524 
      file = & bnad_debugfs_files[i];
      #line 525 
      bnad->bnad_dentry_files[i] = cif_debugfs_create_file(file->name,(unsigned short)((int)file->mode),bnad->port_debugfs_root,(void *)bnad,file->fops);
      #line 531 
      if (bnad->bnad_dentry_files[i] == (struct dentry *)0) {
        #line 532 
        netdev_warn(bnad->netdev,(char *)"create %s entry failed\n",file->name);
        #line 535 
        return;
      }
      #line 523 
      i ++;
    }
  }
  #line 539 
  return;
}

#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bnad_debugfs.c"
void bnad_debugfs_uninit(struct bnad *bnad)
{
  #line 545 
  int i;
  #line 547 
  i = 0;
  #line 547 
  while ((unsigned int)i <= 4U) {
    #line 548 
    if (bnad->bnad_dentry_files[i] != (struct dentry *)0) {
      #line 549 
      cif_debugfs_remove(bnad->bnad_dentry_files[i]);
      #line 550 
      bnad->bnad_dentry_files[i] = (struct dentry *)0;
    }
    #line 547 
    i ++;
  }
  #line 555 
  if (bnad->port_debugfs_root != (struct dentry *)0) {
    #line 556 
    cif_debugfs_remove(bnad->port_debugfs_root);
    #line 557 
    bnad->port_debugfs_root = (struct dentry *)0;
    #line 558 
    atomic_dec(& bna_debugfs_port_count);
  }
  #line 562 
  if (atomic_read_0(& bna_debugfs_port_count) == 0) {
    #line 563 
    cif_debugfs_remove(bna_debugfs_root);
    #line 564 
    bna_debugfs_root = (struct dentry *)0;
  }
  #line 566 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
struct file_operations *emg_alias_bnad_debugfs_op_drvinfo = & bnad_debugfs_op_drvinfo;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
struct file_operations *emg_alias_bnad_debugfs_op_fwsave = & bnad_debugfs_op_fwsave;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
struct file_operations *emg_alias_bnad_debugfs_op_fwtrc = & bnad_debugfs_op_fwtrc;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
struct file_operations *emg_alias_bnad_debugfs_op_regrd = & bnad_debugfs_op_regrd;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
struct file_operations *emg_alias_bnad_debugfs_op_regwr = & bnad_debugfs_op_regwr;
#line 102 
#line 102 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 103 
#line 103 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 104 
#line 104 
void emg_debugfs_remove(struct dentry *arg0);
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
int emg_wrapper_bnad_debugfs_buffer_release(struct inode *arg0, struct file *arg1)
{
  #line 120 
  return bnad_debugfs_buffer_release(arg0,arg1);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
long long emg_wrapper_bnad_debugfs_lseek(struct file *arg0, long long arg1, int arg2)
{
  #line 125 
  return bnad_debugfs_lseek(arg0,arg1,arg2);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
int emg_wrapper_bnad_debugfs_open_drvinfo(struct inode *arg0, struct file *arg1)
{
  #line 130 
  return bnad_debugfs_open_drvinfo(arg0,arg1);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
int emg_wrapper_bnad_debugfs_open_fwsave(struct inode *arg0, struct file *arg1)
{
  #line 135 
  return bnad_debugfs_open_fwsave(arg0,arg1);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
int emg_wrapper_bnad_debugfs_open_fwtrc(struct inode *arg0, struct file *arg1)
{
  #line 140 
  return bnad_debugfs_open_fwtrc(arg0,arg1);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
int emg_wrapper_bnad_debugfs_open_reg(struct inode *arg0, struct file *arg1)
{
  #line 145 
  return bnad_debugfs_open_reg(arg0,arg1);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
long emg_wrapper_bnad_debugfs_read(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 150 
  return bnad_debugfs_read(arg0,arg1,arg2,arg3);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
long emg_wrapper_bnad_debugfs_read_regrd(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 155 
  return bnad_debugfs_read_regrd(arg0,arg1,arg2,arg3);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
int emg_wrapper_bnad_debugfs_release(struct inode *arg0, struct file *arg1)
{
  #line 160 
  return bnad_debugfs_release(arg0,arg1);
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
long emg_wrapper_bnad_debugfs_write_regrd(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 165 
  return bnad_debugfs_write_regrd(arg0,arg1,arg2,arg3);
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
long emg_wrapper_bnad_debugfs_write_regwr(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  #line 170 
  return bnad_debugfs_write_regwr(arg0,arg1,arg2,arg3);
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 255 
  ldv_atomic_inc(v);
  #line 256 
  return;
}

#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 262 
  ldv_atomic_dec(v);
  #line 263 
  return;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 283 
  return ldv_ptr_err(ptr);
}

#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 290 
  return ldv_is_err(ptr);
}

#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 499 
  return ldv_kzalloc(size,flags);
}

#line 890  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif___ldv_spin_lock_bna_lock_of_bnad_1(spinlock_t *lock)
{
  #line 893 
  ldv_spin_model_lock((char *)"bna_lock_of_bnad");
  #line 895 
  __ldv_spin_lock(lock);
  #line 896 
  return;
}

#line 899  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_spin_unlock_irqrestore_bna_lock_of_bnad_1(spinlock_t *lock, unsigned long flags)
{
  #line 902 
  ldv_spin_model_unlock((char *)"bna_lock_of_bnad");
  #line 904 
  spin_unlock_irqrestore_1(lock,flags);
  #line 905 
  return;
}

#line 908  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_mutex_lock_conf_mutex_of_bnad_1(struct mutex *lock)
{
  #line 911 
  ldv_mutex_model_lock(lock,(char *)"conf_mutex_of_bnad");
  #line 912 
  return;
}

#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_mutex_unlock_conf_mutex_of_bnad_1(struct mutex *lock)
{
  #line 918 
  ldv_mutex_model_unlock(lock,(char *)"conf_mutex_of_bnad");
  #line 919 
  return;
}

#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 926 
  return emg_debugfs_create_dir(name,parent);
}

#line 930  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 934 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bnad_debugfs.i.aux"
static void cif_debugfs_remove(struct dentry *dentry)
{
  #line 942 
  emg_debugfs_remove(dentry);
  #line 943 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_msgq.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_4996 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_4998 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_5000 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
__inline static void __bfa_dma_be_addr_set(union bfi_addr_u *dma_addr, u64 pa)
{
  #line 55 
  dma_addr->a32.addr_lo = __builtin_bswap32((unsigned int)pa);
  #line 56 
  dma_addr->a32.addr_hi = __builtin_bswap32((unsigned int)(pa >> 32));
  #line 57 
  return;
}

#line 244 
#line 244 
bool bfa_nw_ioc_mbox_queue(struct bfa_ioc *ioc, struct bfa_mbox_cmd *cmd, void (*cbfn)(void *), void *cbarg);
#line 248 
#line 248 
void bfa_nw_ioc_mbox_regisr(struct bfa_ioc *ioc, enum bfi_mclass mc, void (*cbfn)(void *, struct bfi_mbmsg *), void *cbarg);
#line 278 
#line 278 
bool bfa_nw_ioc_is_disabled(struct bfa_ioc *ioc);
#line 282 
#line 282 
void bfa_nw_ioc_notify_register(struct bfa_ioc *ioc, struct bfa_ioc_notify *notify);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
u32 bfa_msgq_meminfo(void);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_memclaim(struct bfa_msgq *msgq, u8 *kva, u64 pa);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_attach(struct bfa_msgq *msgq, struct bfa_ioc *ioc);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.h"
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_regisr(struct bfa_msgq *msgq, enum bfi_mclass mc, void (*cbfn)(void *, struct bfi_msgq_mhdr *), void *cbarg);
#line 31 
#line 185 
static void bfa_msgq_cmdq_dbell(struct bfa_msgq_cmdq *cmdq);
#line 32 
#line 277 
static void bfa_msgq_cmdq_copy_rsp(struct bfa_msgq_cmdq *cmdq);
#line 43 
#line 69 
static void cmdq_sm_stopped(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event);
#line 43 
#line 50 
static void cmdq_sm_stopped_entry(struct bfa_msgq_cmdq *cmdq);
#line 44 
#line 97 
static void cmdq_sm_init_wait(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event);
#line 44 
#line 91 
static void cmdq_sm_init_wait_entry(struct bfa_msgq_cmdq *cmdq);
#line 45 
#line 128 
static void cmdq_sm_ready(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event);
#line 45 
#line 123 
static void cmdq_sm_ready_entry(struct bfa_msgq_cmdq *cmdq);
#line 46 
#line 152 
static void cmdq_sm_dbell_wait(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event);
#line 46 
#line 146 
static void cmdq_sm_dbell_wait_entry(struct bfa_msgq_cmdq *cmdq);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_stopped_entry(struct bfa_msgq_cmdq *cmdq)
{
  #line 52 
  struct bfa_msgq_cmd_entry *cmdq_ent;
  #line 54 
  cmdq->producer_index = (unsigned short)0U;
  #line 55 
  cmdq->consumer_index = (unsigned short)0U;
  #line 56 
  cmdq->flags = (enum bfa_msgq_cmdq_flags)0;
  #line 57 
  cmdq->token = (unsigned short)0U;
  #line 58 
  cmdq->offset = 0;
  #line 59 
  cmdq->bytes_to_copy = 0;
  #line 60 
  while (1) {
    #line 60 
    if (! (list_empty_0(& cmdq->pending_q) == 0)) 
                                                  #line 60 
                                                  break;
    {
      #line 61 
      void *__mptr;
      #line 61 
      __mptr = (void *)cmdq->pending_q.next;
      #line 61 
      cmdq_ent = ((struct bfa_msgq_cmd_entry *)__mptr);
      #line 63 
      list_del_0(& cmdq_ent->qe);
      {
        #line 64 
        void (*cbfn)(void *, enum bfa_status );
        #line 64 
        void *cbarg;
        #line 64 
        cbfn = cmdq_ent->cbfn;
        #line 64 
        cbarg = cmdq_ent->cbarg;
        #line 64 
        cmdq_ent->cbfn = (void (*)(void *, enum bfa_status ))0;
        #line 64 
        cmdq_ent->cbarg = (void *)0;
        #line 64 
        if (cbfn != (void (*)(void *, enum bfa_status ))0) 
                                                           #line 64 
                                                           (*cbfn)(cbarg,(enum bfa_status)BFA_STATUS_FAILED);
      }
    }
  }
  #line 67 
  return;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_stopped(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event)
{
  #line 71 
  switch ((unsigned int)event) {
    #line 72 
    case (unsigned int)1: 
                          #line 72 
    ;
    #line 73 
    cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_init_wait);
    #line 73 
    cmdq_sm_init_wait_entry(cmdq);
    #line 74 
    break;
    #line 76 
    case (unsigned int)2: 
                          #line 76 
    ;
    #line 77 
    case (unsigned int)3: 
                          #line 77 
    ;
    #line 79 
    break;
    #line 81 
    case (unsigned int)4: 
                          #line 81 
    ;
    #line 82 
    cmdq->flags = (enum bfa_msgq_cmdq_flags)((unsigned int)cmdq->flags | 1U);
    #line 83 
    break;
    #line 85 
    default: 
             #line 85 
    ;
    #line 86 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",86,(unsigned int)event);
  }
  #line 88 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_init_wait_entry(struct bfa_msgq_cmdq *cmdq)
{
  #line 93 
  bfa_wc_down(& (cmdq->msgq)->init_wc);
  #line 94 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_init_wait(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event)
{
  #line 99 
  switch ((unsigned int)event) {
    #line 100 
    case (unsigned int)2: 
                          #line 100 
    ;
    #line 101 
    case (unsigned int)3: 
                          #line 101 
    ;
    #line 102 
    cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_stopped);
    #line 102 
    cmdq_sm_stopped_entry(cmdq);
    #line 103 
    break;
    #line 105 
    case (unsigned int)4: 
                          #line 105 
    ;
    #line 106 
    cmdq->flags = (enum bfa_msgq_cmdq_flags)((unsigned int)cmdq->flags | 1U);
    #line 107 
    break;
    #line 109 
    case (unsigned int)5: 
                          #line 109 
    ;
    #line 110 
    if (((unsigned int)cmdq->flags & 1U) != 0U) {
      #line 111 
      cmdq->flags = (enum bfa_msgq_cmdq_flags)((unsigned int)cmdq->flags & 4294967294U);
      #line 112 
      cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_dbell_wait);
      #line 112 
      cmdq_sm_dbell_wait_entry(cmdq);
    }
    else {
      #line 114 
      cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_ready);
      #line 114 
      cmdq_sm_ready_entry(cmdq);
    }
    #line 115 
    break;
    #line 117 
    default: 
             #line 117 
    ;
    #line 118 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",118,(unsigned int)event);
  }
  #line 120 
  return;
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_ready_entry(struct bfa_msgq_cmdq *cmdq)
{
  #line 125 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_ready(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event)
{
  #line 130 
  switch ((unsigned int)event) {
    #line 131 
    case (unsigned int)2: 
                          #line 131 
    ;
    #line 132 
    case (unsigned int)3: 
                          #line 132 
    ;
    #line 133 
    cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_stopped);
    #line 133 
    cmdq_sm_stopped_entry(cmdq);
    #line 134 
    break;
    #line 136 
    case (unsigned int)4: 
                          #line 136 
    ;
    #line 137 
    cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_dbell_wait);
    #line 137 
    cmdq_sm_dbell_wait_entry(cmdq);
    #line 138 
    break;
    #line 140 
    default: 
             #line 140 
    ;
    #line 141 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",141,(unsigned int)event);
  }
  #line 143 
  return;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_dbell_wait_entry(struct bfa_msgq_cmdq *cmdq)
{
  #line 148 
  bfa_msgq_cmdq_dbell(cmdq);
  #line 149 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void cmdq_sm_dbell_wait(struct bfa_msgq_cmdq *cmdq, enum cmdq_event event)
{
  #line 154 
  switch ((unsigned int)event) {
    #line 155 
    case (unsigned int)2: 
                          #line 155 
    ;
    #line 156 
    case (unsigned int)3: 
                          #line 156 
    ;
    #line 157 
    cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_stopped);
    #line 157 
    cmdq_sm_stopped_entry(cmdq);
    #line 158 
    break;
    #line 160 
    case (unsigned int)4: 
                          #line 160 
    ;
    #line 161 
    cmdq->flags = (enum bfa_msgq_cmdq_flags)((unsigned int)cmdq->flags | 1U);
    #line 162 
    break;
    #line 164 
    case (unsigned int)6: 
                          #line 164 
    ;
    #line 165 
    if (((unsigned int)cmdq->flags & 1U) != 0U) {
      #line 166 
      cmdq->flags = (enum bfa_msgq_cmdq_flags)((unsigned int)cmdq->flags & 4294967294U);
      #line 167 
      cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_dbell_wait);
      #line 167 
      cmdq_sm_dbell_wait_entry(cmdq);
    }
    else {
      #line 169 
      cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_ready);
      #line 169 
      cmdq_sm_ready_entry(cmdq);
    }
    #line 170 
    break;
    #line 172 
    default: 
             #line 172 
    ;
    #line 173 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",173,(unsigned int)event);
  }
  #line 175 
  return;
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_dbell_ready(void *arg)
{
  #line 180 
  struct bfa_msgq_cmdq *cmdq = (struct bfa_msgq_cmdq *)arg;
  #line 181 
  (*(cmdq->fsm))((void *)cmdq,6);
  #line 182 
  return;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_dbell(struct bfa_msgq_cmdq *cmdq)
{
  #line 187 
  struct bfi_msgq_h2i_db *dbell = (struct bfi_msgq_h2i_db *)(& cmdq->dbell_mb.msg[0]);
  #line 190 
  memset((void *)dbell,0,6UL);
  #line 191 
  dbell->mh.msg_class = (unsigned char)23U;
  #line 191 
  dbell->mh.msg_id = (unsigned char)2U;
  #line 191 
  dbell->mh.mtag.h2i.fn_lpu = (unsigned char)0U;
  #line 192 
  dbell->mh.mtag.i2htok = (unsigned short)0U;
  #line 193 
  dbell->idx.cmdq_pi = __builtin_bswap16((unsigned short)((int)cmdq->producer_index));
  #line 195 
  if (! bfa_nw_ioc_mbox_queue((cmdq->msgq)->ioc,& cmdq->dbell_mb,
                            & bfa_msgq_cmdq_dbell_ready,(void *)cmdq)) 
    #line 197 
    bfa_msgq_cmdq_dbell_ready((void *)cmdq);
  #line 198 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void __cmd_copy(struct bfa_msgq_cmdq *cmdq, struct bfa_msgq_cmd_entry *cmd)
{
  #line 206 
  size_t to_copy;
  #line 207 
  u8 *src;
  #line 207 
  u8 *dst;
  #line 204 
  size_t len = cmd->msg_size;
  #line 205 
  int num_entries = 0;
  #line 209 
  src = (u8 *)cmd->msg_hdr;
  #line 210 
  dst = (u8 *)cmdq->addr.kva;
  #line 211 
  dst += (unsigned long)((int)cmdq->producer_index * 64);
  #line 213 
  while (len != 0UL) {
    #line 214 
    if (64UL < len) 
                    #line 214 
                    to_copy = 64UL; else 
                                         #line 214 
                                         to_copy = len;
    #line 216 
    memcpy((void *)dst,(void *)src,to_copy);
    #line 217 
    len -= to_copy;
    #line 218 
    src += 64U;
    #line 219 
    cmdq->producer_index = (unsigned short)(((unsigned int)cmdq->producer_index + 1U) & ((unsigned int)cmdq->depth + 65535U));
    #line 220 
    dst = (u8 *)cmdq->addr.kva;
    #line 221 
    dst += (unsigned long)((int)cmdq->producer_index * 64);
    #line 222 
    num_entries ++;
  }
  #line 224 
  return;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_ci_update(struct bfa_msgq_cmdq *cmdq, struct bfi_mbmsg *mb)
{
  #line 231 
  struct bfa_msgq_cmd_entry *cmd;
  #line 230 
  struct bfi_msgq_i2h_db *dbell = (struct bfi_msgq_i2h_db *)mb;
  #line 232 
  int posted = 0;
  #line 234 
  cmdq->consumer_index = __builtin_bswap16((unsigned short)((int)dbell->idx.cmdq_ci));
  #line 237 
  while (1) {
    #line 237 
    if (! (list_empty_0(& cmdq->pending_q) == 0)) 
                                                  #line 237 
                                                  break;
    {
      #line 238 
      void *__mptr;
      #line 238 
      __mptr = (void *)cmdq->pending_q.next;
      #line 238 
      cmd = ((struct bfa_msgq_cmd_entry *)__mptr);
      #line 240 
      ;
      #line 240 
      if ((int)__builtin_bswap16((unsigned short)((int)(cmd->msg_hdr)->num_entries)) <= ((((int)cmdq->consumer_index - (int)cmdq->producer_index) + -1) & ((int)cmdq->depth + -1))) {
        #line 242 
        list_del_0(& cmd->qe);
        #line 243 
        __cmd_copy(cmdq,cmd);
        #line 244 
        posted = 1;
        {
          #line 245 
          void (*cbfn)(void *, enum bfa_status );
          #line 245 
          void *cbarg;
          #line 245 
          cbfn = cmd->cbfn;
          #line 245 
          cbarg = cmd->cbarg;
          #line 245 
          cmd->cbfn = (void (*)(void *, enum bfa_status ))0;
          #line 245 
          cmd->cbarg = (void *)0;
          #line 245 
          if (cbfn != (void (*)(void *, enum bfa_status ))0) 
                                                             #line 245 
                                                             (*cbfn)(cbarg,(enum bfa_status)BFA_STATUS_OK);
        }
      }
      else 
           #line 247 
           break;
    }
  }
  #line 251 
  if (posted != 0) 
                   #line 252 
                   (*(cmdq->fsm))((void *)cmdq,4);
  #line 253 
  return;
}

#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_copy_next(void *arg)
{
  #line 258 
  struct bfa_msgq_cmdq *cmdq = (struct bfa_msgq_cmdq *)arg;
  #line 260 
  if (cmdq->bytes_to_copy != 0) 
                                #line 261 
                                bfa_msgq_cmdq_copy_rsp(cmdq);
  #line 262 
  return;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_copy_req(struct bfa_msgq_cmdq *cmdq, struct bfi_mbmsg *mb)
{
  #line 267 
  struct bfi_msgq_i2h_cmdq_copy_req *req = (struct bfi_msgq_i2h_cmdq_copy_req *)mb;
  #line 270 
  cmdq->token = (unsigned short)0U;
  #line 271 
  cmdq->offset = (int)__builtin_bswap16((unsigned short)((int)req->offset));
  #line 272 
  cmdq->bytes_to_copy = (int)__builtin_bswap16((unsigned short)((int)req->len));
  #line 273 
  bfa_msgq_cmdq_copy_rsp(cmdq);
  #line 274 
  return;
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_copy_rsp(struct bfa_msgq_cmdq *cmdq)
{
  #line 281 
  int copied;
  #line 279 
  struct bfi_msgq_h2i_cmdq_copy_rsp *rsp = (struct bfi_msgq_h2i_cmdq_copy_rsp *)(& cmdq->copy_mb.msg[0]);
  #line 282 
  u8 *addr = (u8 *)cmdq->addr.kva;
  #line 284 
  memset((void *)rsp,0,32UL);
  #line 285 
  rsp->mh.msg_class = (unsigned char)23U;
  #line 285 
  rsp->mh.msg_id = (unsigned char)4U;
  #line 285 
  rsp->mh.mtag.h2i.fn_lpu = (unsigned char)0U;
  #line 286 
  rsp->mh.mtag.i2htok = __builtin_bswap16((unsigned short)((int)cmdq->token));
  #line 287 
  if (28 < cmdq->bytes_to_copy) 
                                #line 287 
                                copied = 28; else 
                                                  #line 287 
                                                  copied = cmdq->bytes_to_copy;
  #line 289 
  addr += (unsigned long)cmdq->offset;
  #line 290 
  memcpy((void *)(& rsp->data),(void *)addr,(unsigned long)copied);
  #line 292 
  cmdq->token = (u16)((int)cmdq->token + 1);
  #line 293 
  cmdq->offset += copied;
  #line 294 
  cmdq->bytes_to_copy -= copied;
  #line 296 
  if (! bfa_nw_ioc_mbox_queue((cmdq->msgq)->ioc,& cmdq->copy_mb,
                            & bfa_msgq_cmdq_copy_next,(void *)cmdq)) 
    #line 298 
    bfa_msgq_cmdq_copy_next((void *)cmdq);
  #line 299 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_cmdq_attach(struct bfa_msgq_cmdq *cmdq, struct bfa_msgq *msgq)
{
  #line 305 
  cmdq->depth = (unsigned short)128U;
  #line 306 
  INIT_LIST_HEAD_1(& cmdq->pending_q);
  #line 307 
  cmdq->msgq = msgq;
  #line 308 
  cmdq->fsm = (void (*)(void *, int ))(& cmdq_sm_stopped);
  #line 308 
  cmdq_sm_stopped_entry(cmdq);
  #line 310 
  return;
}

#line 311 
#line 443 
static void bfa_msgq_rspq_dbell(struct bfa_msgq_rspq *rspq);
#line 322 
#line 338 
static void rspq_sm_stopped(struct bfa_msgq_rspq *rspq, enum rspq_event event);
#line 322 
#line 330 
static void rspq_sm_stopped_entry(struct bfa_msgq_rspq *rspq);
#line 323 
#line 362 
static void rspq_sm_init_wait(struct bfa_msgq_rspq *rspq, enum rspq_event event);
#line 323 
#line 356 
static void rspq_sm_init_wait_entry(struct bfa_msgq_rspq *rspq);
#line 325 
#line 385 
static void rspq_sm_ready(struct bfa_msgq_rspq *rspq, enum rspq_event event);
#line 325 
#line 380 
static void rspq_sm_ready_entry(struct bfa_msgq_rspq *rspq);
#line 326 
#line 410 
static void rspq_sm_dbell_wait(struct bfa_msgq_rspq *rspq, enum rspq_event event);
#line 326 
#line 403 
static void rspq_sm_dbell_wait_entry(struct bfa_msgq_rspq *rspq);
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_stopped_entry(struct bfa_msgq_rspq *rspq)
{
  #line 332 
  rspq->producer_index = (unsigned short)0U;
  #line 333 
  rspq->consumer_index = (unsigned short)0U;
  #line 334 
  rspq->flags = (enum bfa_msgq_rspq_flags)0;
  #line 335 
  return;
}

#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_stopped(struct bfa_msgq_rspq *rspq, enum rspq_event event)
{
  #line 340 
  switch ((unsigned int)event) {
    #line 341 
    case (unsigned int)1: 
                          #line 341 
    ;
    #line 342 
    rspq->fsm = (void (*)(void *, int ))(& rspq_sm_init_wait);
    #line 342 
    rspq_sm_init_wait_entry(rspq);
    #line 343 
    break;
    #line 345 
    case (unsigned int)2: 
                          #line 345 
    ;
    #line 346 
    case (unsigned int)3: 
                          #line 346 
    ;
    #line 348 
    break;
    #line 350 
    default: 
             #line 350 
    ;
    #line 351 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",351,(unsigned int)event);
  }
  #line 353 
  return;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_init_wait_entry(struct bfa_msgq_rspq *rspq)
{
  #line 358 
  bfa_wc_down(& (rspq->msgq)->init_wc);
  #line 359 
  return;
}

#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_init_wait(struct bfa_msgq_rspq *rspq, enum rspq_event event)
{
  #line 364 
  switch ((unsigned int)event) {
    #line 365 
    case (unsigned int)3: 
                          #line 365 
    ;
    #line 366 
    case (unsigned int)2: 
                          #line 366 
    ;
    #line 367 
    rspq->fsm = (void (*)(void *, int ))(& rspq_sm_stopped);
    #line 367 
    rspq_sm_stopped_entry(rspq);
    #line 368 
    break;
    #line 370 
    case (unsigned int)5: 
                          #line 370 
    ;
    #line 371 
    rspq->fsm = (void (*)(void *, int ))(& rspq_sm_ready);
    #line 371 
    rspq_sm_ready_entry(rspq);
    #line 372 
    break;
    #line 374 
    default: 
             #line 374 
    ;
    #line 375 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",375,(unsigned int)event);
  }
  #line 377 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_ready_entry(struct bfa_msgq_rspq *rspq)
{
  #line 382 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_ready(struct bfa_msgq_rspq *rspq, enum rspq_event event)
{
  #line 387 
  switch ((unsigned int)event) {
    #line 388 
    case (unsigned int)2: 
                          #line 388 
    ;
    #line 389 
    case (unsigned int)3: 
                          #line 389 
    ;
    #line 390 
    rspq->fsm = (void (*)(void *, int ))(& rspq_sm_stopped);
    #line 390 
    rspq_sm_stopped_entry(rspq);
    #line 391 
    break;
    #line 393 
    case (unsigned int)4: 
                          #line 393 
    ;
    #line 394 
    rspq->fsm = (void (*)(void *, int ))(& rspq_sm_dbell_wait);
    #line 394 
    rspq_sm_dbell_wait_entry(rspq);
    #line 395 
    break;
    #line 397 
    default: 
             #line 397 
    ;
    #line 398 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",398,(unsigned int)event);
  }
  #line 400 
  return;
}

#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_dbell_wait_entry(struct bfa_msgq_rspq *rspq)
{
  #line 405 
  if (! bfa_nw_ioc_is_disabled((rspq->msgq)->ioc)) 
                                                   #line 406 
                                                   bfa_msgq_rspq_dbell(rspq);
  #line 407 
  return;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void rspq_sm_dbell_wait(struct bfa_msgq_rspq *rspq, enum rspq_event event)
{
  #line 412 
  switch ((unsigned int)event) {
    #line 413 
    case (unsigned int)2: 
                          #line 413 
    ;
    #line 414 
    case (unsigned int)3: 
                          #line 414 
    ;
    #line 415 
    rspq->fsm = (void (*)(void *, int ))(& rspq_sm_stopped);
    #line 415 
    rspq_sm_stopped_entry(rspq);
    #line 416 
    break;
    #line 418 
    case (unsigned int)4: 
                          #line 418 
    ;
    #line 419 
    rspq->flags = (enum bfa_msgq_rspq_flags)((unsigned int)rspq->flags | 1U);
    #line 420 
    break;
    #line 422 
    case (unsigned int)6: 
                          #line 422 
    ;
    #line 423 
    if (((unsigned int)rspq->flags & 1U) != 0U) {
      #line 424 
      rspq->flags = (enum bfa_msgq_rspq_flags)((unsigned int)rspq->flags & 4294967294U);
      #line 425 
      rspq->fsm = (void (*)(void *, int ))(& rspq_sm_dbell_wait);
      #line 425 
      rspq_sm_dbell_wait_entry(rspq);
    }
    else {
      #line 427 
      rspq->fsm = (void (*)(void *, int ))(& rspq_sm_ready);
      #line 427 
      rspq_sm_ready_entry(rspq);
    }
    #line 428 
    break;
    #line 430 
    default: 
             #line 430 
    ;
    #line 431 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c",431,(unsigned int)event);
  }
  #line 433 
  return;
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_rspq_dbell_ready(void *arg)
{
  #line 438 
  struct bfa_msgq_rspq *rspq = (struct bfa_msgq_rspq *)arg;
  #line 439 
  (*(rspq->fsm))((void *)rspq,6);
  #line 440 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_rspq_dbell(struct bfa_msgq_rspq *rspq)
{
  #line 445 
  struct bfi_msgq_h2i_db *dbell = (struct bfi_msgq_h2i_db *)(& rspq->dbell_mb.msg[0]);
  #line 448 
  memset((void *)dbell,0,6UL);
  #line 449 
  dbell->mh.msg_class = (unsigned char)23U;
  #line 449 
  dbell->mh.msg_id = (unsigned char)3U;
  #line 449 
  dbell->mh.mtag.h2i.fn_lpu = (unsigned char)0U;
  #line 450 
  dbell->mh.mtag.i2htok = (unsigned short)0U;
  #line 451 
  dbell->idx.rspq_ci = __builtin_bswap16((unsigned short)((int)rspq->consumer_index));
  #line 453 
  if (! bfa_nw_ioc_mbox_queue((rspq->msgq)->ioc,& rspq->dbell_mb,
                            & bfa_msgq_rspq_dbell_ready,(void *)rspq)) 
    #line 455 
    bfa_msgq_rspq_dbell_ready((void *)rspq);
  #line 456 
  return;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_rspq_pi_update(struct bfa_msgq_rspq *rspq, struct bfi_mbmsg *mb)
{
  #line 463 
  struct bfi_msgq_mhdr *msghdr;
  #line 464 
  int num_entries;
  #line 465 
  int mc;
  #line 466 
  u8 *rspq_qe;
  #line 462 
  struct bfi_msgq_i2h_db *dbell = (struct bfi_msgq_i2h_db *)mb;
  #line 468 
  rspq->producer_index = __builtin_bswap16((unsigned short)((int)dbell->idx.rspq_pi));
  #line 470 
  while ((int)rspq->consumer_index != (int)rspq->producer_index) {
    #line 471 
    rspq_qe = (u8 *)rspq->addr.kva;
    #line 472 
    rspq_qe += (unsigned long)((int)rspq->consumer_index * 64);
    #line 473 
    msghdr = (struct bfi_msgq_mhdr *)rspq_qe;
    #line 475 
    mc = (int)msghdr->msg_class;
    #line 476 
    num_entries = (int)__builtin_bswap16((unsigned short)((int)msghdr->num_entries));
    #line 478 
    if (mc > 33 || rspq->rsphdlr[mc].cbfn == (void (*)(void *, struct bfi_msgq_mhdr *))0) 
      #line 479 
      break;
    #line 481 
    (*(rspq->rsphdlr[mc].cbfn))(rspq->rsphdlr[mc].cbarg,msghdr);
    #line 483 
    rspq->consumer_index = (unsigned short)((unsigned int)((int)rspq->consumer_index + num_entries) & ((unsigned int)rspq->depth + 65535U));
  }
  #line 487 
  (*(rspq->fsm))((void *)rspq,4);
  #line 488 
  return;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_rspq_attach(struct bfa_msgq_rspq *rspq, struct bfa_msgq *msgq)
{
  #line 493 
  rspq->depth = (unsigned short)128U;
  #line 494 
  rspq->msgq = msgq;
  #line 495 
  rspq->fsm = (void (*)(void *, int ))(& rspq_sm_stopped);
  #line 495 
  rspq_sm_stopped_entry(rspq);
  #line 497 
  return;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_init_rsp(struct bfa_msgq *msgq, struct bfi_mbmsg *mb)
{
  #line 502 
  (*(msgq->cmdq.fsm))((void *)(& msgq->cmdq),5);
  #line 503 
  (*(msgq->rspq.fsm))((void *)(& msgq->rspq),5);
  #line 504 
  return;
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_init(void *arg)
{
  #line 509 
  struct bfa_msgq *msgq = (struct bfa_msgq *)arg;
  #line 510 
  struct bfi_msgq_cfg_req *msgq_cfg = (struct bfi_msgq_cfg_req *)(& msgq->init_mb.msg[0]);
  #line 513 
  memset((void *)msgq_cfg,0,28UL);
  #line 514 
  msgq_cfg->mh.msg_class = (unsigned char)23U;
  #line 514 
  msgq_cfg->mh.msg_id = (unsigned char)1U;
  #line 514 
  msgq_cfg->mh.mtag.h2i.fn_lpu = (unsigned char)0U;
  #line 515 
  msgq_cfg->mh.mtag.i2htok = (unsigned short)0U;
  #line 517 
  __bfa_dma_be_addr_set(& msgq_cfg->cmdq.addr,msgq->cmdq.addr.pa);
  #line 518 
  msgq_cfg->cmdq.q_depth = __builtin_bswap16((unsigned short)((int)msgq->cmdq.depth));
  #line 519 
  __bfa_dma_be_addr_set(& msgq_cfg->rspq.addr,msgq->rspq.addr.pa);
  #line 520 
  msgq_cfg->rspq.q_depth = __builtin_bswap16((unsigned short)((int)msgq->rspq.depth));
  #line 522 
  bfa_nw_ioc_mbox_queue(msgq->ioc,& msgq->init_mb,(void (*)(void *))0,(void *)0);
  #line 523 
  return;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_isr(void *cbarg, struct bfi_mbmsg *msg)
{
  #line 528 
  struct bfa_msgq *msgq = (struct bfa_msgq *)cbarg;
  #line 530 
  switch ((int)msg->mh.msg_id) {
    #line 531 
    case 129: 
              #line 531 
    ;
    #line 532 
    bfa_msgq_init_rsp(msgq,msg);
    #line 533 
    break;
    #line 535 
    case 130: 
              #line 535 
    ;
    #line 536 
    bfa_msgq_rspq_pi_update(& msgq->rspq,msg);
    #line 537 
    break;
    #line 539 
    case 131: 
              #line 539 
    ;
    #line 540 
    bfa_msgq_cmdq_ci_update(& msgq->cmdq,msg);
    #line 541 
    break;
    #line 543 
    case 132: 
              #line 543 
    ;
    #line 544 
    bfa_msgq_cmdq_copy_req(& msgq->cmdq,msg);
    #line 545 
    break;
    #line 547 
    default: 
             #line 547 
    ;
    #line 549 
    ldv_inline_asm();
    #line 550 
    ldv_inline_asm();
    #line 551 
    ldv_inline_asm();
    #line 548 
    ;
  }
  #line 552 
  return;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
static void bfa_msgq_notify(void *cbarg, enum bfa_ioc_event event)
{
  #line 555 
  struct bfa_msgq *msgq = (struct bfa_msgq *)cbarg;
  #line 557 
  switch ((unsigned int)event) {
    #line 558 
    case (unsigned int)1: 
                          #line 558 
    ;
    #line 559 
    bfa_wc_init(& msgq->init_wc,& bfa_msgq_init,(void *)msgq);
    #line 560 
    bfa_wc_up(& msgq->init_wc);
    #line 561 
    (*(msgq->cmdq.fsm))((void *)(& msgq->cmdq),1);
    #line 562 
    bfa_wc_up(& msgq->init_wc);
    #line 563 
    (*(msgq->rspq.fsm))((void *)(& msgq->rspq),1);
    #line 564 
    bfa_wc_wait(& msgq->init_wc);
    #line 565 
    break;
    #line 567 
    case (unsigned int)2: 
                          #line 567 
    ;
    #line 568 
    (*(msgq->cmdq.fsm))((void *)(& msgq->cmdq),2);
    #line 569 
    (*(msgq->rspq.fsm))((void *)(& msgq->rspq),2);
    #line 570 
    break;
    #line 572 
    case (unsigned int)3: 
                          #line 572 
    ;
    #line 573 
    (*(msgq->cmdq.fsm))((void *)(& msgq->cmdq),3);
    #line 574 
    (*(msgq->rspq.fsm))((void *)(& msgq->rspq),3);
    #line 575 
    break;
    #line 577 
    default: 
             #line 577 
    ;
    #line 578 
    break;
  }
  #line 580 
  return;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
u32 bfa_msgq_meminfo(void)
{
  #line 585 
  int __y;
  #line 586 
  int __y_0;
  #line 585 
  int tmp;
  #line 585 
  __y = 256;
  #line 585 
  tmp = ((__y + 8191) / __y) * __y;
  #line 586 
  __y_0 = 256;
  #line 585 
  return (unsigned int)(tmp + (((__y_0 + 8191) / __y_0) * __y_0));
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_memclaim(struct bfa_msgq *msgq, u8 *kva, u64 pa)
{
  #line 596 
  int __y_0;
  #line 595 
  int __y;
  #line 592 
  msgq->cmdq.addr.kva = (void *)kva;
  #line 593 
  msgq->cmdq.addr.pa = pa;
  #line 595 
  __y = 256;
  #line 595 
  kva += (unsigned long)(((__y + 8191) / __y) * __y);
  #line 596 
  __y_0 = 256;
  #line 596 
  pa = (unsigned long long)(((__y_0 + 8191) / __y_0) * __y_0) + pa;
  #line 598 
  msgq->rspq.addr.kva = (void *)kva;
  #line 599 
  msgq->rspq.addr.pa = pa;
  #line 600 
  return;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_attach(struct bfa_msgq *msgq, struct bfa_ioc *ioc)
{
  #line 605 
  msgq->ioc = ioc;
  #line 607 
  bfa_msgq_cmdq_attach(& msgq->cmdq,msgq);
  #line 608 
  bfa_msgq_rspq_attach(& msgq->rspq,msgq);
  #line 610 
  bfa_nw_ioc_mbox_regisr(msgq->ioc,(enum bfi_mclass)BFI_MC_MSGQ,& bfa_msgq_isr,(void *)msgq);
  #line 611 
  msgq->ioc_notify.cbfn = & bfa_msgq_notify;
  #line 611 
  msgq->ioc_notify.cbarg = (void *)msgq;
  #line 612 
  bfa_nw_ioc_notify_register(msgq->ioc,& msgq->ioc_notify);
  #line 613 
  return;
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_regisr(struct bfa_msgq *msgq, enum bfi_mclass mc, void (*cbfn)(void *, struct bfi_msgq_mhdr *), void *cbarg)
{
  #line 619 
  msgq->rspq.rsphdlr[(unsigned int)mc].cbfn = cbfn;
  #line 620 
  msgq->rspq.rsphdlr[(unsigned int)mc].cbarg = cbarg;
  #line 621 
  return;
}

#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_cmd_post(struct bfa_msgq *msgq, struct bfa_msgq_cmd_entry *cmd)
{
  #line 626 
  ;
  #line 626 
  if ((int)__builtin_bswap16((unsigned short)((int)(cmd->msg_hdr)->num_entries)) <= ((((int)msgq->cmdq.consumer_index - (int)msgq->cmdq.producer_index) + -1) & ((int)msgq->cmdq.depth + -1))) {
    #line 628 
    __cmd_copy(& msgq->cmdq,cmd);
    {
      #line 629 
      void (*cbfn)(void *, enum bfa_status );
      #line 629 
      void *cbarg;
      #line 629 
      cbfn = cmd->cbfn;
      #line 629 
      cbarg = cmd->cbarg;
      #line 629 
      cmd->cbfn = (void (*)(void *, enum bfa_status ))0;
      #line 629 
      cmd->cbarg = (void *)0;
      #line 629 
      if (cbfn != (void (*)(void *, enum bfa_status ))0) 
                                                         #line 629 
                                                         (*cbfn)(cbarg,(enum bfa_status)BFA_STATUS_OK);
    }
    #line 630 
    (*(msgq->cmdq.fsm))((void *)(& msgq->cmdq),4);
  }
  else 
       #line 632 
       list_add_tail_0(& cmd->qe,& msgq->cmdq.pending_q);
  #line 633 
  return;
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_msgq.c"
void bfa_msgq_rsp_copy(struct bfa_msgq *msgq, u8 *buf, size_t buf_len)
{
  #line 641 
  size_t to_copy;
  #line 642 
  int ci;
  #line 643 
  u8 *src;
  #line 643 
  u8 *dst;
  #line 639 
  struct bfa_msgq_rspq *rspq = & msgq->rspq;
  #line 640 
  size_t len = buf_len;
  #line 645 
  ci = (int)rspq->consumer_index;
  #line 646 
  src = (u8 *)rspq->addr.kva;
  #line 647 
  src += (unsigned long)(ci * 64);
  #line 648 
  dst = buf;
  #line 650 
  while (len != 0UL) {
    #line 651 
    if (64UL < len) 
                    #line 651 
                    to_copy = 64UL; else 
                                         #line 651 
                                         to_copy = len;
    #line 653 
    memcpy((void *)dst,(void *)src,to_copy);
    #line 654 
    len -= to_copy;
    #line 655 
    dst += 64U;
    #line 656 
    ci = (ci + 1) & ((int)rspq->depth + -1);
    #line 657 
    src = (u8 *)rspq->addr.kva;
    #line 658 
    src += (unsigned long)(ci * 64);
  }
  #line 660 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_msgq.i.aux"
static void INIT_LIST_HEAD_1(struct list_head *list)
{
  #line 139 
  ldv_init_list_head(list);
  #line 140 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bna_enet.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_5701 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_1(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_1(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_5703 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 247 
void bfa_nw_ioc_mbox_isr(struct bfa_ioc *ioc);
#line 266 
#line 266 
void bfa_nw_ioc_attach(struct bfa_ioc *ioc, void *bfa, struct bfa_ioc_cbfn *cbfn);
#line 269 
#line 269 
void bfa_nw_ioc_detach(struct bfa_ioc *ioc);
#line 270 
#line 270 
void bfa_nw_ioc_pci_init(struct bfa_ioc *ioc, struct bfa_pcidev *pcidev, enum bfi_pcifn_class clscode);
#line 272 
#line 272 
u32 bfa_nw_ioc_meminfo(void);
#line 273 
#line 273 
void bfa_nw_ioc_mem_claim(struct bfa_ioc *ioc, u8 *dm_kva, u64 dm_pa);
#line 274 
#line 274 
void bfa_nw_ioc_enable(struct bfa_ioc *ioc);
#line 275 
#line 275 
void bfa_nw_ioc_disable(struct bfa_ioc *ioc);
#line 277 
#line 277 
void bfa_nw_ioc_error_isr(struct bfa_ioc *ioc);
#line 291 
#line 291 
void bfa_nw_ioc_get_mac(struct bfa_ioc *ioc, u8 *mac);
#line 292 
#line 292 
void bfa_nw_ioc_debug_memclaim(struct bfa_ioc *ioc, void *dbg_fwsave);
#line 343 
#line 343 
u32 bfa_nw_flash_meminfo(void);
#line 344 
#line 344 
void bfa_nw_flash_attach(struct bfa_flash *flash, struct bfa_ioc *ioc, void *dev);
#line 346 
#line 346 
void bfa_nw_flash_memclaim(struct bfa_flash *flash, u8 *dm_kva, u64 dm_pa);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.h"
#line 51 
u32 bfa_nw_cee_meminfo(void);
#line 52 
#line 52 
void bfa_nw_cee_mem_claim(struct bfa_cee *cee, u8 *dma_kva, u64 dma_pa);
#line 54 
#line 54 
void bfa_nw_cee_attach(struct bfa_cee *cee, struct bfa_ioc *ioc, void *dev);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
__inline static int ethport_can_be_up(struct bna_ethport *ethport)
{
  #line 16 
  int ready = 0;
  #line 17 
  if ((ethport->bna)->enet.type == (unsigned int)BNA_ENET_T_REGULAR) 
    #line 18 
    ready = ((((unsigned int)ethport->flags & 1U) != 0U && ((unsigned int)ethport->flags & 4U) != 0U) && ((unsigned int)ethport->flags & 2U) != 0U) != 0; else 
                                                                    #line 22 
                                                                    ready = ((((unsigned int)ethport->flags & 1U) != 0U && ((unsigned int)ethport->flags & 4U) != 0U) && ((unsigned int)ethport->flags & 2U) == 0U) != 0;
  #line 25 
  return ready;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_enable_aen(struct bna_ethport *ethport, struct bfi_msgq_mhdr *msghdr)
{
  #line 79 
  ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags | 2U);
  #line 81 
  if (ethport_can_be_up(ethport) != 0) 
                                       #line 82 
                                       (*(ethport->fsm))((void *)ethport,4);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_disable_aen(struct bna_ethport *ethport, struct bfi_msgq_mhdr *msghdr)
{
  #line 89 
  int ethport_up = ethport_can_be_up(ethport);
  #line 91 
  ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags & 4294967293U);
  #line 93 
  if (ethport_up != 0) 
                       #line 94 
                       (*(ethport->fsm))((void *)ethport,5);
  #line 95 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_admin_rsp(struct bna_ethport *ethport, struct bfi_msgq_mhdr *msghdr)
{
  #line 104 
  void *__mptr;
  #line 101 
  struct bfi_enet_enable_req *admin_req = & ethport->bfi_enet_cmd.admin_req;
  #line 104 
  __mptr = (void *)msghdr;
  #line 103 
  struct bfi_enet_rsp *rsp = ((struct bfi_enet_rsp *)__mptr);
  #line 106 
  switch ((int)admin_req->enable) {
    #line 107 
    case 1: 
            #line 107 
    ;
    #line 108 
    if ((unsigned int)rsp->error == 0U) 
                                        #line 109 
                                        (*(ethport->fsm))((void *)ethport,6);
    else {
      #line 111 
      ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags & 4294967293U);
      #line 112 
      (*(ethport->fsm))((void *)ethport,8);
    }
    #line 114 
    break;
    #line 116 
    case 0: 
            #line 116 
    ;
    #line 117 
    (*(ethport->fsm))((void *)ethport,7);
    #line 118 
    ethport->link_status = BNA_LINK_DOWN;
    #line 119 
    (*(ethport->link_cbfn))((ethport->bna)->bnad,(enum bna_link_status)BNA_LINK_DOWN);
    #line 120 
    break;
  }
  #line 122 
  return;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_lpbk_rsp(struct bna_ethport *ethport, struct bfi_msgq_mhdr *msghdr)
{
  #line 131 
  void *__mptr;
  #line 128 
  struct bfi_enet_diag_lb_req *diag_lb_req = & ethport->bfi_enet_cmd.lpbk_req;
  #line 131 
  __mptr = (void *)msghdr;
  #line 130 
  struct bfi_enet_rsp *rsp = ((struct bfi_enet_rsp *)__mptr);
  #line 133 
  switch ((int)diag_lb_req->enable) {
    #line 134 
    case 1: 
            #line 134 
    ;
    #line 135 
    if ((unsigned int)rsp->error == 0U) 
                                        #line 136 
                                        (*(ethport->fsm))((void *)ethport,6);
    else {
      #line 138 
      ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags & 4294967294U);
      #line 139 
      (*(ethport->fsm))((void *)ethport,8);
    }
    #line 141 
    break;
    #line 143 
    case 0: 
            #line 143 
    ;
    #line 144 
    (*(ethport->fsm))((void *)ethport,7);
    #line 145 
    break;
  }
  #line 147 
  return;
}

#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_pause_set_rsp(struct bna_enet *enet, struct bfi_msgq_mhdr *msghdr)
{
  #line 152 
  (*(enet->fsm))((void *)enet,6);
  #line 153 
  return;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_attr_get_rsp(struct bna_ioceth *ioceth, struct bfi_msgq_mhdr *msghdr)
{
  #line 160 
  void *__mptr;
  #line 160 
  __mptr = (void *)msghdr;
  #line 159 
  struct bfi_enet_attr_rsp *rsp = ((struct bfi_enet_attr_rsp *)__mptr);
  #line 166 
  if (! ioceth->attr.fw_query_complete) {
    #line 167 
    ioceth->attr.num_txq = (int)__builtin_bswap32(rsp->max_cfg);
    #line 168 
    ioceth->attr.num_rxp = (int)__builtin_bswap32(rsp->max_cfg);
    #line 169 
    ioceth->attr.num_ucmac = (int)__builtin_bswap32(rsp->max_ucmac);
    #line 170 
    ioceth->attr.num_mcmac = 256;
    #line 171 
    ioceth->attr.max_rit_size = (int)__builtin_bswap32(rsp->rit_size);
    #line 172 
    ioceth->attr.fw_query_complete = (_Bool)1;
  }
  #line 175 
  (*(ioceth->fsm))((void *)ioceth,6);
  #line 176 
  return;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_stats_get_rsp(struct bna *bna, struct bfi_msgq_mhdr *msghdr)
{
  #line 182 
  u64 *stats_src;
  #line 183 
  u64 *stats_dst;
  #line 186 
  int count;
  #line 187 
  int i;
  #line 181 
  struct bfi_enet_stats_req *stats_req = & bna->stats_mod.stats_get;
  #line 184 
  u32 tx_enet_mask = __builtin_bswap32(stats_req->tx_enet_mask);
  #line 185 
  u32 rx_enet_mask = __builtin_bswap32(stats_req->rx_enet_mask);
  #line 189 
  count = 45;
  #line 189 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->mac_stats);
  #line 189 
  stats_dst = (u64 *)(& bna->stats.hw_stats.mac_stats);
  #line 189 
  i = 0;
  #line 189 
  while (i < count) {
    #line 189 
    *(stats_dst + (unsigned long)i) = (u64)__builtin_bswap64((unsigned long)*(stats_src + (unsigned long)i));
    #line 189 
    i ++;
  }
  #line 190 
  count = 48;
  #line 190 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->bpc_stats);
  #line 190 
  stats_dst = (u64 *)(& bna->stats.hw_stats.bpc_stats);
  #line 190 
  i = 0;
  #line 190 
  while (i < count) {
    #line 190 
    *(stats_dst + (unsigned long)i) = (u64)__builtin_bswap64((unsigned long)*(stats_src + (unsigned long)i));
    #line 190 
    i ++;
  }
  #line 191 
  count = 13;
  #line 191 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->rad_stats);
  #line 191 
  stats_dst = (u64 *)(& bna->stats.hw_stats.rad_stats);
  #line 191 
  i = 0;
  #line 191 
  while (i < count) {
    #line 191 
    *(stats_dst + (unsigned long)i) = (u64)__builtin_bswap64((unsigned long)*(stats_src + (unsigned long)i));
    #line 191 
    i ++;
  }
  #line 192 
  count = 13;
  #line 192 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->rlb_stats);
  #line 192 
  stats_dst = (u64 *)(& bna->stats.hw_stats.rlb_stats);
  #line 192 
  i = 0;
  #line 192 
  while (i < count) {
    #line 192 
    *(stats_dst + (unsigned long)i) = (u64)__builtin_bswap64((unsigned long)*(stats_src + (unsigned long)i));
    #line 192 
    i ++;
  }
  #line 193 
  count = 9;
  #line 193 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->fc_rx_stats);
  #line 193 
  stats_dst = (u64 *)(& bna->stats.hw_stats.fc_rx_stats);
  #line 193 
  i = 0;
  #line 193 
  while (i < count) {
    #line 193 
    *(stats_dst + (unsigned long)i) = (u64)__builtin_bswap64((unsigned long)*(stats_src + (unsigned long)i));
    #line 193 
    i ++;
  }
  #line 194 
  count = 12;
  #line 194 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->fc_tx_stats);
  #line 194 
  stats_dst = (u64 *)(& bna->stats.hw_stats.fc_tx_stats);
  #line 194 
  i = 0;
  #line 194 
  while (i < count) {
    #line 194 
    *(stats_dst + (unsigned long)i) = (u64)__builtin_bswap64((unsigned long)*(stats_src + (unsigned long)i));
    #line 194 
    i ++;
  }
  #line 196 
  stats_src = (u64 *)(& (bna->stats.hw_stats_kva)->rxf_stats[0]);
  #line 199 
  i = 0;
  #line 199 
  while (i <= 31) {
    #line 200 
    stats_dst = (u64 *)(& bna->stats.hw_stats.rxf_stats[i]);
    #line 201 
    memset((void *)stats_dst,0,80UL);
    #line 202 
    if ((((unsigned long)rx_enet_mask >> i) & 1UL) != 0UL) {
      #line 203 
      int k;
      #line 204 
      count = 10;
      #line 206 
      k = 0;
      #line 206 
      while (k < count) {
        #line 207 
        *(stats_dst + (unsigned long)k) = (u64)__builtin_bswap64((unsigned long)*stats_src);
        #line 208 
        stats_src ++;
        #line 206 
        k ++;
      }
    }
    #line 199 
    i ++;
  }
  #line 214 
  i = 0;
  #line 214 
  while (i <= 31) {
    #line 215 
    stats_dst = (u64 *)(& bna->stats.hw_stats.txf_stats[i]);
    #line 216 
    memset((void *)stats_dst,0,96UL);
    #line 217 
    if ((((unsigned long)tx_enet_mask >> i) & 1UL) != 0UL) {
      #line 218 
      int k_0;
      #line 219 
      count = 12;
      #line 221 
      k_0 = 0;
      #line 221 
      while (k_0 < count) {
        #line 222 
        *(stats_dst + (unsigned long)k_0) = (u64)__builtin_bswap64((unsigned long)*stats_src);
        #line 223 
        stats_src ++;
        #line 221 
        k_0 ++;
      }
    }
    #line 214 
    i ++;
  }
  #line 228 
  bna->stats_mod.stats_get_busy = (_Bool)0;
  #line 229 
  bnad_cb_stats_get(bna->bnad,(enum bna_cb_status)BNA_CB_SUCCESS,& bna->stats);
  #line 230 
  return;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_linkup_aen(struct bna_ethport *ethport, struct bfi_msgq_mhdr *msghdr)
{
  #line 236 
  ethport->link_status = BNA_LINK_UP;
  #line 239 
  (*(ethport->link_cbfn))((ethport->bna)->bnad,ethport->link_status);
  #line 240 
  return;
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_linkdown_aen(struct bna_ethport *ethport, struct bfi_msgq_mhdr *msghdr)
{
  #line 246 
  ethport->link_status = BNA_LINK_DOWN;
  #line 249 
  (*(ethport->link_cbfn))((ethport->bna)->bnad,(enum bna_link_status)BNA_LINK_DOWN);
  #line 250 
  return;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_err_handler(struct bna *bna, u32 intr_status)
{
  #line 255 
  if ((bna->bits.halt_status_bits & intr_status) != 0U) {
    #line 256 
    u32 init_halt;
    #line 256 
    init_halt = readl(bna->ioceth.ioc.ioc_regs.ll_halt);
    #line 256 
    init_halt &= 4294967294U;
    #line 256 
    writel(init_halt,bna->ioceth.ioc.ioc_regs.ll_halt);
    #line 256 
    init_halt = readl(bna->ioceth.ioc.ioc_regs.ll_halt);
  }
  #line 258 
  bfa_nw_ioc_error_isr(& bna->ioceth.ioc);
  #line 259 
  return;
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_mbox_handler(struct bna *bna, u32 intr_status)
{
  #line 264 
  if ((bna->bits.error_status_bits & intr_status) != 0U) {
    #line 265 
    bna_err_handler(bna,intr_status);
    #line 266 
    return;
  }
  #line 268 
  if ((bna->bits.mbox_status_bits & intr_status) != 0U) 
                                                        #line 269 
                                                        bfa_nw_ioc_mbox_isr(& bna->ioceth.ioc);
  #line 270 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_msgq_rsp_handler(void *arg, struct bfi_msgq_mhdr *msghdr)
{
  #line 276 
  struct bna_tx *tx;
  #line 277 
  struct bna_rx *rx;
  #line 275 
  struct bna *bna = (struct bna *)arg;
  #line 279 
  switch ((int)msghdr->msg_id) {
    #line 280 
    case 129: 
              #line 280 
    ;
    {
      #line 281 
      void *__mptr;
      #line 281 
      struct bna_rx *__rx;
      #line 281 
      struct bna_rx_mod *__rx_mod = & bna->rx_mod;
      #line 281 
      rx = (struct bna_rx *)0;
      #line 281 
      __mptr = (void *)__rx_mod->rx_active_q.next;
      #line 281 
      __rx = ((struct bna_rx *)__mptr);
      #line 281 
      while (& __rx->qe != & __rx_mod->rx_active_q) {
        #line 281 
        void *__mptr_0;
        #line 281 
        if (__rx->rid == (int)msghdr->enet_id) {
          #line 281 
          rx = __rx;
          #line 281 
          break;
        }
        #line 281 
        __mptr_0 = (void *)__rx->qe.next;
        #line 281 
        __rx = ((struct bna_rx *)__mptr_0);
      }
    }
    #line 282 
    if (rx != (struct bna_rx *)0) 
                                  #line 283 
                                  bna_bfi_rx_enet_start_rsp(rx,msghdr);
    #line 284 
    break;
    #line 286 
    case 130: 
              #line 286 
    ;
    {
      #line 287 
      void *__mptr_1;
      #line 287 
      struct bna_rx *__rx_0;
      #line 287 
      struct bna_rx_mod *__rx_mod_0 = & bna->rx_mod;
      #line 287 
      rx = (struct bna_rx *)0;
      #line 287 
      __mptr_1 = (void *)__rx_mod_0->rx_active_q.next;
      #line 287 
      __rx_0 = ((struct bna_rx *)__mptr_1);
      #line 287 
      while (& __rx_0->qe != & __rx_mod_0->rx_active_q) {
        #line 287 
        void *__mptr_2;
        #line 287 
        if (__rx_0->rid == (int)msghdr->enet_id) {
          #line 287 
          rx = __rx_0;
          #line 287 
          break;
        }
        #line 287 
        __mptr_2 = (void *)__rx_0->qe.next;
        #line 287 
        __rx_0 = ((struct bna_rx *)__mptr_2);
      }
    }
    #line 288 
    if (rx != (struct bna_rx *)0) 
                                  #line 289 
                                  bna_bfi_rx_enet_stop_rsp(rx,msghdr);
    #line 290 
    break;
    #line 292 
    case 131: 
              #line 292 
    ;
    #line 293 
    case 132: 
              #line 293 
    ;
    #line 294 
    case 133: 
              #line 294 
    ;
    #line 295 
    case 134: 
              #line 295 
    ;
    #line 296 
    case 135: 
              #line 296 
    ;
    #line 297 
    case 137: 
              #line 297 
    ;
    #line 298 
    case 138: 
              #line 298 
    ;
    #line 299 
    case 139: 
              #line 299 
    ;
    #line 300 
    case 141: 
              #line 300 
    ;
    #line 301 
    case 142: 
              #line 301 
    ;
    #line 302 
    case 143: 
              #line 302 
    ;
    #line 303 
    case 144: 
              #line 303 
    ;
    {
      #line 304 
      void *__mptr_3;
      #line 304 
      struct bna_rx *__rx_1;
      #line 304 
      struct bna_rx_mod *__rx_mod_1 = & bna->rx_mod;
      #line 304 
      rx = (struct bna_rx *)0;
      #line 304 
      __mptr_3 = (void *)__rx_mod_1->rx_active_q.next;
      #line 304 
      __rx_1 = ((struct bna_rx *)__mptr_3);
      #line 304 
      while (& __rx_1->qe != & __rx_mod_1->rx_active_q) {
        #line 304 
        void *__mptr_4;
        #line 304 
        if (__rx_1->rid == (int)msghdr->enet_id) {
          #line 304 
          rx = __rx_1;
          #line 304 
          break;
        }
        #line 304 
        __mptr_4 = (void *)__rx_1->qe.next;
        #line 304 
        __rx_1 = ((struct bna_rx *)__mptr_4);
      }
    }
    #line 305 
    if (rx != (struct bna_rx *)0) 
                                  #line 306 
                                  bna_bfi_rxf_cfg_rsp(& rx->rxf,msghdr);
    #line 307 
    break;
    #line 309 
    case 136: 
              #line 309 
    ;
    {
      #line 310 
      void *__mptr_5;
      #line 310 
      struct bna_rx *__rx_2;
      #line 310 
      struct bna_rx_mod *__rx_mod_2 = & bna->rx_mod;
      #line 310 
      rx = (struct bna_rx *)0;
      #line 310 
      __mptr_5 = (void *)__rx_mod_2->rx_active_q.next;
      #line 310 
      __rx_2 = ((struct bna_rx *)__mptr_5);
      #line 310 
      while (& __rx_2->qe != & __rx_mod_2->rx_active_q) {
        #line 310 
        void *__mptr_6;
        #line 310 
        if (__rx_2->rid == (int)msghdr->enet_id) {
          #line 310 
          rx = __rx_2;
          #line 310 
          break;
        }
        #line 310 
        __mptr_6 = (void *)__rx_2->qe.next;
        #line 310 
        __rx_2 = ((struct bna_rx *)__mptr_6);
      }
    }
    #line 311 
    if (rx != (struct bna_rx *)0) 
                                  #line 312 
                                  bna_bfi_rxf_ucast_set_rsp(& rx->rxf,msghdr);
    #line 313 
    break;
    #line 315 
    case 140: 
              #line 315 
    ;
    {
      #line 316 
      void *__mptr_7;
      #line 316 
      struct bna_rx *__rx_3;
      #line 316 
      struct bna_rx_mod *__rx_mod_3 = & bna->rx_mod;
      #line 316 
      rx = (struct bna_rx *)0;
      #line 316 
      __mptr_7 = (void *)__rx_mod_3->rx_active_q.next;
      #line 316 
      __rx_3 = ((struct bna_rx *)__mptr_7);
      #line 316 
      while (& __rx_3->qe != & __rx_mod_3->rx_active_q) {
        #line 316 
        void *__mptr_8;
        #line 316 
        if (__rx_3->rid == (int)msghdr->enet_id) {
          #line 316 
          rx = __rx_3;
          #line 316 
          break;
        }
        #line 316 
        __mptr_8 = (void *)__rx_3->qe.next;
        #line 316 
        __rx_3 = ((struct bna_rx *)__mptr_8);
      }
    }
    #line 317 
    if (rx != (struct bna_rx *)0) 
                                  #line 318 
                                  bna_bfi_rxf_mcast_add_rsp(& rx->rxf,msghdr);
    #line 319 
    break;
    #line 321 
    case 145: 
              #line 321 
    ;
    {
      #line 322 
      void *__mptr_9;
      #line 322 
      struct bna_tx *__tx;
      #line 322 
      struct bna_tx_mod *__tx_mod = & bna->tx_mod;
      #line 322 
      tx = (struct bna_tx *)0;
      #line 322 
      __mptr_9 = (void *)__tx_mod->tx_active_q.next;
      #line 322 
      __tx = ((struct bna_tx *)__mptr_9);
      #line 322 
      while (& __tx->qe != & __tx_mod->tx_active_q) {
        #line 322 
        void *__mptr_10;
        #line 322 
        if (__tx->rid == (int)msghdr->enet_id) {
          #line 322 
          tx = __tx;
          #line 322 
          break;
        }
        #line 322 
        __mptr_10 = (void *)__tx->qe.next;
        #line 322 
        __tx = ((struct bna_tx *)__mptr_10);
      }
    }
    #line 323 
    if (tx != (struct bna_tx *)0) 
                                  #line 324 
                                  bna_bfi_tx_enet_start_rsp(tx,msghdr);
    #line 325 
    break;
    #line 327 
    case 146: 
              #line 327 
    ;
    {
      #line 328 
      void *__mptr_11;
      #line 328 
      struct bna_tx *__tx_0;
      #line 328 
      struct bna_tx_mod *__tx_mod_0 = & bna->tx_mod;
      #line 328 
      tx = (struct bna_tx *)0;
      #line 328 
      __mptr_11 = (void *)__tx_mod_0->tx_active_q.next;
      #line 328 
      __tx_0 = ((struct bna_tx *)__mptr_11);
      #line 328 
      while (& __tx_0->qe != & __tx_mod_0->tx_active_q) {
        #line 328 
        void *__mptr_12;
        #line 328 
        if (__tx_0->rid == (int)msghdr->enet_id) {
          #line 328 
          tx = __tx_0;
          #line 328 
          break;
        }
        #line 328 
        __mptr_12 = (void *)__tx_0->qe.next;
        #line 328 
        __tx_0 = ((struct bna_tx *)__mptr_12);
      }
    }
    #line 329 
    if (tx != (struct bna_tx *)0) 
                                  #line 330 
                                  bna_bfi_tx_enet_stop_rsp(tx,msghdr);
    #line 331 
    break;
    #line 333 
    case 147: 
              #line 333 
    ;
    #line 334 
    bna_bfi_ethport_admin_rsp(& bna->ethport,msghdr);
    #line 335 
    break;
    #line 337 
    case 149: 
              #line 337 
    ;
    #line 338 
    bna_bfi_ethport_lpbk_rsp(& bna->ethport,msghdr);
    #line 339 
    break;
    #line 341 
    case 148: 
              #line 341 
    ;
    #line 342 
    bna_bfi_pause_set_rsp(& bna->enet,msghdr);
    #line 343 
    break;
    #line 345 
    case 150: 
              #line 345 
    ;
    #line 346 
    bna_bfi_attr_get_rsp(& bna->ioceth,msghdr);
    #line 347 
    break;
    #line 349 
    case 151: 
              #line 349 
    ;
    #line 350 
    bna_bfi_stats_get_rsp(bna,msghdr);
    #line 351 
    break;
    #line 353 
    case 152: 
              #line 353 
    ;
    #line 355 
    break;
    #line 357 
    case 156: 
              #line 357 
    ;
    #line 358 
    bna_bfi_ethport_linkup_aen(& bna->ethport,msghdr);
    #line 359 
    break;
    #line 361 
    case 155: 
              #line 361 
    ;
    #line 362 
    bna_bfi_ethport_linkdown_aen(& bna->ethport,msghdr);
    #line 363 
    break;
    #line 365 
    case 157: 
              #line 365 
    ;
    #line 366 
    bna_bfi_ethport_enable_aen(& bna->ethport,msghdr);
    #line 367 
    break;
    #line 369 
    case 158: 
              #line 369 
    ;
    #line 370 
    bna_bfi_ethport_disable_aen(& bna->ethport,msghdr);
    #line 371 
    break;
    #line 373 
    case 159: 
              #line 373 
    ;
    #line 374 
    bna_bfi_bw_update_aen(& bna->tx_mod);
    #line 375 
    break;
    #line 377 
    default: 
             #line 377 
    ;
    #line 378 
    break;
  }
  #line 380 
  return;
}

#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_admin_up(struct bna_ethport *ethport)
{
  #line 407 
  struct bfi_enet_enable_req *admin_up_req = & ethport->bfi_enet_cmd.admin_req;
  #line 410 
  admin_up_req->mh.msg_class = (unsigned char)24U;
  #line 410 
  admin_up_req->mh.msg_id = (unsigned char)19U;
  #line 410 
  admin_up_req->mh.msg_token = (unsigned short)0U;
  #line 410 
  admin_up_req->mh.enet_id = (unsigned char)0U;
  #line 412 
  admin_up_req->mh.num_entries = (unsigned short)256U;
  #line 414 
  admin_up_req->enable = (unsigned char)1U;
  #line 416 
  ethport->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 416 
  ethport->msgq_cmd.cbarg = (void *)0;
  #line 416 
  ethport->msgq_cmd.msg_size = 12UL;
  #line 416 
  ethport->msgq_cmd.msg_hdr = & admin_up_req->mh;
  #line 418 
  bfa_msgq_cmd_post(& (ethport->bna)->msgq,& ethport->msgq_cmd);
  #line 419 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_admin_down(struct bna_ethport *ethport)
{
  #line 424 
  struct bfi_enet_enable_req *admin_down_req = & ethport->bfi_enet_cmd.admin_req;
  #line 427 
  admin_down_req->mh.msg_class = (unsigned char)24U;
  #line 427 
  admin_down_req->mh.msg_id = (unsigned char)19U;
  #line 427 
  admin_down_req->mh.msg_token = (unsigned short)0U;
  #line 427 
  admin_down_req->mh.enet_id = (unsigned char)0U;
  #line 429 
  admin_down_req->mh.num_entries = (unsigned short)256U;
  #line 431 
  admin_down_req->enable = (unsigned char)0U;
  #line 433 
  ethport->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 433 
  ethport->msgq_cmd.cbarg = (void *)0;
  #line 433 
  ethport->msgq_cmd.msg_size = 12UL;
  #line 433 
  ethport->msgq_cmd.msg_hdr = & admin_down_req->mh;
  #line 435 
  bfa_msgq_cmd_post(& (ethport->bna)->msgq,& ethport->msgq_cmd);
  #line 436 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_lpbk_up(struct bna_ethport *ethport)
{
  #line 441 
  struct bfi_enet_diag_lb_req *lpbk_up_req = & ethport->bfi_enet_cmd.lpbk_req;
  #line 444 
  lpbk_up_req->mh.msg_class = (unsigned char)24U;
  #line 444 
  lpbk_up_req->mh.msg_id = (unsigned char)21U;
  #line 444 
  lpbk_up_req->mh.msg_token = (unsigned short)0U;
  #line 444 
  lpbk_up_req->mh.enet_id = (unsigned char)0U;
  #line 446 
  lpbk_up_req->mh.num_entries = (unsigned short)256U;
  #line 448 
  lpbk_up_req->mode = (unsigned char)((ethport->bna)->enet.type != (unsigned int)BNA_ENET_T_LOOPBACK_INTERNAL);
  #line 452 
  lpbk_up_req->enable = (unsigned char)1U;
  #line 454 
  ethport->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 454 
  ethport->msgq_cmd.cbarg = (void *)0;
  #line 454 
  ethport->msgq_cmd.msg_size = 12UL;
  #line 454 
  ethport->msgq_cmd.msg_hdr = & lpbk_up_req->mh;
  #line 456 
  bfa_msgq_cmd_post(& (ethport->bna)->msgq,& ethport->msgq_cmd);
  #line 457 
  return;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_lpbk_down(struct bna_ethport *ethport)
{
  #line 462 
  struct bfi_enet_diag_lb_req *lpbk_down_req = & ethport->bfi_enet_cmd.lpbk_req;
  #line 465 
  lpbk_down_req->mh.msg_class = (unsigned char)24U;
  #line 465 
  lpbk_down_req->mh.msg_id = (unsigned char)21U;
  #line 465 
  lpbk_down_req->mh.msg_token = (unsigned short)0U;
  #line 465 
  lpbk_down_req->mh.enet_id = (unsigned char)0U;
  #line 467 
  lpbk_down_req->mh.num_entries = (unsigned short)256U;
  #line 469 
  lpbk_down_req->enable = (unsigned char)0U;
  #line 471 
  ethport->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 471 
  ethport->msgq_cmd.cbarg = (void *)0;
  #line 471 
  ethport->msgq_cmd.msg_size = 12UL;
  #line 471 
  ethport->msgq_cmd.msg_hdr = & lpbk_down_req->mh;
  #line 473 
  bfa_msgq_cmd_post(& (ethport->bna)->msgq,& ethport->msgq_cmd);
  #line 474 
  return;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_up(struct bna_ethport *ethport)
{
  #line 479 
  if ((ethport->bna)->enet.type == (unsigned int)BNA_ENET_T_REGULAR) 
    #line 480 
    bna_bfi_ethport_admin_up(ethport); else 
                                            #line 482 
                                            bna_bfi_ethport_lpbk_up(ethport);
  #line 483 
  return;
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_ethport_down(struct bna_ethport *ethport)
{
  #line 488 
  if ((ethport->bna)->enet.type == (unsigned int)BNA_ENET_T_REGULAR) 
    #line 489 
    bna_bfi_ethport_admin_down(ethport); else 
                                              #line 491 
                                              bna_bfi_ethport_lpbk_down(ethport);
  #line 492 
  return;
}

#line 494 
#line 514 
static void bna_ethport_sm_stopped(struct bna_ethport *ethport, enum bna_ethport_event event);
#line 494 
#line 508 
static void bna_ethport_sm_stopped_entry(struct bna_ethport *ethport);
#line 496 
#line 546 
static void bna_ethport_sm_down(struct bna_ethport *ethport, enum bna_ethport_event event);
#line 496 
#line 541 
static void bna_ethport_sm_down_entry(struct bna_ethport *ethport);
#line 498 
#line 574 
static void bna_ethport_sm_up_resp_wait(struct bna_ethport *ethport, enum bna_ethport_event event);
#line 498 
#line 569 
static void bna_ethport_sm_up_resp_wait_entry(struct bna_ethport *ethport);
#line 500 
#line 623 
static void bna_ethport_sm_down_resp_wait(struct bna_ethport *ethport, enum bna_ethport_event event);
#line 500 
#line 613 
static void bna_ethport_sm_down_resp_wait_entry(struct bna_ethport *ethport);
#line 502 
#line 660 
static void bna_ethport_sm_up(struct bna_ethport *ethport, enum bna_ethport_event event);
#line 502 
#line 655 
static void bna_ethport_sm_up_entry(struct bna_ethport *ethport);
#line 504 
#line 689 
static void bna_ethport_sm_last_resp_wait(struct bna_ethport *ethport, enum bna_ethport_event event);
#line 504 
#line 684 
static void bna_ethport_sm_last_resp_wait_entry(struct bna_ethport *ethport);
#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_stopped_entry(struct bna_ethport *ethport)
{
  #line 510 
  if (ethport->stop_cbfn != (void (*)(struct bna_enet *))0) {
    #line 510 
    void (*cbfn)(struct bna_enet *);
    #line 510 
    cbfn = ethport->stop_cbfn;
    #line 510 
    ethport->stop_cbfn = (void (*)(struct bna_enet *))0;
    #line 510 
    (*cbfn)(& (ethport->bna)->enet);
  }
  #line 512 
  return;
}

#line 514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_stopped(struct bna_ethport *ethport, enum bna_ethport_event event)
{
  #line 517 
  switch ((unsigned int)event) {
    #line 518 
    case (unsigned int)1: 
                          #line 518 
    ;
    #line 519 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_down);
    #line 519 
    bna_ethport_sm_down_entry(ethport);
    #line 520 
    break;
    #line 522 
    case (unsigned int)2: 
                          #line 522 
    ;
    #line 523 
    if (ethport->stop_cbfn != (void (*)(struct bna_enet *))0) {
      #line 523 
      void (*cbfn)(struct bna_enet *);
      #line 523 
      cbfn = ethport->stop_cbfn;
      #line 523 
      ethport->stop_cbfn = (void (*)(struct bna_enet *))0;
      #line 523 
      (*cbfn)(& (ethport->bna)->enet);
    }
    #line 524 
    break;
    #line 526 
    case (unsigned int)3: 
                          #line 526 
    ;
    #line 528 
    break;
    #line 530 
    case (unsigned int)5: 
                          #line 530 
    ;
    #line 533 
    break;
    #line 535 
    default: 
             #line 535 
    ;
    #line 536 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",536,(unsigned int)event);
  }
  #line 538 
  return;
}

#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_down_entry(struct bna_ethport *ethport)
{
  #line 543 
  return;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_down(struct bna_ethport *ethport, enum bna_ethport_event event)
{
  #line 549 
  switch ((unsigned int)event) {
    #line 550 
    case (unsigned int)2: 
                          #line 550 
    ;
    #line 551 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 551 
    bna_ethport_sm_stopped_entry(ethport);
    #line 552 
    break;
    #line 554 
    case (unsigned int)3: 
                          #line 554 
    ;
    #line 555 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 555 
    bna_ethport_sm_stopped_entry(ethport);
    #line 556 
    break;
    #line 558 
    case (unsigned int)4: 
                          #line 558 
    ;
    #line 559 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_up_resp_wait);
    #line 559 
    bna_ethport_sm_up_resp_wait_entry(ethport);
    #line 560 
    bna_bfi_ethport_up(ethport);
    #line 561 
    break;
    #line 563 
    default: 
             #line 563 
    ;
    #line 564 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",564,(unsigned int)event);
  }
  #line 566 
  return;
}

#line 569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_up_resp_wait_entry(struct bna_ethport *ethport)
{
  #line 571 
  return;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_up_resp_wait(struct bna_ethport *ethport, enum bna_ethport_event event)
{
  #line 577 
  switch ((unsigned int)event) {
    #line 578 
    case (unsigned int)2: 
                          #line 578 
    ;
    #line 579 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_last_resp_wait);
    #line 579 
    bna_ethport_sm_last_resp_wait_entry(ethport);
    #line 580 
    break;
    #line 582 
    case (unsigned int)3: 
                          #line 582 
    ;
    #line 583 
    if (ethport->adminup_cbfn != (void (*)(struct bnad *, enum bna_cb_status ))0) {
      #line 583 
      void (*cbfn)(struct bnad *, enum bna_cb_status );
      #line 583 
      cbfn = ethport->adminup_cbfn;
      #line 583 
      ethport->adminup_cbfn = (void (*)(struct bnad *, enum bna_cb_status ))0;
      #line 583 
      (*cbfn)((ethport->bna)->bnad,(enum bna_cb_status)BNA_CB_FAIL);
    }
    #line 584 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 584 
    bna_ethport_sm_stopped_entry(ethport);
    #line 585 
    break;
    #line 587 
    case (unsigned int)5: 
                          #line 587 
    ;
    #line 588 
    if (ethport->adminup_cbfn != (void (*)(struct bnad *, enum bna_cb_status ))0) {
      #line 588 
      void (*cbfn_0)(struct bnad *, enum bna_cb_status );
      #line 588 
      cbfn_0 = ethport->adminup_cbfn;
      #line 588 
      ethport->adminup_cbfn = (void (*)(struct bnad *, enum bna_cb_status ))0;
      #line 588 
      (*cbfn_0)((ethport->bna)->bnad,(enum bna_cb_status)BNA_CB_INTERRUPT);
    }
    #line 589 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_down_resp_wait);
    #line 589 
    bna_ethport_sm_down_resp_wait_entry(ethport);
    #line 590 
    break;
    #line 592 
    case (unsigned int)6: 
                          #line 592 
    ;
    #line 593 
    if (ethport->adminup_cbfn != (void (*)(struct bnad *, enum bna_cb_status ))0) {
      #line 593 
      void (*cbfn_1)(struct bnad *, enum bna_cb_status );
      #line 593 
      cbfn_1 = ethport->adminup_cbfn;
      #line 593 
      ethport->adminup_cbfn = (void (*)(struct bnad *, enum bna_cb_status ))0;
      #line 593 
      (*cbfn_1)((ethport->bna)->bnad,(enum bna_cb_status)BNA_CB_SUCCESS);
    }
    #line 594 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_up);
    #line 594 
    bna_ethport_sm_up_entry(ethport);
    #line 595 
    break;
    #line 597 
    case (unsigned int)8: 
                          #line 597 
    ;
    #line 598 
    if (ethport->adminup_cbfn != (void (*)(struct bnad *, enum bna_cb_status ))0) {
      #line 598 
      void (*cbfn_2)(struct bnad *, enum bna_cb_status );
      #line 598 
      cbfn_2 = ethport->adminup_cbfn;
      #line 598 
      ethport->adminup_cbfn = (void (*)(struct bnad *, enum bna_cb_status ))0;
      #line 598 
      (*cbfn_2)((ethport->bna)->bnad,(enum bna_cb_status)BNA_CB_FAIL);
    }
    #line 599 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_down);
    #line 599 
    bna_ethport_sm_down_entry(ethport);
    #line 600 
    break;
    #line 602 
    case (unsigned int)7: 
                          #line 602 
    ;
    #line 604 
    bna_bfi_ethport_up(ethport);
    #line 605 
    break;
    #line 607 
    default: 
             #line 607 
    ;
    #line 608 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",608,(unsigned int)event);
  }
  #line 610 
  return;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_down_resp_wait_entry(struct bna_ethport *ethport)
{
  #line 615 
  return;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_down_resp_wait(struct bna_ethport *ethport, enum bna_ethport_event event)
{
  #line 626 
  switch ((unsigned int)event) {
    #line 627 
    case (unsigned int)2: 
                          #line 627 
    ;
    #line 628 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_last_resp_wait);
    #line 628 
    bna_ethport_sm_last_resp_wait_entry(ethport);
    #line 629 
    break;
    #line 631 
    case (unsigned int)3: 
                          #line 631 
    ;
    #line 632 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 632 
    bna_ethport_sm_stopped_entry(ethport);
    #line 633 
    break;
    #line 635 
    case (unsigned int)4: 
                          #line 635 
    ;
    #line 636 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_up_resp_wait);
    #line 636 
    bna_ethport_sm_up_resp_wait_entry(ethport);
    #line 637 
    break;
    #line 639 
    case (unsigned int)6: 
                          #line 639 
    ;
    #line 641 
    bna_bfi_ethport_down(ethport);
    #line 642 
    break;
    #line 644 
    case (unsigned int)8: 
                          #line 644 
    ;
    #line 645 
    case (unsigned int)7: 
                          #line 645 
    ;
    #line 646 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_down);
    #line 646 
    bna_ethport_sm_down_entry(ethport);
    #line 647 
    break;
    #line 649 
    default: 
             #line 649 
    ;
    #line 650 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",650,(unsigned int)event);
  }
  #line 652 
  return;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_up_entry(struct bna_ethport *ethport)
{
  #line 657 
  return;
}

#line 660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_up(struct bna_ethport *ethport, enum bna_ethport_event event)
{
  #line 663 
  switch ((unsigned int)event) {
    #line 664 
    case (unsigned int)2: 
                          #line 664 
    ;
    #line 665 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_last_resp_wait);
    #line 665 
    bna_ethport_sm_last_resp_wait_entry(ethport);
    #line 666 
    bna_bfi_ethport_down(ethport);
    #line 667 
    break;
    #line 669 
    case (unsigned int)3: 
                          #line 669 
    ;
    #line 670 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 670 
    bna_ethport_sm_stopped_entry(ethport);
    #line 671 
    break;
    #line 673 
    case (unsigned int)5: 
                          #line 673 
    ;
    #line 674 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_down_resp_wait);
    #line 674 
    bna_ethport_sm_down_resp_wait_entry(ethport);
    #line 675 
    bna_bfi_ethport_down(ethport);
    #line 676 
    break;
    #line 678 
    default: 
             #line 678 
    ;
    #line 679 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",679,(unsigned int)event);
  }
  #line 681 
  return;
}

#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_last_resp_wait_entry(struct bna_ethport *ethport)
{
  #line 686 
  return;
}

#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_sm_last_resp_wait(struct bna_ethport *ethport, enum bna_ethport_event event)
{
  #line 692 
  switch ((unsigned int)event) {
    #line 693 
    case (unsigned int)3: 
                          #line 693 
    ;
    #line 694 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 694 
    bna_ethport_sm_stopped_entry(ethport);
    #line 695 
    break;
    #line 697 
    case (unsigned int)5: 
                          #line 697 
    ;
    #line 703 
    break;
    #line 705 
    case (unsigned int)6: 
                          #line 705 
    ;
    #line 707 
    bna_bfi_ethport_down(ethport);
    #line 708 
    break;
    #line 710 
    case (unsigned int)8: 
                          #line 710 
    ;
    #line 711 
    case (unsigned int)7: 
                          #line 711 
    ;
    #line 712 
    ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
    #line 712 
    bna_ethport_sm_stopped_entry(ethport);
    #line 713 
    break;
    #line 715 
    default: 
             #line 715 
    ;
    #line 716 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",716,(unsigned int)event);
  }
  #line 718 
  return;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_init(struct bna_ethport *ethport, struct bna *bna)
{
  #line 723 
  ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags | 3U);
  #line 724 
  ethport->bna = bna;
  #line 726 
  ethport->link_status = BNA_LINK_DOWN;
  #line 727 
  ethport->link_cbfn = & bnad_cb_ethport_link_status;
  #line 729 
  ethport->rx_started_count = 0;
  #line 731 
  ethport->stop_cbfn = (void (*)(struct bna_enet *))0;
  #line 732 
  ethport->adminup_cbfn = (void (*)(struct bnad *, enum bna_cb_status ))0;
  #line 734 
  ethport->fsm = (void (*)(void *, int ))(& bna_ethport_sm_stopped);
  #line 734 
  bna_ethport_sm_stopped_entry(ethport);
  #line 736 
  return;
}

#line 738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_uninit(struct bna_ethport *ethport)
{
  #line 740 
  ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags & 4294967294U);
  #line 741 
  ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags & 4294967293U);
  #line 743 
  ethport->bna = (struct bna *)0;
  #line 744 
  return;
}

#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_start(struct bna_ethport *ethport)
{
  #line 749 
  (*(ethport->fsm))((void *)ethport,1);
  #line 750 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_cb_ethport_stopped(struct bna_enet *enet)
{
  #line 755 
  bfa_wc_down(& enet->chld_stop_wc);
  #line 756 
  return;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_stop(struct bna_ethport *ethport)
{
  #line 761 
  ethport->stop_cbfn = & bna_enet_cb_ethport_stopped;
  #line 762 
  (*(ethport->fsm))((void *)ethport,2);
  #line 763 
  return;
}

#line 766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ethport_fail(struct bna_ethport *ethport)
{
  #line 769 
  ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags | 2U);
  #line 771 
  if (ethport->link_status != (unsigned int)BNA_LINK_DOWN) {
    #line 772 
    ethport->link_status = BNA_LINK_DOWN;
    #line 773 
    (*(ethport->link_cbfn))((ethport->bna)->bnad,(enum bna_link_status)BNA_LINK_DOWN);
  }
  #line 775 
  (*(ethport->fsm))((void *)ethport,3);
  #line 776 
  return;
}

#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_ethport_cb_rx_started(struct bna_ethport *ethport)
{
  #line 782 
  (ethport->rx_started_count) ++;
  #line 784 
  if (ethport->rx_started_count == 1) {
    #line 785 
    ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags | 4U);
    #line 787 
    if (ethport_can_be_up(ethport) != 0) 
                                         #line 788 
                                         (*(ethport->fsm))((void *)ethport,4);
  }
  #line 790 
  return;
}

#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_ethport_cb_rx_stopped(struct bna_ethport *ethport)
{
  #line 795 
  int ethport_up = ethport_can_be_up(ethport);
  #line 797 
  (ethport->rx_started_count) --;
  #line 799 
  if (ethport->rx_started_count == 0) {
    #line 800 
    ethport->flags = (enum bna_ethport_flags)((unsigned int)ethport->flags & 4294967291U);
    #line 802 
    if (ethport_up != 0) 
                         #line 803 
                         (*(ethport->fsm))((void *)ethport,5);
  }
  #line 805 
  return;
}

#line 889 
#line 1175 
static void bna_enet_cb_chld_stopped(void *arg);
#line 890 
#line 1158 
static void bna_bfi_pause_set(struct bna_enet *enet);
#line 892 
#line 915 
static void bna_enet_sm_stopped(struct bna_enet *enet, enum bna_enet_event event);
#line 892 
#line 908 
static void bna_enet_sm_stopped_entry(struct bna_enet *enet);
#line 894 
#line 957 
static void bna_enet_sm_pause_init_wait(struct bna_enet *enet, enum bna_enet_event event);
#line 894 
#line 951 
static void bna_enet_sm_pause_init_wait_entry(struct bna_enet *enet);
#line 896 
#line 1001 
static void bna_enet_sm_last_resp_wait(struct bna_enet *enet, enum bna_enet_event event);
#line 896 
#line 995 
static void bna_enet_sm_last_resp_wait_entry(struct bna_enet *enet);
#line 898 
#line 1026 
static void bna_enet_sm_started(struct bna_enet *enet, enum bna_enet_event event);
#line 898 
#line 1016 
static void bna_enet_sm_started_entry(struct bna_enet *enet);
#line 900 
#line 1060 
static void bna_enet_sm_cfg_wait(struct bna_enet *enet, enum bna_enet_event event);
#line 900 
#line 1055 
static void bna_enet_sm_cfg_wait_entry(struct bna_enet *enet);
#line 902 
#line 1113 
static void bna_enet_sm_cfg_stop_wait(struct bna_enet *enet, enum bna_enet_event event);
#line 902 
#line 1106 
static void bna_enet_sm_cfg_stop_wait_entry(struct bna_enet *enet);
#line 904 
#line 1139 
static void bna_enet_sm_chld_stop_wait(struct bna_enet *enet, enum bna_enet_event event);
#line 904 
#line 1133 
static void bna_enet_sm_chld_stop_wait_entry(struct bna_enet *enet);
#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_stopped_entry(struct bna_enet *enet)
{
  #line 910 
  if (enet->mtu_cbfn != (void (*)(struct bnad *))0) {
    #line 910 
    void (*cbfn)(struct bnad *);
    #line 910 
    cbfn = enet->mtu_cbfn;
    #line 910 
    enet->mtu_cbfn = (void (*)(struct bnad *))0;
    #line 910 
    (*cbfn)((enet->bna)->bnad);
  }
  #line 911 
  if (enet->stop_cbfn != (void (*)(void *))0) {
    #line 911 
    void (*cbfn_0)(void *);
    #line 911 
    void *cbarg;
    #line 911 
    cbfn_0 = enet->stop_cbfn;
    #line 911 
    cbarg = enet->stop_cbarg;
    #line 911 
    enet->stop_cbfn = (void (*)(void *))0;
    #line 911 
    enet->stop_cbarg = (void *)0;
    #line 911 
    (*cbfn_0)(cbarg);
  }
  #line 913 
  return;
}

#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_stopped(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 917 
  switch ((unsigned int)event) {
    #line 918 
    case (unsigned int)1: 
                          #line 918 
    ;
    #line 919 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_pause_init_wait);
    #line 919 
    bna_enet_sm_pause_init_wait_entry(enet);
    #line 920 
    break;
    #line 922 
    case (unsigned int)2: 
                          #line 922 
    ;
    #line 923 
    if (enet->stop_cbfn != (void (*)(void *))0) {
      #line 923 
      void (*cbfn)(void *);
      #line 923 
      void *cbarg;
      #line 923 
      cbfn = enet->stop_cbfn;
      #line 923 
      cbarg = enet->stop_cbarg;
      #line 923 
      enet->stop_cbfn = (void (*)(void *))0;
      #line 923 
      enet->stop_cbarg = (void *)0;
      #line 923 
      (*cbfn)(cbarg);
    }
    #line 924 
    break;
    #line 926 
    case (unsigned int)3: 
                          #line 926 
    ;
    #line 928 
    break;
    #line 930 
    case (unsigned int)4: 
                          #line 930 
    ;
    #line 931 
    break;
    #line 933 
    case (unsigned int)5: 
                          #line 933 
    ;
    #line 934 
    if (enet->mtu_cbfn != (void (*)(struct bnad *))0) {
      #line 934 
      void (*cbfn_0)(struct bnad *);
      #line 934 
      cbfn_0 = enet->mtu_cbfn;
      #line 934 
      enet->mtu_cbfn = (void (*)(struct bnad *))0;
      #line 934 
      (*cbfn_0)((enet->bna)->bnad);
    }
    #line 935 
    break;
    #line 937 
    case (unsigned int)7: 
                          #line 937 
    ;
    #line 943 
    break;
    #line 945 
    default: 
             #line 945 
    ;
    #line 946 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",946,(unsigned int)event);
  }
  #line 948 
  return;
}

#line 951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_pause_init_wait_entry(struct bna_enet *enet)
{
  #line 953 
  bna_bfi_pause_set(enet);
  #line 954 
  return;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_pause_init_wait(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 960 
  switch ((unsigned int)event) {
    #line 961 
    case (unsigned int)2: 
                          #line 961 
    ;
    #line 962 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
    #line 963 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_last_resp_wait);
    #line 963 
    bna_enet_sm_last_resp_wait_entry(enet);
    #line 964 
    break;
    #line 966 
    case (unsigned int)3: 
                          #line 966 
    ;
    #line 967 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
    #line 968 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 968 
    bna_enet_sm_stopped_entry(enet);
    #line 969 
    break;
    #line 971 
    case (unsigned int)4: 
                          #line 971 
    ;
    #line 972 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags | 4U);
    #line 973 
    break;
    #line 975 
    case (unsigned int)5: 
                          #line 975 
    ;
    #line 977 
    break;
    #line 979 
    case (unsigned int)6: 
                          #line 979 
    ;
    #line 980 
    if (((unsigned int)enet->flags & 4U) != 0U) {
      #line 981 
      enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
      #line 982 
      bna_bfi_pause_set(enet);
    }
    else {
      #line 984 
      enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_started);
      #line 984 
      bna_enet_sm_started_entry(enet);
      {
        #line 985 
        enum bna_tx_type tx_type = (enum bna_tx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
        #line 985 
        enum bna_rx_type rx_type = (enum bna_rx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
        #line 985 
        bna_ethport_start(& (enet->bna)->ethport);
        #line 985 
        bna_tx_mod_start(& (enet->bna)->tx_mod,tx_type);
        #line 985 
        bna_rx_mod_start(& (enet->bna)->rx_mod,rx_type);
      }
    }
    #line 987 
    break;
    #line 989 
    default: 
             #line 989 
    ;
    #line 990 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",990,(unsigned int)event);
  }
  #line 992 
  return;
}

#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_last_resp_wait_entry(struct bna_enet *enet)
{
  #line 997 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
  #line 998 
  return;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_last_resp_wait(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 1004 
  switch ((unsigned int)event) {
    #line 1005 
    case (unsigned int)3: 
                          #line 1005 
    ;
    #line 1006 
    case (unsigned int)6: 
                          #line 1006 
    ;
    #line 1007 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 1007 
    bna_enet_sm_stopped_entry(enet);
    #line 1008 
    break;
    #line 1010 
    default: 
             #line 1010 
    ;
    #line 1011 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1011,(unsigned int)event);
  }
  #line 1013 
  return;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_started_entry(struct bna_enet *enet)
{
  #line 1022 
  if (enet->mtu_cbfn != (void (*)(struct bnad *))0) {
    #line 1022 
    void (*cbfn)(struct bnad *);
    #line 1022 
    cbfn = enet->mtu_cbfn;
    #line 1022 
    enet->mtu_cbfn = (void (*)(struct bnad *))0;
    #line 1022 
    (*cbfn)((enet->bna)->bnad);
  }
  #line 1024 
  return;
}

#line 1026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_started(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 1029 
  switch ((unsigned int)event) {
    #line 1030 
    case (unsigned int)2: 
                          #line 1030 
    ;
    #line 1031 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_chld_stop_wait);
    #line 1031 
    bna_enet_sm_chld_stop_wait_entry(enet);
    #line 1032 
    break;
    #line 1034 
    case (unsigned int)3: 
                          #line 1034 
    ;
    #line 1035 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 1035 
    bna_enet_sm_stopped_entry(enet);
    #line 1036 
    bna_ethport_fail(& (enet->bna)->ethport);
    #line 1036 
    bna_tx_mod_fail(& (enet->bna)->tx_mod);
    #line 1036 
    bna_rx_mod_fail(& (enet->bna)->rx_mod);
    #line 1037 
    break;
    #line 1039 
    case (unsigned int)4: 
                          #line 1039 
    ;
    #line 1040 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_cfg_wait);
    #line 1040 
    bna_enet_sm_cfg_wait_entry(enet);
    #line 1041 
    bna_bfi_pause_set(enet);
    #line 1042 
    break;
    #line 1044 
    case (unsigned int)5: 
                          #line 1044 
    ;
    #line 1045 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_cfg_wait);
    #line 1045 
    bna_enet_sm_cfg_wait_entry(enet);
    {
      #line 1046 
      enum bna_rx_type rx_type = (enum bna_rx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
      #line 1046 
      bfa_wc_init(& enet->chld_stop_wc,& bna_enet_cb_chld_stopped,(void *)enet);
      #line 1046 
      bfa_wc_up(& enet->chld_stop_wc);
      #line 1046 
      bna_rx_mod_stop(& (enet->bna)->rx_mod,rx_type);
      #line 1046 
      bfa_wc_wait(& enet->chld_stop_wc);
    }
    #line 1047 
    break;
    #line 1049 
    default: 
             #line 1049 
    ;
    #line 1050 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1050,(unsigned int)event);
  }
  #line 1052 
  return;
}

#line 1055  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_cfg_wait_entry(struct bna_enet *enet)
{
  #line 1057 
  return;
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_cfg_wait(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 1063 
  switch ((unsigned int)event) {
    #line 1064 
    case (unsigned int)2: 
                          #line 1064 
    ;
    #line 1065 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
    #line 1066 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967287U);
    #line 1067 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_cfg_stop_wait);
    #line 1067 
    bna_enet_sm_cfg_stop_wait_entry(enet);
    #line 1068 
    break;
    #line 1070 
    case (unsigned int)3: 
                          #line 1070 
    ;
    #line 1071 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
    #line 1072 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967287U);
    #line 1073 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 1073 
    bna_enet_sm_stopped_entry(enet);
    #line 1074 
    bna_ethport_fail(& (enet->bna)->ethport);
    #line 1074 
    bna_tx_mod_fail(& (enet->bna)->tx_mod);
    #line 1074 
    bna_rx_mod_fail(& (enet->bna)->rx_mod);
    #line 1075 
    break;
    #line 1077 
    case (unsigned int)4: 
                          #line 1077 
    ;
    #line 1078 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags | 4U);
    #line 1079 
    break;
    #line 1081 
    case (unsigned int)5: 
                          #line 1081 
    ;
    #line 1082 
    enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags | 8U);
    #line 1083 
    break;
    #line 1085 
    case (unsigned int)7: 
                          #line 1085 
    ;
    {
      #line 1086 
      enum bna_rx_type rx_type = (enum bna_rx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
      #line 1086 
      bna_rx_mod_start(& (enet->bna)->rx_mod,rx_type);
    }
    #line 1088 
    case (unsigned int)6: 
                          #line 1088 
    ;
    #line 1089 
    if (((unsigned int)enet->flags & 4U) != 0U) {
      #line 1090 
      enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
      #line 1091 
      bna_bfi_pause_set(enet);
    }
    else 
      #line 1092 
      if (((unsigned int)enet->flags & 8U) != 0U) {
        #line 1093 
        enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967287U);
        {
          #line 1094 
          enum bna_rx_type rx_type_0 = (enum bna_rx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
          #line 1094 
          bfa_wc_init(& enet->chld_stop_wc,& bna_enet_cb_chld_stopped,(void *)enet);
          #line 1094 
          bfa_wc_up(& enet->chld_stop_wc);
          #line 1094 
          bna_rx_mod_stop(& (enet->bna)->rx_mod,rx_type_0);
          #line 1094 
          bfa_wc_wait(& enet->chld_stop_wc);
        }
      }
      else {
        #line 1096 
        enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_started);
        #line 1096 
        bna_enet_sm_started_entry(enet);
      }
    #line 1098 
    break;
    #line 1100 
    default: 
             #line 1100 
    ;
    #line 1101 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1101,(unsigned int)event);
  }
  #line 1103 
  return;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_cfg_stop_wait_entry(struct bna_enet *enet)
{
  #line 1108 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967291U);
  #line 1109 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967287U);
  #line 1110 
  return;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_cfg_stop_wait(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 1116 
  switch ((unsigned int)event) {
    #line 1117 
    case (unsigned int)3: 
                          #line 1117 
    ;
    #line 1118 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 1118 
    bna_enet_sm_stopped_entry(enet);
    #line 1119 
    bna_ethport_fail(& (enet->bna)->ethport);
    #line 1119 
    bna_tx_mod_fail(& (enet->bna)->tx_mod);
    #line 1119 
    bna_rx_mod_fail(& (enet->bna)->rx_mod);
    #line 1120 
    break;
    #line 1122 
    case (unsigned int)6: 
                          #line 1122 
    ;
    #line 1123 
    case (unsigned int)7: 
                          #line 1123 
    ;
    #line 1124 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_chld_stop_wait);
    #line 1124 
    bna_enet_sm_chld_stop_wait_entry(enet);
    #line 1125 
    break;
    #line 1127 
    default: 
             #line 1127 
    ;
    #line 1128 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1128,(unsigned int)event);
  }
  #line 1130 
  return;
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_chld_stop_wait_entry(struct bna_enet *enet)
{
  #line 1135 
  enum bna_tx_type tx_type = (enum bna_tx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
  #line 1135 
  enum bna_rx_type rx_type = (enum bna_rx_type)(enet->type != (unsigned int)BNA_ENET_T_REGULAR);
  #line 1135 
  bfa_wc_init(& enet->chld_stop_wc,& bna_enet_cb_chld_stopped,(void *)enet);
  #line 1135 
  bfa_wc_up(& enet->chld_stop_wc);
  #line 1135 
  bna_ethport_stop(& (enet->bna)->ethport);
  #line 1135 
  bfa_wc_up(& enet->chld_stop_wc);
  #line 1135 
  bna_tx_mod_stop(& (enet->bna)->tx_mod,tx_type);
  #line 1135 
  bfa_wc_up(& enet->chld_stop_wc);
  #line 1135 
  bna_rx_mod_stop(& (enet->bna)->rx_mod,rx_type);
  #line 1135 
  bfa_wc_wait(& enet->chld_stop_wc);
  #line 1137 
  return;
}

#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_sm_chld_stop_wait(struct bna_enet *enet, enum bna_enet_event event)
{
  #line 1142 
  switch ((unsigned int)event) {
    #line 1143 
    case (unsigned int)3: 
                          #line 1143 
    ;
    #line 1144 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 1144 
    bna_enet_sm_stopped_entry(enet);
    #line 1145 
    bna_ethport_fail(& (enet->bna)->ethport);
    #line 1145 
    bna_tx_mod_fail(& (enet->bna)->tx_mod);
    #line 1145 
    bna_rx_mod_fail(& (enet->bna)->rx_mod);
    #line 1146 
    break;
    #line 1148 
    case (unsigned int)7: 
                          #line 1148 
    ;
    #line 1149 
    enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
    #line 1149 
    bna_enet_sm_stopped_entry(enet);
    #line 1150 
    break;
    #line 1152 
    default: 
             #line 1152 
    ;
    #line 1153 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1153,(unsigned int)event);
  }
  #line 1155 
  return;
}

#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_pause_set(struct bna_enet *enet)
{
  #line 1160 
  struct bfi_enet_set_pause_req *pause_req = & enet->pause_req;
  #line 1162 
  pause_req->mh.msg_class = (unsigned char)24U;
  #line 1162 
  pause_req->mh.msg_id = (unsigned char)20U;
  #line 1162 
  pause_req->mh.msg_token = (unsigned short)0U;
  #line 1162 
  pause_req->mh.enet_id = (unsigned char)0U;
  #line 1164 
  pause_req->mh.num_entries = (unsigned short)256U;
  #line 1166 
  pause_req->tx_pause = (unsigned char)enet->pause_config.tx_pause;
  #line 1167 
  pause_req->rx_pause = (unsigned char)enet->pause_config.rx_pause;
  #line 1169 
  enet->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 1169 
  enet->msgq_cmd.cbarg = (void *)0;
  #line 1169 
  enet->msgq_cmd.msg_size = 12UL;
  #line 1169 
  enet->msgq_cmd.msg_hdr = & pause_req->mh;
  #line 1171 
  bfa_msgq_cmd_post(& (enet->bna)->msgq,& enet->msgq_cmd);
  #line 1172 
  return;
}

#line 1175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_cb_chld_stopped(void *arg)
{
  #line 1177 
  struct bna_enet *enet = (struct bna_enet *)arg;
  #line 1179 
  (*(enet->fsm))((void *)enet,7);
  #line 1180 
  return;
}

#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_init(struct bna_enet *enet, struct bna *bna)
{
  #line 1185 
  enet->bna = bna;
  #line 1186 
  enet->flags = (enum bna_enet_flags)0;
  #line 1187 
  enet->mtu = 0;
  #line 1188 
  enet->type = BNA_ENET_T_REGULAR;
  #line 1190 
  enet->stop_cbfn = (void (*)(void *))0;
  #line 1191 
  enet->stop_cbarg = (void *)0;
  #line 1193 
  enet->mtu_cbfn = (void (*)(struct bnad *))0;
  #line 1195 
  enet->fsm = (void (*)(void *, int ))(& bna_enet_sm_stopped);
  #line 1195 
  bna_enet_sm_stopped_entry(enet);
  #line 1197 
  return;
}

#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_uninit(struct bna_enet *enet)
{
  #line 1201 
  enet->flags = (enum bna_enet_flags)0;
  #line 1203 
  enet->bna = (struct bna *)0;
  #line 1204 
  return;
}

#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_start(struct bna_enet *enet)
{
  #line 1209 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags | 1U);
  #line 1210 
  if (((unsigned int)enet->flags & 2U) != 0U) 
                                              #line 1211 
                                              (*(enet->fsm))((void *)enet,1);
  #line 1212 
  return;
}

#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_cb_enet_stopped(void *arg)
{
  #line 1217 
  struct bna_ioceth *ioceth = (struct bna_ioceth *)arg;
  #line 1219 
  (*(ioceth->fsm))((void *)ioceth,7);
  #line 1220 
  return;
}

#line 1223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_stop(struct bna_enet *enet)
{
  #line 1225 
  enet->stop_cbfn = & bna_ioceth_cb_enet_stopped;
  #line 1226 
  enet->stop_cbarg = (void *)(& (enet->bna)->ioceth);
  #line 1228 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967294U);
  #line 1229 
  (*(enet->fsm))((void *)enet,2);
  #line 1230 
  return;
}

#line 1233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_enet_fail(struct bna_enet *enet)
{
  #line 1235 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967294U);
  #line 1236 
  (*(enet->fsm))((void *)enet,3);
  #line 1237 
  return;
}

#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_cb_tx_stopped(struct bna_enet *enet)
{
  #line 1242 
  bfa_wc_down(& enet->chld_stop_wc);
  #line 1243 
  return;
}

#line 1246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_cb_rx_stopped(struct bna_enet *enet)
{
  #line 1248 
  bfa_wc_down(& enet->chld_stop_wc);
  #line 1249 
  return;
}

#line 1252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
int bna_enet_mtu_get(struct bna_enet *enet)
{
  #line 1254 
  return enet->mtu;
}

#line 1258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_enable(struct bna_enet *enet)
{
  #line 1260 
  if (enet->fsm != (void (*)(void *, int ))(& bna_enet_sm_stopped)) 
                                                                    #line 1261 
                                                                    return;
  #line 1263 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags | 2U);
  #line 1265 
  if (((unsigned int)enet->flags & 1U) != 0U) 
                                              #line 1266 
                                              (*(enet->fsm))((void *)enet,1);
  #line 1267 
  return;
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_disable(struct bna_enet *enet, enum bna_cleanup_type type, void (*cbfn)(void *))
{
  #line 1273 
  if (type == (unsigned int)BNA_SOFT_CLEANUP) {
    #line 1274 
    (*cbfn)((void *)(enet->bna)->bnad);
    #line 1275 
    return;
  }
  #line 1278 
  enet->stop_cbfn = cbfn;
  #line 1279 
  enet->stop_cbarg = (void *)(enet->bna)->bnad;
  #line 1281 
  enet->flags = (enum bna_enet_flags)((unsigned int)enet->flags & 4294967293U);
  #line 1283 
  (*(enet->fsm))((void *)enet,2);
  #line 1284 
  return;
}

#line 1287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_pause_config(struct bna_enet *enet, struct bna_pause_config *pause_config)
{
  #line 1290 
  enet->pause_config = *pause_config;
  #line 1292 
  (*(enet->fsm))((void *)enet,4);
  #line 1293 
  return;
}

#line 1296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_mtu_set(struct bna_enet *enet, int mtu, void (*cbfn)(struct bnad *))
{
  #line 1299 
  enet->mtu = mtu;
  #line 1301 
  enet->mtu_cbfn = cbfn;
  #line 1303 
  (*(enet->fsm))((void *)enet,5);
  #line 1304 
  return;
}

#line 1307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_enet_perm_mac_get(struct bna_enet *enet, u8 *mac)
{
  #line 1309 
  bfa_nw_ioc_get_mac(& (enet->bna)->ioceth.ioc,mac);
  #line 1310 
  return;
}

#line 1362 
#line 1620 
static void bna_bfi_attr_get(struct bna_ioceth *ioceth);
#line 1364 
#line 1388 
static void bna_ioceth_sm_stopped(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1364 
#line 1382 
static void bna_ioceth_sm_stopped_entry(struct bna_ioceth *ioceth);
#line 1366 
#line 1425 
static void bna_ioceth_sm_ioc_ready_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1366 
#line 1416 
static void bna_ioceth_sm_ioc_ready_wait_entry(struct bna_ioceth *ioceth);
#line 1368 
#line 1459 
static void bna_ioceth_sm_enet_attr_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1368 
#line 1453 
static void bna_ioceth_sm_enet_attr_wait_entry(struct bna_ioceth *ioceth);
#line 1370 
#line 1490 
static void bna_ioceth_sm_ready(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1370 
#line 1482 
static void bna_ioceth_sm_ready_entry(struct bna_ioceth *ioceth);
#line 1372 
#line 1515 
static void bna_ioceth_sm_last_resp_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1372 
#line 1510 
static void bna_ioceth_sm_last_resp_wait_entry(struct bna_ioceth *ioceth);
#line 1374 
#line 1543 
static void bna_ioceth_sm_enet_stop_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1374 
#line 1536 
static void bna_ioceth_sm_enet_stop_wait_entry(struct bna_ioceth *ioceth);
#line 1376 
#line 1571 
static void bna_ioceth_sm_ioc_disable_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1376 
#line 1566 
static void bna_ioceth_sm_ioc_disable_wait_entry(struct bna_ioceth *ioceth);
#line 1378 
#line 1597 
static void bna_ioceth_sm_failed(struct bna_ioceth *ioceth, enum bna_ioceth_event event);
#line 1378 
#line 1591 
static void bna_ioceth_sm_failed_entry(struct bna_ioceth *ioceth);
#line 1382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_stopped_entry(struct bna_ioceth *ioceth)
{
  #line 1384 
  if (ioceth->stop_cbfn != (void (*)(struct bnad *))0) {
    #line 1384 
    void (*cbfn)(struct bnad *);
    #line 1384 
    struct bnad *cbarg;
    #line 1384 
    cbfn = ioceth->stop_cbfn;
    #line 1384 
    cbarg = ioceth->stop_cbarg;
    #line 1384 
    ioceth->stop_cbfn = (void (*)(struct bnad *))0;
    #line 1384 
    ioceth->stop_cbarg = (struct bnad *)0;
    #line 1384 
    (*cbfn)(cbarg);
  }
  #line 1386 
  return;
}

#line 1388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_stopped(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1391 
  switch ((unsigned int)event) {
    #line 1392 
    case (unsigned int)1: 
                          #line 1392 
    ;
    #line 1393 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_ready_wait);
    #line 1393 
    bna_ioceth_sm_ioc_ready_wait_entry(ioceth);
    #line 1394 
    bfa_nw_ioc_enable(& ioceth->ioc);
    #line 1395 
    break;
    #line 1397 
    case (unsigned int)2: 
                          #line 1397 
    ;
    #line 1398 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_stopped);
    #line 1398 
    bna_ioceth_sm_stopped_entry(ioceth);
    #line 1399 
    break;
    #line 1401 
    case (unsigned int)3: 
                          #line 1401 
    ;
    {
      #line 1402 
      u32 intr_status;
      #line 1402 
      intr_status = readl((ioceth->bna)->regs.fn_int_status);
      #line 1402 
      if (intr_status != 0U) 
                             #line 1402 
                             writel(~ (ioceth->bna)->bits.mbox_status_bits & intr_status,(ioceth->bna)->regs.fn_int_status);
      #line 1402 
      bnad_cb_mbox_intr_enable((ioceth->bna)->bnad);
      {
        #line 1402 
        u32 mask;
        #line 1402 
        mask = readl((ioceth->bna)->regs.fn_int_mask);
        #line 1402 
        writel(~ ((ioceth->bna)->bits.mbox_mask_bits | (ioceth->bna)->bits.error_mask_bits) & mask,(ioceth->bna)->regs.fn_int_mask);
        #line 1402 
        mask = readl((ioceth->bna)->regs.fn_int_mask);
      }
    }
    #line 1403 
    break;
    #line 1405 
    case (unsigned int)4: 
                          #line 1405 
    ;
    {
      #line 1406 
      u32 mask_0;
      #line 1406 
      mask_0 = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1406 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask_0) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1406 
      mask_0 = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1406 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1407 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_failed);
    #line 1407 
    bna_ioceth_sm_failed_entry(ioceth);
    #line 1408 
    break;
    #line 1410 
    default: 
             #line 1410 
    ;
    #line 1411 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1411,(unsigned int)event);
  }
  #line 1413 
  return;
}

#line 1416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_ioc_ready_wait_entry(struct bna_ioceth *ioceth)
{
  #line 1418 
  return;
}

#line 1425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_ioc_ready_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1428 
  switch ((unsigned int)event) {
    #line 1429 
    case (unsigned int)2: 
                          #line 1429 
    ;
    #line 1430 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_disable_wait);
    #line 1430 
    bna_ioceth_sm_ioc_disable_wait_entry(ioceth);
    #line 1431 
    bfa_nw_ioc_disable(& ioceth->ioc);
    #line 1432 
    break;
    #line 1434 
    case (unsigned int)3: 
                          #line 1434 
    ;
    {
      #line 1435 
      u32 intr_status;
      #line 1435 
      intr_status = readl((ioceth->bna)->regs.fn_int_status);
      #line 1435 
      if (intr_status != 0U) 
                             #line 1435 
                             writel(~ (ioceth->bna)->bits.mbox_status_bits & intr_status,(ioceth->bna)->regs.fn_int_status);
      #line 1435 
      bnad_cb_mbox_intr_enable((ioceth->bna)->bnad);
      {
        #line 1435 
        u32 mask;
        #line 1435 
        mask = readl((ioceth->bna)->regs.fn_int_mask);
        #line 1435 
        writel(~ ((ioceth->bna)->bits.mbox_mask_bits | (ioceth->bna)->bits.error_mask_bits) & mask,(ioceth->bna)->regs.fn_int_mask);
        #line 1435 
        mask = readl((ioceth->bna)->regs.fn_int_mask);
      }
    }
    #line 1436 
    break;
    #line 1438 
    case (unsigned int)4: 
                          #line 1438 
    ;
    {
      #line 1439 
      u32 mask_0;
      #line 1439 
      mask_0 = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1439 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask_0) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1439 
      mask_0 = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1439 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1440 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_failed);
    #line 1440 
    bna_ioceth_sm_failed_entry(ioceth);
    #line 1441 
    break;
    #line 1443 
    case (unsigned int)5: 
                          #line 1443 
    ;
    #line 1444 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_enet_attr_wait);
    #line 1444 
    bna_ioceth_sm_enet_attr_wait_entry(ioceth);
    #line 1445 
    break;
    #line 1447 
    default: 
             #line 1447 
    ;
    #line 1448 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1448,(unsigned int)event);
  }
  #line 1450 
  return;
}

#line 1453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_enet_attr_wait_entry(struct bna_ioceth *ioceth)
{
  #line 1455 
  bna_bfi_attr_get(ioceth);
  #line 1456 
  return;
}

#line 1459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_enet_attr_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1462 
  switch ((unsigned int)event) {
    #line 1463 
    case (unsigned int)2: 
                          #line 1463 
    ;
    #line 1464 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_last_resp_wait);
    #line 1464 
    bna_ioceth_sm_last_resp_wait_entry(ioceth);
    #line 1465 
    break;
    #line 1467 
    case (unsigned int)4: 
                          #line 1467 
    ;
    {
      #line 1468 
      u32 mask;
      #line 1468 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1468 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1468 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1468 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1469 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_failed);
    #line 1469 
    bna_ioceth_sm_failed_entry(ioceth);
    #line 1470 
    break;
    #line 1472 
    case (unsigned int)6: 
                          #line 1472 
    ;
    #line 1473 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ready);
    #line 1473 
    bna_ioceth_sm_ready_entry(ioceth);
    #line 1474 
    break;
    #line 1476 
    default: 
             #line 1476 
    ;
    #line 1477 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1477,(unsigned int)event);
  }
  #line 1479 
  return;
}

#line 1482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_ready_entry(struct bna_ioceth *ioceth)
{
  #line 1484 
  bna_enet_start(& (ioceth->bna)->enet);
  #line 1485 
  (ioceth->bna)->stats_mod.ioc_ready = (_Bool)1;
  #line 1486 
  bnad_cb_ioceth_ready((ioceth->bna)->bnad);
  #line 1487 
  return;
}

#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_ready(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1492 
  switch ((unsigned int)event) {
    #line 1493 
    case (unsigned int)2: 
                          #line 1493 
    ;
    #line 1494 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_enet_stop_wait);
    #line 1494 
    bna_ioceth_sm_enet_stop_wait_entry(ioceth);
    #line 1495 
    break;
    #line 1497 
    case (unsigned int)4: 
                          #line 1497 
    ;
    {
      #line 1498 
      u32 mask;
      #line 1498 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1498 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1498 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1498 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1499 
    bna_enet_fail(& (ioceth->bna)->enet);
    #line 1500 
    (ioceth->bna)->stats_mod.ioc_ready = (_Bool)0;
    #line 1500 
    (ioceth->bna)->stats_mod.stats_get_busy = (_Bool)0;
    #line 1500 
    (ioceth->bna)->stats_mod.stats_clr_busy = (_Bool)0;
    #line 1501 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_failed);
    #line 1501 
    bna_ioceth_sm_failed_entry(ioceth);
    #line 1502 
    break;
    #line 1504 
    default: 
             #line 1504 
    ;
    #line 1505 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1505,(unsigned int)event);
  }
  #line 1507 
  return;
}

#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_last_resp_wait_entry(struct bna_ioceth *ioceth)
{
  #line 1512 
  return;
}

#line 1515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_last_resp_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1518 
  switch ((unsigned int)event) {
    #line 1519 
    case (unsigned int)4: 
                          #line 1519 
    ;
    #line 1520 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_disable_wait);
    #line 1520 
    bna_ioceth_sm_ioc_disable_wait_entry(ioceth);
    {
      #line 1521 
      u32 mask;
      #line 1521 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1521 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1521 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1521 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1522 
    bfa_nw_ioc_disable(& ioceth->ioc);
    #line 1523 
    break;
    #line 1525 
    case (unsigned int)6: 
                          #line 1525 
    ;
    #line 1526 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_disable_wait);
    #line 1526 
    bna_ioceth_sm_ioc_disable_wait_entry(ioceth);
    #line 1527 
    bfa_nw_ioc_disable(& ioceth->ioc);
    #line 1528 
    break;
    #line 1530 
    default: 
             #line 1530 
    ;
    #line 1531 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1531,(unsigned int)event);
  }
  #line 1533 
  return;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_enet_stop_wait_entry(struct bna_ioceth *ioceth)
{
  #line 1538 
  (ioceth->bna)->stats_mod.ioc_ready = (_Bool)0;
  #line 1539 
  bna_enet_stop(& (ioceth->bna)->enet);
  #line 1540 
  return;
}

#line 1543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_enet_stop_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1546 
  switch ((unsigned int)event) {
    #line 1547 
    case (unsigned int)4: 
                          #line 1547 
    ;
    #line 1548 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_disable_wait);
    #line 1548 
    bna_ioceth_sm_ioc_disable_wait_entry(ioceth);
    {
      #line 1549 
      u32 mask;
      #line 1549 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1549 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1549 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1549 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1550 
    bna_enet_fail(& (ioceth->bna)->enet);
    #line 1551 
    (ioceth->bna)->stats_mod.ioc_ready = (_Bool)0;
    #line 1551 
    (ioceth->bna)->stats_mod.stats_get_busy = (_Bool)0;
    #line 1551 
    (ioceth->bna)->stats_mod.stats_clr_busy = (_Bool)0;
    #line 1552 
    bfa_nw_ioc_disable(& ioceth->ioc);
    #line 1553 
    break;
    #line 1555 
    case (unsigned int)7: 
                          #line 1555 
    ;
    #line 1556 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_disable_wait);
    #line 1556 
    bna_ioceth_sm_ioc_disable_wait_entry(ioceth);
    #line 1557 
    bfa_nw_ioc_disable(& ioceth->ioc);
    #line 1558 
    break;
    #line 1560 
    default: 
             #line 1560 
    ;
    #line 1561 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1561,(unsigned int)event);
  }
  #line 1563 
  return;
}

#line 1566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_ioc_disable_wait_entry(struct bna_ioceth *ioceth)
{
  #line 1568 
  return;
}

#line 1571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_ioc_disable_wait(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1574 
  switch ((unsigned int)event) {
    #line 1575 
    case (unsigned int)8: 
                          #line 1575 
    ;
    {
      #line 1576 
      u32 mask;
      #line 1576 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
      #line 1576 
      writel(((ioceth->bna)->bits.mbox_mask_bits | mask) | (ioceth->bna)->bits.error_mask_bits,(ioceth->bna)->regs.fn_int_mask);
      #line 1576 
      mask = readl((ioceth->bna)->regs.fn_int_mask);
    }
    #line 1576 
    bnad_cb_mbox_intr_disable((ioceth->bna)->bnad);
    #line 1577 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_stopped);
    #line 1577 
    bna_ioceth_sm_stopped_entry(ioceth);
    #line 1578 
    break;
    #line 1580 
    case (unsigned int)7: 
                          #line 1580 
    ;
    #line 1583 
    break;
    #line 1585 
    default: 
             #line 1585 
    ;
    #line 1586 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1586,(unsigned int)event);
  }
  #line 1588 
  return;
}

#line 1591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_failed_entry(struct bna_ioceth *ioceth)
{
  #line 1593 
  bnad_cb_ioceth_failed((ioceth->bna)->bnad);
  #line 1594 
  return;
}

#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_sm_failed(struct bna_ioceth *ioceth, enum bna_ioceth_event event)
{
  #line 1600 
  switch ((unsigned int)event) {
    #line 1601 
    case (unsigned int)2: 
                          #line 1601 
    ;
    #line 1602 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_disable_wait);
    #line 1602 
    bna_ioceth_sm_ioc_disable_wait_entry(ioceth);
    #line 1603 
    bfa_nw_ioc_disable(& ioceth->ioc);
    #line 1604 
    break;
    #line 1606 
    case (unsigned int)3: 
                          #line 1606 
    ;
    {
      #line 1607 
      u32 intr_status;
      #line 1607 
      intr_status = readl((ioceth->bna)->regs.fn_int_status);
      #line 1607 
      if (intr_status != 0U) 
                             #line 1607 
                             writel(~ (ioceth->bna)->bits.mbox_status_bits & intr_status,(ioceth->bna)->regs.fn_int_status);
      #line 1607 
      bnad_cb_mbox_intr_enable((ioceth->bna)->bnad);
      {
        #line 1607 
        u32 mask;
        #line 1607 
        mask = readl((ioceth->bna)->regs.fn_int_mask);
        #line 1607 
        writel(~ ((ioceth->bna)->bits.mbox_mask_bits | (ioceth->bna)->bits.error_mask_bits) & mask,(ioceth->bna)->regs.fn_int_mask);
        #line 1607 
        mask = readl((ioceth->bna)->regs.fn_int_mask);
      }
    }
    #line 1608 
    ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_ioc_ready_wait);
    #line 1608 
    bna_ioceth_sm_ioc_ready_wait_entry(ioceth);
    #line 1609 
    break;
    #line 1611 
    case (unsigned int)4: 
                          #line 1611 
    ;
    #line 1612 
    break;
    #line 1614 
    default: 
             #line 1614 
    ;
    #line 1615 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c",1615,(unsigned int)event);
  }
  #line 1617 
  return;
}

#line 1620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_attr_get(struct bna_ioceth *ioceth)
{
  #line 1622 
  struct bfi_enet_attr_req *attr_req = & ioceth->attr_req;
  #line 1624 
  attr_req->mh.msg_class = (unsigned char)24U;
  #line 1624 
  attr_req->mh.msg_id = (unsigned char)22U;
  #line 1624 
  attr_req->mh.msg_token = (unsigned short)0U;
  #line 1624 
  attr_req->mh.enet_id = (unsigned char)0U;
  #line 1626 
  attr_req->mh.num_entries = (unsigned short)256U;
  #line 1628 
  ioceth->msgq_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 1628 
  ioceth->msgq_cmd.cbarg = (void *)0;
  #line 1628 
  ioceth->msgq_cmd.msg_size = 8UL;
  #line 1628 
  ioceth->msgq_cmd.msg_hdr = & attr_req->mh;
  #line 1630 
  bfa_msgq_cmd_post(& (ioceth->bna)->msgq,& ioceth->msgq_cmd);
  #line 1631 
  return;
}

#line 1636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_cb_ioceth_enable(void *arg, enum bfa_status error)
{
  #line 1638 
  struct bna_ioceth *ioceth = (struct bna_ioceth *)arg;
  #line 1640 
  if (error != (unsigned int)BFA_STATUS_OK) 
                                            #line 1641 
                                            (*(ioceth->fsm))((void *)ioceth,4); else 
                                                                    #line 1643 
                                                                    (*(ioceth->fsm))((void *)ioceth,5);
  #line 1644 
  return;
}

#line 1647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_cb_ioceth_disable(void *arg)
{
  #line 1649 
  struct bna_ioceth *ioceth = (struct bna_ioceth *)arg;
  #line 1651 
  (*(ioceth->fsm))((void *)ioceth,8);
  #line 1652 
  return;
}

#line 1655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_cb_ioceth_hbfail(void *arg)
{
  #line 1657 
  struct bna_ioceth *ioceth = (struct bna_ioceth *)arg;
  #line 1659 
  (*(ioceth->fsm))((void *)ioceth,4);
  #line 1660 
  return;
}

#line 1663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_cb_ioceth_reset(void *arg)
{
  #line 1665 
  struct bna_ioceth *ioceth = (struct bna_ioceth *)arg;
  #line 1667 
  (*(ioceth->fsm))((void *)ioceth,3);
  #line 1668 
  return;
}

#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static struct bfa_ioc_cbfn bna_ioceth_cbfn = {.enable_cbfn = & bna_cb_ioceth_enable, .disable_cbfn = & bna_cb_ioceth_disable, .hbfail_cbfn = & bna_cb_ioceth_hbfail, .reset_cbfn = & bna_cb_ioceth_reset};
#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_attr_init(struct bna_ioceth *ioceth)
{
  #line 1679 
  ioceth->attr.num_txq = 1;
  #line 1680 
  ioceth->attr.num_rxp = 1;
  #line 1681 
  ioceth->attr.num_ucmac = 1;
  #line 1682 
  ioceth->attr.num_mcmac = 256;
  #line 1683 
  ioceth->attr.max_rit_size = 1;
  #line 1684 
  ioceth->attr.fw_query_complete = (_Bool)0;
  #line 1685 
  return;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_init(struct bna_ioceth *ioceth, struct bna *bna, struct bna_res_info *res_info)
{
  #line 1691 
  u64 dma;
  #line 1692 
  u8 *kva;
  #line 1694 
  ioceth->bna = bna;
  #line 1701 
  bfa_nw_ioc_attach(& ioceth->ioc,(void *)ioceth,& bna_ioceth_cbfn);
  #line 1702 
  bfa_nw_ioc_pci_init(& ioceth->ioc,& bna->pcidev,(enum bfi_pcifn_class)BFI_PCIFN_CLASS_ETH);
  #line 1704 
  dma = ((unsigned long long)__builtin_bswap32(((res_info + 1U)->res_u.mem_info.mdl)->dma.msb) << 32) | (unsigned long long)__builtin_bswap32(((res_info + 1U)->res_u.mem_info.mdl)->dma.lsb);
  #line 1706 
  kva = (u8 *)((res_info + 1U)->res_u.mem_info.mdl)->kva;
  #line 1707 
  bfa_nw_ioc_mem_claim(& ioceth->ioc,kva,dma);
  #line 1709 
  kva = (u8 *)((res_info + 2U)->res_u.mem_info.mdl)->kva;
  #line 1710 
  bfa_nw_ioc_debug_memclaim(& ioceth->ioc,(void *)kva);
  #line 1716 
  dma = ((unsigned long long)__builtin_bswap32((res_info->res_u.mem_info.mdl)->dma.msb) << 32) | (unsigned long long)__builtin_bswap32((res_info->res_u.mem_info.mdl)->dma.lsb);
  #line 1718 
  kva = (u8 *)(res_info->res_u.mem_info.mdl)->kva;
  #line 1719 
  bfa_nw_cee_attach(& bna->cee,& ioceth->ioc,(void *)bna);
  #line 1720 
  bfa_nw_cee_mem_claim(& bna->cee,kva,dma);
  #line 1721 
  kva += (unsigned long)bfa_nw_cee_meminfo();
  #line 1722 
  dma = (unsigned long long)bfa_nw_cee_meminfo() + dma;
  #line 1724 
  bfa_nw_flash_attach(& bna->flash,& ioceth->ioc,(void *)bna);
  #line 1725 
  bfa_nw_flash_memclaim(& bna->flash,kva,dma);
  #line 1726 
  kva += (unsigned long)bfa_nw_flash_meminfo();
  #line 1727 
  dma = (unsigned long long)bfa_nw_flash_meminfo() + dma;
  #line 1729 
  bfa_msgq_attach(& bna->msgq,& ioceth->ioc);
  #line 1730 
  bfa_msgq_memclaim(& bna->msgq,kva,dma);
  #line 1731 
  bfa_msgq_regisr(& bna->msgq,(enum bfi_mclass)BFI_MC_ENET,& bna_msgq_rsp_handler,(void *)bna);
  #line 1732 
  kva += (unsigned long)bfa_msgq_meminfo();
  #line 1733 
  dma = (unsigned long long)bfa_msgq_meminfo() + dma;
  #line 1735 
  ioceth->stop_cbfn = (void (*)(struct bnad *))0;
  #line 1736 
  ioceth->stop_cbarg = (struct bnad *)0;
  #line 1738 
  bna_attr_init(ioceth);
  #line 1740 
  ioceth->fsm = (void (*)(void *, int ))(& bna_ioceth_sm_stopped);
  #line 1740 
  bna_ioceth_sm_stopped_entry(ioceth);
  #line 1742 
  return;
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ioceth_uninit(struct bna_ioceth *ioceth)
{
  #line 1746 
  bfa_nw_ioc_detach(& ioceth->ioc);
  #line 1748 
  ioceth->bna = (struct bna *)0;
  #line 1749 
  return;
}

#line 1752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_ioceth_enable(struct bna_ioceth *ioceth)
{
  #line 1754 
  if (ioceth->fsm == (void (*)(void *, int ))(& bna_ioceth_sm_ready)) {
    #line 1755 
    bnad_cb_ioceth_ready((ioceth->bna)->bnad);
    #line 1756 
    return;
  }
  #line 1759 
  if (ioceth->fsm == (void (*)(void *, int ))(& bna_ioceth_sm_stopped)) 
    #line 1760 
    (*(ioceth->fsm))((void *)ioceth,1);
  #line 1761 
  return;
}

#line 1764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_ioceth_disable(struct bna_ioceth *ioceth, enum bna_cleanup_type type)
{
  #line 1766 
  if (type == (unsigned int)BNA_SOFT_CLEANUP) {
    #line 1767 
    bnad_cb_ioceth_disabled((ioceth->bna)->bnad);
    #line 1768 
    return;
  }
  #line 1771 
  ioceth->stop_cbfn = & bnad_cb_ioceth_disabled;
  #line 1772 
  ioceth->stop_cbarg = (ioceth->bna)->bnad;
  #line 1774 
  (*(ioceth->fsm))((void *)ioceth,2);
  #line 1775 
  return;
}

#line 1778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ucam_mod_init(struct bna_ucam_mod *ucam_mod, struct bna *bna, struct bna_res_info *res_info)
{
  #line 1781 
  int i;
  #line 1783 
  ucam_mod->ucmac = (struct bna_mac *)((res_info + 5U)->res_u.mem_info.mdl)->kva;
  #line 1786 
  INIT_LIST_HEAD_2(& ucam_mod->free_q);
  #line 1787 
  i = 0;
  #line 1787 
  while (bna->ioceth.attr.num_ucmac > i) {
    #line 1788 
    list_add_tail_1(& (ucam_mod->ucmac + (unsigned long)i)->qe,& ucam_mod->free_q);
    #line 1787 
    i ++;
  }
  #line 1791 
  INIT_LIST_HEAD_2(& ucam_mod->del_q);
  #line 1792 
  while (bna->ioceth.attr.num_ucmac * 2 > i) {
    #line 1793 
    list_add_tail_1(& (ucam_mod->ucmac + (unsigned long)i)->qe,& ucam_mod->del_q);
    #line 1792 
    i ++;
  }
  #line 1795 
  ucam_mod->bna = bna;
  #line 1796 
  return;
}

#line 1799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_ucam_mod_uninit(struct bna_ucam_mod *ucam_mod)
{
  #line 1801 
  ucam_mod->bna = (struct bna *)0;
  #line 1802 
  return;
}

#line 1805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_mcam_mod_init(struct bna_mcam_mod *mcam_mod, struct bna *bna, struct bna_res_info *res_info)
{
  #line 1808 
  int i;
  #line 1810 
  mcam_mod->mcmac = (struct bna_mac *)((res_info + 6U)->res_u.mem_info.mdl)->kva;
  #line 1813 
  INIT_LIST_HEAD_2(& mcam_mod->free_q);
  #line 1814 
  i = 0;
  #line 1814 
  while (bna->ioceth.attr.num_mcmac > i) {
    #line 1815 
    list_add_tail_1(& (mcam_mod->mcmac + (unsigned long)i)->qe,& mcam_mod->free_q);
    #line 1814 
    i ++;
  }
  #line 1817 
  mcam_mod->mchandle = (struct bna_mcam_handle *)((res_info + 7U)->res_u.mem_info.mdl)->kva;
  #line 1820 
  INIT_LIST_HEAD_2(& mcam_mod->free_handle_q);
  #line 1821 
  i = 0;
  #line 1821 
  while (bna->ioceth.attr.num_mcmac > i) {
    #line 1822 
    list_add_tail_1(& (mcam_mod->mchandle + (unsigned long)i)->qe,& mcam_mod->free_handle_q);
    #line 1821 
    i ++;
  }
  #line 1826 
  INIT_LIST_HEAD_2(& mcam_mod->del_q);
  #line 1827 
  while (bna->ioceth.attr.num_mcmac * 2 > i) {
    #line 1828 
    list_add_tail_1(& (mcam_mod->mcmac + (unsigned long)i)->qe,& mcam_mod->del_q);
    #line 1827 
    i ++;
  }
  #line 1830 
  mcam_mod->bna = bna;
  #line 1831 
  return;
}

#line 1834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_mcam_mod_uninit(struct bna_mcam_mod *mcam_mod)
{
  #line 1836 
  mcam_mod->bna = (struct bna *)0;
  #line 1837 
  return;
}

#line 1840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
static void bna_bfi_stats_get(struct bna *bna)
{
  #line 1842 
  struct bfi_enet_stats_req *stats_req = & bna->stats_mod.stats_get;
  #line 1844 
  bna->stats_mod.stats_get_busy = (_Bool)1;
  #line 1846 
  stats_req->mh.msg_class = (unsigned char)24U;
  #line 1846 
  stats_req->mh.msg_id = (unsigned char)23U;
  #line 1846 
  stats_req->mh.msg_token = (unsigned short)0U;
  #line 1846 
  stats_req->mh.enet_id = (unsigned char)0U;
  #line 1848 
  stats_req->mh.num_entries = (unsigned short)256U;
  #line 1850 
  stats_req->stats_mask = (unsigned short)7936U;
  #line 1851 
  stats_req->tx_enet_mask = __builtin_bswap32(bna->tx_mod.rid_mask);
  #line 1852 
  stats_req->rx_enet_mask = __builtin_bswap32(bna->rx_mod.rid_mask);
  #line 1853 
  stats_req->host_buffer.a32.addr_hi = bna->stats.hw_stats_dma.msb;
  #line 1854 
  stats_req->host_buffer.a32.addr_lo = bna->stats.hw_stats_dma.lsb;
  #line 1856 
  bna->stats_mod.stats_get_cmd.cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 1856 
  bna->stats_mod.stats_get_cmd.cbarg = (void *)0;
  #line 1856 
  bna->stats_mod.stats_get_cmd.msg_size = 28UL;
  #line 1856 
  bna->stats_mod.stats_get_cmd.msg_hdr = & stats_req->mh;
  #line 1858 
  bfa_msgq_cmd_post(& bna->msgq,& bna->stats_mod.stats_get_cmd);
  #line 1859 
  return;
}

#line 1862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_res_req(struct bna_res_info *res_info)
{
  #line 1865 
  res_info->res_type = BNA_RES_T_MEM;
  #line 1866 
  res_info->res_u.mem_info.mem_type = BNA_MEM_T_DMA;
  #line 1867 
  res_info->res_u.mem_info.num = 1U;
  #line 1868 
  res_info->res_u.mem_info.len = (((bfa_nw_cee_meminfo() + bfa_nw_flash_meminfo()) + bfa_msgq_meminfo()) + 4095U) & 4294963200U;
  #line 1874 
  (res_info + 1U)->res_type = BNA_RES_T_MEM;
  #line 1875 
  (res_info + 1U)->res_u.mem_info.mem_type = BNA_MEM_T_DMA;
  #line 1876 
  (res_info + 1U)->res_u.mem_info.num = 1U;
  #line 1877 
  (res_info + 1U)->res_u.mem_info.len = (bfa_nw_ioc_meminfo() + 4095U) & 4294963200U;
  #line 1881 
  (res_info + 2U)->res_type = BNA_RES_T_MEM;
  #line 1882 
  (res_info + 2U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1883 
  (res_info + 2U)->res_u.mem_info.num = 1U;
  #line 1884 
  (res_info + 2U)->res_u.mem_info.len = 4128U;
  #line 1887 
  (res_info + 3U)->res_type = BNA_RES_T_MEM;
  #line 1888 
  (res_info + 3U)->res_u.mem_info.mem_type = BNA_MEM_T_DMA;
  #line 1889 
  (res_info + 3U)->res_u.mem_info.num = 1U;
  #line 1890 
  (res_info + 3U)->res_u.mem_info.len = 8192U;
  #line 1891 
  return;
}

#line 1896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_mod_res_req(struct bna *bna, struct bna_res_info *res_info)
{
  #line 1898 
  struct bna_attr *attr = & bna->ioceth.attr;
  #line 1901 
  res_info->res_type = BNA_RES_T_MEM;
  #line 1902 
  res_info->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1904 
  res_info->res_u.mem_info.num = 1U;
  #line 1905 
  res_info->res_u.mem_info.len = (unsigned int)((unsigned long)attr->num_txq) * 520U;
  #line 1909 
  (res_info + 1U)->res_type = BNA_RES_T_MEM;
  #line 1910 
  (res_info + 1U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1912 
  (res_info + 1U)->res_u.mem_info.num = 1U;
  #line 1913 
  (res_info + 1U)->res_u.mem_info.len = (unsigned int)((unsigned long)attr->num_txq) * 144U;
  #line 1917 
  (res_info + 2U)->res_type = BNA_RES_T_MEM;
  #line 1918 
  (res_info + 2U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1920 
  (res_info + 2U)->res_u.mem_info.num = 1U;
  #line 1921 
  (res_info + 2U)->res_u.mem_info.len = (unsigned int)((unsigned long)attr->num_rxp) * 2512U;
  #line 1925 
  (res_info + 3U)->res_type = BNA_RES_T_MEM;
  #line 1926 
  (res_info + 3U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1928 
  (res_info + 3U)->res_u.mem_info.num = 1U;
  #line 1929 
  (res_info + 3U)->res_u.mem_info.len = (unsigned int)((unsigned long)attr->num_rxp) * 152U;
  #line 1933 
  (res_info + 4U)->res_type = BNA_RES_T_MEM;
  #line 1934 
  (res_info + 4U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1936 
  (res_info + 4U)->res_u.mem_info.num = 1U;
  #line 1937 
  (res_info + 4U)->res_u.mem_info.len = (unsigned int)((unsigned long)(attr->num_rxp * 2)) * 128U;
  #line 1941 
  (res_info + 5U)->res_type = BNA_RES_T_MEM;
  #line 1942 
  (res_info + 5U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1944 
  (res_info + 5U)->res_u.mem_info.num = 1U;
  #line 1945 
  (res_info + 5U)->res_u.mem_info.len = (unsigned int)((unsigned long)(attr->num_ucmac * 2)) * 32U;
  #line 1949 
  (res_info + 6U)->res_type = BNA_RES_T_MEM;
  #line 1950 
  (res_info + 6U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1952 
  (res_info + 6U)->res_u.mem_info.num = 1U;
  #line 1953 
  (res_info + 6U)->res_u.mem_info.len = (unsigned int)((unsigned long)(attr->num_mcmac * 2)) * 32U;
  #line 1957 
  (res_info + 7U)->res_type = BNA_RES_T_MEM;
  #line 1958 
  (res_info + 7U)->res_u.mem_info.mem_type = BNA_MEM_T_KVA;
  #line 1960 
  (res_info + 7U)->res_u.mem_info.num = 1U;
  #line 1961 
  (res_info + 7U)->res_u.mem_info.len = (unsigned int)((unsigned long)attr->num_mcmac) * 24U;
  #line 1963 
  return;
}

#line 1966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_init(struct bna *bna, struct bnad *bnad, struct bfa_pcidev *pcidev, struct bna_res_info *res_info)
{
  #line 1969 
  bna->bnad = bnad;
  #line 1970 
  bna->pcidev = *pcidev;
  #line 1972 
  bna->stats.hw_stats_kva = (struct bfi_enet_stats *)((res_info + 3U)->res_u.mem_info.mdl)->kva;
  #line 1974 
  bna->stats.hw_stats_dma.msb = ((res_info + 3U)->res_u.mem_info.mdl)->dma.msb;
  #line 1976 
  bna->stats.hw_stats_dma.lsb = ((res_info + 3U)->res_u.mem_info.mdl)->dma.lsb;
  #line 1979 
  switch ((int)bna->pcidev.device_id) {
    #line 1979 
    case 20: 
             #line 1979 
    ;
    {
      #line 1979 
      struct bna_reg_offset reg_offset[4U] = {{.fn_int_status = 81920U, .fn_int_mask = 81924U}, {.fn_int_status = 82176U, .fn_int_mask = 82180U}, {.fn_int_status = 82688U, .fn_int_mask = 82692U}, {.fn_int_status = 82944U, .fn_int_mask = 82948U}};
      #line 1979 
      bna->regs.fn_int_status = bna->pcidev.pci_bar_kva + (unsigned long)reg_offset[(int)bna->pcidev.pci_func].fn_int_status;
      #line 1979 
      bna->regs.fn_int_mask = bna->pcidev.pci_bar_kva + (unsigned long)reg_offset[(int)bna->pcidev.pci_func].fn_int_mask;
    }
    #line 1979 
    bna->bits.mbox_status_bits = 3145728U;
    #line 1979 
    bna->bits.mbox_mask_bits = 3145728U;
    #line 1979 
    bna->bits.error_status_bits = 17760256U;
    #line 1979 
    bna->bits.error_mask_bits = 17760256U;
    #line 1979 
    bna->bits.halt_status_bits = 16777216U;
    #line 1979 
    bna->bits.halt_mask_bits = 16777216U;
    #line 1979 
    break;
    #line 1979 
    case 34: 
             #line 1979 
    ;
    #line 1979 
    bna->regs.fn_int_status = bna->pcidev.pci_bar_kva + 196864U;
    #line 1979 
    bna->regs.fn_int_mask = bna->pcidev.pci_bar_kva + 196868U;
    #line 1979 
    bna->bits.mbox_status_bits = 196608U;
    #line 1979 
    bna->bits.mbox_mask_bits = 196608U;
    #line 1979 
    bna->bits.error_status_bits = 33292288U;
    #line 1979 
    bna->bits.error_mask_bits = 33292288U;
    #line 1979 
    bna->bits.halt_status_bits = 2097152U;
    #line 1979 
    bna->bits.halt_mask_bits = 2097152U;
    #line 1979 
    break;
  }
  #line 1982 
  bna_ioceth_init(& bna->ioceth,bna,res_info);
  #line 1984 
  bna_enet_init(& bna->enet,bna);
  #line 1985 
  bna_ethport_init(& bna->ethport,bna);
  #line 1986 
  return;
}

#line 1989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_mod_init(struct bna *bna, struct bna_res_info *res_info)
{
  #line 1991 
  bna_tx_mod_init(& bna->tx_mod,bna,res_info);
  #line 1993 
  bna_rx_mod_init(& bna->rx_mod,bna,res_info);
  #line 1995 
  bna_ucam_mod_init(& bna->ucam_mod,bna,res_info);
  #line 1997 
  bna_mcam_mod_init(& bna->mcam_mod,bna,res_info);
  #line 1999 
  bna->default_mode_rid = -1;
  #line 2000 
  bna->promisc_rid = -1;
  #line 2002 
  bna->mod_flags = (enum bna_mod_flags)((unsigned int)bna->mod_flags | 1U);
  #line 2003 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_uninit(struct bna *bna)
{
  #line 2008 
  if (((unsigned int)bna->mod_flags & 1U) != 0U) {
    #line 2009 
    bna_mcam_mod_uninit(& bna->mcam_mod);
    #line 2010 
    bna_ucam_mod_uninit(& bna->ucam_mod);
    #line 2011 
    bna_rx_mod_uninit(& bna->rx_mod);
    #line 2012 
    bna_tx_mod_uninit(& bna->tx_mod);
    #line 2013 
    bna->mod_flags = (enum bna_mod_flags)((unsigned int)bna->mod_flags & 4294967294U);
  }
  #line 2017 
  bna_ethport_uninit(& bna->ethport);
  #line 2018 
  bna_enet_uninit(& bna->enet);
  #line 2020 
  bna_ioceth_uninit(& bna->ioceth);
  #line 2022 
  bna->bnad = (struct bnad *)0;
  #line 2023 
  return;
}

#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
int bna_num_txq_set(struct bna *bna, int num_txq)
{
  #line 2028 
  if ((int)bna->ioceth.attr.fw_query_complete != 0 && bna->ioceth.attr.num_txq >= num_txq) {
    #line 2030 
    bna->ioceth.attr.num_txq = num_txq;
    #line 2031 
    return 0;
  }
  #line 2034 
  return 1;
}

#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
int bna_num_rxp_set(struct bna *bna, int num_rxp)
{
  #line 2040 
  if ((int)bna->ioceth.attr.fw_query_complete != 0 && bna->ioceth.attr.num_rxp >= num_rxp) {
    #line 2042 
    bna->ioceth.attr.num_rxp = num_rxp;
    #line 2043 
    return 0;
  }
  #line 2046 
  return 1;
}

#line 2050  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
struct bna_mac *bna_cam_mod_mac_get(struct list_head *head)
{
  #line 2054 
  struct bna_mac *tmp_1;
  #line 2054 
  void *__mptr;
  #line 2052 
  struct bna_mac *mac;
  {
    #line 2055 
    union __anonunion___u_6413 __u;
    #line 2054 
    struct list_head *head__ = head;
    #line 2054 
    __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
    #line 2054 
    struct list_head *pos__ = (__u.__val);
    #line 2054 
    if (pos__ != head__) {
      #line 2054 
      __mptr = (void *)pos__;
      #line 2054 
      tmp_1 = ((struct bna_mac *)__mptr);
    }
    else 
         #line 2054 
         tmp_1 = (struct bna_mac *)0;
    }
  #line 2054 
  mac = tmp_1;
  #line 2055 
  if (mac != (struct bna_mac *)0) 
                                  #line 2056 
                                  list_del_1(& mac->qe);
  #line 2058 
  return mac;
}

#line 2062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
struct bna_mcam_handle *bna_mcam_mod_handle_get(struct bna_mcam_mod *mcam_mod)
{
  #line 2066 
  struct bna_mcam_handle *tmp_1;
  #line 2066 
  void *__mptr;
  #line 2064 
  struct bna_mcam_handle *handle;
  {
    #line 2067 
    union __anonunion___u_6415 __u;
    #line 2066 
    struct list_head *head__ = & mcam_mod->free_handle_q;
    #line 2066 
    __read_once_size((void *)(& head__->next),(void *)(& __u.__c),8);
    #line 2066 
    struct list_head *pos__ = (__u.__val);
    #line 2066 
    if (pos__ != head__) {
      #line 2066 
      __mptr = (void *)pos__;
      #line 2066 
      tmp_1 = ((struct bna_mcam_handle *)__mptr);
    }
    else 
         #line 2066 
         tmp_1 = (struct bna_mcam_handle *)0;
    }
  #line 2066 
  handle = tmp_1;
  #line 2068 
  if (handle != (struct bna_mcam_handle *)0) 
                                             #line 2069 
                                             list_del_1(& handle->qe);
  #line 2071 
  return handle;
}

#line 2075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_mcam_mod_handle_put(struct bna_mcam_mod *mcam_mod, struct bna_mcam_handle *handle)
{
  #line 2078 
  list_add_tail_1(& handle->qe,& mcam_mod->free_handle_q);
  #line 2079 
  return;
}

#line 2082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bna_enet.c"
void bna_hw_stats_get(struct bna *bna)
{
  #line 2084 
  if (! bna->stats_mod.ioc_ready) {
    #line 2085 
    bnad_cb_stats_get(bna->bnad,(enum bna_cb_status)BNA_CB_FAIL,& bna->stats);
    #line 2086 
    return;
  }
  #line 2088 
  if ((int)bna->stats_mod.stats_get_busy != 0) {
    #line 2089 
    bnad_cb_stats_get(bna->bnad,(enum bna_cb_status)BNA_CB_BUSY,& bna->stats);
    #line 2090 
    return;
  }
  #line 2093 
  bna_bfi_stats_get(bna);
  #line 2094 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bna_enet.i.aux"
static void INIT_LIST_HEAD_2(struct list_head *list)
{
  #line 139 
  ldv_init_list_head(list);
  #line 140 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
void bfa_nw_ioc_set_ct_hwif(struct bfa_ioc *ioc);
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
void bfa_nw_ioc_set_ct2_hwif(struct bfa_ioc *ioc);
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
void bfa_nw_ioc_ct2_poweron(struct bfa_ioc *ioc);
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 284 
bool bfa_nw_ioc_sem_get(void *sem_reg);
#line 285 
#line 285 
void bfa_nw_ioc_sem_release(void *sem_reg);
#line 286 
#line 286 
void bfa_nw_ioc_hw_sem_release(struct bfa_ioc *ioc);
#line 287 
#line 287 
void bfa_nw_ioc_fwver_get(struct bfa_ioc *ioc, struct bfi_ioc_image_hdr *fwhdr);
#line 289 
#line 289 
bool bfa_nw_ioc_fwver_cmp(struct bfa_ioc *ioc, struct bfi_ioc_image_hdr *fwhdr);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
#line 111 
static bool bfa_ioc_ct_firmware_lock(struct bfa_ioc *ioc);
#line 30 
#line 163 
static void bfa_ioc_ct_firmware_unlock(struct bfa_ioc *ioc);
#line 31 
#line 249 
static void bfa_ioc_ct_reg_init(struct bfa_ioc *ioc);
#line 32 
#line 308 
static void bfa_ioc_ct2_reg_init(struct bfa_ioc *ioc);
#line 33 
#line 369 
static void bfa_ioc_ct_map_port(struct bfa_ioc *ioc);
#line 34 
#line 384 
static void bfa_ioc_ct2_map_port(struct bfa_ioc *ioc);
#line 35 
#line 395 
static void bfa_ioc_ct_isr_mode_set(struct bfa_ioc *ioc, bool msix);
#line 36 
#line 189 
static void bfa_ioc_ct_notify_fail(struct bfa_ioc *ioc);
#line 37 
#line 466 
static void bfa_ioc_ct_ownership_reset(struct bfa_ioc *ioc);
#line 38 
#line 483 
static bool bfa_ioc_ct_sync_start(struct bfa_ioc *ioc);
#line 39 
#line 507 
static void bfa_ioc_ct_sync_join(struct bfa_ioc *ioc);
#line 40 
#line 516 
static void bfa_ioc_ct_sync_leave(struct bfa_ioc *ioc);
#line 41 
#line 526 
static void bfa_ioc_ct_sync_ack(struct bfa_ioc *ioc);
#line 42 
#line 534 
static bool bfa_ioc_ct_sync_complete(struct bfa_ioc *ioc);
#line 43 
#line 575 
static void bfa_ioc_ct_set_cur_ioc_fwstate(struct bfa_ioc *ioc, enum bfi_ioc_state fwstate);
#line 45 
#line 582 
static enum bfi_ioc_state bfa_ioc_ct_get_cur_ioc_fwstate(struct bfa_ioc *ioc);
#line 46 
#line 588 
static void bfa_ioc_ct_set_alt_ioc_fwstate(struct bfa_ioc *ioc, enum bfi_ioc_state fwstate);
#line 48 
#line 595 
static enum bfi_ioc_state bfa_ioc_ct_get_alt_ioc_fwstate(struct bfa_ioc *ioc);
#line 49 
#line 601 
static enum bfa_status bfa_ioc_ct_pll_init(void *rb, enum bfi_asic_mode asic_mode);
#line 51 
#line 846 
static enum bfa_status bfa_ioc_ct2_pll_init(void *rb, enum bfi_asic_mode asic_mode);
#line 53 
#line 423 
static bool bfa_ioc_ct2_lpu_read_stat(struct bfa_ioc *ioc);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static struct bfa_ioc_hwif nw_hwif_ct = {.ioc_pll_init = & bfa_ioc_ct_pll_init, .ioc_firmware_lock = & bfa_ioc_ct_firmware_lock, .ioc_firmware_unlock = & bfa_ioc_ct_firmware_unlock, .ioc_reg_init = & bfa_ioc_ct_reg_init, .ioc_map_port = & bfa_ioc_ct_map_port, .ioc_isr_mode_set = & bfa_ioc_ct_isr_mode_set, .ioc_notify_fail = & bfa_ioc_ct_notify_fail, .ioc_ownership_reset = & bfa_ioc_ct_ownership_reset, .ioc_sync_start = & bfa_ioc_ct_sync_start, .ioc_sync_join = & bfa_ioc_ct_sync_join, .ioc_sync_leave = & bfa_ioc_ct_sync_leave, .ioc_sync_ack = & bfa_ioc_ct_sync_ack, .ioc_sync_complete = & bfa_ioc_ct_sync_complete, .ioc_set_fwstate = & bfa_ioc_ct_set_cur_ioc_fwstate, .ioc_get_fwstate = & bfa_ioc_ct_get_cur_ioc_fwstate, .ioc_set_alt_fwstate = & bfa_ioc_ct_set_alt_ioc_fwstate, .ioc_get_alt_fwstate = & bfa_ioc_ct_get_alt_ioc_fwstate};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static struct bfa_ioc_hwif nw_hwif_ct2 = {.ioc_pll_init = & bfa_ioc_ct2_pll_init, .ioc_firmware_lock = & bfa_ioc_ct_firmware_lock, .ioc_firmware_unlock = & bfa_ioc_ct_firmware_unlock, .ioc_reg_init = & bfa_ioc_ct2_reg_init, .ioc_map_port = & bfa_ioc_ct2_map_port, .ioc_notify_fail = & bfa_ioc_ct_notify_fail, .ioc_ownership_reset = & bfa_ioc_ct_ownership_reset, .ioc_sync_start = & bfa_ioc_ct_sync_start, .ioc_sync_join = & bfa_ioc_ct_sync_join, .ioc_sync_leave = & bfa_ioc_ct_sync_leave, .ioc_sync_ack = & bfa_ioc_ct_sync_ack, .ioc_sync_complete = & bfa_ioc_ct_sync_complete, .ioc_lpu_read_stat = & bfa_ioc_ct2_lpu_read_stat, .ioc_set_fwstate = & bfa_ioc_ct_set_cur_ioc_fwstate, .ioc_get_fwstate = & bfa_ioc_ct_get_cur_ioc_fwstate, .ioc_set_alt_fwstate = & bfa_ioc_ct_set_alt_ioc_fwstate, .ioc_get_alt_fwstate = & bfa_ioc_ct_get_alt_ioc_fwstate};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
void bfa_nw_ioc_set_ct_hwif(struct bfa_ioc *ioc)
{
  #line 100 
  ioc->ioc_hwif = & nw_hwif_ct;
  #line 101 
  return;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
void bfa_nw_ioc_set_ct2_hwif(struct bfa_ioc *ioc)
{
  #line 106 
  ioc->ioc_hwif = & nw_hwif_ct2;
  #line 107 
  return;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static bool bfa_ioc_ct_firmware_lock(struct bfa_ioc *ioc)
{
  #line 113 
  enum bfi_ioc_state ioc_fwstate;
  #line 114 
  u32 usecnt;
  #line 115 
  struct bfi_ioc_image_hdr fwhdr;
  #line 120 
  if (bfa_cb_image_get_size(ioc->asic_gen) <= 16383U) 
                                                      #line 122 
                                                      return (_Bool)1;
  #line 124 
  bfa_nw_ioc_sem_get(ioc->ioc_regs.ioc_usage_sem_reg);
  #line 125 
  usecnt = readl(ioc->ioc_regs.ioc_usage_reg);
  #line 130 
  if (usecnt == 0U) {
    #line 131 
    writel(1U,ioc->ioc_regs.ioc_usage_reg);
    #line 132 
    bfa_nw_ioc_sem_release(ioc->ioc_regs.ioc_usage_sem_reg);
    #line 133 
    writel(0U,ioc->ioc_regs.ioc_fail_sync);
    #line 134 
    return (_Bool)1;
  }
  #line 137 
  ioc_fwstate = (enum bfi_ioc_state)readl(ioc->ioc_regs.ioc_fwstate);
  #line 142 
  if ((long)(ioc_fwstate == (unsigned int)BFI_IOC_UNINIT) != 0L) {
    #line 143 
    ldv_inline_asm();
    #line 144 
    ldv_inline_asm();
    #line 145 
    ldv_inline_asm();
    #line 142 
    ;
  }
  #line 147 
  bfa_nw_ioc_fwver_get(ioc,& fwhdr);
  #line 148 
  if (! bfa_nw_ioc_fwver_cmp(ioc,& fwhdr)) {
    #line 149 
    bfa_nw_ioc_sem_release(ioc->ioc_regs.ioc_usage_sem_reg);
    #line 150 
    return (_Bool)0;
  }
  #line 156 
  usecnt ++;
  #line 157 
  writel(usecnt,ioc->ioc_regs.ioc_usage_reg);
  #line 158 
  bfa_nw_ioc_sem_release(ioc->ioc_regs.ioc_usage_sem_reg);
  #line 159 
  return (_Bool)1;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_firmware_unlock(struct bfa_ioc *ioc)
{
  #line 165 
  u32 usecnt;
  #line 170 
  if (bfa_cb_image_get_size(ioc->asic_gen) <= 16383U) 
                                                      #line 172 
                                                      return;
  #line 177 
  bfa_nw_ioc_sem_get(ioc->ioc_regs.ioc_usage_sem_reg);
  #line 178 
  usecnt = readl(ioc->ioc_regs.ioc_usage_reg);
  #line 179 
  if ((long)(usecnt == 0U) != 0L) {
    #line 180 
    ldv_inline_asm();
    #line 181 
    ldv_inline_asm();
    #line 182 
    ldv_inline_asm();
    #line 179 
    ;
  }
  #line 181 
  usecnt --;
  #line 182 
  writel(usecnt,ioc->ioc_regs.ioc_usage_reg);
  #line 184 
  bfa_nw_ioc_sem_release(ioc->ioc_regs.ioc_usage_sem_reg);
  #line 185 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_notify_fail(struct bfa_ioc *ioc)
{
  #line 191 
  writel(1U,ioc->ioc_regs.ll_halt);
  #line 192 
  writel(1U,ioc->ioc_regs.alt_ll_halt);
  #line 194 
  readl(ioc->ioc_regs.ll_halt);
  #line 195 
  readl(ioc->ioc_regs.alt_ll_halt);
  #line 196 
  return;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static struct __anonstruct_ct_fnreg_7120 ct_fnreg[4U] = {{.hfn_mbox = 102912U, .lpu_mbox = 103040U, .hfn_pgn = 81928U}, {.hfn_mbox = 103008U, .lpu_mbox = 103136U, .hfn_pgn = 82184U}, {.hfn_mbox = 103424U, .lpu_mbox = 103552U, .hfn_pgn = 82696U}, {.hfn_mbox = 103520U, .lpu_mbox = 103648U, .hfn_pgn = 82952U}};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static struct __anonstruct_ct_p0reg_7121 ct_p0reg[4U] = {{.hfn = 102400U, .lpu = 102408U}, {.hfn = 102416U, .lpu = 102424U}, {.hfn = 102736U, .lpu = 102744U}, {.hfn = 102752U, .lpu = 102760U}};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static struct __anonstruct_ct_p1reg_7122 ct_p1reg[4U] = {{.hfn = 102404U, .lpu = 102412U}, {.hfn = 102420U, .lpu = 102428U}, {.hfn = 102740U, .lpu = 102748U}, {.hfn = 102756U, .lpu = 102764U}};
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static struct __anonstruct_ct2_reg_7123 ct2_reg[2U] = {{.hfn_mbox = 196608U, .lpu_mbox = 196672U, .hfn_pgn = 196888U, .hfn = 196736U, .lpu = 196744U, .lpu_read = 196752U}, {.hfn_mbox = 196640U, .lpu_mbox = 196704U, .hfn_pgn = 196888U, .hfn = 196740U, .lpu = 196748U, .lpu_read = 196756U}};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_reg_init(struct bfa_ioc *ioc)
{
  #line 251 
  void *rb;
  #line 252 
  int pcifn = (int)ioc->pcidev.pci_func;
  #line 254 
  rb = ioc->pcidev.pci_bar_kva;
  #line 256 
  ioc->ioc_regs.hfn_mbox = rb + (unsigned long)ct_fnreg[pcifn].hfn_mbox;
  #line 257 
  ioc->ioc_regs.lpu_mbox = rb + (unsigned long)ct_fnreg[pcifn].lpu_mbox;
  #line 258 
  ioc->ioc_regs.host_page_num_fn = rb + (unsigned long)ct_fnreg[pcifn].hfn_pgn;
  #line 260 
  if ((unsigned int)ioc->port_id == 0U) {
    #line 261 
    ioc->ioc_regs.heartbeat = rb + 82496U;
    #line 262 
    ioc->ioc_regs.ioc_fwstate = rb + 82500U;
    #line 263 
    ioc->ioc_regs.alt_ioc_fwstate = rb + 82508U;
    #line 264 
    ioc->ioc_regs.hfn_mbox_cmd = rb + (unsigned long)ct_p0reg[pcifn].hfn;
    #line 265 
    ioc->ioc_regs.lpu_mbox_cmd = rb + (unsigned long)ct_p0reg[pcifn].lpu;
    #line 266 
    ioc->ioc_regs.ll_halt = rb + 102828U;
    #line 267 
    ioc->ioc_regs.alt_ll_halt = rb + 102844U;
  }
  else {
    #line 269 
    ioc->ioc_regs.heartbeat = rb + 82504U;
    #line 270 
    ioc->ioc_regs.ioc_fwstate = rb + 82508U;
    #line 271 
    ioc->ioc_regs.alt_ioc_fwstate = rb + 82500U;
    #line 272 
    ioc->ioc_regs.hfn_mbox_cmd = rb + (unsigned long)ct_p1reg[pcifn].hfn;
    #line 273 
    ioc->ioc_regs.lpu_mbox_cmd = rb + (unsigned long)ct_p1reg[pcifn].lpu;
    #line 274 
    ioc->ioc_regs.ll_halt = rb + 102844U;
    #line 275 
    ioc->ioc_regs.alt_ll_halt = rb + 102828U;
  }
  #line 281 
  ioc->ioc_regs.pss_ctl_reg = rb + 100352U;
  #line 282 
  ioc->ioc_regs.pss_err_status_reg = rb + 100368U;
  #line 283 
  ioc->ioc_regs.app_pll_fast_ctl_reg = rb + 82436U;
  #line 284 
  ioc->ioc_regs.app_pll_slow_ctl_reg = rb + 82440U;
  #line 289 
  ioc->ioc_regs.ioc_sem_reg = rb + 82480U;
  #line 290 
  ioc->ioc_regs.ioc_usage_sem_reg = rb + 82484U;
  #line 291 
  ioc->ioc_regs.ioc_init_sem_reg = rb + 82488U;
  #line 292 
  ioc->ioc_regs.ioc_usage_reg = rb + 83488U;
  #line 293 
  ioc->ioc_regs.ioc_fail_sync = rb + 83492U;
  #line 298 
  ioc->ioc_regs.smem_page_start = rb + 32768U;
  #line 299 
  ioc->ioc_regs.smem_pg0 = 384U;
  #line 304 
  ioc->ioc_regs.err_set = rb + 100376U;
  #line 305 
  return;
}

#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_reg_init(struct bfa_ioc *ioc)
{
  #line 310 
  void *rb;
  #line 311 
  int port = (int)ioc->port_id;
  #line 313 
  rb = ioc->pcidev.pci_bar_kva;
  #line 315 
  ioc->ioc_regs.hfn_mbox = rb + (unsigned long)ct2_reg[port].hfn_mbox;
  #line 316 
  ioc->ioc_regs.lpu_mbox = rb + (unsigned long)ct2_reg[port].lpu_mbox;
  #line 317 
  ioc->ioc_regs.host_page_num_fn = rb + (unsigned long)ct2_reg[port].hfn_pgn;
  #line 318 
  ioc->ioc_regs.hfn_mbox_cmd = rb + (unsigned long)ct2_reg[port].hfn;
  #line 319 
  ioc->ioc_regs.lpu_mbox_cmd = rb + (unsigned long)ct2_reg[port].lpu;
  #line 320 
  ioc->ioc_regs.lpu_read_stat = rb + (unsigned long)ct2_reg[port].lpu_read;
  #line 322 
  if (port == 0) {
    #line 323 
    ioc->ioc_regs.heartbeat = rb + 84144U;
    #line 324 
    ioc->ioc_regs.ioc_fwstate = rb + 84148U;
    #line 325 
    ioc->ioc_regs.alt_ioc_fwstate = rb + 84156U;
    #line 326 
    ioc->ioc_regs.ll_halt = rb + 102828U;
    #line 327 
    ioc->ioc_regs.alt_ll_halt = rb + 102844U;
  }
  else {
    #line 329 
    ioc->ioc_regs.heartbeat = rb + 84152U;
    #line 330 
    ioc->ioc_regs.ioc_fwstate = rb + 84156U;
    #line 331 
    ioc->ioc_regs.alt_ioc_fwstate = rb + 84148U;
    #line 332 
    ioc->ioc_regs.ll_halt = rb + 102844U;
    #line 333 
    ioc->ioc_regs.alt_ll_halt = rb + 102828U;
  }
  #line 339 
  ioc->ioc_regs.pss_ctl_reg = rb + 100352U;
  #line 340 
  ioc->ioc_regs.pss_err_status_reg = rb + 100368U;
  #line 341 
  ioc->ioc_regs.app_pll_fast_ctl_reg = rb + 83976U;
  #line 342 
  ioc->ioc_regs.app_pll_slow_ctl_reg = rb + 83980U;
  #line 347 
  ioc->ioc_regs.ioc_sem_reg = rb + 84208U;
  #line 348 
  ioc->ioc_regs.ioc_usage_sem_reg = rb + 84212U;
  #line 349 
  ioc->ioc_regs.ioc_init_sem_reg = rb + 84216U;
  #line 350 
  ioc->ioc_regs.ioc_usage_reg = rb + 84160U;
  #line 351 
  ioc->ioc_regs.ioc_fail_sync = rb + 84164U;
  #line 356 
  ioc->ioc_regs.smem_page_start = rb + 32768U;
  #line 357 
  ioc->ioc_regs.smem_pg0 = 384U;
  #line 362 
  ioc->ioc_regs.err_set = rb + 100376U;
  #line 363 
  return;
}

#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_map_port(struct bfa_ioc *ioc)
{
  #line 372 
  u32 r32;
  #line 371 
  void *rb = ioc->pcidev.pci_bar_kva;
  #line 377 
  r32 = readl(rb + 83460U);
  #line 378 
  r32 >>= (int)ioc->pcidev.pci_func * 8;
  #line 379 
  ioc->port_id = (unsigned char)((unsigned int)((unsigned char)(r32 >> 4)) & 3U);
  #line 380 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_map_port(struct bfa_ioc *ioc)
{
  #line 387 
  u32 r32;
  #line 386 
  void *rb = ioc->pcidev.pci_bar_kva;
  #line 389 
  r32 = readl(rb + 196872U);
  #line 390 
  ioc->port_id = (unsigned char)((unsigned int)((unsigned char)(r32 >> 17)) & 3U);
  #line 391 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_isr_mode_set(struct bfa_ioc *ioc, bool msix)
{
  #line 398 
  u32 r32;
  #line 398 
  u32 mode;
  #line 397 
  void *rb = ioc->pcidev.pci_bar_kva;
  #line 400 
  r32 = readl(rb + 83460U);
  #line 402 
  mode = (r32 >> (int)ioc->pcidev.pci_func * 8) & 7U;
  #line 408 
  if (! msix && mode != 0U || (int)msix != 0 && mode == 0U) 
                                                            #line 409 
                                                            return;
  #line 411 
  if ((int)msix != 0) 
                      #line 412 
                      mode = 0U; else 
                                      #line 414 
                                      mode = 1U;
  #line 416 
  r32 = (unsigned int)(~ (7 << (int)ioc->pcidev.pci_func * 8)) & r32;
  #line 417 
  r32 = (mode << (int)ioc->pcidev.pci_func * 8) | r32;
  #line 419 
  writel(r32,rb + 83460U);
  #line 420 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static bool bfa_ioc_ct2_lpu_read_stat(struct bfa_ioc *ioc)
{
  #line 425 
  u32 r32;
  #line 427 
  r32 = readl(ioc->ioc_regs.lpu_read_stat);
  #line 428 
  if (r32 != 0U) {
    #line 429 
    writel(1U,ioc->ioc_regs.lpu_read_stat);
    #line 430 
    return (_Bool)1;
  }
  #line 433 
  return (_Bool)0;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
void bfa_nw_ioc_ct2_poweron(struct bfa_ioc *ioc)
{
  #line 448 
  u32 r32;
  #line 447 
  void *rb = ioc->pcidev.pci_bar_kva;
  #line 450 
  r32 = readl(rb + 196924U);
  #line 451 
  if ((r32 & 4192256U) != 0U) {
    #line 452 
    writel(r32 & 2047U,rb + 196920U);
    #line 454 
    return;
  }
  #line 457 
  writel((unsigned int)((int)ioc->pcidev.pci_func * 64 | 129024),rb + 196924U);
  #line 460 
  writel((unsigned int)((int)ioc->pcidev.pci_func * 64),rb + 196920U);
  #line 462 
  return;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_ownership_reset(struct bfa_ioc *ioc)
{
  #line 468 
  bfa_nw_ioc_sem_get(ioc->ioc_regs.ioc_usage_sem_reg);
  #line 469 
  writel(0U,ioc->ioc_regs.ioc_usage_reg);
  #line 470 
  bfa_nw_ioc_sem_release(ioc->ioc_regs.ioc_usage_sem_reg);
  #line 477 
  readl(ioc->ioc_regs.ioc_sem_reg);
  #line 478 
  bfa_nw_ioc_hw_sem_release(ioc);
  #line 479 
  return;
}

#line 483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static bool bfa_ioc_ct_sync_start(struct bfa_ioc *ioc)
{
  #line 485 
  u32 r32 = readl(ioc->ioc_regs.ioc_fail_sync);
  #line 486 
  u32 sync_reqd = r32 >> 16;
  #line 495 
  if ((((unsigned long)sync_reqd >> (int)ioc->pcidev.pci_func) & 1UL) != 0UL) {
    #line 496 
    writel(0U,ioc->ioc_regs.ioc_fail_sync);
    #line 497 
    writel(1U,ioc->ioc_regs.ioc_usage_reg);
    #line 498 
    writel(0U,ioc->ioc_regs.ioc_fwstate);
    #line 499 
    writel(0U,ioc->ioc_regs.alt_ioc_fwstate);
    #line 500 
    return (_Bool)1;
  }
  #line 503 
  return bfa_ioc_ct_sync_complete(ioc);
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_sync_join(struct bfa_ioc *ioc)
{
  #line 509 
  u32 r32 = readl(ioc->ioc_regs.ioc_fail_sync);
  #line 510 
  u32 sync_pos = (unsigned int)(1UL << (int)ioc->pcidev.pci_func) << 16U;
  #line 512 
  writel(r32 | sync_pos,ioc->ioc_regs.ioc_fail_sync);
  #line 513 
  return;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_sync_leave(struct bfa_ioc *ioc)
{
  #line 518 
  u32 r32 = readl(ioc->ioc_regs.ioc_fail_sync);
  #line 519 
  u32 sync_msk = ((unsigned int)(1UL << (int)ioc->pcidev.pci_func) << 16U) | (unsigned int)(1UL << (int)ioc->pcidev.pci_func);
  #line 522 
  writel(~ sync_msk & r32,ioc->ioc_regs.ioc_fail_sync);
  #line 523 
  return;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_sync_ack(struct bfa_ioc *ioc)
{
  #line 528 
  u32 r32 = readl(ioc->ioc_regs.ioc_fail_sync);
  #line 530 
  writel((unsigned int)(1UL << (int)ioc->pcidev.pci_func) | r32,ioc->ioc_regs.ioc_fail_sync);
  #line 531 
  return;
}

#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static bool bfa_ioc_ct_sync_complete(struct bfa_ioc *ioc)
{
  #line 539 
  u32 tmp_ackd;
  #line 536 
  u32 r32 = readl(ioc->ioc_regs.ioc_fail_sync);
  #line 537 
  u32 sync_reqd = r32 >> 16;
  #line 538 
  u32 sync_ackd = r32 & 65535U;
  #line 541 
  if (sync_ackd == 0U) 
                       #line 542 
                       return (_Bool)1;
  #line 550 
  tmp_ackd = sync_ackd;
  #line 551 
  if ((((unsigned long)sync_reqd >> (int)ioc->pcidev.pci_func) & 1UL) != 0UL && (((unsigned long)sync_ackd >> (int)ioc->pcidev.pci_func) & 1UL) == 0UL) 
    #line 553 
    sync_ackd = (unsigned int)(1UL << (int)ioc->pcidev.pci_func) | sync_ackd;
  #line 555 
  if (sync_reqd == sync_ackd) {
    #line 556 
    writel(r32 & 4294901760U,ioc->ioc_regs.ioc_fail_sync);
    #line 558 
    writel(8U,ioc->ioc_regs.ioc_fwstate);
    #line 559 
    writel(8U,ioc->ioc_regs.alt_ioc_fwstate);
    #line 560 
    return (_Bool)1;
  }
  #line 568 
  if (tmp_ackd != sync_ackd) 
                             #line 569 
                             writel(r32 | sync_ackd,ioc->ioc_regs.ioc_fail_sync);
  #line 571 
  return (_Bool)0;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_set_cur_ioc_fwstate(struct bfa_ioc *ioc, enum bfi_ioc_state fwstate)
{
  #line 578 
  writel((unsigned int)fwstate,ioc->ioc_regs.ioc_fwstate);
  #line 579 
  return;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static enum bfi_ioc_state bfa_ioc_ct_get_cur_ioc_fwstate(struct bfa_ioc *ioc)
{
  #line 584 
  return (enum bfi_ioc_state)readl(ioc->ioc_regs.ioc_fwstate);
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct_set_alt_ioc_fwstate(struct bfa_ioc *ioc, enum bfi_ioc_state fwstate)
{
  #line 591 
  writel((unsigned int)fwstate,ioc->ioc_regs.alt_ioc_fwstate);
  #line 592 
  return;
}

#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static enum bfi_ioc_state bfa_ioc_ct_get_alt_ioc_fwstate(struct bfa_ioc *ioc)
{
  #line 597 
  return (enum bfi_ioc_state)readl(ioc->ioc_regs.alt_ioc_fwstate);
}

#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static enum bfa_status bfa_ioc_ct_pll_init(void *rb, enum bfi_asic_mode asic_mode)
{
  #line 603 
  u32 pll_sclk;
  #line 603 
  u32 pll_fclk;
  #line 603 
  u32 r32;
  #line 604 
  bool fcmode = (_Bool)(asic_mode == (unsigned int)BFI_ASIC_MODE_FC);
  #line 606 
  pll_sclk = 29466U;
  #line 610 
  pll_fclk = 29466U;
  #line 615 
  if ((int)fcmode != 0) {
    #line 616 
    writel(0U,rb + 83468U);
    #line 617 
    writel(13U,rb + 82568U);
  }
  else {
    #line 622 
    writel(1U,rb + 83468U);
    #line 623 
    writel(2U,rb + 82568U);
  }
  #line 626 
  writel(0U,rb + 82500U);
  #line 627 
  writel(0U,rb + 82508U);
  #line 628 
  writel(4294967295U,rb + 81924U);
  #line 629 
  writel(4294967295U,rb + 82180U);
  #line 630 
  writel(4294967295U,rb + 81920U);
  #line 631 
  writel(4294967295U,rb + 82176U);
  #line 632 
  writel(4294967295U,rb + 81924U);
  #line 633 
  writel(4294967295U,rb + 82180U);
  #line 634 
  writel(pll_sclk | 65536U,rb + 82440U);
  #line 637 
  writel(pll_fclk | 65536U,rb + 82436U);
  #line 640 
  writel(pll_sclk | 65537U,rb + 82440U);
  #line 643 
  writel(pll_fclk | 65537U,rb + 82436U);
  #line 646 
  readl(rb + 81924U);
  #line 647 
  __const_udelay(8590000UL);
  #line 648 
  writel(4294967295U,rb + 81920U);
  #line 649 
  writel(4294967295U,rb + 82176U);
  #line 650 
  writel(pll_sclk | 1U,rb + 82440U);
  #line 653 
  writel(pll_fclk | 1U,rb + 82436U);
  #line 657 
  if (! fcmode) {
    #line 658 
    writel(1U,rb + 145436U);
    #line 659 
    writel(1U,rb + 146460U);
  }
  #line 661 
  r32 = readl(rb + 100352U);
  #line 662 
  r32 &= 4294966783U;
  #line 663 
  writel(r32,rb + 100352U);
  #line 664 
  __const_udelay(4295000UL);
  #line 665 
  if (! fcmode) {
    #line 666 
    writel(0U,rb + 145436U);
    #line 667 
    writel(0U,rb + 146460U);
  }
  #line 670 
  writel(4U,rb + 82464U);
  #line 671 
  __const_udelay(4295000UL);
  #line 672 
  r32 = readl(rb + 82468U);
  #line 673 
  writel(0U,rb + 82464U);
  #line 674 
  return BFA_STATUS_OK;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_sclk_init(void *rb)
{
  #line 680 
  u32 r32;
  #line 685 
  r32 = readl(rb + 83980U);
  #line 686 
  r32 &= 4294967292U;
  #line 687 
  r32 |= 65548U;
  #line 689 
  writel(r32,rb + 83980U);
  #line 695 
  r32 = readl(rb + 83980U);
  #line 696 
  r32 &= 2684354559U;
  #line 697 
  writel(r32,rb + 83980U);
  #line 702 
  r32 = readl(rb + 84132U);
  #line 703 
  writel(r32 | 16384U,rb + 84132U);
  #line 706 
  r32 = readl(rb + 83972U);
  #line 707 
  writel(r32 | 16U,rb + 83972U);
  #line 713 
  r32 = readl(rb + 83980U);
  #line 714 
  r32 &= 3758096384U;
  #line 716 
  writel(r32 | 274821915U,rb + 83980U);
  #line 721 
  __const_udelay(4295000UL);
  #line 723 
  return;
}

#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_lclk_init(void *rb)
{
  #line 732 
  u32 r32;
  #line 737 
  r32 = readl(rb + 83976U);
  #line 738 
  r32 &= 4294967292U;
  #line 739 
  r32 |= 65548U;
  #line 741 
  writel(r32,rb + 83976U);
  #line 746 
  r32 = readl(rb + 84132U);
  #line 747 
  writel(r32,rb + 84132U);
  #line 752 
  r32 = readl(rb + 83976U);
  #line 753 
  writel(r32,rb + 83976U);
  #line 758 
  r32 = readl(rb + 83976U);
  #line 759 
  r32 &= 3221225472U;
  #line 760 
  r32 |= 549548827U;
  #line 761 
  writel(r32,rb + 83976U);
  #line 766 
  __const_udelay(4295000UL);
  #line 768 
  return;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_mem_init(void *rb)
{
  #line 772 
  u32 r32;
  #line 774 
  r32 = readl(rb + 100352U);
  #line 775 
  r32 &= 4294966783U;
  #line 776 
  writel(r32,rb + 100352U);
  #line 777 
  __const_udelay(4295000UL);
  #line 779 
  writel(4U,rb + 83996U);
  #line 780 
  __const_udelay(4295000UL);
  #line 781 
  writel(0U,rb + 83996U);
  #line 782 
  return;
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_mac_reset(void *rb)
{
  #line 787 
  u32 r32;
  #line 789 
  bfa_ioc_ct2_sclk_init(rb);
  #line 790 
  bfa_ioc_ct2_lclk_init(rb);
  #line 795 
  r32 = readl(rb + 83980U);
  #line 796 
  writel(r32 & 4294901759U,rb + 83980U);
  #line 802 
  r32 = readl(rb + 83976U);
  #line 803 
  writel(r32 & 4294901759U,rb + 83976U);
  #line 807 
  writel(24U,rb + 159952U);
  #line 809 
  writel(24U,rb + 159956U);
  #line 811 
  return;
}

#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static bool bfa_ioc_ct2_nfc_halted(void *rb)
{
  #line 820 
  u32 r32;
  #line 822 
  r32 = readl(rb + 160804U);
  #line 823 
  if ((r32 & 4096U) != 0U) 
                           #line 824 
                           return (_Bool)1;
  #line 826 
  return (_Bool)0;
}

#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static void bfa_ioc_ct2_nfc_resume(void *rb)
{
  #line 832 
  u32 r32;
  #line 833 
  int i;
  #line 835 
  writel(2U,rb + 160800U);
  #line 836 
  i = 0;
  #line 836 
  while (i <= 999) {
    #line 837 
    r32 = readl(rb + 160804U);
    #line 838 
    if ((r32 & 4096U) == 0U) 
                             #line 839 
                             return;
    #line 840 
    __const_udelay(4295000UL);
    #line 836 
    i ++;
  }
  #line 843 
  ldv_inline_asm();
  #line 844 
  ldv_inline_asm();
  #line 845 
  ldv_inline_asm();
  #line 842 
  ;
  #line 845 
  return;
}

#line 846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc_ct.c"
static enum bfa_status bfa_ioc_ct2_pll_init(void *rb, enum bfi_asic_mode asic_mode)
{
  #line 848 
  u32 wgn;
  #line 848 
  u32 r32;
  #line 849 
  u32 nfc_ver;
  #line 849 
  u32 i;
  #line 851 
  wgn = readl(rb + 84368U);
  #line 853 
  nfc_ver = readl(rb + 161372U);
  #line 855 
  if (wgn == 3072U && nfc_ver > 322U) {
    #line 857 
    if ((int)bfa_ioc_ct2_nfc_halted(rb) != 0) 
                                              #line 858 
                                              bfa_ioc_ct2_nfc_resume(rb);
    #line 859 
    writel(65536U,rb + 159880U);
    #line 862 
    i = 0U;
    #line 862 
    while (i <= 999999U) {
      #line 863 
      r32 = readl(rb + 83976U);
      #line 864 
      if ((r32 & 65536U) != 0U) 
                                #line 865 
                                break;
      #line 862 
      i ++;
    }
    #line 867 
    if ((long)((r32 & 65536U) == 0U) != 0L) {
      #line 868 
      ldv_inline_asm();
      #line 869 
      ldv_inline_asm();
      #line 870 
      ldv_inline_asm();
      #line 867 
      ;
    }
    #line 869 
    i = 0U;
    #line 869 
    while (i <= 999999U) {
      #line 870 
      r32 = readl(rb + 83976U);
      #line 871 
      if ((r32 & 65536U) == 0U) 
                                #line 872 
                                break;
      #line 869 
      i ++;
    }
    #line 874 
    if ((long)((r32 & 65536U) != 0U) != 0L) {
      #line 875 
      ldv_inline_asm();
      #line 876 
      ldv_inline_asm();
      #line 877 
      ldv_inline_asm();
      #line 874 
      ;
    }
    #line 875 
    __const_udelay(4295000UL);
    #line 877 
    r32 = readl(rb + 159872U);
    #line 878 
    if ((long)((r32 & 65536U) != 0U) != 0L) {
      #line 879 
      ldv_inline_asm();
      #line 880 
      ldv_inline_asm();
      #line 881 
      ldv_inline_asm();
      #line 878 
      ;
    }
  }
  else {
    #line 880 
    writel(2U,rb + 160804U);
    #line 881 
    i = 0U;
    #line 881 
    while (i <= 999U) {
      #line 882 
      r32 = readl(rb + 160804U);
      #line 883 
      if ((r32 & 4096U) != 0U) 
                               #line 884 
                               break;
      #line 885 
      __const_udelay(4295000UL);
      #line 881 
      i ++;
    }
    #line 888 
    bfa_ioc_ct2_mac_reset(rb);
    #line 889 
    bfa_ioc_ct2_sclk_init(rb);
    #line 890 
    bfa_ioc_ct2_lclk_init(rb);
    #line 893 
    r32 = readl(rb + 83980U);
    #line 894 
    writel(r32 & 4294901759U,rb + 83980U);
    #line 896 
    r32 = readl(rb + 83976U);
    #line 897 
    writel(r32 & 4294901759U,rb + 83976U);
  }
  #line 902 
  if (wgn == 1536U) {
    #line 903 
    r32 = readl(rb + 100544U);
    #line 904 
    writel(r32 & 4294967294U,rb + 100544U);
    #line 905 
    r32 = readl(rb + 100552U);
    #line 906 
    writel(r32 | 1U,rb + 100552U);
  }
  #line 913 
  writel(1U,rb + 196760U);
  #line 914 
  writel(1U,rb + 196764U);
  #line 917 
  r32 = readl(rb + 83476U);
  #line 918 
  if ((r32 & 1U) != 0U) {
    #line 919 
    r32 = readl(rb + 196744U);
    #line 920 
    if (r32 == 1U) {
      #line 921 
      writel(1U,rb + 196744U);
      #line 922 
      readl(rb + 196744U);
    }
    #line 924 
    r32 = readl(rb + 196748U);
    #line 925 
    if (r32 == 1U) {
      #line 926 
      writel(1U,rb + 196748U);
      #line 927 
      readl(rb + 196748U);
    }
  }
  #line 931 
  bfa_ioc_ct2_mem_init(rb);
  #line 933 
  writel(0U,rb + 84148U);
  #line 934 
  writel(0U,rb + 84156U);
  #line 935 
  return BFA_STATUS_OK;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
#line 279 
bool bfa_nw_ioc_is_operational(struct bfa_ioc *ioc);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
#line 39 
static void bfa_cee_format_lldp_cfg(struct bfa_cee_lldp_cfg *lldp_cfg);
#line 17 
#line 20 
static void bfa_cee_format_cee_cfg(void *buffer);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_format_cee_cfg(void *buffer)
{
  #line 22 
  struct bfa_cee_attr *cee_cfg = (struct bfa_cee_attr *)buffer;
  #line 23 
  bfa_cee_format_lldp_cfg(& cee_cfg->lldp_remote);
  #line 24 
  return;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_stats_swap(struct bfa_cee_stats *stats)
{
  #line 30 
  int i;
  #line 29 
  u32 *buffer = (u32 *)stats;
  #line 32 
  i = 0;
  #line 32 
  while ((unsigned int)i <= 17U) {
    #line 34 
    *(buffer + (unsigned long)i) = __builtin_bswap32(*(buffer + (unsigned long)i));
    #line 32 
    i ++;
  }
  #line 35 
  return;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_format_lldp_cfg(struct bfa_cee_lldp_cfg *lldp_cfg)
{
  #line 41 
  lldp_cfg->time_to_live = __builtin_bswap16((unsigned short)((int)lldp_cfg->time_to_live));
  #line 43 
  lldp_cfg->enabled_system_cap = __builtin_bswap16((unsigned short)((int)lldp_cfg->enabled_system_cap));
  #line 45 
  return;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static u32 bfa_cee_attr_meminfo(void)
{
  #line 53 
  int __y;
  #line 53 
  __y = 256;
  #line 53 
  return (unsigned int)((((unsigned long)(__y + -1) + 832UL) / (unsigned long)__y) * (unsigned long)__y);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static u32 bfa_cee_stats_meminfo(void)
{
  #line 61 
  int __y;
  #line 61 
  __y = 256;
  #line 61 
  return (unsigned int)((((unsigned long)(__y + -1) + 72UL) / (unsigned long)__y) * (unsigned long)__y);
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_get_attr_isr(struct bfa_cee *cee, enum bfa_status status)
{
  #line 73 
  cee->get_attr_status = status;
  #line 74 
  if (status == (unsigned int)BFA_STATUS_OK) {
    #line 75 
    memcpy((void *)cee->attr,cee->attr_dma.kva,832UL);
    #line 77 
    bfa_cee_format_cee_cfg((void *)cee->attr);
  }
  #line 79 
  cee->get_attr_pending = (_Bool)0;
  #line 80 
  if (cee->cbfn.get_attr_cbfn != (void (*)(void *, enum bfa_status ))0) 
    #line 81 
    (*(cee->cbfn.get_attr_cbfn))(cee->cbfn.get_attr_cbarg,status);
  #line 82 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_get_stats_isr(struct bfa_cee *cee, enum bfa_status status)
{
  #line 93 
  cee->get_stats_status = status;
  #line 94 
  if (status == (unsigned int)BFA_STATUS_OK) {
    #line 95 
    memcpy((void *)cee->stats,cee->stats_dma.kva,72UL);
    #line 97 
    bfa_cee_stats_swap(cee->stats);
  }
  #line 99 
  cee->get_stats_pending = (_Bool)0;
  #line 100 
  if (cee->cbfn.get_stats_cbfn != (void (*)(void *, enum bfa_status ))0) 
    #line 101 
    (*(cee->cbfn.get_stats_cbfn))(cee->cbfn.get_stats_cbarg,status);
  #line 102 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_reset_stats_isr(struct bfa_cee *cee, enum bfa_status status)
{
  #line 117 
  cee->reset_stats_status = status;
  #line 118 
  cee->reset_stats_pending = (_Bool)0;
  #line 119 
  if (cee->cbfn.reset_stats_cbfn != (void (*)(void *, enum bfa_status ))0) 
    #line 120 
    (*(cee->cbfn.reset_stats_cbfn))(cee->cbfn.reset_stats_cbarg,status);
  #line 121 
  return;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
u32 bfa_nw_cee_meminfo(void)
{
  #line 128 
  return bfa_cee_attr_meminfo() + bfa_cee_stats_meminfo();
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
void bfa_nw_cee_mem_claim(struct bfa_cee *cee, u8 *dma_kva, u64 dma_pa)
{
  #line 141 
  cee->attr_dma.kva = (void *)dma_kva;
  #line 142 
  cee->attr_dma.pa = dma_pa;
  #line 143 
  cee->stats_dma.kva = (void *)(dma_kva + (unsigned long)bfa_cee_attr_meminfo());
  #line 144 
  cee->stats_dma.pa = (unsigned long long)bfa_cee_attr_meminfo() + dma_pa;
  #line 145 
  cee->attr = (struct bfa_cee_attr *)dma_kva;
  #line 146 
  cee->stats = (struct bfa_cee_stats *)(dma_kva + (unsigned long)bfa_cee_attr_meminfo());
  #line 148 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
enum bfa_status bfa_nw_cee_get_attr(struct bfa_cee *cee, struct bfa_cee_attr *attr, void (*cbfn)(void *, enum bfa_status ), void *cbarg)
{
  #line 161 
  struct bfi_cee_get_req *cmd;
  #line 163 
  if ((long)(cee == (struct bfa_cee *)0) != 0L || (long)(cee->ioc == (struct bfa_ioc *)0) != 0L) {
    #line 164 
    ldv_inline_asm();
    #line 165 
    ldv_inline_asm();
    #line 166 
    ldv_inline_asm();
    #line 163 
    ;
  }
  #line 164 
  if (! bfa_nw_ioc_is_operational(cee->ioc)) 
                                             #line 165 
                                             return BFA_STATUS_IOC_FAILURE;
  #line 167 
  if ((int)cee->get_attr_pending != 0) 
                                       #line 168 
                                       return BFA_STATUS_DEVBUSY;
  #line 170 
  cee->get_attr_pending = (_Bool)1;
  #line 171 
  cmd = (struct bfi_cee_get_req *)(& cee->get_cfg_mb.msg);
  #line 172 
  cee->attr = attr;
  #line 173 
  cee->cbfn.get_attr_cbfn = cbfn;
  #line 174 
  cee->cbfn.get_attr_cbarg = cbarg;
  #line 175 
  cmd->mh.msg_class = (unsigned char)4U;
  #line 175 
  cmd->mh.msg_id = (unsigned char)1U;
  #line 175 
  cmd->mh.mtag.h2i.fn_lpu = (cee->ioc)->port_id;
  #line 177 
  __bfa_dma_be_addr_set(& cmd->dma_addr,cee->attr_dma.pa);
  #line 178 
  bfa_nw_ioc_mbox_queue(cee->ioc,& cee->get_cfg_mb,(void (*)(void *))0,(void *)0);
  #line 180 
  return BFA_STATUS_OK;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_isr(void *cbarg, struct bfi_mbmsg *m)
{
  #line 190 
  union bfi_cee_i2h_msg_u *msg;
  #line 191 
  struct bfi_cee_get_rsp *get_rsp;
  #line 192 
  struct bfa_cee *cee = (struct bfa_cee *)cbarg;
  #line 193 
  msg = (union bfi_cee_i2h_msg_u *)m;
  #line 194 
  get_rsp = (struct bfi_cee_get_rsp *)m;
  #line 195 
  switch ((int)msg->mh.msg_id) {
    #line 196 
    case 129: 
              #line 196 
    ;
    #line 197 
    bfa_cee_get_attr_isr(cee,(enum bfa_status)get_rsp->cmd_status);
    #line 198 
    break;
    #line 199 
    case 131: 
              #line 199 
    ;
    #line 200 
    bfa_cee_get_stats_isr(cee,(enum bfa_status)get_rsp->cmd_status);
    #line 201 
    break;
    #line 202 
    case 130: 
              #line 202 
    ;
    #line 203 
    bfa_cee_reset_stats_isr(cee,(enum bfa_status)get_rsp->cmd_status);
    #line 204 
    break;
    #line 205 
    default: 
             #line 205 
    ;
    #line 207 
    ldv_inline_asm();
    #line 208 
    ldv_inline_asm();
    #line 209 
    ldv_inline_asm();
    #line 206 
    ;
  }
  #line 210 
  return;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
static void bfa_cee_notify(void *arg, enum bfa_ioc_event event)
{
  #line 219 
  struct bfa_cee *cee;
  #line 220 
  cee = (struct bfa_cee *)arg;
  #line 222 
  switch ((unsigned int)event) {
    #line 223 
    case (unsigned int)2: 
                          #line 223 
    ;
    #line 224 
    case (unsigned int)3: 
                          #line 224 
    ;
    #line 225 
    if ((int)cee->get_attr_pending != 0) {
      #line 226 
      cee->get_attr_status = BFA_STATUS_FAILED;
      #line 227 
      cee->get_attr_pending = (_Bool)0;
      #line 228 
      if (cee->cbfn.get_attr_cbfn != (void (*)(void *, enum bfa_status ))0) 
        #line 229 
        (*(cee->cbfn.get_attr_cbfn))(cee->cbfn.get_attr_cbarg,(enum bfa_status)BFA_STATUS_FAILED);
    }
    #line 234 
    if ((int)cee->get_stats_pending != 0) {
      #line 235 
      cee->get_stats_status = BFA_STATUS_FAILED;
      #line 236 
      cee->get_stats_pending = (_Bool)0;
      #line 237 
      if (cee->cbfn.get_stats_cbfn != (void (*)(void *, enum bfa_status ))0) 
        #line 238 
        (*(cee->cbfn.get_stats_cbfn))(cee->cbfn.get_stats_cbarg,(enum bfa_status)BFA_STATUS_FAILED);
    }
    #line 243 
    if ((int)cee->reset_stats_pending != 0) {
      #line 244 
      cee->reset_stats_status = BFA_STATUS_FAILED;
      #line 245 
      cee->reset_stats_pending = (_Bool)0;
      #line 246 
      if (cee->cbfn.reset_stats_cbfn != (void (*)(void *, enum bfa_status ))0) 
        #line 247 
        (*(cee->cbfn.reset_stats_cbfn))(cee->cbfn.reset_stats_cbarg,(enum bfa_status)BFA_STATUS_FAILED);
    }
    #line 252 
    break;
    #line 254 
    default: 
             #line 254 
    ;
    #line 255 
    break;
  }
  #line 257 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cee.c"
void bfa_nw_cee_attach(struct bfa_cee *cee, struct bfa_ioc *ioc, void *dev)
{
  #line 272 
  if ((long)(cee == (struct bfa_cee *)0) != 0L) {
    #line 273 
    ldv_inline_asm();
    #line 274 
    ldv_inline_asm();
    #line 275 
    ldv_inline_asm();
    #line 272 
    ;
  }
  #line 273 
  cee->dev = dev;
  #line 274 
  cee->ioc = ioc;
  #line 276 
  bfa_nw_ioc_mbox_regisr(cee->ioc,(enum bfi_mclass)BFI_MC_CEE,& bfa_cee_isr,(void *)cee);
  #line 277 
  cee->ioc_notify.cbfn = & bfa_cee_notify;
  #line 277 
  cee->ioc_notify.cbarg = (void *)cee;
  #line 278 
  bfa_nw_ioc_notify_register(cee->ioc,& cee->ioc_notify);
  #line 279 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_2(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_7840 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_2(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_2(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_2(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_7842 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_2(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_2(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_2(struct list_head *entry)
{
  #line 139 
  __list_del_entry_2(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_1(struct list_head *head)
{
  #line 269 
  union __anonunion___u_7844 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timekeeping.h"
#line 54 
time64_t ktime_get_real_seconds(void);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
static int cif_del_timer(struct timer_list *timer);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_cs.h"
__inline static int bfa_sm_to_state(struct bfa_sm_table *smt, void (*sm)(void *, int ))
{
  #line 55 
  int i = 0;
  #line 57 
  while ((smt + (unsigned long)i)->sm != (void (*)(void *, int ))0 && (smt + (unsigned long)i)->sm != sm) 
    #line 58 
    i ++;
  #line 59 
  return (smt + (unsigned long)i)->state;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.h"
__inline static void __bfa_alen_set(struct bfi_alen *alen, u32 len, u64 pa)
{
  #line 65 
  alen->al_len = __builtin_bswap32(len);
  #line 66 
  __bfa_dma_be_addr_set(& alen->al_addr,pa);
  #line 67 
  return;
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool bfa_nw_auto_recover = (_Bool)1;
#line 50 
#line 1142 
static void bfa_ioc_hw_sem_init(struct bfa_ioc *ioc);
#line 51 
#line 1182 
static void bfa_ioc_hw_sem_get(struct bfa_ioc *ioc);
#line 52 
#line 1211 
static void bfa_ioc_hw_sem_get_cancel(struct bfa_ioc *ioc);
#line 53 
#line 1829 
static void bfa_ioc_hwinit(struct bfa_ioc *ioc, bool force);
#line 54 
#line 2996 
static void bfa_ioc_poll_fwinit(struct bfa_ioc *ioc);
#line 55 
#line 1919 
static void bfa_ioc_send_enable(struct bfa_ioc *ioc);
#line 56 
#line 1933 
static void bfa_ioc_send_disable(struct bfa_ioc *ioc);
#line 57 
#line 1947 
static void bfa_ioc_send_getattr(struct bfa_ioc *ioc);
#line 58 
#line 1976 
static void bfa_ioc_hb_monitor(struct bfa_ioc *ioc);
#line 59 
#line 1984 
static void bfa_ioc_hb_stop(struct bfa_ioc *ioc);
#line 60 
#line 2084 
static void bfa_ioc_reset(struct bfa_ioc *ioc, bool force);
#line 61 
#line 2130 
static void bfa_ioc_mbox_poll(struct bfa_ioc *ioc);
#line 62 
#line 2171 
static void bfa_ioc_mbox_flush(struct bfa_ioc *ioc);
#line 63 
#line 2930 
static void bfa_ioc_recover(struct bfa_ioc *ioc);
#line 64 
#line 1080 
static void bfa_ioc_event_notify(struct bfa_ioc *ioc, enum bfa_ioc_event event);
#line 65 
#line 1089 
static void bfa_ioc_disable_comp(struct bfa_ioc *ioc);
#line 66 
#line 1268 
static void bfa_ioc_lpu_stop(struct bfa_ioc *ioc);
#line 67 
#line 2253 
static void bfa_nw_ioc_debug_save_ftrc(struct bfa_ioc *ioc);
#line 68 
#line 2285 
static void bfa_ioc_fail_notify(struct bfa_ioc *ioc);
#line 69 
#line 2297 
static void bfa_ioc_pf_enabled(struct bfa_ioc *ioc);
#line 70 
#line 2303 
static void bfa_ioc_pf_disabled(struct bfa_ioc *ioc);
#line 71 
#line 2309 
static void bfa_ioc_pf_failed(struct bfa_ioc *ioc);
#line 72 
#line 2315 
static void bfa_ioc_pf_hwfailed(struct bfa_ioc *ioc);
#line 73 
#line 2321 
static void bfa_ioc_pf_fwmismatch(struct bfa_ioc *ioc);
#line 74 
#line 2357 
static enum bfa_status bfa_ioc_boot(struct bfa_ioc *ioc, enum bfi_fwboot_type boot_type, u32 boot_env);
#line 76 
#line 2620 
static u32 bfa_ioc_smem_pgnum(struct bfa_ioc *ioc, u32 fmaddr);
#line 77 
#line 2799 
static void bfa_ioc_get_adapter_serial_num(struct bfa_ioc *ioc, char *serial_num);
#line 79 
#line 2807 
static void bfa_ioc_get_adapter_fw_ver(struct bfa_ioc *ioc, char *fw_ver);
#line 81 
#line 2813 
static void bfa_ioc_get_pci_chip_rev(struct bfa_ioc *ioc, char *chip_rev);
#line 83 
#line 2828 
static void bfa_ioc_get_adapter_optrom_ver(struct bfa_ioc *ioc, char *optrom_ver);
#line 85 
#line 2835 
static void bfa_ioc_get_adapter_manufacturer(struct bfa_ioc *ioc, char *manufacturer);
#line 87 
#line 2841 
static void bfa_ioc_get_adapter_model(struct bfa_ioc *ioc, char *model);
#line 88 
#line 2917 
static u64 bfa_ioc_get_pwwn(struct bfa_ioc *ioc);
#line 106 
#line 213 
static void bfa_ioc_sm_uninit(struct bfa_ioc *ioc, enum ioc_event event);
#line 106 
#line 207 
static void bfa_ioc_sm_uninit_entry(struct bfa_ioc *ioc);
#line 107 
#line 234 
static void bfa_ioc_sm_reset(struct bfa_ioc *ioc, enum ioc_event event);
#line 107 
#line 227 
static void bfa_ioc_sm_reset_entry(struct bfa_ioc *ioc);
#line 108 
#line 264 
static void bfa_ioc_sm_enabling(struct bfa_ioc *ioc, enum ioc_event event);
#line 108 
#line 255 
static void bfa_ioc_sm_enabling_entry(struct bfa_ioc *ioc);
#line 109 
#line 313 
static void bfa_ioc_sm_getattr(struct bfa_ioc *ioc, enum ioc_event event);
#line 109 
#line 304 
static void bfa_ioc_sm_getattr_entry(struct bfa_ioc *ioc);
#line 110 
#line 354 
static void bfa_ioc_sm_op(struct bfa_ioc *ioc, enum ioc_event event);
#line 110 
#line 346 
static void bfa_ioc_sm_op_entry(struct bfa_ioc *ioc);
#line 111 
#line 456 
static void bfa_ioc_sm_fail_retry(struct bfa_ioc *ioc, enum ioc_event event);
#line 111 
#line 450 
static void bfa_ioc_sm_fail_retry_entry(struct bfa_ioc *ioc);
#line 112 
#line 503 
static void bfa_ioc_sm_fail(struct bfa_ioc *ioc, enum ioc_event event);
#line 112 
#line 497 
static void bfa_ioc_sm_fail_entry(struct bfa_ioc *ioc);
#line 113 
#line 394 
static void bfa_ioc_sm_disabling(struct bfa_ioc *ioc, enum ioc_event event);
#line 113 
#line 387 
static void bfa_ioc_sm_disabling_entry(struct bfa_ioc *ioc);
#line 114 
#line 428 
static void bfa_ioc_sm_disabled(struct bfa_ioc *ioc, enum ioc_event event);
#line 114 
#line 422 
static void bfa_ioc_sm_disabled_entry(struct bfa_ioc *ioc);
#line 115 
#line 535 
static void bfa_ioc_sm_hwfail(struct bfa_ioc *ioc, enum ioc_event event);
#line 115 
#line 529 
static void bfa_ioc_sm_hwfail_entry(struct bfa_ioc *ioc);
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static struct bfa_sm_table ioc_sm_table[10U] = {{.sm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit), .state = 1}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_reset), .state = 2}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_enabling), .state = 12}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_getattr), .state = 5}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_op), .state = 6}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_fail_retry), .state = 7}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_fail), .state = 8}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_disabling), .state = 9}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_disabled), .state = 10}, {.sm = (void (*)(void *, int ))(& bfa_ioc_sm_hwfail), .state = 13}};
#line 133 
#line 2941 
static void bfa_iocpf_enable(struct bfa_ioc *ioc);
#line 134 
#line 2947 
static void bfa_iocpf_disable(struct bfa_ioc *ioc);
#line 135 
#line 2953 
static void bfa_iocpf_fail(struct bfa_ioc *ioc);
#line 136 
#line 2959 
static void bfa_iocpf_initfail(struct bfa_ioc *ioc);
#line 137 
#line 2965 
static void bfa_iocpf_getattrfail(struct bfa_ioc *ioc);
#line 138 
#line 2971 
static void bfa_iocpf_stop(struct bfa_ioc *ioc);
#line 169 
#line 568 
static void bfa_iocpf_sm_reset(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 169 
#line 560 
static void bfa_iocpf_sm_reset_entry(struct bfa_iocpf *iocpf);
#line 170 
#line 593 
static void bfa_iocpf_sm_fwcheck(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 170 
#line 585 
static void bfa_iocpf_sm_fwcheck_entry(struct bfa_iocpf *iocpf);
#line 171 
#line 651 
static void bfa_iocpf_sm_mismatch(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 171 
#line 638 
static void bfa_iocpf_sm_mismatch_entry(struct bfa_iocpf *iocpf);
#line 172 
#line 685 
static void bfa_iocpf_sm_semwait(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 172 
#line 678 
static void bfa_iocpf_sm_semwait_entry(struct bfa_iocpf *iocpf);
#line 173 
#line 727 
static void bfa_iocpf_sm_hwinit(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 173 
#line 717 
static void bfa_iocpf_sm_hwinit_entry(struct bfa_iocpf *iocpf);
#line 174 
#line 770 
static void bfa_iocpf_sm_enabling(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 174 
#line 755 
static void bfa_iocpf_sm_enabling_entry(struct bfa_iocpf *iocpf);
#line 175 
#line 810 
static void bfa_iocpf_sm_ready(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 175 
#line 804 
static void bfa_iocpf_sm_ready_entry(struct bfa_iocpf *iocpf);
#line 176 
#line 936 
static void bfa_iocpf_sm_initfail_sync(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 176 
#line 928 
static void bfa_iocpf_sm_initfail_sync_entry(struct bfa_iocpf *iocpf);
#line 178 
#line 980 
static void bfa_iocpf_sm_initfail(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 178 
#line 974 
static void bfa_iocpf_sm_initfail_entry(struct bfa_iocpf *iocpf);
#line 179 
#line 1016 
static void bfa_iocpf_sm_fail_sync(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 179 
#line 1000 
static void bfa_iocpf_sm_fail_sync_entry(struct bfa_iocpf *iocpf);
#line 180 
#line 1064 
static void bfa_iocpf_sm_fail(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 180 
#line 1058 
static void bfa_iocpf_sm_fail_entry(struct bfa_iocpf *iocpf);
#line 181 
#line 840 
static void bfa_iocpf_sm_disabling(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 181 
#line 831 
static void bfa_iocpf_sm_disabling_entry(struct bfa_iocpf *iocpf);
#line 182 
#line 875 
static void bfa_iocpf_sm_disabling_sync(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 182 
#line 868 
static void bfa_iocpf_sm_disabling_sync_entry(struct bfa_iocpf *iocpf);
#line 184 
#line 908 
static void bfa_iocpf_sm_disabled(struct bfa_iocpf *iocpf, enum iocpf_event event);
#line 184 
#line 901 
static void bfa_iocpf_sm_disabled_entry(struct bfa_iocpf *iocpf);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static struct bfa_sm_table iocpf_sm_table[14U] = {{.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset), .state = 1}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_fwcheck), .state = 9}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_mismatch), .state = 9}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_semwait), .state = 2}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_hwinit), .state = 3}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_enabling), .state = 3}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_ready), .state = 4}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_initfail_sync), .state = 5}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_initfail), .state = 5}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail_sync), .state = 6}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail), .state = 6}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling), .state = 7}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling_sync), .state = 7}, {.sm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabled), .state = 8}};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_uninit_entry(struct bfa_ioc *ioc)
{
  #line 209 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_uninit(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 215 
  switch ((unsigned int)event) {
    #line 216 
    case (unsigned int)1: 
                          #line 216 
    ;
    #line 217 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_reset);
    #line 217 
    bfa_ioc_sm_reset_entry(ioc);
    #line 218 
    break;
    #line 220 
    default: 
             #line 220 
    ;
    #line 221 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",221,(unsigned int)event);
  }
  #line 223 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_reset_entry(struct bfa_ioc *ioc)
{
  #line 229 
  ioc->iocpf.fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
  #line 229 
  bfa_iocpf_sm_reset_entry(& ioc->iocpf);
  #line 231 
  return;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_reset(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 236 
  switch ((unsigned int)event) {
    #line 237 
    case (unsigned int)2: 
                          #line 237 
    ;
    #line 238 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_enabling);
    #line 238 
    bfa_ioc_sm_enabling_entry(ioc);
    #line 239 
    break;
    #line 241 
    case (unsigned int)3: 
                          #line 241 
    ;
    #line 242 
    bfa_ioc_disable_comp(ioc);
    #line 243 
    break;
    #line 245 
    case (unsigned int)4: 
                          #line 245 
    ;
    #line 246 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
    #line 246 
    bfa_ioc_sm_uninit_entry(ioc);
    #line 247 
    break;
    #line 249 
    default: 
             #line 249 
    ;
    #line 250 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",250,(unsigned int)event);
  }
  #line 252 
  return;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_enabling_entry(struct bfa_ioc *ioc)
{
  #line 257 
  bfa_iocpf_enable(ioc);
  #line 258 
  return;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_enabling(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 266 
  switch ((unsigned int)event) {
    #line 267 
    case (unsigned int)5: 
                          #line 267 
    ;
    #line 268 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_getattr);
    #line 268 
    bfa_ioc_sm_getattr_entry(ioc);
    #line 269 
    break;
    #line 271 
    case (unsigned int)8: 
                          #line 271 
    ;
    #line 273 
    case (unsigned int)10: 
                           #line 273 
    ;
    #line 274 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 275 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_fail);
    #line 275 
    bfa_ioc_sm_fail_entry(ioc);
    #line 276 
    if (event != (unsigned int)IOC_E_PFFAILED) 
                                               #line 277 
                                               bfa_iocpf_initfail(ioc);
    #line 278 
    break;
    #line 280 
    case (unsigned int)12: 
                           #line 280 
    ;
    #line 281 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 282 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_hwfail);
    #line 282 
    bfa_ioc_sm_hwfail_entry(ioc);
    #line 283 
    break;
    #line 285 
    case (unsigned int)3: 
                          #line 285 
    ;
    #line 286 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_disabling);
    #line 286 
    bfa_ioc_sm_disabling_entry(ioc);
    #line 287 
    break;
    #line 289 
    case (unsigned int)4: 
                          #line 289 
    ;
    #line 290 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
    #line 290 
    bfa_ioc_sm_uninit_entry(ioc);
    #line 291 
    bfa_iocpf_stop(ioc);
    #line 292 
    break;
    #line 294 
    case (unsigned int)2: 
                          #line 294 
    ;
    #line 295 
    break;
    #line 297 
    default: 
             #line 297 
    ;
    #line 298 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",298,(unsigned int)event);
  }
  #line 300 
  return;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_getattr_entry(struct bfa_ioc *ioc)
{
  #line 306 
  ;
  #line 306 
  ;
  #line 306 
  cif_mod_timer_0(& ioc->ioc_timer,msecs_to_jiffies(3000U) + jiffies);
  #line 308 
  bfa_ioc_send_getattr(ioc);
  #line 309 
  return;
}

#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_getattr(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 315 
  switch ((unsigned int)event) {
    #line 316 
    case (unsigned int)6: 
                          #line 316 
    ;
    #line 317 
    cif_del_timer(& ioc->ioc_timer);
    #line 318 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_op);
    #line 318 
    bfa_ioc_sm_op_entry(ioc);
    #line 319 
    break;
    #line 321 
    case (unsigned int)8: 
                          #line 321 
    ;
    #line 322 
    case (unsigned int)10: 
                           #line 322 
    ;
    #line 323 
    cif_del_timer(& ioc->ioc_timer);
    #line 325 
    case (unsigned int)11: 
                           #line 325 
    ;
    #line 326 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 327 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_fail);
    #line 327 
    bfa_ioc_sm_fail_entry(ioc);
    #line 328 
    if (event != (unsigned int)IOC_E_PFFAILED) 
                                               #line 329 
                                               bfa_iocpf_getattrfail(ioc);
    #line 330 
    break;
    #line 332 
    case (unsigned int)3: 
                          #line 332 
    ;
    #line 333 
    cif_del_timer(& ioc->ioc_timer);
    #line 334 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_disabling);
    #line 334 
    bfa_ioc_sm_disabling_entry(ioc);
    #line 335 
    break;
    #line 337 
    case (unsigned int)2: 
                          #line 337 
    ;
    #line 338 
    break;
    #line 340 
    default: 
             #line 340 
    ;
    #line 341 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",341,(unsigned int)event);
  }
  #line 343 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_op_entry(struct bfa_ioc *ioc)
{
  #line 348 
  (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_OK);
  #line 349 
  bfa_ioc_event_notify(ioc,(enum bfa_ioc_event)BFA_IOC_E_ENABLED);
  #line 350 
  bfa_ioc_hb_monitor(ioc);
  #line 351 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_op(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 356 
  switch ((unsigned int)event) {
    #line 357 
    case (unsigned int)2: 
                          #line 357 
    ;
    #line 358 
    break;
    #line 360 
    case (unsigned int)3: 
                          #line 360 
    ;
    #line 361 
    bfa_ioc_hb_stop(ioc);
    #line 362 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_disabling);
    #line 362 
    bfa_ioc_sm_disabling_entry(ioc);
    #line 363 
    break;
    #line 365 
    case (unsigned int)8: 
                          #line 365 
    ;
    #line 366 
    case (unsigned int)10: 
                           #line 366 
    ;
    #line 367 
    bfa_ioc_hb_stop(ioc);
    #line 369 
    case (unsigned int)9: 
                          #line 369 
    ;
    #line 370 
    if ((int)ioc->iocpf.auto_recover != 0) {
      #line 371 
      ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_fail_retry);
      #line 371 
      bfa_ioc_sm_fail_retry_entry(ioc);
    }
    else {
      #line 373 
      ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_fail);
      #line 373 
      bfa_ioc_sm_fail_entry(ioc);
    }
    #line 375 
    bfa_ioc_fail_notify(ioc);
    #line 377 
    if (event != (unsigned int)IOC_E_PFFAILED) 
                                               #line 378 
                                               bfa_iocpf_fail(ioc);
    #line 379 
    break;
    #line 381 
    default: 
             #line 381 
    ;
    #line 382 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",382,(unsigned int)event);
  }
  #line 384 
  return;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_disabling_entry(struct bfa_ioc *ioc)
{
  #line 389 
  bfa_iocpf_disable(ioc);
  #line 390 
  return;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_disabling(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 396 
  switch ((unsigned int)event) {
    #line 397 
    case (unsigned int)7: 
                          #line 397 
    ;
    #line 398 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_disabled);
    #line 398 
    bfa_ioc_sm_disabled_entry(ioc);
    #line 399 
    break;
    #line 401 
    case (unsigned int)10: 
                           #line 401 
    ;
    #line 407 
    bfa_iocpf_fail(ioc);
    #line 408 
    break;
    #line 410 
    case (unsigned int)12: 
                           #line 410 
    ;
    #line 411 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_hwfail);
    #line 411 
    bfa_ioc_sm_hwfail_entry(ioc);
    #line 412 
    bfa_ioc_disable_comp(ioc);
    #line 413 
    break;
    #line 415 
    default: 
             #line 415 
    ;
    #line 416 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",416,(unsigned int)event);
  }
  #line 418 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_disabled_entry(struct bfa_ioc *ioc)
{
  #line 424 
  bfa_ioc_disable_comp(ioc);
  #line 425 
  return;
}

#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_disabled(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 430 
  switch ((unsigned int)event) {
    #line 431 
    case (unsigned int)2: 
                          #line 431 
    ;
    #line 432 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_enabling);
    #line 432 
    bfa_ioc_sm_enabling_entry(ioc);
    #line 433 
    break;
    #line 435 
    case (unsigned int)3: 
                          #line 435 
    ;
    #line 436 
    (*((ioc->cbfn)->disable_cbfn))((void *)ioc->bfa);
    #line 437 
    break;
    #line 439 
    case (unsigned int)4: 
                          #line 439 
    ;
    #line 440 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
    #line 440 
    bfa_ioc_sm_uninit_entry(ioc);
    #line 441 
    bfa_iocpf_stop(ioc);
    #line 442 
    break;
    #line 444 
    default: 
             #line 444 
    ;
    #line 445 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",445,(unsigned int)event);
  }
  #line 447 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_fail_retry_entry(struct bfa_ioc *ioc)
{
  #line 452 
  return;
}

#line 456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_fail_retry(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 458 
  switch ((unsigned int)event) {
    #line 459 
    case (unsigned int)5: 
                          #line 459 
    ;
    #line 460 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_getattr);
    #line 460 
    bfa_ioc_sm_getattr_entry(ioc);
    #line 461 
    break;
    #line 463 
    case (unsigned int)8: 
                          #line 463 
    ;
    #line 464 
    case (unsigned int)10: 
                           #line 464 
    ;
    #line 468 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 469 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_fail);
    #line 469 
    bfa_ioc_sm_fail_entry(ioc);
    #line 470 
    if (event != (unsigned int)IOC_E_PFFAILED) 
                                               #line 471 
                                               bfa_iocpf_initfail(ioc);
    #line 472 
    break;
    #line 474 
    case (unsigned int)12: 
                           #line 474 
    ;
    #line 475 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 476 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_hwfail);
    #line 476 
    bfa_ioc_sm_hwfail_entry(ioc);
    #line 477 
    break;
    #line 479 
    case (unsigned int)2: 
                          #line 479 
    ;
    #line 480 
    break;
    #line 482 
    case (unsigned int)3: 
                          #line 482 
    ;
    #line 483 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_disabling);
    #line 483 
    bfa_ioc_sm_disabling_entry(ioc);
    #line 484 
    break;
    #line 486 
    case (unsigned int)4: 
                          #line 486 
    ;
    #line 487 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
    #line 487 
    bfa_ioc_sm_uninit_entry(ioc);
    #line 488 
    bfa_iocpf_stop(ioc);
    #line 489 
    break;
    #line 491 
    default: 
             #line 491 
    ;
    #line 492 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",492,(unsigned int)event);
  }
  #line 494 
  return;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_fail_entry(struct bfa_ioc *ioc)
{
  #line 499 
  return;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_fail(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 505 
  switch ((unsigned int)event) {
    #line 506 
    case (unsigned int)2: 
                          #line 506 
    ;
    #line 507 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 508 
    break;
    #line 510 
    case (unsigned int)3: 
                          #line 510 
    ;
    #line 511 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_disabling);
    #line 511 
    bfa_ioc_sm_disabling_entry(ioc);
    #line 512 
    break;
    #line 514 
    case (unsigned int)4: 
                          #line 514 
    ;
    #line 515 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
    #line 515 
    bfa_ioc_sm_uninit_entry(ioc);
    #line 516 
    bfa_iocpf_stop(ioc);
    #line 517 
    break;
    #line 519 
    case (unsigned int)10: 
                           #line 519 
    ;
    #line 521 
    break;
    #line 523 
    default: 
             #line 523 
    ;
    #line 524 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",524,(unsigned int)event);
  }
  #line 526 
  return;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_hwfail_entry(struct bfa_ioc *ioc)
{
  #line 531 
  return;
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_sm_hwfail(struct bfa_ioc *ioc, enum ioc_event event)
{
  #line 537 
  switch ((unsigned int)event) {
    #line 539 
    case (unsigned int)2: 
                          #line 539 
    ;
    #line 540 
    (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
    #line 541 
    break;
    #line 543 
    case (unsigned int)3: 
                          #line 543 
    ;
    #line 544 
    (*((ioc->cbfn)->disable_cbfn))((void *)ioc->bfa);
    #line 545 
    break;
    #line 547 
    case (unsigned int)4: 
                          #line 547 
    ;
    #line 548 
    ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
    #line 548 
    bfa_ioc_sm_uninit_entry(ioc);
    #line 549 
    break;
    #line 551 
    default: 
             #line 551 
    ;
    #line 552 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",552,(unsigned int)event);
  }
  #line 554 
  return;
}

#line 560  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_reset_entry(struct bfa_iocpf *iocpf)
{
  #line 562 
  iocpf->fw_mismatch_notified = (_Bool)0;
  #line 563 
  iocpf->auto_recover = bfa_nw_auto_recover;
  #line 564 
  return;
}

#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_reset(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 570 
  switch ((unsigned int)event) {
    #line 571 
    case (unsigned int)1: 
                          #line 571 
    ;
    #line 572 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fwcheck);
    #line 572 
    bfa_iocpf_sm_fwcheck_entry(iocpf);
    #line 573 
    break;
    #line 575 
    case (unsigned int)3: 
                          #line 575 
    ;
    #line 576 
    break;
    #line 578 
    default: 
             #line 578 
    ;
    #line 579 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",579,(unsigned int)event);
  }
  #line 581 
  return;
}

#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_fwcheck_entry(struct bfa_iocpf *iocpf)
{
  #line 587 
  bfa_ioc_hw_sem_init(iocpf->ioc);
  #line 588 
  bfa_ioc_hw_sem_get(iocpf->ioc);
  #line 589 
  return;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_fwcheck(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 595 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 597 
  switch ((unsigned int)event) {
    #line 598 
    case (unsigned int)10: 
                           #line 598 
    ;
    #line 599 
    if ((int)(*((ioc->ioc_hwif)->ioc_firmware_lock))(ioc) != 0) {
      #line 600 
      if ((int)(*((ioc->ioc_hwif)->ioc_sync_start))(ioc) != 0) {
        #line 601 
        (*((ioc->ioc_hwif)->ioc_sync_join))(ioc);
        #line 602 
        iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_hwinit);
        #line 602 
        bfa_iocpf_sm_hwinit_entry(iocpf);
      }
      else {
        #line 604 
        (*((ioc->ioc_hwif)->ioc_firmware_unlock))(ioc);
        #line 605 
        bfa_nw_ioc_hw_sem_release(ioc);
        #line 606 
        ;
        #line 606 
        ;
        #line 606 
        cif_mod_timer_0(& ioc->sem_timer,msecs_to_jiffies(500U) + jiffies);
      }
    }
    else {
      #line 610 
      bfa_nw_ioc_hw_sem_release(ioc);
      #line 611 
      iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_mismatch);
      #line 611 
      bfa_iocpf_sm_mismatch_entry(iocpf);
    }
    #line 613 
    break;
    #line 615 
    case (unsigned int)12: 
                           #line 615 
    ;
    #line 616 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail);
    #line 616 
    bfa_iocpf_sm_fail_entry(iocpf);
    #line 617 
    bfa_ioc_pf_hwfailed(ioc);
    #line 618 
    break;
    #line 620 
    case (unsigned int)2: 
                          #line 620 
    ;
    #line 621 
    bfa_ioc_hw_sem_get_cancel(ioc);
    #line 622 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 622 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 623 
    bfa_ioc_pf_disabled(ioc);
    #line 624 
    break;
    #line 626 
    case (unsigned int)3: 
                          #line 626 
    ;
    #line 627 
    bfa_ioc_hw_sem_get_cancel(ioc);
    #line 628 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 628 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 629 
    break;
    #line 631 
    default: 
             #line 631 
    ;
    #line 632 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",632,(unsigned int)event);
  }
  #line 634 
  return;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_mismatch_entry(struct bfa_iocpf *iocpf)
{
  #line 641 
  if (! iocpf->fw_mismatch_notified) 
                                     #line 642 
                                     bfa_ioc_pf_fwmismatch(iocpf->ioc);
  #line 644 
  iocpf->fw_mismatch_notified = (_Bool)1;
  #line 645 
  ;
  #line 645 
  ;
  #line 645 
  cif_mod_timer_0(& (iocpf->ioc)->iocpf_timer,msecs_to_jiffies(3000U) + jiffies);
  #line 646 
  return;
}

#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_mismatch(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 653 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 655 
  switch ((unsigned int)event) {
    #line 656 
    case (unsigned int)11: 
                           #line 656 
    ;
    #line 657 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fwcheck);
    #line 657 
    bfa_iocpf_sm_fwcheck_entry(iocpf);
    #line 658 
    break;
    #line 660 
    case (unsigned int)2: 
                          #line 660 
    ;
    #line 661 
    cif_del_timer(& ioc->iocpf_timer);
    #line 662 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 662 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 663 
    bfa_ioc_pf_disabled(ioc);
    #line 664 
    break;
    #line 666 
    case (unsigned int)3: 
                          #line 666 
    ;
    #line 667 
    cif_del_timer(& ioc->iocpf_timer);
    #line 668 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 668 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 669 
    break;
    #line 671 
    default: 
             #line 671 
    ;
    #line 672 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",672,(unsigned int)event);
  }
  #line 674 
  return;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_semwait_entry(struct bfa_iocpf *iocpf)
{
  #line 680 
  bfa_ioc_hw_sem_get(iocpf->ioc);
  #line 681 
  return;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_semwait(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 687 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 689 
  switch ((unsigned int)event) {
    #line 690 
    case (unsigned int)10: 
                           #line 690 
    ;
    #line 691 
    if ((int)(*((ioc->ioc_hwif)->ioc_sync_complete))(ioc) != 0) {
      #line 692 
      (*((ioc->ioc_hwif)->ioc_sync_join))(ioc);
      #line 693 
      iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_hwinit);
      #line 693 
      bfa_iocpf_sm_hwinit_entry(iocpf);
    }
    else {
      #line 695 
      bfa_nw_ioc_hw_sem_release(ioc);
      #line 696 
      ;
      #line 696 
      ;
      #line 696 
      cif_mod_timer_0(& ioc->sem_timer,msecs_to_jiffies(500U) + jiffies);
    }
    #line 699 
    break;
    #line 701 
    case (unsigned int)12: 
                           #line 701 
    ;
    #line 702 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail);
    #line 702 
    bfa_iocpf_sm_fail_entry(iocpf);
    #line 703 
    bfa_ioc_pf_hwfailed(ioc);
    #line 704 
    break;
    #line 706 
    case (unsigned int)2: 
                          #line 706 
    ;
    #line 707 
    bfa_ioc_hw_sem_get_cancel(ioc);
    #line 708 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling_sync);
    #line 708 
    bfa_iocpf_sm_disabling_sync_entry(iocpf);
    #line 709 
    break;
    #line 711 
    default: 
             #line 711 
    ;
    #line 712 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",712,(unsigned int)event);
  }
  #line 714 
  return;
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_hwinit_entry(struct bfa_iocpf *iocpf)
{
  #line 719 
  iocpf->poll_time = 0U;
  #line 720 
  bfa_ioc_reset(iocpf->ioc,(_Bool)0);
  #line 721 
  return;
}

#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_hwinit(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 729 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 731 
  switch ((unsigned int)event) {
    #line 732 
    case (unsigned int)4: 
                          #line 732 
    ;
    #line 733 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_enabling);
    #line 733 
    bfa_iocpf_sm_enabling_entry(iocpf);
    #line 734 
    break;
    #line 736 
    case (unsigned int)11: 
                           #line 736 
    ;
    #line 737 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 738 
    bfa_ioc_pf_failed(ioc);
    #line 739 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_initfail_sync);
    #line 739 
    bfa_iocpf_sm_initfail_sync_entry(iocpf);
    #line 740 
    break;
    #line 742 
    case (unsigned int)2: 
                          #line 742 
    ;
    #line 743 
    cif_del_timer(& ioc->iocpf_timer);
    #line 744 
    (*((ioc->ioc_hwif)->ioc_sync_leave))(ioc);
    #line 745 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 746 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabled);
    #line 746 
    bfa_iocpf_sm_disabled_entry(iocpf);
    #line 747 
    break;
    #line 749 
    default: 
             #line 749 
    ;
    #line 750 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",750,(unsigned int)event);
  }
  #line 752 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_enabling_entry(struct bfa_iocpf *iocpf)
{
  #line 757 
  ;
  #line 757 
  ;
  #line 757 
  cif_mod_timer_0(& (iocpf->ioc)->iocpf_timer,msecs_to_jiffies(3000U) + jiffies);
  #line 762 
  (*(((iocpf->ioc)->cbfn)->reset_cbfn))((void *)(iocpf->ioc)->bfa);
  #line 763 
  bfa_ioc_send_enable(iocpf->ioc);
  #line 764 
  return;
}

#line 770  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_enabling(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 772 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 774 
  switch ((unsigned int)event) {
    #line 775 
    case (unsigned int)5: 
                          #line 775 
    ;
    #line 776 
    cif_del_timer(& ioc->iocpf_timer);
    #line 777 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 778 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_ready);
    #line 778 
    bfa_iocpf_sm_ready_entry(iocpf);
    #line 779 
    break;
    #line 781 
    case (unsigned int)8: 
                          #line 781 
    ;
    #line 782 
    cif_del_timer(& ioc->iocpf_timer);
    #line 785 
    case (unsigned int)11: 
                           #line 785 
    ;
    #line 786 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 787 
    if (event == (unsigned int)IOCPF_E_TIMEOUT) 
                                                #line 788 
                                                bfa_ioc_pf_failed(ioc);
    #line 789 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_initfail_sync);
    #line 789 
    bfa_iocpf_sm_initfail_sync_entry(iocpf);
    #line 790 
    break;
    #line 792 
    case (unsigned int)2: 
                          #line 792 
    ;
    #line 793 
    cif_del_timer(& ioc->iocpf_timer);
    #line 794 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 795 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling);
    #line 795 
    bfa_iocpf_sm_disabling_entry(iocpf);
    #line 796 
    break;
    #line 798 
    default: 
             #line 798 
    ;
    #line 799 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",799,(unsigned int)event);
  }
  #line 801 
  return;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_ready_entry(struct bfa_iocpf *iocpf)
{
  #line 806 
  bfa_ioc_pf_enabled(iocpf->ioc);
  #line 807 
  return;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_ready(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 812 
  switch ((unsigned int)event) {
    #line 813 
    case (unsigned int)2: 
                          #line 813 
    ;
    #line 814 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling);
    #line 814 
    bfa_iocpf_sm_disabling_entry(iocpf);
    #line 815 
    break;
    #line 817 
    case (unsigned int)9: 
                          #line 817 
    ;
    #line 818 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_initfail_sync);
    #line 818 
    bfa_iocpf_sm_initfail_sync_entry(iocpf);
    #line 819 
    break;
    #line 821 
    case (unsigned int)7: 
                          #line 821 
    ;
    #line 822 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail_sync);
    #line 822 
    bfa_iocpf_sm_fail_sync_entry(iocpf);
    #line 823 
    break;
    #line 825 
    default: 
             #line 825 
    ;
    #line 826 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",826,(unsigned int)event);
  }
  #line 828 
  return;
}

#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_disabling_entry(struct bfa_iocpf *iocpf)
{
  #line 833 
  ;
  #line 833 
  ;
  #line 833 
  cif_mod_timer_0(& (iocpf->ioc)->iocpf_timer,msecs_to_jiffies(3000U) + jiffies);
  #line 835 
  bfa_ioc_send_disable(iocpf->ioc);
  #line 836 
  return;
}

#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_disabling(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 842 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 844 
  switch ((unsigned int)event) {
    #line 845 
    case (unsigned int)6: 
                          #line 845 
    ;
    #line 846 
    cif_del_timer(& ioc->iocpf_timer);
    #line 847 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling_sync);
    #line 847 
    bfa_iocpf_sm_disabling_sync_entry(iocpf);
    #line 848 
    break;
    #line 850 
    case (unsigned int)7: 
                          #line 850 
    ;
    #line 851 
    cif_del_timer(& ioc->iocpf_timer);
    #line 854 
    case (unsigned int)11: 
                           #line 854 
    ;
    #line 855 
    (*((ioc->ioc_hwif)->ioc_set_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_FAIL);
    #line 856 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling_sync);
    #line 856 
    bfa_iocpf_sm_disabling_sync_entry(iocpf);
    #line 857 
    break;
    #line 859 
    case (unsigned int)5: 
                          #line 859 
    ;
    #line 860 
    break;
    #line 862 
    default: 
             #line 862 
    ;
    #line 863 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",863,(unsigned int)event);
  }
  #line 865 
  return;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_disabling_sync_entry(struct bfa_iocpf *iocpf)
{
  #line 870 
  bfa_ioc_hw_sem_get(iocpf->ioc);
  #line 871 
  return;
}

#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_disabling_sync(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 877 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 879 
  switch ((unsigned int)event) {
    #line 880 
    case (unsigned int)10: 
                           #line 880 
    ;
    #line 881 
    (*((ioc->ioc_hwif)->ioc_sync_leave))(ioc);
    #line 882 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 883 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabled);
    #line 883 
    bfa_iocpf_sm_disabled_entry(iocpf);
    #line 884 
    break;
    #line 886 
    case (unsigned int)12: 
                           #line 886 
    ;
    #line 887 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail);
    #line 887 
    bfa_iocpf_sm_fail_entry(iocpf);
    #line 888 
    bfa_ioc_pf_hwfailed(ioc);
    #line 889 
    break;
    #line 891 
    case (unsigned int)7: 
                          #line 891 
    ;
    #line 892 
    break;
    #line 894 
    default: 
             #line 894 
    ;
    #line 895 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",895,(unsigned int)event);
  }
  #line 897 
  return;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_disabled_entry(struct bfa_iocpf *iocpf)
{
  #line 903 
  bfa_ioc_mbox_flush(iocpf->ioc);
  #line 904 
  bfa_ioc_pf_disabled(iocpf->ioc);
  #line 905 
  return;
}

#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_disabled(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 910 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 912 
  switch ((unsigned int)event) {
    #line 913 
    case (unsigned int)1: 
                          #line 913 
    ;
    #line 914 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_semwait);
    #line 914 
    bfa_iocpf_sm_semwait_entry(iocpf);
    #line 915 
    break;
    #line 917 
    case (unsigned int)3: 
                          #line 917 
    ;
    #line 918 
    (*((ioc->ioc_hwif)->ioc_firmware_unlock))(ioc);
    #line 919 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 919 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 920 
    break;
    #line 922 
    default: 
             #line 922 
    ;
    #line 923 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",923,(unsigned int)event);
  }
  #line 925 
  return;
}

#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_initfail_sync_entry(struct bfa_iocpf *iocpf)
{
  #line 930 
  bfa_nw_ioc_debug_save_ftrc(iocpf->ioc);
  #line 931 
  bfa_ioc_hw_sem_get(iocpf->ioc);
  #line 932 
  return;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_initfail_sync(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 938 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 940 
  switch ((unsigned int)event) {
    #line 941 
    case (unsigned int)10: 
                           #line 941 
    ;
    #line 942 
    (*((ioc->ioc_hwif)->ioc_notify_fail))(ioc);
    #line 943 
    (*((ioc->ioc_hwif)->ioc_sync_leave))(ioc);
    #line 944 
    (*((ioc->ioc_hwif)->ioc_set_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_FAIL);
    #line 945 
    bfa_nw_ioc_hw_sem_release(ioc);
    #line 946 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_initfail);
    #line 946 
    bfa_iocpf_sm_initfail_entry(iocpf);
    #line 947 
    break;
    #line 949 
    case (unsigned int)12: 
                           #line 949 
    ;
    #line 950 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail);
    #line 950 
    bfa_iocpf_sm_fail_entry(iocpf);
    #line 951 
    bfa_ioc_pf_hwfailed(ioc);
    #line 952 
    break;
    #line 954 
    case (unsigned int)2: 
                          #line 954 
    ;
    #line 955 
    bfa_ioc_hw_sem_get_cancel(ioc);
    #line 956 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling_sync);
    #line 956 
    bfa_iocpf_sm_disabling_sync_entry(iocpf);
    #line 957 
    break;
    #line 959 
    case (unsigned int)3: 
                          #line 959 
    ;
    #line 960 
    bfa_ioc_hw_sem_get_cancel(ioc);
    #line 961 
    (*((ioc->ioc_hwif)->ioc_firmware_unlock))(ioc);
    #line 962 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 962 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 963 
    break;
    #line 965 
    case (unsigned int)7: 
                          #line 965 
    ;
    #line 966 
    break;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",969,(unsigned int)event);
  }
  #line 971 
  return;
}

#line 974  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_initfail_entry(struct bfa_iocpf *iocpf)
{
  #line 976 
  return;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_initfail(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 982 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 984 
  switch ((unsigned int)event) {
    #line 985 
    case (unsigned int)2: 
                          #line 985 
    ;
    #line 986 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabled);
    #line 986 
    bfa_iocpf_sm_disabled_entry(iocpf);
    #line 987 
    break;
    #line 989 
    case (unsigned int)3: 
                          #line 989 
    ;
    #line 990 
    (*((ioc->ioc_hwif)->ioc_firmware_unlock))(ioc);
    #line 991 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_reset);
    #line 991 
    bfa_iocpf_sm_reset_entry(iocpf);
    #line 992 
    break;
    #line 994 
    default: 
             #line 994 
    ;
    #line 995 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",995,(unsigned int)event);
  }
  #line 997 
  return;
}

#line 1000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_fail_sync_entry(struct bfa_iocpf *iocpf)
{
  #line 1005 
  bfa_ioc_lpu_stop(iocpf->ioc);
  #line 1010 
  bfa_ioc_mbox_flush(iocpf->ioc);
  #line 1011 
  bfa_ioc_hw_sem_get(iocpf->ioc);
  #line 1012 
  return;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_fail_sync(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 1018 
  struct bfa_ioc *ioc = iocpf->ioc;
  #line 1020 
  switch ((unsigned int)event) {
    #line 1021 
    case (unsigned int)10: 
                           #line 1021 
    ;
    #line 1022 
    (*((ioc->ioc_hwif)->ioc_sync_ack))(ioc);
    #line 1023 
    (*((ioc->ioc_hwif)->ioc_notify_fail))(ioc);
    #line 1024 
    if (! iocpf->auto_recover) {
      #line 1025 
      (*((ioc->ioc_hwif)->ioc_sync_leave))(ioc);
      #line 1026 
      (*((ioc->ioc_hwif)->ioc_set_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_FAIL);
      #line 1027 
      bfa_nw_ioc_hw_sem_release(ioc);
      #line 1028 
      iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail);
      #line 1028 
      bfa_iocpf_sm_fail_entry(iocpf);
    }
    else {
      #line 1030 
      if ((int)(*((ioc->ioc_hwif)->ioc_sync_complete))(ioc) != 0) {
        #line 1031 
        iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_hwinit);
        #line 1031 
        bfa_iocpf_sm_hwinit_entry(iocpf);
      }
      else {
        #line 1033 
        bfa_nw_ioc_hw_sem_release(ioc);
        #line 1034 
        iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_semwait);
        #line 1034 
        bfa_iocpf_sm_semwait_entry(iocpf);
      }
    }
    #line 1037 
    break;
    #line 1039 
    case (unsigned int)12: 
                           #line 1039 
    ;
    #line 1040 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_fail);
    #line 1040 
    bfa_iocpf_sm_fail_entry(iocpf);
    #line 1041 
    bfa_ioc_pf_hwfailed(ioc);
    #line 1042 
    break;
    #line 1044 
    case (unsigned int)2: 
                          #line 1044 
    ;
    #line 1045 
    bfa_ioc_hw_sem_get_cancel(ioc);
    #line 1046 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabling_sync);
    #line 1046 
    bfa_iocpf_sm_disabling_sync_entry(iocpf);
    #line 1047 
    break;
    #line 1049 
    case (unsigned int)7: 
                          #line 1049 
    ;
    #line 1050 
    break;
    #line 1052 
    default: 
             #line 1052 
    ;
    #line 1053 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",1053,(unsigned int)event);
  }
  #line 1055 
  return;
}

#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_fail_entry(struct bfa_iocpf *iocpf)
{
  #line 1060 
  return;
}

#line 1064  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_sm_fail(struct bfa_iocpf *iocpf, enum iocpf_event event)
{
  #line 1066 
  switch ((unsigned int)event) {
    #line 1067 
    case (unsigned int)2: 
                          #line 1067 
    ;
    #line 1068 
    iocpf->fsm = (void (*)(void *, int ))(& bfa_iocpf_sm_disabled);
    #line 1068 
    bfa_iocpf_sm_disabled_entry(iocpf);
    #line 1069 
    break;
    #line 1071 
    default: 
             #line 1071 
    ;
    #line 1072 
    printk((char *)"\001",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c",1072,(unsigned int)event);
  }
  #line 1074 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_event_notify(struct bfa_ioc *ioc, enum bfa_ioc_event event)
{
  #line 1084 
  void *__mptr;
  #line 1082 
  struct bfa_ioc_notify *notify;
  #line 1084 
  __mptr = (void *)ioc->notify_q.next;
  #line 1084 
  notify = ((struct bfa_ioc_notify *)__mptr);
  #line 1084 
  while (& notify->qe != & ioc->notify_q) {
    #line 1084 
    void *__mptr_0;
    #line 1085 
    (*(notify->cbfn))(notify->cbarg,event);
    #line 1084 
    __mptr_0 = (void *)notify->qe.next;
    #line 1084 
    notify = ((struct bfa_ioc_notify *)__mptr_0);
  }
  #line 1086 
  return;
}

#line 1089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_disable_comp(struct bfa_ioc *ioc)
{
  #line 1091 
  (*((ioc->cbfn)->disable_cbfn))((void *)ioc->bfa);
  #line 1092 
  bfa_ioc_event_notify(ioc,(enum bfa_ioc_event)BFA_IOC_E_DISABLED);
  #line 1093 
  return;
}

#line 1096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
bool bfa_nw_ioc_sem_get(void *sem_reg)
{
  #line 1098 
  u32 r32;
  #line 1099 
  int cnt = 0;
  #line 1102 
  r32 = readl(sem_reg);
  #line 1104 
  while ((r32 & 1U) != 0U && cnt <= 2999) {
    #line 1105 
    cnt ++;
    #line 1106 
    __const_udelay(8590UL);
    #line 1107 
    r32 = readl(sem_reg);
  }
  #line 1110 
  if ((r32 & 1U) == 0U) 
                        #line 1111 
                        return (_Bool)1;
  #line 1113 
  return (_Bool)0;
}

#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_sem_release(void *sem_reg)
{
  #line 1119 
  readl(sem_reg);
  #line 1120 
  writel(1U,sem_reg);
  #line 1121 
  return;
}

#line 1125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_fwver_clear(struct bfa_ioc *ioc)
{
  #line 1127 
  u32 pgnum;
  #line 1127 
  u32 pgoff;
  #line 1128 
  int i;
  #line 1127 
  u32 loff = 0U;
  #line 1130 
  pgnum = ioc->ioc_regs.smem_pg0 + (loff >> 15);
  #line 1131 
  pgoff = loff & 32767U;
  #line 1132 
  writel(pgnum,ioc->ioc_regs.host_page_num_fn);
  #line 1134 
  i = 0;
  #line 1134 
  while ((unsigned int)i <= 11U) {
    #line 1135 
    writel(0U,ioc->ioc_regs.smem_page_start + (unsigned long)loff);
    #line 1136 
    loff += 4U;
    #line 1134 
    i ++;
  }
  #line 1138 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_hw_sem_init(struct bfa_ioc *ioc)
{
  #line 1144 
  struct bfi_ioc_image_hdr fwhdr;
  #line 1145 
  u32 fwstate;
  #line 1145 
  u32 r32;
  #line 1148 
  r32 = readl(ioc->ioc_regs.ioc_init_sem_reg);
  #line 1149 
  while ((r32 & 1U) != 0U) {
    #line 1150 
    __const_udelay(85900UL);
    #line 1151 
    r32 = readl(ioc->ioc_regs.ioc_init_sem_reg);
  }
  #line 1154 
  fwstate = (unsigned int)(*((ioc->ioc_hwif)->ioc_get_fwstate))(ioc);
  #line 1155 
  if (fwstate == 0U) {
    #line 1156 
    writel(1U,ioc->ioc_regs.ioc_init_sem_reg);
    #line 1157 
    return;
  }
  #line 1160 
  bfa_nw_ioc_fwver_get(ioc,& fwhdr);
  #line 1162 
  if (__builtin_bswap32(fwhdr.exec) == 0U) {
    #line 1163 
    writel(1U,ioc->ioc_regs.ioc_init_sem_reg);
    #line 1164 
    return;
  }
  #line 1167 
  bfa_ioc_fwver_clear(ioc);
  #line 1168 
  (*((ioc->ioc_hwif)->ioc_set_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_UNINIT);
  #line 1169 
  (*((ioc->ioc_hwif)->ioc_set_alt_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_UNINIT);
  #line 1174 
  readl(ioc->ioc_regs.ioc_sem_reg);
  #line 1175 
  writel(1U,ioc->ioc_regs.ioc_sem_reg);
  #line 1178 
  writel(1U,ioc->ioc_regs.ioc_init_sem_reg);
  #line 1179 
  return;
}

#line 1182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_hw_sem_get(struct bfa_ioc *ioc)
{
  #line 1184 
  u32 r32;
  #line 1190 
  r32 = readl(ioc->ioc_regs.ioc_sem_reg);
  #line 1191 
  if (r32 == 4294967295U) {
    #line 1192 
    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),12);
    #line 1193 
    return;
  }
  #line 1195 
  if ((r32 & 1U) == 0U) {
    #line 1196 
    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),10);
    #line 1197 
    return;
  }
  #line 1200 
  ;
  #line 1200 
  ;
  #line 1200 
  cif_mod_timer_0(& ioc->sem_timer,msecs_to_jiffies(500U) + jiffies);
  #line 1201 
  return;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_hw_sem_release(struct bfa_ioc *ioc)
{
  #line 1207 
  writel(1U,ioc->ioc_regs.ioc_sem_reg);
  #line 1208 
  return;
}

#line 1211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_hw_sem_get_cancel(struct bfa_ioc *ioc)
{
  #line 1213 
  cif_del_timer(& ioc->sem_timer);
  #line 1214 
  return;
}

#line 1218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_lmem_init(struct bfa_ioc *ioc)
{
  #line 1220 
  u32 pss_ctl;
  #line 1221 
  int i;
  #line 1224 
  pss_ctl = readl(ioc->ioc_regs.pss_ctl_reg);
  #line 1225 
  pss_ctl &= 4294966783U;
  #line 1226 
  pss_ctl |= 256U;
  #line 1231 
  pss_ctl |= 196608U;
  #line 1232 
  writel(pss_ctl,ioc->ioc_regs.pss_ctl_reg);
  #line 1237 
  i = 0;
  #line 1238 
  while (1) {
    #line 1239 
    pss_ctl = readl(ioc->ioc_regs.pss_ctl_reg);
    #line 1240 
    i ++;
    #line 1241 
    if (! ((pss_ctl & 4096U) == 0U && i <= 9999)) 
                                                  #line 1238 
                                                  break;
  }
  #line 1247 
  if ((long)((pss_ctl & 4096U) == 0U) != 0L) {
    #line 1248 
    ldv_inline_asm();
    #line 1249 
    ldv_inline_asm();
    #line 1250 
    ldv_inline_asm();
    #line 1247 
    ;
  }
  #line 1249 
  pss_ctl &= 4294962943U;
  #line 1250 
  writel(pss_ctl,ioc->ioc_regs.pss_ctl_reg);
  #line 1251 
  return;
}

#line 1254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_lpu_start(struct bfa_ioc *ioc)
{
  #line 1256 
  u32 pss_ctl;
  #line 1261 
  pss_ctl = readl(ioc->ioc_regs.pss_ctl_reg);
  #line 1262 
  pss_ctl &= 4294967294U;
  #line 1264 
  writel(pss_ctl,ioc->ioc_regs.pss_ctl_reg);
  #line 1265 
  return;
}

#line 1268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_lpu_stop(struct bfa_ioc *ioc)
{
  #line 1270 
  u32 pss_ctl;
  #line 1275 
  pss_ctl = readl(ioc->ioc_regs.pss_ctl_reg);
  #line 1276 
  pss_ctl |= 3U;
  #line 1278 
  writel(pss_ctl,ioc->ioc_regs.pss_ctl_reg);
  #line 1279 
  return;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_fwver_get(struct bfa_ioc *ioc, struct bfi_ioc_image_hdr *fwhdr)
{
  #line 1285 
  u32 pgnum;
  #line 1287 
  int i;
  #line 1286 
  u32 loff = 0U;
  #line 1288 
  u32 *fwsig = (u32 *)fwhdr;
  #line 1290 
  pgnum = bfa_ioc_smem_pgnum(ioc,loff);
  #line 1291 
  writel(pgnum,ioc->ioc_regs.host_page_num_fn);
  #line 1293 
  i = 0;
  #line 1293 
  while ((unsigned int)i <= 11U) {
    {
      #line 1295 
      *(fwsig + (unsigned long)i) = __builtin_bswap32(readl(ioc->ioc_regs.smem_page_start + (unsigned long)loff));
      #line 1297 
      loff += 4U;
    }
    #line 1293 
    i ++;
  }
  #line 1299 
  return;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool bfa_ioc_fwver_md5_check(struct bfi_ioc_image_hdr *fwhdr_1, struct bfi_ioc_image_hdr *fwhdr_2)
{
  #line 1305 
  int i;
  #line 1307 
  i = 0;
  #line 1307 
  while (i <= 3) {
    #line 1308 
    if (fwhdr_1->md5sum[i] != fwhdr_2->md5sum[i]) 
                                                  #line 1309 
                                                  return (_Bool)0;
    #line 1307 
    i ++;
  }
  #line 1312 
  return (_Bool)1;
}

#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool bfa_ioc_fw_ver_compatible(struct bfi_ioc_image_hdr *drv_fwhdr, struct bfi_ioc_image_hdr *fwhdr_to_cmp)
{
  #line 1322 
  if (drv_fwhdr->signature != fwhdr_to_cmp->signature) 
                                                       #line 1323 
                                                       return (_Bool)0;
  #line 1324 
  if ((int)drv_fwhdr->fwver.major != (int)fwhdr_to_cmp->fwver.major) 
    #line 1325 
    return (_Bool)0;
  #line 1326 
  if ((int)drv_fwhdr->fwver.minor != (int)fwhdr_to_cmp->fwver.minor) 
    #line 1327 
    return (_Bool)0;
  #line 1328 
  if ((int)drv_fwhdr->fwver.maint != (int)fwhdr_to_cmp->fwver.maint) 
    #line 1329 
    return (_Bool)0;
  #line 1330 
  if (((int)drv_fwhdr->fwver.patch == (int)fwhdr_to_cmp->fwver.patch && (int)drv_fwhdr->fwver.phase == (int)fwhdr_to_cmp->fwver.phase) && (int)drv_fwhdr->fwver.build == (int)fwhdr_to_cmp->fwver.build) {
    #line 1333 
    return bfa_ioc_fwver_md5_check(drv_fwhdr,fwhdr_to_cmp);
  }
  #line 1335 
  return (_Bool)1;
}

#line 1339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool bfa_ioc_flash_fwver_valid(struct bfi_ioc_image_hdr *flash_fwhdr)
{
  #line 1341 
  if ((unsigned int)flash_fwhdr->fwver.major + 255U > 253U) 
                                                            #line 1342 
                                                            return (_Bool)0;
  #line 1344 
  return (_Bool)1;
}

#line 1348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool fwhdr_is_ga(struct bfi_ioc_image_hdr *fwhdr)
{
  #line 1350 
  if ((unsigned int)fwhdr->fwver.phase == 0U && (unsigned int)fwhdr->fwver.build == 0U) 
    #line 1352 
    return (_Bool)0;
  #line 1354 
  return (_Bool)1;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfi_ioc_img_ver_cmp bfa_ioc_fw_ver_patch_cmp(struct bfi_ioc_image_hdr *base_fwhdr, struct bfi_ioc_image_hdr *fwhdr_to_cmp)
{
  #line 1362 
  if (! bfa_ioc_fw_ver_compatible(base_fwhdr,fwhdr_to_cmp)) 
                                                            #line 1363 
                                                            return BFI_IOC_IMG_VER_INCOMP;
  #line 1365 
  if ((int)fwhdr_to_cmp->fwver.patch > (int)base_fwhdr->fwver.patch) 
    #line 1366 
    return BFI_IOC_IMG_VER_BETTER;
  else 
    #line 1367 
    if ((int)fwhdr_to_cmp->fwver.patch < (int)base_fwhdr->fwver.patch) 
      #line 1368 
      return BFI_IOC_IMG_VER_OLD;
  #line 1373 
  if ((int)fwhdr_is_ga(base_fwhdr) != 0) {
    #line 1374 
    if ((int)fwhdr_is_ga(fwhdr_to_cmp) != 0) 
                                             #line 1375 
                                             return BFI_IOC_IMG_VER_SAME; else 
                                                                    #line 1377 
                                                                    return BFI_IOC_IMG_VER_OLD;
  }
  else {
    #line 1379 
    if ((int)fwhdr_is_ga(fwhdr_to_cmp) != 0) 
                                             #line 1380 
                                             return BFI_IOC_IMG_VER_BETTER;
  }
  #line 1382 
  if ((int)fwhdr_to_cmp->fwver.phase > (int)base_fwhdr->fwver.phase) 
    #line 1383 
    return BFI_IOC_IMG_VER_BETTER;
  else 
    #line 1384 
    if ((int)fwhdr_to_cmp->fwver.phase < (int)base_fwhdr->fwver.phase) 
      #line 1385 
      return BFI_IOC_IMG_VER_OLD;
  #line 1387 
  if ((int)fwhdr_to_cmp->fwver.build > (int)base_fwhdr->fwver.build) 
    #line 1388 
    return BFI_IOC_IMG_VER_BETTER;
  else 
    #line 1389 
    if ((int)fwhdr_to_cmp->fwver.build < (int)base_fwhdr->fwver.build) 
      #line 1390 
      return BFI_IOC_IMG_VER_OLD;
  #line 1395 
  return BFI_IOC_IMG_VER_SAME;
}

#line 1497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_set_cmd(void *pci_bar, u8 wr_cnt, u8 rd_cnt, u8 ad_cnt, u8 op)
{
  #line 1500 
  union bfa_flash_cmd_reg cmd;
  #line 1502 
  cmd.i = 0U;
  #line 1503 
  cmd.r.act = (unsigned int)1U;
  #line 1504 
  cmd.r.write_cnt = (unsigned int)wr_cnt;
  #line 1505 
  cmd.r.read_cnt = (unsigned int)rd_cnt;
  #line 1506 
  cmd.r.addr_cnt = (unsigned int)ad_cnt;
  #line 1507 
  cmd.r.cmd = (unsigned int)op;
  #line 1508 
  writel(cmd.i,pci_bar + 118784U);
  #line 1509 
  return;
}

#line 1512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_set_addr(void *pci_bar, u32 address)
{
  #line 1514 
  union bfa_flash_addr_reg addr;
  #line 1516 
  addr.r.addr = (unsigned int)address;
  #line 1517 
  addr.r.dummy = (unsigned int)0U;
  #line 1518 
  writel(addr.i,pci_bar + 118788U);
  #line 1519 
  return;
}

#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static int bfa_flash_cmd_act_check(void *pci_bar)
{
  #line 1524 
  union bfa_flash_cmd_reg cmd;
  #line 1526 
  cmd.i = readl(pci_bar + 118784U);
  #line 1528 
  if ((unsigned int)cmd.r.act != 0U) 
                                     #line 1529 
                                     return -5;
  #line 1531 
  return 0;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static int bfa_flash_fifo_flush(void *pci_bar)
{
  #line 1538 
  u32 i;
  #line 1539 
  u32 t;
  #line 1540 
  union bfa_flash_dev_status_reg dev_status;
  #line 1542 
  dev_status.i = readl(pci_bar + 118804U);
  #line 1544 
  if ((unsigned int)dev_status.r.fifo_cnt == 0U) 
                                                 #line 1545 
                                                 return 0;
  #line 1548 
  i = 0U;
  #line 1548 
  while ((unsigned int)dev_status.r.fifo_cnt > i) {
    #line 1549 
    t = readl(pci_bar + 118800U);
    #line 1548 
    i ++;
  }
  #line 1552 
  i = 0U;
  #line 1552 
  while (i <= 9999U) {
    #line 1553 
    dev_status.i = readl(pci_bar + 118804U);
    #line 1554 
    if ((unsigned int)dev_status.r.fifo_cnt == 0U) 
                                                   #line 1555 
                                                   break;
    #line 1552 
    i ++;
  }
  #line 1558 
  if ((unsigned int)dev_status.r.fifo_cnt != 0U) 
                                                 #line 1559 
                                                 return -6;
  #line 1561 
  return 0;
}

#line 1566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static int bfa_flash_status_read(void *pci_bar)
{
  #line 1568 
  union bfa_flash_dev_status_reg dev_status;
  #line 1569 
  int status;
  #line 1570 
  u32 ret_status;
  #line 1571 
  int i;
  #line 1573 
  status = bfa_flash_fifo_flush(pci_bar);
  #line 1574 
  if (status < 0) 
                  #line 1575 
                  return status;
  #line 1577 
  bfa_flash_set_cmd(pci_bar,(unsigned char)0,(unsigned char)4,(unsigned char)0,(unsigned char)5);
  #line 1579 
  i = 0;
  #line 1579 
  while (i <= 9999) {
    #line 1580 
    status = bfa_flash_cmd_act_check(pci_bar);
    #line 1581 
    if (status == 0) 
                     #line 1582 
                     break;
    #line 1579 
    i ++;
  }
  #line 1585 
  if (status != 0) 
                   #line 1586 
                   return status;
  #line 1588 
  dev_status.i = readl(pci_bar + 118804U);
  #line 1589 
  if ((unsigned int)dev_status.r.fifo_cnt == 0U) 
                                                 #line 1590 
                                                 return -4;
  #line 1592 
  ret_status = readl(pci_bar + 118800U);
  #line 1593 
  ret_status >>= 24;
  #line 1595 
  status = bfa_flash_fifo_flush(pci_bar);
  #line 1596 
  if (status < 0) 
                  #line 1597 
                  return status;
  #line 1599 
  return (int)ret_status;
}

#line 1604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static int bfa_flash_read_start(void *pci_bar, u32 offset, u32 len, char *buf)
{
  #line 1607 
  int status;
  #line 1610 
  if (len + 4294967295U > 127U || (len & 3U) != 0U) 
                                                    #line 1611 
                                                    return -9;
  #line 1614 
  status = bfa_flash_status_read(pci_bar);
  #line 1615 
  if (status == -4) 
                    #line 1616 
                    status = bfa_flash_status_read(pci_bar);
  #line 1618 
  if (status < 0) 
                  #line 1619 
                  return status;
  #line 1622 
  if ((status & 1) != 0) 
                         #line 1623 
                         return -7;
  #line 1625 
  bfa_flash_set_addr(pci_bar,offset);
  #line 1627 
  bfa_flash_set_cmd(pci_bar,(unsigned char)0,(unsigned char)((int)((unsigned char)len)),(unsigned char)4,(unsigned char)11);
  #line 1629 
  return 0;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static u32 bfa_flash_read_check(void *pci_bar)
{
  #line 1636 
  if (bfa_flash_cmd_act_check(pci_bar) != 0) 
                                             #line 1637 
                                             return 1U;
  #line 1639 
  return 0U;
}

#line 1644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_read_end(void *pci_bar, u32 len, char *buf)
{
  #line 1646 
  u32 i;
  #line 1649 
  i = 0U;
  #line 1649 
  while (i < len) {
    {
      #line 1650 
      u32 w = readl(pci_bar + 118800U);
      #line 1651 
      *((u32 *)(buf + (unsigned long)i)) = __builtin_bswap32(w);
    }
    #line 1649 
    i += 4U;
  }
  #line 1654 
  bfa_flash_fifo_flush(pci_bar);
  #line 1655 
  return;
}

#line 1663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static int bfa_raw_sem_get(void *bar)
{
  #line 1665 
  int locked;
  #line 1667 
  locked = (int)readl(bar + 100384U);
  #line 1669 
  return locked == 0;
}

#line 1673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_status bfa_flash_sem_get(void *bar)
{
  #line 1675 
  u32 n = 500U;
  #line 1677 
  while (1) {
    #line 1677 
    if (! (bfa_raw_sem_get(bar) == 0)) 
                                       #line 1677 
                                       break;
    #line 1678 
    n --;
    #line 1678 
    if (n == 0U) 
                 #line 1679 
                 return BFA_STATUS_BADFLASH;
    {
      #line 1680 
      unsigned long __ms = 10UL;
      #line 1680 
      while (1) {
        #line 1680 
        unsigned long tmp;
        #line 1680 
        tmp = __ms;
        #line 1680 
        __ms --;
        #line 1680 
        ;
        #line 1680 
        if (! (tmp != 0UL)) 
                            #line 1680 
                            break;
        #line 1680 
        __const_udelay(4295000UL);
      }
    }
  }
  #line 1682 
  return BFA_STATUS_OK;
}

#line 1686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_sem_put(void *bar)
{
  #line 1688 
  writel(0U,bar + 100384U);
  #line 1689 
  return;
}

#line 1692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_status bfa_flash_raw_read(void *pci_bar, u32 offset, char *buf, u32 len)
{
  #line 1695 
  u32 n;
  #line 1696 
  int status;
  #line 1697 
  u32 off;
  #line 1697 
  u32 l;
  #line 1697 
  u32 s;
  #line 1697 
  u32 residue;
  #line 1697 
  u32 fifo_sz;
  #line 1699 
  residue = len;
  #line 1700 
  off = 0U;
  #line 1701 
  fifo_sz = 128U;
  #line 1702 
  status = (int)bfa_flash_sem_get(pci_bar);
  #line 1703 
  if (status != 0) 
                   #line 1704 
                   return (enum bfa_status)status;
  #line 1706 
  while (residue != 0U) {
    #line 1707 
    s = offset + off;
    #line 1708 
    n = s / fifo_sz;
    #line 1709 
    l = (n + 1U) * fifo_sz - s;
    #line 1710 
    if (l > residue) 
                     #line 1711 
                     l = residue;
    #line 1713 
    status = bfa_flash_read_start(pci_bar,offset + off,l,buf + (unsigned long)off);
    #line 1715 
    if (status < 0) {
      #line 1716 
      bfa_flash_sem_put(pci_bar);
      #line 1717 
      return BFA_STATUS_FAILED;
    }
    #line 1720 
    n = 1000000U;
    #line 1721 
    while (1) {
      #line 1721 
      if (! (bfa_flash_read_check(pci_bar) != 0U)) 
                                                   #line 1721 
                                                   break;
      #line 1722 
      n --;
      #line 1722 
      if (n == 0U) {
        #line 1723 
        bfa_flash_sem_put(pci_bar);
        #line 1724 
        return BFA_STATUS_FAILED;
      }
    }
    #line 1728 
    bfa_flash_read_end(pci_bar,l,buf + (unsigned long)off);
    #line 1730 
    residue -= l;
    #line 1731 
    off += l;
  }
  #line 1733 
  bfa_flash_sem_put(pci_bar);
  #line 1735 
  return BFA_STATUS_OK;
}

#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_status bfa_nw_ioc_flash_img_get_chnk(struct bfa_ioc *ioc, u32 off, u32 *fwimg)
{
  #line 1744 
  return bfa_flash_raw_read(ioc->pcidev.pci_bar_kva,(off + 262144U) * 4U,
                         (char *)fwimg,256U);
}

#line 1750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfi_ioc_img_ver_cmp bfa_ioc_flash_fwver_cmp(struct bfa_ioc *ioc, struct bfi_ioc_image_hdr *base_fwhdr)
{
  #line 1753 
  struct bfi_ioc_image_hdr *flash_fwhdr;
  #line 1754 
  enum bfa_status status;
  #line 1755 
  u32 fwimg[64U];
  #line 1757 
  status = bfa_nw_ioc_flash_img_get_chnk(ioc,0U,(u32 *)(& fwimg));
  #line 1758 
  if (status != (unsigned int)BFA_STATUS_OK) 
                                             #line 1759 
                                             return BFI_IOC_IMG_VER_INCOMP;
  #line 1761 
  flash_fwhdr = (struct bfi_ioc_image_hdr *)(& fwimg);
  #line 1762 
  if ((int)bfa_ioc_flash_fwver_valid(flash_fwhdr) != 0) {
    #line 1763 
    return bfa_ioc_fw_ver_patch_cmp(base_fwhdr,flash_fwhdr);
  }
  else 
       #line 1765 
       return BFI_IOC_IMG_VER_INCOMP;
}

#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
bool bfa_nw_ioc_fwver_cmp(struct bfa_ioc *ioc, struct bfi_ioc_image_hdr *fwhdr)
{
  #line 1774 
  struct bfi_ioc_image_hdr *drv_fwhdr;
  #line 1775 
  enum bfi_ioc_img_ver_cmp smem_flash_cmp;
  #line 1775 
  enum bfi_ioc_img_ver_cmp drv_smem_cmp;
  #line 1777 
  drv_fwhdr = (struct bfi_ioc_image_hdr *)bfa_cb_image_get_chunk(ioc->asic_gen,0U);
  #line 1781 
  drv_smem_cmp = bfa_ioc_fw_ver_patch_cmp(drv_fwhdr,fwhdr);
  #line 1782 
  if (drv_smem_cmp <= (unsigned int)BFI_IOC_IMG_VER_OLD) 
                                                         #line 1784 
                                                         return (_Bool)0;
  #line 1791 
  smem_flash_cmp = bfa_ioc_flash_fwver_cmp(ioc,fwhdr);
  #line 1793 
  if (smem_flash_cmp == (unsigned int)BFI_IOC_IMG_VER_BETTER) 
                                                              #line 1794 
                                                              return (_Bool)0;
  else 
    #line 1795 
    if (smem_flash_cmp == (unsigned int)BFI_IOC_IMG_VER_SAME) 
                                                              #line 1796 
                                                              return (_Bool)1; else 
                                                                    #line 1799 
                                                                    return (_Bool)(drv_smem_cmp == (unsigned int)BFI_IOC_IMG_VER_SAME);
}

#line 1806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool bfa_ioc_fwver_valid(struct bfa_ioc *ioc, u32 boot_env)
{
  #line 1808 
  struct bfi_ioc_image_hdr fwhdr;
  #line 1810 
  bfa_nw_ioc_fwver_get(ioc,& fwhdr);
  #line 1811 
  ;
  #line 1811 
  if (__builtin_bswap32(fwhdr.bootenv) != boot_env) 
                                                    #line 1812 
                                                    return (_Bool)0;
  #line 1814 
  return bfa_nw_ioc_fwver_cmp(ioc,& fwhdr);
}

#line 1819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_msgflush(struct bfa_ioc *ioc)
{
  #line 1821 
  u32 r32;
  #line 1823 
  r32 = readl(ioc->ioc_regs.lpu_mbox_cmd);
  #line 1824 
  if (r32 != 0U) 
                 #line 1825 
                 writel(1U,ioc->ioc_regs.lpu_mbox_cmd);
  #line 1826 
  return;
}

#line 1829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_hwinit(struct bfa_ioc *ioc, bool force)
{
  #line 1831 
  enum bfi_ioc_state ioc_fwstate;
  #line 1832 
  bool fwvalid;
  #line 1833 
  u32 boot_env;
  #line 1845 
  int tmp_0;
  #line 1835 
  ioc_fwstate = (*((ioc->ioc_hwif)->ioc_get_fwstate))(ioc);
  #line 1837 
  if ((int)force != 0) 
                       #line 1838 
                       ioc_fwstate = BFI_IOC_UNINIT;
  #line 1840 
  boot_env = 0U;
  #line 1845 
  if (ioc_fwstate != (unsigned int)BFI_IOC_UNINIT) {
    #line 1846 
    if ((int)bfa_ioc_fwver_valid(ioc,boot_env) != 0) 
                                                     #line 1845 
                                                     tmp_0 = 1; else 
                                                                  #line 1845 
                                                                  tmp_0 = 0;
  }
  else 
       #line 1845 
       tmp_0 = 0;
  #line 1845 
  fwvalid = (_Bool)(tmp_0 != 0);
  #line 1848 
  if (! fwvalid) {
    #line 1849 
    if (bfa_ioc_boot(ioc,(enum bfi_fwboot_type)BFI_FWBOOT_TYPE_NORMAL,
                     boot_env) == (unsigned int)BFA_STATUS_OK) 
      #line 1851 
      bfa_ioc_poll_fwinit(ioc);
    #line 1853 
    return;
  }
  #line 1860 
  if (ioc_fwstate == (unsigned int)BFI_IOC_INITING) {
    #line 1861 
    bfa_ioc_poll_fwinit(ioc);
    #line 1862 
    return;
  }
  #line 1869 
  if (ioc_fwstate == (unsigned int)BFI_IOC_DISABLED || ioc_fwstate == (unsigned int)BFI_IOC_OP) {
    #line 1874 
    bfa_ioc_msgflush(ioc);
    #line 1875 
    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),4);
    #line 1876 
    return;
  }
  #line 1882 
  if (bfa_ioc_boot(ioc,(enum bfi_fwboot_type)BFI_FWBOOT_TYPE_NORMAL,
                     boot_env) == (unsigned int)BFA_STATUS_OK) 
    #line 1884 
    bfa_ioc_poll_fwinit(ioc);
  #line 1885 
  return;
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_timeout(struct bfa_ioc *ioc)
{
  #line 1890 
  (*(ioc->fsm))((void *)ioc,11);
  #line 1891 
  return;
}

#line 1894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_mbox_send(struct bfa_ioc *ioc, void *ioc_msg, int len)
{
  #line 1897 
  u32 i;
  #line 1896 
  u32 *msgp = (u32 *)ioc_msg;
  #line 1899 
  if ((long)(len > 32) != 0L) {
    #line 1900 
    ldv_inline_asm();
    #line 1901 
    ldv_inline_asm();
    #line 1902 
    ldv_inline_asm();
    #line 1899 
    ;
  }
  #line 1904 
  i = 0U;
  #line 1904 
  while ((unsigned long)i < (unsigned long)len / 4UL) {
    #line 1905 
    writel(*(msgp + (unsigned long)i),ioc->ioc_regs.hfn_mbox + (unsigned long)i * 4UL);
    #line 1904 
    i ++;
  }
  #line 1908 
  while (i <= 7U) {
    #line 1909 
    writel(0U,ioc->ioc_regs.hfn_mbox + (unsigned long)i * 4UL);
    #line 1908 
    i ++;
  }
  #line 1914 
  writel(1U,ioc->ioc_regs.hfn_mbox_cmd);
  #line 1915 
  readl(ioc->ioc_regs.hfn_mbox_cmd);
  #line 1916 
  return;
}

#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_send_enable(struct bfa_ioc *ioc)
{
  #line 1921 
  struct bfi_ioc_ctrl_req enable_req;
  #line 1923 
  enable_req.mh.msg_class = (unsigned char)1U;
  #line 1923 
  enable_req.mh.msg_id = (unsigned char)1U;
  #line 1923 
  enable_req.mh.mtag.h2i.fn_lpu = ioc->port_id;
  #line 1925 
  enable_req.clscode = __builtin_bswap16((unsigned short)((int)((unsigned short)ioc->clscode)));
  #line 1926 
  enable_req.rsvd = (unsigned short)0U;
  #line 1928 
  enable_req.tv_sec = __builtin_bswap32((unsigned int)ktime_get_real_seconds());
  #line 1929 
  bfa_ioc_mbox_send(ioc,(void *)(& enable_req),12);
  #line 1930 
  return;
}

#line 1933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_send_disable(struct bfa_ioc *ioc)
{
  #line 1935 
  struct bfi_ioc_ctrl_req disable_req;
  #line 1937 
  disable_req.mh.msg_class = (unsigned char)1U;
  #line 1937 
  disable_req.mh.msg_id = (unsigned char)2U;
  #line 1937 
  disable_req.mh.mtag.h2i.fn_lpu = ioc->port_id;
  #line 1939 
  disable_req.clscode = __builtin_bswap16((unsigned short)((int)((unsigned short)ioc->clscode)));
  #line 1940 
  disable_req.rsvd = (unsigned short)0U;
  #line 1942 
  disable_req.tv_sec = __builtin_bswap32((unsigned int)ktime_get_real_seconds());
  #line 1943 
  bfa_ioc_mbox_send(ioc,(void *)(& disable_req),12);
  #line 1944 
  return;
}

#line 1947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_send_getattr(struct bfa_ioc *ioc)
{
  #line 1949 
  struct bfi_ioc_getattr_req attr_req;
  #line 1951 
  attr_req.mh.msg_class = (unsigned char)1U;
  #line 1951 
  attr_req.mh.msg_id = (unsigned char)3U;
  #line 1951 
  attr_req.mh.mtag.h2i.fn_lpu = ioc->port_id;
  #line 1953 
  __bfa_dma_be_addr_set(& attr_req.attr_addr,ioc->attr_dma.pa);
  #line 1954 
  bfa_ioc_mbox_send(ioc,(void *)(& attr_req),12);
  #line 1955 
  return;
}

#line 1958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_hb_check(struct bfa_ioc *ioc)
{
  #line 1960 
  u32 hb_count;
  #line 1962 
  hb_count = readl(ioc->ioc_regs.heartbeat);
  #line 1963 
  if (ioc->hb_count == hb_count) {
    #line 1964 
    bfa_ioc_recover(ioc);
    #line 1965 
    return;
  }
  else 
       #line 1967 
       ioc->hb_count = hb_count;
  #line 1970 
  bfa_ioc_mbox_poll(ioc);
  #line 1971 
  ;
  #line 1971 
  ;
  #line 1971 
  cif_mod_timer_0(& ioc->hb_timer,msecs_to_jiffies(500U) + jiffies);
  #line 1972 
  return;
}

#line 1976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_hb_monitor(struct bfa_ioc *ioc)
{
  #line 1978 
  ioc->hb_count = readl(ioc->ioc_regs.heartbeat);
  #line 1979 
  ;
  #line 1979 
  ;
  #line 1979 
  cif_mod_timer_0(& ioc->hb_timer,msecs_to_jiffies(500U) + jiffies);
  #line 1980 
  return;
}

#line 1984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_hb_stop(struct bfa_ioc *ioc)
{
  #line 1986 
  cif_del_timer(& ioc->hb_timer);
  #line 1987 
  return;
}

#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_status bfa_ioc_download_fw(struct bfa_ioc *ioc, u32 boot_type, u32 boot_env)
{
  #line 1994 
  u32 *fwimg;
  #line 1995 
  u32 pgnum;
  #line 1998 
  u32 i;
  #line 1999 
  u32 asicmode;
  #line 2000 
  u32 fwimg_size;
  #line 2001 
  u32 fwimg_buf[64U];
  #line 2002 
  enum bfa_status status;
  #line 1996 
  u32 loff = 0U;
  #line 1997 
  u32 chunkno = 0U;
  #line 2004 
  if (boot_env == 0U && boot_type == 1U) {
    #line 2006 
    fwimg_size = 262144U;
    #line 2008 
    status = bfa_nw_ioc_flash_img_get_chnk(ioc,chunkno * 64U,(u32 *)(& fwimg_buf));
    #line 2010 
    if (status != (unsigned int)BFA_STATUS_OK) 
                                               #line 2011 
                                               return status;
    #line 2013 
    fwimg = (u32 *)(& fwimg_buf);
  }
  else {
    #line 2015 
    fwimg_size = bfa_cb_image_get_size(ioc->asic_gen);
    #line 2016 
    fwimg = bfa_cb_image_get_chunk(ioc->asic_gen,chunkno * 64U);
  }
  #line 2020 
  pgnum = bfa_ioc_smem_pgnum(ioc,loff);
  #line 2022 
  writel(pgnum,ioc->ioc_regs.host_page_num_fn);
  #line 2024 
  i = 0U;
  #line 2024 
  while (i < fwimg_size) {
    {
      #line 2025 
      if (i / 64U != chunkno) {
        #line 2026 
        chunkno = i / 64U;
        #line 2027 
        if (boot_env == 0U && boot_type == 1U) {
          #line 2029 
          status = bfa_nw_ioc_flash_img_get_chnk(ioc,chunkno * 64U,(u32 *)(& fwimg_buf));
          #line 2032 
          if (status != (unsigned int)BFA_STATUS_OK) 
                                                     #line 2033 
                                                     return status;
          #line 2035 
          fwimg = (u32 *)(& fwimg_buf);
        }
        else 
             #line 2037 
             fwimg = bfa_cb_image_get_chunk(ioc->asic_gen,chunkno * 64U);
      }
      #line 2046 
      ;
      #line 2046 
      writel(__builtin_bswap32(*(fwimg + ((unsigned long)i & 63UL))),ioc->ioc_regs.smem_page_start + (unsigned long)loff);
      #line 2049 
      loff += 4U;
      #line 2054 
      loff &= 32767U;
      #line 2055 
      if (loff == 0U) {
        #line 2056 
        pgnum ++;
        #line 2057 
        writel(pgnum,ioc->ioc_regs.host_page_num_fn);
      }
    }
    #line 2024 
    i ++;
  }
  #line 2062 
  ;
  #line 2062 
  writel(bfa_ioc_smem_pgnum(ioc,0U),ioc->ioc_regs.host_page_num_fn);
  #line 2068 
  if (boot_env == 0U && boot_type == 1U) 
                                         #line 2070 
                                         boot_type = 0U;
  #line 2072 
  asicmode = ((((unsigned int)ioc->asic_gen << 24) | ((unsigned int)ioc->asic_mode << 16)) | ((unsigned int)ioc->port0_mode << 8)) | (unsigned int)ioc->port1_mode;
  #line 2074 
  writel(asicmode,ioc->ioc_regs.smem_page_start + 4U);
  #line 2076 
  writel(boot_type,ioc->ioc_regs.smem_page_start + 8U);
  #line 2078 
  writel(boot_env,ioc->ioc_regs.smem_page_start + 12U);
  #line 2080 
  return BFA_STATUS_OK;
}

#line 2084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_reset(struct bfa_ioc *ioc, bool force)
{
  #line 2086 
  bfa_ioc_hwinit(ioc,(_Bool)((bool)((int)force) != 0));
  #line 2087 
  return;
}

#line 2091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_enable_reply(struct bfa_ioc *ioc, enum bfa_mode port_mode, u8 cap_bm)
{
  #line 2094 
  struct bfa_iocpf *iocpf = & ioc->iocpf;
  #line 2096 
  ioc->port_mode_cfg = ((unsigned char)port_mode);
  #line 2096 
  ioc->port_mode = (enum bfa_mode)((unsigned char)port_mode);
  #line 2097 
  ioc->ad_cap_bm = cap_bm;
  #line 2098 
  (*(iocpf->fsm))((void *)iocpf,5);
  #line 2099 
  return;
}

#line 2103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_getattr_reply(struct bfa_ioc *ioc)
{
  #line 2105 
  struct bfi_ioc_attr *attr = ioc->attr;
  #line 2107 
  attr->adapter_prop = __builtin_bswap32(attr->adapter_prop);
  #line 2108 
  attr->card_type = __builtin_bswap32(attr->card_type);
  #line 2109 
  attr->maxfrsize = __builtin_bswap16((unsigned short)((int)attr->maxfrsize));
  #line 2111 
  (*(ioc->fsm))((void *)ioc,6);
  #line 2112 
  return;
}

#line 2116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_mbox_attach(struct bfa_ioc *ioc)
{
  #line 2119 
  int mc;
  #line 2118 
  struct bfa_ioc_mbox_mod *mod = & ioc->mbox_mod;
  #line 2121 
  INIT_LIST_HEAD_3(& mod->cmd_q);
  #line 2122 
  mc = 0;
  #line 2122 
  while (mc <= 33) {
    #line 2123 
    mod->mbhdlr[mc].cbfn = (void (*)(void *, struct bfi_mbmsg *))0;
    #line 2124 
    mod->mbhdlr[mc].cbarg = (void *)ioc->bfa;
    #line 2122 
    mc ++;
  }
  #line 2126 
  return;
}

#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_mbox_poll(struct bfa_ioc *ioc)
{
  #line 2154 
  void *__mptr;
  #line 2133 
  struct bfa_mbox_cmd *cmd;
  #line 2134 
  void (*cbfn)(void *);
  #line 2135 
  void *cbarg;
  #line 2136 
  u32 stat;
  #line 2132 
  struct bfa_ioc_mbox_mod *mod = & ioc->mbox_mod;
  #line 2141 
  if (list_empty_1(& mod->cmd_q) != 0) 
                                       #line 2142 
                                       return;
  #line 2147 
  stat = readl(ioc->ioc_regs.hfn_mbox_cmd);
  #line 2148 
  if (stat != 0U) 
                  #line 2149 
                  return;
  #line 2154 
  __mptr = (void *)mod->cmd_q.next;
  #line 2154 
  cmd = ((struct bfa_mbox_cmd *)__mptr);
  #line 2155 
  list_del_2(& cmd->qe);
  #line 2156 
  bfa_ioc_mbox_send(ioc,(void *)(& cmd->msg),32);
  #line 2161 
  if (cmd->cbfn != (void (*)(void *))0) {
    #line 2162 
    cbfn = cmd->cbfn;
    #line 2163 
    cbarg = cmd->cbarg;
    #line 2164 
    cmd->cbfn = (void (*)(void *))0;
    #line 2165 
    (*cbfn)(cbarg);
  }
  #line 2167 
  return;
}

#line 2171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_mbox_flush(struct bfa_ioc *ioc)
{
  #line 2174 
  struct bfa_mbox_cmd *cmd;
  #line 2173 
  struct bfa_ioc_mbox_mod *mod = & ioc->mbox_mod;
  #line 2176 
  while (1) {
    #line 2176 
    if (! (list_empty_1(& mod->cmd_q) == 0)) 
                                             #line 2176 
                                             break;
    {
      #line 2177 
      void *__mptr;
      #line 2177 
      __mptr = (void *)mod->cmd_q.next;
      #line 2177 
      cmd = ((struct bfa_mbox_cmd *)__mptr);
      #line 2178 
      list_del_2(& cmd->qe);
    }
  }
  #line 2180 
  return;
}

#line 2191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static int bfa_nw_ioc_smem_read(struct bfa_ioc *ioc, void *tbuf, u32 soff, u32 sz)
{
  #line 2193 
  u32 pgnum;
  #line 2193 
  u32 loff;
  #line 2193 
  u32 r32;
  #line 2194 
  int i;
  #line 2194 
  int len;
  #line 2195 
  u32 *buf = (u32 *)tbuf;
  #line 2197 
  pgnum = ioc->ioc_regs.smem_pg0 + (soff >> 15);
  #line 2198 
  loff = soff & 32767U;
  #line 2203 
  if (! bfa_nw_ioc_sem_get(ioc->ioc_regs.ioc_init_sem_reg)) 
                                                            #line 2204 
                                                            return 1;
  #line 2206 
  writel(pgnum,ioc->ioc_regs.host_page_num_fn);
  #line 2208 
  len = (int)(sz / 4U);
  #line 2209 
  i = 0;
  #line 2209 
  while (i < len) {
    {
      #line 2210 
      r32 = __builtin_bswap32(readl(ioc->ioc_regs.smem_page_start + (unsigned long)loff));
      #line 2211 
      *(buf + (unsigned long)i) = __builtin_bswap32(r32);
      #line 2212 
      loff += 4U;
      #line 2217 
      loff &= 32767U;
      #line 2218 
      if (loff == 0U) {
        #line 2219 
        pgnum ++;
        #line 2220 
        writel(pgnum,ioc->ioc_regs.host_page_num_fn);
      }
    }
    #line 2209 
    i ++;
  }
  #line 2224 
  writel(ioc->ioc_regs.smem_pg0,ioc->ioc_regs.host_page_num_fn);
  #line 2230 
  readl(ioc->ioc_regs.ioc_init_sem_reg);
  #line 2231 
  writel(1U,ioc->ioc_regs.ioc_init_sem_reg);
  #line 2232 
  return 0;
}

#line 2237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
int bfa_nw_ioc_debug_fwtrc(struct bfa_ioc *ioc, void *trcdata, int *trclen)
{
  #line 2240 
  int tlen;
  #line 2239 
  u32 loff = (unsigned int)((int)ioc->port_id * 4128 + 19200);
  #line 2240 
  int status = 0;
  #line 2242 
  tlen = *trclen;
  #line 2243 
  if (tlen > 4128) 
                   #line 2244 
                   tlen = 4128;
  #line 2246 
  status = bfa_nw_ioc_smem_read(ioc,trcdata,loff,(unsigned int)tlen);
  #line 2247 
  *trclen = tlen;
  #line 2248 
  return status;
}

#line 2253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_nw_ioc_debug_save_ftrc(struct bfa_ioc *ioc)
{
  #line 2255 
  int tlen;
  #line 2257 
  if ((int)ioc->dbg_fwsave_once != 0) {
    #line 2258 
    ioc->dbg_fwsave_once = (_Bool)0;
    #line 2259 
    if (ioc->dbg_fwsave_len != 0) {
      #line 2260 
      tlen = ioc->dbg_fwsave_len;
      #line 2261 
      bfa_nw_ioc_debug_fwtrc(ioc,ioc->dbg_fwsave,& tlen);
    }
  }
  #line 2264 
  return;
}

#line 2268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
int bfa_nw_ioc_debug_fwsave(struct bfa_ioc *ioc, void *trcdata, int *trclen)
{
  #line 2270 
  int tlen;
  #line 2272 
  if (ioc->dbg_fwsave_len == 0) 
                                #line 2273 
                                return 78;
  #line 2275 
  tlen = *trclen;
  #line 2276 
  if (ioc->dbg_fwsave_len < tlen) 
                                  #line 2277 
                                  tlen = ioc->dbg_fwsave_len;
  #line 2279 
  memcpy(trcdata,ioc->dbg_fwsave,(unsigned long)tlen);
  #line 2280 
  *trclen = tlen;
  #line 2281 
  return 0;
}

#line 2285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_fail_notify(struct bfa_ioc *ioc)
{
  #line 2290 
  (*((ioc->cbfn)->hbfail_cbfn))((void *)ioc->bfa);
  #line 2291 
  bfa_ioc_event_notify(ioc,(enum bfa_ioc_event)BFA_IOC_E_FAILED);
  #line 2292 
  bfa_nw_ioc_debug_save_ftrc(ioc);
  #line 2293 
  return;
}

#line 2297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_pf_enabled(struct bfa_ioc *ioc)
{
  #line 2299 
  (*(ioc->fsm))((void *)ioc,5);
  #line 2300 
  return;
}

#line 2303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_pf_disabled(struct bfa_ioc *ioc)
{
  #line 2305 
  (*(ioc->fsm))((void *)ioc,7);
  #line 2306 
  return;
}

#line 2309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_pf_failed(struct bfa_ioc *ioc)
{
  #line 2311 
  (*(ioc->fsm))((void *)ioc,8);
  #line 2312 
  return;
}

#line 2315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_pf_hwfailed(struct bfa_ioc *ioc)
{
  #line 2317 
  (*(ioc->fsm))((void *)ioc,12);
  #line 2318 
  return;
}

#line 2321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_pf_fwmismatch(struct bfa_ioc *ioc)
{
  #line 2326 
  (*((ioc->cbfn)->enable_cbfn))((void *)ioc->bfa,(enum bfa_status)BFA_STATUS_IOC_FAILURE);
  #line 2327 
  return;
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_status bfa_ioc_pll_init(struct bfa_ioc *ioc)
{
  #line 2336 
  bfa_nw_ioc_sem_get(ioc->ioc_regs.ioc_init_sem_reg);
  #line 2338 
  (*((ioc->ioc_hwif)->ioc_pll_init))(ioc->pcidev.pci_bar_kva,ioc->asic_mode);
  #line 2340 
  ioc->pllinit = (_Bool)1;
  #line 2343 
  bfa_ioc_lmem_init(ioc);
  #line 2348 
  bfa_nw_ioc_sem_release(ioc->ioc_regs.ioc_init_sem_reg);
  #line 2350 
  return BFA_STATUS_OK;
}

#line 2357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_status bfa_ioc_boot(struct bfa_ioc *ioc, enum bfi_fwboot_type boot_type, u32 boot_env)
{
  #line 2360 
  struct bfi_ioc_image_hdr *drv_fwhdr;
  #line 2361 
  enum bfa_status status;
  #line 2362 
  (ioc->stats.ioc_boots) ++;
  #line 2364 
  if (bfa_ioc_pll_init(ioc) != (unsigned int)BFA_STATUS_OK) 
                                                            #line 2365 
                                                            return BFA_STATUS_FAILED;
  #line 2366 
  if (boot_env == 0U && boot_type == (unsigned int)BFI_FWBOOT_TYPE_NORMAL) {
    #line 2368 
    drv_fwhdr = (struct bfi_ioc_image_hdr *)bfa_cb_image_get_chunk(ioc->asic_gen,0U);
    #line 2373 
    if (bfa_ioc_flash_fwver_cmp(ioc,drv_fwhdr) == (unsigned int)BFI_IOC_IMG_VER_BETTER) 
      #line 2375 
      boot_type = BFI_FWBOOT_TYPE_FLASH;
  }
  #line 2381 
  if (boot_type == (unsigned int)BFI_FWBOOT_TYPE_MEMTEST) {
    #line 2382 
    (*((ioc->ioc_hwif)->ioc_set_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_MEMTEST);
    #line 2383 
    (*((ioc->ioc_hwif)->ioc_set_alt_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_MEMTEST);
  }
  else {
    #line 2385 
    (*((ioc->ioc_hwif)->ioc_set_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_INITING);
    #line 2386 
    (*((ioc->ioc_hwif)->ioc_set_alt_fwstate))(ioc,(enum bfi_ioc_state)BFI_IOC_INITING);
  }
  #line 2389 
  bfa_ioc_msgflush(ioc);
  #line 2390 
  status = bfa_ioc_download_fw(ioc,(unsigned int)boot_type,boot_env);
  #line 2391 
  if (status == (unsigned int)BFA_STATUS_OK) 
                                             #line 2392 
                                             bfa_ioc_lpu_start(ioc); else 
                                                                    #line 2394 
                                                                    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),11);
  #line 2396 
  return status;
}

#line 2401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_auto_recover(bool auto_recover)
{
  #line 2403 
  bfa_nw_auto_recover = auto_recover;
  #line 2404 
  return;
}

#line 2407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static bool bfa_ioc_msgget(struct bfa_ioc *ioc, void *mbmsg)
{
  #line 2410 
  u32 r32;
  #line 2411 
  int i;
  #line 2409 
  u32 *msgp = (u32 *)mbmsg;
  #line 2413 
  r32 = readl(ioc->ioc_regs.lpu_mbox_cmd);
  #line 2414 
  if ((r32 & 1U) == 0U) 
                        #line 2415 
                        return (_Bool)0;
  #line 2420 
  i = 0;
  #line 2420 
  while ((unsigned int)i <= 7U) {
    #line 2422 
    r32 = readl(ioc->ioc_regs.lpu_mbox + (unsigned long)i * 4UL);
    #line 2424 
    *(msgp + (unsigned long)i) = __builtin_bswap32(r32);
    #line 2420 
    i ++;
  }
  #line 2430 
  writel(1U,ioc->ioc_regs.lpu_mbox_cmd);
  #line 2431 
  readl(ioc->ioc_regs.lpu_mbox_cmd);
  #line 2433 
  return (_Bool)1;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_isr(struct bfa_ioc *ioc, struct bfi_mbmsg *m)
{
  #line 2439 
  union bfi_ioc_i2h_msg_u *msg;
  #line 2440 
  struct bfa_iocpf *iocpf = & ioc->iocpf;
  #line 2442 
  msg = (union bfi_ioc_i2h_msg_u *)m;
  #line 2444 
  (ioc->stats.ioc_isrs) ++;
  #line 2446 
  switch ((int)msg->mh.msg_id) {
    #line 2447 
    case 132: 
              #line 2447 
    ;
    #line 2448 
    break;
    #line 2450 
    case 129: 
              #line 2450 
    ;
    #line 2451 
    bfa_ioc_enable_reply(ioc,(enum bfa_mode)msg->fw_event.port_mode,(unsigned char)((int)msg->fw_event.cap_bm));
    #line 2454 
    break;
    #line 2456 
    case 130: 
              #line 2456 
    ;
    #line 2457 
    (*(iocpf->fsm))((void *)iocpf,6);
    #line 2458 
    break;
    #line 2460 
    case 131: 
              #line 2460 
    ;
    #line 2461 
    bfa_ioc_getattr_reply(ioc);
    #line 2462 
    break;
    #line 2464 
    default: 
             #line 2464 
    ;
    #line 2466 
    ldv_inline_asm();
    #line 2467 
    ldv_inline_asm();
    #line 2468 
    ldv_inline_asm();
    #line 2465 
    ;
  }
  #line 2469 
  return;
}

#line 2476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_attach(struct bfa_ioc *ioc, void *bfa, struct bfa_ioc_cbfn *cbfn)
{
  #line 2478 
  ioc->bfa = (struct bfa *)bfa;
  #line 2479 
  ioc->cbfn = cbfn;
  #line 2480 
  ioc->fcmode = (_Bool)0;
  #line 2481 
  ioc->pllinit = (_Bool)0;
  #line 2482 
  ioc->dbg_fwsave_once = (_Bool)1;
  #line 2483 
  ioc->iocpf.ioc = ioc;
  #line 2485 
  bfa_ioc_mbox_attach(ioc);
  #line 2486 
  INIT_LIST_HEAD_3(& ioc->notify_q);
  #line 2488 
  ioc->fsm = (void (*)(void *, int ))(& bfa_ioc_sm_uninit);
  #line 2488 
  bfa_ioc_sm_uninit_entry(ioc);
  #line 2489 
  (*(ioc->fsm))((void *)ioc,1);
  #line 2490 
  return;
}

#line 2494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_detach(struct bfa_ioc *ioc)
{
  #line 2496 
  (*(ioc->fsm))((void *)ioc,4);
  #line 2499 
  INIT_LIST_HEAD_3(& ioc->notify_q);
  #line 2500 
  return;
}

#line 2508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_pci_init(struct bfa_ioc *ioc, struct bfa_pcidev *pcidev, enum bfi_pcifn_class clscode)
{
  #line 2511 
  ioc->clscode = clscode;
  #line 2512 
  ioc->pcidev = *pcidev;
  #line 2517 
  ioc->port1_mode = BFI_PORT_MODE_FC;
  #line 2517 
  ioc->port0_mode = BFI_PORT_MODE_FC;
  #line 2518 
  ioc->asic_mode = BFI_ASIC_MODE_FC;
  #line 2520 
  switch ((int)pcidev->device_id) {
    #line 2521 
    case 20: 
             #line 2521 
    ;
    #line 2522 
    ioc->asic_gen = BFI_ASIC_GEN_CT;
    #line 2523 
    ioc->port1_mode = BFI_PORT_MODE_ETH;
    #line 2523 
    ioc->port0_mode = BFI_PORT_MODE_ETH;
    #line 2524 
    ioc->asic_mode = BFI_ASIC_MODE_ETH;
    #line 2525 
    ioc->port_mode_cfg = (unsigned char)2U;
    #line 2525 
    ioc->port_mode = BFA_MODE_CNA;
    #line 2526 
    ioc->ad_cap_bm = (unsigned char)2U;
    #line 2527 
    break;
    #line 2529 
    case 34: 
             #line 2529 
    ;
    #line 2530 
    ioc->asic_gen = BFI_ASIC_GEN_CT2;
    #line 2531 
    if (clscode == (unsigned int)BFI_PCIFN_CLASS_FC && (unsigned int)pcidev->ssid == 36U) {
      #line 2533 
      ioc->asic_mode = BFI_ASIC_MODE_FC16;
      #line 2534 
      ioc->fcmode = (_Bool)1;
      #line 2535 
      ioc->port_mode_cfg = (unsigned char)1U;
      #line 2535 
      ioc->port_mode = BFA_MODE_HBA;
      #line 2536 
      ioc->ad_cap_bm = (unsigned char)1U;
    }
    else {
      #line 2538 
      ioc->port1_mode = BFI_PORT_MODE_ETH;
      #line 2538 
      ioc->port0_mode = BFI_PORT_MODE_ETH;
      #line 2539 
      ioc->asic_mode = BFI_ASIC_MODE_ETH;
      #line 2540 
      if ((unsigned int)pcidev->ssid == 34U) {
        #line 2541 
        ioc->port_mode_cfg = (unsigned char)2U;
        #line 2541 
        ioc->port_mode = BFA_MODE_CNA;
        #line 2543 
        ioc->ad_cap_bm = (unsigned char)2U;
      }
      else {
        #line 2545 
        ioc->port_mode_cfg = (unsigned char)3U;
        #line 2545 
        ioc->port_mode = BFA_MODE_NIC;
        #line 2547 
        ioc->ad_cap_bm = (unsigned char)4U;
      }
    }
    #line 2550 
    break;
    #line 2552 
    default: 
             #line 2552 
    ;
    #line 2554 
    ldv_inline_asm();
    #line 2555 
    ldv_inline_asm();
    #line 2556 
    ldv_inline_asm();
    #line 2553 
    ;
  }
  #line 2559 
  if (ioc->asic_gen == (unsigned int)BFI_ASIC_GEN_CT) 
                                                      #line 2560 
                                                      bfa_nw_ioc_set_ct_hwif(ioc);
  else {
    {
      #line 2562 
      int __ret_warn_on = ioc->asic_gen != (unsigned int)BFI_ASIC_GEN_CT2;
      #line 2562 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2563 
        ldv_inline_asm();
        #line 2564 
        ldv_inline_asm();
      }
      #line 2562 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    #line 2563 
    bfa_nw_ioc_set_ct2_hwif(ioc);
    #line 2564 
    bfa_nw_ioc_ct2_poweron(ioc);
  }
  #line 2567 
  (*((ioc->ioc_hwif)->ioc_map_port))(ioc);
  #line 2568 
  (*((ioc->ioc_hwif)->ioc_reg_init))(ioc);
  #line 2569 
  return;
}

#line 2578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_mem_claim(struct bfa_ioc *ioc, u8 *dm_kva, u64 dm_pa)
{
  #line 2583 
  ioc->attr_dma.kva = (void *)dm_kva;
  #line 2584 
  ioc->attr_dma.pa = dm_pa;
  #line 2585 
  ioc->attr = (struct bfi_ioc_attr *)dm_kva;
  #line 2586 
  return;
}

#line 2590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
u32 bfa_nw_ioc_meminfo(void)
{
  #line 2592 
  int __y;
  #line 2592 
  __y = 256;
  #line 2592 
  return (unsigned int)((((unsigned long)(__y + -1) + 732UL) / (unsigned long)__y) * (unsigned long)__y);
}

#line 2596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_enable(struct bfa_ioc *ioc)
{
  #line 2598 
  (ioc->stats.ioc_enables) ++;
  #line 2599 
  ioc->dbg_fwsave_once = (_Bool)1;
  #line 2601 
  (*(ioc->fsm))((void *)ioc,2);
  #line 2602 
  return;
}

#line 2605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_disable(struct bfa_ioc *ioc)
{
  #line 2607 
  (ioc->stats.ioc_disables) ++;
  #line 2608 
  (*(ioc->fsm))((void *)ioc,3);
  #line 2609 
  return;
}

#line 2613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_debug_memclaim(struct bfa_ioc *ioc, void *dbg_fwsave)
{
  #line 2615 
  ioc->dbg_fwsave = dbg_fwsave;
  #line 2616 
  if ((int)ioc->iocpf.auto_recover != 0) 
                                         #line 2616 
                                         ioc->dbg_fwsave_len = 4128; else 
                                                                    #line 2616 
                                                                    ioc->dbg_fwsave_len = 0;
  #line 2617 
  return;
}

#line 2620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static u32 bfa_ioc_smem_pgnum(struct bfa_ioc *ioc, u32 fmaddr)
{
  #line 2622 
  return ioc->ioc_regs.smem_pg0 + (fmaddr >> 15);
}

#line 2627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_mbox_regisr(struct bfa_ioc *ioc, enum bfi_mclass mc, void (*cbfn)(void *, struct bfi_mbmsg *), void *cbarg)
{
  #line 2630 
  struct bfa_ioc_mbox_mod *mod = & ioc->mbox_mod;
  #line 2632 
  mod->mbhdlr[(unsigned int)mc].cbfn = cbfn;
  #line 2633 
  mod->mbhdlr[(unsigned int)mc].cbarg = cbarg;
  #line 2634 
  return;
}

#line 2645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
bool bfa_nw_ioc_mbox_queue(struct bfa_ioc *ioc, struct bfa_mbox_cmd *cmd, void (*cbfn)(void *), void *cbarg)
{
  #line 2649 
  u32 stat;
  #line 2648 
  struct bfa_ioc_mbox_mod *mod = & ioc->mbox_mod;
  #line 2651 
  cmd->cbfn = cbfn;
  #line 2652 
  cmd->cbarg = cbarg;
  #line 2657 
  if (list_empty_1(& mod->cmd_q) == 0) {
    #line 2658 
    list_add_tail_2(& cmd->qe,& mod->cmd_q);
    #line 2659 
    return (_Bool)1;
  }
  #line 2665 
  stat = readl(ioc->ioc_regs.hfn_mbox_cmd);
  #line 2666 
  if (stat != 0U) {
    #line 2667 
    list_add_tail_2(& cmd->qe,& mod->cmd_q);
    #line 2668 
    return (_Bool)1;
  }
  #line 2674 
  bfa_ioc_mbox_send(ioc,(void *)(& cmd->msg),32);
  #line 2676 
  return (_Bool)0;
}

#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_mbox_isr(struct bfa_ioc *ioc)
{
  #line 2684 
  struct bfi_mbmsg m;
  #line 2685 
  int mc;
  #line 2683 
  struct bfa_ioc_mbox_mod *mod = & ioc->mbox_mod;
  #line 2687 
  if ((int)bfa_ioc_msgget(ioc,(void *)(& m)) != 0) {
    #line 2691 
    mc = (int)m.mh.msg_class;
    #line 2692 
    if (mc == 1) {
      #line 2693 
      bfa_ioc_isr(ioc,& m);
      #line 2694 
      return;
    }
    #line 2697 
    if (mc > 33 || mod->mbhdlr[mc].cbfn == (void (*)(void *, struct bfi_mbmsg *))0) 
      #line 2698 
      return;
    #line 2700 
    (*(mod->mbhdlr[mc].cbfn))(mod->mbhdlr[mc].cbarg,& m);
  }
  #line 2703 
  if ((ioc->ioc_hwif)->ioc_lpu_read_stat != (bool (*)(struct bfa_ioc *))0) 
    #line 2703 
    (*((ioc->ioc_hwif)->ioc_lpu_read_stat))(ioc);
  #line 2708 
  bfa_ioc_mbox_poll(ioc);
  #line 2709 
  return;
}

#line 2712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_error_isr(struct bfa_ioc *ioc)
{
  #line 2714 
  (ioc->stats.ioc_hbfails) ++;
  #line 2715 
  ioc->stats.hb_count = ioc->hb_count;
  #line 2716 
  (*(ioc->fsm))((void *)ioc,10);
  #line 2717 
  return;
}

#line 2721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
bool bfa_nw_ioc_is_disabled(struct bfa_ioc *ioc)
{
  #line 2723 
  return (_Bool)((ioc->fsm == (void (*)(void *, int ))(& bfa_ioc_sm_disabling) || ioc->fsm == (void (*)(void *, int ))(& bfa_ioc_sm_disabled)) != 0);
}

#line 2729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
bool bfa_nw_ioc_is_operational(struct bfa_ioc *ioc)
{
  #line 2731 
  return (_Bool)(ioc->fsm == (void (*)(void *, int ))(& bfa_ioc_sm_op));
}

#line 2738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_notify_register(struct bfa_ioc *ioc, struct bfa_ioc_notify *notify)
{
  #line 2741 
  list_add_tail_2(& notify->qe,& ioc->notify_q);
  #line 2742 
  return;
}

#line 2746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_adapter_attr(struct bfa_ioc *ioc, struct bfa_adapter_attr *ad_attr)
{
  #line 2749 
  struct bfi_ioc_attr *ioc_attr;
  #line 2751 
  ioc_attr = ioc->attr;
  #line 2753 
  bfa_ioc_get_adapter_serial_num(ioc,(char *)(& ad_attr->serial_num));
  #line 2754 
  bfa_ioc_get_adapter_fw_ver(ioc,(char *)(& ad_attr->fw_ver));
  #line 2755 
  bfa_ioc_get_adapter_optrom_ver(ioc,(char *)(& ad_attr->optrom_ver));
  #line 2756 
  bfa_ioc_get_adapter_manufacturer(ioc,(char *)(& ad_attr->manufacturer));
  #line 2757 
  memcpy((void *)(& ad_attr->vpd),(void *)(& ioc_attr->vpd),520UL);
  #line 2760 
  ad_attr->nports = (unsigned char)((ioc->attr)->adapter_prop >> 8);
  #line 2761 
  ad_attr->max_speed = (unsigned char)(ioc->attr)->adapter_prop;
  #line 2763 
  bfa_ioc_get_adapter_model(ioc,(char *)(& ad_attr->model));
  #line 2765 
  bfa_ioc_get_adapter_model(ioc,(char *)(& ad_attr->model_descr));
  #line 2767 
  ad_attr->card_type = ioc_attr->card_type;
  #line 2768 
  ad_attr->is_mezz = (unsigned char)((((((ioc_attr->card_type == 804U || ioc_attr->card_type == 1007U) || ioc_attr->card_type == 807U) || ioc_attr->card_type == 902U) || ioc_attr->card_type == 1741U) || ioc_attr->card_type == 1867U) != 0);
  #line 2770 
  if ((ioc_attr->adapter_prop & 7340032U) != 0U) 
                                                 #line 2771 
                                                 ad_attr->prototype = (unsigned char)1U; else 
                                                                    #line 2773 
                                                                    ad_attr->prototype = (unsigned char)0U;
  #line 2775 
  ad_attr->pwwn = bfa_ioc_get_pwwn(ioc);
  #line 2776 
  bfa_nw_ioc_get_mac(ioc,(u8 *)(& ad_attr->mac));
  #line 2778 
  ad_attr->pcie_gen = ioc_attr->pcie_gen;
  #line 2779 
  ad_attr->pcie_lanes = ioc_attr->pcie_lanes;
  #line 2780 
  ad_attr->pcie_lanes_orig = ioc_attr->pcie_lanes_orig;
  #line 2781 
  ad_attr->asic_rev = ioc_attr->asic_rev;
  #line 2783 
  bfa_ioc_get_pci_chip_rev(ioc,(char *)(& ad_attr->hw_ver));
  #line 2784 
  return;
}

#line 2787  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_ioc_type bfa_ioc_get_type(struct bfa_ioc *ioc)
{
  #line 2795 
  int tmp;
  #line 2789 
  if (ioc->clscode == (unsigned int)BFI_PCIFN_CLASS_ETH) 
                                                         #line 2790 
                                                         return BFA_IOC_TYPE_LL;
  #line 2792 
  if ((long)(ioc->clscode != (unsigned int)BFI_PCIFN_CLASS_FC) != 0L) {
    #line 2793 
    ldv_inline_asm();
    #line 2794 
    ldv_inline_asm();
    #line 2795 
    ldv_inline_asm();
    #line 2792 
    ;
  }
  #line 2795 
  if ((unsigned int)(ioc->attr)->port_mode == 1U) 
                                                  #line 2795 
                                                  tmp = BFA_IOC_TYPE_FC; else 
                                                                    #line 2795 
                                                                    tmp = BFA_IOC_TYPE_FCoE;
  #line 2795 
  return (enum bfa_ioc_type)tmp;
}

#line 2799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_adapter_serial_num(struct bfa_ioc *ioc, char *serial_num)
{
  #line 2801 
  memcpy((void *)serial_num,(void *)(& (ioc->attr)->brcd_serialnum),12UL);
  #line 2803 
  return;
}

#line 2807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_adapter_fw_ver(struct bfa_ioc *ioc, char *fw_ver)
{
  #line 2809 
  memcpy((void *)fw_ver,(void *)(& (ioc->attr)->fw_version),64UL);
  #line 2810 
  return;
}

#line 2813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_pci_chip_rev(struct bfa_ioc *ioc, char *chip_rev)
{
  #line 2815 
  if ((long)(chip_rev == (char *)0) != 0L) {
    #line 2816 
    ldv_inline_asm();
    #line 2817 
    ldv_inline_asm();
    #line 2818 
    ldv_inline_asm();
    #line 2815 
    ;
  }
  #line 2817 
  memset((void *)chip_rev,0,8UL);
  #line 2819 
  *chip_rev = (char)82;
  #line 2820 
  *(chip_rev + 1U) = (char)101;
  #line 2821 
  *(chip_rev + 2U) = (char)118;
  #line 2822 
  *(chip_rev + 3U) = (char)45;
  #line 2823 
  *(chip_rev + 4U) = (ioc->attr)->asic_rev;
  #line 2824 
  *(chip_rev + 5U) = (char)0;
  #line 2825 
  return;
}

#line 2828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_adapter_optrom_ver(struct bfa_ioc *ioc, char *optrom_ver)
{
  #line 2830 
  memcpy((void *)optrom_ver,(void *)(& (ioc->attr)->optrom_version),64UL);
  #line 2831 
  return;
}

#line 2835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_adapter_manufacturer(struct bfa_ioc *ioc, char *manufacturer)
{
  #line 2837 
  strncpy(manufacturer,(char *)"QLogic",8UL);
  #line 2838 
  return;
}

#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_get_adapter_model(struct bfa_ioc *ioc, char *model)
{
  #line 2843 
  struct bfi_ioc_attr *ioc_attr;
  #line 2845 
  if ((long)(model == (char *)0) != 0L) {
    #line 2846 
    ldv_inline_asm();
    #line 2847 
    ldv_inline_asm();
    #line 2848 
    ldv_inline_asm();
    #line 2845 
    ;
  }
  #line 2846 
  memset((void *)model,0,16UL);
  #line 2848 
  ioc_attr = ioc->attr;
  #line 2850 
  snprintf(model,16UL,(char *)"%s-%u",(char *)"QLogic",ioc_attr->card_type);
  #line 2852 
  return;
}

#line 2855  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static enum bfa_ioc_state bfa_ioc_get_state(struct bfa_ioc *ioc)
{
  #line 2857 
  enum bfa_iocpf_state iocpf_st;
  #line 2858 
  enum bfa_ioc_state ioc_st = (enum bfa_ioc_state)bfa_sm_to_state((struct bfa_sm_table *)(& ioc_sm_table),ioc->fsm);
  #line 2860 
  if ((ioc_st == (unsigned int)BFA_IOC_ENABLING || ioc_st == (unsigned int)BFA_IOC_FAIL) || ioc_st == (unsigned int)BFA_IOC_INITFAIL) {
    #line 2863 
    iocpf_st = (enum bfa_iocpf_state)bfa_sm_to_state((struct bfa_sm_table *)(& iocpf_sm_table),
                        ioc->iocpf.fsm);
    #line 2865 
    switch ((unsigned int)iocpf_st) {
      #line 2866 
      case (unsigned int)2: 
                            #line 2866 
      ;
      #line 2867 
      ioc_st = BFA_IOC_SEMWAIT;
      #line 2868 
      break;
      #line 2870 
      case (unsigned int)3: 
                            #line 2870 
      ;
      #line 2871 
      ioc_st = BFA_IOC_HWINIT;
      #line 2872 
      break;
      #line 2874 
      case (unsigned int)9: 
                            #line 2874 
      ;
      #line 2875 
      ioc_st = BFA_IOC_FWMISMATCH;
      #line 2876 
      break;
      #line 2878 
      case (unsigned int)6: 
                            #line 2878 
      ;
      #line 2879 
      ioc_st = BFA_IOC_FAIL;
      #line 2880 
      break;
      #line 2882 
      case (unsigned int)5: 
                            #line 2882 
      ;
      #line 2883 
      ioc_st = BFA_IOC_INITFAIL;
      #line 2884 
      break;
      #line 2886 
      default: 
               #line 2886 
      ;
      #line 2887 
      break;
    }
  }
  #line 2890 
  return ioc_st;
}

#line 2894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_get_attr(struct bfa_ioc *ioc, struct bfa_ioc_attr *ioc_attr)
{
  #line 2896 
  memset((void *)ioc_attr,0,1600UL);
  #line 2898 
  ioc_attr->state = bfa_ioc_get_state(ioc);
  #line 2899 
  ioc_attr->port_id = ioc->port_id;
  #line 2900 
  ioc_attr->port_mode = (unsigned char)ioc->port_mode;
  #line 2902 
  ioc_attr->port_mode_cfg = ioc->port_mode_cfg;
  #line 2903 
  ioc_attr->cap_bm = ioc->ad_cap_bm;
  #line 2905 
  ioc_attr->ioc_type = bfa_ioc_get_type(ioc);
  #line 2907 
  bfa_ioc_get_adapter_attr(ioc,& ioc_attr->adapter_attr);
  #line 2909 
  ioc_attr->pci_attr.device_id = ioc->pcidev.device_id;
  #line 2910 
  ioc_attr->pci_attr.pcifn = (unsigned int)ioc->pcidev.pci_func;
  #line 2911 
  ioc_attr->def_fn = (unsigned char)((int)ioc->pcidev.pci_func == (int)ioc->port_id);
  #line 2912 
  bfa_ioc_get_pci_chip_rev(ioc,(char *)(& ioc_attr->pci_attr.chip_rev));
  #line 2913 
  return;
}

#line 2917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static u64 bfa_ioc_get_pwwn(struct bfa_ioc *ioc)
{
  #line 2919 
  return (ioc->attr)->pwwn;
}

#line 2923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_ioc_get_mac(struct bfa_ioc *ioc, u8 *mac)
{
  #line 2925 
  ether_addr_copy(mac,(u8 *)(& (ioc->attr)->mac));
  #line 2926 
  return;
}

#line 2930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_recover(struct bfa_ioc *ioc)
{
  #line 2932 
  printk((char *)"\001");
  #line 2933 
  (ioc->stats.ioc_hbfails) ++;
  #line 2934 
  ioc->stats.hb_count = ioc->hb_count;
  #line 2935 
  (*(ioc->fsm))((void *)ioc,9);
  #line 2936 
  return;
}

#line 2941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_enable(struct bfa_ioc *ioc)
{
  #line 2943 
  (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),1);
  #line 2944 
  return;
}

#line 2947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_disable(struct bfa_ioc *ioc)
{
  #line 2949 
  (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),2);
  #line 2950 
  return;
}

#line 2953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_fail(struct bfa_ioc *ioc)
{
  #line 2955 
  (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),7);
  #line 2956 
  return;
}

#line 2959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_initfail(struct bfa_ioc *ioc)
{
  #line 2961 
  (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),8);
  #line 2962 
  return;
}

#line 2965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_getattrfail(struct bfa_ioc *ioc)
{
  #line 2967 
  (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),9);
  #line 2968 
  return;
}

#line 2971  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_iocpf_stop(struct bfa_ioc *ioc)
{
  #line 2973 
  (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),3);
  #line 2974 
  return;
}

#line 2977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_iocpf_timeout(struct bfa_ioc *ioc)
{
  #line 2979 
  enum bfa_iocpf_state iocpf_st;
  #line 2981 
  iocpf_st = (enum bfa_iocpf_state)bfa_sm_to_state((struct bfa_sm_table *)(& iocpf_sm_table),
                      ioc->iocpf.fsm);
  #line 2983 
  if (iocpf_st == (unsigned int)BFA_IOCPF_HWINIT) 
                                                  #line 2984 
                                                  bfa_ioc_poll_fwinit(ioc); else 
                                                                    #line 2986 
                                                                    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),11);
  #line 2987 
  return;
}

#line 2990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_iocpf_sem_timeout(struct bfa_ioc *ioc)
{
  #line 2992 
  bfa_ioc_hw_sem_get(ioc);
  #line 2993 
  return;
}

#line 2996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_ioc_poll_fwinit(struct bfa_ioc *ioc)
{
  #line 2998 
  u32 fwstate = (*((ioc->ioc_hwif)->ioc_get_fwstate))(ioc);
  #line 3000 
  if (fwstate == 6U) {
    #line 3001 
    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),4);
    #line 3002 
    return;
  }
  #line 3005 
  if (ioc->iocpf.poll_time > 2999U) 
                                    #line 3006 
                                    (*(ioc->iocpf.fsm))((void *)(& ioc->iocpf),11);
  else {
    #line 3008 
    ioc->iocpf.poll_time += 200U;
    #line 3009 
    ;
    #line 3009 
    ;
    #line 3009 
    cif_mod_timer_0(& ioc->iocpf_timer,msecs_to_jiffies(200U) + jiffies);
  }
  #line 3011 
  return;
}

#line 3028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_cb(struct bfa_flash *flash)
{
  #line 3030 
  flash->op_busy = 0U;
  #line 3031 
  if (flash->cbfn != (void (*)(void *, enum bfa_status ))0) 
                                                            #line 3032 
                                                            (*(flash->cbfn))(flash->cbarg,flash->status);
  #line 3033 
  return;
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_notify(void *cbarg, enum bfa_ioc_event event)
{
  #line 3038 
  struct bfa_flash *flash = (struct bfa_flash *)cbarg;
  #line 3040 
  switch ((unsigned int)event) {
    #line 3041 
    case (unsigned int)2: 
                          #line 3041 
    ;
    #line 3042 
    case (unsigned int)3: 
                          #line 3042 
    ;
    #line 3043 
    if (flash->op_busy != 0U) {
      #line 3044 
      flash->status = BFA_STATUS_IOC_FAILURE;
      #line 3045 
      (*(flash->cbfn))(flash->cbarg,flash->status);
      #line 3046 
      flash->op_busy = 0U;
    }
    #line 3048 
    break;
    #line 3049 
    default: 
             #line 3049 
    ;
    #line 3050 
    break;
  }
  #line 3052 
  return;
}

#line 3058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_write_send(struct bfa_flash *flash)
{
  #line 3067 
  int __y;
  #line 3062 
  u32 len;
  #line 3060 
  struct bfi_flash_write_req *msg = (struct bfi_flash_write_req *)(& flash->mb.msg);
  #line 3064 
  msg->type = __builtin_bswap32(flash->type);
  #line 3065 
  msg->instance = flash->instance;
  #line 3066 
  msg->offset = __builtin_bswap32(flash->addr_off + flash->offset);
  #line 3067 
  __y = 2048;
  #line 3067 
  ;
  #line 3067 
  if ((unsigned long)flash->residue < ((((unsigned long)(__y + -1) + 65792UL) / (unsigned long)__y) * (unsigned long)__y)) 
    #line 3067 
    len = flash->residue;
  else {
    #line 3068 
    int __y_0;
    #line 3068 
    __y_0 = 2048;
    #line 3067 
    len = (unsigned int)((((unsigned long)(__y_0 + -1) + 65792UL) / (unsigned long)__y_0) * (unsigned long)__y_0);
  }
  #line 3069 
  msg->length = __builtin_bswap32(len);
  #line 3072 
  msg->last = (unsigned char)(flash->residue == len);
  #line 3074 
  msg->mh.msg_class = (unsigned char)3U;
  #line 3074 
  msg->mh.msg_id = (unsigned char)3U;
  #line 3074 
  msg->mh.mtag.h2i.fn_lpu = (flash->ioc)->port_id;
  #line 3076 
  __bfa_alen_set(& msg->alen,len,flash->dbuf_pa);
  #line 3077 
  memcpy((void *)flash->dbuf_kva,(void *)(flash->ubuf + (unsigned long)flash->offset),(unsigned long)len);
  #line 3078 
  bfa_nw_ioc_mbox_queue(flash->ioc,& flash->mb,(void (*)(void *))0,(void *)0);
  #line 3080 
  flash->residue -= len;
  #line 3081 
  flash->offset += len;
  #line 3082 
  return;
}

#line 3090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_read_send(void *cbarg)
{
  #line 3100 
  int __y;
  #line 3095 
  u32 len;
  #line 3092 
  struct bfa_flash *flash = (struct bfa_flash *)cbarg;
  #line 3093 
  struct bfi_flash_read_req *msg = (struct bfi_flash_read_req *)(& flash->mb.msg);
  #line 3097 
  msg->type = __builtin_bswap32(flash->type);
  #line 3098 
  msg->instance = flash->instance;
  #line 3099 
  msg->offset = __builtin_bswap32(flash->addr_off + flash->offset);
  #line 3100 
  __y = 2048;
  #line 3100 
  ;
  #line 3100 
  if ((unsigned long)flash->residue < ((((unsigned long)(__y + -1) + 65792UL) / (unsigned long)__y) * (unsigned long)__y)) 
    #line 3100 
    len = flash->residue;
  else {
    #line 3101 
    int __y_0;
    #line 3101 
    __y_0 = 2048;
    #line 3100 
    len = (unsigned int)((((unsigned long)(__y_0 + -1) + 65792UL) / (unsigned long)__y_0) * (unsigned long)__y_0);
  }
  #line 3102 
  msg->length = __builtin_bswap32(len);
  #line 3103 
  msg->mh.msg_class = (unsigned char)3U;
  #line 3103 
  msg->mh.msg_id = (unsigned char)4U;
  #line 3103 
  msg->mh.mtag.h2i.fn_lpu = (flash->ioc)->port_id;
  #line 3105 
  __bfa_alen_set(& msg->alen,len,flash->dbuf_pa);
  #line 3106 
  bfa_nw_ioc_mbox_queue(flash->ioc,& flash->mb,(void (*)(void *))0,(void *)0);
  #line 3107 
  return;
}

#line 3116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
static void bfa_flash_intr(void *flasharg, struct bfi_mbmsg *msg)
{
  #line 3119 
  u32 status;
  #line 3126 
  union __anonunion_m_8536 m;
  #line 3118 
  struct bfa_flash *flash = (struct bfa_flash *)flasharg;
  #line 3128 
  m.msg = msg;
  #line 3131 
  if (flash->op_busy == 0U && (unsigned int)msg->mh.msg_id != 255U) 
                                                                    #line 3132 
                                                                    return;
  #line 3134 
  switch ((int)msg->mh.msg_id) {
    #line 3135 
    case 129: 
              #line 3135 
    ;
    #line 3136 
    status = __builtin_bswap32((m.query)->status);
    #line 3137 
    if (status == 0U) {
      #line 3138 
      u32 i;
      #line 3139 
      struct bfa_flash_attr *attr;
      #line 3139 
      struct bfa_flash_attr *f;
      #line 3141 
      attr = (struct bfa_flash_attr *)flash->ubuf;
      #line 3142 
      f = (struct bfa_flash_attr *)flash->dbuf_kva;
      #line 3143 
      attr->status = __builtin_bswap32(f->status);
      #line 3144 
      attr->npart = __builtin_bswap32(f->npart);
      #line 3145 
      i = 0U;
      #line 3145 
      while (attr->npart > i) {
        #line 3146 
        attr->part[i].part_type = __builtin_bswap32(f->part[i].part_type);
        #line 3148 
        attr->part[i].part_instance = __builtin_bswap32(f->part[i].part_instance);
        #line 3150 
        attr->part[i].part_off = __builtin_bswap32(f->part[i].part_off);
        #line 3152 
        attr->part[i].part_size = __builtin_bswap32(f->part[i].part_size);
        #line 3154 
        attr->part[i].part_len = __builtin_bswap32(f->part[i].part_len);
        #line 3156 
        attr->part[i].part_status = __builtin_bswap32(f->part[i].part_status);
        #line 3145 
        i ++;
      }
    }
    #line 3160 
    flash->status = (enum bfa_status)status;
    #line 3161 
    bfa_flash_cb(flash);
    #line 3162 
    break;
    #line 3163 
    case 131: 
              #line 3163 
    ;
    #line 3164 
    status = __builtin_bswap32((m.write)->status);
    #line 3165 
    if (status != 0U || flash->residue == 0U) {
      #line 3166 
      flash->status = (enum bfa_status)status;
      #line 3167 
      bfa_flash_cb(flash);
    }
    else 
         #line 3169 
         bfa_flash_write_send(flash);
    #line 3170 
    break;
    #line 3171 
    case 132: 
              #line 3171 
    ;
    #line 3172 
    status = __builtin_bswap32((m.read)->status);
    #line 3173 
    if (status != 0U) {
      #line 3174 
      flash->status = (enum bfa_status)status;
      #line 3175 
      bfa_flash_cb(flash);
    }
    else {
      #line 3177 
      u32 len = __builtin_bswap32((m.read)->length);
      #line 3178 
      memcpy((void *)(flash->ubuf + (unsigned long)flash->offset),(void *)flash->dbuf_kva,(unsigned long)len);
      #line 3180 
      flash->residue -= len;
      #line 3181 
      flash->offset += len;
      #line 3182 
      if (flash->residue == 0U) {
        #line 3183 
        flash->status = (enum bfa_status)status;
        #line 3184 
        bfa_flash_cb(flash);
      }
      else 
           #line 3186 
           bfa_flash_read_send((void *)flash);
    }
    #line 3188 
    break;
    #line 3189 
    case 133: 
              #line 3189 
    ;
    #line 3190 
    case 255: 
              #line 3190 
    ;
    #line 3191 
    break;
    #line 3192 
    default: 
             #line 3192 
    ;
    {
      #line 3193 
      int __ret_warn_on = 1;
      #line 3193 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 3194 
        ldv_inline_asm();
        #line 3195 
        ldv_inline_asm();
      }
      #line 3193 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
  }
  #line 3196 
  return;
}

#line 3201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
u32 bfa_nw_flash_meminfo(void)
{
  #line 3203 
  int __y;
  #line 3203 
  int __y_0;
  #line 3203 
  __y = 256;
  #line 3203 
  __y_0 = 2048;
  #line 3203 
  ;
  #line 3203 
  return (unsigned int)(((((((unsigned long)(__y_0 + -1) + 65792UL) / (unsigned long)__y_0) * (unsigned long)__y_0) + (unsigned long)(
          __y + -1)) / (unsigned long)__y) * (unsigned long)__y);
}

#line 3214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_flash_attach(struct bfa_flash *flash, struct bfa_ioc *ioc, void *dev)
{
  #line 3216 
  flash->ioc = ioc;
  #line 3217 
  flash->cbfn = (void (*)(void *, enum bfa_status ))0;
  #line 3218 
  flash->cbarg = (void *)0;
  #line 3219 
  flash->op_busy = 0U;
  #line 3221 
  bfa_nw_ioc_mbox_regisr(flash->ioc,(enum bfi_mclass)BFI_MC_FLASH,& bfa_flash_intr,(void *)flash);
  #line 3222 
  flash->ioc_notify.cbfn = & bfa_flash_notify;
  #line 3222 
  flash->ioc_notify.cbarg = (void *)flash;
  #line 3223 
  list_add_tail_2(& flash->ioc_notify.qe,& (flash->ioc)->notify_q);
  #line 3224 
  return;
}

#line 3234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
void bfa_nw_flash_memclaim(struct bfa_flash *flash, u8 *dm_kva, u64 dm_pa)
{
  #line 3240 
  int __y_2;
  #line 3240 
  int __y_3;
  #line 3238 
  int __y;
  #line 3239 
  int __y_0;
  #line 3239 
  int __y_1;
  #line 3236 
  flash->dbuf_kva = dm_kva;
  #line 3237 
  flash->dbuf_pa = dm_pa;
  #line 3238 
  __y = 2048;
  #line 3238 
  ;
  #line 3238 
  memset((void *)flash->dbuf_kva,0,((((unsigned long)(__y + -1) + 65792UL) / (unsigned long)__y) * (unsigned long)__y));
  #line 3239 
  __y_0 = 256;
  #line 3239 
  __y_1 = 2048;
  #line 3239 
  ;
  #line 3239 
  dm_kva += (((((((unsigned long)(__y_1 + -1) + 65792UL) / (unsigned long)__y_1) * (unsigned long)__y_1) + (unsigned long)(
          __y_0 + -1)) / (unsigned long)__y_0) * (unsigned long)__y_0);
  #line 3240 
  __y_2 = 256;
  #line 3240 
  __y_3 = 2048;
  #line 3240 
  ;
  #line 3240 
  dm_pa = (unsigned long long)(((((((unsigned long)(__y_3 + -1) + 65792UL) / (unsigned long)__y_3) * (unsigned long)__y_3) + (unsigned long)(
          __y_2 + -1)) / (unsigned long)__y_2) * (unsigned long)__y_2) + dm_pa;
  #line 3241 
  return;
}

#line 3254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
enum bfa_status bfa_nw_flash_get_attr(struct bfa_flash *flash, struct bfa_flash_attr *attr, void (*cbfn)(void *, enum bfa_status ), void *cbarg)
{
  #line 3257 
  struct bfi_flash_query_req *msg = (struct bfi_flash_query_req *)(& flash->mb.msg);
  #line 3260 
  if (! bfa_nw_ioc_is_operational(flash->ioc)) 
                                               #line 3261 
                                               return BFA_STATUS_IOC_NON_OP;
  #line 3263 
  if (flash->op_busy != 0U) 
                            #line 3264 
                            return BFA_STATUS_DEVBUSY;
  #line 3266 
  flash->op_busy = 1U;
  #line 3267 
  flash->cbfn = cbfn;
  #line 3268 
  flash->cbarg = cbarg;
  #line 3269 
  flash->ubuf = (u8 *)attr;
  #line 3271 
  msg->mh.msg_class = (unsigned char)3U;
  #line 3271 
  msg->mh.msg_id = (unsigned char)1U;
  #line 3271 
  msg->mh.mtag.h2i.fn_lpu = (flash->ioc)->port_id;
  #line 3273 
  __bfa_alen_set(& msg->alen,1032U,flash->dbuf_pa);
  #line 3274 
  bfa_nw_ioc_mbox_queue(flash->ioc,& flash->mb,(void (*)(void *))0,(void *)0);
  #line 3276 
  return BFA_STATUS_OK;
}

#line 3294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
enum bfa_status bfa_nw_flash_update_part(struct bfa_flash *flash, u32 type, u8 instance, void *buf, u32 len, u32 offset, void (*cbfn)(void *, enum bfa_status ), void *cbarg)
{
  #line 3298 
  if (! bfa_nw_ioc_is_operational(flash->ioc)) 
                                               #line 3299 
                                               return BFA_STATUS_IOC_NON_OP;
  #line 3304 
  if (len == 0U || (len & 3U) != 0U) 
                                     #line 3305 
                                     return BFA_STATUS_FLASH_BAD_LEN;
  #line 3307 
  if (type == 7U) 
                  #line 3308 
                  return BFA_STATUS_EINVAL;
  #line 3310 
  if (flash->op_busy != 0U) 
                            #line 3311 
                            return BFA_STATUS_DEVBUSY;
  #line 3313 
  flash->op_busy = 1U;
  #line 3314 
  flash->cbfn = cbfn;
  #line 3315 
  flash->cbarg = cbarg;
  #line 3316 
  flash->type = type;
  #line 3317 
  flash->instance = instance;
  #line 3318 
  flash->residue = len;
  #line 3319 
  flash->offset = 0U;
  #line 3320 
  flash->addr_off = offset;
  #line 3321 
  flash->ubuf = (u8 *)buf;
  #line 3323 
  bfa_flash_write_send(flash);
  #line 3325 
  return BFA_STATUS_OK;
}

#line 3343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/brocade/bna/bfa_ioc.c"
enum bfa_status bfa_nw_flash_read_part(struct bfa_flash *flash, u32 type, u8 instance, void *buf, u32 len, u32 offset, void (*cbfn)(void *, enum bfa_status ), void *cbarg)
{
  #line 3347 
  if (! bfa_nw_ioc_is_operational(flash->ioc)) 
                                               #line 3348 
                                               return BFA_STATUS_IOC_NON_OP;
  #line 3353 
  if (len == 0U || (len & 3U) != 0U) 
                                     #line 3354 
                                     return BFA_STATUS_FLASH_BAD_LEN;
  #line 3356 
  if (flash->op_busy != 0U) 
                            #line 3357 
                            return BFA_STATUS_DEVBUSY;
  #line 3359 
  flash->op_busy = 1U;
  #line 3360 
  flash->cbfn = cbfn;
  #line 3361 
  flash->cbarg = cbarg;
  #line 3362 
  flash->type = type;
  #line 3363 
  flash->instance = instance;
  #line 3364 
  flash->residue = len;
  #line 3365 
  flash->offset = 0U;
  #line 3366 
  flash->addr_off = offset;
  #line 3367 
  flash->ubuf = (u8 *)buf;
  #line 3369 
  bfa_flash_read_send((void *)flash);
  #line 3371 
  return BFA_STATUS_OK;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
#line 95 
int emg_del_timer(struct timer_list *arg0);
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
static void INIT_LIST_HEAD_3(struct list_head *list)
{
  #line 139 
  ldv_init_list_head(list);
  #line 140 
  return;
}

#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires)
{
  #line 672 
  return emg_mod_timer(timer,expires);
}

#line 676  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/0/concurrency safety/weaver/bfa_ioc.i.aux"
static int cif_del_timer(struct timer_list *timer)
{
  #line 680 
  return emg_del_timer(timer);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 41 
  return (_Bool)(((long)(ptr == (void *)0) != 0L || (long)((unsigned long)ptr > 18446744073709547520UL) != 0L) != 0);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
#line 309 
void emg_dispatch_deregister_12(struct pci_driver *arg0);
#line 119 
#line 355 
void emg_dispatch_deregister_17(struct net_device *arg0);
#line 120 
#line 225 
void emg_dispatch_deregister_6(struct file_operations *arg0);
#line 121 
#line 264 
void emg_dispatch_instance_deregister_7(struct timer_list *arg0);
#line 122 
#line 273 
void emg_dispatch_instance_deregister_8(struct timer_list *arg0);
#line 123 
#line 298 
void emg_dispatch_instance_register_11(struct timer_list *arg0);
#line 124 
#line 282 
void emg_dispatch_irq_deregister_9(int arg0);
#line 125 
#line 329 
void emg_dispatch_irq_register_16(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 126 
#line 318 
void emg_dispatch_register_15(struct net_device *arg0);
#line 127 
#line 165 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 128 
#line 176 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 129 
#line 2408 
void *emg_entry_point_insmod(void *arg0);
#line 130 
#line 364 
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_drvinfo(void *arg0);
#line 131 
#line 541 
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_fwsave(void *arg0);
#line 132 
#line 718 
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_fwtrc(void *arg0);
#line 133 
#line 895 
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_regrd(void *arg0);
#line 134 
#line 1070 
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_regwr(void *arg0);
#line 137 
#line 1221 
void *emg_interrupt_interrupt_scenario_bnad_msix_rx(void *arg0);
#line 138 
#line 1284 
void *emg_interrupt_interrupt_scenario_bnad_msix_tx(void *arg0);
#line 140 
#line 1347 
void *emg_net_random_allocationless_scenario_bnad_flash_device(void *arg0);
#line 141 
#line 1760 
void *emg_pci_pci_scenario_bnad_pci_driver(void *arg0);
#line 147 
#line 1938 
void *emg_timer_timer_scenario_9(void *arg0);
#line 149 
#line 2437 
int main(void);
#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 155  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 165  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 166 
  int ret;
  #line 167 
  struct emg_struct_pci_scenario_bnad_pci_driver_26 *cf_arg_26;
  #line 168 
  cf_arg_26 = (struct emg_struct_pci_scenario_bnad_pci_driver_26 *)ldv_xmalloc(16UL);
  #line 169 
  cf_arg_26->arg0 = arg0;
  #line 170 
  ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_pci_pci_scenario_bnad_pci_driver,(void *)cf_arg_26);
  #line 171 
  __VERIFIER_assume(ret == 0);
  #line 172 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 177 
  int ret;
  #line 178 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_18;
  #line 179 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_19;
  #line 180 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_20;
  #line 181 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_21;
  #line 182 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_22;
  #line 183 
  switch (ldv_undef_int()) {
    #line 184 
    case 0: 
            #line 184 
    ;
    #line 185 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)ldv_xmalloc(16UL);
    #line 186 
    cf_arg_18->arg0 = arg0;
    #line 187 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_bnad_debugfs_op_drvinfo,(void *)cf_arg_18);
    #line 188 
    __VERIFIER_assume(ret == 0);
    #line 189 
    break;
    #line 191 
    case 1: 
            #line 191 
    ;
    #line 192 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)ldv_xmalloc(16UL);
    #line 193 
    cf_arg_19->arg0 = arg0;
    #line 194 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_bnad_debugfs_op_fwsave,(void *)cf_arg_19);
    #line 195 
    __VERIFIER_assume(ret == 0);
    #line 196 
    break;
    #line 198 
    case 2: 
            #line 198 
    ;
    #line 199 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)ldv_xmalloc(16UL);
    #line 200 
    cf_arg_20->arg0 = arg0;
    #line 201 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_bnad_debugfs_op_fwtrc,(void *)cf_arg_20);
    #line 202 
    __VERIFIER_assume(ret == 0);
    #line 203 
    break;
    #line 205 
    case 3: 
            #line 205 
    ;
    #line 206 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)ldv_xmalloc(16UL);
    #line 207 
    cf_arg_21->arg0 = arg0;
    #line 208 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_bnad_debugfs_op_regrd,(void *)cf_arg_21);
    #line 209 
    __VERIFIER_assume(ret == 0);
    #line 210 
    break;
    #line 212 
    case 4: 
            #line 212 
    ;
    #line 213 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)ldv_xmalloc(16UL);
    #line 214 
    cf_arg_22->arg0 = arg0;
    #line 215 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_bnad_debugfs_op_regwr,(void *)cf_arg_22);
    #line 216 
    __VERIFIER_assume(ret == 0);
    #line 217 
    break;
    #line 219 
    default: 
             #line 219 
    ;
    #line 219 
    __VERIFIER_assume(0);
  }
  #line 221 
  return;
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct file_operations *arg0)
{
  #line 226 
  int ret;
  #line 227 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_18;
  #line 228 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_19;
  #line 229 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_20;
  #line 230 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_21;
  #line 231 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *cf_arg_22;
  #line 232 
  switch (ldv_undef_int()) {
    #line 233 
    case 0: 
            #line 233 
    ;
    #line 234 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 235 
    __VERIFIER_assume(ret == 0);
    #line 236 
    break;
    #line 238 
    case 1: 
            #line 238 
    ;
    #line 239 
    ret = pthread_join(emg_thread_19,(void **)0);
    #line 240 
    __VERIFIER_assume(ret == 0);
    #line 241 
    break;
    #line 243 
    case 2: 
            #line 243 
    ;
    #line 244 
    ret = pthread_join(emg_thread_20,(void **)0);
    #line 245 
    __VERIFIER_assume(ret == 0);
    #line 246 
    break;
    #line 248 
    case 3: 
            #line 248 
    ;
    #line 249 
    ret = pthread_join(emg_thread_21,(void **)0);
    #line 250 
    __VERIFIER_assume(ret == 0);
    #line 251 
    break;
    #line 253 
    case 4: 
            #line 253 
    ;
    #line 254 
    ret = pthread_join(emg_thread_22,(void **)0);
    #line 255 
    __VERIFIER_assume(ret == 0);
    #line 256 
    break;
    #line 258 
    default: 
             #line 258 
    ;
    #line 258 
    __VERIFIER_assume(0);
  }
  #line 260 
  return;
}

#line 264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_7(struct timer_list *arg0)
{
  #line 265 
  int ret;
  #line 266 
  struct emg_struct_timer_scenario_9_27 *cf_arg_27;
  #line 267 
  ret = pthread_join(emg_thread_27,(void **)0);
  #line 268 
  __VERIFIER_assume(ret == 0);
  #line 269 
  return;
}

#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_8(struct timer_list *arg0)
{
  #line 274 
  int ret;
  #line 275 
  struct emg_struct_timer_scenario_9_27 *cf_arg_27;
  #line 276 
  ret = pthread_join(emg_thread_27,(void **)0);
  #line 277 
  __VERIFIER_assume(ret == 0);
  #line 278 
  return;
}

#line 282  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_9(int arg0)
{
  #line 283 
  int ret;
  #line 284 
  struct emg_struct_free_irq_9 *cf_arg_23;
  #line 285 
  struct emg_struct_free_irq_9 *cf_arg_24;
  #line 286 
  if (ldv_undef_int() != 0) {
    #line 287 
    ret = pthread_join(emg_thread_23,(void **)0);
    #line 288 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 291 
    ret = pthread_join(emg_thread_24,(void **)0);
    #line 292 
    __VERIFIER_assume(ret == 0);
  }
  #line 294 
  return;
}

#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_11(struct timer_list *arg0)
{
  #line 299 
  int ret;
  #line 300 
  struct emg_struct_timer_scenario_9_27 *cf_arg_27;
  #line 301 
  cf_arg_27 = (struct emg_struct_timer_scenario_9_27 *)ldv_xmalloc(16UL);
  #line 302 
  cf_arg_27->arg0 = arg0;
  #line 303 
  ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_timer_timer_scenario_9,(void *)cf_arg_27);
  #line 304 
  __VERIFIER_assume(ret == 0);
  #line 305 
  return;
}

#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct pci_driver *arg0)
{
  #line 310 
  int ret;
  #line 311 
  struct emg_struct_pci_scenario_bnad_pci_driver_26 *cf_arg_26;
  #line 312 
  ret = pthread_join(emg_thread_26,(void **)0);
  #line 313 
  __VERIFIER_assume(ret == 0);
  #line 314 
  return;
}

#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_15(struct net_device *arg0)
{
  #line 319 
  int ret;
  #line 320 
  struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 *cf_arg_25;
  #line 321 
  cf_arg_25 = (struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 *)ldv_xmalloc(16UL);
  #line 322 
  cf_arg_25->arg0 = arg0;
  #line 323 
  ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_bnad_flash_device,(void *)cf_arg_25);
  #line 324 
  __VERIFIER_assume(ret == 0);
  #line 325 
  return;
}

#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_16(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 330 
  int ret;
  #line 331 
  struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *cf_arg_23;
  #line 332 
  struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *cf_arg_24;
  #line 333 
  if (ldv_undef_int() != 0) {
    #line 334 
    cf_arg_23 = (struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *)ldv_xmalloc(40UL);
    #line 335 
    cf_arg_23->arg0 = arg0;
    #line 336 
    cf_arg_23->arg1 = arg1;
    #line 337 
    cf_arg_23->arg2 = arg2;
    #line 338 
    cf_arg_23->arg3 = arg3;
    #line 339 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_bnad_msix_rx,(void *)cf_arg_23);
    #line 340 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 343 
    cf_arg_24 = (struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *)ldv_xmalloc(40UL);
    #line 344 
    cf_arg_24->arg0 = arg0;
    #line 345 
    cf_arg_24->arg1 = arg1;
    #line 346 
    cf_arg_24->arg2 = arg2;
    #line 347 
    cf_arg_24->arg3 = arg3;
    #line 348 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_bnad_msix_tx,(void *)cf_arg_24);
    #line 349 
    __VERIFIER_assume(ret == 0);
  }
  #line 351 
  return;
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_17(struct net_device *arg0)
{
  #line 356 
  int ret;
  #line 357 
  struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 *cf_arg_25;
  #line 358 
  ret = pthread_join(emg_thread_25,(void **)0);
  #line 359 
  __VERIFIER_assume(ret == 0);
  #line 360 
  return;
}

#line 364  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_drvinfo(void *arg0)
{
  #line 367 
  struct file_operations *emg_18_container;
  #line 368 
  long long emg_18_emg_param_1_0;
  #line 369 
  char *emg_18_emg_param_1_2;
  #line 370 
  char *emg_18_emg_param_1_4;
  #line 371 
  int emg_18_emg_param_2_1;
  #line 372 
  long long *emg_18_emg_param_3_3;
  #line 373 
  long long *emg_18_emg_param_3_5;
  #line 374 
  struct file *emg_18_resource_0;
  #line 375 
  struct inode *emg_18_resource_1;
  #line 376 
  int emg_18_ret;
  #line 377 
  unsigned long emg_18_size_cnt;
  #line 378 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 379 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 380 
  int emg_repeat_cnt_call_18 = 1;
  #line 382 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *data = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)arg0;
  #line 386 
  emg_18_ret = ldv_undef_int();
  #line 387 
  emg_18_container = emg_alias_bnad_debugfs_op_drvinfo;
  #line 388 
  emg_18_ret = ldv_undef_int();
  #line 390 
  __VERIFIER_assume(data->arg0 == emg_alias_bnad_debugfs_op_drvinfo);
  #line 392 
  if (data != (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)0) {
    #line 393 
    emg_18_container = data->arg0;
    #line 394 
    ldv_free((void *)data);
  }
  #line 399 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 400 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 404 
  goto emg_main_18;
  #line 408 
  return (void *)0;
  #line 411 
  emg_call_18: 
               #line 411 
  ;
  #line 412 
  if (ldv_undef_int() != 0) {
    #line 413 
    switch (ldv_undef_int()) {
      #line 414 
      case 0: 
              #line 414 
      ;
      #line 416 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 416 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 417 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 417 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 421 
      emg_wrapper_bnad_debugfs_read(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 425 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 426 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 428 
      break;
      #line 430 
      case 1: 
              #line 430 
      ;
      #line 432 
      emg_wrapper_bnad_debugfs_lseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 434 
      break;
      #line 436 
      case 2: 
              #line 436 
      ;
      #line 443 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 444 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 444 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 445 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 445 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 449 
      if (emg_18_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 450 
        (*(emg_18_container->write))(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 455 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 456 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 458 
      break;
      #line 460 
      default: 
               #line 460 
      ;
      #line 460 
      __VERIFIER_assume(0);
    }
    #line 463 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 464 
      emg_repeat_cnt_call_18 --;
      #line 466 
      goto emg_call_18;
    }
    else 
         #line 468 
         __VERIFIER_assume(0);
  }
  else {
    #line 474 
    emg_wrapper_bnad_debugfs_buffer_release(emg_18_resource_1,emg_18_resource_0);
    #line 477 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 478 
      emg_repeat_cnt_main_18_0 --;
      #line 480 
      goto emg_main_18;
    }
    else 
         #line 482 
         __VERIFIER_assume(0);
  }
  #line 488 
  return (void *)0;
  #line 491 
  emg_main_18: 
               #line 491 
  ;
  #line 492 
  if (ldv_undef_int() != 0) {
    #line 494 
    emg_18_ret = emg_wrapper_bnad_debugfs_open_drvinfo(emg_18_resource_1,emg_18_resource_0);
    #line 499 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 502 
    if (ldv_undef_int() != 0) {
      #line 504 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 508 
      goto emg_call_18;
    }
    else {
      #line 513 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 516 
      if (emg_repeat_cnt_main_18_1 > 0) {
        #line 517 
        emg_repeat_cnt_main_18_1 --;
        #line 519 
        goto emg_main_18;
      }
      else 
           #line 521 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 528 
       ldv_free((void *)emg_18_resource_0);
  #line 536 
  return (void *)0;
}

#line 541  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_fwsave(void *arg0)
{
  #line 544 
  struct file_operations *emg_19_container;
  #line 545 
  long long emg_19_emg_param_1_0;
  #line 546 
  char *emg_19_emg_param_1_2;
  #line 547 
  char *emg_19_emg_param_1_4;
  #line 548 
  int emg_19_emg_param_2_1;
  #line 549 
  long long *emg_19_emg_param_3_3;
  #line 550 
  long long *emg_19_emg_param_3_5;
  #line 551 
  struct file *emg_19_resource_0;
  #line 552 
  struct inode *emg_19_resource_1;
  #line 553 
  int emg_19_ret;
  #line 554 
  unsigned long emg_19_size_cnt;
  #line 555 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 556 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 557 
  int emg_repeat_cnt_call_19 = 1;
  #line 559 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *data = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)arg0;
  #line 563 
  emg_19_ret = ldv_undef_int();
  #line 564 
  emg_19_container = emg_alias_bnad_debugfs_op_fwsave;
  #line 565 
  emg_19_ret = ldv_undef_int();
  #line 567 
  __VERIFIER_assume(data->arg0 == emg_alias_bnad_debugfs_op_fwsave);
  #line 569 
  if (data != (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)0) {
    #line 570 
    emg_19_container = data->arg0;
    #line 571 
    ldv_free((void *)data);
  }
  #line 576 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 577 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 581 
  goto emg_main_19;
  #line 585 
  return (void *)0;
  #line 588 
  emg_call_19: 
               #line 588 
  ;
  #line 589 
  if (ldv_undef_int() != 0) {
    #line 590 
    switch (ldv_undef_int()) {
      #line 591 
      case 0: 
              #line 591 
      ;
      #line 593 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 593 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 594 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 594 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 598 
      emg_wrapper_bnad_debugfs_read(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 602 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 603 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 605 
      break;
      #line 607 
      case 1: 
              #line 607 
      ;
      #line 609 
      emg_wrapper_bnad_debugfs_lseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 611 
      break;
      #line 613 
      case 2: 
              #line 613 
      ;
      #line 620 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 621 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 621 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 622 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 622 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 626 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 627 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 632 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 633 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 635 
      break;
      #line 637 
      default: 
               #line 637 
      ;
      #line 637 
      __VERIFIER_assume(0);
    }
    #line 640 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 641 
      emg_repeat_cnt_call_19 --;
      #line 643 
      goto emg_call_19;
    }
    else 
         #line 645 
         __VERIFIER_assume(0);
  }
  else {
    #line 651 
    emg_wrapper_bnad_debugfs_buffer_release(emg_19_resource_1,emg_19_resource_0);
    #line 654 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 655 
      emg_repeat_cnt_main_19_1 --;
      #line 657 
      goto emg_main_19;
    }
    else 
         #line 659 
         __VERIFIER_assume(0);
  }
  #line 665 
  return (void *)0;
  #line 668 
  emg_main_19: 
               #line 668 
  ;
  #line 669 
  if (ldv_undef_int() != 0) {
    #line 671 
    emg_19_ret = emg_wrapper_bnad_debugfs_open_fwsave(emg_19_resource_1,emg_19_resource_0);
    #line 676 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 679 
    if (ldv_undef_int() != 0) {
      #line 681 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 685 
      goto emg_call_19;
    }
    else {
      #line 690 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 693 
      if (emg_repeat_cnt_main_19_0 > 0) {
        #line 694 
        emg_repeat_cnt_main_19_0 --;
        #line 696 
        goto emg_main_19;
      }
      else 
           #line 698 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 705 
       ldv_free((void *)emg_19_resource_0);
  #line 713 
  return (void *)0;
}

#line 718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_fwtrc(void *arg0)
{
  #line 721 
  struct file_operations *emg_20_container;
  #line 722 
  long long emg_20_emg_param_1_0;
  #line 723 
  char *emg_20_emg_param_1_2;
  #line 724 
  char *emg_20_emg_param_1_4;
  #line 725 
  int emg_20_emg_param_2_1;
  #line 726 
  long long *emg_20_emg_param_3_3;
  #line 727 
  long long *emg_20_emg_param_3_5;
  #line 728 
  struct file *emg_20_resource_0;
  #line 729 
  struct inode *emg_20_resource_1;
  #line 730 
  int emg_20_ret;
  #line 731 
  unsigned long emg_20_size_cnt;
  #line 732 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 733 
  int emg_repeat_cnt_call_20 = 1;
  #line 734 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 736 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *data = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)arg0;
  #line 740 
  emg_20_ret = ldv_undef_int();
  #line 741 
  emg_20_container = emg_alias_bnad_debugfs_op_fwtrc;
  #line 742 
  emg_20_ret = ldv_undef_int();
  #line 744 
  __VERIFIER_assume(data->arg0 == emg_alias_bnad_debugfs_op_fwtrc);
  #line 746 
  if (data != (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)0) {
    #line 747 
    emg_20_container = data->arg0;
    #line 748 
    ldv_free((void *)data);
  }
  #line 753 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 754 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 758 
  goto emg_main_20;
  #line 762 
  return (void *)0;
  #line 765 
  emg_call_20: 
               #line 765 
  ;
  #line 766 
  if (ldv_undef_int() != 0) {
    #line 767 
    switch (ldv_undef_int()) {
      #line 768 
      case 0: 
              #line 768 
      ;
      #line 770 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 770 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 771 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 771 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 775 
      emg_wrapper_bnad_debugfs_read(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 779 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 780 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 782 
      break;
      #line 784 
      case 1: 
              #line 784 
      ;
      #line 786 
      emg_wrapper_bnad_debugfs_lseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 788 
      break;
      #line 790 
      case 2: 
              #line 790 
      ;
      #line 797 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 798 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 798 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 799 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 799 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 803 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 804 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 809 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 810 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 812 
      break;
      #line 814 
      default: 
               #line 814 
      ;
      #line 814 
      __VERIFIER_assume(0);
    }
    #line 817 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 818 
      emg_repeat_cnt_call_20 --;
      #line 820 
      goto emg_call_20;
    }
    else 
         #line 822 
         __VERIFIER_assume(0);
  }
  else {
    #line 828 
    emg_wrapper_bnad_debugfs_buffer_release(emg_20_resource_1,emg_20_resource_0);
    #line 831 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 832 
      emg_repeat_cnt_main_20_1 --;
      #line 834 
      goto emg_main_20;
    }
    else 
         #line 836 
         __VERIFIER_assume(0);
  }
  #line 842 
  return (void *)0;
  #line 845 
  emg_main_20: 
               #line 845 
  ;
  #line 846 
  if (ldv_undef_int() != 0) {
    #line 848 
    emg_20_ret = emg_wrapper_bnad_debugfs_open_fwtrc(emg_20_resource_1,emg_20_resource_0);
    #line 853 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 856 
    if (ldv_undef_int() != 0) {
      #line 858 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 862 
      goto emg_call_20;
    }
    else {
      #line 867 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 870 
      if (emg_repeat_cnt_main_20_0 > 0) {
        #line 871 
        emg_repeat_cnt_main_20_0 --;
        #line 873 
        goto emg_main_20;
      }
      else 
           #line 875 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 882 
       ldv_free((void *)emg_20_resource_0);
  #line 890 
  return (void *)0;
}

#line 895  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_regrd(void *arg0)
{
  #line 898 
  struct file_operations *emg_21_container;
  #line 899 
  long long emg_21_emg_param_1_0;
  #line 900 
  char *emg_21_emg_param_1_2;
  #line 901 
  char *emg_21_emg_param_1_4;
  #line 902 
  int emg_21_emg_param_2_1;
  #line 903 
  long long *emg_21_emg_param_3_3;
  #line 904 
  long long *emg_21_emg_param_3_5;
  #line 905 
  struct file *emg_21_resource_0;
  #line 906 
  struct inode *emg_21_resource_1;
  #line 907 
  int emg_21_ret;
  #line 908 
  unsigned long emg_21_size_cnt;
  #line 909 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 910 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 911 
  int emg_repeat_cnt_call_21 = 1;
  #line 913 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *data = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)arg0;
  #line 917 
  emg_21_ret = ldv_undef_int();
  #line 918 
  emg_21_container = emg_alias_bnad_debugfs_op_regrd;
  #line 919 
  emg_21_ret = ldv_undef_int();
  #line 921 
  __VERIFIER_assume(data->arg0 == emg_alias_bnad_debugfs_op_regrd);
  #line 923 
  if (data != (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)0) {
    #line 924 
    emg_21_container = data->arg0;
    #line 925 
    ldv_free((void *)data);
  }
  #line 930 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 931 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 935 
  goto emg_main_21;
  #line 939 
  return (void *)0;
  #line 942 
  emg_call_21: 
               #line 942 
  ;
  #line 943 
  if (ldv_undef_int() != 0) {
    #line 944 
    switch (ldv_undef_int()) {
      #line 945 
      case 0: 
              #line 945 
      ;
      #line 947 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 947 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 948 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 948 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 952 
      emg_wrapper_bnad_debugfs_read_regrd(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 956 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 957 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 959 
      break;
      #line 961 
      case 1: 
              #line 961 
      ;
      #line 963 
      emg_wrapper_bnad_debugfs_lseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 965 
      break;
      #line 967 
      case 2: 
              #line 967 
      ;
      #line 974 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 975 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 975 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 976 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 976 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 980 
      emg_wrapper_bnad_debugfs_write_regrd(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 984 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 985 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 987 
      break;
      #line 989 
      default: 
               #line 989 
      ;
      #line 989 
      __VERIFIER_assume(0);
    }
    #line 992 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 993 
      emg_repeat_cnt_call_21 --;
      #line 995 
      goto emg_call_21;
    }
    else 
         #line 997 
         __VERIFIER_assume(0);
  }
  else {
    #line 1003 
    emg_wrapper_bnad_debugfs_release(emg_21_resource_1,emg_21_resource_0);
    #line 1006 
    if (emg_repeat_cnt_main_21_0 > 0) {
      #line 1007 
      emg_repeat_cnt_main_21_0 --;
      #line 1009 
      goto emg_main_21;
    }
    else 
         #line 1011 
         __VERIFIER_assume(0);
  }
  #line 1017 
  return (void *)0;
  #line 1020 
  emg_main_21: 
               #line 1020 
  ;
  #line 1021 
  if (ldv_undef_int() != 0) {
    #line 1023 
    emg_21_ret = emg_wrapper_bnad_debugfs_open_reg(emg_21_resource_1,emg_21_resource_0);
    #line 1028 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 1031 
    if (ldv_undef_int() != 0) {
      #line 1033 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 1037 
      goto emg_call_21;
    }
    else {
      #line 1042 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 1045 
      if (emg_repeat_cnt_main_21_1 > 0) {
        #line 1046 
        emg_repeat_cnt_main_21_1 --;
        #line 1048 
        goto emg_main_21;
      }
      else 
           #line 1050 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1057 
       ldv_free((void *)emg_21_resource_0);
  #line 1065 
  return (void *)0;
}

#line 1070  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_bnad_debugfs_op_regwr(void *arg0)
{
  #line 1073 
  struct file_operations *emg_22_container;
  #line 1074 
  long long emg_22_emg_param_1_0;
  #line 1075 
  char *emg_22_emg_param_1_2;
  #line 1076 
  int emg_22_emg_param_2_1;
  #line 1077 
  long long *emg_22_emg_param_3_3;
  #line 1078 
  struct file *emg_22_resource_0;
  #line 1079 
  struct inode *emg_22_resource_1;
  #line 1080 
  int emg_22_ret;
  #line 1081 
  unsigned long emg_22_size_cnt;
  #line 1082 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 1083 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 1084 
  int emg_repeat_cnt_call_22 = 1;
  #line 1086 
  struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *data = (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)arg0;
  #line 1090 
  emg_22_ret = ldv_undef_int();
  #line 1091 
  emg_22_container = emg_alias_bnad_debugfs_op_regwr;
  #line 1092 
  emg_22_ret = ldv_undef_int();
  #line 1094 
  __VERIFIER_assume(data->arg0 == emg_alias_bnad_debugfs_op_regwr);
  #line 1096 
  if (data != (struct emg_struct_character_driver_scenario_bnad_debugfs_op_drvinfo_18 *)0) {
    #line 1097 
    emg_22_container = data->arg0;
    #line 1098 
    ldv_free((void *)data);
  }
  #line 1103 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1104 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 1108 
  goto emg_main_22;
  #line 1112 
  return (void *)0;
  #line 1115 
  emg_call_22: 
               #line 1115 
  ;
  #line 1116 
  if (ldv_undef_int() != 0) {
    #line 1117 
    if (ldv_undef_int() != 0) 
                              #line 1119 
                              emg_wrapper_bnad_debugfs_lseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
    else {
      #line 1128 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 1129 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1129 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 1130 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1130 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 1134 
      emg_wrapper_bnad_debugfs_write_regwr(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 1138 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 1139 
      ldv_free((void *)emg_22_emg_param_3_3);
    }
    #line 1143 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 1144 
      emg_repeat_cnt_call_22 --;
      #line 1146 
      goto emg_call_22;
    }
    else 
         #line 1148 
         __VERIFIER_assume(0);
  }
  else {
    #line 1154 
    emg_wrapper_bnad_debugfs_release(emg_22_resource_1,emg_22_resource_0);
    #line 1157 
    if (emg_repeat_cnt_main_22_1 > 0) {
      #line 1158 
      emg_repeat_cnt_main_22_1 --;
      #line 1160 
      goto emg_main_22;
    }
    else 
         #line 1162 
         __VERIFIER_assume(0);
  }
  #line 1168 
  return (void *)0;
  #line 1171 
  emg_main_22: 
               #line 1171 
  ;
  #line 1172 
  if (ldv_undef_int() != 0) {
    #line 1174 
    emg_22_ret = emg_wrapper_bnad_debugfs_open_reg(emg_22_resource_1,emg_22_resource_0);
    #line 1179 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 1182 
    if (ldv_undef_int() != 0) {
      #line 1184 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 1188 
      goto emg_call_22;
    }
    else {
      #line 1193 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 1196 
      if (emg_repeat_cnt_main_22_0 > 0) {
        #line 1197 
        emg_repeat_cnt_main_22_0 --;
        #line 1199 
        goto emg_main_22;
      }
      else 
           #line 1201 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1208 
       ldv_free((void *)emg_22_resource_0);
  #line 1216 
  return (void *)0;
}

#line 1221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_bnad_msix_rx(void *arg0)
{
  #line 1224 
  enum irqreturn (*emg_23_callback)(int , void *);
  #line 1225 
  void *emg_23_data;
  #line 1226 
  int emg_23_line;
  #line 1227 
  enum irqreturn emg_23_ret_val;
  #line 1228 
  enum irqreturn (*emg_23_thread)(int , void *);
  #line 1230 
  struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *data = (struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *)arg0;
  #line 1233 
  emg_23_callback = & emg_wrapper_bnad_msix_rx;
  #line 1236 
  if (data != (struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *)0) {
    #line 1237 
    emg_23_line = data->arg0;
    #line 1238 
    emg_23_callback = data->arg1;
    #line 1239 
    emg_23_thread = data->arg2;
    #line 1240 
    emg_23_data = data->arg3;
    #line 1241 
    ldv_free((void *)data);
  }
  #line 1247 
  ldv_switch_to_interrupt_context();
  #line 1251 
  emg_23_ret_val = emg_wrapper_bnad_msix_rx(emg_23_line,emg_23_data);
  #line 1256 
  ldv_switch_to_process_context();
  #line 1259 
  if (ldv_undef_int() != 0) {
    #line 1261 
    __VERIFIER_assume(emg_23_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 1265 
    if (emg_23_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 1266 
                                                              (*emg_23_thread)(emg_23_line,emg_23_data);
  }
  else 
       #line 1271 
       __VERIFIER_assume(emg_23_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 1279 
  return (void *)0;
}

#line 1284  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_bnad_msix_tx(void *arg0)
{
  #line 1287 
  enum irqreturn (*emg_24_callback)(int , void *);
  #line 1288 
  void *emg_24_data;
  #line 1289 
  int emg_24_line;
  #line 1290 
  enum irqreturn emg_24_ret_val;
  #line 1291 
  enum irqreturn (*emg_24_thread)(int , void *);
  #line 1293 
  struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *data = (struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *)arg0;
  #line 1296 
  emg_24_callback = & emg_wrapper_bnad_msix_tx;
  #line 1299 
  if (data != (struct emg_struct_interrupt_scenario_bnad_msix_rx_23 *)0) {
    #line 1300 
    emg_24_line = data->arg0;
    #line 1301 
    emg_24_callback = data->arg1;
    #line 1302 
    emg_24_thread = data->arg2;
    #line 1303 
    emg_24_data = data->arg3;
    #line 1304 
    ldv_free((void *)data);
  }
  #line 1310 
  ldv_switch_to_interrupt_context();
  #line 1314 
  emg_24_ret_val = emg_wrapper_bnad_msix_tx(emg_24_line,emg_24_data);
  #line 1319 
  ldv_switch_to_process_context();
  #line 1322 
  if (ldv_undef_int() != 0) {
    #line 1324 
    __VERIFIER_assume(emg_24_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 1328 
    if (emg_24_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 1329 
                                                              (*emg_24_thread)(emg_24_line,emg_24_data);
  }
  else 
       #line 1334 
       __VERIFIER_assume(emg_24_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 1342 
  return (void *)0;
}

#line 1347  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_bnad_flash_device(void *arg0)
{
  #line 1350 
  struct net_device *emg_25_container;
  #line 1351 
  struct sk_buff *emg_25_emg_param_0_19;
  #line 1352 
  struct ethtool_flash *emg_25_emg_param_1_0;
  #line 1353 
  struct ethtool_coalesce *emg_25_emg_param_1_1;
  #line 1354 
  int emg_25_emg_param_1_10;
  #line 1355 
  unsigned int emg_25_emg_param_1_11;
  #line 1356 
  struct ethtool_ts_info *emg_25_emg_param_1_13;
  #line 1357 
  struct ethtool_wolinfo *emg_25_emg_param_1_14;
  #line 1358 
  int emg_25_emg_param_1_15;
  #line 1359 
  struct rtnl_link_stats64 *emg_25_emg_param_1_16;
  #line 1360 
  unsigned long long emg_25_emg_param_1_17;
  #line 1361 
  void *emg_25_emg_param_1_18;
  #line 1362 
  struct ethtool_drvinfo *emg_25_emg_param_1_2;
  #line 1363 
  unsigned short emg_25_emg_param_1_20;
  #line 1364 
  unsigned short emg_25_emg_param_1_22;
  #line 1365 
  struct ethtool_coalesce *emg_25_emg_param_1_24;
  #line 1366 
  struct ethtool_eeprom *emg_25_emg_param_1_25;
  #line 1367 
  struct ethtool_link_ksettings *emg_25_emg_param_1_27;
  #line 1368 
  struct ethtool_pauseparam *emg_25_emg_param_1_28;
  #line 1369 
  struct ethtool_ringparam *emg_25_emg_param_1_29;
  #line 1370 
  struct ethtool_eeprom *emg_25_emg_param_1_3;
  #line 1371 
  struct ethtool_stats *emg_25_emg_param_1_5;
  #line 1372 
  struct ethtool_link_ksettings *emg_25_emg_param_1_7;
  #line 1373 
  struct ethtool_pauseparam *emg_25_emg_param_1_8;
  #line 1374 
  struct ethtool_ringparam *emg_25_emg_param_1_9;
  #line 1375 
  unsigned char *emg_25_emg_param_2_12;
  #line 1376 
  unsigned short emg_25_emg_param_2_21;
  #line 1377 
  unsigned short emg_25_emg_param_2_23;
  #line 1378 
  unsigned char *emg_25_emg_param_2_26;
  #line 1379 
  unsigned char *emg_25_emg_param_2_4;
  #line 1380 
  unsigned long long *emg_25_emg_param_2_6;
  #line 1381 
  int emg_repeat_cnt_call_25 = 1;
  #line 1383 
  struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 *data = (struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 *)arg0;
  #line 1388 
  if (data != (struct emg_struct_random_allocationless_scenario_bnad_flash_device_25 *)0) {
    #line 1389 
    emg_25_container = data->arg0;
    #line 1390 
    ldv_free((void *)data);
  }
  #line 1395 
  goto emg_call_25;
  #line 1399 
  return (void *)0;
  #line 1402 
  emg_call_25: 
               #line 1402 
  ;
  #line 1403 
  switch (ldv_undef_int()) {
    #line 1404 
    case 0: 
            #line 1404 
    ;
    #line 1406 
    emg_25_emg_param_1_29 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1406 
    emg_25_emg_param_1_29 = emg_25_emg_param_1_29;
    #line 1410 
    emg_wrapper_bnad_set_ringparam(emg_25_container,emg_25_emg_param_1_29);
    #line 1414 
    ldv_free((void *)emg_25_emg_param_1_29);
    #line 1416 
    break;
    #line 1418 
    case 1: 
            #line 1418 
    ;
    #line 1420 
    emg_25_emg_param_1_28 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1420 
    emg_25_emg_param_1_28 = emg_25_emg_param_1_28;
    #line 1424 
    emg_wrapper_bnad_set_pauseparam(emg_25_container,emg_25_emg_param_1_28);
    #line 1428 
    ldv_free((void *)emg_25_emg_param_1_28);
    #line 1430 
    break;
    #line 1432 
    case 2: 
            #line 1432 
    ;
    #line 1434 
    emg_25_emg_param_1_27 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1434 
    emg_25_emg_param_1_27 = emg_25_emg_param_1_27;
    #line 1438 
    emg_wrapper_bnad_set_link_ksettings(emg_25_container,emg_25_emg_param_1_27);
    #line 1442 
    ldv_free((void *)emg_25_emg_param_1_27);
    #line 1444 
    break;
    #line 1446 
    case 3: 
            #line 1446 
    ;
    #line 1448 
    emg_25_emg_param_1_25 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1448 
    emg_25_emg_param_1_25 = emg_25_emg_param_1_25;
    #line 1449 
    emg_25_emg_param_2_26 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1449 
    emg_25_emg_param_2_26 = emg_25_emg_param_2_26;
    #line 1453 
    emg_wrapper_bnad_set_eeprom(emg_25_container,emg_25_emg_param_1_25,emg_25_emg_param_2_26);
    #line 1457 
    ldv_free((void *)emg_25_emg_param_1_25);
    #line 1458 
    ldv_free((void *)emg_25_emg_param_2_26);
    #line 1460 
    break;
    #line 1462 
    case 4: 
            #line 1462 
    ;
    #line 1464 
    emg_25_emg_param_1_24 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1464 
    emg_25_emg_param_1_24 = emg_25_emg_param_1_24;
    #line 1468 
    emg_wrapper_bnad_set_coalesce(emg_25_container,emg_25_emg_param_1_24);
    #line 1472 
    ldv_free((void *)emg_25_emg_param_1_24);
    #line 1474 
    break;
    #line 1476 
    case 5: 
            #line 1476 
    ;
    #line 1478 
    emg_wrapper_bnad_vlan_rx_kill_vid(emg_25_container,(unsigned short)((int)emg_25_emg_param_1_22),(unsigned short)((int)emg_25_emg_param_2_23));
    #line 1480 
    break;
    #line 1482 
    case 6: 
            #line 1482 
    ;
    #line 1484 
    emg_wrapper_bnad_vlan_rx_add_vid(emg_25_container,(unsigned short)((int)emg_25_emg_param_1_20),(unsigned short)((int)emg_25_emg_param_2_21));
    #line 1486 
    break;
    #line 1488 
    case 7: 
            #line 1488 
    ;
    #line 1490 
    (*emg_alias_eth_validate_addr)(emg_25_container);
    #line 1492 
    break;
    #line 1494 
    case 8: 
            #line 1494 
    ;
    #line 1496 
    emg_25_emg_param_0_19 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1496 
    emg_25_emg_param_0_19 = emg_25_emg_param_0_19;
    #line 1500 
    emg_wrapper_bnad_start_xmit(emg_25_emg_param_0_19,emg_25_container);
    #line 1504 
    ldv_free((void *)emg_25_emg_param_0_19);
    #line 1506 
    break;
    #line 1508 
    case 9: 
            #line 1508 
    ;
    #line 1510 
    bnad_set_rx_mode(emg_25_container);
    #line 1512 
    break;
    #line 1514 
    case 10: 
             #line 1514 
    ;
    #line 1516 
    emg_25_emg_param_1_18 = ldv_xmalloc_unknown_size(0UL);
    #line 1516 
    emg_25_emg_param_1_18 = emg_25_emg_param_1_18;
    #line 1520 
    emg_wrapper_bnad_set_mac_address(emg_25_container,emg_25_emg_param_1_18);
    #line 1524 
    ldv_free(emg_25_emg_param_1_18);
    #line 1526 
    break;
    #line 1528 
    case 11: 
             #line 1528 
    ;
    #line 1530 
    emg_wrapper_bnad_set_features(emg_25_container,emg_25_emg_param_1_17);
    #line 1532 
    break;
    #line 1534 
    case 12: 
             #line 1534 
    ;
    #line 1536 
    emg_wrapper_bnad_netpoll(emg_25_container);
    #line 1538 
    break;
    #line 1540 
    case 13: 
             #line 1540 
    ;
    #line 1542 
    emg_25_emg_param_1_16 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 1542 
    emg_25_emg_param_1_16 = emg_25_emg_param_1_16;
    #line 1546 
    emg_wrapper_bnad_get_stats64(emg_25_container,emg_25_emg_param_1_16);
    #line 1550 
    ldv_free((void *)emg_25_emg_param_1_16);
    #line 1552 
    break;
    #line 1554 
    case 14: 
             #line 1554 
    ;
    #line 1556 
    emg_wrapper_bnad_change_mtu(emg_25_container,emg_25_emg_param_1_15);
    #line 1558 
    break;
    #line 1560 
    case 15: 
             #line 1560 
    ;
    #line 1562 
    emg_25_emg_param_1_14 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1562 
    emg_25_emg_param_1_14 = emg_25_emg_param_1_14;
    #line 1566 
    emg_wrapper_bnad_get_wol(emg_25_container,emg_25_emg_param_1_14);
    #line 1570 
    ldv_free((void *)emg_25_emg_param_1_14);
    #line 1572 
    break;
    #line 1574 
    case 16: 
             #line 1574 
    ;
    #line 1576 
    emg_25_emg_param_1_13 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 1576 
    emg_25_emg_param_1_13 = emg_25_emg_param_1_13;
    #line 1580 
    ethtool_op_get_ts_info(emg_25_container,emg_25_emg_param_1_13);
    #line 1584 
    ldv_free((void *)emg_25_emg_param_1_13);
    #line 1586 
    break;
    #line 1588 
    case 17: 
             #line 1588 
    ;
    #line 1590 
    emg_25_emg_param_2_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1590 
    emg_25_emg_param_2_12 = emg_25_emg_param_2_12;
    #line 1594 
    emg_wrapper_bnad_get_strings(emg_25_container,emg_25_emg_param_1_11,emg_25_emg_param_2_12);
    #line 1598 
    ldv_free((void *)emg_25_emg_param_2_12);
    #line 1600 
    break;
    #line 1602 
    case 18: 
             #line 1602 
    ;
    #line 1604 
    emg_wrapper_bnad_get_sset_count(emg_25_container,emg_25_emg_param_1_10);
    #line 1606 
    break;
    #line 1608 
    case 19: 
             #line 1608 
    ;
    #line 1610 
    emg_25_emg_param_1_9 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1610 
    emg_25_emg_param_1_9 = emg_25_emg_param_1_9;
    #line 1614 
    emg_wrapper_bnad_get_ringparam(emg_25_container,emg_25_emg_param_1_9);
    #line 1618 
    ldv_free((void *)emg_25_emg_param_1_9);
    #line 1620 
    break;
    #line 1622 
    case 20: 
             #line 1622 
    ;
    #line 1624 
    emg_25_emg_param_1_8 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1624 
    emg_25_emg_param_1_8 = emg_25_emg_param_1_8;
    #line 1628 
    emg_wrapper_bnad_get_pauseparam(emg_25_container,emg_25_emg_param_1_8);
    #line 1632 
    ldv_free((void *)emg_25_emg_param_1_8);
    #line 1634 
    break;
    #line 1636 
    case 21: 
             #line 1636 
    ;
    #line 1638 
    emg_25_emg_param_1_7 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1638 
    emg_25_emg_param_1_7 = emg_25_emg_param_1_7;
    #line 1642 
    emg_wrapper_bnad_get_link_ksettings(emg_25_container,emg_25_emg_param_1_7);
    #line 1646 
    ldv_free((void *)emg_25_emg_param_1_7);
    #line 1648 
    break;
    #line 1650 
    case 22: 
             #line 1650 
    ;
    #line 1652 
    ethtool_op_get_link(emg_25_container);
    #line 1654 
    break;
    #line 1656 
    case 23: 
             #line 1656 
    ;
    #line 1658 
    emg_25_emg_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1658 
    emg_25_emg_param_1_5 = emg_25_emg_param_1_5;
    #line 1659 
    emg_25_emg_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1659 
    emg_25_emg_param_2_6 = emg_25_emg_param_2_6;
    #line 1663 
    emg_wrapper_bnad_get_ethtool_stats(emg_25_container,emg_25_emg_param_1_5,emg_25_emg_param_2_6);
    #line 1667 
    ldv_free((void *)emg_25_emg_param_1_5);
    #line 1668 
    ldv_free((void *)emg_25_emg_param_2_6);
    #line 1670 
    break;
    #line 1672 
    case 24: 
             #line 1672 
    ;
    #line 1674 
    emg_wrapper_bnad_get_eeprom_len(emg_25_container);
    #line 1676 
    break;
    #line 1678 
    case 25: 
             #line 1678 
    ;
    #line 1680 
    emg_25_emg_param_1_3 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
    #line 1680 
    emg_25_emg_param_1_3 = emg_25_emg_param_1_3;
    #line 1681 
    emg_25_emg_param_2_4 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1681 
    emg_25_emg_param_2_4 = emg_25_emg_param_2_4;
    #line 1685 
    emg_wrapper_bnad_get_eeprom(emg_25_container,emg_25_emg_param_1_3,emg_25_emg_param_2_4);
    #line 1689 
    ldv_free((void *)emg_25_emg_param_1_3);
    #line 1690 
    ldv_free((void *)emg_25_emg_param_2_4);
    #line 1692 
    break;
    #line 1694 
    case 26: 
             #line 1694 
    ;
    #line 1696 
    emg_25_emg_param_1_2 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1696 
    emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
    #line 1700 
    emg_wrapper_bnad_get_drvinfo(emg_25_container,emg_25_emg_param_1_2);
    #line 1704 
    ldv_free((void *)emg_25_emg_param_1_2);
    #line 1706 
    break;
    #line 1708 
    case 27: 
             #line 1708 
    ;
    #line 1710 
    emg_25_emg_param_1_1 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1710 
    emg_25_emg_param_1_1 = emg_25_emg_param_1_1;
    #line 1714 
    emg_wrapper_bnad_get_coalesce(emg_25_container,emg_25_emg_param_1_1);
    #line 1718 
    ldv_free((void *)emg_25_emg_param_1_1);
    #line 1720 
    break;
    #line 1722 
    case 28: 
             #line 1722 
    ;
    #line 1724 
    emg_25_emg_param_1_0 = (struct ethtool_flash *)ldv_xmalloc_unknown_size(0UL);
    #line 1724 
    emg_25_emg_param_1_0 = emg_25_emg_param_1_0;
    #line 1728 
    emg_wrapper_bnad_flash_device(emg_25_container,emg_25_emg_param_1_0);
    #line 1732 
    ldv_free((void *)emg_25_emg_param_1_0);
    #line 1735 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 1736 
      emg_repeat_cnt_call_25 --;
      #line 1738 
      goto emg_call_25;
    }
    else 
         #line 1740 
         __VERIFIER_assume(0);
    #line 1744 
    break;
    #line 1746 
    case 29: 
             #line 1746 
    ;
    #line 1750 
    break;
    #line 1752 
    default: 
             #line 1752 
    ;
    #line 1752 
    __VERIFIER_assume(0);
  }
  #line 1755 
  return (void *)0;
}

#line 1760  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_bnad_pci_driver(void *arg0)
{
  #line 1763 
  int emg_26_choice;
  #line 1764 
  struct pci_driver *emg_26_container;
  #line 1765 
  struct pci_device_id *emg_26_device_id;
  #line 1766 
  struct pci_dev *emg_26_resource_0;
  #line 1767 
  struct pm_message emg_26_resource_1;
  #line 1768 
  int emg_26_ret;
  #line 1769 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 1770 
  int emg_repeat_cnt_call_26_0 = 1;
  #line 1771 
  int emg_repeat_cnt_call_26_1 = 1;
  #line 1772 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 1774 
  struct emg_struct_pci_scenario_bnad_pci_driver_26 *data = (struct emg_struct_pci_scenario_bnad_pci_driver_26 *)arg0;
  #line 1778 
  emg_26_choice = 0;
  #line 1779 
  emg_26_ret = ldv_undef_int();
  #line 1780 
  emg_26_choice = 0;
  #line 1781 
  emg_26_container = emg_alias_bnad_pci_driver;
  #line 1782 
  emg_26_ret = ldv_undef_int();
  #line 1784 
  __VERIFIER_assume(data->arg0 == emg_alias_bnad_pci_driver);
  #line 1786 
  if (data != (struct emg_struct_pci_scenario_bnad_pci_driver_26 *)0) {
    #line 1787 
    emg_26_container = data->arg0;
    #line 1788 
    ldv_free((void *)data);
  }
  #line 1793 
  emg_26_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1794 
  emg_26_choice = __ldv_undef_int_range(0,2);
  #line 1795 
  emg_26_device_id = emg_26_container->id_table + (unsigned long)emg_26_choice;
  #line 1799 
  goto emg_main_26;
  #line 1803 
  return (void *)0;
  #line 1806 
  emg_call_26: 
               #line 1806 
  ;
  #line 1807 
  switch (ldv_undef_int()) {
    #line 1808 
    case 0: 
            #line 1808 
    ;
    #line 1813 
    if (emg_repeat_cnt_call_26_1 > 0) {
      #line 1814 
      emg_repeat_cnt_call_26_1 --;
      #line 1816 
      goto emg_call_26;
    }
    else 
         #line 1818 
         __VERIFIER_assume(0);
    #line 1822 
    break;
    #line 1824 
    case 1: 
            #line 1824 
    ;
    #line 1826 
    if (emg_26_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1827 
      emg_26_ret = (*(emg_26_container->suspend))(emg_26_resource_0,emg_26_resource_1); else 
                                                                    #line 1829 
                                                                    emg_26_ret = ldv_undef_int();
    #line 1835 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 1839 
    if (emg_26_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1840 
                                                                  (*(emg_26_container->resume))(emg_26_resource_0);
    #line 1844 
    if (emg_repeat_cnt_call_26_0 > 0) {
      #line 1845 
      emg_repeat_cnt_call_26_0 --;
      #line 1847 
      goto emg_call_26;
    }
    else 
         #line 1849 
         __VERIFIER_assume(0);
    #line 1853 
    break;
    #line 1855 
    case 2: 
            #line 1855 
    ;
    #line 1857 
    if (emg_26_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 1858 
      (*(emg_26_container->shutdown))(emg_26_resource_0);
    #line 1863 
    emg_wrapper_bnad_pci_remove(emg_26_resource_0);
    #line 1866 
    if (emg_repeat_cnt_main_26_0 > 0) {
      #line 1867 
      emg_repeat_cnt_main_26_0 --;
      #line 1869 
      goto emg_main_26;
    }
    else 
         #line 1871 
         __VERIFIER_assume(0);
    #line 1875 
    break;
    #line 1877 
    default: 
             #line 1877 
    ;
    #line 1877 
    __VERIFIER_assume(0);
  }
  #line 1880 
  return (void *)0;
  #line 1883 
  emg_main_26: 
               #line 1883 
  ;
  #line 1884 
  if (ldv_undef_int() != 0) {
    #line 1887 
    ldv_pre_probe();
    #line 1891 
    emg_26_ret = emg_wrapper_bnad_pci_probe(emg_26_resource_0,emg_26_device_id);
    #line 1896 
    emg_26_ret = ldv_post_probe(emg_26_ret);
    #line 1899 
    if (ldv_undef_int() != 0) {
      #line 1901 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 1905 
      goto emg_call_26;
    }
    else 
         #line 1910 
         __VERIFIER_assume(emg_26_ret != 0);
    #line 1914 
    if (emg_repeat_cnt_main_26_1 > 0) {
      #line 1915 
      emg_repeat_cnt_main_26_1 --;
      #line 1917 
      goto emg_main_26;
    }
    else 
         #line 1919 
         __VERIFIER_assume(0);
  }
  else 
       #line 1925 
       ldv_free((void *)emg_26_resource_0);
  #line 1933 
  return (void *)0;
}

#line 1938  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_9(void *arg0)
{
  #line 1941 
  struct timer_list *emg_27_container;
  #line 1942 
  unsigned long emg_27_emg_param_0_0;
  #line 1944 
  struct emg_struct_timer_scenario_9_27 *data = (struct emg_struct_timer_scenario_9_27 *)arg0;
  #line 1949 
  if (data != (struct emg_struct_timer_scenario_9_27 *)0) {
    #line 1950 
    emg_27_container = data->arg0;
    #line 1951 
    ldv_free((void *)data);
  }
  #line 1957 
  ldv_switch_to_interrupt_context();
  #line 1961 
  if (emg_27_container->function != (void (*)(struct timer_list *))0) 
    #line 1962 
    (*(emg_27_container->function))((struct timer_list *)emg_27_emg_param_0_0);
  #line 1968 
  ldv_switch_to_process_context();
  #line 1975 
  return (void *)0;
}

#line 1980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1983 
  struct pci_driver *emg_2_pci_driver;
  #line 1985 
  emg_2_pci_driver = emg_alias_bnad_pci_driver;
  #line 1986 
  if (ldv_undef_int() != 0) {
    #line 1988 
    emg_2_pci_driver = arg0;
    #line 1992 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1996 
    return 0;
  }
  else {
    #line 2000 
    return ldv_undef_int_negative();
  }
}

#line 2008  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2011 
  struct net_device *emg_3_netdev;
  #line 2013 
  if (ldv_undef_int() != 0) {
    #line 2015 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2019 
    return emg_3_netdev;
  }
  else 
       #line 2023 
       return (struct net_device *)0;
}

#line 2031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 2034 
  struct dentry *emg_4_dentry;
  #line 2035 
  struct inode *emg_4_inode;
  #line 2037 
  if (ldv_undef_int() != 0) {
    #line 2039 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2040 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2041 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 2042 
    emg_4_dentry->d_parent = arg1;
    #line 2043 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 2044 
    return emg_4_dentry;
  }
  else {
    #line 2048 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 2056  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 2059 
  struct dentry *emg_5_dentry;
  #line 2060 
  struct file_operations *emg_5_file_operations;
  #line 2061 
  struct inode *emg_5_inode;
  #line 2063 
  if (ldv_undef_int() != 0) {
    #line 2065 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2066 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2067 
    emg_5_inode->i_mode = arg1;
    #line 2068 
    emg_5_dentry->d_parent = arg2;
    #line 2069 
    emg_5_inode->i_private = arg3;
    #line 2070 
    emg_5_file_operations = arg4;
    #line 2071 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 2072 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 2076 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 2080 
    return emg_5_dentry;
  }
  else {
    #line 2084 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 2092  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_debugfs_remove(struct dentry *arg0)
{
  #line 2095 
  struct dentry *emg_6_dentry;
  #line 2096 
  struct file_operations *emg_6_file_operations;
  #line 2097 
  struct inode *emg_6_inode;
  #line 2100 
  emg_6_dentry = arg0;
  #line 2103 
  if (ldv_undef_int() != 0) {
    #line 2105 
    int tmp_0;
    #line 2105 
    if (IS_ERR_OR_NULL((void *)emg_6_dentry)) 
                                              #line 2105 
                                              tmp_0 = 0; else 
                                                              #line 2105 
                                                              tmp_0 = 1;
    #line 2105 
    __VERIFIER_assume(tmp_0);
    #line 2106 
    emg_6_inode = emg_6_dentry->d_inode;
    #line 2107 
    ldv_free((void *)emg_6_inode);
    #line 2108 
    ldv_free((void *)emg_6_dentry);
    #line 2112 
    emg_dispatch_deregister_6(emg_6_file_operations);
  }
  else {
    #line 2116 
    __VERIFIER_assume((int)IS_ERR_OR_NULL((void *)emg_6_dentry));
  }
  #line 2120 
  return;
}

#line 2125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer(struct timer_list *arg0)
{
  #line 2128 
  struct timer_list *emg_7_timer_list;
  #line 2131 
  emg_7_timer_list = arg0;
  #line 2135 
  emg_dispatch_instance_deregister_7(emg_7_timer_list);
  #line 2136 
  ;
  #line 2136 
  return 0;
}

#line 2142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2145 
  struct timer_list *emg_8_timer_list;
  #line 2148 
  emg_8_timer_list = arg0;
  #line 2152 
  emg_dispatch_instance_deregister_8(emg_8_timer_list);
  #line 2153 
  ;
  #line 2153 
  return 0;
}

#line 2159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2162 
  int emg_9_line;
  #line 2165 
  emg_9_line = (int)arg0;
  #line 2169 
  emg_dispatch_irq_deregister_9(emg_9_line);
  #line 2170 
  ;
  #line 2170 
  return (void *)0;
}

#line 2176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2179 
  struct net_device *emg_10_netdev;
  #line 2182 
  emg_10_netdev = arg0;
  #line 2183 
  ldv_free((void *)emg_10_netdev);
  #line 2186 
  return;
}

#line 2191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2194 
  struct timer_list *emg_11_timer_list;
  #line 2196 
  if (ldv_undef_int() != 0) {
    #line 2198 
    emg_11_timer_list = arg0;
    #line 2202 
    emg_dispatch_instance_register_11(emg_11_timer_list);
    #line 2206 
    return 1;
  }
  else 
       #line 2210 
       return 0;
}

#line 2218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2221 
  struct pci_driver *emg_12_pci_driver;
  #line 2223 
  emg_12_pci_driver = emg_alias_bnad_pci_driver;
  #line 2225 
  emg_12_pci_driver = arg0;
  #line 2229 
  emg_dispatch_deregister_12(emg_12_pci_driver);
  #line 2232 
  return;
}

#line 2237  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 2240 
  struct delayed_work *emg_13_delayed_work;
  #line 2241 
  struct work_struct *emg_13_emg_param_0_0;
  #line 2243 
  if (ldv_undef_int() != 0) {
    #line 2245 
    emg_13_delayed_work = arg1;
    #line 2249 
    emg_13_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 2249 
    emg_13_emg_param_0_0 = emg_13_emg_param_0_0;
    #line 2253 
    if (emg_13_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 2254 
      (*(emg_13_delayed_work->work.func))(emg_13_emg_param_0_0);
    #line 2259 
    ldv_free((void *)emg_13_emg_param_0_0);
    #line 2263 
    return (_Bool)1;
  }
  else 
       #line 2267 
       return (_Bool)0;
}

#line 2275  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 2278 
  struct work_struct *emg_14_work_struct;
  #line 2280 
  if (ldv_undef_int() != 0) {
    #line 2282 
    emg_14_work_struct = arg1;
    #line 2286 
    if (emg_14_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 2287 
      (*(emg_14_work_struct->func))(emg_14_work_struct);
    #line 2292 
    return (_Bool)1;
  }
  else 
       #line 2296 
       return (_Bool)0;
}

#line 2304  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2307 
  struct net_device *emg_15_netdev;
  #line 2308 
  int emg_15_ret;
  #line 2311 
  emg_15_ret = ldv_undef_int();
  #line 2312 
  emg_15_ret = ldv_undef_int();
  #line 2313 
  if (ldv_undef_int() != 0) {
    #line 2315 
    emg_15_netdev = arg0;
    #line 2319 
    emg_15_ret = emg_wrapper_bnad_open(emg_15_netdev);
    #line 2322 
    if (ldv_undef_int() != 0) {
      #line 2324 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 2328 
      emg_dispatch_register_15(emg_15_netdev);
      #line 2332 
      return 0;
    }
    else {
      #line 2336 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 2337 
      ldv_failed_register_netdev();
      #line 2338 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2343 
    ldv_failed_register_netdev();
    #line 2344 
    return ldv_undef_int_negative();
  }
}

#line 2352  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2355 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 2356 
  void *emg_16_data;
  #line 2357 
  int emg_16_line;
  #line 2358 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 2360 
  emg_16_callback = & emg_wrapper_bnad_msix_rx;
  #line 2361 
  if (ldv_undef_int() != 0) {
    #line 2363 
    emg_16_line = (int)arg0;
    #line 2364 
    emg_16_callback = arg1;
    #line 2365 
    emg_16_thread = (enum irqreturn (*)(int , void *))0;
    #line 2366 
    emg_16_data = arg4;
    #line 2370 
    emg_dispatch_irq_register_16(emg_16_line,emg_16_callback,emg_16_thread,emg_16_data);
    #line 2374 
    return 0;
  }
  else {
    #line 2378 
    return ldv_undef_int_negative();
  }
}

#line 2386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2389 
  struct net_device *emg_17_netdev;
  #line 2392 
  emg_17_netdev = arg0;
  #line 2396 
  emg_wrapper_bnad_stop(emg_17_netdev);
  #line 2400 
  emg_dispatch_deregister_17(emg_17_netdev);
  #line 2403 
  return;
}

#line 2408  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2411 
  int emg_1_ret;
  #line 2414 
  emg_1_ret = emg_bnad_module_init();
  #line 2415 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2418 
  if (ldv_undef_int() != 0) {
    #line 2420 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2424 
    emg_bnad_module_exit();
  }
  else 
       #line 2428 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2432 
  return (void *)0;
}

#line 2437  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/brocade/bna/bna.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2439 
  ldv_initialize();
  #line 2441 
  emg_entry_point_insmod((void *)0);
  #line 2443 
  return 0;
}

