/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/core.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 40 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_114 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_114 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_248 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_248 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_249 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_249 kgid_t;
#line 140 
struct dentry;
#line 141 
struct iattr;
#line 142 
struct super_block;
#line 143 
struct poll_table_struct;
#line 144 
struct fs_context;
#line 146 
struct kernfs_open_node;
#line 147 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_250 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_250 __anonCompField_kernfs_node_49 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_291 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_291 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_292 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_293 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_294 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_295 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_298 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_299 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_297 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_298 _addr_bnd ;
   struct __anonstruct__addr_pkey_299 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_296 {
   void *_addr ;
   union __anonunion_297 __anonCompField___anonstruct__sigfault_296_50 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_300 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_301 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_292 _kill ;
   struct __anonstruct__timer_293 _timer ;
   struct __anonstruct__rt_294 _rt ;
   struct __anonstruct__sigchld_295 _sigchld ;
   struct __anonstruct__sigfault_296 _sigfault ;
   struct __anonstruct__sigpoll_300 _sigpoll ;
   struct __anonstruct__sigsys_301 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_306 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_306 __anonCompField_kernel_siginfo_53 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_311 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_311 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_313 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_313 __anonCompField_task_struct_55 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_321 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_321 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__));
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__));
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__));
#line 670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ssp_isoc_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wReseved ;
   __le32 dwBytesPerInterval ;
} __attribute__((__packed__));
#line 682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
} __attribute__((__packed__));
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__));
#line 837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
} __attribute__((__packed__));
#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
} __attribute__((__packed__));
#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
} __attribute__((__packed__));
#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
} __attribute__((__packed__));
#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ssp_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __le32 bmAttributes ;
   __le16 wFunctionalitySupport ;
   __le16 wReserved ;
   __le32 bmSublinkSpeedAttr[1U] ;
} __attribute__((__packed__));
#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
struct usb_ptm_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
} __attribute__((__packed__));
#line 1134 
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5,
    USB_SPEED_SUPER_PLUS = 6
};
#line 1144 
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_336 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_335 {
   struct __anonstruct_336 __anonCompField___anonunion_335_56 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_335 __anonCompField_lockref_57 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_338 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_337 {
   struct __anonstruct_338 __anonCompField___anonunion_337_58 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_337 __anonCompField_qstr_59 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_339 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_340 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_339 __anonCompField_dentry_60 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_340 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_347 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_348 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_347 __anonCompField_io_cq_61 ;
   union __anonunion_348 __anonCompField_io_cq_62 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct iovec;
#line 291 
struct kiocb;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct iov_iter;
#line 295 
struct fscrypt_info;
#line 296 
struct fscrypt_operations;
#line 297 
struct fsverity_info;
#line 298 
struct fsverity_operations;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_349 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_349 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_350 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_350 __anonCompField_kqid_63 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_352 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_351 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_352 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_351 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_355 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_356 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_357 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_358 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_355 __anonCompField_inode_64 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_356 __anonCompField_inode_65 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_357 __anonCompField_inode_66 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_358 __anonCompField_inode_67 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_359 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_359 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_361 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_360 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_361 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_360 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
struct usb_device;
#line 281 
struct wusb_dev;
#line 282 
struct ep_device;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct usb_ssp_isoc_ep_comp_descriptor ssp_isoc_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
   int streams ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
#line 95 
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int resetting_device : 1 ;
   unsigned int authorized : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   struct work_struct reset_ws ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ssp_cap_descriptor *ssp_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
   struct usb_ptm_cap_descriptor *ptm_cap ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 424 
struct mon_bus;
#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   struct device *sysdev ;
   int busnum ;
   char *bus_name ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   unsigned int no_stop_on_short : 1 ;
   unsigned int no_sg_constraint : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct mutex devnum_next_mutex ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   unsigned int resuming_ports ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 469 
struct usb_tt;
#line 470 
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb2_lpm_parameters {
   unsigned int besl ;
   int timeout ;
};
#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   unsigned int rx_lanes ;
   unsigned int tx_lanes ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   u8 devaddr ;
   unsigned int can_submit : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   unsigned int lpm_capable : 1 ;
   unsigned int usb2_hw_lpm_capable : 1 ;
   unsigned int usb2_hw_lpm_besl_capable : 1 ;
   unsigned int usb2_hw_lpm_enabled : 1 ;
   unsigned int usb2_hw_lpm_allowed : 1 ;
   unsigned int usb3_lpm_u1_enabled : 1 ;
   unsigned int usb3_lpm_u2_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int port_is_suspended : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb2_lpm_parameters l1_params ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
   u16 hub_delay ;
};
#line 1340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1346 
struct urb;
#line 1349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   atomic_t suspend_wakeups ;
   unsigned int poisoned : 1 ;
};
#line 1550 
struct scatterlist;
#line 1550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct urb {
   struct kref kref ;
   int unlinked ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb *) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 2014 
struct percpu_ref;
#line 2015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 1565 
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_448 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_450 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_449 {
   unsigned long nr_segs ;
   struct __anonstruct_450 __anonCompField___anonunion_449_69 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_448 __anonCompField_iov_iter_68 ;
   union __anonunion_449 __anonCompField_iov_iter_70 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_10203 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_10203 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_469 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_469 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_470 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_470 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_481 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_482 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_483 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_484 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_481 ports ;
   struct __anonstruct_icmpt_482 icmpt ;
   struct __anonstruct_dnports_483 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_484 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_485 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_485 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_491 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_492 __anonCompField___anonstruct_491_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct __anonstruct_491 __anonCompField___anonunion_490_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_493 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_496 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_495 {
   struct __anonstruct_496 __anonCompField___anonunion_495_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_498 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __wsum csum ;
   struct __anonstruct_498 __anonCompField___anonunion_497_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_499 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_500 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_501 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_490 __anonCompField_sk_buff_87 ;
   union __anonunion_493 __anonCompField_sk_buff_88 ;
   union __anonunion_494 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_495 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_497 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_499 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_500 __anonCompField_sk_buff_95 ;
   union __anonunion_501 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_531 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_531 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_532 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_532 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_533 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_533 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_534 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_534 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_535 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_535 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_536 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_536 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_537 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_537 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_538 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_538 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_539 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_540 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_539 ifr_ifrn ;
   union __anonunion_ifr_ifru_540 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_559 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_559 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_562 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_562 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_564 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_563 {
   struct __anonstruct_564 __anonCompField___anonunion_563_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_563 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_565 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_565 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_566 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_566 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_567 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_567 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_568 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_568 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_570 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_570 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_583 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   struct __anonstruct_583 __anonCompField___anonunion_582_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_582 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_584 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_587 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_586 {
   struct keyring_index_key index_key ;
   struct __anonstruct_587 __anonCompField___anonunion_586_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_589 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_588 {
   union key_payload payload ;
   struct __anonstruct_589 __anonCompField___anonunion_588_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_584 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_585 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_586 __anonCompField_key_107 ;
   union __anonunion_588 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_592 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_592 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_593 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_593 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_595 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_594 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_595 __anonCompField___anonunion_594_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_594 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_599 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_599 __anonCompField___anonstruct_598_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_600 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_602 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_603 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_605 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_604 {
   union __anonunion_605 __anonCompField___anonstruct_604_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_606 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_607 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_608 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_610 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_597 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_600 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_601 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_602 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_603 test ;
   struct __anonstruct_604 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_606 info ;
   struct __anonstruct_query_607 query ;
   struct __anonstruct_raw_tracepoint_608 raw_tracepoint ;
   struct __anonstruct_609 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_610 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_643 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_643 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_645 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_644 {
   struct __anonstruct_tail_call_645 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_644 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_646 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_646 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_648 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_648 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_650 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_649 {
   struct __anonstruct_650 __anonCompField___anonunion_649_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_649 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_673 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_673 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_678 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_679 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_680 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_681 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_677 {
   struct __anonstruct_678 __anonCompField___anonunion_677_155 ;
   struct __anonstruct_679 __anonCompField___anonunion_677_156 ;
   struct __anonstruct_680 __anonCompField___anonunion_677_157 ;
   struct __anonstruct_xsk_681 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_677 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14885 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14886 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_682 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_683 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_682 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14885 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14886 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_683 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
} __attribute__((__packed__));
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
} __attribute__((__packed__));
#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
} __attribute__((__packed__));
#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
} __attribute__((__packed__));
#line 1569  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_cap_elem {
   u8 mac_cap_info[6U] ;
   u8 phy_cap_info[11U] ;
} __attribute__((__packed__));
#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mcs_nss_supp {
   __le16 rx_mcs_80 ;
   __le16 tx_mcs_80 ;
   __le16 rx_mcs_160 ;
   __le16 tx_mcs_160 ;
   __le16 rx_mcs_80p80 ;
   __le16 tx_mcs_80p80 ;
} __attribute__((__packed__));
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NL80211_IFTYPE_NAN = 12,
    NUM_NL80211_IFTYPES = 13,
    NL80211_IFTYPE_MAX = 12
};
#line 3263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};
#line 3320 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};
#line 3327 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};
#line 3446 
enum nl80211_key_mode {
    NL80211_KEY_RX_TX = 0,
    NL80211_KEY_NO_TX = 1,
    NL80211_KEY_SET_TX = 2
};
#line 3452 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};
#line 3463 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};
#line 3500 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    NL80211_AUTHTYPE_FILS_SK = 5,
    NL80211_AUTHTYPE_FILS_SK_PFS = 6,
    NL80211_AUTHTYPE_FILS_PK = 7,
    __NL80211_AUTHTYPE_NUM = 8,
    NL80211_AUTHTYPE_MAX = 7,
    NL80211_AUTHTYPE_AUTOMATIC = 8
};
#line 3521 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1,
    NL80211_MFP_OPTIONAL = 2
};
#line 4599 
enum nl80211_band {
    NL80211_BAND_2GHZ = 0,
    NL80211_BAND_5GHZ = 1,
    NL80211_BAND_60GHZ = 2,
    NL80211_BAND_6GHZ = 3,
    NUM_NL80211_BANDS = 4
};
#line 4914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};
#line 4925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};
#line 4936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};
#line 5237 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};
#line 5847  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};
#line 5903 
enum nl80211_bss_select_attr {
    __NL80211_BSS_SELECT_ATTR_INVALID = 0,
    NL80211_BSS_SELECT_ATTR_RSSI = 1,
    NL80211_BSS_SELECT_ATTR_BAND_PREF = 2,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST = 3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST = 4,
    NL80211_BSS_SELECT_ATTR_MAX = 3
};
#line 6138 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_ac {
   u16 cw_min ;
   u16 cw_max ;
   u16 cot ;
   u8 aifsn ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_wmm_rule {
   struct ieee80211_wmm_ac client[4U] ;
   struct ieee80211_wmm_ac ap[4U] ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   struct ieee80211_wmm_rule wmm_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
   bool has_wmm ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};
#line 233 
struct wiphy;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_channel {
   enum nl80211_band band ;
   u32 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};
#line 172 
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sta_he_cap {
   bool has_he ;
   struct ieee80211_he_cap_elem he_cap_elem ;
   struct ieee80211_he_mcs_nss_supp he_mcs_nss_supp ;
   u8 ppe_thres[25U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_sband_iftype_data {
   u16 types_mask ;
   struct ieee80211_sta_he_cap he_cap ;
};
#line 332 
enum ieee80211_edmg_bw_config {
    IEEE80211_EDMG_BW_CONFIG_4 = 4,
    IEEE80211_EDMG_BW_CONFIG_5 = 5,
    IEEE80211_EDMG_BW_CONFIG_6 = 6,
    IEEE80211_EDMG_BW_CONFIG_7 = 7,
    IEEE80211_EDMG_BW_CONFIG_8 = 8,
    IEEE80211_EDMG_BW_CONFIG_9 = 9,
    IEEE80211_EDMG_BW_CONFIG_10 = 10,
    IEEE80211_EDMG_BW_CONFIG_11 = 11,
    IEEE80211_EDMG_BW_CONFIG_12 = 12,
    IEEE80211_EDMG_BW_CONFIG_13 = 13,
    IEEE80211_EDMG_BW_CONFIG_14 = 14,
    IEEE80211_EDMG_BW_CONFIG_15 = 15
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_edmg {
   u8 channels ;
   enum ieee80211_edmg_bw_config bw_config ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum nl80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_edmg edmg_cap ;
   u16 n_iftype_data ;
   struct ieee80211_sband_iftype_data *iftype_data ;
};
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct key_params {
   u8 *key ;
   u8 *seq ;
   int key_len ;
   int seq_len ;
   u16 vlan_id ;
   u32 cipher ;
   enum nl80211_key_mode mode ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
   struct ieee80211_edmg edmg ;
};
#line 853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
   bool control_port_over_nl80211 ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
   u8 *psk ;
   u8 *sae_pwd ;
   u8 sae_pwd_len ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   u8 bssid[6U] ;
   s32 rssi_thold ;
   s32 per_band_rssi_thold[4U] ;
};
#line 2007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_plan {
   u32 interval ;
   u32 iterations ;
};
#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_select_adjust {
   enum nl80211_band band ;
   s8 delta ;
};
#line 2073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   u64 reqid ;
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   struct cfg80211_sched_scan_plan *scan_plans ;
   int n_scan_plans ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   bool relative_rssi_set ;
   s8 relative_rssi ;
   struct cfg80211_bss_select_adjust rssi_adjust ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   bool report_results ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   struct list_head list ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2109 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};
#line 2432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 *ssid ;
   u8 *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool control_port_over_nl80211 ;
   bool userspace_handles_dfs ;
   int mcast_rate[4U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct key_params *wep_keys ;
   int wep_tx_key ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
union __anonunion_param_736 {
   enum nl80211_band band_pref ;
   struct cfg80211_bss_select_adjust adjust ;
};
#line 2460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bss_selection {
   enum nl80211_bss_select_attr behaviour ;
   union __anonunion_param_736 param ;
};
#line 2531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 *bssid ;
   u8 *bssid_hint ;
   u8 *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
   bool pbss ;
   struct cfg80211_bss_selection bss_select ;
   u8 *prev_bssid ;
   u8 *fils_erp_username ;
   size_t fils_erp_username_len ;
   u8 *fils_erp_realm ;
   size_t fils_erp_realm_len ;
   u16 fils_erp_next_seq_num ;
   u8 *fils_erp_rrk ;
   size_t fils_erp_rrk_len ;
   bool want_1x ;
   struct ieee80211_edmg edmg ;
};
#line 2656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 *mask ;
   u8 *pattern ;
   int pattern_len ;
   int pkt_offset ;
};
#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 *wake_data ;
   u8 *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};
#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};
#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};
#line 4107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
   u32 beacon_int_min_gcd ;
};
#line 4165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};
#line 4198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};
#line 4221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support *tcp ;
};
#line 4241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};
#line 4312 
struct nla_policy;
#line 4312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*dumpit)(struct wiphy *, struct wireless_dev *, struct sk_buff *, void *, int , unsigned long *) ;
   struct nla_policy *policy ;
   unsigned int maxattr ;
};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy_iftype_ext_capab {
   enum nl80211_iftype iftype ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_ftm_738 {
   u32 preambles ;
   u32 bandwidths ;
   s8 max_bursts_exponent ;
   u8 max_ftms_per_burst ;
   u8 supported : 1 ;
   u8 asap : 1 ;
   u8 non_asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
};
#line 4360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_capabilities {
   unsigned int max_peers ;
   u8 report_ap_tsf : 1 ;
   u8 randomize_mac_addr : 1 ;
   struct __anonstruct_ftm_738 ftm ;
};
#line 4552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes *mgmt_stypes ;
   struct ieee80211_iface_combination *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[6U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_reqs ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   u32 max_sched_scan_plans ;
   u32 max_sched_scan_plan_interval ;
   u32 max_sched_scan_plan_iterations ;
   int n_cipher_suites ;
   u32 *cipher_suites ;
   int n_akm_suites ;
   u32 *akm_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 *extended_capabilities ;
   u8 *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   struct wiphy_iftype_ext_capab *iftype_ext_capab ;
   unsigned int num_iftype_ext_capab ;
   void *privid ;
   struct ieee80211_supported_band *bands[4U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap *ht_capa_mod_mask ;
   struct ieee80211_vht_cap *vht_capa_mod_mask ;
   struct list_head wdev_list ;
   possible_net_t _net ;
   struct iw_handler_def *wext ;
   struct wiphy_coalesce_support *coalesce ;
   struct wiphy_vendor_command *vendor_commands ;
   struct nl80211_vendor_cmd_info *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   u32 bss_select_support ;
   u8 nan_supported_bands ;
   u32 txq_limit ;
   u32 txq_memory_limit ;
   u32 txq_quantum ;
   u8 support_mbssid : 1 ;
   u8 support_only_he_mbssid : 1 ;
   struct cfg80211_pmsr_capabilities *pmsr_capa ;
   char priv[0U] ;
};
#line 4826 
struct cfg80211_conn;
#line 4827 
struct cfg80211_internal_bss;
#line 4828 
struct cfg80211_cached_keys;
#line 4829 
struct cfg80211_cqm_config;
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_wext_739 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};
#line 4912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool is_running ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   enum ieee80211_bss_type conn_bss_type ;
   u32 conn_owner_nlportid ;
   struct work_struct disconnect_wk ;
   u8 disconnect_bssid[6U] ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   u32 owner_nlportid ;
   bool nl_owner_dead ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   struct __anonstruct_wext_739 wext ;
   struct cfg80211_cqm_config *cqm_config ;
   struct list_head pmsr_list ;
   spinlock_t pmsr_lock ;
   struct work_struct pmsr_free_wk ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_747 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_746 {
   void *validation_data ;
   struct __anonstruct_747 __anonCompField___anonunion_746_162 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_746 __anonCompField_nla_policy_163 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_821 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_822 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_820 {
   struct __anonstruct_821 __anonCompField___anonunion_820_165 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_822 __anonCompField___anonunion_820_166 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_820 __anonCompField_tcf_result_167 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_824 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_824 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_837 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_837 __anonCompField_bdi_writeback_169 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_838 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_838 __anonCompField_bio_170 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_841 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_842 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_844 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_845 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_843 {
   struct __anonstruct_elv_844 elv ;
   struct __anonstruct_flush_845 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_846 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_841 __anonCompField_request_171 ;
   union __anonunion_842 __anonCompField_request_172 ;
   union __anonunion_843 __anonCompField_request_173 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_846 __anonCompField_request_174 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_865 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_865 __anonCompField_kernel_param_175 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_866 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_866 __anonCompField_bpf_prog_176 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_888 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_888 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_890 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_889 {
   __addrpair skc_addrpair ;
   struct __anonstruct_890 __anonCompField___anonunion_889_178 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_891 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_893 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_892 {
   __portpair skc_portpair ;
   struct __anonstruct_893 __anonCompField___anonunion_892_181 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_894 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_895 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_896 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_897 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_898 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_889 __anonCompField_sock_common_179 ;
   union __anonunion_891 __anonCompField_sock_common_180 ;
   union __anonunion_892 __anonCompField_sock_common_182 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_894 __anonCompField_sock_common_183 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_895 __anonCompField_sock_common_184 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_896 __anonCompField_sock_common_185 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_897 __anonCompField_sock_common_186 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_898 __anonCompField_sock_common_187 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_899 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_900 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_901 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_899 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_900 __anonCompField_sock_188 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_901 __anonCompField_sock_189 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_936 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_936 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 1430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
enum ieee80211_smps_mode {
    IEEE80211_SMPS_AUTOMATIC = 0,
    IEEE80211_SMPS_OFF = 1,
    IEEE80211_SMPS_STATIC = 2,
    IEEE80211_SMPS_DYNAMIC = 3,
    IEEE80211_SMPS_NUM_MODES = 4
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_conf {
   u32 flags ;
   int power_level ;
   int dynamic_ps_timeout ;
   u16 listen_interval ;
   u8 ps_dtim_period ;
   u8 long_frame_max_tx_count ;
   u8 short_frame_max_tx_count ;
   struct cfg80211_chan_def chandef ;
   bool radar_enabled ;
   enum ieee80211_smps_mode smps_mode ;
};
#line 1846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_cipher_scheme {
   u32 cipher ;
   u16 iftype ;
   u8 hdr_len ;
   u8 pn_len ;
   u8 pn_off ;
   u8 key_idx_off ;
   u8 key_idx_mask ;
   u8 key_idx_shift ;
   u8 mic_len ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_radiotap_timestamp_1024 {
   int units_pos ;
   s16 accuracy ;
};
#line 2487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_hw {
   struct ieee80211_conf conf ;
   struct wiphy *wiphy ;
   char *rate_control_algorithm ;
   void *priv ;
   unsigned long flags[1U] ;
   unsigned int extra_tx_headroom ;
   unsigned int extra_beacon_tailroom ;
   int vif_data_size ;
   int sta_data_size ;
   int chanctx_data_size ;
   int txq_data_size ;
   u16 queues ;
   u16 max_listen_interval ;
   s8 max_signal ;
   u8 max_rates ;
   u8 max_report_rates ;
   u8 max_rate_tries ;
   u16 max_rx_aggregation_subframes ;
   u16 max_tx_aggregation_subframes ;
   u8 max_tx_fragments ;
   u8 offchannel_tx_hw_queue ;
   u8 radiotap_mcs_details ;
   u16 radiotap_vht_details ;
   struct __anonstruct_radiotap_timestamp_1024 radiotap_timestamp ;
   netdev_features_t netdev_features ;
   u8 uapsd_queues ;
   u8 uapsd_max_sp_len ;
   u8 n_cipher_schemes ;
   struct ieee80211_cipher_scheme *cipher_schemes ;
   u8 max_nan_de_entries ;
   u8 tx_sk_pacing_shift ;
   u8 weight_multiplier ;
   u32 max_mtu ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_dma_buf {
   struct urb *urb ;
   void *buf ;
   dma_addr_t dma ;
   size_t len ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_mcu {
   struct mutex mutex ;
   u8 msg_seq ;
   struct mt7601u_dma_buf resp ;
   struct completion resp_cmpl ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_freq_cal {
   struct delayed_work work ;
   u8 freq ;
   bool enabled ;
   bool adjusting ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mac_stats {
   u64 rx_stat[6U] ;
   u64 tx_stat[6U] ;
   u64 aggr_stat[2U] ;
   u64 aggr_n[32U] ;
   u64 zero_len_del[2U] ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_dma_buf_rx {
   struct urb *urb ;
   struct page *p ;
};
#line 67 
struct mt7601u_dev;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_rx_queue {
   struct mt7601u_dev *dev ;
   struct mt7601u_dma_buf_rx e[16U] ;
   unsigned int start ;
   unsigned int end ;
   unsigned int entries ;
   unsigned int pending ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_dma_buf_tx {
   struct urb *urb ;
   struct sk_buff *skb ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_tx_queue {
   struct mt7601u_dev *dev ;
   struct mt7601u_dma_buf_tx e[64U] ;
   unsigned int start ;
   unsigned int end ;
   unsigned int entries ;
   unsigned int used ;
   unsigned int fifo_seq ;
};
#line 98 
enum mt_temp_mode {
    MT_TEMP_MODE_NORMAL = 0,
    MT_TEMP_MODE_HIGH = 1,
    MT_TEMP_MODE_LOW = 2
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct ewma_rssi {
   unsigned long internal ;
};
#line 152 
struct mt76_wcid;
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_dev {
   struct ieee80211_hw *hw ;
   struct device *dev ;
   unsigned long state ;
   struct mutex mutex ;
   unsigned long wcid_mask[2U] ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_supported_band *sband_2g ;
   struct mt7601u_mcu mcu ;
   struct delayed_work cal_work ;
   struct delayed_work mac_work ;
   struct workqueue_struct *stat_wq ;
   struct delayed_work stat_work ;
   struct mt76_wcid *mon_wcid ;
   struct mt76_wcid *wcid[128U] ;
   spinlock_t lock ;
   spinlock_t mac_lock ;
   u16 *beacon_offsets ;
   u8 macaddr[6U] ;
   struct mt7601u_eeprom_params *ee ;
   struct mutex vendor_req_mutex ;
   void *vend_buf ;
   struct mutex reg_atomic_mutex ;
   struct mutex hw_atomic_mutex ;
   u32 rxfilter ;
   u32 debugfs_reg ;
   u8 out_eps[8U] ;
   u8 in_eps[8U] ;
   u16 out_max_packet ;
   u16 in_max_packet ;
   spinlock_t tx_lock ;
   struct tasklet_struct tx_tasklet ;
   struct mt7601u_tx_queue *tx_q ;
   struct sk_buff_head tx_skb_done ;
   atomic_t avg_ampdu_len ;
   spinlock_t rx_lock ;
   struct tasklet_struct rx_tasklet ;
   struct mt7601u_rx_queue rx_q ;
   spinlock_t con_mon_lock ;
   u8 ap_bssid[6U] ;
   s8 bcn_freq_off ;
   u8 bcn_phy_mode ;
   struct ewma_rssi avg_rssi ;
   u8 agc_save ;
   struct mt7601u_freq_cal freq_cal ;
   bool tssi_read_trig ;
   s8 tssi_init ;
   s8 tssi_init_hvga ;
   s16 tssi_init_hvga_offset_db ;
   int prev_pwr_diff ;
   enum mt_temp_mode temp_mode ;
   int curr_temp ;
   int dpd_temp ;
   s8 raw_temp ;
   bool pll_lock_protect ;
   u8 bw ;
   bool chan_ext_below ;
   u32 rf_pa_mode[2U] ;
   struct mac_stats stats ;
};
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt76_wcid {
   u8 idx ;
   u8 hw_key_idx ;
   u16 tx_rate ;
   bool tx_rate_set ;
   u8 tx_rate_nss ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 bInterfaceNumber ;
   kernel_ulong_t driver_info ;
};
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_runtime.h"
struct usb_driver;
#line 1090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 1112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 1183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
struct usb_driver {
   char *name ;
   int (*probe)(struct usb_interface *, struct usb_device_id *) ;
   void (*disconnect)(struct usb_interface *) ;
   int (*unlocked_ioctl)(struct usb_interface *, unsigned int , void *) ;
   int (*suspend)(struct usb_interface *, pm_message_t ) ;
   int (*resume)(struct usb_interface *) ;
   int (*reset_resume)(struct usb_interface *) ;
   int (*pre_reset)(struct usb_interface *) ;
   int (*post_reset)(struct usb_interface *) ;
   struct usb_device_id *id_table ;
   struct attribute_group **dev_groups ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
   unsigned int disable_hub_initiated_lpm : 1 ;
   unsigned int soft_unbind : 1 ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint.h"
struct trace_eval_map {
   char *system ;
   char *eval_string ;
   unsigned long eval_value ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2060 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2062 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2064 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2066 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2068 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2070 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2076 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_2078 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2213 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
struct power_per_rate {
   u8 raw ;
   s8 bw20 ;
   s8 bw40 ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
struct mt7601u_rate_power {
   struct power_per_rate cck[2U] ;
   struct power_per_rate ofdm[4U] ;
   struct power_per_rate ht[4U] ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
struct reg_channel_bounds {
   u8 start ;
   u8 num ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
struct tssi_data {
   int tx0_delta_offset ;
   u8 slope ;
   u8 offset[3U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
struct mt7601u_eeprom_params {
   bool tssi_enabled ;
   u8 rf_freq_off ;
   s8 rssi_offset[2U] ;
   s8 ref_temp ;
   s8 lna_gain ;
   u8 chan_pwr[14U] ;
   struct mt7601u_rate_power power_rate_table ;
   s8 real_cck_bw20[2U] ;
   struct tssi_data tssi_data ;
   struct reg_channel_bounds reg ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_3184 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_3184 key ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt76_reg_pair {
   u32 reg ;
   u32 value ;
};
#line 390 
enum mt76_msg_port {
    WLAN_PORT = 0,
    CPU_RX_PORT = 1,
    CPU_TX_PORT = 2,
    HOST_PORT = 3,
    VIRTUAL_CPU_RX_PORT = 4,
    VIRTUAL_CPU_TX_PORT = 5,
    DISCARD = 6
};
#line 400 
enum mt76_info_type {
    DMA_PACKET = 0,
    DMA_COMMAND = 1
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.h"
enum mcu_cmd {
    CMD_FUN_SET_OP = 1,
    CMD_LOAD_CR = 2,
    CMD_INIT_GAIN_OP = 3,
    CMD_DYNC_VGA_OP = 6,
    CMD_TDLS_CH_SW = 7,
    CMD_BURST_WRITE = 8,
    CMD_READ_MODIFY_WRITE = 9,
    CMD_RANDOM_READ = 10,
    CMD_BURST_READ = 11,
    CMD_RANDOM_WRITE = 12,
    CMD_LED_MODE_OP = 16,
    CMD_POWER_SAVING_OP = 20,
    CMD_WOW_CONFIG = 21,
    CMD_WOW_QUERY = 22,
    CMD_WOW_FEATURE = 24,
    CMD_CARRIER_DETECT_OP = 28,
    CMD_RADOR_DETECT_OP = 29,
    CMD_SWITCH_CHANNEL_OP = 30,
    CMD_CALIBRATION_OP = 31,
    CMD_BEACON_OP = 32,
    CMD_ANTENNA_OP = 33
};
#line 120 
enum mcu_function {
    Q_SELECT = 1,
    ATOMIC_TSSI_SETTING = 5
};
#line 133 
enum mcu_calibrate {
    MCU_CAL_R = 1,
    MCU_CAL_DCOC = 2,
    MCU_CAL_LC = 3,
    MCU_CAL_LOFT = 4,
    MCU_CAL_TXIQ = 5,
    MCU_CAL_BW = 6,
    MCU_CAL_DPD = 7,
    MCU_CAL_RXIQ = 8,
    MCU_CAL_TXDCOC = 9
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_4214 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_4216 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_4218 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_4220 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
struct __anonstruct_msg_4294 {
   __le32 id ;
   __le32 value ;
} __attribute__((__packed__, __aligned__(4)));
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
struct __anonstruct_msg_4296 {
   __le32 id ;
   __le32 value ;
} __attribute__((__packed__, __aligned__(4)));
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
struct mt76_fw_header {
   __le32 ilm_len ;
   __le32 dlm_len ;
   __le16 build_ver ;
   __le16 fw_ver ;
   u8 pad[4U] ;
   char build_time[16U] ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
struct mt76_fw {
   struct mt76_fw_header hdr ;
   u8 ivb[64U] ;
   u8 ilm[] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct nvmem_device;
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/mtd/mtd-abi.h"
struct otp_info {
   __u32 start ;
   __u32 length ;
   __u32 locked ;
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/mtd/mtd-abi.h"
struct mtd_ecc_stats {
   __u32 corrected ;
   __u32 failed ;
   __u32 badblocks ;
   __u32 bbtblocks ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct erase_info {
   uint64_t addr ;
   uint64_t len ;
   uint64_t fail_addr ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_erase_region_info {
   uint64_t offset ;
   uint32_t erasesize ;
   uint32_t numblocks ;
   unsigned long *lockmap ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_oob_ops {
   unsigned int mode ;
   size_t len ;
   size_t retlen ;
   size_t ooblen ;
   size_t oobretlen ;
   uint32_t ooboffs ;
   uint8_t *datbuf ;
   uint8_t *oobbuf ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_oob_region {
   u32 offset ;
   u32 length ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_ooblayout_ops {
   int (*ecc)(struct mtd_info *, int , struct mtd_oob_region *) ;
   int (*free)(struct mtd_info *, int , struct mtd_oob_region *) ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_pairing_info {
   int pair ;
   int group ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_pairing_scheme {
   int ngroups ;
   int (*get_info)(struct mtd_info *, int , struct mtd_pairing_info *) ;
   int (*get_wunit)(struct mtd_info *, struct mtd_pairing_info *) ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_debug_info {
   struct dentry *dfs_dir ;
   char *partname ;
   char *partid ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_info {
   u_char type ;
   uint32_t flags ;
   uint32_t orig_flags ;
   uint64_t size ;
   uint32_t erasesize ;
   uint32_t writesize ;
   uint32_t writebufsize ;
   uint32_t oobsize ;
   uint32_t oobavail ;
   unsigned int erasesize_shift ;
   unsigned int writesize_shift ;
   unsigned int erasesize_mask ;
   unsigned int writesize_mask ;
   unsigned int bitflip_threshold ;
   char *name ;
   int index ;
   struct mtd_ooblayout_ops *ooblayout ;
   struct mtd_pairing_scheme *pairing ;
   unsigned int ecc_step_size ;
   unsigned int ecc_strength ;
   int numeraseregions ;
   struct mtd_erase_region_info *eraseregions ;
   int (*_erase)(struct mtd_info *, struct erase_info *) ;
   int (*_point)(struct mtd_info *, loff_t , size_t , size_t *, void **, resource_size_t *) ;
   int (*_unpoint)(struct mtd_info *, loff_t , size_t ) ;
   int (*_read)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_write)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_panic_write)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_read_oob)(struct mtd_info *, loff_t , struct mtd_oob_ops *) ;
   int (*_write_oob)(struct mtd_info *, loff_t , struct mtd_oob_ops *) ;
   int (*_get_fact_prot_info)(struct mtd_info *, size_t , size_t *, struct otp_info *) ;
   int (*_read_fact_prot_reg)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_get_user_prot_info)(struct mtd_info *, size_t , size_t *, struct otp_info *) ;
   int (*_read_user_prot_reg)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_write_user_prot_reg)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_lock_user_prot_reg)(struct mtd_info *, loff_t , size_t ) ;
   int (*_writev)(struct mtd_info *, struct kvec *, unsigned long , loff_t , size_t *) ;
   void (*_sync)(struct mtd_info *) ;
   int (*_lock)(struct mtd_info *, loff_t , uint64_t ) ;
   int (*_unlock)(struct mtd_info *, loff_t , uint64_t ) ;
   int (*_is_locked)(struct mtd_info *, loff_t , uint64_t ) ;
   int (*_block_isreserved)(struct mtd_info *, loff_t ) ;
   int (*_block_isbad)(struct mtd_info *, loff_t ) ;
   int (*_block_markbad)(struct mtd_info *, loff_t ) ;
   int (*_max_bad_blocks)(struct mtd_info *, loff_t , size_t ) ;
   int (*_suspend)(struct mtd_info *) ;
   void (*_resume)(struct mtd_info *) ;
   void (*_reboot)(struct mtd_info *) ;
   int (*_get_device)(struct mtd_info *) ;
   void (*_put_device)(struct mtd_info *) ;
   bool oops_panic_write ;
   struct notifier_block reboot_notifier ;
   struct mtd_ecc_stats ecc_stats ;
   int subpage_sft ;
   void *priv ;
   struct module *owner ;
   struct device dev ;
   int usecount ;
   struct mtd_debug_info dbg ;
   struct nvmem_device *nvmem ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
enum mt7601u_eeprom_access_modes {
    MT_EE_READ = 0,
    MT_EE_PHYSICAL_READ = 1
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_desc {
   u8 count ;
   __le32 duration ;
   __le32 interval ;
   __le32 start_time ;
} __attribute__((__packed__));
#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_p2p_noa_attr {
   u8 index ;
   u8 oppps_ctwindow ;
   struct ieee80211_p2p_noa_desc desc[4U] ;
} __attribute__((__packed__));
#line 1631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_operation {
   __le32 he_oper_params ;
   __le16 he_mcs_nss_set ;
   u8 optional[0U] ;
} __attribute__((__packed__));
#line 3439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};
#line 4633 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct ieee80211_he_obss_pd {
   bool enable ;
   u8 min_offset ;
   u8 max_offset ;
};
#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mu_group_data {
   u8 membership[8U] ;
   u8 position[16U] ;
};
#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ftm_responder_params {
   u8 *lci ;
   u8 *civicloc ;
   size_t lci_len ;
   size_t civicloc_len ;
};
#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_bss_conf {
   u8 *bssid ;
   u8 bss_color ;
   u8 htc_trig_based_pkt_ext ;
   bool multi_sta_back_32bit ;
   bool uora_exists ;
   bool ack_enabled ;
   u8 uora_ocw_range ;
   u16 frame_time_rts_th ;
   bool he_support ;
   bool twt_requester ;
   bool twt_responder ;
   bool assoc ;
   bool ibss_joined ;
   bool ibss_creator ;
   u16 aid ;
   bool use_cts_prot ;
   bool use_short_preamble ;
   bool use_short_slot ;
   bool enable_beacon ;
   u8 dtim_period ;
   u16 beacon_int ;
   u16 assoc_capability ;
   u64 sync_tsf ;
   u32 sync_device_ts ;
   u8 sync_dtim_count ;
   u32 basic_rates ;
   struct ieee80211_rate *beacon_rate ;
   int mcast_rate[4U] ;
   u16 ht_operation_mode ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   s32 cqm_rssi_low ;
   s32 cqm_rssi_high ;
   struct cfg80211_chan_def chandef ;
   struct ieee80211_mu_group_data mu_group ;
   __be32 arp_addr_list[4U] ;
   int arp_addr_cnt ;
   bool qos ;
   bool idle ;
   bool ps ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   bool hidden_ssid ;
   int txpower ;
   enum nl80211_tx_power_setting txpower_type ;
   struct ieee80211_p2p_noa_attr p2p_noa_attr ;
   bool allow_p2p_go_ps ;
   u16 max_idle_period ;
   bool protected_keep_alive ;
   bool ftm_responder ;
   struct ieee80211_ftm_responder_params *ftmr_params ;
   bool nontransmitted ;
   u8 transmitter_bssid[6U] ;
   u8 bssid_index ;
   u8 bssid_indicator ;
   bool ema_ap ;
   u8 profile_periodicity ;
   struct ieee80211_he_operation he_operation ;
   struct ieee80211_he_obss_pd he_obss_pd ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt7601u_tssi_params {
   char tssi0 ;
   int trgt_power ;
};
#line 276 
struct mt7601u_rxwi;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
struct mt7601u_rxwi {
   __le32 rxinfo ;
   __le32 ctl ;
   __le16 frag_sn ;
   __le16 rate ;
   u8 unknown ;
   u8 zero[3U] ;
   u8 snr ;
   u8 ant ;
   u8 gain ;
   u8 freq_off ;
   __le32 resv2 ;
   __le32 expert_ant ;
} __attribute__((__packed__, __aligned__(4)));
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6382 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6384 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6386 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6388 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6390 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6392 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6394 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6396 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6398 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6400 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6402 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6404 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6406 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6408 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6410 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_6412 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
struct reg_table {
   struct mt76_reg_pair *regs ;
   size_t n ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_6519 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 1314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct rate_info {
   u8 flags ;
   u8 mcs ;
   u16 legacy ;
   u8 nss ;
   u8 bw ;
   u8 he_gi ;
   u8 he_dcm ;
   u8 he_ru_alloc ;
   u8 n_bonded_ch ;
};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_ecn.h"
typedef u32 codel_time_t;
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_chanctx_conf {
   struct cfg80211_chan_def def ;
   struct cfg80211_chan_def min_def ;
   u8 rx_chains_static ;
   u8 rx_chains_dynamic ;
   bool radar_enabled ;
   u8 drv_priv[0U] ;
};
#line 267 
struct ieee80211_vif;
#line 440 
struct ieee80211_sta;
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_rate {
   s8 idx ;
   u16 count : 5 ;
   u16 flags : 11 ;
} __attribute__((__packed__));
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_7462 {
   struct ieee80211_tx_rate rates[4U] ;
   s8 rts_cts_rate_idx ;
   u8 use_rts : 1 ;
   u8 use_cts_prot : 1 ;
   u8 short_preamble : 1 ;
   u8 skip_table : 1 ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_7461 {
   struct __anonstruct_7462 __anonCompField___anonunion_7461_192 ;
   unsigned long jiffies ;
};
#line 1004 
struct ieee80211_key_conf;
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_control_7460 {
   union __anonunion_7461 __anonCompField___anonstruct_control_7460_193 ;
   struct ieee80211_vif *vif ;
   struct ieee80211_key_conf *hw_key ;
   u32 flags ;
   codel_time_t enqueue_time ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ack_7463 {
   u64 cookie ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_status_7464 {
   struct ieee80211_tx_rate rates[4U] ;
   s32 ack_signal ;
   u8 ampdu_ack_len ;
   u8 ampdu_len ;
   u8 antenna ;
   u16 tx_time ;
   bool is_valid_ack_signal ;
   void *status_driver_data[2U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_7465 {
   struct ieee80211_tx_rate driver_rates[4U] ;
   u8 pad[4U] ;
   void *rate_driver_data[3U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_7459 {
   struct __anonstruct_control_7460 control ;
   struct __anonstruct_ack_7463 ack ;
   struct __anonstruct_status_7464 status ;
   struct __anonstruct_7465 __anonCompField___anonunion_7459_194 ;
   void *driver_data[5U] ;
};
#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_info {
   u32 flags ;
   u8 band ;
   u8 hw_queue ;
   u16 ack_frame_id : 6 ;
   u16 tx_time_est : 10 ;
   union __anonunion_7459 __anonCompField_ieee80211_tx_info_195 ;
};
#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_status {
   struct ieee80211_sta *sta ;
   struct ieee80211_tx_info *info ;
   struct sk_buff *skb ;
   struct rate_info *rate ;
};
#line 1119 
struct ieee80211_rx_status;
#line 1358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rx_status {
   u64 mactime ;
   u64 boottime_ns ;
   u32 device_timestamp ;
   u32 ampdu_reference ;
   u32 flag ;
   u16 freq ;
   u8 enc_flags ;
   u8 encoding : 2 ;
   u8 bw : 3 ;
   u8 he_ru : 3 ;
   u8 he_gi : 2 ;
   u8 he_dcm : 1 ;
   u8 rate_idx ;
   u8 nss ;
   u8 rx_flags ;
   u8 band ;
   u8 antenna ;
   s8 signal ;
   u8 chains ;
   s8 chain_signal[4U] ;
   u8 ampdu_delimiter_crc ;
   u8 zero_length_psdu_type ;
};
#line 1627 
struct ieee80211_txq;
#line 1627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif {
   enum nl80211_iftype type ;
   struct ieee80211_bss_conf bss_conf ;
   u8 addr[6U] ;
   bool p2p ;
   bool csa_active ;
   bool mu_mimo_owner ;
   u8 cab_queue ;
   u8 hw_queue[4U] ;
   struct ieee80211_txq *txq ;
   struct ieee80211_chanctx_conf *chanctx_conf ;
   u32 driver_flags ;
   struct dentry *debugfs_dir ;
   unsigned int probe_req_reg ;
   bool txqs_stopped[4U] ;
   u8 drv_priv[0U] ;
};
#line 1772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_conf {
   atomic64_t tx_pn ;
   u32 cipher ;
   u8 icv_len ;
   u8 iv_len ;
   u8 hw_key_idx ;
   s8 keyidx ;
   u16 flags ;
   u8 keylen ;
   u8 key[0U] ;
};
#line 1870 
enum ieee80211_sta_rx_bandwidth {
    IEEE80211_STA_RX_BW_20 = 0,
    IEEE80211_STA_RX_BW_40 = 1,
    IEEE80211_STA_RX_BW_80 = 2,
    IEEE80211_STA_RX_BW_160 = 3
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_rate_7473 {
   s8 idx ;
   u8 count ;
   u8 count_cts ;
   u8 count_rts ;
   u16 flags ;
};
#line 1915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_rates {
   struct callback_head callback_head ;
   struct __anonstruct_rate_7473 rate[4U] ;
};
#line 1939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta_txpwr {
   s16 power ;
   enum nl80211_tx_power_setting type ;
};
#line 1991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_sta {
   u32 supp_rates[4U] ;
   u8 addr[6U] ;
   u16 aid ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
   struct ieee80211_sta_he_cap he_cap ;
   u16 max_rx_aggregation_subframes ;
   bool wme ;
   u8 uapsd_queues ;
   u8 max_sp ;
   u8 rx_nss ;
   enum ieee80211_sta_rx_bandwidth bandwidth ;
   enum ieee80211_smps_mode smps_mode ;
   struct ieee80211_sta_rates *rates ;
   bool tdls ;
   bool tdls_initiator ;
   bool mfp ;
   u8 max_amsdu_subframes ;
   u16 max_amsdu_len ;
   bool support_p2p_ps ;
   u16 max_rc_amsdu_len ;
   u16 max_tid_amsdu_len[16U] ;
   struct ieee80211_sta_txpwr txpwr ;
   struct ieee80211_txq *txq[17U] ;
   u8 drv_priv[0U] ;
};
#line 2074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_txq {
   struct ieee80211_vif *vif ;
   struct ieee80211_sta *sta ;
   u8 tid ;
   u8 ac ;
   u8 drv_priv[0U] ;
};
#line 6481 
enum mt76_cipher_type {
    MT_CIPHER_NONE = 0,
    MT_CIPHER_WEP40 = 1,
    MT_CIPHER_WEP104 = 2,
    MT_CIPHER_TKIP = 3,
    MT_CIPHER_AES_CCMP = 4,
    MT_CIPHER_CKIP40 = 5,
    MT_CIPHER_CKIP104 = 6,
    MT_CIPHER_CKIP128 = 7,
    MT_CIPHER_WAPI = 8
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
union __anonunion___u_7477 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
union __anonunion___u_7479 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt76_sta {
   struct mt76_wcid wcid ;
   u16 agg_ssn[16U] ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
struct mt76_tx_status {
   u8 valid : 1 ;
   u8 success : 1 ;
   u8 aggr : 1 ;
   u8 ack_req : 1 ;
   u8 is_probe : 1 ;
   u8 wcid ;
   u8 pktid ;
   u8 retry ;
   u16 rate ;
} __attribute__((__packed__, __aligned__(2)));
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_7561 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_7563 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_7565 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_7567 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
union __anonunion___u_7570 {
   struct mt76_wcid *__val ;
   char __c[1U] ;
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
struct __anonstruct_spans_7573 {
   u32 addr_base ;
   u32 span ;
   u64 *stat_base ;
};
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
union __anonunion___u_7576 {
   struct mt76_wcid *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_8802 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_8882 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct napi_struct;
#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9242 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9244 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9246 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9248 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1881  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9250 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9252 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9254 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9256 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9258 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion___u_9260 {
   struct sk_buff *__val ;
   char __c[1U] ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
enum mt76_qsel {
    MT_QSEL_MGMT = 0,
    MT_QSEL_HCCA = 1,
    MT_QSEL_EDCA = 2,
    MT_QSEL_EDCA_2 = 3
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9774 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9776 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9822 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9824 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9830 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9832 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9842 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_9844 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9919 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_10950 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1656  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_he_mu_edca_param_ac_rec {
   u8 aifsn ;
   u8 ecw_min_max ;
   u8 mu_edca_timer ;
} __attribute__((__packed__));
#line 3039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/nl80211.h"
struct nl80211_sta_flag_update {
   __u32 mask ;
   __u32 set ;
} __attribute__((__packed__));
#line 3362 
enum nl80211_mesh_power_mode {
    NL80211_MESH_POWER_UNKNOWN = 0,
    NL80211_MESH_POWER_ACTIVE = 1,
    NL80211_MESH_POWER_LIGHT_SLEEP = 2,
    NL80211_MESH_POWER_DEEP_SLEEP = 3,
    __NL80211_MESH_POWER_AFTER_LAST = 4,
    NL80211_MESH_POWER_MAX = 3
};
#line 4593 
enum nl80211_txrate_gi {
    NL80211_TXRATE_DEFAULT_GI = 0,
    NL80211_TXRATE_FORCE_SGI = 1,
    NL80211_TXRATE_FORCE_LGI = 2
};
#line 5133 
enum nl80211_ext_feature_index {
    NL80211_EXT_FEATURE_VHT_IBSS = 0,
    NL80211_EXT_FEATURE_RRM = 1,
    NL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER = 2,
    NL80211_EXT_FEATURE_SCAN_START_TIME = 3,
    NL80211_EXT_FEATURE_BSS_PARENT_TSF = 4,
    NL80211_EXT_FEATURE_SET_SCAN_DWELL = 5,
    NL80211_EXT_FEATURE_BEACON_RATE_LEGACY = 6,
    NL80211_EXT_FEATURE_BEACON_RATE_HT = 7,
    NL80211_EXT_FEATURE_BEACON_RATE_VHT = 8,
    NL80211_EXT_FEATURE_FILS_STA = 9,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA = 10,
    NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED = 11,
    NL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI = 12,
    NL80211_EXT_FEATURE_CQM_RSSI_LIST = 13,
    NL80211_EXT_FEATURE_FILS_SK_OFFLOAD = 14,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK = 15,
    NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X = 16,
    NL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME = 17,
    NL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP = 18,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE = 19,
    NL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION = 20,
    NL80211_EXT_FEATURE_MFP_OPTIONAL = 21,
    NL80211_EXT_FEATURE_LOW_SPAN_SCAN = 22,
    NL80211_EXT_FEATURE_LOW_POWER_SCAN = 23,
    NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN = 24,
    NL80211_EXT_FEATURE_DFS_OFFLOAD = 25,
    NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211 = 26,
    NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT = 27,
    NL80211_EXT_FEATURE_TXQS = 28,
    NL80211_EXT_FEATURE_SCAN_RANDOM_SN = 29,
    NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT = 30,
    NL80211_EXT_FEATURE_CAN_REPLACE_PTK0 = 31,
    NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER = 32,
    NL80211_EXT_FEATURE_AIRTIME_FAIRNESS = 33,
    NL80211_EXT_FEATURE_AP_PMKSA_CACHING = 34,
    NL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD = 35,
    NL80211_EXT_FEATURE_EXT_KEY_ID = 36,
    NL80211_EXT_FEATURE_STA_TX_PWR = 37,
    NL80211_EXT_FEATURE_SAE_OFFLOAD = 38,
    NL80211_EXT_FEATURE_VLAN_OFFLOAD = 39,
    NL80211_EXT_FEATURE_AQL = 40,
    NUM_NL80211_EXT_FEATURES = 41,
    MAX_NL80211_EXT_FEATURES = 40
};
#line 5912 
enum nl80211_nan_function_type {
    NL80211_NAN_FUNC_PUBLISH = 0,
    NL80211_NAN_FUNC_SUBSCRIBE = 1,
    NL80211_NAN_FUNC_FOLLOW_UP = 2,
    __NL80211_NAN_FUNC_TYPE_AFTER_LAST = 3,
    NL80211_NAN_FUNC_MAX_TYPE = 2
};
#line 6001 
enum nl80211_preamble {
    NL80211_PREAMBLE_LEGACY = 0,
    NL80211_PREAMBLE_HT = 1,
    NL80211_PREAMBLE_VHT = 2,
    NL80211_PREAMBLE_DMG = 3
};
#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct survey_info {
   struct ieee80211_channel *channel ;
   u64 time ;
   u64 time_busy ;
   u64 time_ext_busy ;
   u64 time_rx ;
   u64 time_tx ;
   u64 time_scan ;
   u64 time_bss_rx ;
   u32 filled ;
   s8 noise ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct __anonstruct_control_11616 {
   u32 legacy ;
   u8 ht_mcs[10U] ;
   u16 vht_mcs[8U] ;
   enum nl80211_txrate_gi gi ;
};
#line 940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_bitrate_mask {
   struct __anonstruct_control_11616 control[4U] ;
};
#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct sta_bss_parameters {
   u8 flags ;
   u8 dtim_period ;
   u16 beacon_interval ;
};
#line 1373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_txq_stats {
   u32 filled ;
   u32 backlog_bytes ;
   u32 backlog_packets ;
   u32 flows ;
   u32 drops ;
   u32 ecn_marks ;
   u32 overlimit ;
   u32 overmemory ;
   u32 collisions ;
   u32 tx_bytes ;
   u32 tx_packets ;
   u32 max_flows ;
};
#line 1399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_tid_stats {
   u32 filled ;
   u64 rx_msdu ;
   u64 tx_msdu ;
   u64 tx_msdu_retries ;
   u64 tx_msdu_failed ;
   struct cfg80211_txq_stats txq_stats ;
};
#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct station_info {
   u64 filled ;
   u32 connected_time ;
   u32 inactive_time ;
   u64 assoc_at ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u16 llid ;
   u16 plid ;
   u8 plink_state ;
   s8 signal ;
   s8 signal_avg ;
   u8 chains ;
   s8 chain_signal[4U] ;
   s8 chain_signal_avg[4U] ;
   struct rate_info txrate ;
   struct rate_info rxrate ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_retries ;
   u32 tx_failed ;
   u32 rx_dropped_misc ;
   struct sta_bss_parameters bss_param ;
   struct nl80211_sta_flag_update sta_flags ;
   int generation ;
   u8 *assoc_req_ies ;
   size_t assoc_req_ies_len ;
   u32 beacon_loss_count ;
   s64 t_offset ;
   enum nl80211_mesh_power_mode local_pm ;
   enum nl80211_mesh_power_mode peer_pm ;
   enum nl80211_mesh_power_mode nonpeer_pm ;
   u32 expected_throughput ;
   u64 tx_duration ;
   u64 rx_duration ;
   u64 rx_beacon ;
   u8 rx_beacon_signal_avg ;
   u8 connected_to_gate ;
   struct cfg80211_tid_stats *pertid ;
   s8 ack_signal ;
   s8 avg_ack_signal ;
   u16 airtime_weight ;
   u32 rx_mpdu_count ;
   u32 fcs_err_count ;
   u32 airtime_link_metric ;
};
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_info {
   u64 scan_start_tsf ;
   u8 tsf_bssid[6U] ;
   bool aborted ;
};
#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 *ie ;
   size_t ie_len ;
   u16 duration ;
   bool duration_mandatory ;
   u32 flags ;
   u32 rates[4U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   u8 bssid[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   struct cfg80211_scan_info info ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};
#line 2821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_gtk_rekey_data {
   u8 *kek ;
   u8 *kck ;
   u8 *replay_ctr ;
};
#line 2921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_conf {
   u8 master_pref ;
   u8 bands ;
};
#line 2944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func_filter {
   u8 *filter ;
   u8 len ;
};
#line 2978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_nan_func {
   enum nl80211_nan_function_type type ;
   u8 service_id[6U] ;
   u8 publish_type ;
   bool close_range ;
   bool publish_bcast ;
   bool subscribe_active ;
   u8 followup_id ;
   u8 followup_reqid ;
   struct mac_address followup_dest ;
   u32 ttl ;
   u8 *serv_spec_info ;
   u8 serv_spec_info_len ;
   bool srf_include ;
   u8 *srf_bf ;
   u8 srf_bf_len ;
   u8 srf_bf_idx ;
   struct mac_address *srf_macs ;
   int srf_num_macs ;
   struct cfg80211_nan_func_filter *rx_filters ;
   struct cfg80211_nan_func_filter *tx_filters ;
   u8 num_tx_filters ;
   u8 num_rx_filters ;
   u8 instance_id ;
   u64 cookie ;
};
#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_ftm_responder_stats {
   u32 filled ;
   u32 success_num ;
   u32 partial_num ;
   u32 failed_num ;
   u32 asap_num ;
   u32 non_asap_num ;
   u64 total_duration_ms ;
   u32 unknown_triggers_num ;
   u32 reschedule_requests_num ;
   u32 out_of_window_triggers_num ;
};
#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_ftm_request_peer {
   enum nl80211_preamble preamble ;
   u16 burst_period ;
   u8 requested : 1 ;
   u8 asap : 1 ;
   u8 request_lci : 1 ;
   u8 request_civicloc : 1 ;
   u8 num_bursts_exp ;
   u8 burst_duration ;
   u8 ftms_per_burst ;
   u8 ftmr_retries ;
};
#line 3230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request_peer {
   u8 addr[6U] ;
   struct cfg80211_chan_def chandef ;
   u8 report_ap_tsf : 1 ;
   struct cfg80211_pmsr_ftm_request_peer ftm ;
};
#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
struct cfg80211_pmsr_request {
   u64 cookie ;
   void *drv_data ;
   u32 n_peers ;
   u32 nl_portid ;
   u32 timeout ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct list_head list ;
   struct cfg80211_pmsr_request_peer peers[] ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_queue_params {
   u16 txop ;
   u16 cw_min ;
   u16 cw_max ;
   u8 aifs ;
   bool acm ;
   bool uapsd ;
   bool mu_edca ;
   struct ieee80211_he_mu_edca_param_ac_rec mu_edca_param_rec ;
};
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_low_level_stats {
   unsigned int dot11ACKFailureCount ;
   unsigned int dot11RTSFailureCount ;
   unsigned int dot11FCSErrorCount ;
   unsigned int dot11RTSSuccessCount ;
};
#line 235 
enum ieee80211_chanctx_switch_mode {
    CHANCTX_SWMODE_REASSIGN_VIF = 0,
    CHANCTX_SWMODE_SWAP_CONTEXTS = 1
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_vif_chanctx_switch {
   struct ieee80211_vif *vif ;
   struct ieee80211_chanctx_conf *old_ctx ;
   struct ieee80211_chanctx_conf *new_ctx ;
};
#line 304 
enum ieee80211_event_type {
    RSSI_EVENT = 0,
    MLME_EVENT = 1,
    BAR_RX_EVENT = 2,
    BA_FRAME_TIMEOUT = 3
};
#line 311 
enum ieee80211_rssi_event_data {
    RSSI_EVENT_HIGH = 0,
    RSSI_EVENT_LOW = 1
};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_rssi_event {
   enum ieee80211_rssi_event_data data ;
};
#line 395 
enum ieee80211_mlme_event_data {
    AUTH_EVENT = 0,
    ASSOC_EVENT = 1,
    DEAUTH_RX_EVENT = 2,
    DEAUTH_TX_EVENT = 3
};
#line 402 
enum ieee80211_mlme_event_status {
    MLME_SUCCESS = 0,
    MLME_DENIED = 1,
    MLME_TIMEOUT = 2
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_mlme_event {
   enum ieee80211_mlme_event_data data ;
   enum ieee80211_mlme_event_status status ;
   u16 reason ;
};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ba_event {
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_u_11889 {
   struct ieee80211_rssi_event rssi ;
   struct ieee80211_mlme_event mlme ;
   struct ieee80211_ba_event ba ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_event {
   enum ieee80211_event_type type ;
   union __anonunion_u_11889 u ;
};
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_ies {
   u8 *ies[4U] ;
   size_t len[4U] ;
   u8 *common_ies ;
   size_t common_ie_len ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_channel_switch {
   u64 timestamp ;
   u32 device_timestamp ;
   bool block_tx ;
   struct cfg80211_chan_def chandef ;
   u8 count ;
   u32 delay ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_tkip_11898 {
   u32 iv32 ;
   u16 iv16 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_ccmp_11899 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_cmac_11900 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_aes_gmac_11901 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_gcmp_11902 {
   u8 pn[6U] ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct __anonstruct_hw_11903 {
   u8 seq[16U] ;
   u8 seq_len ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
union __anonunion_11897 {
   struct __anonstruct_tkip_11898 tkip ;
   struct __anonstruct_ccmp_11899 ccmp ;
   struct __anonstruct_aes_cmac_11900 aes_cmac ;
   struct __anonstruct_aes_gmac_11901 aes_gmac ;
   struct __anonstruct_gcmp_11902 gcmp ;
   struct __anonstruct_hw_11903 hw ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_key_seq {
   union __anonunion_11897 __anonCompField_ieee80211_key_seq_196 ;
};
#line 1857 
enum set_key_cmd {
    SET_KEY = 0,
    DISABLE_KEY = 1
};
#line 1862 
enum ieee80211_sta_state {
    IEEE80211_STA_NOTEXIST = 0,
    IEEE80211_STA_NONE = 1,
    IEEE80211_STA_AUTH = 2,
    IEEE80211_STA_ASSOC = 3,
    IEEE80211_STA_AUTHORIZED = 4
};
#line 2037 
enum sta_notify_cmd {
    STA_NOTIFY_SLEEP = 0,
    STA_NOTIFY_AWAKE = 1
};
#line 2057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tx_control {
   struct ieee80211_sta *sta ;
};
#line 2083 
enum ieee80211_hw_flags {
    IEEE80211_HW_HAS_RATE_CONTROL = 0,
    IEEE80211_HW_RX_INCLUDES_FCS = 1,
    IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING = 2,
    IEEE80211_HW_SIGNAL_UNSPEC = 3,
    IEEE80211_HW_SIGNAL_DBM = 4,
    IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC = 5,
    IEEE80211_HW_SPECTRUM_MGMT = 6,
    IEEE80211_HW_AMPDU_AGGREGATION = 7,
    IEEE80211_HW_SUPPORTS_PS = 8,
    IEEE80211_HW_PS_NULLFUNC_STACK = 9,
    IEEE80211_HW_SUPPORTS_DYNAMIC_PS = 10,
    IEEE80211_HW_MFP_CAPABLE = 11,
    IEEE80211_HW_WANT_MONITOR_VIF = 12,
    IEEE80211_HW_NO_AUTO_VIF = 13,
    IEEE80211_HW_SW_CRYPTO_CONTROL = 14,
    IEEE80211_HW_SUPPORT_FAST_XMIT = 15,
    IEEE80211_HW_REPORTS_TX_ACK_STATUS = 16,
    IEEE80211_HW_CONNECTION_MONITOR = 17,
    IEEE80211_HW_QUEUE_CONTROL = 18,
    IEEE80211_HW_SUPPORTS_PER_STA_GTK = 19,
    IEEE80211_HW_AP_LINK_PS = 20,
    IEEE80211_HW_TX_AMPDU_SETUP_IN_HW = 21,
    IEEE80211_HW_SUPPORTS_RC_TABLE = 22,
    IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF = 23,
    IEEE80211_HW_TIMING_BEACON_ONLY = 24,
    IEEE80211_HW_SUPPORTS_HT_CCK_RATES = 25,
    IEEE80211_HW_CHANCTX_STA_CSA = 26,
    IEEE80211_HW_SUPPORTS_CLONED_SKBS = 27,
    IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS = 28,
    IEEE80211_HW_TDLS_WIDER_BW = 29,
    IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU = 30,
    IEEE80211_HW_BEACON_TX_STATUS = 31,
    IEEE80211_HW_NEEDS_UNIQUE_STA_ADDR = 32,
    IEEE80211_HW_SUPPORTS_REORDERING_BUFFER = 33,
    IEEE80211_HW_USES_RSS = 34,
    IEEE80211_HW_TX_AMSDU = 35,
    IEEE80211_HW_TX_FRAG_LIST = 36,
    IEEE80211_HW_REPORTS_LOW_ACK = 37,
    IEEE80211_HW_SUPPORTS_TX_FRAG = 38,
    IEEE80211_HW_SUPPORTS_TDLS_BUFFER_STA = 39,
    IEEE80211_HW_DEAUTH_NEED_MGD_TX_PREP = 40,
    IEEE80211_HW_DOESNT_SUPPORT_QOS_NDP = 41,
    IEEE80211_HW_BUFF_MMPDU_TXQ = 42,
    IEEE80211_HW_SUPPORTS_VHT_EXT_NSS_BW = 43,
    IEEE80211_HW_STA_MMPDU_TXQ = 44,
    IEEE80211_HW_TX_STATUS_NO_AMPDU_LEN = 45,
    IEEE80211_HW_SUPPORTS_MULTI_BSSID = 46,
    IEEE80211_HW_SUPPORTS_ONLY_HE_MULTI_BSSID = 47,
    IEEE80211_HW_AMPDU_KEYBORDER_SUPPORT = 48,
    NUM_IEEE80211_HW_FLAGS = 49
};
#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_scan_request {
   struct ieee80211_scan_ies ies ;
   struct cfg80211_scan_request req ;
};
#line 2566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_tdls_ch_sw_params {
   struct ieee80211_sta *sta ;
   struct cfg80211_chan_def *chandef ;
   u8 action_code ;
   u32 status ;
   u32 timestamp ;
   u16 switch_time ;
   u16 switch_timeout ;
   struct sk_buff *tmpl_skb ;
   u32 ch_sw_tm_ie ;
};
#line 2662 
enum ieee80211_ampdu_mlme_action {
    IEEE80211_AMPDU_RX_START = 0,
    IEEE80211_AMPDU_RX_STOP = 1,
    IEEE80211_AMPDU_TX_START = 2,
    IEEE80211_AMPDU_TX_STOP_CONT = 3,
    IEEE80211_AMPDU_TX_STOP_FLUSH = 4,
    IEEE80211_AMPDU_TX_STOP_FLUSH_CONT = 5,
    IEEE80211_AMPDU_TX_OPERATIONAL = 6
};
#line 3161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ampdu_params {
   enum ieee80211_ampdu_mlme_action action ;
   struct ieee80211_sta *sta ;
   u16 tid ;
   u16 ssn ;
   u16 buf_size ;
   bool amsdu ;
   u16 timeout ;
};
#line 3170 
enum ieee80211_frame_release_type {
    IEEE80211_FRAME_RELEASE_PSPOLL = 0,
    IEEE80211_FRAME_RELEASE_UAPSD = 1
};
#line 3182 
enum ieee80211_roc_type {
    IEEE80211_ROC_TYPE_NORMAL = 0,
    IEEE80211_ROC_TYPE_MGMT_TX = 1
};
#line 3187 
enum ieee80211_reconfig_type {
    IEEE80211_RECONFIG_TYPE_RESTART = 0,
    IEEE80211_RECONFIG_TYPE_SUSPEND = 1
};
#line 3778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
struct ieee80211_ops {
   void (*tx)(struct ieee80211_hw *, struct ieee80211_tx_control *, struct sk_buff *) ;
   int (*start)(struct ieee80211_hw *) ;
   void (*stop)(struct ieee80211_hw *) ;
   int (*suspend)(struct ieee80211_hw *, struct cfg80211_wowlan *) ;
   int (*resume)(struct ieee80211_hw *) ;
   void (*set_wakeup)(struct ieee80211_hw *, bool ) ;
   int (*add_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*change_interface)(struct ieee80211_hw *, struct ieee80211_vif *, enum nl80211_iftype , bool ) ;
   void (*remove_interface)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*config)(struct ieee80211_hw *, u32 ) ;
   void (*bss_info_changed)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_bss_conf *, u32 ) ;
   int (*start_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*stop_ap)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u64 (*prepare_multicast)(struct ieee80211_hw *, struct netdev_hw_addr_list *) ;
   void (*configure_filter)(struct ieee80211_hw *, unsigned int , unsigned int *, u64 ) ;
   void (*config_iface_filter)(struct ieee80211_hw *, struct ieee80211_vif *, unsigned int , unsigned int ) ;
   int (*set_tim)(struct ieee80211_hw *, struct ieee80211_sta *, bool ) ;
   int (*set_key)(struct ieee80211_hw *, enum set_key_cmd , struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *) ;
   void (*update_tkip_key)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_key_conf *, struct ieee80211_sta *, u32 , u16 *) ;
   void (*set_rekey_data)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_gtk_rekey_data *) ;
   void (*set_default_unicast_key)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   int (*hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_scan_request *) ;
   void (*cancel_hw_scan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*sched_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_sched_scan_request *, struct ieee80211_scan_ies *) ;
   int (*sched_scan_stop)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*sw_scan_start)(struct ieee80211_hw *, struct ieee80211_vif *, u8 *) ;
   void (*sw_scan_complete)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*get_stats)(struct ieee80211_hw *, struct ieee80211_low_level_stats *) ;
   void (*get_key_seq)(struct ieee80211_hw *, struct ieee80211_key_conf *, struct ieee80211_key_seq *) ;
   int (*set_frag_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*set_rts_threshold)(struct ieee80211_hw *, u32 ) ;
   int (*sta_add)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_add_debugfs)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct dentry *) ;
   void (*sta_notify)(struct ieee80211_hw *, struct ieee80211_vif *, enum sta_notify_cmd , struct ieee80211_sta *) ;
   int (*sta_set_txpwr)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   int (*sta_state)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, enum ieee80211_sta_state , enum ieee80211_sta_state ) ;
   void (*sta_pre_rcu_remove)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_rc_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u32 ) ;
   void (*sta_rate_tbl_update)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*sta_statistics)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct station_info *) ;
   int (*conf_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 , struct ieee80211_tx_queue_params *) ;
   u64 (*get_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*set_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, u64 ) ;
   void (*offset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *, s64 ) ;
   void (*reset_tsf)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*tx_last_beacon)(struct ieee80211_hw *) ;
   int (*ampdu_action)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_ampdu_params *) ;
   int (*get_survey)(struct ieee80211_hw *, int , struct survey_info *) ;
   void (*rfkill_poll)(struct ieee80211_hw *) ;
   void (*set_coverage_class)(struct ieee80211_hw *, s16 ) ;
   int (*testmode_cmd)(struct ieee80211_hw *, struct ieee80211_vif *, void *, int ) ;
   int (*testmode_dump)(struct ieee80211_hw *, struct sk_buff *, struct netlink_callback *, void *, int ) ;
   void (*flush)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , bool ) ;
   void (*channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*set_antenna)(struct ieee80211_hw *, u32 , u32 ) ;
   int (*get_antenna)(struct ieee80211_hw *, u32 *, u32 *) ;
   int (*remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel *, int , enum ieee80211_roc_type ) ;
   int (*cancel_remain_on_channel)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*set_ringparam)(struct ieee80211_hw *, u32 , u32 ) ;
   void (*get_ringparam)(struct ieee80211_hw *, u32 *, u32 *, u32 *, u32 *) ;
   bool (*tx_frames_pending)(struct ieee80211_hw *) ;
   int (*set_bitrate_mask)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_bitrate_mask *) ;
   void (*event_callback)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_event *) ;
   void (*allow_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   void (*release_buffered_frames)(struct ieee80211_hw *, struct ieee80211_sta *, u16 , int , enum ieee80211_frame_release_type , bool ) ;
   int (*get_et_sset_count)(struct ieee80211_hw *, struct ieee80211_vif *, int ) ;
   void (*get_et_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct ethtool_stats *, u64 *) ;
   void (*get_et_strings)(struct ieee80211_hw *, struct ieee80211_vif *, u32 , u8 *) ;
   void (*mgd_prepare_tx)(struct ieee80211_hw *, struct ieee80211_vif *, u16 ) ;
   void (*mgd_protect_tdls_discover)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*add_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*remove_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *) ;
   void (*change_chanctx)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, u32 ) ;
   int (*assign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   void (*unassign_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_chanctx_conf *) ;
   int (*switch_vif_chanctx)(struct ieee80211_hw *, struct ieee80211_vif_chanctx_switch *, int , enum ieee80211_chanctx_switch_mode ) ;
   void (*reconfig_complete)(struct ieee80211_hw *, enum ieee80211_reconfig_type ) ;
   void (*ipv6_addr_change)(struct ieee80211_hw *, struct ieee80211_vif *, struct inet6_dev *) ;
   void (*channel_switch_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_chan_def *) ;
   int (*pre_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*post_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*abort_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*channel_switch_rx_beacon)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_channel_switch *) ;
   int (*join_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   void (*leave_ibss)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   u32 (*get_expected_throughput)(struct ieee80211_hw *, struct ieee80211_sta *) ;
   int (*get_txpower)(struct ieee80211_hw *, struct ieee80211_vif *, int *) ;
   int (*tdls_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, u8 , struct cfg80211_chan_def *, struct sk_buff *, u32 ) ;
   void (*tdls_cancel_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *) ;
   void (*tdls_recv_channel_switch)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_tdls_ch_sw_params *) ;
   void (*wake_tx_queue)(struct ieee80211_hw *, struct ieee80211_txq *) ;
   void (*sync_rx_queues)(struct ieee80211_hw *) ;
   int (*start_nan)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *) ;
   int (*stop_nan)(struct ieee80211_hw *, struct ieee80211_vif *) ;
   int (*nan_change_conf)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_conf *, u32 ) ;
   int (*add_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_nan_func *) ;
   void (*del_nan_func)(struct ieee80211_hw *, struct ieee80211_vif *, u8 ) ;
   bool (*can_aggregate_in_amsdu)(struct ieee80211_hw *, struct sk_buff *, struct sk_buff *) ;
   int (*get_ftm_responder_stats)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_ftm_responder_stats *) ;
   int (*start_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
   void (*abort_pmsr)(struct ieee80211_hw *, struct ieee80211_vif *, struct cfg80211_pmsr_request *) ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long uintptr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
struct mt76_vif {
   u8 idx ;
   struct mt76_wcid group_wcid ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
union __anonunion___u_13039 {
   struct mt76_wcid *__val ;
   char __c[1U] ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
union __anonunion___u_13041 {
   struct mt76_wcid *__val ;
   char __c[1U] ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
union __anonunion___u_13043 {
   struct mt76_wcid *__val ;
   char __c[1U] ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
union __anonunion___u_13045 {
   struct ieee80211_sta_rates *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_13112 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
struct mt76_txwi {
   __le16 flags ;
   __le16 rate_ctl ;
   u8 ack_ctl ;
   u8 wcid ;
   __le16 len_ctl ;
   __le32 iv ;
   __le32 eiv ;
   u8 aid ;
   u8 txstream ;
   __le16 ctl ;
} __attribute__((__packed__, __aligned__(4)));
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_14136 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_14138 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_14144 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
union __anonunion___u_14146 {
   struct tracepoint_func *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_15942 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_15942 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_15943 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_15943 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_15959 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_15959 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_15963 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_15963 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_15964 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_15965 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_15964 __anonCompField_media_link_90 ;
   union __anonunion_15965 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_15967 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_15966 {
   struct __anonstruct_dev_15967 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_15966 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_15981 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_15982 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_15980 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_15981 i2c ;
   struct __anonstruct_custom_15982 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_15980 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_16883 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_16883 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_ieee80211_scenario_mt7601u_ops_18 {
   struct ieee80211_hw *arg0 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_usb_scenario_mt7601u_driver_19 {
   struct usb_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 283 
u32 mt7601u_rr(struct mt7601u_dev *dev, u32 offset);
#line 290 
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/core.c"
int mt7601u_wait_asic_ready(struct mt7601u_dev *dev);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/core.c"
bool mt76_poll(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val, int timeout);
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/core.c"
bool mt76_poll_msec(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val, int timeout);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/core.c"
int mt7601u_wait_asic_ready(struct mt7601u_dev *dev)
{
  #line 12 
  u32 val;
  #line 11 
  int i = 100;
  #line 14 
  while (1) {
    #line 24 
    int tmp_0;
    {
      #line 15 
      if ((int)test_bit(1L,& dev->state) != 0) 
                                               #line 16 
                                               return -5;
      #line 18 
      val = mt7601u_rr(dev,4096U);
      #line 19 
      if (val + 4294967295U <= 4294967293U) 
                                            #line 20 
                                            return 0;
      #line 22 
      __const_udelay(42950UL);
    }
    #line 24 
    tmp_0 = i;
    #line 24 
    i --;
    #line 24 
    ;
    #line 24 
    if (! (tmp_0 != 0)) 
                        #line 14 
                        break;
  }
  #line 25 
  return -5;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/core.c"
bool mt76_poll(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val, int timeout)
{
  #line 31 
  u32 cur;
  #line 33 
  timeout /= 10;
  #line 34 
  while (1) {
    #line 44 
    int tmp_1;
    {
      #line 35 
      if ((int)test_bit(1L,& dev->state) != 0) 
                                               #line 36 
                                               return (_Bool)0;
      #line 38 
      cur = mt7601u_rr(dev,offset) & mask;
      #line 39 
      if (cur == val) 
                      #line 40 
                      return (_Bool)1;
      #line 42 
      __const_udelay(42950UL);
    }
    #line 44 
    tmp_1 = timeout;
    #line 44 
    timeout --;
    #line 44 
    ;
    #line 44 
    if (! (tmp_1 > 0)) 
                       #line 34 
                       break;
  }
  #line 45 
  _dev_err(dev->dev,(char *)"Error: Time out with reg %08x\n",offset);
  #line 47 
  return (_Bool)0;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/core.c"
bool mt76_poll_msec(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val, int timeout)
{
  #line 53 
  u32 cur;
  #line 55 
  timeout /= 10;
  #line 56 
  while (1) {
    #line 65 
    int tmp_1;
    {
      #line 57 
      if ((int)test_bit(1L,& dev->state) != 0) 
                                               #line 58 
                                               return (_Bool)0;
      #line 60 
      cur = mt7601u_rr(dev,offset) & mask;
      #line 61 
      if (cur == val) 
                      #line 62 
                      return (_Bool)1;
      #line 64 
      msleep(10U);
    }
    #line 65 
    tmp_1 = timeout;
    #line 65 
    timeout --;
    #line 65 
    ;
    #line 65 
    if (! (tmp_1 > 0)) 
                       #line 56 
                       break;
  }
  #line 67 
  _dev_err(dev->dev,(char *)"Error: Time out with reg %08x\n",offset);
  #line 69 
  return (_Bool)0;
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 *p)
{
  #line 58 
  return *p;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
#line 843 
static void cif_mutex_lock_vendor_req_mutex_of_mt7601u_dev(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 26 
void *ldv_devm_kmalloc(size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 223 
#line 223 
int rcu_read_lock_sched_held(void);
#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void)
{
  #line 733 
  __preempt_count_add(1);
  #line 734 
  ldv_inline_asm();
  #line 735 
  return;
}

#line 752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock_sched_notrace(void)
{
  #line 757 
  ldv_inline_asm();
  #line 755 
  __preempt_count_sub(1);
  #line 757 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
#line 118 
void complete(struct completion *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_mutex_unlock_vendor_req_mutex_of_mt7601u_dev(struct mutex *lock);
#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void *cif_devm_kmalloc(struct device *dev, size_t size, gfp_t flags);
#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_num(struct usb_endpoint_descriptor *epd)
{
  #line 464 
  return (int)epd->bEndpointAddress & 15;
}

#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_dir_in(struct usb_endpoint_descriptor *epd)
{
  #line 487 
  return ((int)epd->bEndpointAddress & 128) != 0;
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_dir_out(struct usb_endpoint_descriptor *epd)
{
  #line 499 
  return ((int)epd->bEndpointAddress & 128) == 0;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_xfer_bulk(struct usb_endpoint_descriptor *epd)
{
  #line 511 
  return ((int)epd->bmAttributes & 3) == 2;
}

#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_is_bulk_in(struct usb_endpoint_descriptor *epd)
{
  #line 566 
  int tmp_1;
  #line 566 
  if (usb_endpoint_xfer_bulk(epd) != 0) {
    #line 566 
    if (usb_endpoint_dir_in(epd) != 0) 
                                       #line 566 
                                       tmp_1 = 1; else 
                                                       #line 566 
                                                       tmp_1 = 0;
  }
  else 
       #line 566 
       tmp_1 = 0;
  #line 566 
  return tmp_1;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_is_bulk_out(struct usb_endpoint_descriptor *epd)
{
  #line 579 
  int tmp_1;
  #line 579 
  if (usb_endpoint_xfer_bulk(epd) != 0) {
    #line 579 
    if (usb_endpoint_dir_out(epd) != 0) 
                                        #line 579 
                                        tmp_1 = 1; else 
                                                        #line 579 
                                                        tmp_1 = 0;
  }
  else 
       #line 579 
       tmp_1 = 0;
  #line 579 
  return tmp_1;
}

#line 640  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/usb/ch9.h"
__inline static int usb_endpoint_maxp(struct usb_endpoint_descriptor *epd)
{
  #line 642 
  return (int)epd->wMaxPacketSize & 2047;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
__inline static void *usb_get_intfdata(struct usb_interface *intf)
{
  #line 265 
  return dev_get_drvdata(& intf->dev);
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
__inline static void usb_set_intfdata(struct usb_interface *intf, void *data)
{
  #line 270 
  dev_set_drvdata(& intf->dev,data);
  #line 271 
  return;
}

#line 714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
__inline static struct usb_device *interface_to_usbdev(struct usb_interface *intf)
{
  #line 716 
  void *__mptr;
  #line 716 
  __mptr = (void *)intf->dev.parent;
  #line 716 
  return ((struct usb_device *)(__mptr + 18446744073709551456U));
}

#line 719 
#line 719 
struct usb_device *usb_get_dev(struct usb_device *);
#line 720 
#line 720 
void usb_put_dev(struct usb_device *);
#line 746 
#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static int cif_usb_reset_device(struct usb_device *dev);
#line 1276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 873  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static int cif_usb_register_driver(struct usb_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *ldv_func_arg3);
#line 1282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 881  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_usb_deregister(struct usb_driver *ldv_func_arg1);
#line 1636  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
__inline static void usb_fill_bulk_urb(struct urb *urb, struct usb_device *dev, unsigned int pipe, void *transfer_buffer, int buffer_length, void (*complete_fn)(struct urb *), void *context)
{
  #line 1644 
  urb->dev = dev;
  #line 1645 
  urb->pipe = pipe;
  #line 1646 
  urb->transfer_buffer = transfer_buffer;
  #line 1647 
  urb->transfer_buffer_length = (unsigned int)buffer_length;
  #line 1648 
  urb->complete = complete_fn;
  #line 1649 
  urb->context = context;
  #line 1650 
  return;
}

#line 1706 
#line 1706 
struct urb *usb_alloc_urb(int, gfp_t);
#line 1707 
#line 1707 
void usb_free_urb(struct urb *);
#line 1711 
#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static int cif_usb_submit_urb(struct urb *urb, gfp_t mem_flags);
#line 1758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 1758 
void *usb_alloc_coherent(struct usb_device *, size_t, gfp_t, dma_addr_t *);
#line 1760 
#line 1760 
void usb_free_coherent(struct usb_device *, size_t, void *, dma_addr_t);
#line 1783 
#line 1783 
int usb_control_msg(struct usb_device *, unsigned int, __u8, __u8, __u16, __u16, void *, __u16, int);
#line 1925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev, unsigned int endpoint)
{
  #line 1928 
  return (unsigned int)(dev->devnum << 8) | (endpoint << 15);
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void *p)
{
  #line 15 
  return __le32_to_cpup((__le32 *)p);
}

#line 4289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4289 
void ieee80211_unregister_hw(struct ieee80211_hw *);
#line 4301 
#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw);
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_wr(struct mt7601u_dev *dev, u32 offset, u32 val);
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
u32 mt7601u_rmw(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val);
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
u32 mt7601u_rmc(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val);
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_wr_copy(struct mt7601u_dev *dev, u32 offset, void *data, int len);
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 328 
int mt7601u_burst_write_regs(struct mt7601u_dev *dev, u32 offset, u32 *data, int n);
#line 330 
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_addr_wr(struct mt7601u_dev *dev, u32 offset, u8 *addr);
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 333 
struct mt7601u_dev *mt7601u_alloc_device(struct device *pdev);
#line 334 
#line 334 
int mt7601u_init_hardware(struct mt7601u_dev *dev);
#line 335 
#line 335 
int mt7601u_register_device(struct mt7601u_dev *dev);
#line 336 
#line 336 
void mt7601u_cleanup(struct mt7601u_dev *dev);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
__inline static struct usb_device *mt7601u_to_usb_dev(struct mt7601u_dev *mt7601u)
{
  #line 45 
  void *__mptr;
  #line 45 
  __mptr = (void *)mt7601u->dev;
  #line 45 
  return interface_to_usbdev(((struct usb_interface *)(__mptr + 18446744073709551568U)));
}

#line 56 
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
bool mt7601u_usb_alloc_buf(struct mt7601u_dev *dev, size_t len, struct mt7601u_dma_buf *buf);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_usb_free_buf(struct mt7601u_dev *dev, struct mt7601u_dma_buf *buf);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
int mt7601u_usb_submit_buf(struct mt7601u_dev *dev, int dir, int ep_idx, struct mt7601u_dma_buf *buf, gfp_t gfp, void (*complete_fn)(struct urb *), void *context);
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_complete_urb(struct urb *urb);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
int mt7601u_vendor_request(struct mt7601u_dev *dev, u8 req, u8 direction, u16 val, u16 offset, void *buf, size_t buflen);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_vendor_reset(struct mt7601u_dev *dev);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
int mt7601u_vendor_single_wr(struct mt7601u_dev *dev, u8 req, u16 offset, u32 val);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
#line 46 
struct tracepoint __tracepoint_reg_read;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_reg_read(struct mt7601u_dev *dev, u32 reg, u32 val)
{
  #line 46 
  int pscr_ret___0;
  #line 46 
  if ((int)static_key_false(& __tracepoint_reg_read.key) != 0) {
    #line 46 
    int pscr_ret__;
    #line 46 
    struct tracepoint_func *________p1;
    #line 46 
    struct tracepoint_func *it_func_ptr;
    #line 46 
    void *it_func;
    #line 46 
    void *__data;
    #line 46 
    int __idx = 0;
    {
      #line 46 
      void *__vpp_verify = (void *)0;
      #line 46 
      void *tmp = __vpp_verify;
    }
    #line 46 
    switch (4UL) {
      #line 46 
      int pfo_ret__;
      #line 46 
      int pfo_ret___0;
      #line 46 
      int pfo_ret___1;
      #line 46 
      int pfo_ret___2;
      #line 46 
      case (unsigned long)1: 
                             #line 46 
      ;
      #line 46 
      switch (4UL) {
        #line 46 
        case (unsigned long)1: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)2: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)4: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)8: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        default: 
                 #line 46 
        ;
        #line 46 
        __bad_percpu_size();
      }
      #line 46 
      pscr_ret__ = pfo_ret__;
      #line 46 
      break;
      #line 46 
      case (unsigned long)2: 
                             #line 46 
      ;
      #line 46 
      switch (4UL) {
        #line 46 
        case (unsigned long)1: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)2: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)4: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)8: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        default: 
                 #line 46 
        ;
        #line 46 
        __bad_percpu_size();
      }
      #line 46 
      pscr_ret__ = pfo_ret___0;
      #line 46 
      break;
      #line 46 
      case (unsigned long)4: 
                             #line 46 
      ;
      #line 46 
      switch (4UL) {
        #line 46 
        case (unsigned long)1: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)2: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)4: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)8: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        default: 
                 #line 46 
        ;
        #line 46 
        __bad_percpu_size();
      }
      #line 46 
      pscr_ret__ = pfo_ret___1;
      #line 46 
      break;
      #line 46 
      case (unsigned long)8: 
                             #line 46 
      ;
      #line 46 
      switch (4UL) {
        #line 46 
        case (unsigned long)1: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)2: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)4: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        case (unsigned long)8: 
                               #line 46 
        ;
        #line 47 
        ldv_inline_asm();
        #line 46 
        break;
        #line 46 
        default: 
                 #line 46 
        ;
        #line 46 
        __bad_percpu_size();
      }
      #line 46 
      pscr_ret__ = pfo_ret___2;
      #line 46 
      break;
      #line 46 
      default: 
               #line 46 
      ;
      #line 46 
      __bad_size_call_parameter();
      #line 46 
      break;
    }
    #line 46 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 46 
                                                               return;
    {
      #line 46 
      int __ret_warn_on = 0;
      #line 46 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 47 
        ldv_inline_asm();
        #line 48 
        ldv_inline_asm();
      }
      #line 46 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 46 
    __preempt_count_add(1);
    #line 47 
    ldv_inline_asm();
    {
      #line 47 
      union __anonunion___u_2060 __u;
      #line 46 
      __read_once_size((void *)(& __tracepoint_reg_read.funcs),(void *)(& __u.__c),8);
      #line 46 
      ________p1 = (__u.__val);
      }
    #line 46 
    it_func_ptr = ________p1;
    #line 46 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 46 
      while (1) {
        #line 46 
        it_func = it_func_ptr->func;
        #line 46 
        __data = it_func_ptr->data;
        #line 46 
        (*((void (*)(void *, struct mt7601u_dev *, u32 , u32 ))it_func))(__data,dev,reg,val);
        #line 46 
        it_func_ptr ++;
        #line 47 
        ;
        #line 47 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 46 
                                                break;
      }
    #line 48 
    ldv_inline_asm();
    #line 46 
    __preempt_count_sub(1);
  }
  {
    #line 46 
    void *__vpp_verify_0 = (void *)0;
    #line 46 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 46 
  switch (4UL) {
    #line 46 
    int pfo_ret___5;
    #line 46 
    int pfo_ret___6;
    #line 46 
    int pfo_ret___3;
    #line 46 
    int pfo_ret___4;
    #line 46 
    case (unsigned long)1: 
                           #line 46 
    ;
    #line 46 
    switch (4UL) {
      #line 46 
      case (unsigned long)1: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)2: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)4: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)8: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      default: 
               #line 46 
      ;
      #line 46 
      __bad_percpu_size();
    }
    #line 46 
    pscr_ret___0 = pfo_ret___3;
    #line 46 
    break;
    #line 46 
    case (unsigned long)2: 
                           #line 46 
    ;
    #line 46 
    switch (4UL) {
      #line 46 
      case (unsigned long)1: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)2: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)4: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)8: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      default: 
               #line 46 
      ;
      #line 46 
      __bad_percpu_size();
    }
    #line 46 
    pscr_ret___0 = pfo_ret___4;
    #line 46 
    break;
    #line 46 
    case (unsigned long)4: 
                           #line 46 
    ;
    #line 46 
    switch (4UL) {
      #line 46 
      case (unsigned long)1: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)2: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)4: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)8: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      default: 
               #line 46 
      ;
      #line 46 
      __bad_percpu_size();
    }
    #line 46 
    pscr_ret___0 = pfo_ret___5;
    #line 46 
    break;
    #line 46 
    case (unsigned long)8: 
                           #line 46 
    ;
    #line 46 
    switch (4UL) {
      #line 46 
      case (unsigned long)1: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)2: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)4: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      case (unsigned long)8: 
                             #line 46 
      ;
      #line 47 
      ldv_inline_asm();
      #line 46 
      break;
      #line 46 
      default: 
               #line 46 
      ;
      #line 46 
      __bad_percpu_size();
    }
    #line 46 
    pscr_ret___0 = pfo_ret___6;
    #line 46 
    break;
    #line 46 
    default: 
             #line 46 
    ;
    #line 46 
    __bad_size_call_parameter();
    #line 46 
    break;
  }
  #line 46 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 46 
    rcu_read_lock_sched_notrace();
    {
      #line 47 
      union __anonunion___u_2062 __u_0;
      #line 46 
      __read_once_size((void *)(& __tracepoint_reg_read.funcs),(void *)(& __u_0.__c),8);
      #line 46 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 46 
        bool __warned;
        #line 46 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 46 
          if (! __warned) {
            #line 46 
            if (rcu_read_lock_sched_held() == 0) {
              #line 46 
              __warned = (_Bool)1;
              #line 46 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",46,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 46 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 46 
    rcu_read_unlock_sched_notrace();
  }
  #line 48 
  return;
}

#line 51 
#line 51 
struct tracepoint __tracepoint_reg_write;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_reg_write(struct mt7601u_dev *dev, u32 reg, u32 val)
{
  #line 51 
  int pscr_ret___0;
  #line 51 
  if ((int)static_key_false(& __tracepoint_reg_write.key) != 0) {
    #line 51 
    struct tracepoint_func *________p1;
    #line 51 
    int pscr_ret__;
    #line 51 
    struct tracepoint_func *it_func_ptr;
    #line 51 
    void *it_func;
    #line 51 
    void *__data;
    #line 51 
    int __idx = 0;
    {
      #line 51 
      void *__vpp_verify = (void *)0;
      #line 51 
      void *tmp = __vpp_verify;
    }
    #line 51 
    switch (4UL) {
      #line 51 
      int pfo_ret__;
      #line 51 
      int pfo_ret___0;
      #line 51 
      int pfo_ret___1;
      #line 51 
      int pfo_ret___2;
      #line 51 
      case (unsigned long)1: 
                             #line 51 
      ;
      #line 51 
      switch (4UL) {
        #line 51 
        case (unsigned long)1: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)2: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)4: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)8: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        default: 
                 #line 51 
        ;
        #line 51 
        __bad_percpu_size();
      }
      #line 51 
      pscr_ret__ = pfo_ret__;
      #line 51 
      break;
      #line 51 
      case (unsigned long)2: 
                             #line 51 
      ;
      #line 51 
      switch (4UL) {
        #line 51 
        case (unsigned long)1: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)2: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)4: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)8: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        default: 
                 #line 51 
        ;
        #line 51 
        __bad_percpu_size();
      }
      #line 51 
      pscr_ret__ = pfo_ret___0;
      #line 51 
      break;
      #line 51 
      case (unsigned long)4: 
                             #line 51 
      ;
      #line 51 
      switch (4UL) {
        #line 51 
        case (unsigned long)1: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)2: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)4: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)8: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        default: 
                 #line 51 
        ;
        #line 51 
        __bad_percpu_size();
      }
      #line 51 
      pscr_ret__ = pfo_ret___1;
      #line 51 
      break;
      #line 51 
      case (unsigned long)8: 
                             #line 51 
      ;
      #line 51 
      switch (4UL) {
        #line 51 
        case (unsigned long)1: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)2: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)4: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        case (unsigned long)8: 
                               #line 51 
        ;
        #line 52 
        ldv_inline_asm();
        #line 51 
        break;
        #line 51 
        default: 
                 #line 51 
        ;
        #line 51 
        __bad_percpu_size();
      }
      #line 51 
      pscr_ret__ = pfo_ret___2;
      #line 51 
      break;
      #line 51 
      default: 
               #line 51 
      ;
      #line 51 
      __bad_size_call_parameter();
      #line 51 
      break;
    }
    #line 51 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 51 
                                                               return;
    {
      #line 51 
      int __ret_warn_on = 0;
      #line 51 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 52 
        ldv_inline_asm();
        #line 53 
        ldv_inline_asm();
      }
      #line 51 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 51 
    __preempt_count_add(1);
    #line 52 
    ldv_inline_asm();
    {
      #line 52 
      union __anonunion___u_2064 __u;
      #line 51 
      __read_once_size((void *)(& __tracepoint_reg_write.funcs),(void *)(& __u.__c),8);
      #line 51 
      ________p1 = (__u.__val);
      }
    #line 51 
    it_func_ptr = ________p1;
    #line 51 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 51 
      while (1) {
        #line 51 
        it_func = it_func_ptr->func;
        #line 51 
        __data = it_func_ptr->data;
        #line 51 
        (*((void (*)(void *, struct mt7601u_dev *, u32 , u32 ))it_func))(__data,dev,reg,val);
        #line 51 
        it_func_ptr ++;
        #line 52 
        ;
        #line 52 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 51 
                                                break;
      }
    #line 53 
    ldv_inline_asm();
    #line 51 
    __preempt_count_sub(1);
  }
  {
    #line 51 
    void *__vpp_verify_0 = (void *)0;
    #line 51 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 51 
  switch (4UL) {
    #line 51 
    int pfo_ret___5;
    #line 51 
    int pfo_ret___6;
    #line 51 
    int pfo_ret___3;
    #line 51 
    int pfo_ret___4;
    #line 51 
    case (unsigned long)1: 
                           #line 51 
    ;
    #line 51 
    switch (4UL) {
      #line 51 
      case (unsigned long)1: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)2: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)4: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)8: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      default: 
               #line 51 
      ;
      #line 51 
      __bad_percpu_size();
    }
    #line 51 
    pscr_ret___0 = pfo_ret___3;
    #line 51 
    break;
    #line 51 
    case (unsigned long)2: 
                           #line 51 
    ;
    #line 51 
    switch (4UL) {
      #line 51 
      case (unsigned long)1: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)2: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)4: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)8: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      default: 
               #line 51 
      ;
      #line 51 
      __bad_percpu_size();
    }
    #line 51 
    pscr_ret___0 = pfo_ret___4;
    #line 51 
    break;
    #line 51 
    case (unsigned long)4: 
                           #line 51 
    ;
    #line 51 
    switch (4UL) {
      #line 51 
      case (unsigned long)1: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)2: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)4: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)8: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      default: 
               #line 51 
      ;
      #line 51 
      __bad_percpu_size();
    }
    #line 51 
    pscr_ret___0 = pfo_ret___5;
    #line 51 
    break;
    #line 51 
    case (unsigned long)8: 
                           #line 51 
    ;
    #line 51 
    switch (4UL) {
      #line 51 
      case (unsigned long)1: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)2: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)4: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      case (unsigned long)8: 
                             #line 51 
      ;
      #line 52 
      ldv_inline_asm();
      #line 51 
      break;
      #line 51 
      default: 
               #line 51 
      ;
      #line 51 
      __bad_percpu_size();
    }
    #line 51 
    pscr_ret___0 = pfo_ret___6;
    #line 51 
    break;
    #line 51 
    default: 
             #line 51 
    ;
    #line 51 
    __bad_size_call_parameter();
    #line 51 
    break;
  }
  #line 51 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 51 
    rcu_read_lock_sched_notrace();
    {
      #line 52 
      union __anonunion___u_2066 __u_0;
      #line 51 
      __read_once_size((void *)(& __tracepoint_reg_write.funcs),(void *)(& __u_0.__c),8);
      #line 51 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 51 
        bool __warned;
        #line 51 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 51 
          if (! __warned) {
            #line 51 
            if (rcu_read_lock_sched_held() == 0) {
              #line 51 
              __warned = (_Bool)1;
              #line 51 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",51,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 51 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 51 
    rcu_read_unlock_sched_notrace();
  }
  #line 53 
  return;
}

#line 56 
#line 56 
struct tracepoint __tracepoint_mt_submit_urb;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_submit_urb(struct mt7601u_dev *dev, struct urb *u)
{
  #line 56 
  int pscr_ret___0;
  #line 56 
  if ((int)static_key_false(& __tracepoint_mt_submit_urb.key) != 0) {
    #line 56 
    int pscr_ret__;
    #line 56 
    struct tracepoint_func *________p1;
    #line 56 
    struct tracepoint_func *it_func_ptr;
    #line 56 
    void *it_func;
    #line 56 
    void *__data;
    #line 56 
    int __idx = 0;
    {
      #line 56 
      void *__vpp_verify = (void *)0;
      #line 56 
      void *tmp = __vpp_verify;
    }
    #line 56 
    switch (4UL) {
      #line 56 
      int pfo_ret__;
      #line 56 
      int pfo_ret___0;
      #line 56 
      int pfo_ret___1;
      #line 56 
      int pfo_ret___2;
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret__;
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___0;
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___1;
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___2;
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_size_call_parameter();
      #line 56 
      break;
    }
    #line 56 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 56 
                                                               return;
    {
      #line 56 
      int __ret_warn_on = 0;
      #line 56 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 57 
        ldv_inline_asm();
        #line 58 
        ldv_inline_asm();
      }
      #line 56 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 56 
    __preempt_count_add(1);
    #line 57 
    ldv_inline_asm();
    {
      #line 57 
      union __anonunion___u_2068 __u;
      #line 56 
      __read_once_size((void *)(& __tracepoint_mt_submit_urb.funcs),(void *)(& __u.__c),8);
      #line 56 
      ________p1 = (__u.__val);
      }
    #line 56 
    it_func_ptr = ________p1;
    #line 56 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 56 
      while (1) {
        #line 56 
        it_func = it_func_ptr->func;
        #line 56 
        __data = it_func_ptr->data;
        #line 56 
        (*((void (*)(void *, struct mt7601u_dev *, struct urb *))it_func))(__data,dev,u);
        #line 56 
        it_func_ptr ++;
        #line 57 
        ;
        #line 57 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 56 
                                                break;
      }
    #line 58 
    ldv_inline_asm();
    #line 56 
    __preempt_count_sub(1);
  }
  {
    #line 56 
    void *__vpp_verify_0 = (void *)0;
    #line 56 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 56 
  switch (4UL) {
    #line 56 
    int pfo_ret___6;
    #line 56 
    int pfo_ret___3;
    #line 56 
    int pfo_ret___4;
    #line 56 
    int pfo_ret___5;
    #line 56 
    case (unsigned long)1: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___3;
    #line 56 
    break;
    #line 56 
    case (unsigned long)2: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___4;
    #line 56 
    break;
    #line 56 
    case (unsigned long)4: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___5;
    #line 56 
    break;
    #line 56 
    case (unsigned long)8: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___6;
    #line 56 
    break;
    #line 56 
    default: 
             #line 56 
    ;
    #line 56 
    __bad_size_call_parameter();
    #line 56 
    break;
  }
  #line 56 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 56 
    rcu_read_lock_sched_notrace();
    {
      #line 57 
      union __anonunion___u_2070 __u_0;
      #line 56 
      __read_once_size((void *)(& __tracepoint_mt_submit_urb.funcs),(void *)(& __u_0.__c),8);
      #line 56 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 56 
        bool __warned;
        #line 56 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 56 
          if (! __warned) {
            #line 56 
            if (rcu_read_lock_sched_held() == 0) {
              #line 56 
              __warned = (_Bool)1;
              #line 56 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",56,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 56 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 56 
    rcu_read_unlock_sched_notrace();
  }
  #line 58 
  return;
}

#line 98 
#line 98 
struct tracepoint __tracepoint_mt_vend_req;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_vend_req(struct mt7601u_dev *dev, unsigned int pipe, u8 req, u8 req_type, u16 val, u16 offset, void *buf, size_t buflen, int ret)
{
  #line 98 
  int pscr_ret___0;
  #line 98 
  if ((int)static_key_false(& __tracepoint_mt_vend_req.key) != 0) {
    #line 98 
    int pscr_ret__;
    #line 98 
    struct tracepoint_func *________p1;
    #line 98 
    struct tracepoint_func *it_func_ptr;
    #line 98 
    void *it_func;
    #line 98 
    void *__data;
    #line 98 
    int __idx = 0;
    {
      #line 98 
      void *__vpp_verify = (void *)0;
      #line 98 
      void *tmp = __vpp_verify;
    }
    #line 98 
    switch (4UL) {
      #line 98 
      int pfo_ret__;
      #line 98 
      int pfo_ret___0;
      #line 98 
      int pfo_ret___1;
      #line 98 
      int pfo_ret___2;
      #line 98 
      case (unsigned long)1: 
                             #line 98 
      ;
      #line 98 
      switch (4UL) {
        #line 98 
        case (unsigned long)1: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)2: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)4: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)8: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        default: 
                 #line 98 
        ;
        #line 98 
        __bad_percpu_size();
      }
      #line 98 
      pscr_ret__ = pfo_ret__;
      #line 98 
      break;
      #line 98 
      case (unsigned long)2: 
                             #line 98 
      ;
      #line 98 
      switch (4UL) {
        #line 98 
        case (unsigned long)1: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)2: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)4: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)8: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        default: 
                 #line 98 
        ;
        #line 98 
        __bad_percpu_size();
      }
      #line 98 
      pscr_ret__ = pfo_ret___0;
      #line 98 
      break;
      #line 98 
      case (unsigned long)4: 
                             #line 98 
      ;
      #line 98 
      switch (4UL) {
        #line 98 
        case (unsigned long)1: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)2: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)4: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)8: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        default: 
                 #line 98 
        ;
        #line 98 
        __bad_percpu_size();
      }
      #line 98 
      pscr_ret__ = pfo_ret___1;
      #line 98 
      break;
      #line 98 
      case (unsigned long)8: 
                             #line 98 
      ;
      #line 98 
      switch (4UL) {
        #line 98 
        case (unsigned long)1: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)2: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)4: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        case (unsigned long)8: 
                               #line 98 
        ;
        #line 99 
        ldv_inline_asm();
        #line 98 
        break;
        #line 98 
        default: 
                 #line 98 
        ;
        #line 98 
        __bad_percpu_size();
      }
      #line 98 
      pscr_ret__ = pfo_ret___2;
      #line 98 
      break;
      #line 98 
      default: 
               #line 98 
      ;
      #line 98 
      __bad_size_call_parameter();
      #line 98 
      break;
    }
    #line 98 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 98 
                                                               return;
    {
      #line 98 
      int __ret_warn_on = 0;
      #line 98 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 99 
        ldv_inline_asm();
        #line 100 
        ldv_inline_asm();
      }
      #line 98 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 98 
    __preempt_count_add(1);
    #line 99 
    ldv_inline_asm();
    {
      #line 99 
      union __anonunion___u_2076 __u;
      #line 98 
      __read_once_size((void *)(& __tracepoint_mt_vend_req.funcs),(void *)(& __u.__c),8);
      #line 98 
      ________p1 = (__u.__val);
      }
    #line 98 
    it_func_ptr = ________p1;
    #line 98 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 98 
      while (1) {
        #line 98 
        it_func = it_func_ptr->func;
        #line 98 
        __data = it_func_ptr->data;
        #line 98 
        (*((void (*)(void *, struct mt7601u_dev *, unsigned int , u8 , u8 , u16 , u16 , void *, size_t , int ))it_func))(__data,dev,pipe,(unsigned char)((int)req),(unsigned char)((int)req_type),(unsigned short)((int)val),(unsigned short)((int)offset),buf,buflen,ret);
        #line 98 
        it_func_ptr ++;
        #line 99 
        ;
        #line 99 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 98 
                                                break;
      }
    #line 100 
    ldv_inline_asm();
    #line 98 
    __preempt_count_sub(1);
  }
  {
    #line 98 
    void *__vpp_verify_0 = (void *)0;
    #line 98 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 98 
  switch (4UL) {
    #line 98 
    int pfo_ret___6;
    #line 98 
    int pfo_ret___3;
    #line 98 
    int pfo_ret___4;
    #line 98 
    int pfo_ret___5;
    #line 98 
    case (unsigned long)1: 
                           #line 98 
    ;
    #line 98 
    switch (4UL) {
      #line 98 
      case (unsigned long)1: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)2: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)4: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)8: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      default: 
               #line 98 
      ;
      #line 98 
      __bad_percpu_size();
    }
    #line 98 
    pscr_ret___0 = pfo_ret___3;
    #line 98 
    break;
    #line 98 
    case (unsigned long)2: 
                           #line 98 
    ;
    #line 98 
    switch (4UL) {
      #line 98 
      case (unsigned long)1: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)2: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)4: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)8: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      default: 
               #line 98 
      ;
      #line 98 
      __bad_percpu_size();
    }
    #line 98 
    pscr_ret___0 = pfo_ret___4;
    #line 98 
    break;
    #line 98 
    case (unsigned long)4: 
                           #line 98 
    ;
    #line 98 
    switch (4UL) {
      #line 98 
      case (unsigned long)1: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)2: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)4: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)8: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      default: 
               #line 98 
      ;
      #line 98 
      __bad_percpu_size();
    }
    #line 98 
    pscr_ret___0 = pfo_ret___5;
    #line 98 
    break;
    #line 98 
    case (unsigned long)8: 
                           #line 98 
    ;
    #line 98 
    switch (4UL) {
      #line 98 
      case (unsigned long)1: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)2: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)4: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      case (unsigned long)8: 
                             #line 98 
      ;
      #line 99 
      ldv_inline_asm();
      #line 98 
      break;
      #line 98 
      default: 
               #line 98 
      ;
      #line 98 
      __bad_percpu_size();
    }
    #line 98 
    pscr_ret___0 = pfo_ret___6;
    #line 98 
    break;
    #line 98 
    default: 
             #line 98 
    ;
    #line 98 
    __bad_size_call_parameter();
    #line 98 
    break;
  }
  #line 98 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 98 
    rcu_read_lock_sched_notrace();
    {
      #line 99 
      union __anonunion___u_2078 __u_0;
      #line 98 
      __read_once_size((void *)(& __tracepoint_mt_vend_req.funcs),(void *)(& __u_0.__c),8);
      #line 98 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 98 
        bool __warned;
        #line 98 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 98 
          if (! __warned) {
            #line 98 
            if (rcu_read_lock_sched_held() == 0) {
              #line 98 
              __warned = (_Bool)1;
              #line 98 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",98,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 98 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 98 
    rcu_read_unlock_sched_notrace();
  }
  #line 100 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static struct usb_device_id mt7601u_device_table[17U] = {{.match_flags = (unsigned short)3U, .idVendor = (unsigned short)2821U, .idProduct = (unsigned short)6099U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)3725U, .idProduct = (unsigned short)30218U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)3725U, .idProduct = (unsigned short)30219U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5075U, .idProduct = (unsigned short)13361U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5075U, .idProduct = (unsigned short)13364U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5263U, .idProduct = (unsigned short)30209U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5263U, .idProduct = (unsigned short)30218U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5263U, .idProduct = (unsigned short)30219U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5263U, .idProduct = (unsigned short)30220U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)5263U, .idProduct = (unsigned short)30221U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)8193U, .idProduct = (unsigned short)15620U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)10007U, .idProduct = (unsigned short)16646U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)10581U, .idProduct = (unsigned short)1U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)10581U, .idProduct = (unsigned short)4097U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)10847U, .idProduct = (unsigned short)4096U}, {.match_flags = (unsigned short)3U, .idVendor = (unsigned short)29586U, .idProduct = (unsigned short)30480U}};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
bool mt7601u_usb_alloc_buf(struct mt7601u_dev *dev, size_t len, struct mt7601u_dma_buf *buf)
{
  #line 37 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 39 
  buf->len = len;
  #line 40 
  buf->urb = usb_alloc_urb(0,3264U);
  #line 41 
  buf->buf = usb_alloc_coherent(usb_dev,buf->len,3264U,& buf->dma);
  #line 43 
  return (_Bool)((buf->urb == (struct urb *)0 || buf->buf == (void *)0) != 0);
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_usb_free_buf(struct mt7601u_dev *dev, struct mt7601u_dma_buf *buf)
{
  #line 48 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 50 
  usb_free_coherent(usb_dev,buf->len,buf->buf,buf->dma);
  #line 51 
  usb_free_urb(buf->urb);
  #line 52 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
int mt7601u_usb_submit_buf(struct mt7601u_dev *dev, int dir, int ep_idx, struct mt7601u_dma_buf *buf, gfp_t gfp, void (*complete_fn)(struct urb *), void *context)
{
  #line 59 
  unsigned int pipe;
  #line 60 
  int ret;
  #line 58 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 62 
  if (dir == 128) {
    #line 63 
    pipe = __create_pipe(usb_dev,(unsigned int)dev->in_eps[ep_idx]) | 3221225600U;
  }
  else {
    #line 65 
    pipe = __create_pipe(usb_dev,(unsigned int)dev->out_eps[ep_idx]) | 3221225472U;
  }
  #line 67 
  usb_fill_bulk_urb(buf->urb,usb_dev,pipe,buf->buf,(int)buf->len,complete_fn,context);
  #line 69 
  (buf->urb)->transfer_dma = buf->dma;
  #line 70 
  (buf->urb)->transfer_flags |= 4U;
  #line 72 
  trace_mt_submit_urb(dev,buf->urb);
  #line 73 
  ret = cif_usb_submit_urb(buf->urb,gfp);
  #line 74 
  if (ret != 0) 
                #line 75 
                _dev_err(dev->dev,(char *)"Error: submit URB dir:%d ep:%d failed:%d\n",dir,ep_idx,ret);
  #line 77 
  return ret;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_complete_urb(struct urb *urb)
{
  #line 82 
  struct completion *cmpl = (struct completion *)urb->context;
  #line 84 
  complete(cmpl);
  #line 85 
  return;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
int mt7601u_vendor_request(struct mt7601u_dev *dev, u8 req, u8 direction, u16 val, u16 offset, void *buf, size_t buflen)
{
  #line 91 
  int i;
  #line 91 
  int ret;
  #line 94 
  unsigned int tmp_2;
  #line 92 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 93 
  u8 req_type = (unsigned char)((unsigned int)direction | 64U);
  #line 94 
  if ((unsigned int)direction == 128U) {
    #line 94 
    tmp_2 = __create_pipe(usb_dev,0U) | 2147483776U;
  }
  else {
    #line 94 
    tmp_2 = __create_pipe(usb_dev,0U) | 2147483648U;
  }
  #line 94 
  unsigned int pipe = tmp_2;
  #line 97 
  i = 0;
  #line 97 
  while (i <= 9) {
    #line 98 
    ret = usb_control_msg(usb_dev,pipe,(unsigned char)((int)req),(unsigned char)((int)req_type),(unsigned short)((int)val),(unsigned short)((int)offset),buf,(unsigned short)((int)((unsigned short)buflen)),300);
    #line 101 
    trace_mt_vend_req(dev,pipe,(unsigned char)((int)req),(unsigned char)((int)req_type),(unsigned short)((int)val),(unsigned short)((int)offset),buf,buflen,ret);
    #line 104 
    if (ret == -19) 
                    #line 105 
                    cif_set_bit(1L,& dev->state);
    #line 106 
    if (ret >= 0 || ret == -19) 
                                #line 107 
                                return ret;
    #line 109 
    msleep(5U);
    #line 97 
    i ++;
  }
  #line 112 
  _dev_err(dev->dev,(char *)"Vendor request req:%02x off:%04x failed:%d\n",(int)req,(int)offset,ret);
  #line 115 
  return ret;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_vendor_reset(struct mt7601u_dev *dev)
{
  #line 120 
  mt7601u_vendor_request(dev,(unsigned char)1,(unsigned char)0,(unsigned short)1,(unsigned short)0,(void *)0,0UL);
  #line 121 
  return;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static u32 __mt7601u_rr(struct mt7601u_dev *dev, u32 offset)
{
  #line 127 
  int ret;
  #line 128 
  u32 val = 4294967295U;
  {
    #line 130 
    bool __warned;
    #line 130 
    int __ret_warn_once = offset > 65535U;
    #line 130 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 130 
      __warned = (_Bool)1;
      {
        #line 130 
        int __ret_warn_on = 1;
        #line 130 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 130 
          __warn_printk((char *)"read high off:%08x",offset);
          #line 131 
          ldv_inline_asm();
          #line 132 
          ldv_inline_asm();
        }
        #line 130 
        long tmp = (long)(__ret_warn_on != 0);
      }
    }
    #line 130 
    long tmp_3 = (long)(__ret_warn_once != 0);
  }
  #line 132 
  ret = mt7601u_vendor_request(dev,(unsigned char)7,(unsigned char)128,(unsigned short)0,(unsigned short)((int)((unsigned short)offset)),dev->vend_buf,4UL);
  #line 134 
  if (ret == 4) 
                #line 135 
                val = get_unaligned_le32(dev->vend_buf);
  else 
    #line 136 
    if (ret > 0) 
                 #line 137 
                 _dev_err(dev->dev,(char *)"Error: wrong size read:%d off:%08x\n",ret,offset);
  #line 140 
  trace_reg_read(dev,offset,val);
  #line 141 
  return val;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
u32 mt7601u_rr(struct mt7601u_dev *dev, u32 offset)
{
  #line 146 
  u32 ret;
  #line 148 
  cif_mutex_lock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 149 
  ret = __mt7601u_rr(dev,offset);
  #line 150 
  cif_mutex_unlock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 152 
  return ret;
}

#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static int __mt7601u_vendor_single_wr(struct mt7601u_dev *dev, u8 req, u16 offset, u32 val)
{
  #line 159 
  int ret = mt7601u_vendor_request(dev,(unsigned char)((int)req),(unsigned char)0,(unsigned short)((int)((unsigned short)val)),(unsigned short)((int)offset),(void *)0,0UL);
  #line 161 
  if (ret == 0) 
                #line 162 
                ret = mt7601u_vendor_request(dev,(unsigned char)((int)req),(unsigned char)0,(unsigned short)((int)((unsigned short)(val >> 16))),(unsigned short)((int)((unsigned int)offset + 2U)),(void *)0,0UL);
  #line 164 
  trace_reg_write(dev,(unsigned int)offset,val);
  #line 165 
  return ret;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
int mt7601u_vendor_single_wr(struct mt7601u_dev *dev, u8 req, u16 offset, u32 val)
{
  #line 171 
  int ret;
  #line 173 
  cif_mutex_lock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 174 
  ret = __mt7601u_vendor_single_wr(dev,(unsigned char)((int)req),(unsigned short)((int)offset),val);
  #line 175 
  cif_mutex_unlock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 177 
  return ret;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_wr(struct mt7601u_dev *dev, u32 offset, u32 val)
{
  {
    #line 182 
    bool __warned;
    #line 182 
    int __ret_warn_once = offset > 65535U;
    #line 182 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 182 
      __warned = (_Bool)1;
      {
        #line 182 
        int __ret_warn_on = 1;
        #line 182 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 182 
          __warn_printk((char *)"write high off:%08x",offset);
          #line 183 
          ldv_inline_asm();
          #line 184 
          ldv_inline_asm();
        }
        #line 182 
        long tmp = (long)(__ret_warn_on != 0);
      }
    }
    #line 182 
    long tmp_3 = (long)(__ret_warn_once != 0);
  }
  #line 184 
  mt7601u_vendor_single_wr(dev,(unsigned char)2,(unsigned short)((int)((unsigned short)offset)),val);
  #line 185 
  return;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
u32 mt7601u_rmw(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val)
{
  #line 189 
  cif_mutex_lock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 190 
  val = (__mt7601u_rr(dev,offset) & ~ mask) | val;
  #line 191 
  __mt7601u_vendor_single_wr(dev,(unsigned char)2,(unsigned short)((int)((unsigned short)offset)),val);
  #line 192 
  cif_mutex_unlock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 194 
  return val;
}

#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
u32 mt7601u_rmc(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val)
{
  #line 199 
  u32 reg;
  #line 201 
  cif_mutex_lock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 202 
  reg = __mt7601u_rr(dev,offset);
  #line 203 
  val = (~ mask & reg) | val;
  #line 204 
  if (reg != val) 
                  #line 205 
                  __mt7601u_vendor_single_wr(dev,(unsigned char)2,(unsigned short)((int)((unsigned short)offset)),val);
  #line 207 
  cif_mutex_unlock_vendor_req_mutex_of_mt7601u_dev(& dev->vendor_req_mutex);
  #line 209 
  return val;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_wr_copy(struct mt7601u_dev *dev, u32 offset, void *data, int len)
{
  {
    #line 215 
    bool __warned;
    #line 215 
    int __ret_warn_once = (offset & 3U) != 0U;
    #line 215 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 215 
      __warned = (_Bool)1;
      {
        #line 215 
        int __ret_warn_on = 1;
        #line 215 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 215 
          __warn_printk((char *)"unaligned write copy off:%08x",offset);
          #line 216 
          ldv_inline_asm();
          #line 217 
          ldv_inline_asm();
        }
        #line 215 
        long tmp = (long)(__ret_warn_on != 0);
      }
    }
    #line 215 
    long tmp_3 = (long)(__ret_warn_once != 0);
  }
  {
    #line 216 
    bool __warned_0;
    #line 216 
    int __ret_warn_once_0 = (len & 3) != 0;
    #line 216 
    if ((long)(__ret_warn_once_0 != 0) != 0L && (long)(! __warned_0) != 0L) {
      #line 216 
      __warned_0 = (_Bool)1;
      {
        #line 216 
        int __ret_warn_on_0 = 1;
        #line 216 
        if ((long)(__ret_warn_on_0 != 0) != 0L) {
          #line 216 
          __warn_printk((char *)"short write copy off:%08x",offset);
          #line 217 
          ldv_inline_asm();
          #line 218 
          ldv_inline_asm();
        }
        #line 216 
        long tmp_5 = (long)(__ret_warn_on_0 != 0);
      }
    }
    #line 216 
    long tmp_7 = (long)(__ret_warn_once_0 != 0);
  }
  #line 218 
  mt7601u_burst_write_regs(dev,offset,(u32 *)data,len / 4);
  #line 219 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
void mt7601u_addr_wr(struct mt7601u_dev *dev, u32 offset, u8 *addr)
{
  #line 223 
  ;
  #line 223 
  ;
  #line 223 
  mt7601u_wr(dev,offset,get_unaligned_le32((void *)addr));
  #line 224 
  mt7601u_wr(dev,offset + 4U,(unsigned int)((int)*(addr + 4U) | ((int)*(addr + 5U) << 8)));
  #line 225 
  return;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static int mt7601u_assign_pipes(struct usb_interface *usb_intf, struct mt7601u_dev *dev)
{
  #line 230 
  struct usb_endpoint_descriptor *ep_desc;
  #line 232 
  unsigned int i;
  #line 231 
  struct usb_host_interface *intf_desc = usb_intf->cur_altsetting;
  #line 232 
  unsigned int ep_i = 0U;
  #line 232 
  unsigned int ep_o = 0U;
  #line 237 
  i = 0U;
  #line 237 
  while ((unsigned int)intf_desc->desc.bNumEndpoints > i) {
    {
      #line 238 
      ep_desc = & (intf_desc->endpoint + (unsigned long)i)->desc;
      #line 240 
      if (usb_endpoint_is_bulk_in(ep_desc) != 0) {
        #line 240 
        unsigned int tmp_6;
        #line 240 
        tmp_6 = ep_i;
        #line 240 
        ep_i ++;
        #line 240 
        ;
        #line 240 
        if (tmp_6 <= 1U) {
          #line 242 
          dev->in_eps[ep_i + 4294967295U] = (unsigned char)usb_endpoint_num(ep_desc);
          #line 243 
          dev->in_max_packet = (unsigned short)usb_endpoint_maxp(ep_desc);
          #line 247 
          dev->in_eps[ep_i + 4294967295U] = (unsigned char)((unsigned int)dev->in_eps[ep_i + 4294967295U] | 128U);
        }
        else 
             #line 240 
             goto _LAND;
      }
      else {
        #line 240 
        _LAND: 
        #line 248 
        if (usb_endpoint_is_bulk_out(ep_desc) != 0) {
          #line 248 
          unsigned int tmp_4;
          #line 248 
          tmp_4 = ep_o;
          #line 248 
          ep_o ++;
          #line 248 
          ;
          #line 248 
          if (tmp_4 <= 5U) {
            #line 250 
            dev->out_eps[ep_o + 4294967295U] = (unsigned char)usb_endpoint_num(ep_desc);
            #line 251 
            dev->out_max_packet = (unsigned short)usb_endpoint_maxp(ep_desc);
          }
        }
      }
    }
    #line 237 
    i ++;
  }
  #line 255 
  if (ep_i != 2U || ep_o != 6U) {
    #line 256 
    _dev_err(dev->dev,(char *)"Error: wrong pipe number in:%d out:%d\n",ep_i,ep_o);
    #line 258 
    return -22;
  }
  #line 261 
  return 0;
}

#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static int mt7601u_probe(struct usb_interface *usb_intf, struct usb_device_id *id)
{
  #line 268 
  struct mt7601u_dev *dev;
  #line 269 
  u32 asic_rev;
  #line 269 
  u32 mac_rev;
  #line 270 
  int ret;
  #line 267 
  struct usb_device *usb_dev = interface_to_usbdev(usb_intf);
  #line 272 
  dev = mt7601u_alloc_device(& usb_intf->dev);
  #line 273 
  if (dev == (struct mt7601u_dev *)0) 
                                      #line 274 
                                      return -12;
  #line 276 
  usb_dev = usb_get_dev(usb_dev);
  #line 277 
  cif_usb_reset_device(usb_dev);
  #line 279 
  usb_set_intfdata(usb_intf,(void *)dev);
  #line 281 
  dev->vend_buf = cif_devm_kmalloc(dev->dev,4UL,3264U);
  #line 282 
  if (dev->vend_buf == (void *)0) {
    #line 283 
    ret = -12;
    #line 284 
    goto err;
  }
  #line 287 
  ret = mt7601u_assign_pipes(usb_intf,dev);
  #line 288 
  if (ret != 0) 
                #line 289 
                goto err;
  #line 290 
  ret = mt7601u_wait_asic_ready(dev);
  #line 291 
  if (ret != 0) 
                #line 292 
                goto err;
  #line 294 
  asic_rev = mt7601u_rr(dev,0U);
  #line 295 
  mac_rev = mt7601u_rr(dev,4096U);
  #line 296 
  _dev_info(dev->dev,(char *)"ASIC revision: %08x MAC revision: %08x\n",asic_rev,mac_rev);
  #line 298 
  if (asic_rev >> 16 != 30209U) {
    #line 299 
    ret = -19;
    #line 300 
    goto err;
  }
  #line 304 
  if (((unsigned long)mt7601u_rr(dev,36U) & 2147483648UL) == 0UL) 
                                                                  #line 305 
                                                                  _dev_warn(dev->dev,(char *)"Warning: eFUSE not present\n");
  #line 307 
  ret = mt7601u_init_hardware(dev);
  #line 308 
  if (ret != 0) 
                #line 309 
                goto err;
  #line 310 
  ret = mt7601u_register_device(dev);
  #line 311 
  if (ret != 0) 
                #line 312 
                goto err_hw;
  #line 314 
  cif_set_bit(0L,& dev->state);
  #line 316 
  return 0;
  #line 317 
  err_hw: 
          #line 317 
  ;
  #line 318 
  mt7601u_cleanup(dev);
  #line 319 
  err: 
       #line 319 
  ;
  #line 320 
  usb_set_intfdata(usb_intf,(void *)0);
  #line 321 
  usb_put_dev(interface_to_usbdev(usb_intf));
  #line 323 
  destroy_workqueue(dev->stat_wq);
  #line 324 
  cif_ieee80211_free_hw(dev->hw);
  #line 325 
  return ret;
}

#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static void mt7601u_disconnect(struct usb_interface *usb_intf)
{
  #line 330 
  struct mt7601u_dev *dev = usb_get_intfdata(usb_intf);
  #line 332 
  ieee80211_unregister_hw(dev->hw);
  #line 333 
  mt7601u_cleanup(dev);
  #line 335 
  usb_set_intfdata(usb_intf,(void *)0);
  #line 336 
  usb_put_dev(interface_to_usbdev(usb_intf));
  #line 338 
  destroy_workqueue(dev->stat_wq);
  #line 339 
  cif_ieee80211_free_hw(dev->hw);
  #line 340 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static int mt7601u_suspend(struct usb_interface *usb_intf, pm_message_t state)
{
  #line 344 
  struct mt7601u_dev *dev = usb_get_intfdata(usb_intf);
  #line 346 
  mt7601u_cleanup(dev);
  #line 348 
  return 0;
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static int mt7601u_resume(struct usb_interface *usb_intf)
{
  #line 354 
  int ret;
  #line 353 
  struct mt7601u_dev *dev = usb_get_intfdata(usb_intf);
  #line 356 
  ret = mt7601u_init_hardware(dev);
  #line 357 
  if (ret != 0) 
                #line 358 
                return ret;
  #line 360 
  cif_set_bit(0L,& dev->state);
  #line 362 
  return 0;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
struct usb_device_id __mod_usb__mt7601u_device_table_device_table[17U];
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static struct usb_driver mt7601u_driver = {.name = (char *)"mt7601u", .probe = & mt7601u_probe, .disconnect = & mt7601u_disconnect, .suspend = & mt7601u_suspend, .resume = & mt7601u_resume, .reset_resume = & mt7601u_resume, .id_table = (struct usb_device_id *)(& mt7601u_device_table), .disable_hub_initiated_lpm = (unsigned int)1U, .soft_unbind = (unsigned int)1U};
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static int mt7601u_driver_init(void)
{
  #line 380 
  return cif_usb_register_driver(& mt7601u_driver,& __this_module,
                              (char *)"mt7601u");
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.c"
static void mt7601u_driver_exit(void)
{
  #line 380 
  cif_usb_deregister(& mt7601u_driver);
  #line 381 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
struct usb_device_id (*emg_alias_mt7601u_device_table)[17U] = & mt7601u_device_table;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
struct usb_driver *emg_alias_mt7601u_driver = & mt7601u_driver;
#line 101 
#line 101 
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0);
#line 105 
#line 105 
void emg_usb_deregister(struct usb_driver *arg0);
#line 107 
#line 107 
int emg_usb_register_driver(struct usb_driver *arg0, struct module *arg1, char *arg2);
#line 108 
#line 108 
int emg_usb_reset_device(struct usb_device *arg0);
#line 109 
#line 109 
int emg_usb_submit_urb(struct urb *arg0, unsigned int arg1);
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
void emg_wrapper_mt7601u_disconnect(struct usb_interface *arg0)
{
  #line 114 
  mt7601u_disconnect(arg0);
  #line 115 
  return;
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
int emg_wrapper_mt7601u_probe(struct usb_interface *arg0, struct usb_device_id *arg1)
{
  #line 119 
  return mt7601u_probe(arg0,arg1);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
int emg_wrapper_mt7601u_resume(struct usb_interface *arg0)
{
  #line 124 
  return mt7601u_resume(arg0);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
int emg_wrapper_mt7601u_suspend(struct usb_interface *arg0, struct pm_message arg1)
{
  #line 129 
  return mt7601u_suspend(arg0,arg1);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
void emg_mt7601u_driver_exit(void)
{
  #line 134 
  mt7601u_driver_exit();
  #line 135 
  return;
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
int emg_mt7601u_driver_init(void)
{
  #line 138 
  return mt7601u_driver_init();
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 159 
  ldv_set_bit(nr,addr);
  #line 160 
  return;
}

#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void *cif_devm_kmalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 423 
  return ldv_devm_kmalloc(size,flags);
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static int cif_usb_submit_urb(struct urb *urb, gfp_t mem_flags)
{
  #line 839 
  return emg_usb_submit_urb(urb,mem_flags);
}

#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_mutex_lock_vendor_req_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 846 
  ldv_mutex_model_lock(lock,(char *)"vendor_req_mutex_of_mt7601u_dev");
  #line 847 
  return;
}

#line 850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_mutex_unlock_vendor_req_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 853 
  ldv_mutex_model_unlock(lock,(char *)"vendor_req_mutex_of_mt7601u_dev");
  #line 854 
  return;
}

#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static int cif_usb_reset_device(struct usb_device *dev)
{
  #line 861 
  return emg_usb_reset_device(dev);
}

#line 865  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_ieee80211_free_hw(struct ieee80211_hw *hw)
{
  #line 869 
  emg_ieee80211_free_hw(hw);
  #line 870 
  return;
}

#line 873  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static int cif_usb_register_driver(struct usb_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *ldv_func_arg3)
{
  #line 877 
  return emg_usb_register_driver(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
}

#line 881  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/usb.i.aux"
static void cif_usb_deregister(struct usb_driver *ldv_func_arg1)
{
  #line 885 
  emg_usb_deregister(ldv_func_arg1);
  #line 886 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2213 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 3133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
#line 3133 
loff_t no_llseek(struct file *, loff_t, int);
#line 3491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
__inline static void __simple_attr_check_format(char *fmt , ...)
{
  #line 3493 
  return;
}

#line 3496 
#line 3496 
int simple_attr_open(struct inode *, struct file *, int (*)(void *, u64 *), int (*)(void *, u64 ), char *);
#line 3499 
#line 3499 
int simple_attr_release(struct inode *, struct file *);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 110 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 111 
#line 111 
loff_t seq_lseek(struct file *, loff_t, int);
#line 118 
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 119 
#line 119 
void seq_putc(struct seq_file *, char);
#line 120 
#line 120 
void seq_puts(struct seq_file *, char *);
#line 142 
#line 142 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
#line 144 
#line 144 
int single_release(struct inode *, struct file *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 92 
ssize_t debugfs_attr_read(struct file *, char *, size_t, loff_t *);
#line 94 
#line 94 
ssize_t debugfs_attr_write(struct file *, char *, size_t, loff_t *);
#line 100 
#line 100 
void debugfs_create_u8(char *, umode_t, struct dentry *, u8 *);
#line 104 
#line 104 
struct dentry *debugfs_create_u32(char *, umode_t, struct dentry *, u32 *);
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
void mt7601u_init_debugfs(struct mt7601u_dev *dev);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static u32 mt76_rr(struct mt7601u_dev *dev, u32 offset)
{
  #line 302 
  return mt7601u_rr(dev,offset);
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static void mt76_wr(struct mt7601u_dev *dev, u32 offset, u32 val)
{
  #line 307 
  mt7601u_wr(dev,offset,val);
  #line 308 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int mt76_reg_set(void *data, u64 val)
{
  #line 15 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)data;
  #line 17 
  mt76_wr(dev,dev->debugfs_reg,(unsigned int)val);
  #line 18 
  return 0;
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int mt76_reg_get(void *data, u64 *val)
{
  #line 24 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)data;
  #line 26 
  *val = (unsigned long long)mt76_rr(dev,dev->debugfs_reg);
  #line 27 
  return 0;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int fops_regval_open(struct inode *inode, struct file *file)
{
  #line 30 
  __simple_attr_check_format((char *)"0x%08llx\n",0ULL);
  #line 30 
  return simple_attr_open(inode,file,& mt76_reg_get,& mt76_reg_set,
                       (char *)"0x%08llx\n");
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static struct file_operations fops_regval = {.owner = & __this_module, .llseek = & no_llseek, .read = & debugfs_attr_read, .write = & debugfs_attr_write, .open = & fops_regval_open, .release = & simple_attr_release};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int mt7601u_ampdu_stat_read(struct seq_file *file, void *data)
{
  #line 36 
  int i;
  #line 36 
  int j;
  #line 35 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)file->private;
  #line 41 
  seq_printf(file,(char *)"rx_crc_err",dev->stats.rx_stat[0]);
  #line 42 
  seq_printf(file,(char *)"rx_phy_err",dev->stats.rx_stat[1]);
  #line 43 
  seq_printf(file,(char *)"rx_false_cca",dev->stats.rx_stat[2]);
  #line 44 
  seq_printf(file,(char *)"rx_plcp_err",dev->stats.rx_stat[3]);
  #line 45 
  seq_printf(file,(char *)"rx_fifo_overflow",dev->stats.rx_stat[4]);
  #line 46 
  seq_printf(file,(char *)"rx_duplicate",dev->stats.rx_stat[5]);
  #line 48 
  seq_printf(file,(char *)"tx_fail_cnt",dev->stats.tx_stat[0]);
  #line 49 
  seq_printf(file,(char *)"tx_bcn_cnt",dev->stats.tx_stat[1]);
  #line 50 
  seq_printf(file,(char *)"tx_success",dev->stats.tx_stat[2]);
  #line 51 
  seq_printf(file,(char *)"tx_retransmit",dev->stats.tx_stat[3]);
  #line 52 
  seq_printf(file,(char *)"tx_zero_len",dev->stats.tx_stat[4]);
  #line 53 
  seq_printf(file,(char *)"tx_underflow",dev->stats.tx_stat[5]);
  #line 55 
  seq_printf(file,(char *)"non_aggr_tx",dev->stats.aggr_stat[0]);
  #line 56 
  seq_printf(file,(char *)"aggr_tx",dev->stats.aggr_stat[1]);
  #line 58 
  seq_printf(file,(char *)"tx_zero_len_del",dev->stats.zero_len_del[0]);
  #line 59 
  seq_printf(file,(char *)"rx_zero_len_del",dev->stats.zero_len_del[1]);
  #line 62 
  seq_puts(file,(char *)"Aggregations stats:\n");
  #line 63 
  i = 0;
  #line 63 
  while (i <= 3) {
    #line 64 
    j = 0;
    #line 64 
    while (j <= 7) {
      #line 65 
      seq_printf(file,(char *)"%08llx ",dev->stats.aggr_n[i * 8 + j]);
      #line 64 
      j ++;
    }
    #line 67 
    seq_putc(file,(char)10);
    #line 63 
    i ++;
  }
  #line 70 
  ;
  #line 70 
  seq_printf(file,(char *)"recent average AMPDU len: %d\n",atomic_read(& dev->avg_ampdu_len));
  #line 73 
  return 0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int mt7601u_ampdu_stat_open(struct inode *inode, struct file *f)
{
  #line 79 
  return single_open(f,& mt7601u_ampdu_stat_read,inode->i_private);
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static struct file_operations fops_ampdu_stat = {.llseek = & seq_lseek, .read = & seq_read, .open = & mt7601u_ampdu_stat_open, .release = & single_release};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int mt7601u_eeprom_param_read(struct seq_file *file, void *data)
{
  #line 95 
  int i;
  #line 92 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)file->private;
  #line 93 
  struct mt7601u_rate_power *rp = & (dev->ee)->power_rate_table;
  #line 94 
  struct tssi_data *td = & (dev->ee)->tssi_data;
  #line 97 
  seq_printf(file,(char *)"RF freq offset: %hhx\n",(int)(dev->ee)->rf_freq_off);
  #line 98 
  seq_printf(file,(char *)"RSSI offset: %hhx %hhx\n",(int)(dev->ee)->rssi_offset[0],(int)(dev->ee)->rssi_offset[1]);
  #line 100 
  seq_printf(file,(char *)"Reference temp: %hhx\n",(int)(dev->ee)->ref_temp);
  #line 101 
  seq_printf(file,(char *)"LNA gain: %hhx\n",(int)(dev->ee)->lna_gain);
  #line 102 
  seq_printf(file,(char *)"Reg channels: %hhu-%hhu\n",(int)(dev->ee)->reg.start,((int)(dev->ee)->reg.start + (int)(dev->ee)->reg.num) + -1);
  #line 105 
  seq_puts(file,(char *)"Per rate power:\n");
  #line 106 
  i = 0;
  #line 106 
  while (i <= 1) {
    #line 107 
    seq_printf(file,(char *)"\t raw:%02hhx bw20:%02hhx bw40:%02hhx\n",(int)rp->cck[i].raw,(int)rp->cck[i].bw20,(int)rp->cck[i].bw40);
    #line 106 
    i ++;
  }
  #line 109 
  i = 0;
  #line 109 
  while (i <= 3) {
    #line 110 
    seq_printf(file,(char *)"\t raw:%02hhx bw20:%02hhx bw40:%02hhx\n",(int)rp->ofdm[i].raw,(int)rp->ofdm[i].bw20,(int)rp->ofdm[i].bw40);
    #line 109 
    i ++;
  }
  #line 112 
  i = 0;
  #line 112 
  while (i <= 3) {
    #line 113 
    seq_printf(file,(char *)"\t raw:%02hhx bw20:%02hhx bw40:%02hhx\n",(int)rp->ht[i].raw,(int)rp->ht[i].bw20,(int)rp->ht[i].bw40);
    #line 112 
    i ++;
  }
  #line 116 
  seq_puts(file,(char *)"Per channel power:\n");
  #line 117 
  i = 0;
  #line 117 
  while (i <= 6) {
    #line 118 
    seq_printf(file,(char *)"\t tx_power  ch%u:%02hhx ch%u:%02hhx\n",i * 2 + 1,(int)(dev->ee)->chan_pwr[i * 2],(i + 1) * 2,(int)(dev->ee)->chan_pwr[i * 2 + 1]);
    #line 117 
    i ++;
  }
  #line 122 
  if (! (dev->ee)->tssi_enabled) 
                                 #line 123 
                                 return 0;
  #line 125 
  seq_puts(file,(char *)"TSSI:\n");
  #line 126 
  seq_printf(file,(char *)"\t slope:%02hhx\n",(int)td->slope);
  #line 127 
  seq_printf(file,(char *)"\t offset=%02hhx %02hhx %02hhx\n",(int)td->offset[0],(int)td->offset[1],(int)td->offset[2]);
  #line 129 
  seq_printf(file,(char *)"\t delta_off:%08x\n",td->tx0_delta_offset);
  #line 131 
  return 0;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static int mt7601u_eeprom_param_open(struct inode *inode, struct file *f)
{
  #line 137 
  return single_open(f,& mt7601u_eeprom_param_read,inode->i_private);
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
static struct file_operations fops_eeprom_param = {.llseek = & seq_lseek, .read = & seq_read, .open = & mt7601u_eeprom_param_open, .release = & single_release};
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/debugfs.c"
void mt7601u_init_debugfs(struct mt7601u_dev *dev)
{
  #line 149 
  struct dentry *dir;
  #line 151 
  dir = cif_debugfs_create_dir((char *)"mt7601u",((dev->hw)->wiphy)->debugfsdir);
  #line 152 
  if (dir == (struct dentry *)0) 
                                 #line 153 
                                 return;
  #line 155 
  debugfs_create_u8((char *)"temperature",(unsigned short)256,dir,(u8 *)(& dev->raw_temp));
  #line 156 
  debugfs_create_u32((char *)"temp_mode",(unsigned short)256,dir,(u32 *)(& dev->temp_mode));
  #line 158 
  debugfs_create_u32((char *)"regidx",(unsigned short)384,dir,& dev->debugfs_reg);
  #line 159 
  cif_debugfs_create_file((char *)"regval",(unsigned short)384,dir,(void *)dev,& fops_regval);
  #line 160 
  cif_debugfs_create_file((char *)"ampdu_stat",(unsigned short)256,dir,(void *)dev,& fops_ampdu_stat);
  #line 161 
  cif_debugfs_create_file((char *)"eeprom_param",(unsigned short)256,dir,(void *)dev,& fops_eeprom_param);
  #line 162 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_fops_ampdu_stat = & fops_ampdu_stat;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_fops_eeprom_param = & fops_eeprom_param;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
struct file_operations *emg_alias_fops_regval = & fops_regval;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
int (*emg_alias_simple_attr_release)(struct inode *, struct file *) = & simple_attr_release;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
int (*emg_alias_single_release)(struct inode *, struct file *) = & single_release;
#line 100 
#line 100 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 101 
#line 101 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
int emg_wrapper_fops_regval_open(struct inode *arg0, struct file *arg1)
{
  #line 117 
  return fops_regval_open(arg0,arg1);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
int emg_wrapper_mt7601u_ampdu_stat_open(struct inode *arg0, struct file *arg1)
{
  #line 122 
  return mt7601u_ampdu_stat_open(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
int emg_wrapper_mt7601u_eeprom_param_open(struct inode *arg0, struct file *arg1)
{
  #line 127 
  return mt7601u_eeprom_param_open(arg0,arg1);
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 829 
  return emg_debugfs_create_dir(name,parent);
}

#line 833  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 837 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp);
#line 26 
#line 801 
static void cif_mutex_lock_mutex_of_mt7601u_mcu(struct mutex *lock);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23 
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
__inline static void __init_completion(struct completion *x)
{
  #line 87 
  x->done = 0U;
  {
    #line 88 
    struct lock_class_key __key;
    #line 88 
    __init_waitqueue_head(& x->wait,(char *)"&x->wait",& __key);
  }
  #line 90 
  return;
}

#line 107 
#line 107 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_mutex_unlock_mutex_of_mt7601u_mcu(struct mutex *lock);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 830  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 99 
int firmware_request_cache(struct device *, char *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
#line 38 
void __compiletime_assert_38(void);
#line 1713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_usb_kill_urb(struct urb *urb);
#line 1788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 1788 
int usb_bulk_msg(struct usb_device *, unsigned int, void *, int, int *, int);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 1023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1023 
void consume_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1126 
#line 1126 
int __skb_pad(struct sk_buff *, int, bool);
#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 3186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_put_padto(struct sk_buff *skb, unsigned int len, bool free_on_error)
{
  #line 3189 
  unsigned int size = skb->len;
  #line 3191 
  if ((long)(size < len) != 0L) {
    #line 3192 
    len -= size;
    #line 3193 
    if (__skb_pad(skb,(int)len,(_Bool)((bool)((int)free_on_error) != 0)) != 0) 
      #line 3194 
      return -12;
    #line 3195 
    __skb_put(skb,len);
  }
  #line 3197 
  return 0;
}

#line 3210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  #line 3212 
  return __skb_put_padto(skb,len,(_Bool)1);
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
#line 72 
void __compiletime_assert_72(void);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val, void *p)
{
  #line 45 
  *((__le32 *)p) = val;
  #line 46 
  return;
}

#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static u32 mt76_rmw(struct mt7601u_dev *dev, u32 offset, u32 mask, u32 val)
{
  #line 313 
  return mt7601u_rmw(dev,offset,mask,val);
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static u32 mt76_set(struct mt7601u_dev *dev, u32 offset, u32 val)
{
  #line 318 
  return mt76_rmw(dev,offset,0U,val);
}

#line 326 
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_write_reg_pairs(struct mt7601u_dev *dev, u32 base, struct mt76_reg_pair *data, int n);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.h"
#line 73 
void __compiletime_assert_73(void);
#line 74 
#line 74 
void __compiletime_assert_74(void);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.h"
__inline static int mt7601u_dma_skb_wrap(struct sk_buff *skb, enum mt76_msg_port d_port, enum mt76_info_type type, u32 flags)
{
  #line 62 
  u32 info;
  #line 72 
  if (0 != 0 && ((unsigned long)(((skb->len + 4294967295U) | 3U) + 1U) & 18446744073709486080UL) != 0UL) 
    #line 72 
    __compiletime_assert_72();
  #line 73 
  if (0 != 0 && ((unsigned long)d_port & 18446744073709551608UL) != 0UL) 
    #line 73 
    __compiletime_assert_73();
  #line 74 
  if (0 != 0 && ((unsigned long)type & 18446744073709551612UL) != 0UL) 
    #line 74 
    __compiletime_assert_74();
  #line 71 
  info = (((unsigned int)((unsigned long)(((skb->len + 4294967295U) | 3U) + 1U) & 65535UL) | flags) | (unsigned int)(((unsigned long)d_port << 27) & 939524096UL)) | (unsigned int)(((unsigned long)type << 30) & 4294967295UL);
  #line 76 
  ;
  #line 76 
  put_unaligned_le32(info,skb_push(skb,4U));
  #line 77 
  return skb_put_padto(skb,((skb->len + 4294967295U) | 3U) + 5U);
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.h"
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_init(struct mt7601u_dev *dev);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.h"
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_cmd_init(struct mt7601u_dev *dev);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.h"
#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
void mt7601u_mcu_cmd_deinit(struct mt7601u_dev *dev);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.h"
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_calibrate(struct mt7601u_dev *dev, enum mcu_calibrate cal, u32 val);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.h"
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_tssi_read_kick(struct mt7601u_dev *dev, int use_hvga);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/usb.h"
__inline static bool mt7601u_urb_has_error(struct urb *urb)
{
  #line 52 
  return (_Bool)((((urb->status != 0 && urb->status != -2) && urb->status != -104) && urb->status != -108) != 0);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_submit_urb_0(struct mt7601u_dev *dev, struct urb *u)
{
  #line 56 
  int pscr_ret___0;
  #line 56 
  if ((int)static_key_false(& __tracepoint_mt_submit_urb.key) != 0) {
    #line 56 
    int pscr_ret__;
    #line 56 
    struct tracepoint_func *________p1;
    #line 56 
    struct tracepoint_func *it_func_ptr;
    #line 56 
    void *it_func;
    #line 56 
    void *__data;
    #line 56 
    int __idx = 0;
    {
      #line 56 
      void *__vpp_verify = (void *)0;
      #line 56 
      void *tmp = __vpp_verify;
    }
    #line 56 
    switch (4UL) {
      #line 56 
      int pfo_ret__;
      #line 56 
      int pfo_ret___0;
      #line 56 
      int pfo_ret___1;
      #line 56 
      int pfo_ret___2;
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret__;
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___0;
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___1;
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___2;
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_size_call_parameter();
      #line 56 
      break;
    }
    #line 56 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 56 
                                                               return;
    {
      #line 56 
      int __ret_warn_on = 0;
      #line 56 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 57 
        ldv_inline_asm();
        #line 58 
        ldv_inline_asm();
      }
      #line 56 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 56 
    __preempt_count_add(1);
    #line 57 
    ldv_inline_asm();
    {
      #line 57 
      union __anonunion___u_4214 __u;
      #line 56 
      __read_once_size((void *)(& __tracepoint_mt_submit_urb.funcs),(void *)(& __u.__c),8);
      #line 56 
      ________p1 = (__u.__val);
      }
    #line 56 
    it_func_ptr = ________p1;
    #line 56 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 56 
      while (1) {
        #line 56 
        it_func = it_func_ptr->func;
        #line 56 
        __data = it_func_ptr->data;
        #line 56 
        (*((void (*)(void *, struct mt7601u_dev *, struct urb *))it_func))(__data,dev,u);
        #line 56 
        it_func_ptr ++;
        #line 57 
        ;
        #line 57 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 56 
                                                break;
      }
    #line 58 
    ldv_inline_asm();
    #line 56 
    __preempt_count_sub(1);
  }
  {
    #line 56 
    void *__vpp_verify_0 = (void *)0;
    #line 56 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 56 
  switch (4UL) {
    #line 56 
    int pfo_ret___6;
    #line 56 
    int pfo_ret___3;
    #line 56 
    int pfo_ret___4;
    #line 56 
    int pfo_ret___5;
    #line 56 
    case (unsigned long)1: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___3;
    #line 56 
    break;
    #line 56 
    case (unsigned long)2: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___4;
    #line 56 
    break;
    #line 56 
    case (unsigned long)4: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___5;
    #line 56 
    break;
    #line 56 
    case (unsigned long)8: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___6;
    #line 56 
    break;
    #line 56 
    default: 
             #line 56 
    ;
    #line 56 
    __bad_size_call_parameter();
    #line 56 
    break;
  }
  #line 56 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 56 
    rcu_read_lock_sched_notrace();
    {
      #line 57 
      union __anonunion___u_4216 __u_0;
      #line 56 
      __read_once_size((void *)(& __tracepoint_mt_submit_urb.funcs),(void *)(& __u_0.__c),8);
      #line 56 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 56 
        bool __warned;
        #line 56 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 56 
          if (! __warned) {
            #line 56 
            if (rcu_read_lock_sched_held() == 0) {
              #line 56 
              __warned = (_Bool)1;
              #line 56 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",56,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 56 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 56 
    rcu_read_unlock_sched_notrace();
  }
  #line 58 
  return;
}

#line 78 
#line 78 
struct tracepoint __tracepoint_mt_mcu_msg_send;
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_mcu_msg_send(struct mt7601u_dev *dev, struct sk_buff *skb, u32 csum, bool resp)
{
  #line 78 
  int pscr_ret___0;
  #line 78 
  if ((int)static_key_false(& __tracepoint_mt_mcu_msg_send.key) != 0) {
    #line 78 
    int pscr_ret__;
    #line 78 
    struct tracepoint_func *________p1;
    #line 78 
    struct tracepoint_func *it_func_ptr;
    #line 78 
    void *it_func;
    #line 78 
    void *__data;
    #line 78 
    int __idx = 0;
    {
      #line 78 
      void *__vpp_verify = (void *)0;
      #line 78 
      void *tmp = __vpp_verify;
    }
    #line 78 
    switch (4UL) {
      #line 78 
      int pfo_ret___0;
      #line 78 
      int pfo_ret___1;
      #line 78 
      int pfo_ret___2;
      #line 78 
      int pfo_ret__;
      #line 78 
      case (unsigned long)1: 
                             #line 78 
      ;
      #line 78 
      switch (4UL) {
        #line 78 
        case (unsigned long)1: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)2: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)4: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)8: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        default: 
                 #line 78 
        ;
        #line 78 
        __bad_percpu_size();
      }
      #line 78 
      pscr_ret__ = pfo_ret__;
      #line 78 
      break;
      #line 78 
      case (unsigned long)2: 
                             #line 78 
      ;
      #line 78 
      switch (4UL) {
        #line 78 
        case (unsigned long)1: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)2: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)4: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)8: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        default: 
                 #line 78 
        ;
        #line 78 
        __bad_percpu_size();
      }
      #line 78 
      pscr_ret__ = pfo_ret___0;
      #line 78 
      break;
      #line 78 
      case (unsigned long)4: 
                             #line 78 
      ;
      #line 78 
      switch (4UL) {
        #line 78 
        case (unsigned long)1: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)2: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)4: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)8: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        default: 
                 #line 78 
        ;
        #line 78 
        __bad_percpu_size();
      }
      #line 78 
      pscr_ret__ = pfo_ret___1;
      #line 78 
      break;
      #line 78 
      case (unsigned long)8: 
                             #line 78 
      ;
      #line 78 
      switch (4UL) {
        #line 78 
        case (unsigned long)1: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)2: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)4: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        case (unsigned long)8: 
                               #line 78 
        ;
        #line 79 
        ldv_inline_asm();
        #line 78 
        break;
        #line 78 
        default: 
                 #line 78 
        ;
        #line 78 
        __bad_percpu_size();
      }
      #line 78 
      pscr_ret__ = pfo_ret___2;
      #line 78 
      break;
      #line 78 
      default: 
               #line 78 
      ;
      #line 78 
      __bad_size_call_parameter();
      #line 78 
      break;
    }
    #line 78 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 78 
                                                               return;
    {
      #line 78 
      int __ret_warn_on = 0;
      #line 78 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 79 
        ldv_inline_asm();
        #line 80 
        ldv_inline_asm();
      }
      #line 78 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 78 
    __preempt_count_add(1);
    #line 79 
    ldv_inline_asm();
    {
      #line 79 
      union __anonunion___u_4218 __u;
      #line 78 
      __read_once_size((void *)(& __tracepoint_mt_mcu_msg_send.funcs),(void *)(& __u.__c),8);
      #line 78 
      ________p1 = (__u.__val);
      }
    #line 78 
    it_func_ptr = ________p1;
    #line 78 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 78 
      while (1) {
        #line 78 
        it_func = it_func_ptr->func;
        #line 78 
        __data = it_func_ptr->data;
        #line 78 
        (*((void (*)(void *, struct mt7601u_dev *, struct sk_buff *, u32 , bool ))it_func))(__data,dev,skb,csum,(_Bool)((bool)((int)resp) != 0));
        #line 78 
        it_func_ptr ++;
        #line 79 
        ;
        #line 79 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 78 
                                                break;
      }
    #line 80 
    ldv_inline_asm();
    #line 78 
    __preempt_count_sub(1);
  }
  {
    #line 78 
    void *__vpp_verify_0 = (void *)0;
    #line 78 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 78 
  switch (4UL) {
    #line 78 
    int pfo_ret___5;
    #line 78 
    int pfo_ret___6;
    #line 78 
    int pfo_ret___3;
    #line 78 
    int pfo_ret___4;
    #line 78 
    case (unsigned long)1: 
                           #line 78 
    ;
    #line 78 
    switch (4UL) {
      #line 78 
      case (unsigned long)1: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)2: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)4: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)8: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      default: 
               #line 78 
      ;
      #line 78 
      __bad_percpu_size();
    }
    #line 78 
    pscr_ret___0 = pfo_ret___3;
    #line 78 
    break;
    #line 78 
    case (unsigned long)2: 
                           #line 78 
    ;
    #line 78 
    switch (4UL) {
      #line 78 
      case (unsigned long)1: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)2: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)4: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)8: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      default: 
               #line 78 
      ;
      #line 78 
      __bad_percpu_size();
    }
    #line 78 
    pscr_ret___0 = pfo_ret___4;
    #line 78 
    break;
    #line 78 
    case (unsigned long)4: 
                           #line 78 
    ;
    #line 78 
    switch (4UL) {
      #line 78 
      case (unsigned long)1: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)2: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)4: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)8: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      default: 
               #line 78 
      ;
      #line 78 
      __bad_percpu_size();
    }
    #line 78 
    pscr_ret___0 = pfo_ret___5;
    #line 78 
    break;
    #line 78 
    case (unsigned long)8: 
                           #line 78 
    ;
    #line 78 
    switch (4UL) {
      #line 78 
      case (unsigned long)1: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)2: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)4: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      case (unsigned long)8: 
                             #line 78 
      ;
      #line 79 
      ldv_inline_asm();
      #line 78 
      break;
      #line 78 
      default: 
               #line 78 
      ;
      #line 78 
      __bad_percpu_size();
    }
    #line 78 
    pscr_ret___0 = pfo_ret___6;
    #line 78 
    break;
    #line 78 
    default: 
             #line 78 
    ;
    #line 78 
    __bad_size_call_parameter();
    #line 78 
    break;
  }
  #line 78 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 78 
    rcu_read_lock_sched_notrace();
    {
      #line 79 
      union __anonunion___u_4220 __u_0;
      #line 78 
      __read_once_size((void *)(& __tracepoint_mt_mcu_msg_send.funcs),(void *)(& __u_0.__c),8);
      #line 78 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 78 
        bool __warned;
        #line 78 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 78 
          if (! __warned) {
            #line 78 
            if (rcu_read_lock_sched_held() == 0) {
              #line 78 
              __warned = (_Bool)1;
              #line 78 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",78,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 78 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 78 
    rcu_read_unlock_sched_notrace();
  }
  #line 80 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
__inline static int firmware_running(struct mt7601u_dev *dev)
{
  #line 26 
  return mt7601u_rr(dev,1840U) == 1U;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
__inline static void skb_put_le32(struct sk_buff *skb, u32 val)
{
  #line 31 
  ;
  #line 31 
  put_unaligned_le32(val,skb_put(skb,4U));
  #line 32 
  return;
}

#line 37 
#line 37 
void __compiletime_assert_39(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
__inline static void mt7601u_dma_skb_wrap_cmd(struct sk_buff *skb, u8 seq, enum mcu_cmd cmd)
{
  #line 37 
  if (0 != 0 && ((unsigned long)seq & 18446744073709551600UL) != 0UL) 
    #line 37 
    __compiletime_assert_38();
  #line 37 
  if (0 != 0 && ((unsigned long)cmd & 18446744073709551488UL) != 0UL) 
    #line 37 
    __compiletime_assert_39();
  #line 37 
  ;
  #line 37 
  int __ret_warn_on = mt7601u_dma_skb_wrap(skb,(enum mt76_msg_port)CPU_TX_PORT,
                           (enum mt76_info_type)DMA_COMMAND,
                           (unsigned int)(((unsigned long)seq << 16) & 983040UL) | (unsigned int)(
                           ((unsigned long)cmd << 20) & 133169152UL)) != 0;
  #line 37 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 38 
    ldv_inline_asm();
    #line 39 
    ldv_inline_asm();
  }
  #line 37 
  long tmp_2 = (long)(__ret_warn_on != 0);
  #line 39 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
__inline static void trace_mt_mcu_msg_send_cs(struct mt7601u_dev *dev, struct sk_buff *skb, bool need_resp)
{
  #line 45 
  u32 i;
  #line 45 
  u32 csum = 0U;
  #line 47 
  i = 0U;
  #line 47 
  while (skb->len / 4U > i) {
    #line 48 
    csum = get_unaligned_le32((void *)(skb->data + (unsigned long)(i * 4U))) ^ csum;
    #line 47 
    i ++;
  }
  #line 50 
  trace_mt_mcu_msg_send(dev,skb,csum,(_Bool)((bool)((int)need_resp) != 0));
  #line 51 
  return;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static struct sk_buff *mt7601u_mcu_msg_alloc(void *data, int len)
{
  #line 55 
  struct sk_buff *skb;
  {
    #line 57 
    int __ret_warn_on = ((unsigned int)len & 3U) != 0U;
    #line 57 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 58 
      ldv_inline_asm();
      #line 59 
      ldv_inline_asm();
    }
    #line 57 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 59 
  skb = alloc_skb((unsigned int)(len + 8),3264U);
  #line 60 
  if (skb != (struct sk_buff *)0) {
    #line 61 
    skb_reserve(skb,4);
    #line 62 
    skb_put_data(skb,data,(unsigned int)len);
  }
  #line 65 
  return skb;
}

#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int mt7601u_mcu_wait_resp(struct mt7601u_dev *dev, u8 seq)
{
  #line 71 
  u32 rxfce;
  #line 72 
  int urb_status;
  #line 72 
  int ret;
  #line 70 
  struct urb *urb = dev->mcu.resp.urb;
  #line 72 
  int i = 5;
  #line 74 
  while (1) {
    #line 74 
    int tmp_2;
    #line 74 
    tmp_2 = i;
    #line 74 
    i --;
    #line 74 
    ;
    #line 74 
    if (! (tmp_2 != 0)) 
                        #line 74 
                        break;
    {
      #line 75 
      ;
      #line 75 
      if (wait_for_completion_timeout(& dev->mcu.resp_cmpl,
                                    msecs_to_jiffies(300U)) == 0UL) {
        #line 77 
        _dev_warn(dev->dev,(char *)"Warning: %s retrying\n",(char *)"mt7601u_mcu_wait_resp");
        #line 78 
        continue;
      }
      #line 82 
      rxfce = get_unaligned_le32(dev->mcu.resp.buf);
      #line 83 
      urb_status = urb->status * (int)mt7601u_urb_has_error(urb);
      #line 85 
      ret = mt7601u_usb_submit_buf(dev,128,1,& dev->mcu.resp,3264U,& mt7601u_complete_urb,(void *)(& dev->mcu.resp_cmpl));
      #line 89 
      if (ret != 0) 
                    #line 90 
                    return ret;
      #line 92 
      if (urb_status != 0) 
                           #line 93 
                           _dev_err(dev->dev,(char *)"Error: MCU resp urb failed:%d\n",urb_status);
      #line 96 
      ;
      #line 96 
      ;
      #line 96 
      if ((((unsigned long)rxfce >> 16) & 15UL) == (unsigned long)seq) 
        #line 96 
        if ((((unsigned long)rxfce >> 20) & 15UL) == 0UL) 
                                                          #line 98 
                                                          return 0;
      #line 100 
      ;
      #line 100 
      ;
      #line 100 
      ;
      #line 100 
      ;
      #line 100 
      _dev_err(dev->dev,(char *)"Error: MCU resp evt:%lx seq:%hhx-%lx!\n",((unsigned long)rxfce >> 20) & 15UL,(int)seq,((unsigned long)rxfce >> 16) & 15UL);
    }
  }
  #line 105 
  _dev_err(dev->dev,(char *)"Error: %s timed out\n",(char *)"mt7601u_mcu_wait_resp");
  #line 106 
  return -110;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int mt7601u_mcu_msg_send(struct mt7601u_dev *dev, struct sk_buff *skb, enum mcu_cmd cmd, bool wait_resp)
{
  #line 116 
  int sent;
  #line 116 
  int ret;
  #line 113 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 114 
  unsigned int cmd_pipe = __create_pipe(usb_dev,(unsigned int)dev->out_eps[0]) | 3221225472U;
  #line 117 
  u8 seq = (unsigned char)0U;
  #line 119 
  if ((int)test_bit(1L,& dev->state) != 0) 
                                           #line 120 
                                           return 0;
  #line 122 
  cif_mutex_lock_mutex_of_mt7601u_mcu(& dev->mcu.mutex);
  #line 124 
  if ((int)wait_resp != 0) 
    #line 125 
    while ((unsigned int)seq == 0U) {
      #line 126 
      dev->mcu.msg_seq = (u8)((int)dev->mcu.msg_seq + 1);
      #line 126 
      seq = (unsigned char)((unsigned int)dev->mcu.msg_seq & 15U);
    }
  #line 128 
  mt7601u_dma_skb_wrap_cmd(skb,(unsigned char)((int)seq),cmd);
  #line 130 
  if (dev->mcu.resp_cmpl.done != 0U) 
                                     #line 131 
                                     _dev_err(dev->dev,(char *)"Error: MCU response pre-completed!\n");
  #line 133 
  trace_mt_mcu_msg_send_cs(dev,skb,(_Bool)((bool)((int)wait_resp) != 0));
  {
    #line 134 
    struct urb u;
    #line 134 
    u.pipe = cmd_pipe;
    #line 134 
    u.transfer_buffer_length = skb->len;
    #line 134 
    trace_mt_submit_urb_0(dev,& u);
  }
  #line 135 
  ret = usb_bulk_msg(usb_dev,cmd_pipe,(void *)skb->data,(int)skb->len,& sent,500);
  #line 136 
  if (ret != 0) {
    #line 137 
    _dev_err(dev->dev,(char *)"Error: send MCU cmd failed:%d\n",ret);
    #line 138 
    goto out;
  }
  #line 140 
  if (skb->len != (unsigned int)sent) 
                                      #line 141 
                                      _dev_err(dev->dev,(char *)"Error: %s sent != skb->len\n",(char *)"mt7601u_mcu_msg_send");
  #line 143 
  if ((int)wait_resp != 0) 
                           #line 144 
                           ret = mt7601u_mcu_wait_resp(dev,(unsigned char)((int)seq));
  #line 145 
  out: 
       #line 145 
  ;
  #line 146 
  cif_mutex_unlock_mutex_of_mt7601u_mcu(& dev->mcu.mutex);
  #line 148 
  consume_skb(skb);
  #line 150 
  return ret;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int mt7601u_mcu_function_select(struct mt7601u_dev *dev, enum mcu_function func, u32 val)
{
  #line 156 
  struct sk_buff *skb;
  #line 160 
  struct __anonstruct_msg_4294 msg = {.id = (unsigned int)func, .value = val};
  #line 165 
  skb = mt7601u_mcu_msg_alloc((void *)(& msg),8);
  #line 166 
  if (skb == (struct sk_buff *)0) 
                                  #line 167 
                                  return -12;
  #line 168 
  return mt7601u_mcu_msg_send(dev,skb,(enum mcu_cmd)CMD_FUN_SET_OP,
                           (_Bool)(func == (unsigned int)ATOMIC_TSSI_SETTING));
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_tssi_read_kick(struct mt7601u_dev *dev, int use_hvga)
{
  #line 173 
  int ret;
  #line 175 
  if (! test_bit(3L,& dev->state)) 
                                   #line 176 
                                   return 0;
  #line 178 
  ret = mt7601u_mcu_function_select(dev,(enum mcu_function)ATOMIC_TSSI_SETTING,(unsigned int)use_hvga);
  #line 180 
  if (ret != 0) {
    #line 181 
    _dev_warn(dev->dev,(char *)"Warning: MCU TSSI read kick failed\n");
    #line 182 
    return ret;
  }
  #line 185 
  dev->tssi_read_trig = (_Bool)1;
  #line 187 
  return 0;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_calibrate(struct mt7601u_dev *dev, enum mcu_calibrate cal, u32 val)
{
  #line 193 
  struct sk_buff *skb;
  #line 197 
  struct __anonstruct_msg_4296 msg = {.id = (unsigned int)cal, .value = val};
  #line 202 
  skb = mt7601u_mcu_msg_alloc((void *)(& msg),8);
  #line 203 
  if (skb == (struct sk_buff *)0) 
                                  #line 204 
                                  return -12;
  #line 205 
  return mt7601u_mcu_msg_send(dev,skb,(enum mcu_cmd)CMD_CALIBRATION_OP,(_Bool)1);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_write_reg_pairs(struct mt7601u_dev *dev, u32 base, struct mt76_reg_pair *data, int n)
{
  #line 218 
  int tmp;
  #line 212 
  struct sk_buff *skb;
  #line 213 
  int cnt;
  #line 213 
  int i;
  #line 213 
  int ret;
  #line 211 
  int max_vals_per_cmd = 24;
  #line 215 
  if (n == 0) 
              #line 216 
              return 0;
  {
    #line 218 
    int __UNIQUE_ID___x584 = 24;
    #line 218 
    int __UNIQUE_ID___y585 = n;
    #line 218 
    if (24 < __UNIQUE_ID___y585) 
                                 #line 218 
                                 tmp = 24; else 
                                                #line 218 
                                                tmp = __UNIQUE_ID___y585;
    }
  #line 218 
  cnt = tmp;
  #line 220 
  skb = alloc_skb((unsigned int)((cnt + 1) * 8),3264U);
  #line 221 
  if (skb == (struct sk_buff *)0) 
                                  #line 222 
                                  return -12;
  #line 223 
  skb_reserve(skb,4);
  #line 225 
  i = 0;
  #line 225 
  while (i < cnt) {
    #line 226 
    skb_put_le32(skb,(data + (unsigned long)i)->reg + base);
    #line 227 
    skb_put_le32(skb,(data + (unsigned long)i)->value);
    #line 225 
    i ++;
  }
  #line 230 
  ret = mt7601u_mcu_msg_send(dev,skb,(enum mcu_cmd)CMD_RANDOM_WRITE,(_Bool)(cnt == n));
  #line 231 
  if (ret != 0) 
                #line 232 
                return ret;
  #line 234 
  return mt7601u_write_reg_pairs(dev,base,data + (unsigned long)cnt,n - cnt);
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_burst_write_regs(struct mt7601u_dev *dev, u32 offset, u32 *data, int n)
{
  #line 247 
  int tmp;
  #line 241 
  struct sk_buff *skb;
  #line 242 
  int cnt;
  #line 242 
  int i;
  #line 242 
  int ret;
  #line 240 
  int max_regs_per_cmd = 47;
  #line 244 
  if (n == 0) 
              #line 245 
              return 0;
  {
    #line 247 
    int __UNIQUE_ID___x586 = 47;
    #line 247 
    int __UNIQUE_ID___y587 = n;
    #line 247 
    if (47 < __UNIQUE_ID___y587) 
                                 #line 247 
                                 tmp = 47; else 
                                                #line 247 
                                                tmp = __UNIQUE_ID___y587;
    }
  #line 247 
  cnt = tmp;
  #line 249 
  skb = alloc_skb((unsigned int)((cnt + 2) * 4),3264U);
  #line 250 
  if (skb == (struct sk_buff *)0) 
                                  #line 251 
                                  return -12;
  #line 252 
  skb_reserve(skb,4);
  #line 254 
  skb_put_le32(skb,offset + 4259840U);
  #line 255 
  i = 0;
  #line 255 
  while (i < cnt) {
    #line 256 
    skb_put_le32(skb,*(data + (unsigned long)i));
    #line 255 
    i ++;
  }
  #line 258 
  ret = mt7601u_mcu_msg_send(dev,skb,(enum mcu_cmd)CMD_BURST_WRITE,(_Bool)(cnt == n));
  #line 259 
  if (ret != 0) 
                #line 260 
                return ret;
  #line 262 
  return mt7601u_burst_write_regs(dev,(unsigned int)(cnt * 4) + offset,
                                 data + (unsigned long)cnt,n - cnt);
}

#line 291 
#line 291 
void __compiletime_assert_291(void);
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int __mt7601u_dma_fw(struct mt7601u_dev *dev, struct mt7601u_dma_buf *dma_buf, void *data, u32 len, u32 dst_addr)
{
  #line 302 
  int __y;
  #line 285 
  struct completion tmp;
  #line 287 
  __le32 reg;
  #line 288 
  u32 val;
  #line 289 
  int ret;
  #line 291 
  unsigned long tmp_0;
  #line 291 
  unsigned long tmp_1;
  #line 285 
  __init_completion(& tmp);
  #line 285 
  struct completion cmpl = cmpl;
  #line 286 
  struct mt7601u_dma_buf buf = *dma_buf;
  #line 291 
  tmp_0 = 0UL;
  #line 291 
  tmp_1 = 268435456UL;
  #line 291 
  if (0 != 0 && ((unsigned long)len & 18446744073709486080UL) != 0UL) 
    #line 291 
    __compiletime_assert_291();
  #line 291 
  reg = ((unsigned int)tmp_0 | (unsigned int)tmp_1) | (unsigned int)((unsigned long)len & 65535UL);
  #line 294 
  memcpy(buf.buf,(void *)(& reg),4UL);
  #line 295 
  memcpy(buf.buf + 4UL,data,(unsigned long)len);
  #line 296 
  memset(buf.buf + ((unsigned long)len + 4UL),0,8UL);
  #line 298 
  ret = mt7601u_vendor_single_wr(dev,(unsigned char)66,(unsigned short)560,dst_addr);
  #line 300 
  if (ret != 0) 
                #line 301 
                return ret;
  #line 302 
  __y = 4;
  #line 302 
  len = (((((unsigned int)__y + len) + 4294967295U) / (unsigned int)__y) * (unsigned int)__y);
  #line 303 
  ret = mt7601u_vendor_single_wr(dev,(unsigned char)66,(unsigned short)564,len << 16);
  #line 305 
  if (ret != 0) 
                #line 306 
                return ret;
  #line 308 
  buf.len = (unsigned long)(len + 8U);
  #line 309 
  ret = mt7601u_usb_submit_buf(dev,0,0,& buf,3264U,& mt7601u_complete_urb,(void *)(& cmpl));
  #line 312 
  if (ret != 0) 
                #line 313 
                return ret;
  #line 315 
  if (wait_for_completion_timeout(& cmpl,msecs_to_jiffies(1000U)) == 0UL) {
    #line 316 
    _dev_err(dev->dev,(char *)"Error: firmware upload timed out\n");
    #line 317 
    cif_usb_kill_urb(buf.urb);
    #line 318 
    return -110;
  }
  #line 320 
  if ((int)mt7601u_urb_has_error(buf.urb) != 0) {
    #line 321 
    _dev_err(dev->dev,(char *)"Error: firmware upload urb failed:%d\n",(buf.urb)->status);
    #line 323 
    return (buf.urb)->status;
  }
  #line 326 
  val = mt7601u_rr(dev,2472U);
  #line 327 
  val ++;
  #line 328 
  mt7601u_wr(dev,2472U,val);
  #line 330 
  return 0;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int mt7601u_dma_fw(struct mt7601u_dev *dev, struct mt7601u_dma_buf *dma_buf, void *data, int len, u32 dst_addr)
{
  #line 342 
  int __UNIQUE_ID___x588;
  #line 342 
  int tmp;
  #line 337 
  int n;
  #line 337 
  int ret;
  #line 339 
  if (len == 0) 
                #line 340 
                return 0;
  {
    #line 342 
    __UNIQUE_ID___x588 = 14336;
    #line 342 
    int __UNIQUE_ID___y589 = len;
    #line 342 
    if (__UNIQUE_ID___x588 < __UNIQUE_ID___y589) 
                                                 #line 342 
                                                 tmp = __UNIQUE_ID___x588; else 
                                                                    #line 342 
                                                                    tmp = __UNIQUE_ID___y589;
    }
  #line 342 
  n = tmp;
  #line 343 
  ret = __mt7601u_dma_fw(dev,dma_buf,data,(unsigned int)n,dst_addr);
  #line 344 
  if (ret != 0) 
                #line 345 
                return ret;
  #line 347 
  if (! mt76_poll_msec(dev,1844U,2147483648U,2147483648U,500)) 
                                                               #line 348 
                                                               return -110;
  #line 350 
  return mt7601u_dma_fw(dev,dma_buf,data + (unsigned long)n,len - n,
                       dst_addr + (unsigned int)n);
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int mt7601u_upload_firmware(struct mt7601u_dev *dev, struct mt76_fw *fw)
{
  #line 356 
  struct mt7601u_dma_buf dma_buf;
  #line 357 
  void *ivb;
  #line 358 
  u32 ilm_len;
  #line 358 
  u32 dlm_len;
  #line 359 
  int i;
  #line 359 
  int ret;
  #line 361 
  ivb = cif_kmemdup((void *)(& fw->ivb),64UL,3264U);
  #line 362 
  if (ivb == (void *)0) 
                        #line 363 
                        return -12;
  #line 364 
  if ((int)mt7601u_usb_alloc_buf(dev,14348UL,& dma_buf) != 0) {
    #line 365 
    ret = -12;
    #line 366 
    goto error;
  }
  #line 369 
  ilm_len = fw->hdr.ilm_len + 4294967232U;
  {
    #line 370 
    bool branch;
    #line 370 
    struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_upload_firmware", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c", .format = (char *)"loading FW - ILM %u + IVB %zu\n", .lineno = (unsigned int)370U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 370 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
    #line 370 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 370 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug590,dev->dev,(char *)"loading FW - ILM %u + IVB %zu\n",ilm_len,64UL);
  }
  #line 372 
  ret = mt7601u_dma_fw(dev,& dma_buf,(void *)(& fw->ilm),(int)ilm_len,64U);
  #line 373 
  if (ret != 0) 
                #line 374 
                goto error;
  #line 376 
  dlm_len = fw->hdr.dlm_len;
  {
    #line 377 
    bool branch_0;
    #line 377 
    struct _ddebug __UNIQUE_ID_ddebug591 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_upload_firmware", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c", .format = (char *)"loading FW - DLM %u\n", .lineno = (unsigned int)377U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 377 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug591.key.dd_key_false.key,(_Bool)0);
    #line 377 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 377 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug591,dev->dev,(char *)"loading FW - DLM %u\n",dlm_len);
  }
  #line 378 
  ret = mt7601u_dma_fw(dev,& dma_buf,(void *)((u8 *)(& fw->ilm) + (unsigned long)ilm_len),(int)dlm_len,524288U);
  #line 380 
  if (ret != 0) 
                #line 381 
                goto error;
  #line 383 
  ret = mt7601u_vendor_request(dev,(unsigned char)1,(unsigned char)0,(unsigned short)18,(unsigned short)0,ivb,64UL);
  #line 385 
  if (ret < 0) 
               #line 386 
               goto error;
  #line 387 
  ret = 0;
  #line 389 
  i = 100;
  #line 389 
  while (1) {
    #line 389 
    if (i != 0) {
      #line 389 
      if (! (firmware_running(dev) == 0)) 
                                          #line 389 
                                          break;
    }
    else 
         #line 389 
         break;
    #line 390 
    msleep(10U);
    #line 389 
    i --;
  }
  #line 391 
  if (i == 0) {
    #line 392 
    ret = -110;
    #line 393 
    goto error;
  }
  {
    #line 396 
    bool branch_1;
    #line 396 
    struct _ddebug __UNIQUE_ID_ddebug592 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_upload_firmware", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c", .format = (char *)"Firmware running!\n", .lineno = (unsigned int)396U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 396 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug592.key.dd_key_false.key,(_Bool)0);
    #line 396 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 396 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug592,dev->dev,(char *)"Firmware running!\n");
  }
  #line 397 
  error: 
         #line 397 
  ;
  #line 398 
  kfree(ivb);
  #line 399 
  mt7601u_usb_free_buf(dev,& dma_buf);
  #line 401 
  return ret;
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
static int mt7601u_load_firmware(struct mt7601u_dev *dev)
{
  #line 406 
  struct firmware *fw;
  #line 407 
  struct mt76_fw_header *hdr;
  #line 408 
  int len;
  #line 408 
  int ret;
  #line 409 
  u32 val;
  #line 411 
  mt7601u_wr(dev,568U,12582912U);
  #line 414 
  if (firmware_running(dev) != 0) {
    #line 415 
    return firmware_request_cache(dev->dev,(char *)"mt7601u.bin");
  }
  #line 417 
  ret = cif_request_firmware(& fw,(char *)"mt7601u.bin",dev->dev);
  #line 418 
  if (ret != 0) 
                #line 419 
                return ret;
  #line 421 
  if ((fw == (struct firmware *)0 || fw->data == (u8 *)0U) || fw->size <= 31UL) 
    #line 422 
    goto err_inv_fw;
  #line 424 
  hdr = (struct mt76_fw_header *)fw->data;
  #line 426 
  if (hdr->ilm_len <= 64U) 
                           #line 427 
                           goto err_inv_fw;
  #line 429 
  len = 32;
  #line 430 
  len = (int)(hdr->ilm_len + (unsigned int)len);
  #line 431 
  len = (int)(hdr->dlm_len + (unsigned int)len);
  #line 433 
  if (fw->size != (unsigned long)len) 
                                      #line 434 
                                      goto err_inv_fw;
  #line 436 
  val = (unsigned int)hdr->fw_ver;
  #line 437 
  _dev_info(dev->dev,(char *)"Firmware Version: %d.%d.%02d Build: %x Build time: %.16s\n",(val >> 12) & 15U,(val >> 8) & 15U,val & 15U,(int)hdr->build_ver,(char *)(& hdr->build_time));
  #line 442 
  len = (int)hdr->ilm_len;
  #line 444 
  mt7601u_wr(dev,2380U,0U);
  #line 445 
  mt7601u_wr(dev,2048U,0U);
  #line 447 
  mt7601u_vendor_reset(dev);
  #line 448 
  msleep(5U);
  #line 450 
  mt7601u_wr(dev,2628U,0U);
  #line 451 
  mt7601u_wr(dev,560U,541200U);
  #line 452 
  mt7601u_wr(dev,1024U,527360U);
  #line 453 
  mt7601u_wr(dev,2048U,1U);
  #line 455 
  mt7601u_rmw(dev,1028U,0U,15U);
  #line 460 
  mt7601u_wr(dev,2048U,1U);
  #line 462 
  mt7601u_wr(dev,568U,12582912U);
  #line 464 
  val = mt76_set(dev,568U,524288U);
  #line 465 
  val &= 4294443007U;
  #line 466 
  mt7601u_wr(dev,568U,val);
  #line 469 
  mt7601u_wr(dev,2464U,4194864U);
  #line 471 
  mt7601u_wr(dev,2468U,1U);
  #line 473 
  mt7601u_wr(dev,2500U,68U);
  #line 475 
  mt7601u_wr(dev,2668U,3U);
  #line 477 
  ret = mt7601u_upload_firmware(dev,(struct mt76_fw *)fw->data);
  #line 479 
  cif_release_firmware(fw);
  #line 481 
  return ret;
  #line 483 
  err_inv_fw: 
              #line 483 
  ;
  #line 484 
  _dev_err(dev->dev,(char *)"Invalid firmware image\n");
  #line 485 
  cif_release_firmware(fw);
  #line 486 
  return -2;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_init(struct mt7601u_dev *dev)
{
  #line 491 
  int ret;
  {
    #line 493 
    struct lock_class_key __key;
    #line 493 
    __mutex_init(& dev->mcu.mutex,(char *)"&dev->mcu.mutex",& __key);
  }
  #line 495 
  ret = mt7601u_load_firmware(dev);
  #line 496 
  if (ret != 0) 
                #line 497 
                return ret;
  #line 499 
  cif_set_bit_0(3L,& dev->state);
  #line 501 
  return 0;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
int mt7601u_mcu_cmd_init(struct mt7601u_dev *dev)
{
  #line 506 
  int ret;
  #line 508 
  ret = mt7601u_mcu_function_select(dev,(enum mcu_function)Q_SELECT,1U);
  #line 509 
  if (ret != 0) 
                #line 510 
                return ret;
  #line 512 
  __init_completion(& dev->mcu.resp_cmpl);
  #line 513 
  if ((int)mt7601u_usb_alloc_buf(dev,1024UL,& dev->mcu.resp) != 0) {
    #line 514 
    mt7601u_usb_free_buf(dev,& dev->mcu.resp);
    #line 515 
    return -12;
  }
  #line 518 
  ret = mt7601u_usb_submit_buf(dev,128,1,& dev->mcu.resp,3264U,& mt7601u_complete_urb,(void *)(& dev->mcu.resp_cmpl));
  #line 521 
  if (ret != 0) {
    #line 522 
    mt7601u_usb_free_buf(dev,& dev->mcu.resp);
    #line 523 
    return ret;
  }
  #line 526 
  return 0;
}

#line 529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mcu.c"
void mt7601u_mcu_cmd_deinit(struct mt7601u_dev *dev)
{
  #line 531 
  cif_usb_kill_urb(dev->mcu.resp.urb);
  #line 532 
  mt7601u_usb_free_buf(dev,& dev->mcu.resp);
  #line 533 
  return;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
#line 102 
void emg_usb_kill_urb(struct urb *arg0);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 125 
  ldv_set_bit(nr,addr);
  #line 126 
  return;
}

#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void *cif_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 663 
  return ldv_kmemdup(src,len,gfp);
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_mutex_lock_mutex_of_mt7601u_mcu(struct mutex *lock)
{
  #line 804 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_mt7601u_mcu");
  #line 805 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_mutex_unlock_mutex_of_mt7601u_mcu(struct mutex *lock)
{
  #line 811 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_mt7601u_mcu");
  #line 812 
  return;
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_usb_kill_urb(struct urb *urb)
{
  #line 819 
  emg_usb_kill_urb(urb);
  #line 820 
  return;
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 826 
  return ldv_request_firmware(fw);
}

#line 830  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mcu.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 833 
  ldv_release_firmware(fw);
  #line 834 
  return;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 *p)
{
  #line 66 
  return *p;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 393  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/eeprom.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/eeprom.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void *p)
{
  #line 10 
  return __le16_to_cpup((__le16 *)p);
}

#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
int mt7601u_eeprom_init(struct mt7601u_dev *dev);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
__inline static u32 s6_validate(u32 reg)
{
  {
    #line 118 
    int __ret_warn_on = ((unsigned long)reg & 18446744073709551552UL) != 0UL;
    #line 118 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 119 
      ldv_inline_asm();
      #line 120 
      ldv_inline_asm();
    }
    #line 118 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 119 
  return reg & 63U;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
__inline static int s6_to_int(u32 reg)
{
  #line 124 
  int s6;
  #line 126 
  s6 = (int)s6_validate(reg);
  #line 127 
  if (((unsigned long)s6 & 32UL) != 0UL) 
                                         #line 128 
                                         s6 = (int)((unsigned int)s6 + 4294967232U);
  #line 130 
  return s6;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 169 
void mt7601u_set_macaddr(struct mt7601u_dev *dev, u8 *addr);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static bool field_valid(u8 val)
{
  #line 19 
  return (_Bool)((unsigned int)val != 255U);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static s8 field_validate(u8 val)
{
  #line 25 
  if (! field_valid((unsigned char)((int)val))) 
                                                #line 26 
                                                return (signed char)0;
  #line 28 
  return (signed char)val;
}

#line 41 
#line 41 
void __compiletime_assert_41(void);
#line 42 
#line 42 
void __compiletime_assert_42(void);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static int mt7601u_efuse_read(struct mt7601u_dev *dev, u16 addr, u8 *data, enum mt7601u_eeprom_access_modes mode)
{
  #line 35 
  u32 val;
  #line 36 
  int i;
  #line 38 
  val = mt76_rr(dev,36U);
  #line 39 
  val &= 4227923775U;
  #line 41 
  if (0 != 0 && ((unsigned long)((int)addr & -16) & 18446744073709550592UL) != 0UL) 
    #line 41 
    __compiletime_assert_41();
  #line 42 
  if (0 != 0 && ((unsigned long)mode & 18446744073709551612UL) != 0UL) 
    #line 42 
    __compiletime_assert_42();
  #line 43 
  val = (unsigned int)(((((unsigned long)((int)addr & -16) << 16) & 67043328UL) | (((unsigned long)mode << 6) & 255UL)) | 1073741824UL) | val;
  #line 44 
  mt76_wr(dev,36U,val);
  #line 46 
  if (! mt76_poll(dev,36U,1073741824U,0U,1000)) 
                                                #line 47 
                                                return -110;
  #line 49 
  val = mt76_rr(dev,36U);
  #line 50 
  if (((unsigned long)val & 63UL) == 63UL) {
    #line 54 
    memset((void *)data,255,16UL);
    #line 55 
    return 0;
  }
  #line 58 
  i = 0;
  #line 58 
  while (i <= 3) {
    #line 59 
    val = mt76_rr(dev,(unsigned int)((i << 2) + 40));
    #line 60 
    put_unaligned_le32(val,(void *)(data + (unsigned long)(i * 4)));
    #line 58 
    i ++;
  }
  #line 63 
  return 0;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static int mt7601u_efuse_physical_size_check(struct mt7601u_dev *dev)
{
  #line 70 
  u8 data[32U];
  #line 71 
  int ret;
  #line 71 
  int i;
  #line 72 
  u32 cnt_free;
  #line 69 
  int map_reads = 2;
  #line 72 
  u32 start = 0U;
  #line 72 
  u32 end = 0U;
  #line 74 
  i = 0;
  #line 74 
  while (i <= 1) {
    #line 75 
    ret = mt7601u_efuse_read(dev,(unsigned short)((int)((unsigned int)((unsigned short)(i + 30)) * 16U)),(u8 *)(& data) + (unsigned long)(i * 16),(enum mt7601u_eeprom_access_modes)MT_EE_PHYSICAL_READ);
    #line 77 
    if (ret != 0) 
                  #line 78 
                  return ret;
    #line 74 
    i ++;
  }
  #line 81 
  i = 0;
  #line 81 
  while (i <= 28) {
    #line 82 
    if ((unsigned int)data[i] == 0U) {
      #line 83 
      if (start == 0U) 
                       #line 84 
                       start = (unsigned int)(i + 480);
      #line 85 
      end = (unsigned int)(i + 480);
    }
    #line 81 
    i ++;
  }
  #line 87 
  cnt_free = (end - start) + 1U;
  #line 89 
  if (29U - cnt_free <= 4U) {
    #line 90 
    _dev_err(dev->dev,(char *)"Error: your device needs default EEPROM file and this driver doesn\'t support it!\n");
    #line 91 
    return -22;
  }
  #line 94 
  return 0;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static bool mt7601u_has_tssi(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 100 
  u16 nic_conf1 = get_unaligned_le16((void *)(eeprom + 54U));
  #line 102 
  return (_Bool)(((unsigned long)nic_conf1 & 8192UL) != 0UL);
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_chip_cap(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 114 
  int tmp_3;
  #line 108 
  u16 nic_conf0 = get_unaligned_le16((void *)(eeprom + 52U));
  #line 109 
  u16 nic_conf1 = get_unaligned_le16((void *)(eeprom + 54U));
  #line 111 
  if (! field_valid((unsigned char)((int)((unsigned char)nic_conf1)))) 
    #line 112 
    nic_conf1 = (unsigned short)((unsigned int)nic_conf1 & 65280U);
  #line 114 
  if ((int)mt7601u_has_tssi(dev,eeprom) != 0) 
    #line 114 
    if (((unsigned long)nic_conf1 & 2UL) == 0UL) 
                                                 #line 114 
                                                 tmp_3 = 1; else 
                                                                 #line 114 
                                                                 tmp_3 = 0;
  else 
       #line 114 
       tmp_3 = 0;
  #line 114 
  (dev->ee)->tssi_enabled = (_Bool)(tmp_3 != 0);
  #line 117 
  if (((unsigned long)nic_conf1 & 1UL) != 0UL) 
                                               #line 118 
                                               _dev_err(dev->dev,(char *)"Error: this driver does not support HW RF ctrl\n");
  #line 121 
  if (! field_valid((unsigned char)((int)((unsigned char)((int)nic_conf0 >> 8))))) 
    #line 122 
    return;
  #line 124 
  if (((unsigned long)nic_conf0 & 15UL) > 1UL) 
                                               #line 126 
                                               _dev_err(dev->dev,(char *)"Error: device has more than 1 RX/TX stream!\n");
  else 
    #line 124 
    if ((((unsigned long)nic_conf0 >> 4) & 15UL) > 1UL) 
                                                        #line 126 
                                                        _dev_err(dev->dev,(char *)"Error: device has more than 1 RX/TX stream!\n");
  #line 127 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_channel_target_power(struct mt7601u_dev *dev, u8 *eeprom, u8 max_pwr)
{
  #line 133 
  u8 trgt_pwr = *(eeprom + 208U);
  #line 135 
  if ((int)trgt_pwr > (int)max_pwr || (unsigned int)trgt_pwr == 0U) {
    #line 136 
    _dev_warn(dev->dev,(char *)"Error: EEPROM trgt power invalid %hhx!\n",(int)trgt_pwr);
    #line 138 
    trgt_pwr = (unsigned char)32U;
  }
  #line 141 
  memset((void *)(& (dev->ee)->chan_pwr),(int)trgt_pwr,14UL);
  #line 142 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_channel_power(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 147 
  u32 i;
  #line 147 
  u32 val;
  #line 148 
  u8 max_pwr;
  #line 150 
  val = mt7601u_rr(dev,5040U);
  #line 151 
  ;
  #line 151 
  max_pwr = (unsigned char)(((unsigned long)val >> 16) & 63UL);
  #line 153 
  if ((int)mt7601u_has_tssi(dev,eeprom) != 0) {
    #line 154 
    mt7601u_set_channel_target_power(dev,eeprom,(unsigned char)((int)max_pwr));
    #line 155 
    return;
  }
  #line 158 
  i = 0U;
  #line 158 
  while (i <= 13U) {
    {
      #line 159 
      s8 power = field_validate((unsigned char)((int)*(eeprom + (unsigned long)(i + 82U))));
      #line 161 
      if ((int)power > (int)max_pwr || (int)power < 0) 
                                                       #line 162 
                                                       power = (signed char)6;
      #line 164 
      (dev->ee)->chan_pwr[i] = (unsigned char)power;
    }
    #line 158 
    i ++;
  }
  #line 166 
  return;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_country_reg(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 174 
  struct reg_channel_bounds chan_bounds[10U] = {{.start = (unsigned char)1U, .num = (unsigned char)11U}, {.start = (unsigned char)1U, .num = (unsigned char)13U}, {.start = (unsigned char)10U, .num = (unsigned char)2U}, {.start = (unsigned char)10U, .num = (unsigned char)4U}, {.start = (unsigned char)14U, .num = (unsigned char)1U}, {.start = (unsigned char)1U, .num = (unsigned char)14U}, {.start = (unsigned char)3U, .num = (unsigned char)7U}, {.start = (unsigned char)5U, .num = (unsigned char)9U}, {.start = (unsigned char)1U, .num = (unsigned char)11U}, {.start = (unsigned char)1U, .num = (unsigned char)14U}};
  #line 181 
  u8 val = *(eeprom + 57U);
  #line 182 
  int idx = -1;
  #line 184 
  if ((unsigned int)val <= 7U) 
                               #line 185 
                               idx = (int)val;
  #line 186 
  if ((unsigned int)val == 32U) 
                                #line 187 
                                idx = (int)val + -24;
  #line 189 
  if (idx != -1) 
                 #line 190 
                 _dev_info(dev->dev,(char *)"EEPROM country region %02hhx (channels %hhd-%hhd)\n",(int)val,(int)chan_bounds[idx].start,((int)chan_bounds[idx].start + (int)chan_bounds[idx].num) + -1); else 
                                                                    #line 195 
                                                                    idx = 5;
  #line 197 
  (dev->ee)->reg = chan_bounds[idx];
  #line 198 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_rf_freq_off(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 207 
  u8 comp;
  #line 209 
  (dev->ee)->rf_freq_off = (unsigned char)field_validate((unsigned char)((int)*(eeprom + 58U)));
  #line 210 
  comp = (unsigned char)field_validate((unsigned char)((int)*(eeprom + 219U)));
  #line 212 
  if (((unsigned long)comp & 128UL) != 0UL) 
                                            #line 213 
                                            (dev->ee)->rf_freq_off = (unsigned char)((unsigned int)(dev->ee)->rf_freq_off - ((unsigned int)comp & 127U)); else 
                                                                    #line 215 
                                                                    (dev->ee)->rf_freq_off = (unsigned char)((int)(dev->ee)->rf_freq_off + (int)comp);
  #line 216 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_rssi_offset(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 221 
  int i;
  #line 222 
  s8 *rssi_offset = (s8 *)(& (dev->ee)->rssi_offset);
  #line 224 
  i = 0;
  #line 224 
  while (i <= 1) {
    #line 225 
    *(rssi_offset + (unsigned long)i) = (signed char)*(eeprom + (unsigned long)(i + 70));
    #line 227 
    if ((unsigned int)*(rssi_offset + (unsigned long)i) + 10U > 20U) {
      #line 228 
      _dev_warn(dev->dev,(char *)"Warning: EEPROM RSSI is invalid %02hhx\n",(int)*(rssi_offset + (unsigned long)i));
      #line 231 
      *(rssi_offset + (unsigned long)i) = (signed char)0;
    }
    #line 224 
    i ++;
  }
  #line 234 
  return;
}

#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_extra_power_over_mac(struct mt7601u_dev *dev)
{
  #line 239 
  u32 val;
  #line 241 
  val = (mt7601u_rr(dev,4888U) >> 8) & 255U;
  #line 242 
  val = ((mt7601u_rr(dev,4892U) << 8) & 16711680U) | val;
  #line 243 
  mt7601u_wr(dev,5076U,val);
  #line 245 
  val = (mt7601u_rr(dev,4900U) >> 8) & 255U;
  #line 246 
  mt7601u_wr(dev,5084U,val);
  #line 247 
  return;
}

#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_set_power_rate(struct power_per_rate *rate, s8 delta, u8 value)
{
  #line 253 
  if ((unsigned int)value == 255U) 
                                   #line 254 
                                   return;
  #line 256 
  rate->raw = (unsigned char)s6_validate((unsigned int)value);
  #line 257 
  rate->bw20 = (signed char)s6_to_int((unsigned int)value);
  #line 259 
  rate->bw40 = (signed char)((int)rate->bw20 + (int)delta);
  #line 260 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_save_power_rate(struct mt7601u_dev *dev, s8 delta, u32 val, int i)
{
  #line 265 
  struct mt7601u_rate_power *t = & (dev->ee)->power_rate_table;
  #line 267 
  switch (i) {
    #line 268 
    case 0: 
            #line 268 
    ;
    #line 269 
    mt7601u_set_power_rate(& t->cck[0],(signed char)((int)delta),(unsigned char)((int)((unsigned char)val)));
    #line 270 
    mt7601u_set_power_rate(& t->cck[1],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 8))));
    #line 272 
    (dev->ee)->real_cck_bw20[0] = t->cck[0].bw20;
    #line 273 
    (dev->ee)->real_cck_bw20[1] = t->cck[1].bw20;
    #line 275 
    mt7601u_set_power_rate(& t->ofdm[0],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 16))));
    #line 276 
    mt7601u_set_power_rate(& t->ofdm[1],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 24))));
    #line 277 
    break;
    #line 278 
    case 1: 
            #line 278 
    ;
    #line 279 
    mt7601u_set_power_rate(& t->ofdm[2],(signed char)((int)delta),(unsigned char)((int)((unsigned char)val)));
    #line 280 
    mt7601u_set_power_rate(& t->ofdm[3],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 8))));
    #line 281 
    mt7601u_set_power_rate(& t->ht[0],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 16))));
    #line 282 
    mt7601u_set_power_rate(& t->ht[1],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 24))));
    #line 283 
    break;
    #line 284 
    case 2: 
            #line 284 
    ;
    #line 285 
    mt7601u_set_power_rate(& t->ht[2],(signed char)((int)delta),(unsigned char)((int)((unsigned char)val)));
    #line 286 
    mt7601u_set_power_rate(& t->ht[3],(signed char)((int)delta),(unsigned char)((int)((unsigned char)(val >> 8))));
    #line 287 
    break;
  }
  #line 289 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static s8 get_delta(u8 val)
{
  #line 294 
  s8 ret;
  #line 296 
  if (field_valid((unsigned char)((int)val))) {
    #line 296 
    if (((unsigned long)val & 128UL) == 0UL) 
                                             #line 297 
                                             return (signed char)0;
  }
  else 
       #line 297 
       return (signed char)0;
  #line 299 
  ret = (signed char)((int)((signed char)val) & 31);
  #line 300 
  if ((int)ret > 8) 
                    #line 301 
                    ret = (signed char)8;
  #line 302 
  if (((unsigned long)val & 64UL) != 0UL) 
                                          #line 303 
                                          ret = (signed char)(- ((int)ret));
  #line 305 
  return ret;
}

#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_config_tx_power_per_rate(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 311 
  u32 val;
  #line 312 
  s8 bw40_delta;
  #line 313 
  int i;
  #line 315 
  bw40_delta = get_delta((unsigned char)((int)*(eeprom + 80U)));
  #line 317 
  i = 0;
  #line 317 
  while (i <= 4) {
    #line 318 
    val = get_unaligned_le32((void *)(eeprom + (unsigned long)(i * 4 + 222)));
    #line 320 
    mt7601u_save_power_rate(dev,(signed char)((int)bw40_delta),val,i);
    #line 322 
    if (val != 4294967295U) 
                            #line 323 
                            mt7601u_wr(dev,(unsigned int)((i + 1221) * 4),val);
    #line 317 
    i ++;
  }
  #line 326 
  mt7601u_extra_power_over_mac(dev);
  #line 327 
  return;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
static void mt7601u_init_tssi_params(struct mt7601u_dev *dev, u8 *eeprom)
{
  #line 332 
  struct tssi_data *d = & (dev->ee)->tssi_data;
  #line 334 
  if (! (dev->ee)->tssi_enabled) 
                                 #line 335 
                                 return;
  #line 337 
  d->slope = *(eeprom + 110U);
  #line 338 
  d->tx0_delta_offset = (int)*(eeprom + 118U) * 1024;
  #line 339 
  d->offset[0] = *(eeprom + 111U);
  #line 340 
  d->offset[1] = *(eeprom + 112U);
  #line 341 
  d->offset[2] = *(eeprom + 113U);
  #line 342 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.c"
int mt7601u_eeprom_init(struct mt7601u_dev *dev)
{
  #line 347 
  u8 *eeprom;
  #line 348 
  int i;
  #line 348 
  int ret;
  #line 350 
  ret = mt7601u_efuse_physical_size_check(dev);
  #line 351 
  if (ret != 0) 
                #line 352 
                return ret;
  #line 354 
  dev->ee = (struct mt7601u_eeprom_params *)cif_devm_kzalloc(dev->dev,64UL,3264U);
  #line 355 
  if (dev->ee == (struct mt7601u_eeprom_params *)0) 
                                                    #line 356 
                                                    return -12;
  #line 358 
  eeprom = (u8 *)kmalloc(256UL,3264U);
  #line 359 
  if (eeprom == (u8 *)0U) 
                          #line 360 
                          return -12;
  #line 362 
  i = 0;
  #line 362 
  while (i <= 240) {
    #line 363 
    ret = mt7601u_efuse_read(dev,(unsigned short)((int)((unsigned short)i)),eeprom + (unsigned long)i,(enum mt7601u_eeprom_access_modes)MT_EE_READ);
    #line 364 
    if (ret != 0) 
                  #line 365 
                  goto out;
    #line 362 
    i += 16;
  }
  #line 368 
  if ((unsigned int)*(eeprom + 3U) > 13U) 
                                          #line 369 
                                          _dev_warn(dev->dev,(char *)"Warning: unsupported EEPROM version %02hhx\n",(int)*(eeprom + 3U));
  #line 372 
  _dev_info(dev->dev,(char *)"EEPROM ver:%02hhx fae:%02hhx\n",(int)*(eeprom + 3U),(int)*(eeprom + 2U));
  #line 375 
  mt7601u_set_macaddr(dev,eeprom + 4U);
  #line 376 
  mt7601u_set_chip_cap(dev,eeprom);
  #line 377 
  mt7601u_set_channel_power(dev,eeprom);
  #line 378 
  mt7601u_set_country_reg(dev,eeprom);
  #line 379 
  mt7601u_set_rf_freq_off(dev,eeprom);
  #line 380 
  mt7601u_set_rssi_offset(dev,eeprom);
  #line 381 
  (dev->ee)->ref_temp = (signed char)*(eeprom + 209U);
  #line 382 
  (dev->ee)->lna_gain = (signed char)*(eeprom + 68U);
  #line 384 
  mt7601u_config_tx_power_per_rate(dev,eeprom);
  #line 386 
  mt7601u_init_tssi_params(dev,eeprom);
  #line 387 
  out: 
       #line 387 
  ;
  #line 388 
  kfree((void *)eeprom);
  #line 389 
  return ret;
}

#line 393  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/eeprom.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 396 
  return ldv_kmalloc(size,flags);
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/eeprom.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 811 
  return ldv_devm_kzalloc(size,flags);
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev(spinlock_t *lock);
#line 26 
#line 801 
static void cif_mutex_lock_reg_atomic_mutex_of_mt7601u_dev(struct mutex *lock);
#line 26 
#line 815 
static void cif_mutex_lock_hw_atomic_mutex_of_mt7601u_dev(struct mutex *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_mutex_unlock_reg_atomic_mutex_of_mt7601u_dev(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_mutex_unlock_hw_atomic_mutex_of_mt7601u_dev(struct mutex *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 160 
#line 160 
void __compiletime_assert_160(void);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static enum nl80211_channel_type cfg80211_get_chandef_type(struct cfg80211_chan_def *chandef)
{
  #line 611 
  switch ((unsigned int)chandef->width) {
    #line 612 
    case (unsigned int)0: 
                          #line 612 
    ;
    #line 613 
    return NL80211_CHAN_NO_HT;
    #line 614 
    case (unsigned int)1: 
                          #line 614 
    ;
    #line 615 
    return NL80211_CHAN_HT20;
    #line 616 
    case (unsigned int)2: 
                          #line 616 
    ;
    #line 617 
    if (chandef->center_freq1 > (chandef->chan)->center_freq) 
                                                              #line 618 
                                                              return NL80211_CHAN_HT40PLUS;
    #line 619 
    return NL80211_CHAN_HT40MINUS;
    #line 620 
    default: 
             #line 620 
    ;
    {
      #line 621 
      int __ret_warn_on = 1;
      #line 621 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 622 
        ldv_inline_asm();
        #line 623 
        ldv_inline_asm();
      }
      #line 621 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 622 
    return NL80211_CHAN_NO_HT;
  }
}

#line 5383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5383 
void ieee80211_queue_delayed_work(struct ieee80211_hw *, struct delayed_work *, unsigned long);
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static void ewma_rssi_init(struct ewma_rssi *e)
{
  #line 134 
  e->internal = 0UL;
  #line 135 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static unsigned long ewma_rssi_read(struct ewma_rssi *e)
{
  #line 134 
  return e->internal >> 10;
}

#line 342 
#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_phy_init(struct mt7601u_dev *dev);
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_wait_bbp_ready(struct mt7601u_dev *dev);
#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_set_rx_path(struct mt7601u_dev *dev, u8 path);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_set_tx_dac(struct mt7601u_dev *dev, u8 dac);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 1174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_bbp_set_bw(struct mt7601u_dev *dev, int bw);
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_agc_save(struct mt7601u_dev *dev);
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_agc_restore(struct mt7601u_dev *dev);
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_phy_set_channel(struct mt7601u_dev *dev, struct cfg80211_chan_def *chandef);
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_phy_recalibrate_after_assoc(struct mt7601u_dev *dev);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_phy_get_rssi(struct mt7601u_dev *dev, struct mt7601u_rxwi *rxwi, u16 rate);
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_phy_con_cal_onoff(struct mt7601u_dev *dev, struct ieee80211_bss_conf *info);
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
u32 mt7601u_bbp_set_ctrlch(struct mt7601u_dev *dev, bool below);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static u32 mt7601u_mac_set_ctrlch(struct mt7601u_dev *dev, bool below)
{
  #line 383 
  return mt7601u_rmc(dev,4908U,1U,(unsigned int)below);
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/eeprom.h"
__inline static u32 int_to_s6(int val)
{
  #line 135 
  if (val < -32) 
                 #line 136 
                 return 32U;
  #line 137 
  if (val > 31) 
                #line 138 
                return 31U;
  #line 140 
  return (unsigned int)val & 63U;
}

#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
#line 161 
struct tracepoint __tracepoint_rf_read;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_rf_read(struct mt7601u_dev *dev, u8 bank, u8 reg, u8 val)
{
  #line 161 
  int pscr_ret___0;
  #line 161 
  if ((int)static_key_false(& __tracepoint_rf_read.key) != 0) {
    #line 161 
    int pscr_ret__;
    #line 161 
    struct tracepoint_func *________p1;
    #line 161 
    struct tracepoint_func *it_func_ptr;
    #line 161 
    void *it_func;
    #line 161 
    void *__data;
    #line 161 
    int __idx = 0;
    {
      #line 161 
      void *__vpp_verify = (void *)0;
      #line 161 
      void *tmp = __vpp_verify;
    }
    #line 161 
    switch (4UL) {
      #line 161 
      int pfo_ret___1;
      #line 161 
      int pfo_ret___2;
      #line 161 
      int pfo_ret__;
      #line 161 
      int pfo_ret___0;
      #line 161 
      case (unsigned long)1: 
                             #line 161 
      ;
      #line 161 
      switch (4UL) {
        #line 161 
        case (unsigned long)1: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)2: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)4: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)8: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        default: 
                 #line 161 
        ;
        #line 161 
        __bad_percpu_size();
      }
      #line 161 
      pscr_ret__ = pfo_ret__;
      #line 161 
      break;
      #line 161 
      case (unsigned long)2: 
                             #line 161 
      ;
      #line 161 
      switch (4UL) {
        #line 161 
        case (unsigned long)1: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)2: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)4: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)8: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        default: 
                 #line 161 
        ;
        #line 161 
        __bad_percpu_size();
      }
      #line 161 
      pscr_ret__ = pfo_ret___0;
      #line 161 
      break;
      #line 161 
      case (unsigned long)4: 
                             #line 161 
      ;
      #line 161 
      switch (4UL) {
        #line 161 
        case (unsigned long)1: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)2: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)4: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)8: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        default: 
                 #line 161 
        ;
        #line 161 
        __bad_percpu_size();
      }
      #line 161 
      pscr_ret__ = pfo_ret___1;
      #line 161 
      break;
      #line 161 
      case (unsigned long)8: 
                             #line 161 
      ;
      #line 161 
      switch (4UL) {
        #line 161 
        case (unsigned long)1: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)2: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)4: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        case (unsigned long)8: 
                               #line 161 
        ;
        #line 162 
        ldv_inline_asm();
        #line 161 
        break;
        #line 161 
        default: 
                 #line 161 
        ;
        #line 161 
        __bad_percpu_size();
      }
      #line 161 
      pscr_ret__ = pfo_ret___2;
      #line 161 
      break;
      #line 161 
      default: 
               #line 161 
      ;
      #line 161 
      __bad_size_call_parameter();
      #line 161 
      break;
    }
    #line 161 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 161 
                                                               return;
    {
      #line 161 
      int __ret_warn_on = 0;
      #line 161 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 162 
        ldv_inline_asm();
        #line 163 
        ldv_inline_asm();
      }
      #line 161 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 161 
    __preempt_count_add(1);
    #line 162 
    ldv_inline_asm();
    {
      #line 162 
      union __anonunion___u_6382 __u;
      #line 161 
      __read_once_size((void *)(& __tracepoint_rf_read.funcs),(void *)(& __u.__c),8);
      #line 161 
      ________p1 = (__u.__val);
      }
    #line 161 
    it_func_ptr = ________p1;
    #line 161 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 161 
      while (1) {
        #line 161 
        it_func = it_func_ptr->func;
        #line 161 
        __data = it_func_ptr->data;
        #line 161 
        (*((void (*)(void *, struct mt7601u_dev *, u8 , u8 , u8 ))it_func))(__data,dev,(unsigned char)((int)bank),(unsigned char)((int)reg),(unsigned char)((int)val));
        #line 161 
        it_func_ptr ++;
        #line 162 
        ;
        #line 162 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 161 
                                                break;
      }
    #line 163 
    ldv_inline_asm();
    #line 161 
    __preempt_count_sub(1);
  }
  {
    #line 161 
    void *__vpp_verify_0 = (void *)0;
    #line 161 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 161 
  switch (4UL) {
    #line 161 
    int pfo_ret___6;
    #line 161 
    int pfo_ret___3;
    #line 161 
    int pfo_ret___4;
    #line 161 
    int pfo_ret___5;
    #line 161 
    case (unsigned long)1: 
                           #line 161 
    ;
    #line 161 
    switch (4UL) {
      #line 161 
      case (unsigned long)1: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)2: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)4: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)8: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      default: 
               #line 161 
      ;
      #line 161 
      __bad_percpu_size();
    }
    #line 161 
    pscr_ret___0 = pfo_ret___3;
    #line 161 
    break;
    #line 161 
    case (unsigned long)2: 
                           #line 161 
    ;
    #line 161 
    switch (4UL) {
      #line 161 
      case (unsigned long)1: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)2: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)4: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)8: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      default: 
               #line 161 
      ;
      #line 161 
      __bad_percpu_size();
    }
    #line 161 
    pscr_ret___0 = pfo_ret___4;
    #line 161 
    break;
    #line 161 
    case (unsigned long)4: 
                           #line 161 
    ;
    #line 161 
    switch (4UL) {
      #line 161 
      case (unsigned long)1: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)2: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)4: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)8: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      default: 
               #line 161 
      ;
      #line 161 
      __bad_percpu_size();
    }
    #line 161 
    pscr_ret___0 = pfo_ret___5;
    #line 161 
    break;
    #line 161 
    case (unsigned long)8: 
                           #line 161 
    ;
    #line 161 
    switch (4UL) {
      #line 161 
      case (unsigned long)1: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)2: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)4: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      case (unsigned long)8: 
                             #line 161 
      ;
      #line 162 
      ldv_inline_asm();
      #line 161 
      break;
      #line 161 
      default: 
               #line 161 
      ;
      #line 161 
      __bad_percpu_size();
    }
    #line 161 
    pscr_ret___0 = pfo_ret___6;
    #line 161 
    break;
    #line 161 
    default: 
             #line 161 
    ;
    #line 161 
    __bad_size_call_parameter();
    #line 161 
    break;
  }
  #line 161 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 161 
    rcu_read_lock_sched_notrace();
    {
      #line 162 
      union __anonunion___u_6384 __u_0;
      #line 161 
      __read_once_size((void *)(& __tracepoint_rf_read.funcs),(void *)(& __u_0.__c),8);
      #line 161 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 161 
        bool __warned;
        #line 161 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 161 
          if (! __warned) {
            #line 161 
            if (rcu_read_lock_sched_held() == 0) {
              #line 161 
              __warned = (_Bool)1;
              #line 161 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",161,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 161 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 161 
    rcu_read_unlock_sched_notrace();
  }
  #line 163 
  return;
}

#line 166 
#line 166 
struct tracepoint __tracepoint_rf_write;
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_rf_write(struct mt7601u_dev *dev, u8 bank, u8 reg, u8 val)
{
  #line 166 
  int pscr_ret___0;
  #line 166 
  if ((int)static_key_false(& __tracepoint_rf_write.key) != 0) {
    #line 166 
    int pscr_ret__;
    #line 166 
    struct tracepoint_func *________p1;
    #line 166 
    struct tracepoint_func *it_func_ptr;
    #line 166 
    void *it_func;
    #line 166 
    void *__data;
    #line 166 
    int __idx = 0;
    {
      #line 166 
      void *__vpp_verify = (void *)0;
      #line 166 
      void *tmp = __vpp_verify;
    }
    #line 166 
    switch (4UL) {
      #line 166 
      int pfo_ret__;
      #line 166 
      int pfo_ret___0;
      #line 166 
      int pfo_ret___1;
      #line 166 
      int pfo_ret___2;
      #line 166 
      case (unsigned long)1: 
                             #line 166 
      ;
      #line 166 
      switch (4UL) {
        #line 166 
        case (unsigned long)1: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)2: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)4: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)8: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        default: 
                 #line 166 
        ;
        #line 166 
        __bad_percpu_size();
      }
      #line 166 
      pscr_ret__ = pfo_ret__;
      #line 166 
      break;
      #line 166 
      case (unsigned long)2: 
                             #line 166 
      ;
      #line 166 
      switch (4UL) {
        #line 166 
        case (unsigned long)1: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)2: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)4: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)8: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        default: 
                 #line 166 
        ;
        #line 166 
        __bad_percpu_size();
      }
      #line 166 
      pscr_ret__ = pfo_ret___0;
      #line 166 
      break;
      #line 166 
      case (unsigned long)4: 
                             #line 166 
      ;
      #line 166 
      switch (4UL) {
        #line 166 
        case (unsigned long)1: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)2: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)4: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)8: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        default: 
                 #line 166 
        ;
        #line 166 
        __bad_percpu_size();
      }
      #line 166 
      pscr_ret__ = pfo_ret___1;
      #line 166 
      break;
      #line 166 
      case (unsigned long)8: 
                             #line 166 
      ;
      #line 166 
      switch (4UL) {
        #line 166 
        case (unsigned long)1: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)2: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)4: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        case (unsigned long)8: 
                               #line 166 
        ;
        #line 167 
        ldv_inline_asm();
        #line 166 
        break;
        #line 166 
        default: 
                 #line 166 
        ;
        #line 166 
        __bad_percpu_size();
      }
      #line 166 
      pscr_ret__ = pfo_ret___2;
      #line 166 
      break;
      #line 166 
      default: 
               #line 166 
      ;
      #line 166 
      __bad_size_call_parameter();
      #line 166 
      break;
    }
    #line 166 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 166 
                                                               return;
    {
      #line 166 
      int __ret_warn_on = 0;
      #line 166 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 167 
        ldv_inline_asm();
        #line 168 
        ldv_inline_asm();
      }
      #line 166 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 166 
    __preempt_count_add(1);
    #line 167 
    ldv_inline_asm();
    {
      #line 167 
      union __anonunion___u_6386 __u;
      #line 166 
      __read_once_size((void *)(& __tracepoint_rf_write.funcs),(void *)(& __u.__c),8);
      #line 166 
      ________p1 = (__u.__val);
      }
    #line 166 
    it_func_ptr = ________p1;
    #line 166 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 166 
      while (1) {
        #line 166 
        it_func = it_func_ptr->func;
        #line 166 
        __data = it_func_ptr->data;
        #line 166 
        (*((void (*)(void *, struct mt7601u_dev *, u8 , u8 , u8 ))it_func))(__data,dev,(unsigned char)((int)bank),(unsigned char)((int)reg),(unsigned char)((int)val));
        #line 166 
        it_func_ptr ++;
        #line 167 
        ;
        #line 167 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 166 
                                                break;
      }
    #line 168 
    ldv_inline_asm();
    #line 166 
    __preempt_count_sub(1);
  }
  {
    #line 166 
    void *__vpp_verify_0 = (void *)0;
    #line 166 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 166 
  switch (4UL) {
    #line 166 
    int pfo_ret___3;
    #line 166 
    int pfo_ret___4;
    #line 166 
    int pfo_ret___5;
    #line 166 
    int pfo_ret___6;
    #line 166 
    case (unsigned long)1: 
                           #line 166 
    ;
    #line 166 
    switch (4UL) {
      #line 166 
      case (unsigned long)1: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)2: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)4: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)8: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      default: 
               #line 166 
      ;
      #line 166 
      __bad_percpu_size();
    }
    #line 166 
    pscr_ret___0 = pfo_ret___3;
    #line 166 
    break;
    #line 166 
    case (unsigned long)2: 
                           #line 166 
    ;
    #line 166 
    switch (4UL) {
      #line 166 
      case (unsigned long)1: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)2: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)4: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)8: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      default: 
               #line 166 
      ;
      #line 166 
      __bad_percpu_size();
    }
    #line 166 
    pscr_ret___0 = pfo_ret___4;
    #line 166 
    break;
    #line 166 
    case (unsigned long)4: 
                           #line 166 
    ;
    #line 166 
    switch (4UL) {
      #line 166 
      case (unsigned long)1: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)2: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)4: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)8: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      default: 
               #line 166 
      ;
      #line 166 
      __bad_percpu_size();
    }
    #line 166 
    pscr_ret___0 = pfo_ret___5;
    #line 166 
    break;
    #line 166 
    case (unsigned long)8: 
                           #line 166 
    ;
    #line 166 
    switch (4UL) {
      #line 166 
      case (unsigned long)1: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)2: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)4: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      case (unsigned long)8: 
                             #line 166 
      ;
      #line 167 
      ldv_inline_asm();
      #line 166 
      break;
      #line 166 
      default: 
               #line 166 
      ;
      #line 166 
      __bad_percpu_size();
    }
    #line 166 
    pscr_ret___0 = pfo_ret___6;
    #line 166 
    break;
    #line 166 
    default: 
             #line 166 
    ;
    #line 166 
    __bad_size_call_parameter();
    #line 166 
    break;
  }
  #line 166 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 166 
    rcu_read_lock_sched_notrace();
    {
      #line 167 
      union __anonunion___u_6388 __u_0;
      #line 166 
      __read_once_size((void *)(& __tracepoint_rf_write.funcs),(void *)(& __u_0.__c),8);
      #line 166 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 166 
        bool __warned;
        #line 166 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 166 
          if (! __warned) {
            #line 166 
            if (rcu_read_lock_sched_held() == 0) {
              #line 166 
              __warned = (_Bool)1;
              #line 166 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",166,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 166 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 166 
    rcu_read_unlock_sched_notrace();
  }
  #line 168 
  return;
}

#line 189 
#line 189 
struct tracepoint __tracepoint_bbp_read;
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_bbp_read(struct mt7601u_dev *dev, u8 reg, u8 val)
{
  #line 189 
  int pscr_ret___0;
  #line 189 
  if ((int)static_key_false(& __tracepoint_bbp_read.key) != 0) {
    #line 189 
    int pscr_ret__;
    #line 189 
    struct tracepoint_func *________p1;
    #line 189 
    struct tracepoint_func *it_func_ptr;
    #line 189 
    void *it_func;
    #line 189 
    void *__data;
    #line 189 
    int __idx = 0;
    {
      #line 189 
      void *__vpp_verify = (void *)0;
      #line 189 
      void *tmp = __vpp_verify;
    }
    #line 189 
    switch (4UL) {
      #line 189 
      int pfo_ret___1;
      #line 189 
      int pfo_ret___2;
      #line 189 
      int pfo_ret__;
      #line 189 
      int pfo_ret___0;
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret__;
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret___0;
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret___1;
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 189 
      switch (4UL) {
        #line 189 
        case (unsigned long)1: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)2: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)4: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        case (unsigned long)8: 
                               #line 189 
        ;
        #line 190 
        ldv_inline_asm();
        #line 189 
        break;
        #line 189 
        default: 
                 #line 189 
        ;
        #line 189 
        __bad_percpu_size();
      }
      #line 189 
      pscr_ret__ = pfo_ret___2;
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_size_call_parameter();
      #line 189 
      break;
    }
    #line 189 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 189 
                                                               return;
    {
      #line 189 
      int __ret_warn_on = 0;
      #line 189 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 190 
        ldv_inline_asm();
        #line 191 
        ldv_inline_asm();
      }
      #line 189 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 189 
    __preempt_count_add(1);
    #line 190 
    ldv_inline_asm();
    {
      #line 190 
      union __anonunion___u_6390 __u;
      #line 189 
      __read_once_size((void *)(& __tracepoint_bbp_read.funcs),(void *)(& __u.__c),8);
      #line 189 
      ________p1 = (__u.__val);
      }
    #line 189 
    it_func_ptr = ________p1;
    #line 189 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 189 
      while (1) {
        #line 189 
        it_func = it_func_ptr->func;
        #line 189 
        __data = it_func_ptr->data;
        #line 189 
        (*((void (*)(void *, struct mt7601u_dev *, u8 , u8 ))it_func))(__data,dev,(unsigned char)((int)reg),(unsigned char)((int)val));
        #line 189 
        it_func_ptr ++;
        #line 190 
        ;
        #line 190 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 189 
                                                break;
      }
    #line 191 
    ldv_inline_asm();
    #line 189 
    __preempt_count_sub(1);
  }
  {
    #line 189 
    void *__vpp_verify_0 = (void *)0;
    #line 189 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 189 
  switch (4UL) {
    #line 189 
    int pfo_ret___3;
    #line 189 
    int pfo_ret___4;
    #line 189 
    int pfo_ret___5;
    #line 189 
    int pfo_ret___6;
    #line 189 
    case (unsigned long)1: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___3;
    #line 189 
    break;
    #line 189 
    case (unsigned long)2: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___4;
    #line 189 
    break;
    #line 189 
    case (unsigned long)4: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___5;
    #line 189 
    break;
    #line 189 
    case (unsigned long)8: 
                           #line 189 
    ;
    #line 189 
    switch (4UL) {
      #line 189 
      case (unsigned long)1: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)2: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)4: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      case (unsigned long)8: 
                             #line 189 
      ;
      #line 190 
      ldv_inline_asm();
      #line 189 
      break;
      #line 189 
      default: 
               #line 189 
      ;
      #line 189 
      __bad_percpu_size();
    }
    #line 189 
    pscr_ret___0 = pfo_ret___6;
    #line 189 
    break;
    #line 189 
    default: 
             #line 189 
    ;
    #line 189 
    __bad_size_call_parameter();
    #line 189 
    break;
  }
  #line 189 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 189 
    rcu_read_lock_sched_notrace();
    {
      #line 190 
      union __anonunion___u_6392 __u_0;
      #line 189 
      __read_once_size((void *)(& __tracepoint_bbp_read.funcs),(void *)(& __u_0.__c),8);
      #line 189 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 189 
        bool __warned;
        #line 189 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 189 
          if (! __warned) {
            #line 189 
            if (rcu_read_lock_sched_held() == 0) {
              #line 189 
              __warned = (_Bool)1;
              #line 189 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",189,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 189 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 189 
    rcu_read_unlock_sched_notrace();
  }
  #line 191 
  return;
}

#line 194 
#line 194 
struct tracepoint __tracepoint_bbp_write;
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_bbp_write(struct mt7601u_dev *dev, u8 reg, u8 val)
{
  #line 194 
  int pscr_ret___0;
  #line 194 
  if ((int)static_key_false(& __tracepoint_bbp_write.key) != 0) {
    #line 194 
    int pscr_ret__;
    #line 194 
    struct tracepoint_func *________p1;
    #line 194 
    struct tracepoint_func *it_func_ptr;
    #line 194 
    void *it_func;
    #line 194 
    void *__data;
    #line 194 
    int __idx = 0;
    {
      #line 194 
      void *__vpp_verify = (void *)0;
      #line 194 
      void *tmp = __vpp_verify;
    }
    #line 194 
    switch (4UL) {
      #line 194 
      int pfo_ret___1;
      #line 194 
      int pfo_ret___2;
      #line 194 
      int pfo_ret__;
      #line 194 
      int pfo_ret___0;
      #line 194 
      case (unsigned long)1: 
                             #line 194 
      ;
      #line 194 
      switch (4UL) {
        #line 194 
        case (unsigned long)1: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)2: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)4: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)8: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        default: 
                 #line 194 
        ;
        #line 194 
        __bad_percpu_size();
      }
      #line 194 
      pscr_ret__ = pfo_ret__;
      #line 194 
      break;
      #line 194 
      case (unsigned long)2: 
                             #line 194 
      ;
      #line 194 
      switch (4UL) {
        #line 194 
        case (unsigned long)1: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)2: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)4: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)8: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        default: 
                 #line 194 
        ;
        #line 194 
        __bad_percpu_size();
      }
      #line 194 
      pscr_ret__ = pfo_ret___0;
      #line 194 
      break;
      #line 194 
      case (unsigned long)4: 
                             #line 194 
      ;
      #line 194 
      switch (4UL) {
        #line 194 
        case (unsigned long)1: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)2: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)4: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)8: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        default: 
                 #line 194 
        ;
        #line 194 
        __bad_percpu_size();
      }
      #line 194 
      pscr_ret__ = pfo_ret___1;
      #line 194 
      break;
      #line 194 
      case (unsigned long)8: 
                             #line 194 
      ;
      #line 194 
      switch (4UL) {
        #line 194 
        case (unsigned long)1: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)2: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)4: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        case (unsigned long)8: 
                               #line 194 
        ;
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
        #line 194 
        default: 
                 #line 194 
        ;
        #line 194 
        __bad_percpu_size();
      }
      #line 194 
      pscr_ret__ = pfo_ret___2;
      #line 194 
      break;
      #line 194 
      default: 
               #line 194 
      ;
      #line 194 
      __bad_size_call_parameter();
      #line 194 
      break;
    }
    #line 194 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 194 
                                                               return;
    {
      #line 194 
      int __ret_warn_on = 0;
      #line 194 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 195 
        ldv_inline_asm();
        #line 196 
        ldv_inline_asm();
      }
      #line 194 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 194 
    __preempt_count_add(1);
    #line 195 
    ldv_inline_asm();
    {
      #line 195 
      union __anonunion___u_6394 __u;
      #line 194 
      __read_once_size((void *)(& __tracepoint_bbp_write.funcs),(void *)(& __u.__c),8);
      #line 194 
      ________p1 = (__u.__val);
      }
    #line 194 
    it_func_ptr = ________p1;
    #line 194 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 194 
      while (1) {
        #line 194 
        it_func = it_func_ptr->func;
        #line 194 
        __data = it_func_ptr->data;
        #line 194 
        (*((void (*)(void *, struct mt7601u_dev *, u8 , u8 ))it_func))(__data,dev,(unsigned char)((int)reg),(unsigned char)((int)val));
        #line 194 
        it_func_ptr ++;
        #line 195 
        ;
        #line 195 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 194 
                                                break;
      }
    #line 196 
    ldv_inline_asm();
    #line 194 
    __preempt_count_sub(1);
  }
  {
    #line 194 
    void *__vpp_verify_0 = (void *)0;
    #line 194 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 194 
  switch (4UL) {
    #line 194 
    int pfo_ret___3;
    #line 194 
    int pfo_ret___4;
    #line 194 
    int pfo_ret___5;
    #line 194 
    int pfo_ret___6;
    #line 194 
    case (unsigned long)1: 
                           #line 194 
    ;
    #line 194 
    switch (4UL) {
      #line 194 
      case (unsigned long)1: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)2: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)4: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)8: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      default: 
               #line 194 
      ;
      #line 194 
      __bad_percpu_size();
    }
    #line 194 
    pscr_ret___0 = pfo_ret___3;
    #line 194 
    break;
    #line 194 
    case (unsigned long)2: 
                           #line 194 
    ;
    #line 194 
    switch (4UL) {
      #line 194 
      case (unsigned long)1: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)2: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)4: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)8: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      default: 
               #line 194 
      ;
      #line 194 
      __bad_percpu_size();
    }
    #line 194 
    pscr_ret___0 = pfo_ret___4;
    #line 194 
    break;
    #line 194 
    case (unsigned long)4: 
                           #line 194 
    ;
    #line 194 
    switch (4UL) {
      #line 194 
      case (unsigned long)1: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)2: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)4: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)8: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      default: 
               #line 194 
      ;
      #line 194 
      __bad_percpu_size();
    }
    #line 194 
    pscr_ret___0 = pfo_ret___5;
    #line 194 
    break;
    #line 194 
    case (unsigned long)8: 
                           #line 194 
    ;
    #line 194 
    switch (4UL) {
      #line 194 
      case (unsigned long)1: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)2: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)4: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      case (unsigned long)8: 
                             #line 194 
      ;
      #line 195 
      ldv_inline_asm();
      #line 194 
      break;
      #line 194 
      default: 
               #line 194 
      ;
      #line 194 
      __bad_percpu_size();
    }
    #line 194 
    pscr_ret___0 = pfo_ret___6;
    #line 194 
    break;
    #line 194 
    default: 
             #line 194 
    ;
    #line 194 
    __bad_size_call_parameter();
    #line 194 
    break;
  }
  #line 194 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 194 
    rcu_read_lock_sched_notrace();
    {
      #line 195 
      union __anonunion___u_6396 __u_0;
      #line 194 
      __read_once_size((void *)(& __tracepoint_bbp_write.funcs),(void *)(& __u_0.__c),8);
      #line 194 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 194 
        bool __warned;
        #line 194 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 194 
          if (! __warned) {
            #line 194 
            if (rcu_read_lock_sched_held() == 0) {
              #line 194 
              __warned = (_Bool)1;
              #line 194 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",194,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 194 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 194 
    rcu_read_unlock_sched_notrace();
  }
  #line 196 
  return;
}

#line 215 
#line 215 
struct tracepoint __tracepoint_temp_mode;
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_temp_mode(struct mt7601u_dev *dev, u8 val)
{
  #line 215 
  int pscr_ret___0;
  #line 215 
  if ((int)static_key_false(& __tracepoint_temp_mode.key) != 0) {
    #line 215 
    int pscr_ret__;
    #line 215 
    struct tracepoint_func *________p1;
    #line 215 
    struct tracepoint_func *it_func_ptr;
    #line 215 
    void *it_func;
    #line 215 
    void *__data;
    #line 215 
    int __idx = 0;
    {
      #line 215 
      void *__vpp_verify = (void *)0;
      #line 215 
      void *tmp = __vpp_verify;
    }
    #line 215 
    switch (4UL) {
      #line 215 
      int pfo_ret___1;
      #line 215 
      int pfo_ret___2;
      #line 215 
      int pfo_ret__;
      #line 215 
      int pfo_ret___0;
      #line 215 
      case (unsigned long)1: 
                             #line 215 
      ;
      #line 215 
      switch (4UL) {
        #line 215 
        case (unsigned long)1: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)2: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)4: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)8: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        default: 
                 #line 215 
        ;
        #line 215 
        __bad_percpu_size();
      }
      #line 215 
      pscr_ret__ = pfo_ret__;
      #line 215 
      break;
      #line 215 
      case (unsigned long)2: 
                             #line 215 
      ;
      #line 215 
      switch (4UL) {
        #line 215 
        case (unsigned long)1: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)2: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)4: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)8: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        default: 
                 #line 215 
        ;
        #line 215 
        __bad_percpu_size();
      }
      #line 215 
      pscr_ret__ = pfo_ret___0;
      #line 215 
      break;
      #line 215 
      case (unsigned long)4: 
                             #line 215 
      ;
      #line 215 
      switch (4UL) {
        #line 215 
        case (unsigned long)1: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)2: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)4: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)8: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        default: 
                 #line 215 
        ;
        #line 215 
        __bad_percpu_size();
      }
      #line 215 
      pscr_ret__ = pfo_ret___1;
      #line 215 
      break;
      #line 215 
      case (unsigned long)8: 
                             #line 215 
      ;
      #line 215 
      switch (4UL) {
        #line 215 
        case (unsigned long)1: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)2: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)4: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        case (unsigned long)8: 
                               #line 215 
        ;
        #line 216 
        ldv_inline_asm();
        #line 215 
        break;
        #line 215 
        default: 
                 #line 215 
        ;
        #line 215 
        __bad_percpu_size();
      }
      #line 215 
      pscr_ret__ = pfo_ret___2;
      #line 215 
      break;
      #line 215 
      default: 
               #line 215 
      ;
      #line 215 
      __bad_size_call_parameter();
      #line 215 
      break;
    }
    #line 215 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 215 
                                                               return;
    {
      #line 215 
      int __ret_warn_on = 0;
      #line 215 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 216 
        ldv_inline_asm();
        #line 217 
        ldv_inline_asm();
      }
      #line 215 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 215 
    __preempt_count_add(1);
    #line 216 
    ldv_inline_asm();
    {
      #line 216 
      union __anonunion___u_6398 __u;
      #line 215 
      __read_once_size((void *)(& __tracepoint_temp_mode.funcs),(void *)(& __u.__c),8);
      #line 215 
      ________p1 = (__u.__val);
      }
    #line 215 
    it_func_ptr = ________p1;
    #line 215 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 215 
      while (1) {
        #line 215 
        it_func = it_func_ptr->func;
        #line 215 
        __data = it_func_ptr->data;
        #line 215 
        (*((void (*)(void *, struct mt7601u_dev *, u8 ))it_func))(__data,dev,(unsigned char)((int)val));
        #line 215 
        it_func_ptr ++;
        #line 216 
        ;
        #line 216 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 215 
                                                break;
      }
    #line 217 
    ldv_inline_asm();
    #line 215 
    __preempt_count_sub(1);
  }
  {
    #line 215 
    void *__vpp_verify_0 = (void *)0;
    #line 215 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 215 
  switch (4UL) {
    #line 215 
    int pfo_ret___3;
    #line 215 
    int pfo_ret___4;
    #line 215 
    int pfo_ret___5;
    #line 215 
    int pfo_ret___6;
    #line 215 
    case (unsigned long)1: 
                           #line 215 
    ;
    #line 215 
    switch (4UL) {
      #line 215 
      case (unsigned long)1: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)2: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)4: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)8: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      default: 
               #line 215 
      ;
      #line 215 
      __bad_percpu_size();
    }
    #line 215 
    pscr_ret___0 = pfo_ret___3;
    #line 215 
    break;
    #line 215 
    case (unsigned long)2: 
                           #line 215 
    ;
    #line 215 
    switch (4UL) {
      #line 215 
      case (unsigned long)1: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)2: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)4: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)8: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      default: 
               #line 215 
      ;
      #line 215 
      __bad_percpu_size();
    }
    #line 215 
    pscr_ret___0 = pfo_ret___4;
    #line 215 
    break;
    #line 215 
    case (unsigned long)4: 
                           #line 215 
    ;
    #line 215 
    switch (4UL) {
      #line 215 
      case (unsigned long)1: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)2: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)4: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)8: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      default: 
               #line 215 
      ;
      #line 215 
      __bad_percpu_size();
    }
    #line 215 
    pscr_ret___0 = pfo_ret___5;
    #line 215 
    break;
    #line 215 
    case (unsigned long)8: 
                           #line 215 
    ;
    #line 215 
    switch (4UL) {
      #line 215 
      case (unsigned long)1: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)2: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)4: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      case (unsigned long)8: 
                             #line 215 
      ;
      #line 216 
      ldv_inline_asm();
      #line 215 
      break;
      #line 215 
      default: 
               #line 215 
      ;
      #line 215 
      __bad_percpu_size();
    }
    #line 215 
    pscr_ret___0 = pfo_ret___6;
    #line 215 
    break;
    #line 215 
    default: 
             #line 215 
    ;
    #line 215 
    __bad_size_call_parameter();
    #line 215 
    break;
  }
  #line 215 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 215 
    rcu_read_lock_sched_notrace();
    {
      #line 216 
      union __anonunion___u_6400 __u_0;
      #line 215 
      __read_once_size((void *)(& __tracepoint_temp_mode.funcs),(void *)(& __u_0.__c),8);
      #line 215 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 215 
        bool __warned;
        #line 215 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 215 
          if (! __warned) {
            #line 215 
            if (rcu_read_lock_sched_held() == 0) {
              #line 215 
              __warned = (_Bool)1;
              #line 215 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",215,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 215 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 215 
    rcu_read_unlock_sched_notrace();
  }
  #line 217 
  return;
}

#line 220 
#line 220 
struct tracepoint __tracepoint_read_temp;
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_read_temp(struct mt7601u_dev *dev, u8 val)
{
  #line 220 
  int pscr_ret___0;
  #line 220 
  if ((int)static_key_false(& __tracepoint_read_temp.key) != 0) {
    #line 220 
    int pscr_ret__;
    #line 220 
    struct tracepoint_func *________p1;
    #line 220 
    struct tracepoint_func *it_func_ptr;
    #line 220 
    void *it_func;
    #line 220 
    void *__data;
    #line 220 
    int __idx = 0;
    {
      #line 220 
      void *__vpp_verify = (void *)0;
      #line 220 
      void *tmp = __vpp_verify;
    }
    #line 220 
    switch (4UL) {
      #line 220 
      int pfo_ret__;
      #line 220 
      int pfo_ret___0;
      #line 220 
      int pfo_ret___1;
      #line 220 
      int pfo_ret___2;
      #line 220 
      case (unsigned long)1: 
                             #line 220 
      ;
      #line 220 
      switch (4UL) {
        #line 220 
        case (unsigned long)1: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)2: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)4: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)8: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        default: 
                 #line 220 
        ;
        #line 220 
        __bad_percpu_size();
      }
      #line 220 
      pscr_ret__ = pfo_ret__;
      #line 220 
      break;
      #line 220 
      case (unsigned long)2: 
                             #line 220 
      ;
      #line 220 
      switch (4UL) {
        #line 220 
        case (unsigned long)1: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)2: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)4: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)8: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        default: 
                 #line 220 
        ;
        #line 220 
        __bad_percpu_size();
      }
      #line 220 
      pscr_ret__ = pfo_ret___0;
      #line 220 
      break;
      #line 220 
      case (unsigned long)4: 
                             #line 220 
      ;
      #line 220 
      switch (4UL) {
        #line 220 
        case (unsigned long)1: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)2: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)4: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)8: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        default: 
                 #line 220 
        ;
        #line 220 
        __bad_percpu_size();
      }
      #line 220 
      pscr_ret__ = pfo_ret___1;
      #line 220 
      break;
      #line 220 
      case (unsigned long)8: 
                             #line 220 
      ;
      #line 220 
      switch (4UL) {
        #line 220 
        case (unsigned long)1: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)2: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)4: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        case (unsigned long)8: 
                               #line 220 
        ;
        #line 221 
        ldv_inline_asm();
        #line 220 
        break;
        #line 220 
        default: 
                 #line 220 
        ;
        #line 220 
        __bad_percpu_size();
      }
      #line 220 
      pscr_ret__ = pfo_ret___2;
      #line 220 
      break;
      #line 220 
      default: 
               #line 220 
      ;
      #line 220 
      __bad_size_call_parameter();
      #line 220 
      break;
    }
    #line 220 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 220 
                                                               return;
    {
      #line 220 
      int __ret_warn_on = 0;
      #line 220 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 221 
        ldv_inline_asm();
        #line 222 
        ldv_inline_asm();
      }
      #line 220 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 220 
    __preempt_count_add(1);
    #line 221 
    ldv_inline_asm();
    {
      #line 221 
      union __anonunion___u_6402 __u;
      #line 220 
      __read_once_size((void *)(& __tracepoint_read_temp.funcs),(void *)(& __u.__c),8);
      #line 220 
      ________p1 = (__u.__val);
      }
    #line 220 
    it_func_ptr = ________p1;
    #line 220 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 220 
      while (1) {
        #line 220 
        it_func = it_func_ptr->func;
        #line 220 
        __data = it_func_ptr->data;
        #line 220 
        (*((void (*)(void *, struct mt7601u_dev *, u8 ))it_func))(__data,dev,(unsigned char)((int)val));
        #line 220 
        it_func_ptr ++;
        #line 221 
        ;
        #line 221 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 220 
                                                break;
      }
    #line 222 
    ldv_inline_asm();
    #line 220 
    __preempt_count_sub(1);
  }
  {
    #line 220 
    void *__vpp_verify_0 = (void *)0;
    #line 220 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 220 
  switch (4UL) {
    #line 220 
    int pfo_ret___5;
    #line 220 
    int pfo_ret___6;
    #line 220 
    int pfo_ret___3;
    #line 220 
    int pfo_ret___4;
    #line 220 
    case (unsigned long)1: 
                           #line 220 
    ;
    #line 220 
    switch (4UL) {
      #line 220 
      case (unsigned long)1: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)2: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)4: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)8: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      default: 
               #line 220 
      ;
      #line 220 
      __bad_percpu_size();
    }
    #line 220 
    pscr_ret___0 = pfo_ret___3;
    #line 220 
    break;
    #line 220 
    case (unsigned long)2: 
                           #line 220 
    ;
    #line 220 
    switch (4UL) {
      #line 220 
      case (unsigned long)1: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)2: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)4: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)8: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      default: 
               #line 220 
      ;
      #line 220 
      __bad_percpu_size();
    }
    #line 220 
    pscr_ret___0 = pfo_ret___4;
    #line 220 
    break;
    #line 220 
    case (unsigned long)4: 
                           #line 220 
    ;
    #line 220 
    switch (4UL) {
      #line 220 
      case (unsigned long)1: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)2: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)4: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)8: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      default: 
               #line 220 
      ;
      #line 220 
      __bad_percpu_size();
    }
    #line 220 
    pscr_ret___0 = pfo_ret___5;
    #line 220 
    break;
    #line 220 
    case (unsigned long)8: 
                           #line 220 
    ;
    #line 220 
    switch (4UL) {
      #line 220 
      case (unsigned long)1: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)2: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)4: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      case (unsigned long)8: 
                             #line 220 
      ;
      #line 221 
      ldv_inline_asm();
      #line 220 
      break;
      #line 220 
      default: 
               #line 220 
      ;
      #line 220 
      __bad_percpu_size();
    }
    #line 220 
    pscr_ret___0 = pfo_ret___6;
    #line 220 
    break;
    #line 220 
    default: 
             #line 220 
    ;
    #line 220 
    __bad_size_call_parameter();
    #line 220 
    break;
  }
  #line 220 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 220 
    rcu_read_lock_sched_notrace();
    {
      #line 221 
      union __anonunion___u_6404 __u_0;
      #line 220 
      __read_once_size((void *)(& __tracepoint_read_temp.funcs),(void *)(& __u_0.__c),8);
      #line 220 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 220 
        bool __warned;
        #line 220 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 220 
          if (! __warned) {
            #line 220 
            if (rcu_read_lock_sched_held() == 0) {
              #line 220 
              __warned = (_Bool)1;
              #line 220 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",220,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 220 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 220 
    rcu_read_unlock_sched_notrace();
  }
  #line 222 
  return;
}

#line 225 
#line 225 
struct tracepoint __tracepoint_freq_cal_adjust;
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_freq_cal_adjust(struct mt7601u_dev *dev, u8 val)
{
  #line 225 
  int pscr_ret___0;
  #line 225 
  if ((int)static_key_false(& __tracepoint_freq_cal_adjust.key) != 0) {
    #line 225 
    int pscr_ret__;
    #line 225 
    struct tracepoint_func *________p1;
    #line 225 
    struct tracepoint_func *it_func_ptr;
    #line 225 
    void *it_func;
    #line 225 
    void *__data;
    #line 225 
    int __idx = 0;
    {
      #line 225 
      void *__vpp_verify = (void *)0;
      #line 225 
      void *tmp = __vpp_verify;
    }
    #line 225 
    switch (4UL) {
      #line 225 
      int pfo_ret___1;
      #line 225 
      int pfo_ret___2;
      #line 225 
      int pfo_ret__;
      #line 225 
      int pfo_ret___0;
      #line 225 
      case (unsigned long)1: 
                             #line 225 
      ;
      #line 225 
      switch (4UL) {
        #line 225 
        case (unsigned long)1: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)2: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)4: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)8: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        default: 
                 #line 225 
        ;
        #line 225 
        __bad_percpu_size();
      }
      #line 225 
      pscr_ret__ = pfo_ret__;
      #line 225 
      break;
      #line 225 
      case (unsigned long)2: 
                             #line 225 
      ;
      #line 225 
      switch (4UL) {
        #line 225 
        case (unsigned long)1: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)2: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)4: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)8: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        default: 
                 #line 225 
        ;
        #line 225 
        __bad_percpu_size();
      }
      #line 225 
      pscr_ret__ = pfo_ret___0;
      #line 225 
      break;
      #line 225 
      case (unsigned long)4: 
                             #line 225 
      ;
      #line 225 
      switch (4UL) {
        #line 225 
        case (unsigned long)1: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)2: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)4: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)8: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        default: 
                 #line 225 
        ;
        #line 225 
        __bad_percpu_size();
      }
      #line 225 
      pscr_ret__ = pfo_ret___1;
      #line 225 
      break;
      #line 225 
      case (unsigned long)8: 
                             #line 225 
      ;
      #line 225 
      switch (4UL) {
        #line 225 
        case (unsigned long)1: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)2: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)4: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        case (unsigned long)8: 
                               #line 225 
        ;
        #line 226 
        ldv_inline_asm();
        #line 225 
        break;
        #line 225 
        default: 
                 #line 225 
        ;
        #line 225 
        __bad_percpu_size();
      }
      #line 225 
      pscr_ret__ = pfo_ret___2;
      #line 225 
      break;
      #line 225 
      default: 
               #line 225 
      ;
      #line 225 
      __bad_size_call_parameter();
      #line 225 
      break;
    }
    #line 225 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 225 
                                                               return;
    {
      #line 225 
      int __ret_warn_on = 0;
      #line 225 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 226 
        ldv_inline_asm();
        #line 227 
        ldv_inline_asm();
      }
      #line 225 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 225 
    __preempt_count_add(1);
    #line 226 
    ldv_inline_asm();
    {
      #line 226 
      union __anonunion___u_6406 __u;
      #line 225 
      __read_once_size((void *)(& __tracepoint_freq_cal_adjust.funcs),(void *)(& __u.__c),8);
      #line 225 
      ________p1 = (__u.__val);
      }
    #line 225 
    it_func_ptr = ________p1;
    #line 225 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 225 
      while (1) {
        #line 225 
        it_func = it_func_ptr->func;
        #line 225 
        __data = it_func_ptr->data;
        #line 225 
        (*((void (*)(void *, struct mt7601u_dev *, u8 ))it_func))(__data,dev,(unsigned char)((int)val));
        #line 225 
        it_func_ptr ++;
        #line 226 
        ;
        #line 226 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 225 
                                                break;
      }
    #line 227 
    ldv_inline_asm();
    #line 225 
    __preempt_count_sub(1);
  }
  {
    #line 225 
    void *__vpp_verify_0 = (void *)0;
    #line 225 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 225 
  switch (4UL) {
    #line 225 
    int pfo_ret___3;
    #line 225 
    int pfo_ret___4;
    #line 225 
    int pfo_ret___5;
    #line 225 
    int pfo_ret___6;
    #line 225 
    case (unsigned long)1: 
                           #line 225 
    ;
    #line 225 
    switch (4UL) {
      #line 225 
      case (unsigned long)1: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)2: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)4: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)8: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      default: 
               #line 225 
      ;
      #line 225 
      __bad_percpu_size();
    }
    #line 225 
    pscr_ret___0 = pfo_ret___3;
    #line 225 
    break;
    #line 225 
    case (unsigned long)2: 
                           #line 225 
    ;
    #line 225 
    switch (4UL) {
      #line 225 
      case (unsigned long)1: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)2: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)4: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)8: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      default: 
               #line 225 
      ;
      #line 225 
      __bad_percpu_size();
    }
    #line 225 
    pscr_ret___0 = pfo_ret___4;
    #line 225 
    break;
    #line 225 
    case (unsigned long)4: 
                           #line 225 
    ;
    #line 225 
    switch (4UL) {
      #line 225 
      case (unsigned long)1: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)2: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)4: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)8: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      default: 
               #line 225 
      ;
      #line 225 
      __bad_percpu_size();
    }
    #line 225 
    pscr_ret___0 = pfo_ret___5;
    #line 225 
    break;
    #line 225 
    case (unsigned long)8: 
                           #line 225 
    ;
    #line 225 
    switch (4UL) {
      #line 225 
      case (unsigned long)1: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)2: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)4: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      case (unsigned long)8: 
                             #line 225 
      ;
      #line 226 
      ldv_inline_asm();
      #line 225 
      break;
      #line 225 
      default: 
               #line 225 
      ;
      #line 225 
      __bad_percpu_size();
    }
    #line 225 
    pscr_ret___0 = pfo_ret___6;
    #line 225 
    break;
    #line 225 
    default: 
             #line 225 
    ;
    #line 225 
    __bad_size_call_parameter();
    #line 225 
    break;
  }
  #line 225 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 225 
    rcu_read_lock_sched_notrace();
    {
      #line 226 
      union __anonunion___u_6408 __u_0;
      #line 225 
      __read_once_size((void *)(& __tracepoint_freq_cal_adjust.funcs),(void *)(& __u_0.__c),8);
      #line 225 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 225 
        bool __warned;
        #line 225 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 225 
          if (! __warned) {
            #line 225 
            if (rcu_read_lock_sched_held() == 0) {
              #line 225 
              __warned = (_Bool)1;
              #line 225 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",225,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 225 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 225 
    rcu_read_unlock_sched_notrace();
  }
  #line 227 
  return;
}

#line 230 
#line 230 
struct tracepoint __tracepoint_freq_cal_offset;
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_freq_cal_offset(struct mt7601u_dev *dev, u8 phy_mode, s8 freq_off)
{
  #line 230 
  int pscr_ret___0;
  #line 230 
  if ((int)static_key_false(& __tracepoint_freq_cal_offset.key) != 0) {
    #line 230 
    int pscr_ret__;
    #line 230 
    struct tracepoint_func *________p1;
    #line 230 
    struct tracepoint_func *it_func_ptr;
    #line 230 
    void *it_func;
    #line 230 
    void *__data;
    #line 230 
    int __idx = 0;
    {
      #line 230 
      void *__vpp_verify = (void *)0;
      #line 230 
      void *tmp = __vpp_verify;
    }
    #line 230 
    switch (4UL) {
      #line 230 
      int pfo_ret___2;
      #line 230 
      int pfo_ret__;
      #line 230 
      int pfo_ret___0;
      #line 230 
      int pfo_ret___1;
      #line 230 
      case (unsigned long)1: 
                             #line 230 
      ;
      #line 230 
      switch (4UL) {
        #line 230 
        case (unsigned long)1: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)2: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)4: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)8: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        default: 
                 #line 230 
        ;
        #line 230 
        __bad_percpu_size();
      }
      #line 230 
      pscr_ret__ = pfo_ret__;
      #line 230 
      break;
      #line 230 
      case (unsigned long)2: 
                             #line 230 
      ;
      #line 230 
      switch (4UL) {
        #line 230 
        case (unsigned long)1: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)2: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)4: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)8: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        default: 
                 #line 230 
        ;
        #line 230 
        __bad_percpu_size();
      }
      #line 230 
      pscr_ret__ = pfo_ret___0;
      #line 230 
      break;
      #line 230 
      case (unsigned long)4: 
                             #line 230 
      ;
      #line 230 
      switch (4UL) {
        #line 230 
        case (unsigned long)1: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)2: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)4: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)8: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        default: 
                 #line 230 
        ;
        #line 230 
        __bad_percpu_size();
      }
      #line 230 
      pscr_ret__ = pfo_ret___1;
      #line 230 
      break;
      #line 230 
      case (unsigned long)8: 
                             #line 230 
      ;
      #line 230 
      switch (4UL) {
        #line 230 
        case (unsigned long)1: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)2: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)4: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        case (unsigned long)8: 
                               #line 230 
        ;
        #line 231 
        ldv_inline_asm();
        #line 230 
        break;
        #line 230 
        default: 
                 #line 230 
        ;
        #line 230 
        __bad_percpu_size();
      }
      #line 230 
      pscr_ret__ = pfo_ret___2;
      #line 230 
      break;
      #line 230 
      default: 
               #line 230 
      ;
      #line 230 
      __bad_size_call_parameter();
      #line 230 
      break;
    }
    #line 230 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 230 
                                                               return;
    {
      #line 230 
      int __ret_warn_on = 0;
      #line 230 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 231 
        ldv_inline_asm();
        #line 232 
        ldv_inline_asm();
      }
      #line 230 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 230 
    __preempt_count_add(1);
    #line 231 
    ldv_inline_asm();
    {
      #line 231 
      union __anonunion___u_6410 __u;
      #line 230 
      __read_once_size((void *)(& __tracepoint_freq_cal_offset.funcs),(void *)(& __u.__c),8);
      #line 230 
      ________p1 = (__u.__val);
      }
    #line 230 
    it_func_ptr = ________p1;
    #line 230 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 230 
      while (1) {
        #line 230 
        it_func = it_func_ptr->func;
        #line 230 
        __data = it_func_ptr->data;
        #line 230 
        (*((void (*)(void *, struct mt7601u_dev *, u8 , s8 ))it_func))(__data,dev,(unsigned char)((int)phy_mode),(signed char)((int)freq_off));
        #line 230 
        it_func_ptr ++;
        #line 231 
        ;
        #line 231 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 230 
                                                break;
      }
    #line 232 
    ldv_inline_asm();
    #line 230 
    __preempt_count_sub(1);
  }
  {
    #line 230 
    void *__vpp_verify_0 = (void *)0;
    #line 230 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 230 
  switch (4UL) {
    #line 230 
    int pfo_ret___3;
    #line 230 
    int pfo_ret___4;
    #line 230 
    int pfo_ret___5;
    #line 230 
    int pfo_ret___6;
    #line 230 
    case (unsigned long)1: 
                           #line 230 
    ;
    #line 230 
    switch (4UL) {
      #line 230 
      case (unsigned long)1: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)2: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)4: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)8: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      default: 
               #line 230 
      ;
      #line 230 
      __bad_percpu_size();
    }
    #line 230 
    pscr_ret___0 = pfo_ret___3;
    #line 230 
    break;
    #line 230 
    case (unsigned long)2: 
                           #line 230 
    ;
    #line 230 
    switch (4UL) {
      #line 230 
      case (unsigned long)1: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)2: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)4: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)8: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      default: 
               #line 230 
      ;
      #line 230 
      __bad_percpu_size();
    }
    #line 230 
    pscr_ret___0 = pfo_ret___4;
    #line 230 
    break;
    #line 230 
    case (unsigned long)4: 
                           #line 230 
    ;
    #line 230 
    switch (4UL) {
      #line 230 
      case (unsigned long)1: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)2: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)4: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)8: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      default: 
               #line 230 
      ;
      #line 230 
      __bad_percpu_size();
    }
    #line 230 
    pscr_ret___0 = pfo_ret___5;
    #line 230 
    break;
    #line 230 
    case (unsigned long)8: 
                           #line 230 
    ;
    #line 230 
    switch (4UL) {
      #line 230 
      case (unsigned long)1: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)2: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)4: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      case (unsigned long)8: 
                             #line 230 
      ;
      #line 231 
      ldv_inline_asm();
      #line 230 
      break;
      #line 230 
      default: 
               #line 230 
      ;
      #line 230 
      __bad_percpu_size();
    }
    #line 230 
    pscr_ret___0 = pfo_ret___6;
    #line 230 
    break;
    #line 230 
    default: 
             #line 230 
    ;
    #line 230 
    __bad_size_call_parameter();
    #line 230 
    break;
  }
  #line 230 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 230 
    rcu_read_lock_sched_notrace();
    {
      #line 231 
      union __anonunion___u_6412 __u_0;
      #line 230 
      __read_once_size((void *)(& __tracepoint_freq_cal_offset.funcs),(void *)(& __u_0.__c),8);
      #line 230 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 230 
        bool __warned;
        #line 230 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 230 
          if (! __warned) {
            #line 230 
            if (rcu_read_lock_sched_held() == 0) {
              #line 230 
              __warned = (_Bool)1;
              #line 230 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",230,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 230 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 230 
    rcu_read_unlock_sched_notrace();
  }
  #line 232 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair rf_central[44U] = {{.reg = 2147483648U, .value = 2U}, {.reg = 2147483649U, .value = 1U}, {.reg = 2147483650U, .value = 17U}, {.reg = 2147483651U, .value = 255U}, {.reg = 2147483652U, .value = 10U}, {.reg = 2147483653U, .value = 32U}, {.reg = 2147483654U}, {.reg = 2147483655U}, {.reg = 2147483656U}, {.reg = 2147483657U}, {.reg = 2147483658U}, {.reg = 2147483659U, .value = 33U}, {.reg = 2147483661U}, {.reg = 2147483662U, .value = 124U}, {.reg = 2147483663U, .value = 34U}, {.reg = 2147483664U, .value = 128U}, {.reg = 2147483665U, .value = 153U}, {.reg = 2147483666U, .value = 153U}, {.reg = 2147483667U, .value = 9U}, {.reg = 2147483668U, .value = 80U}, {.reg = 2147483669U, .value = 176U}, {.reg = 2147483670U}, {.reg = 2147483671U, .value = 197U}, {.reg = 2147483672U, .value = 252U}, {.reg = 2147483673U, .value = 64U}, {.reg = 2147483674U, .value = 77U}, {.reg = 2147483675U, .value = 2U}, {.reg = 2147483676U, .value = 114U}, {.reg = 2147483677U, .value = 1U}, {.reg = 2147483678U}, {.reg = 2147483679U}, {.reg = 2147483680U}, {.reg = 2147483681U}, {.reg = 2147483682U, .value = 35U}, {.reg = 2147483683U, .value = 1U}, {.reg = 2147483684U}, {.reg = 2147483685U}, {.reg = 2147483686U}, {.reg = 2147483687U, .value = 32U}, {.reg = 2147483688U}, {.reg = 2147483689U, .value = 208U}, {.reg = 2147483690U, .value = 27U}, {.reg = 2147483691U, .value = 2U}, {.reg = 2147483692U}};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair rf_channel[60U] = {{.reg = 2147745792U, .value = 1U}, {.reg = 2147745793U}, {.reg = 2147745794U}, {.reg = 2147745795U}, {.reg = 2147745796U}, {.reg = 2147745797U, .value = 8U}, {.reg = 2147745798U}, {.reg = 2147745799U, .value = 91U}, {.reg = 2147745800U, .value = 82U}, {.reg = 2147745801U, .value = 182U}, {.reg = 2147745802U, .value = 87U}, {.reg = 2147745803U, .value = 51U}, {.reg = 2147745804U, .value = 34U}, {.reg = 2147745805U, .value = 61U}, {.reg = 2147745806U, .value = 62U}, {.reg = 2147745807U, .value = 19U}, {.reg = 2147745808U, .value = 34U}, {.reg = 2147745809U, .value = 35U}, {.reg = 2147745810U, .value = 2U}, {.reg = 2147745811U, .value = 164U}, {.reg = 2147745812U, .value = 1U}, {.reg = 2147745813U, .value = 18U}, {.reg = 2147745814U, .value = 128U}, {.reg = 2147745815U, .value = 179U}, {.reg = 2147745816U}, {.reg = 2147745817U}, {.reg = 2147745818U}, {.reg = 2147745819U}, {.reg = 2147745820U, .value = 24U}, {.reg = 2147745821U, .value = 238U}, {.reg = 2147745822U, .value = 107U}, {.reg = 2147745823U, .value = 49U}, {.reg = 2147745824U, .value = 93U}, {.reg = 2147745825U}, {.reg = 2147745826U, .value = 150U}, {.reg = 2147745827U, .value = 85U}, {.reg = 2147745828U, .value = 8U}, {.reg = 2147745829U, .value = 187U}, {.reg = 2147745830U, .value = 179U}, {.reg = 2147745831U, .value = 179U}, {.reg = 2147745832U, .value = 3U}, {.reg = 2147745833U}, {.reg = 2147745834U}, {.reg = 2147745835U, .value = 197U}, {.reg = 2147745836U, .value = 197U}, {.reg = 2147745837U, .value = 197U}, {.reg = 2147745838U, .value = 7U}, {.reg = 2147745839U, .value = 168U}, {.reg = 2147745840U, .value = 239U}, {.reg = 2147745841U, .value = 26U}, {.reg = 2147745846U, .value = 7U}, {.reg = 2147745847U, .value = 167U}, {.reg = 2147745848U, .value = 204U}, {.reg = 2147745849U, .value = 20U}, {.reg = 2147745850U, .value = 7U}, {.reg = 2147745851U, .value = 168U}, {.reg = 2147745852U, .value = 215U}, {.reg = 2147745853U, .value = 16U}, {.reg = 2147745854U, .value = 28U}, {.reg = 2147745855U}};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair rf_vga[59U] = {{.reg = 2147811328U, .value = 71U}, {.reg = 2147811329U}, {.reg = 2147811330U}, {.reg = 2147811331U, .value = 8U}, {.reg = 2147811332U, .value = 4U}, {.reg = 2147811333U, .value = 32U}, {.reg = 2147811334U, .value = 58U}, {.reg = 2147811335U, .value = 58U}, {.reg = 2147811336U}, {.reg = 2147811337U}, {.reg = 2147811338U, .value = 16U}, {.reg = 2147811339U, .value = 16U}, {.reg = 2147811340U, .value = 16U}, {.reg = 2147811341U, .value = 16U}, {.reg = 2147811342U, .value = 16U}, {.reg = 2147811343U, .value = 32U}, {.reg = 2147811344U, .value = 34U}, {.reg = 2147811345U, .value = 124U}, {.reg = 2147811346U}, {.reg = 2147811347U}, {.reg = 2147811348U}, {.reg = 2147811349U, .value = 241U}, {.reg = 2147811350U, .value = 17U}, {.reg = 2147811351U, .value = 2U}, {.reg = 2147811352U, .value = 65U}, {.reg = 2147811353U, .value = 32U}, {.reg = 2147811354U}, {.reg = 2147811355U, .value = 215U}, {.reg = 2147811356U, .value = 162U}, {.reg = 2147811357U, .value = 32U}, {.reg = 2147811358U, .value = 73U}, {.reg = 2147811359U, .value = 32U}, {.reg = 2147811360U, .value = 4U}, {.reg = 2147811361U, .value = 241U}, {.reg = 2147811362U, .value = 161U}, {.reg = 2147811363U, .value = 1U}, {.reg = 2147811369U}, {.reg = 2147811370U}, {.reg = 2147811371U}, {.reg = 2147811372U}, {.reg = 2147811373U}, {.reg = 2147811374U}, {.reg = 2147811375U}, {.reg = 2147811376U}, {.reg = 2147811377U}, {.reg = 2147811378U}, {.reg = 2147811379U}, {.reg = 2147811380U}, {.reg = 2147811381U}, {.reg = 2147811382U}, {.reg = 2147811383U}, {.reg = 2147811384U}, {.reg = 2147811385U}, {.reg = 2147811386U, .value = 49U}, {.reg = 2147811387U, .value = 49U}, {.reg = 2147811388U, .value = 10U}, {.reg = 2147811389U, .value = 2U}, {.reg = 2147811390U}, {.reg = 2147811391U}};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_high_temp[5U] = {{.reg = 75U, .value = 96U}, {.reg = 92U, .value = 2U}, {.reg = 178U, .value = 255U}, {.reg = 195U, .value = 136U}, {.reg = 196U, .value = 96U}};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_high_temp_bw20[10U] = {{.reg = 69U, .value = 18U}, {.reg = 91U, .value = 7U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 18U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 23U}};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_high_temp_bw40[10U] = {{.reg = 69U, .value = 21U}, {.reg = 91U, .value = 4U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 18U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 8U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 21U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 22U}};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_low_temp[1U] = {{.reg = 178U, .value = 255U}};
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_low_temp_bw20[14U] = {{.reg = 69U, .value = 18U}, {.reg = 75U, .value = 94U}, {.reg = 91U, .value = 7U}, {.reg = 92U, .value = 2U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 18U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 136U}, {.reg = 196U, .value = 94U}};
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_low_temp_bw40[14U] = {{.reg = 69U, .value = 21U}, {.reg = 75U, .value = 92U}, {.reg = 91U, .value = 4U}, {.reg = 92U, .value = 3U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 16U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 8U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 21U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 22U}, {.reg = 195U, .value = 136U}, {.reg = 196U, .value = 91U}};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_normal_temp[5U] = {{.reg = 75U, .value = 96U}, {.reg = 92U, .value = 2U}, {.reg = 178U, .value = 255U}, {.reg = 195U, .value = 136U}, {.reg = 196U, .value = 96U}};
#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_normal_temp_bw20[10U] = {{.reg = 69U, .value = 18U}, {.reg = 91U, .value = 7U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 18U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 23U}};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct mt76_reg_pair bbp_normal_temp_bw40[10U] = {{.reg = 69U, .value = 21U}, {.reg = 91U, .value = 4U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 18U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 8U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 21U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 22U}};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals_phy.h"
static struct reg_table bbp_mode_table[3U][3U] = {{{.regs = (struct mt76_reg_pair *)(& bbp_normal_temp_bw20), .n = 10UL}, {.regs = (struct mt76_reg_pair *)(& bbp_normal_temp_bw40), .n = 10UL}, {.regs = (struct mt76_reg_pair *)(& bbp_normal_temp), .n = 5UL}}, {{.regs = (struct mt76_reg_pair *)(& bbp_high_temp_bw20), .n = 10UL}, {.regs = (struct mt76_reg_pair *)(& bbp_high_temp_bw40), .n = 10UL}, {.regs = (struct mt76_reg_pair *)(& bbp_high_temp), .n = 5UL}}, {{.regs = (struct mt76_reg_pair *)(& bbp_low_temp_bw20), .n = 14UL}, {.regs = (struct mt76_reg_pair *)(& bbp_low_temp_bw40), .n = 14UL}, {.regs = (struct mt76_reg_pair *)(& bbp_low_temp), .n = 1UL}}};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
#line 950 
static void mt7601u_agc_reset(struct mt7601u_dev *dev);
#line 37 
#line 37 
void __compiletime_assert_37(void);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_rf_wr(struct mt7601u_dev *dev, u8 bank, u8 offset, u8 value)
{
  #line 23 
  int __ret_warn_on;
  #line 21 
  int ret = 0;
  {
    #line 23 
    int tmp_0;
    #line 23 
    if (test_bit(2L,& dev->state)) 
                                   #line 23 
                                   tmp_0 = 0; else 
                                                   #line 23 
                                                   tmp_0 = 1;
    #line 23 
    __ret_warn_on = tmp_0;
    #line 23 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 24 
      ldv_inline_asm();
      #line 25 
      ldv_inline_asm();
    }
    }
  #line 23 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 25 
                                                return -22;
  else {
    #line 24 
    int __ret_warn_on_0;
    #line 24 
    __ret_warn_on_0 = (unsigned int)offset > 63U;
    #line 24 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 25 
      ldv_inline_asm();
      #line 26 
      ldv_inline_asm();
    }
    #line 23 
    if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                    #line 25 
                                                    return -22;
  }
  #line 26 
  if ((int)test_bit(1L,& dev->state) != 0) 
                                           #line 27 
                                           return 0;
  #line 29 
  cif_mutex_lock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 31 
  if (! mt76_poll(dev,1280U,2147483648U,0U,100)) {
    #line 32 
    ret = -110;
    #line 33 
    goto out;
  }
  #line 37 
  if (0 != 0 && ((unsigned long)value & 18446744073709551360UL) != 0UL) 
    #line 37 
    __compiletime_assert_37();
  #line 38 
  if (0 != 0 && ((unsigned long)bank & 18446744073709551600UL) != 0UL) 
    #line 38 
    __compiletime_assert_38();
  #line 39 
  if (0 != 0 && ((unsigned long)offset & 18446744073709551552UL) != 0UL) 
    #line 39 
    __compiletime_assert_39();
  #line 36 
  ;
  #line 36 
  mt7601u_wr(dev,1280U,(((unsigned int)((unsigned long)value) | (unsigned int)(((unsigned long)bank << 14) & 245760UL)) | (unsigned int)(((unsigned long)offset << 8) & 16128UL)) | 3221225472U);
  #line 42 
  trace_rf_write(dev,(unsigned char)((int)bank),(unsigned char)((int)offset),(unsigned char)((int)value));
  #line 43 
  out: 
       #line 43 
  ;
  #line 44 
  cif_mutex_unlock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 46 
  if (ret < 0) 
               #line 47 
               _dev_err(dev->dev,(char *)"Error: RF write %02hhx:%02hhx failed:%d!!\n",(int)bank,(int)offset,ret);
  #line 50 
  return ret;
}

#line 71 
#line 71 
void __compiletime_assert_71(void);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_rf_rr(struct mt7601u_dev *dev, u8 bank, u8 offset)
{
  #line 59 
  int __ret_warn_on;
  #line 57 
  u32 val;
  #line 56 
  int ret = -110;
  {
    #line 59 
    int tmp_0;
    #line 59 
    if (test_bit(2L,& dev->state)) 
                                   #line 59 
                                   tmp_0 = 0; else 
                                                   #line 59 
                                                   tmp_0 = 1;
    #line 59 
    __ret_warn_on = tmp_0;
    #line 59 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 60 
      ldv_inline_asm();
      #line 61 
      ldv_inline_asm();
    }
    }
  #line 59 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 61 
                                                return -22;
  else {
    #line 60 
    int __ret_warn_on_0;
    #line 60 
    __ret_warn_on_0 = (unsigned int)offset > 63U;
    #line 60 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 61 
      ldv_inline_asm();
      #line 62 
      ldv_inline_asm();
    }
    #line 59 
    if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                    #line 61 
                                                    return -22;
  }
  #line 62 
  if ((int)test_bit(1L,& dev->state) != 0) 
                                           #line 63 
                                           return 255;
  #line 65 
  cif_mutex_lock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 67 
  if (! mt76_poll(dev,1280U,2147483648U,0U,100)) 
                                                 #line 68 
                                                 goto out;
  #line 71 
  if (0 != 0 && ((unsigned long)bank & 18446744073709551600UL) != 0UL) 
    #line 71 
    __compiletime_assert_71();
  #line 72 
  if (0 != 0 && ((unsigned long)offset & 18446744073709551552UL) != 0UL) 
    #line 72 
    __compiletime_assert_72();
  #line 70 
  ;
  #line 70 
  mt7601u_wr(dev,1280U,((unsigned int)(((unsigned long)bank << 14) & 245760UL) | (unsigned int)(((unsigned long)offset << 8) & 16128UL)) | 2147483648U);
  #line 75 
  if (! mt76_poll(dev,1280U,2147483648U,0U,100)) 
                                                 #line 76 
                                                 goto out;
  #line 78 
  val = mt7601u_rr(dev,1280U);
  #line 79 
  ;
  #line 79 
  ;
  #line 79 
  if ((((unsigned long)val >> 8) & 63UL) == (unsigned long)offset) {
    #line 80 
    ;
    #line 79 
    ;
    #line 79 
    if ((((unsigned long)val >> 14) & 15UL) == (unsigned long)bank) {
      #line 81 
      ;
      #line 81 
      ret = (int)((unsigned long)val & 255UL);
      #line 82 
      trace_rf_read(dev,(unsigned char)((int)bank),(unsigned char)((int)offset),(unsigned char)((int)((unsigned char)ret)));
    }
  }
  #line 84 
  out: 
       #line 84 
  ;
  #line 85 
  cif_mutex_unlock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 87 
  if (ret < 0) 
               #line 88 
               _dev_err(dev->dev,(char *)"Error: RF read %02hhx:%02hhx failed:%d!!\n",(int)bank,(int)offset,ret);
  #line 91 
  return ret;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_rf_rmw(struct mt7601u_dev *dev, u8 bank, u8 offset, u8 mask, u8 val)
{
  #line 97 
  int ret;
  #line 99 
  ret = mt7601u_rf_rr(dev,(unsigned char)((int)bank),(unsigned char)((int)offset));
  #line 100 
  if (ret < 0) 
               #line 101 
               return ret;
  #line 102 
  val = (unsigned char)((~ ((int)mask) & ret) | (int)val);
  #line 103 
  ret = mt7601u_rf_wr(dev,(unsigned char)((int)bank),(unsigned char)((int)offset),(unsigned char)((int)val));
  #line 104 
  if (ret != 0) 
                #line 105 
                return ret;
  #line 107 
  return (int)val;
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_rf_set(struct mt7601u_dev *dev, u8 bank, u8 offset, u8 val)
{
  #line 113 
  return mt7601u_rf_rmw(dev,(unsigned char)((int)bank),
                     (unsigned char)((int)offset),(unsigned char)0,
                     (unsigned char)((int)val));
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_rf_clear(struct mt7601u_dev *dev, u8 bank, u8 offset, u8 mask)
{
  #line 119 
  return mt7601u_rf_rmw(dev,(unsigned char)((int)bank),
                     (unsigned char)((int)offset),(unsigned char)((int)mask),
                     (unsigned char)0);
}

#line 136 
#line 136 
void __compiletime_assert_136(void);
#line 137 
#line 137 
void __compiletime_assert_137(void);
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_bbp_wr(struct mt7601u_dev *dev, u8 offset, u8 val)
{
  #line 124 
  int __ret_warn_on;
  {
    #line 124 
    int tmp_0;
    #line 124 
    if (test_bit(2L,& dev->state)) 
                                   #line 124 
                                   tmp_0 = 0; else 
                                                   #line 124 
                                                   tmp_0 = 1;
    #line 124 
    __ret_warn_on = tmp_0;
    #line 124 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 125 
      ldv_inline_asm();
      #line 126 
      ldv_inline_asm();
    }
    }
  #line 124 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 126 
                                                return;
  else {
    #line 124 
    if ((int)test_bit(1L,& dev->state) != 0) 
                                             #line 126 
                                             return;
  }
  #line 128 
  cif_mutex_lock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 130 
  if (! mt76_poll(dev,4124U,131072U,0U,1000)) {
    #line 131 
    _dev_err(dev->dev,(char *)"Error: BBP write %02hhx failed!!\n",(int)offset);
    #line 132 
    goto out;
  }
  #line 136 
  if (0 != 0 && ((unsigned long)val & 18446744073709551360UL) != 0UL) 
    #line 136 
    __compiletime_assert_136();
  #line 137 
  if (0 != 0 && ((unsigned long)offset & 18446744073709551360UL) != 0UL) 
    #line 137 
    __compiletime_assert_137();
  #line 135 
  ;
  #line 135 
  mt7601u_wr(dev,4124U,((unsigned int)((unsigned long)val) | (unsigned int)(((unsigned long)offset << 8) & 65535UL)) | 655360U);
  #line 139 
  trace_bbp_write(dev,(unsigned char)((int)offset),(unsigned char)((int)val));
  #line 140 
  out: 
       #line 140 
  ;
  #line 141 
  cif_mutex_unlock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 142 
  return;
}

#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_bbp_rr(struct mt7601u_dev *dev, u8 offset)
{
  #line 149 
  int __ret_warn_on;
  #line 146 
  u32 val;
  #line 147 
  int ret = -110;
  {
    #line 149 
    int tmp_0;
    #line 149 
    if (test_bit(2L,& dev->state)) 
                                   #line 149 
                                   tmp_0 = 0; else 
                                                   #line 149 
                                                   tmp_0 = 1;
    #line 149 
    __ret_warn_on = tmp_0;
    #line 149 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 150 
      ldv_inline_asm();
      #line 151 
      ldv_inline_asm();
    }
    }
  #line 149 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 150 
                                                return -22;
  #line 151 
  if ((int)test_bit(1L,& dev->state) != 0) 
                                           #line 152 
                                           return 255;
  #line 154 
  cif_mutex_lock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 156 
  if (! mt76_poll(dev,4124U,131072U,0U,1000)) 
                                              #line 157 
                                              goto out;
  #line 160 
  if (0 != 0 && ((unsigned long)offset & 18446744073709551360UL) != 0UL) 
    #line 160 
    __compiletime_assert_160();
  #line 159 
  ;
  #line 159 
  mt7601u_wr(dev,4124U,(unsigned int)(((unsigned long)offset << 8) & 65535UL) | 720896U);
  #line 164 
  if (! mt76_poll(dev,4124U,131072U,0U,1000)) 
                                              #line 165 
                                              goto out;
  #line 167 
  val = mt7601u_rr(dev,4124U);
  #line 168 
  ;
  #line 168 
  ;
  #line 168 
  if ((((unsigned long)val >> 8) & 255UL) == (unsigned long)offset) {
    #line 169 
    ;
    #line 169 
    ret = (int)((unsigned long)val & 255UL);
    #line 170 
    trace_bbp_read(dev,(unsigned char)((int)offset),(unsigned char)((int)((unsigned char)ret)));
  }
  #line 172 
  out: 
       #line 172 
  ;
  #line 173 
  cif_mutex_unlock_reg_atomic_mutex_of_mt7601u_dev(& dev->reg_atomic_mutex);
  #line 175 
  if (ret < 0) 
               #line 176 
               _dev_err(dev->dev,(char *)"Error: BBP read %02hhx failed:%d!!\n",(int)offset,ret);
  #line 179 
  return ret;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_bbp_rmw(struct mt7601u_dev *dev, u8 offset, u8 mask, u8 val)
{
  #line 184 
  int ret;
  #line 186 
  ret = mt7601u_bbp_rr(dev,(unsigned char)((int)offset));
  #line 187 
  if (ret < 0) 
               #line 188 
               return ret;
  #line 189 
  val = (unsigned char)((~ ((int)mask) & ret) | (int)val);
  #line 190 
  mt7601u_bbp_wr(dev,(unsigned char)((int)offset),(unsigned char)((int)val));
  #line 192 
  return (int)val;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static u8 mt7601u_bbp_rmc(struct mt7601u_dev *dev, u8 offset, u8 mask, u8 val)
{
  #line 197 
  int ret;
  #line 199 
  ret = mt7601u_bbp_rr(dev,(unsigned char)((int)offset));
  #line 200 
  if (ret < 0) 
               #line 201 
               return (unsigned char)ret;
  #line 202 
  val = (unsigned char)((~ ((int)mask) & ret) | (int)val);
  #line 203 
  if ((int)val != ret) 
                       #line 204 
                       mt7601u_bbp_wr(dev,(unsigned char)((int)offset),(unsigned char)((int)val));
  #line 206 
  return val;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_wait_bbp_ready(struct mt7601u_dev *dev)
{
  #line 212 
  u8 val;
  #line 211 
  int i = 20;
  #line 214 
  while (1) {
    {
      #line 215 
      val = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)0);
      #line 216 
      if ((unsigned int)val + 255U <= 253U) 
                                            #line 217 
                                            break;
    }
    #line 218 
    i --;
    #line 218 
    if (! (i != 0)) 
                    #line 214 
                    break;
  }
  #line 220 
  if (i == 0) {
    #line 221 
    _dev_err(dev->dev,(char *)"Error: BBP is not ready\n");
    #line 222 
    return -5;
  }
  #line 225 
  return 0;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
u32 mt7601u_bbp_set_ctrlch(struct mt7601u_dev *dev, bool below)
{
  #line 230 
  int tmp;
  #line 230 
  if ((int)below != 0) 
                       #line 230 
                       tmp = 32; else 
                                      #line 230 
                                      tmp = 0;
  #line 230 
  ;
  #line 230 
  return (unsigned int)mt7601u_bbp_rmc(dev,(unsigned char)3,(unsigned char)32,
                        (unsigned char)tmp);
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_phy_get_rssi(struct mt7601u_dev *dev, struct mt7601u_rxwi *rxwi, u16 rate)
{
  #line 249 
  int val;
  #line 236 
  s8 lna[2U][2U][3U] = {{{(signed char)(-2), (signed char)15, (signed char)33}, {(signed char)0, (signed char)16, (signed char)34}}, {{(signed char)(-2), (signed char)15, (signed char)33}, {(signed char)(-2), (signed char)16, (signed char)34}}};
  #line 246 
  int bw = (int)(((unsigned long)rate >> 7) & 1UL);
  #line 247 
  int aux_lna = (int)((unsigned long)((int)rxwi->ant >> 7));
  #line 248 
  int lna_id = (int)((unsigned long)((int)rxwi->gain >> 6));
  #line 251 
  if (lna_id != 0) 
                   #line 252 
                   lna_id --;
  #line 254 
  val = 8;
  #line 255 
  val -= (int)lna[aux_lna][bw][lna_id];
  #line 256 
  ;
  #line 256 
  val = (int)((unsigned long)val - ((unsigned long)rxwi->gain & 63UL));
  #line 257 
  val -= (int)(dev->ee)->lna_gain;
  #line 258 
  val -= (int)(dev->ee)->rssi_offset[0];
  #line 260 
  return val;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_vco_cal(struct mt7601u_dev *dev)
{
  #line 265 
  mt7601u_rf_wr(dev,(unsigned char)0,(unsigned char)4,(unsigned char)10);
  #line 266 
  mt7601u_rf_wr(dev,(unsigned char)0,(unsigned char)5,(unsigned char)32);
  #line 267 
  mt7601u_rf_set(dev,(unsigned char)0,(unsigned char)4,(unsigned char)128);
  #line 268 
  msleep(2U);
  #line 269 
  return;
}

#line 271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_set_bw_filter(struct mt7601u_dev *dev, bool cal)
{
  #line 274 
  int ret;
  #line 273 
  u32 filter = 0U;
  #line 276 
  if (! cal) 
             #line 277 
             filter |= 65536U;
  #line 278 
  if ((unsigned int)dev->bw != 0U) 
                                   #line 279 
                                   filter |= 256U;
  #line 282 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_BW,filter | 1U);
  #line 283 
  if (ret != 0) 
                #line 284 
                return ret;
  #line 286 
  return mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_BW,filter);
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_load_bbp_temp_table_bw(struct mt7601u_dev *dev)
{
  #line 293 
  int __ret_warn_on;
  #line 291 
  struct reg_table *t;
  #line 293 
  __ret_warn_on = dev->temp_mode > (unsigned int)MT_TEMP_MODE_LOW;
  #line 293 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 294 
    ldv_inline_asm();
    #line 295 
    ldv_inline_asm();
  }
  #line 293 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 294 
                                                return -22;
  #line 296 
  t = & bbp_mode_table[(unsigned int)dev->temp_mode][(int)dev->bw];
  #line 298 
  return mt7601u_write_reg_pairs(dev,1073741824U,t->regs,(int)t->n);
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_bbp_temp(struct mt7601u_dev *dev, int mode, char *name)
{
  #line 303 
  struct reg_table *t;
  #line 304 
  int ret;
  #line 306 
  if (dev->temp_mode == (enum mt_temp_mode)mode) 
                                                 #line 307 
                                                 return 0;
  #line 309 
  dev->temp_mode = (enum mt_temp_mode)mode;
  #line 310 
  trace_temp_mode(dev,(unsigned char)((int)((unsigned char)mode)));
  #line 312 
  t = (struct reg_table *)(& bbp_mode_table[(unsigned int)dev->temp_mode]);
  #line 313 
  ret = mt7601u_write_reg_pairs(dev,1073741824U,(t + 2U)->regs,(int)(t + 2U)->n);
  #line 315 
  if (ret != 0) 
                #line 316 
                return ret;
  #line 318 
  return mt7601u_write_reg_pairs(dev,1073741824U,
                              (t + (unsigned long)dev->bw)->regs,
                              (int)(t + (unsigned long)dev->bw)->n);
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_apply_ch14_fixup(struct mt7601u_dev *dev, int hw_chan)
{
  #line 324 
  struct mt7601u_rate_power *t = & (dev->ee)->power_rate_table;
  #line 326 
  if (hw_chan != 14 || (unsigned int)dev->bw != 0U) {
    #line 327 
    mt7601u_bbp_rmw(dev,(unsigned char)4,(unsigned char)32,(unsigned char)0);
    #line 328 
    mt7601u_bbp_wr(dev,(unsigned char)178,(unsigned char)255);
    #line 330 
    t->cck[0].bw20 = (dev->ee)->real_cck_bw20[0];
    #line 331 
    t->cck[1].bw20 = (dev->ee)->real_cck_bw20[1];
  }
  else {
    #line 333 
    mt7601u_bbp_wr(dev,(unsigned char)4,(unsigned char)96);
    #line 334 
    mt7601u_bbp_wr(dev,(unsigned char)178,(unsigned char)0);
    #line 337 
    t->cck[0].bw20 = (signed char)((unsigned int)(dev->ee)->real_cck_bw20[0] + 254U);
    #line 338 
    t->cck[1].bw20 = (signed char)((unsigned int)(dev->ee)->real_cck_bw20[1] + 254U);
  }
  #line 340 
  return;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int __mt7601u_phy_set_channel(struct mt7601u_dev *dev, struct cfg80211_chan_def *chandef)
{
  #line 375 
  int chan_idx;
  #line 376 
  bool chan_ext_below;
  #line 377 
  u8 bw;
  #line 378 
  int i;
  #line 378 
  int ret;
  #line 346 
  u8 freq_plan[14U][4U] = {{(unsigned char)153U, (unsigned char)153U, (unsigned char)9U, (unsigned char)80U}, {(unsigned char)70U, (unsigned char)68U, (unsigned char)10U, (unsigned char)80U}, {(unsigned char)236U, (unsigned char)238U, (unsigned char)10U, (unsigned char)80U}, {(unsigned char)153U, (unsigned char)153U, (unsigned char)11U, (unsigned char)80U}, {(unsigned char)70U, (unsigned char)68U, (unsigned char)8U, (unsigned char)81U}, {(unsigned char)236U, (unsigned char)238U, (unsigned char)8U, (unsigned char)81U}, {(unsigned char)153U, (unsigned char)153U, (unsigned char)9U, (unsigned char)81U}, {(unsigned char)70U, (unsigned char)68U, (unsigned char)10U, (unsigned char)81U}, {(unsigned char)236U, (unsigned char)238U, (unsigned char)10U, (unsigned char)81U}, {(unsigned char)153U, (unsigned char)153U, (unsigned char)11U, (unsigned char)81U}, {(unsigned char)70U, (unsigned char)68U, (unsigned char)8U, (unsigned char)82U}, {(unsigned char)236U, (unsigned char)238U, (unsigned char)8U, (unsigned char)82U}, {(unsigned char)153U, (unsigned char)153U, (unsigned char)9U, (unsigned char)82U}, {(unsigned char)51U, (unsigned char)51U, (unsigned char)11U, (unsigned char)82U}};
  #line 362 
  struct mt76_reg_pair channel_freq_plan[4U] = {{.reg = 17U, .value = 0U}, {.reg = 18U, .value = 0U}, {.reg = 19U, .value = 0U}, {.reg = 20U, .value = 0U}};
  #line 365 
  struct mt76_reg_pair bbp_settings[3U] = {{.reg = 62U, .value = (unsigned int)(55 - (int)(dev->ee)->lna_gain)}, {.reg = 63U, .value = (unsigned int)(55 - (int)(dev->ee)->lna_gain)}, {.reg = 64U, .value = (unsigned int)(55 - (int)(dev->ee)->lna_gain)}};
  #line 371 
  struct ieee80211_channel *chan = chandef->chan;
  #line 372 
  enum nl80211_channel_type chan_type = cfg80211_get_chandef_type(chandef);
  #line 374 
  struct mt7601u_rate_power *t = & (dev->ee)->power_rate_table;
  #line 380 
  bw = (unsigned char)0U;
  #line 381 
  chan_ext_below = (_Bool)(chan_type == (unsigned int)NL80211_CHAN_HT40MINUS);
  #line 382 
  chan_idx = (int)chan->hw_value + -1;
  #line 384 
  if (chandef->width == (unsigned int)NL80211_CHAN_WIDTH_40) {
    #line 385 
    bw = (unsigned char)1U;
    #line 387 
    if (chan_idx > 1 && chan_type == (unsigned int)NL80211_CHAN_HT40MINUS) 
      #line 388 
      chan_idx += -2;
    else 
      #line 389 
      if (chan_idx <= 11 && chan_type == (unsigned int)NL80211_CHAN_HT40PLUS) 
        #line 390 
        chan_idx += 2; else 
                            #line 392 
                            _dev_err(dev->dev,(char *)"Error: invalid 40MHz channel!!\n");
  }
  #line 395 
  if ((int)dev->bw != (int)bw || (int)dev->chan_ext_below != (int)chan_ext_below) {
    {
      #line 396 
      bool branch;
      #line 396 
      struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"mt7601u", .function = (char *)"__mt7601u_phy_set_channel", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"Info: switching HT mode bw:%d below:%d\n", .lineno = (unsigned int)396U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 396 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
      #line 396 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 396 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug590,dev->dev,(char *)"Info: switching HT mode bw:%d below:%d\n",(int)bw,(int)chan_ext_below);
    }
    #line 399 
    mt7601u_bbp_set_bw(dev,(int)bw);
    #line 401 
    mt7601u_bbp_set_ctrlch(dev,(_Bool)((bool)((int)chan_ext_below) != 0));
    #line 402 
    mt7601u_mac_set_ctrlch(dev,(_Bool)((bool)((int)chan_ext_below) != 0));
    #line 403 
    dev->chan_ext_below = chan_ext_below;
  }
  #line 406 
  i = 0;
  #line 406 
  while (i <= 3) {
    #line 407 
    channel_freq_plan[i].value = (unsigned int)freq_plan[chan_idx][i];
    #line 406 
    i ++;
  }
  #line 409 
  ret = mt7601u_write_reg_pairs(dev,2147483648U,(struct mt76_reg_pair *)(& channel_freq_plan),4);
  #line 411 
  if (ret != 0) 
                #line 412 
                return ret;
  #line 414 
  mt7601u_rmw(dev,5040U,16191U,(unsigned int)(dev->ee)->chan_pwr[chan_idx] & 63U);
  #line 417 
  ret = mt7601u_write_reg_pairs(dev,1073741824U,(struct mt76_reg_pair *)(& bbp_settings),3);
  #line 419 
  if (ret != 0) 
                #line 420 
                return ret;
  #line 422 
  mt7601u_vco_cal(dev);
  #line 423 
  mt7601u_bbp_set_bw(dev,(int)bw);
  #line 424 
  ret = mt7601u_set_bw_filter(dev,(_Bool)0);
  #line 425 
  if (ret != 0) 
                #line 426 
                return ret;
  #line 428 
  mt7601u_apply_ch14_fixup(dev,(int)chan->hw_value);
  #line 429 
  ;
  #line 429 
  mt7601u_wr(dev,4884U,(((int_to_s6((int)t->ofdm[1].bw20) << 24) | (int_to_s6((int)t->ofdm[0].bw20) << 16)) | (int_to_s6((int)t->cck[1].bw20) << 8)) | int_to_s6((int)t->cck[0].bw20));
  #line 434 
  if ((int)test_bit(4L,& dev->state) != 0) 
                                           #line 435 
                                           mt7601u_agc_reset(dev);
  #line 437 
  dev->chandef = *chandef;
  #line 439 
  return 0;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_phy_set_channel(struct mt7601u_dev *dev, struct cfg80211_chan_def *chandef)
{
  #line 445 
  int ret;
  #line 447 
  cancel_delayed_work_sync(& dev->cal_work);
  #line 448 
  cancel_delayed_work_sync(& dev->freq_cal.work);
  #line 450 
  cif_mutex_lock_hw_atomic_mutex_of_mt7601u_dev(& dev->hw_atomic_mutex);
  #line 451 
  ret = __mt7601u_phy_set_channel(dev,chandef);
  #line 452 
  cif_mutex_unlock_hw_atomic_mutex_of_mt7601u_dev(& dev->hw_atomic_mutex);
  #line 453 
  if (ret != 0) 
                #line 454 
                return ret;
  #line 456 
  if ((int)test_bit(4L,& dev->state) != 0) 
                                           #line 457 
                                           return 0;
  #line 459 
  ieee80211_queue_delayed_work(dev->hw,& dev->cal_work,1000UL);
  #line 461 
  if ((int)dev->freq_cal.enabled != 0) 
                                       #line 462 
                                       ieee80211_queue_delayed_work(dev->hw,& dev->freq_cal.work,7500UL);
  #line 464 
  return 0;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static u8 mt7601u_bbp_r47_get(struct mt7601u_dev *dev, u8 reg, u8 flag)
{
  #line 486 
  flag = (unsigned char)(((unsigned int)reg & 248U) | (unsigned int)flag);
  #line 487 
  mt7601u_bbp_wr(dev,(unsigned char)47,(unsigned char)((int)flag));
  #line 488 
  usleep_range(500UL,700UL);
  #line 489 
  return (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)49);
}

#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static s8 mt7601u_read_bootup_temp(struct mt7601u_dev *dev)
{
  #line 494 
  u8 bbp_val;
  #line 494 
  u8 temp;
  #line 495 
  u32 rf_bp;
  #line 495 
  u32 rf_set;
  #line 496 
  int i;
  #line 498 
  rf_set = mt7601u_rr(dev,1292U);
  #line 499 
  rf_bp = mt7601u_rr(dev,1284U);
  #line 501 
  mt7601u_wr(dev,1284U,0U);
  #line 502 
  mt7601u_wr(dev,1292U,16U);
  #line 503 
  mt7601u_wr(dev,1284U,16U);
  #line 505 
  bbp_val = (unsigned char)mt7601u_bbp_rmw(dev,(unsigned char)47,(unsigned char)0,
                      (unsigned char)16);
  #line 507 
  mt7601u_bbp_wr(dev,(unsigned char)22,(unsigned char)64);
  #line 509 
  i = 100;
  #line 509 
  while (i != 0 && ((int)bbp_val & 16) != 0) {
    #line 510 
    bbp_val = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)47);
    #line 509 
    i --;
  }
  #line 512 
  temp = mt7601u_bbp_r47_get(dev,(unsigned char)((int)bbp_val),(unsigned char)4);
  #line 514 
  mt7601u_bbp_wr(dev,(unsigned char)22,(unsigned char)0);
  #line 516 
  bbp_val = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)21);
  #line 517 
  bbp_val = (unsigned char)((unsigned int)bbp_val | 2U);
  #line 518 
  mt7601u_bbp_wr(dev,(unsigned char)21,(unsigned char)((int)bbp_val));
  #line 519 
  bbp_val = (unsigned char)((unsigned int)bbp_val & 253U);
  #line 520 
  mt7601u_bbp_wr(dev,(unsigned char)21,(unsigned char)((int)bbp_val));
  #line 522 
  mt7601u_wr(dev,1284U,0U);
  #line 523 
  mt7601u_wr(dev,1292U,rf_set);
  #line 524 
  mt7601u_wr(dev,1284U,rf_bp);
  #line 526 
  trace_read_temp(dev,(unsigned char)((int)temp));
  #line 527 
  return (signed char)temp;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static s8 mt7601u_read_temp(struct mt7601u_dev *dev)
{
  #line 532 
  int i;
  #line 533 
  u8 val;
  #line 534 
  s8 temp;
  #line 536 
  val = (unsigned char)mt7601u_bbp_rmw(dev,(unsigned char)47,(unsigned char)127,
                      (unsigned char)16);
  #line 539 
  i = 100;
  #line 539 
  while (i != 0 && ((int)val & 16) != 0) {
    #line 540 
    val = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)47);
    #line 539 
    i --;
  }
  #line 542 
  temp = (signed char)mt7601u_bbp_r47_get(dev,(unsigned char)((int)val),(unsigned char)4);
  #line 544 
  trace_read_temp(dev,(unsigned char)((int)((unsigned char)temp)));
  #line 545 
  return temp;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_rxdc_cal(struct mt7601u_dev *dev)
{
  #line 556 
  u32 mac_ctrl;
  #line 557 
  int i;
  #line 557 
  int ret;
  #line 550 
  struct mt76_reg_pair intro[4U] = {{.reg = 158U, .value = 141U}, {.reg = 159U, .value = 252U}, {.reg = 158U, .value = 140U}, {.reg = 159U, .value = 76U}};
  #line 553 
  struct mt76_reg_pair outro[2U] = {{.reg = 158U, .value = 141U}, {.reg = 159U, .value = 224U}};
  #line 559 
  mac_ctrl = mt7601u_rr(dev,4100U);
  #line 560 
  mt7601u_wr(dev,4100U,8U);
  #line 562 
  ret = mt7601u_write_reg_pairs(dev,1073741824U,(struct mt76_reg_pair *)(& intro),4);
  #line 564 
  if (ret != 0) 
                #line 565 
                _dev_err(dev->dev,(char *)"%s intro failed:%d\n",(char *)"mt7601u_rxdc_cal",ret);
  #line 567 
  i = 20;
  #line 567 
  while (i != 0) {
    {
      #line 568 
      usleep_range(300UL,500UL);
      #line 570 
      mt7601u_bbp_wr(dev,(unsigned char)158,(unsigned char)140);
      #line 571 
      if (mt7601u_bbp_rr(dev,(unsigned char)159) == 12) 
                                                        #line 572 
                                                        break;
    }
    #line 567 
    i --;
  }
  #line 574 
  if (i == 0) 
              #line 575 
              _dev_err(dev->dev,(char *)"%s timed out\n",(char *)"mt7601u_rxdc_cal");
  #line 577 
  mt7601u_wr(dev,4100U,0U);
  #line 579 
  ret = mt7601u_write_reg_pairs(dev,1073741824U,(struct mt76_reg_pair *)(& outro),2);
  #line 581 
  if (ret != 0) 
                #line 582 
                _dev_err(dev->dev,(char *)"%s outro failed:%d\n",(char *)"mt7601u_rxdc_cal",ret);
  #line 584 
  mt7601u_wr(dev,4100U,mac_ctrl);
  #line 585 
  return;
}

#line 587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_phy_recalibrate_after_assoc(struct mt7601u_dev *dev)
{
  #line 589 
  mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_DPD,(unsigned int)dev->curr_temp);
  #line 591 
  mt7601u_rxdc_cal(dev);
  #line 592 
  return;
}

#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static s16 lin2dBd(u16 linear)
{
  #line 601 
  int __ret_warn_on;
  #line 598 
  unsigned int mantisa;
  #line 599 
  int app;
  #line 599 
  int dBd;
  #line 597 
  short exp = (short)0;
  #line 601 
  __ret_warn_on = (unsigned int)linear == 0U;
  #line 601 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 602 
    ldv_inline_asm();
    #line 603 
    ldv_inline_asm();
  }
  #line 601 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 602 
                                                return (short)(-10000);
  #line 604 
  mantisa = (unsigned int)linear;
  #line 606 
  exp = (short)((unsigned int)fls(mantisa) + 65520U);
  #line 607 
  if ((int)exp > 0) 
                    #line 608 
                    mantisa >>= (int)exp;
  else {
    #line 610 
    short __x;
    #line 610 
    int tmp_1;
    #line 610 
    __x = exp;
    #line 610 
    if ((int)__x < 0) 
                      #line 610 
                      tmp_1 = - ((int)__x); else 
                                                 #line 610 
                                                 tmp_1 = (int)__x;
    #line 610 
    mantisa <<= tmp_1;
  }
  #line 612 
  if (mantisa <= 47104U) 
                         #line 613 
                         app = (int)((((mantisa >> 3) + mantisa) + (mantisa >> 4)) + 4294928896U); else 
                                                                    #line 615 
                                                                    app = (int)(((mantisa - (mantisa >> 3)) - (mantisa >> 6)) + 4294944256U);
  #line 616 
  if (app < 0) 
               #line 617 
               app = 0;
  #line 619 
  dBd = (((int)exp + 15) << 15) + app;
  #line 620 
  dBd = (((dBd << 2) + (dBd << 1)) + (dBd >> 6)) + (dBd >> 7);
  #line 621 
  dBd >>= 10;
  #line 623 
  return (short)dBd;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_set_initial_tssi(struct mt7601u_dev *dev, s16 tssi_db, s16 tssi_hvga_db)
{
  #line 630 
  int init_offset;
  #line 629 
  struct tssi_data *d = & (dev->ee)->tssi_data;
  #line 632 
  init_offset = ((int)tssi_db * (int)d->slope + (int)d->offset[1]) / -4096 + 10;
  #line 634 
  ;
  #line 634 
  mt76_rmw(dev,5044U,63U,int_to_s6(init_offset) & 63U);
  #line 636 
  return;
}

#line 638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_tssi_dc_gain_cal(struct mt7601u_dev *dev)
{
  #line 640 
  u8 rf_vga_0;
  #line 640 
  u8 rf_mixer;
  #line 640 
  u8 bbp_r47;
  #line 641 
  int i;
  #line 641 
  int j;
  #line 642 
  s8 res[4U];
  #line 643 
  s16 tssi_init_db;
  #line 643 
  s16 tssi_init_hvga_db;
  #line 645 
  mt7601u_wr(dev,1292U,48U);
  #line 646 
  mt7601u_wr(dev,1284U,786480U);
  #line 647 
  mt7601u_wr(dev,4100U,0U);
  #line 649 
  mt7601u_bbp_wr(dev,(unsigned char)58,(unsigned char)0);
  #line 650 
  mt7601u_bbp_wr(dev,(unsigned char)241,(unsigned char)2);
  #line 651 
  mt7601u_bbp_wr(dev,(unsigned char)23,(unsigned char)8);
  #line 652 
  bbp_r47 = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)47);
  #line 655 
  rf_vga_0 = (unsigned char)mt7601u_rf_rr(dev,(unsigned char)5,(unsigned char)3);
  #line 656 
  mt7601u_rf_wr(dev,(unsigned char)5,(unsigned char)3,(unsigned char)8);
  #line 659 
  rf_mixer = (unsigned char)mt7601u_rf_rr(dev,(unsigned char)4,(unsigned char)39);
  #line 660 
  mt7601u_rf_wr(dev,(unsigned char)4,(unsigned char)39,(unsigned char)0);
  #line 662 
  i = 0;
  #line 662 
  while (i <= 3) {
    {
      #line 663 
      int tmp_2;
      #line 665 
      int tmp_3;
      #line 666 
      int tmp_4;
      #line 678 
      int tmp_5;
      #line 678 
      int tmp_6;
      #line 663 
      if ((i & 1) != 0) 
                        #line 663 
                        tmp_2 = (int)rf_mixer; else 
                                                    #line 663 
                                                    tmp_2 = 0;
      #line 663 
      ;
      #line 663 
      mt7601u_rf_wr(dev,(unsigned char)4,(unsigned char)39,(unsigned char)tmp_2);
      #line 665 
      if (i <= 1) 
                  #line 665 
                  tmp_3 = 8; else 
                                  #line 665 
                                  tmp_3 = 2;
      #line 665 
      ;
      #line 665 
      mt7601u_bbp_wr(dev,(unsigned char)23,(unsigned char)tmp_3);
      #line 666 
      if (i <= 1) 
                  #line 666 
                  tmp_4 = 8; else 
                                  #line 666 
                                  tmp_4 = 17;
      #line 666 
      ;
      #line 666 
      mt7601u_rf_wr(dev,(unsigned char)5,(unsigned char)3,(unsigned char)tmp_4);
      #line 669 
      mt7601u_bbp_wr(dev,(unsigned char)22,(unsigned char)0);
      #line 670 
      mt7601u_bbp_wr(dev,(unsigned char)244,(unsigned char)0);
      #line 672 
      mt7601u_bbp_wr(dev,(unsigned char)21,(unsigned char)1);
      #line 673 
      __const_udelay(4295UL);
      #line 674 
      mt7601u_bbp_wr(dev,(unsigned char)21,(unsigned char)0);
      #line 677 
      mt7601u_bbp_wr(dev,(unsigned char)47,(unsigned char)80);
      #line 678 
      if ((i & 1) != 0) 
                        #line 678 
                        tmp_5 = 49; else 
                                         #line 678 
                                         tmp_5 = 64;
      #line 678 
      if ((i & 1) != 0) 
                        #line 678 
                        tmp_6 = 244; else 
                                          #line 678 
                                          tmp_6 = 22;
      #line 678 
      ;
      #line 678 
      mt7601u_bbp_wr(dev,(unsigned char)tmp_6,(unsigned char)tmp_5);
      #line 680 
      j = 20;
      #line 680 
      while (j != 0) {
        #line 681 
        if ((mt7601u_bbp_rr(dev,(unsigned char)47) & 16) == 0) 
                                                               #line 682 
                                                               break;
        #line 680 
        j --;
      }
      #line 683 
      if (j == 0) 
                  #line 684 
                  _dev_err(dev->dev,(char *)"%s timed out\n",(char *)"mt7601u_tssi_dc_gain_cal");
      #line 687 
      mt7601u_bbp_wr(dev,(unsigned char)47,(unsigned char)64);
      #line 688 
      res[i] = (signed char)mt7601u_bbp_rr(dev,(unsigned char)49);
    }
    #line 662 
    i ++;
  }
  #line 691 
  tssi_init_db = lin2dBd((unsigned short)((int)((unsigned short)((int)res[1] - (int)res[0]))));
  #line 692 
  tssi_init_hvga_db = lin2dBd((unsigned short)((int)((unsigned int)((unsigned short)((int)res[3] - (int)res[2])) * 4U)));
  #line 693 
  dev->tssi_init = res[0];
  #line 694 
  dev->tssi_init_hvga = res[2];
  #line 695 
  dev->tssi_init_hvga_offset_db = (short)((int)tssi_init_hvga_db - (int)tssi_init_db);
  {
    #line 697 
    bool branch;
    #line 697 
    struct _ddebug __UNIQUE_ID_ddebug592 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_tssi_dc_gain_cal", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"TSSI_init:%hhx db:%hx hvga:%hhx hvga_db:%hx off_db:%hx\n", .lineno = (unsigned int)697U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 697 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug592.key.dd_key_false.key,(_Bool)0);
    #line 697 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 697 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug592,dev->dev,(char *)"TSSI_init:%hhx db:%hx hvga:%hhx hvga_db:%hx off_db:%hx\n",(int)dev->tssi_init,(int)tssi_init_db,(int)dev->tssi_init_hvga,(int)tssi_init_hvga_db,(int)dev->tssi_init_hvga_offset_db);
  }
  #line 702 
  mt7601u_bbp_wr(dev,(unsigned char)22,(unsigned char)0);
  #line 703 
  mt7601u_bbp_wr(dev,(unsigned char)244,(unsigned char)0);
  #line 705 
  mt7601u_bbp_wr(dev,(unsigned char)21,(unsigned char)1);
  #line 706 
  __const_udelay(4295UL);
  #line 707 
  mt7601u_bbp_wr(dev,(unsigned char)21,(unsigned char)0);
  #line 709 
  mt7601u_wr(dev,1284U,0U);
  #line 710 
  mt7601u_wr(dev,1292U,0U);
  #line 712 
  mt7601u_rf_wr(dev,(unsigned char)5,(unsigned char)3,(unsigned char)((int)rf_vga_0));
  #line 713 
  mt7601u_rf_wr(dev,(unsigned char)4,(unsigned char)39,(unsigned char)((int)rf_mixer));
  #line 714 
  mt7601u_bbp_wr(dev,(unsigned char)47,(unsigned char)((int)bbp_r47));
  #line 716 
  mt7601u_set_initial_tssi(dev,(short)((int)tssi_init_db),(short)((int)tssi_init_hvga_db));
  #line 717 
  return;
}

#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_temp_comp(struct mt7601u_dev *dev, bool on)
{
  #line 721 
  int ret;
  #line 721 
  int temp;
  #line 721 
  int hi_temp = 400;
  #line 721 
  int lo_temp = -200;
  #line 723 
  temp = ((int)dev->raw_temp - (int)(dev->ee)->ref_temp) * 39;
  #line 724 
  dev->curr_temp = temp;
  #line 727 
  if ((unsigned int)(temp - dev->dpd_temp) + 450U > 900U) {
    #line 728 
    dev->dpd_temp = temp;
    #line 730 
    ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_DPD,(unsigned int)dev->dpd_temp);
    #line 731 
    if (ret != 0) 
                  #line 732 
                  return ret;
    #line 734 
    mt7601u_vco_cal(dev);
    {
      #line 736 
      bool branch;
      #line 736 
      struct _ddebug __UNIQUE_ID_ddebug593 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_temp_comp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"Recalibrate DPD\n", .lineno = (unsigned int)736U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 736 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug593.key.dd_key_false.key,(_Bool)0);
      #line 736 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 736 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug593,dev->dev,(char *)"Recalibrate DPD\n");
    }
  }
  #line 740 
  if (temp < -50 && ! dev->pll_lock_protect) {
    #line 741 
    dev->pll_lock_protect = (_Bool)1;
    #line 743 
    mt7601u_rf_wr(dev,(unsigned char)4,(unsigned char)4,(unsigned char)6);
    #line 744 
    mt7601u_rf_clear(dev,(unsigned char)4,(unsigned char)10,(unsigned char)48);
    {
      #line 746 
      bool branch_0;
      #line 746 
      struct _ddebug __UNIQUE_ID_ddebug594 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_temp_comp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"PLL lock protect on - too cold\n", .lineno = (unsigned int)746U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 746 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug594.key.dd_key_false.key,(_Bool)0);
      #line 746 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 746 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug594,dev->dev,(char *)"PLL lock protect on - too cold\n");
    }
  }
  else 
    #line 747 
    if (temp > 50 && (int)dev->pll_lock_protect != 0) {
      #line 748 
      dev->pll_lock_protect = (_Bool)0;
      #line 750 
      mt7601u_rf_wr(dev,(unsigned char)4,(unsigned char)4,(unsigned char)0);
      #line 751 
      mt7601u_rf_rmw(dev,(unsigned char)4,(unsigned char)10,(unsigned char)48,(unsigned char)16);
      {
        #line 753 
        bool branch_1;
        #line 753 
        struct _ddebug __UNIQUE_ID_ddebug595 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_temp_comp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"PLL lock protect off\n", .lineno = (unsigned int)753U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 753 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug595.key.dd_key_false.key,(_Bool)0);
        #line 753 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 753 
                                                      __dynamic_dev_dbg(& __UNIQUE_ID_ddebug595,dev->dev,(char *)"PLL lock protect off\n");
      }
    }
  #line 756 
  if ((int)on != 0) {
    #line 757 
    hi_temp += -50;
    #line 758 
    lo_temp += -50;
  }
  #line 762 
  if (temp > hi_temp) {
    #line 763 
    return mt7601u_bbp_temp(dev,1,(char *)"high");
  }
  else 
    #line 764 
    if (temp > lo_temp) {
      #line 765 
      return mt7601u_bbp_temp(dev,0,(char *)"normal");
    }
    else {
      #line 767 
      return mt7601u_bbp_temp(dev,2,(char *)"low");
    }
}

#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_current_tx_power(struct mt7601u_dev *dev)
{
  #line 773 
  return (int)(dev->ee)->chan_pwr[(int)(dev->chandef.chan)->hw_value + -1];
}

#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static bool mt7601u_use_hvga(struct mt7601u_dev *dev)
{
  #line 778 
  return (_Bool)(mt7601u_current_tx_power(dev) <= 20);
}

#line 782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static s16 mt7601u_phy_rf_pa_mode_val(struct mt7601u_dev *dev, int phy_mode, int tx_rate)
{
  #line 785 
  u32 reg;
  #line 784 
  s16 decode_tb[4U] = {(short)0, (short)8847, (short)(-5734), (short)(-5734)};
  #line 787 
  switch (phy_mode) {
    #line 788 
    case 1: 
            #line 788 
    ;
    #line 789 
    tx_rate += 4;
    #line 791 
    case 0: 
            #line 791 
    ;
    #line 792 
    reg = dev->rf_pa_mode[0];
    #line 793 
    break;
    #line 794 
    default: 
             #line 794 
    ;
    #line 795 
    reg = dev->rf_pa_mode[1];
    #line 796 
    break;
  }
  #line 799 
  return decode_tb[(reg >> tx_rate * 2) & 3U];
}

#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static struct mt7601u_tssi_params mt7601u_tssi_params_get(struct mt7601u_dev *dev)
{
  #line 807 
  struct mt7601u_tssi_params p;
  #line 808 
  u8 bbp_r47;
  #line 808 
  u8 pkt_type;
  #line 808 
  u8 tx_rate;
  #line 809 
  struct power_per_rate *rate_table;
  #line 805 
  u8 ofdm_pkt2rate[8U] = {(unsigned char)6U, (unsigned char)4U, (unsigned char)2U, (unsigned char)0U, (unsigned char)7U, (unsigned char)5U, (unsigned char)3U, (unsigned char)1U};
  #line 806 
  int static_power[4U] = {0, -49152, -98304, 49152};
  #line 811 
  bbp_r47 = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)47);
  #line 813 
  p.tssi0 = (char)mt7601u_bbp_r47_get(dev,(unsigned char)((int)bbp_r47),
                            (unsigned char)0);
  #line 814 
  dev->raw_temp = (signed char)mt7601u_bbp_r47_get(dev,(unsigned char)((int)bbp_r47),
                            (unsigned char)4);
  #line 815 
  pkt_type = mt7601u_bbp_r47_get(dev,(unsigned char)((int)bbp_r47),(unsigned char)1);
  #line 817 
  p.trgt_power = mt7601u_current_tx_power(dev);
  #line 819 
  switch ((int)pkt_type & 3) {
    #line 820 
    case 0: 
            #line 820 
    ;
    #line 821 
    tx_rate = (unsigned char)((unsigned int)((unsigned char)((int)pkt_type >> 4)) & 3U);
    #line 822 
    rate_table = (struct power_per_rate *)(& (dev->ee)->power_rate_table.cck);
    #line 823 
    break;
    #line 825 
    case 1: 
            #line 825 
    ;
    #line 826 
    tx_rate = ofdm_pkt2rate[((int)pkt_type >> 4) & 7];
    #line 827 
    rate_table = (struct power_per_rate *)(& (dev->ee)->power_rate_table.ofdm);
    #line 828 
    break;
    #line 830 
    default: 
             #line 830 
    ;
    #line 831 
    tx_rate = mt7601u_bbp_r47_get(dev,(unsigned char)((int)bbp_r47),(unsigned char)2);
    #line 832 
    tx_rate = (unsigned char)((unsigned int)tx_rate & 127U);
    #line 833 
    rate_table = (struct power_per_rate *)(& (dev->ee)->power_rate_table.ht);
    #line 834 
    break;
  }
  #line 837 
  if ((unsigned int)dev->bw == 0U) 
                                   #line 838 
                                   p.trgt_power += (int)(rate_table + (unsigned long)((unsigned int)tx_rate / 2U))->bw20; else 
                                                                    #line 840 
                                                                    p.trgt_power += (int)(rate_table + (unsigned long)((unsigned int)tx_rate / 2U))->bw40;
  #line 842 
  p.trgt_power <<= 12;
  {
    #line 844 
    bool branch;
    #line 844 
    struct _ddebug __UNIQUE_ID_ddebug596 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_tssi_params_get", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"tx_rate:%02hhx pwr:%08x\n", .lineno = (unsigned int)844U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 844 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug596.key.dd_key_false.key,(_Bool)0);
    #line 844 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 844 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug596,dev->dev,(char *)"tx_rate:%02hhx pwr:%08x\n",(int)tx_rate,p.trgt_power);
  }
  #line 847 
  p.trgt_power += (int)mt7601u_phy_rf_pa_mode_val(dev,(int)pkt_type & 3,(int)tx_rate);
  #line 850 
  if (((int)pkt_type & 3) == 0) {
    #line 851 
    if ((mt7601u_bbp_rr(dev,(unsigned char)4) & 32) != 0) {
      #line 852 
      int tmp_5;
      #line 852 
      if (mt7601u_bbp_rr(dev,(unsigned char)178) != 0) 
                                                       #line 852 
                                                       tmp_5 = 18022; else 
                                                                    #line 852 
                                                                    tmp_5 = 9830;
      #line 852 
      p.trgt_power += tmp_5;
    }
    else {
      #line 854 
      int tmp_7;
      #line 854 
      if (mt7601u_bbp_rr(dev,(unsigned char)178) != 0) 
                                                       #line 854 
                                                       tmp_7 = 819; else 
                                                                    #line 854 
                                                                    tmp_7 = 24576;
      #line 854 
      p.trgt_power += tmp_7;
    }
  }
  #line 857 
  p.trgt_power += static_power[mt7601u_bbp_rr(dev,(unsigned char)1) & 3];
  #line 859 
  p.trgt_power += (dev->ee)->tssi_data.tx0_delta_offset;
  {
    #line 861 
    bool branch_0;
    #line 861 
    struct _ddebug __UNIQUE_ID_ddebug597 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_tssi_params_get", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"tssi:%02hhx t_power:%08x temp:%02hhx pkt_type:%02hhx\n", .lineno = (unsigned int)861U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 861 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug597.key.dd_key_false.key,(_Bool)0);
    #line 861 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 861 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug597,dev->dev,(char *)"tssi:%02hhx t_power:%08x temp:%02hhx pkt_type:%02hhx\n",(int)p.tssi0,p.trgt_power,(int)dev->raw_temp,(int)pkt_type);
  }
  #line 865 
  return p;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static bool mt7601u_tssi_read_ready(struct mt7601u_dev *dev)
{
  #line 870 
  return (_Bool)((mt7601u_bbp_rr(dev,(unsigned char)47) & 16) == 0);
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_tssi_cal(struct mt7601u_dev *dev)
{
  #line 875 
  struct mt7601u_tssi_params params;
  #line 876 
  int curr_pwr;
  #line 876 
  int diff_pwr;
  #line 877 
  char tssi_offset;
  #line 878 
  s8 tssi_init;
  #line 879 
  s16 tssi_m_dc;
  #line 879 
  s16 tssi_db;
  #line 880 
  bool hvga;
  #line 881 
  u32 val;
  #line 931 
  int tmp_9;
  #line 883 
  if (! (dev->ee)->tssi_enabled) 
                                 #line 884 
                                 return 0;
  #line 886 
  hvga = mt7601u_use_hvga(dev);
  #line 887 
  if (! dev->tssi_read_trig) {
    #line 888 
    return mt7601u_mcu_tssi_read_kick(dev,(int)hvga);
  }
  #line 890 
  if (! mt7601u_tssi_read_ready(dev)) 
                                      #line 891 
                                      return 0;
  #line 893 
  params = mt7601u_tssi_params_get(dev);
  #line 895 
  if ((int)hvga != 0) 
                      #line 895 
                      tssi_init = dev->tssi_init_hvga; else 
                                                            #line 895 
                                                            tssi_init = dev->tssi_init;
  #line 896 
  tssi_m_dc = (short)((int)((short)params.tssi0) - (int)((short)tssi_init));
  #line 897 
  tssi_db = lin2dBd((unsigned short)((int)((unsigned short)tssi_m_dc)));
  {
    #line 898 
    bool branch;
    #line 898 
    struct _ddebug __UNIQUE_ID_ddebug598 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_tssi_cal", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"tssi dc:%04hx db:%04hx hvga:%d\n", .lineno = (unsigned int)898U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 898 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug598.key.dd_key_false.key,(_Bool)0);
    #line 898 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 898 
                                                __dynamic_dev_dbg(& __UNIQUE_ID_ddebug598,dev->dev,(char *)"tssi dc:%04hx db:%04hx hvga:%d\n",(int)tssi_m_dc,(int)tssi_db,(int)hvga);
  }
  #line 901 
  if ((unsigned int)(dev->chandef.chan)->hw_value <= 4U) 
                                                         #line 902 
                                                         tssi_offset = (char)(dev->ee)->tssi_data.offset[0];
  else 
    #line 903 
    if ((unsigned int)(dev->chandef.chan)->hw_value <= 8U) 
                                                           #line 904 
                                                           tssi_offset = (char)(dev->ee)->tssi_data.offset[1]; else 
                                                                    #line 906 
                                                                    tssi_offset = (char)(dev->ee)->tssi_data.offset[2];
  #line 908 
  if ((int)hvga != 0) 
                      #line 909 
                      tssi_db = (short)((int)tssi_db - (int)dev->tssi_init_hvga_offset_db);
  #line 911 
  curr_pwr = (int)tssi_db * (int)(dev->ee)->tssi_data.slope + ((int)tssi_offset << 9);
  #line 912 
  diff_pwr = params.trgt_power - curr_pwr;
  {
    #line 913 
    bool branch_0;
    #line 913 
    struct _ddebug __UNIQUE_ID_ddebug599 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_tssi_cal", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"Power curr:%08x diff:%08x\n", .lineno = (unsigned int)913U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 913 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug599.key.dd_key_false.key,(_Bool)0);
    #line 913 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 913 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug599,dev->dev,(char *)"Power curr:%08x diff:%08x\n",curr_pwr,diff_pwr);
  }
  #line 915 
  if ((int)params.tssi0 == 127 && diff_pwr > 0) {
    #line 916 
    _dev_err(dev->dev,(char *)"Error: TSSI upper saturation\n");
    #line 917 
    diff_pwr = 0;
  }
  #line 919 
  if ((int)params.tssi0 - (int)tssi_init <= 0 && diff_pwr < 0) {
    #line 920 
    _dev_err(dev->dev,(char *)"Error: TSSI lower saturation\n");
    #line 921 
    diff_pwr = 0;
  }
  #line 924 
  if ((dev->prev_pwr_diff ^ diff_pwr) < 0) {
    #line 924 
    int __x;
    #line 924 
    int tmp_3;
    #line 924 
    __x = diff_pwr;
    #line 924 
    if (__x < 0) 
                 #line 924 
                 tmp_3 = - __x; else 
                                     #line 924 
                                     tmp_3 = __x;
    #line 924 
    if (tmp_3 <= 4095) {
      #line 925 
      int __x_0;
      #line 925 
      int tmp_5;
      #line 925 
      int __x_1;
      #line 925 
      int tmp_7;
      #line 925 
      int tmp_6;
      #line 925 
      __x_0 = diff_pwr;
      #line 925 
      if (__x_0 < 0) 
                     #line 925 
                     tmp_5 = - __x_0; else 
                                           #line 925 
                                           tmp_5 = __x_0;
      #line 925 
      tmp_6 = tmp_5;
      #line 925 
      __x_1 = dev->prev_pwr_diff;
      #line 925 
      if (__x_1 < 0) 
                     #line 925 
                     tmp_7 = - __x_1; else 
                                           #line 925 
                                           tmp_7 = __x_1;
      #line 924 
      if (tmp_6 > tmp_7) 
                         #line 924 
                         goto _LOR;
      else 
        #line 925 
        if (diff_pwr > 0 && - dev->prev_pwr_diff == diff_pwr) 
                                                              #line 924 
                                                              _LOR: 
                                                                    #line 927 
                                                                    diff_pwr = 0; else 
                                                                    #line 929 
                                                                    dev->prev_pwr_diff = diff_pwr;
    }
    else 
         #line 929 
         dev->prev_pwr_diff = diff_pwr;
  }
  else 
       #line 929 
       dev->prev_pwr_diff = diff_pwr;
  #line 931 
  if (diff_pwr > 0) 
                    #line 931 
                    tmp_9 = 2048; else 
                                       #line 931 
                                       tmp_9 = -2048;
  #line 931 
  diff_pwr = tmp_9 + diff_pwr;
  #line 932 
  diff_pwr /= 4096;
  {
    #line 934 
    bool branch_1;
    #line 934 
    struct _ddebug __UNIQUE_ID_ddebug600 = {.modname = (char *)"mt7601u", .function = (char *)"mt7601u_tssi_cal", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c", .format = (char *)"final diff: %08x\n", .lineno = (unsigned int)934U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 934 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug600.key.dd_key_false.key,(_Bool)0);
    #line 934 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 934 
                                                  __dynamic_dev_dbg(& __UNIQUE_ID_ddebug600,dev->dev,(char *)"final diff: %08x\n",diff_pwr);
  }
  #line 936 
  val = mt7601u_rr(dev,5044U);
  #line 937 
  curr_pwr = s6_to_int((unsigned int)((unsigned long)val & 63UL));
  #line 938 
  diff_pwr += curr_pwr;
  #line 939 
  val = (val & 4294967232U) | int_to_s6(diff_pwr);
  #line 940 
  mt7601u_wr(dev,5044U,val);
  #line 942 
  return mt7601u_mcu_tssi_read_kick(dev,(int)hvga);
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static u8 mt7601u_agc_default(struct mt7601u_dev *dev)
{
  #line 947 
  return (unsigned char)((unsigned int)((unsigned char)((int)(dev->ee)->lna_gain + 18)) * 2U);
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_agc_reset(struct mt7601u_dev *dev)
{
  #line 952 
  u8 agc = mt7601u_agc_default(dev);
  #line 954 
  mt7601u_bbp_wr(dev,(unsigned char)66,(unsigned char)((int)agc));
  #line 955 
  return;
}

#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_agc_save(struct mt7601u_dev *dev)
{
  #line 959 
  dev->agc_save = (unsigned char)mt7601u_bbp_rr(dev,(unsigned char)66);
  #line 960 
  return;
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_agc_restore(struct mt7601u_dev *dev)
{
  #line 964 
  mt7601u_bbp_wr(dev,(unsigned char)66,(unsigned char)((int)dev->agc_save));
  #line 965 
  return;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_agc_tune(struct mt7601u_dev *dev)
{
  #line 970 
  long avg_rssi;
  #line 969 
  u8 val = mt7601u_agc_default(dev);
  #line 972 
  if ((int)test_bit(4L,& dev->state) != 0) 
                                           #line 973 
                                           return;
  #line 979 
  cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 980 
  avg_rssi = (long)ewma_rssi_read(& dev->avg_rssi);
  #line 981 
  cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 982 
  if (avg_rssi == 0L) 
                      #line 983 
                      return;
  #line 985 
  avg_rssi = - avg_rssi;
  #line 986 
  if (avg_rssi < -69L) 
                       #line 987 
                       val = (unsigned char)((unsigned int)val + 224U);
  else 
    #line 988 
    if (avg_rssi < -59L) 
                         #line 989 
                         val = (unsigned char)((unsigned int)val + 240U);
  #line 991 
  ;
  #line 991 
  if ((int)val != mt7601u_bbp_rr(dev,(unsigned char)66)) 
                                                         #line 992 
                                                         mt7601u_bbp_wr(dev,(unsigned char)66,(unsigned char)((int)val));
  #line 993 
  return;
}

#line 999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_phy_calibrate(struct work_struct *work)
{
  #line 1001 
  void *__mptr;
  #line 1001 
  __mptr = (void *)work;
  #line 1001 
  struct mt7601u_dev *dev = ((struct mt7601u_dev *)(__mptr + 18446744073709551080U));
  #line 1004 
  mt7601u_agc_tune(dev);
  #line 1005 
  mt7601u_tssi_cal(dev);
  #line 1007 
  if (! (dev->ee)->tssi_enabled) 
                                 #line 1008 
                                 dev->raw_temp = mt7601u_read_temp(dev);
  #line 1009 
  mt7601u_temp_comp(dev,(_Bool)1);
  #line 1011 
  ieee80211_queue_delayed_work(dev->hw,& dev->cal_work,1000UL);
  #line 1012 
  return;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static unsigned long __mt7601u_phy_freq_cal(struct mt7601u_dev *dev, s8 last_offset, u8 phy_mode)
{
  #line 1045 
  signed char __x_0;
  #line 1045 
  int tmp_1;
  #line 1018 
  u8 activate_threshold;
  #line 1018 
  u8 deactivate_threshold;
  #line 1069 
  unsigned long tmp_3;
  #line 1020 
  trace_freq_cal_offset(dev,(unsigned char)((int)phy_mode),(signed char)((int)last_offset));
  #line 1023 
  if ((int)last_offset == -128) 
                                #line 1024 
                                return 125UL;
  #line 1026 
  switch ((int)phy_mode) {
    #line 1027 
    case 0: 
            #line 1027 
    ;
    #line 1028 
    activate_threshold = (unsigned char)19U;
    #line 1029 
    deactivate_threshold = (unsigned char)5U;
    #line 1030 
    break;
    #line 1031 
    case 1: 
            #line 1031 
    ;
    #line 1032 
    activate_threshold = (unsigned char)102U;
    #line 1033 
    deactivate_threshold = (unsigned char)32U;
    #line 1034 
    break;
    #line 1035 
    case 2: 
            #line 1035 
    ;
    #line 1036 
    case 3: 
            #line 1036 
    ;
    #line 1037 
    activate_threshold = (unsigned char)82U;
    #line 1038 
    deactivate_threshold = (unsigned char)20U;
    #line 1039 
    break;
    #line 1040 
    default: 
             #line 1040 
    ;
    {
      #line 1041 
      int __ret_warn_on = 1;
      #line 1041 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 1042 
        ldv_inline_asm();
        #line 1043 
        ldv_inline_asm();
      }
      #line 1041 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 1042 
    return 2500UL;
  }
  #line 1045 
  __x_0 = last_offset;
  #line 1045 
  if ((int)__x_0 < 0) 
                      #line 1045 
                      tmp_1 = - ((int)__x_0); else 
                                                   #line 1045 
                                                   tmp_1 = (int)__x_0;
  #line 1045 
  ;
  #line 1045 
  if (tmp_1 >= (int)activate_threshold) 
                                        #line 1046 
                                        dev->freq_cal.adjusting = (_Bool)1;
  else {
    #line 1047 
    signed char __x;
    #line 1047 
    int tmp_0;
    #line 1047 
    __x = last_offset;
    #line 1047 
    if ((int)__x < 0) 
                      #line 1047 
                      tmp_0 = - ((int)__x); else 
                                                 #line 1047 
                                                 tmp_0 = (int)__x;
    #line 1047 
    ;
    #line 1047 
    if (tmp_0 <= (int)deactivate_threshold) 
                                            #line 1048 
                                            dev->freq_cal.adjusting = (_Bool)0;
  }
  #line 1050 
  if (! dev->freq_cal.adjusting) 
                                 #line 1051 
                                 return 2500UL;
  #line 1053 
  if ((int)last_offset > (int)deactivate_threshold) 
    #line 1054 
    if ((unsigned int)dev->freq_cal.freq != 0U) 
                                                #line 1055 
                                                dev->freq_cal.freq = (u8)((int)dev->freq_cal.freq - 1); else 
                                                                    #line 1057 
                                                                    dev->freq_cal.adjusting = (_Bool)0;
  else 
    #line 1058 
    if ((int)last_offset < - ((int)deactivate_threshold)) 
      #line 1059 
      if ((unsigned int)dev->freq_cal.freq <= 190U) 
                                                    #line 1060 
                                                    dev->freq_cal.freq = (u8)((int)dev->freq_cal.freq + 1); else 
                                                                    #line 1062 
                                                                    dev->freq_cal.adjusting = (_Bool)0;
  #line 1065 
  trace_freq_cal_adjust(dev,(unsigned char)((int)dev->freq_cal.freq));
  #line 1066 
  mt7601u_rf_wr(dev,(unsigned char)0,(unsigned char)12,(unsigned char)((int)dev->freq_cal.freq));
  #line 1067 
  mt7601u_vco_cal(dev);
  #line 1069 
  if ((int)dev->freq_cal.adjusting != 0) 
                                         #line 1069 
                                         tmp_3 = 125UL; else 
                                                             #line 1069 
                                                             tmp_3 = 2500UL;
  #line 1069 
  return tmp_3;
}

#line 1073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static void mt7601u_phy_freq_cal(struct work_struct *work)
{
  #line 1075 
  void *__mptr;
  #line 1077 
  s8 last_offset;
  #line 1078 
  u8 phy_mode;
  #line 1079 
  unsigned long delay;
  #line 1075 
  __mptr = (void *)work;
  #line 1075 
  struct mt7601u_dev *dev = ((struct mt7601u_dev *)(__mptr + 18446744073709548088U));
  #line 1081 
  cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 1082 
  last_offset = dev->bcn_freq_off;
  #line 1083 
  phy_mode = dev->bcn_phy_mode;
  #line 1084 
  cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 1086 
  delay = __mt7601u_phy_freq_cal(dev,(signed char)((int)last_offset),(unsigned char)((int)phy_mode));
  #line 1087 
  ieee80211_queue_delayed_work(dev->hw,& dev->freq_cal.work,delay);
  #line 1089 
  cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 1090 
  dev->bcn_freq_off = (signed char)(-128);
  #line 1091 
  cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 1092 
  return;
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_phy_con_cal_onoff(struct mt7601u_dev *dev, struct ieee80211_bss_conf *info)
{
  #line 1097 
  if (! info->assoc) 
                     #line 1098 
                     cancel_delayed_work_sync(& dev->freq_cal.work);
  #line 1101 
  cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 1102 
  ether_addr_copy((u8 *)(& dev->ap_bssid),info->bssid);
  #line 1103 
  ewma_rssi_init(& dev->avg_rssi);
  #line 1104 
  dev->bcn_freq_off = (signed char)(-128);
  #line 1105 
  cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev(& dev->con_mon_lock);
  #line 1107 
  dev->freq_cal.freq = (dev->ee)->rf_freq_off;
  #line 1108 
  dev->freq_cal.enabled = info->assoc;
  #line 1109 
  dev->freq_cal.adjusting = (_Bool)0;
  #line 1111 
  if ((int)info->assoc != 0) 
                             #line 1112 
                             ieee80211_queue_delayed_work(dev->hw,& dev->freq_cal.work,7500UL);
  #line 1113 
  return;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
static int mt7601u_init_cal(struct mt7601u_dev *dev)
{
  #line 1118 
  u32 mac_ctrl;
  #line 1119 
  int ret;
  #line 1121 
  dev->raw_temp = mt7601u_read_bootup_temp(dev);
  #line 1122 
  dev->curr_temp = ((int)dev->raw_temp - (int)(dev->ee)->ref_temp) * 39;
  #line 1124 
  dev->dpd_temp = dev->curr_temp;
  #line 1126 
  mac_ctrl = mt7601u_rr(dev,4100U);
  #line 1128 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_R,0U);
  #line 1129 
  if (ret != 0) 
                #line 1130 
                return ret;
  #line 1132 
  ret = mt7601u_rf_rr(dev,(unsigned char)0,(unsigned char)4);
  #line 1133 
  if (ret < 0) 
               #line 1134 
               return ret;
  #line 1135 
  ret |= 128;
  #line 1136 
  ret = mt7601u_rf_wr(dev,(unsigned char)0,(unsigned char)4,(unsigned char)((int)((unsigned char)ret)));
  #line 1137 
  if (ret != 0) 
                #line 1138 
                return ret;
  #line 1139 
  msleep(2U);
  #line 1141 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_TXDCOC,0U);
  #line 1142 
  if (ret != 0) 
                #line 1143 
                return ret;
  #line 1145 
  mt7601u_rxdc_cal(dev);
  #line 1147 
  ret = mt7601u_set_bw_filter(dev,(_Bool)1);
  #line 1148 
  if (ret != 0) 
                #line 1149 
                return ret;
  #line 1150 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_LOFT,0U);
  #line 1151 
  if (ret != 0) 
                #line 1152 
                return ret;
  #line 1153 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_TXIQ,0U);
  #line 1154 
  if (ret != 0) 
                #line 1155 
                return ret;
  #line 1156 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_RXIQ,0U);
  #line 1157 
  if (ret != 0) 
                #line 1158 
                return ret;
  #line 1159 
  ret = mt7601u_mcu_calibrate(dev,(enum mcu_calibrate)MCU_CAL_DPD,(unsigned int)dev->dpd_temp);
  #line 1160 
  if (ret != 0) 
                #line 1161 
                return ret;
  #line 1163 
  mt7601u_rxdc_cal(dev);
  #line 1165 
  mt7601u_tssi_dc_gain_cal(dev);
  #line 1167 
  mt7601u_wr(dev,4100U,mac_ctrl);
  #line 1169 
  mt7601u_temp_comp(dev,(_Bool)1);
  #line 1171 
  return 0;
}

#line 1174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_bbp_set_bw(struct mt7601u_dev *dev, int bw)
{
  #line 1176 
  u32 val;
  #line 1176 
  u32 old;
  #line 1193 
  int tmp_0;
  #line 1178 
  if ((int)dev->bw == bw) {
    #line 1180 
    int tmp;
    #line 1180 
    if (bw == 0) 
                 #line 1180 
                 tmp = 0; else 
                               #line 1180 
                               tmp = 16;
    #line 1180 
    ;
    #line 1180 
    mt7601u_bbp_rmc(dev,(unsigned char)4,(unsigned char)24,(unsigned char)tmp);
    #line 1182 
    return 0;
  }
  #line 1184 
  dev->bw = (unsigned char)bw;
  #line 1187 
  old = mt7601u_rr(dev,4100U);
  #line 1188 
  val = old & 4294967283U;
  #line 1189 
  mt7601u_wr(dev,4100U,val);
  #line 1190 
  mt76_poll(dev,4608U,3U,0U,500000);
  #line 1193 
  if (bw == 0) 
               #line 1193 
               tmp_0 = 0; else 
                               #line 1193 
                               tmp_0 = 16;
  #line 1193 
  ;
  #line 1193 
  mt7601u_bbp_rmc(dev,(unsigned char)4,(unsigned char)24,(unsigned char)tmp_0);
  #line 1195 
  mt7601u_wr(dev,4100U,old);
  #line 1197 
  return mt7601u_load_bbp_temp_table_bw(dev);
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_set_rx_path(struct mt7601u_dev *dev, u8 path)
{
  #line 1207 
  mt7601u_bbp_rmw(dev,(unsigned char)3,(unsigned char)24,(unsigned char)((int)path << 3U));
  #line 1208 
  return;
}

#line 1215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
void mt7601u_set_tx_dac(struct mt7601u_dev *dev, u8 dac)
{
  #line 1217 
  mt7601u_bbp_rmc(dev,(unsigned char)1,(unsigned char)24,(unsigned char)((int)dac << 3U));
  #line 1218 
  return;
}

#line 1220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/phy.c"
int mt7601u_phy_init(struct mt7601u_dev *dev)
{
  #line 1222 
  int ret;
  #line 1224 
  dev->rf_pa_mode[0] = mt7601u_rr(dev,4636U);
  #line 1225 
  dev->rf_pa_mode[1] = mt7601u_rr(dev,4640U);
  #line 1227 
  ret = mt7601u_rf_wr(dev,(unsigned char)0,(unsigned char)12,(unsigned char)((int)(dev->ee)->rf_freq_off));
  #line 1228 
  if (ret != 0) 
                #line 1229 
                return ret;
  #line 1230 
  ret = mt7601u_write_reg_pairs(dev,0U,(struct mt76_reg_pair *)(& rf_central),44);
  #line 1232 
  if (ret != 0) 
                #line 1233 
                return ret;
  #line 1234 
  ret = mt7601u_write_reg_pairs(dev,0U,(struct mt76_reg_pair *)(& rf_channel),60);
  #line 1236 
  if (ret != 0) 
                #line 1237 
                return ret;
  #line 1238 
  ret = mt7601u_write_reg_pairs(dev,0U,(struct mt76_reg_pair *)(& rf_vga),59);
  #line 1239 
  if (ret != 0) 
                #line 1240 
                return ret;
  #line 1242 
  ret = mt7601u_init_cal(dev);
  #line 1243 
  if (ret != 0) 
                #line 1244 
                return ret;
  #line 1246 
  dev->prev_pwr_diff = 100;
  {
    #line 1248 
    struct lock_class_key __key;
    #line 1248 
    __init_work(& dev->cal_work.work,0);
    #line 1248 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 1248 
    dev->cal_work.work.data = __constr_expr_41;
    #line 1248 
    lockdep_init_map(& dev->cal_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1248 
    INIT_LIST_HEAD(& dev->cal_work.work.entry);
    #line 1248 
    dev->cal_work.work.func = & mt7601u_phy_calibrate;
  }
  {
    #line 1248 
    struct lock_class_key __key_0;
    #line 1248 
    init_timer_key(& dev->cal_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&dev->cal_work)->timer",& __key_0);
  }
  {
    #line 1249 
    struct lock_class_key __key_1;
    #line 1249 
    __init_work(& dev->freq_cal.work.work,0);
    #line 1249 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 1249 
    dev->freq_cal.work.work.data = __constr_expr_42;
    #line 1249 
    lockdep_init_map(& dev->freq_cal.work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 1249 
    INIT_LIST_HEAD(& dev->freq_cal.work.work.entry);
    #line 1249 
    dev->freq_cal.work.work.func = & mt7601u_phy_freq_cal;
  }
  {
    #line 1249 
    struct lock_class_key __key_2;
    #line 1249 
    init_timer_key(& dev->freq_cal.work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&dev->freq_cal.work)->timer",& __key_2);
  }
  #line 1251 
  return 0;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 139 
  ldv_init_list_head(list);
  #line 140 
  return;
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_mutex_lock_reg_atomic_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 804 
  ldv_mutex_model_lock(lock,(char *)"reg_atomic_mutex_of_mt7601u_dev");
  #line 805 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_mutex_unlock_reg_atomic_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 811 
  ldv_mutex_model_unlock(lock,(char *)"reg_atomic_mutex_of_mt7601u_dev");
  #line 812 
  return;
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_mutex_lock_hw_atomic_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 818 
  ldv_mutex_model_lock(lock,(char *)"hw_atomic_mutex_of_mt7601u_dev");
  #line 819 
  return;
}

#line 822  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_mutex_unlock_hw_atomic_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 825 
  ldv_mutex_model_unlock(lock,(char *)"hw_atomic_mutex_of_mt7601u_dev");
  #line 826 
  return;
}

#line 829  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 832 
  ldv_spin_model_lock((char *)"con_mon_lock_of_mt7601u_dev");
  #line 834 
  spin_lock_bh(lock);
  #line 835 
  return;
}

#line 838  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/phy.i.aux"
static void cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 841 
  ldv_spin_model_unlock((char *)"con_mon_lock_of_mt7601u_dev");
  #line 843 
  spin_unlock_bh(lock);
  #line 844 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_6519 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_lock_bh_mac_lock_of_mt7601u_dev(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 837  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_unlock_bh_mac_lock_of_mt7601u_dev(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_mt7601u_dev(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 801 
static void cif___ldv_spin_lock_lock_of_mt7601u_dev(spinlock_t *lock);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 221 
#line 221 
int rcu_read_lock_held(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  rcu_read_lock_sched_notrace();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  rcu_read_unlock_sched_notrace();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_beacon(__le16 fc)
{
  #line 468 
  return (_Bool)(((int)fc & 252) == 128);
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_rx_status *IEEE80211_SKB_RXCB(struct sk_buff *skb)
{
  #line 1121 
  return (struct ieee80211_rx_status *)(& skb->cb);
}

#line 4597 
#line 4597 
void ieee80211_tx_status_ext(struct ieee80211_hw *, struct ieee80211_tx_status *);
#line 4616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_tx_status_noskb(struct ieee80211_hw *hw, struct ieee80211_sta *sta, struct ieee80211_tx_info *info)
{
  #line 4620 
  struct ieee80211_tx_status status = {.sta = sta, .info = info, .skb = (struct sk_buff *)0, .rate = (struct rate_info *)0};
  #line 4625 
  ieee80211_tx_status_ext(hw,& status);
  #line 4626 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static void ewma_rssi_add(struct ewma_rssi *e, unsigned long val)
{
  #line 135 
  union __anonunion___u_7477 __u;
  #line 134 
  __read_once_size((void *)(& e->internal),(void *)(& __u.__c),8);
  #line 134 
  unsigned long internal = (__u.__val);
  #line 134 
  unsigned long weight_rcp = 2UL;
  #line 134 
  unsigned long precision = 10UL;
  {
    #line 135 
    unsigned long tmp_0;
    #line 135 
    if (internal != 0UL) 
                         #line 135 
                         tmp_0 = (((internal << weight_rcp) - internal) + (val << precision)) >> weight_rcp; else 
                                                                    #line 135 
                                                                    tmp_0 = val << precision;
    #line 135 
    union __anonunion___u_7479 __u_0 = {.__val = tmp_0};
    #line 134 
    __write_once_size((void *)(& e->internal),(void *)(& __u_0.__c),8);
    #line 134 
    unsigned long tmp_2 = __u_0.__val;
  }
  #line 136 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
__inline static u32 mt76_clear(struct mt7601u_dev *dev, u32 offset, u32 val)
{
  #line 323 
  return mt76_rmw(dev,offset,val,0U);
}

#line 358 
#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_work(struct work_struct *work);
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_set_protection(struct mt7601u_dev *dev, bool legacy_prot, int ht_mode);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_set_short_preamble(struct mt7601u_dev *dev, bool short_preamb);
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_config_tsf(struct mt7601u_dev *dev, bool enable, int interval);
#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_wcid_setup(struct mt7601u_dev *dev, u8 idx, u8 vif_idx, u8 *mac);
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_set_ampdu_factor(struct mt7601u_dev *dev);
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
u32 mt76_mac_process_rx(struct mt7601u_dev *dev, struct sk_buff *skb, u8 *data, void *rxi);
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
int mt76_mac_wcid_set_key(struct mt7601u_dev *dev, u8 idx, struct ieee80211_key_conf *key);
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt76_mac_wcid_set_rate(struct mt7601u_dev *dev, struct mt76_wcid *wcid, struct ieee80211_tx_rate *rate);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
int mt76_mac_shared_key_setup(struct mt7601u_dev *dev, u8 vif_idx, u8 key_idx, struct ieee80211_key_conf *key);
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
u16 mt76_mac_tx_rate_val(struct mt7601u_dev *dev, struct ieee80211_tx_rate *rate, u8 *nss_val);
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
struct mt76_tx_status mt7601u_mac_fetch_tx_status(struct mt7601u_dev *dev);
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.h"
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt76_send_tx_status(struct mt7601u_dev *dev, struct mt76_tx_status *stat);
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
#line 363 
struct tracepoint __tracepoint_set_key;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_set_key(struct mt7601u_dev *dev, u8 val)
{
  #line 363 
  int pscr_ret___0;
  #line 363 
  if ((int)static_key_false(& __tracepoint_set_key.key) != 0) {
    #line 363 
    int pscr_ret__;
    #line 363 
    struct tracepoint_func *________p1;
    #line 363 
    struct tracepoint_func *it_func_ptr;
    #line 363 
    void *it_func;
    #line 363 
    void *__data;
    #line 363 
    int __idx = 0;
    {
      #line 363 
      void *__vpp_verify = (void *)0;
      #line 363 
      void *tmp = __vpp_verify;
    }
    #line 363 
    switch (4UL) {
      #line 363 
      int pfo_ret___2;
      #line 363 
      int pfo_ret__;
      #line 363 
      int pfo_ret___0;
      #line 363 
      int pfo_ret___1;
      #line 363 
      case (unsigned long)1: 
                             #line 363 
      ;
      #line 363 
      switch (4UL) {
        #line 363 
        case (unsigned long)1: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)2: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)4: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)8: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        default: 
                 #line 363 
        ;
        #line 363 
        __bad_percpu_size();
      }
      #line 363 
      pscr_ret__ = pfo_ret__;
      #line 363 
      break;
      #line 363 
      case (unsigned long)2: 
                             #line 363 
      ;
      #line 363 
      switch (4UL) {
        #line 363 
        case (unsigned long)1: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)2: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)4: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)8: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        default: 
                 #line 363 
        ;
        #line 363 
        __bad_percpu_size();
      }
      #line 363 
      pscr_ret__ = pfo_ret___0;
      #line 363 
      break;
      #line 363 
      case (unsigned long)4: 
                             #line 363 
      ;
      #line 363 
      switch (4UL) {
        #line 363 
        case (unsigned long)1: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)2: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)4: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)8: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        default: 
                 #line 363 
        ;
        #line 363 
        __bad_percpu_size();
      }
      #line 363 
      pscr_ret__ = pfo_ret___1;
      #line 363 
      break;
      #line 363 
      case (unsigned long)8: 
                             #line 363 
      ;
      #line 363 
      switch (4UL) {
        #line 363 
        case (unsigned long)1: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)2: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)4: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        case (unsigned long)8: 
                               #line 363 
        ;
        #line 364 
        ldv_inline_asm();
        #line 363 
        break;
        #line 363 
        default: 
                 #line 363 
        ;
        #line 363 
        __bad_percpu_size();
      }
      #line 363 
      pscr_ret__ = pfo_ret___2;
      #line 363 
      break;
      #line 363 
      default: 
               #line 363 
      ;
      #line 363 
      __bad_size_call_parameter();
      #line 363 
      break;
    }
    #line 363 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 363 
                                                               return;
    {
      #line 363 
      int __ret_warn_on = 0;
      #line 363 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 364 
        ldv_inline_asm();
        #line 365 
        ldv_inline_asm();
      }
      #line 363 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 363 
    __preempt_count_add(1);
    #line 364 
    ldv_inline_asm();
    {
      #line 364 
      union __anonunion___u_7561 __u;
      #line 363 
      __read_once_size((void *)(& __tracepoint_set_key.funcs),(void *)(& __u.__c),8);
      #line 363 
      ________p1 = (__u.__val);
      }
    #line 363 
    it_func_ptr = ________p1;
    #line 363 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 363 
      while (1) {
        #line 363 
        it_func = it_func_ptr->func;
        #line 363 
        __data = it_func_ptr->data;
        #line 363 
        (*((void (*)(void *, struct mt7601u_dev *, u8 ))it_func))(__data,dev,(unsigned char)((int)val));
        #line 363 
        it_func_ptr ++;
        #line 364 
        ;
        #line 364 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 363 
                                                break;
      }
    #line 365 
    ldv_inline_asm();
    #line 363 
    __preempt_count_sub(1);
  }
  {
    #line 363 
    void *__vpp_verify_0 = (void *)0;
    #line 363 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 363 
  switch (4UL) {
    #line 363 
    int pfo_ret___3;
    #line 363 
    int pfo_ret___4;
    #line 363 
    int pfo_ret___5;
    #line 363 
    int pfo_ret___6;
    #line 363 
    case (unsigned long)1: 
                           #line 363 
    ;
    #line 363 
    switch (4UL) {
      #line 363 
      case (unsigned long)1: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)2: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)4: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)8: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      default: 
               #line 363 
      ;
      #line 363 
      __bad_percpu_size();
    }
    #line 363 
    pscr_ret___0 = pfo_ret___3;
    #line 363 
    break;
    #line 363 
    case (unsigned long)2: 
                           #line 363 
    ;
    #line 363 
    switch (4UL) {
      #line 363 
      case (unsigned long)1: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)2: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)4: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)8: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      default: 
               #line 363 
      ;
      #line 363 
      __bad_percpu_size();
    }
    #line 363 
    pscr_ret___0 = pfo_ret___4;
    #line 363 
    break;
    #line 363 
    case (unsigned long)4: 
                           #line 363 
    ;
    #line 363 
    switch (4UL) {
      #line 363 
      case (unsigned long)1: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)2: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)4: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)8: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      default: 
               #line 363 
      ;
      #line 363 
      __bad_percpu_size();
    }
    #line 363 
    pscr_ret___0 = pfo_ret___5;
    #line 363 
    break;
    #line 363 
    case (unsigned long)8: 
                           #line 363 
    ;
    #line 363 
    switch (4UL) {
      #line 363 
      case (unsigned long)1: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)2: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)4: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      case (unsigned long)8: 
                             #line 363 
      ;
      #line 364 
      ldv_inline_asm();
      #line 363 
      break;
      #line 363 
      default: 
               #line 363 
      ;
      #line 363 
      __bad_percpu_size();
    }
    #line 363 
    pscr_ret___0 = pfo_ret___6;
    #line 363 
    break;
    #line 363 
    default: 
             #line 363 
    ;
    #line 363 
    __bad_size_call_parameter();
    #line 363 
    break;
  }
  #line 363 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 363 
    rcu_read_lock_sched_notrace();
    {
      #line 364 
      union __anonunion___u_7563 __u_0;
      #line 363 
      __read_once_size((void *)(& __tracepoint_set_key.funcs),(void *)(& __u_0.__c),8);
      #line 363 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 363 
        bool __warned;
        #line 363 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 363 
          if (! __warned) {
            #line 363 
            if (rcu_read_lock_sched_held() == 0) {
              #line 363 
              __warned = (_Bool)1;
              #line 363 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",363,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 363 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 363 
    rcu_read_unlock_sched_notrace();
  }
  #line 365 
  return;
}

#line 368 
#line 368 
struct tracepoint __tracepoint_set_shared_key;
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_set_shared_key(struct mt7601u_dev *dev, u8 vid, u8 key)
{
  #line 368 
  int pscr_ret___0;
  #line 368 
  if ((int)static_key_false(& __tracepoint_set_shared_key.key) != 0) {
    #line 368 
    struct tracepoint_func *________p1;
    #line 368 
    int pscr_ret__;
    #line 368 
    struct tracepoint_func *it_func_ptr;
    #line 368 
    void *it_func;
    #line 368 
    void *__data;
    #line 368 
    int __idx = 0;
    {
      #line 368 
      void *__vpp_verify = (void *)0;
      #line 368 
      void *tmp = __vpp_verify;
    }
    #line 368 
    switch (4UL) {
      #line 368 
      int pfo_ret__;
      #line 368 
      int pfo_ret___0;
      #line 368 
      int pfo_ret___1;
      #line 368 
      int pfo_ret___2;
      #line 368 
      case (unsigned long)1: 
                             #line 368 
      ;
      #line 368 
      switch (4UL) {
        #line 368 
        case (unsigned long)1: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)2: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)4: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)8: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        default: 
                 #line 368 
        ;
        #line 368 
        __bad_percpu_size();
      }
      #line 368 
      pscr_ret__ = pfo_ret__;
      #line 368 
      break;
      #line 368 
      case (unsigned long)2: 
                             #line 368 
      ;
      #line 368 
      switch (4UL) {
        #line 368 
        case (unsigned long)1: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)2: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)4: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)8: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        default: 
                 #line 368 
        ;
        #line 368 
        __bad_percpu_size();
      }
      #line 368 
      pscr_ret__ = pfo_ret___0;
      #line 368 
      break;
      #line 368 
      case (unsigned long)4: 
                             #line 368 
      ;
      #line 368 
      switch (4UL) {
        #line 368 
        case (unsigned long)1: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)2: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)4: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)8: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        default: 
                 #line 368 
        ;
        #line 368 
        __bad_percpu_size();
      }
      #line 368 
      pscr_ret__ = pfo_ret___1;
      #line 368 
      break;
      #line 368 
      case (unsigned long)8: 
                             #line 368 
      ;
      #line 368 
      switch (4UL) {
        #line 368 
        case (unsigned long)1: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)2: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)4: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        case (unsigned long)8: 
                               #line 368 
        ;
        #line 369 
        ldv_inline_asm();
        #line 368 
        break;
        #line 368 
        default: 
                 #line 368 
        ;
        #line 368 
        __bad_percpu_size();
      }
      #line 368 
      pscr_ret__ = pfo_ret___2;
      #line 368 
      break;
      #line 368 
      default: 
               #line 368 
      ;
      #line 368 
      __bad_size_call_parameter();
      #line 368 
      break;
    }
    #line 368 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 368 
                                                               return;
    {
      #line 368 
      int __ret_warn_on = 0;
      #line 368 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 369 
        ldv_inline_asm();
        #line 370 
        ldv_inline_asm();
      }
      #line 368 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 368 
    __preempt_count_add(1);
    #line 369 
    ldv_inline_asm();
    {
      #line 369 
      union __anonunion___u_7565 __u;
      #line 368 
      __read_once_size((void *)(& __tracepoint_set_shared_key.funcs),(void *)(& __u.__c),8);
      #line 368 
      ________p1 = (__u.__val);
      }
    #line 368 
    it_func_ptr = ________p1;
    #line 368 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 368 
      while (1) {
        #line 368 
        it_func = it_func_ptr->func;
        #line 368 
        __data = it_func_ptr->data;
        #line 368 
        (*((void (*)(void *, struct mt7601u_dev *, u8 , u8 ))it_func))(__data,dev,(unsigned char)((int)vid),(unsigned char)((int)key));
        #line 368 
        it_func_ptr ++;
        #line 369 
        ;
        #line 369 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 368 
                                                break;
      }
    #line 370 
    ldv_inline_asm();
    #line 368 
    __preempt_count_sub(1);
  }
  {
    #line 368 
    void *__vpp_verify_0 = (void *)0;
    #line 368 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 368 
  switch (4UL) {
    #line 368 
    int pfo_ret___4;
    #line 368 
    int pfo_ret___5;
    #line 368 
    int pfo_ret___6;
    #line 368 
    int pfo_ret___3;
    #line 368 
    case (unsigned long)1: 
                           #line 368 
    ;
    #line 368 
    switch (4UL) {
      #line 368 
      case (unsigned long)1: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)2: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)4: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)8: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      default: 
               #line 368 
      ;
      #line 368 
      __bad_percpu_size();
    }
    #line 368 
    pscr_ret___0 = pfo_ret___3;
    #line 368 
    break;
    #line 368 
    case (unsigned long)2: 
                           #line 368 
    ;
    #line 368 
    switch (4UL) {
      #line 368 
      case (unsigned long)1: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)2: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)4: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)8: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      default: 
               #line 368 
      ;
      #line 368 
      __bad_percpu_size();
    }
    #line 368 
    pscr_ret___0 = pfo_ret___4;
    #line 368 
    break;
    #line 368 
    case (unsigned long)4: 
                           #line 368 
    ;
    #line 368 
    switch (4UL) {
      #line 368 
      case (unsigned long)1: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)2: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)4: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)8: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      default: 
               #line 368 
      ;
      #line 368 
      __bad_percpu_size();
    }
    #line 368 
    pscr_ret___0 = pfo_ret___5;
    #line 368 
    break;
    #line 368 
    case (unsigned long)8: 
                           #line 368 
    ;
    #line 368 
    switch (4UL) {
      #line 368 
      case (unsigned long)1: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)2: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)4: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      case (unsigned long)8: 
                             #line 368 
      ;
      #line 369 
      ldv_inline_asm();
      #line 368 
      break;
      #line 368 
      default: 
               #line 368 
      ;
      #line 368 
      __bad_percpu_size();
    }
    #line 368 
    pscr_ret___0 = pfo_ret___6;
    #line 368 
    break;
    #line 368 
    default: 
             #line 368 
    ;
    #line 368 
    __bad_size_call_parameter();
    #line 368 
    break;
  }
  #line 368 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 368 
    rcu_read_lock_sched_notrace();
    {
      #line 369 
      union __anonunion___u_7567 __u_0;
      #line 368 
      __read_once_size((void *)(& __tracepoint_set_shared_key.funcs),(void *)(& __u_0.__c),8);
      #line 368 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 368 
        bool __warned;
        #line 368 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 368 
          if (! __warned) {
            #line 368 
            if (rcu_read_lock_sched_held() == 0) {
              #line 368 
              __warned = (_Bool)1;
              #line 368 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",368,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 368 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 368 
    rcu_read_unlock_sched_notrace();
  }
  #line 370 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_set_macaddr(struct mt7601u_dev *dev, u8 *addr)
{
  #line 13 
  ether_addr_copy((u8 *)(& dev->macaddr),addr);
  #line 15 
  if (! is_valid_ether_addr((u8 *)(& dev->macaddr))) {
    #line 16 
    eth_random_addr((u8 *)(& dev->macaddr));
    #line 17 
    _dev_info(dev->dev,(char *)"Invalid MAC address, using random address %pM\n",(u8 *)(& dev->macaddr));
  }
  #line 22 
  ;
  #line 22 
  mt76_wr(dev,4104U,get_unaligned_le32((void *)(& dev->macaddr)));
  #line 23 
  ;
  #line 23 
  mt76_wr(dev,4108U,(unsigned int)get_unaligned_le16((void *)((u8 *)(& dev->macaddr) + 4U)) | (unsigned int)16711680UL);
  #line 26 
  return;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static void mt76_mac_process_tx_rate(struct ieee80211_tx_rate *txrate, u16 rate)
{
  #line 30 
  u8 idx = (unsigned char)((unsigned long)rate & 127UL);
  #line 32 
  txrate->idx = (signed char)0;
  #line 33 
  txrate->flags = (unsigned short)0U;
  #line 34 
  txrate->count = (unsigned short)1U;
  #line 36 
  switch ((unsigned long)((int)rate >> 14)) {
    #line 37 
    case (unsigned long)1: 
                           #line 37 
    ;
    #line 38 
    txrate->idx = (signed char)((unsigned int)idx + 4U);
    #line 39 
    return;
    #line 40 
    case (unsigned long)0: 
                           #line 40 
    ;
    #line 41 
    if ((unsigned int)idx > 7U) 
                                #line 42 
                                idx = (unsigned char)((unsigned int)idx + 248U);
    #line 44 
    txrate->idx = (signed char)idx;
    #line 45 
    return;
    #line 46 
    case (unsigned long)3: 
                           #line 46 
    ;
    #line 47 
    txrate->flags = (unsigned short)((unsigned int)txrate->flags | 16U);
    #line 49 
    case (unsigned long)2: 
                           #line 49 
    ;
    #line 50 
    txrate->flags = (unsigned short)((unsigned int)txrate->flags | 8U);
    #line 51 
    txrate->idx = (signed char)idx;
    #line 52 
    break;
    #line 53 
    default: 
             #line 53 
    ;
    {
      #line 54 
      int __ret_warn_on = 1;
      #line 54 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 55 
        ldv_inline_asm();
        #line 56 
        ldv_inline_asm();
      }
      #line 54 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 55 
    return;
  }
  #line 58 
  if ((((unsigned long)rate >> 7) & 1UL) == 1UL) 
                                                 #line 59 
                                                 txrate->flags = (unsigned short)((unsigned int)txrate->flags | 32U);
  #line 61 
  if (((unsigned long)rate & 256UL) != 0UL) 
                                            #line 62 
                                            txrate->flags = (unsigned short)((unsigned int)txrate->flags | 128U);
  #line 63 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static void mt76_mac_fill_tx_status(struct mt7601u_dev *dev, struct ieee80211_tx_info *info, struct mt76_tx_status *st)
{
  #line 73 
  int __UNIQUE_ID___x583;
  #line 73 
  int tmp;
  #line 70 
  int cur_idx;
  #line 70 
  int last_rate;
  #line 71 
  int i;
  #line 69 
  struct ieee80211_tx_rate *rate = (struct ieee80211_tx_rate *)(& info->__anonCompField_ieee80211_tx_info_195.status.rates);
  {
    #line 73 
    __UNIQUE_ID___x583 = (int)st->retry;
    #line 73 
    int __UNIQUE_ID___y584 = 3;
    #line 73 
    if (__UNIQUE_ID___x583 < __UNIQUE_ID___y584) 
                                                 #line 73 
                                                 tmp = __UNIQUE_ID___x583; else 
                                                                    #line 73 
                                                                    tmp = __UNIQUE_ID___y584;
    }
  #line 73 
  last_rate = tmp;
  #line 74 
  mt76_mac_process_tx_rate(rate + (unsigned long)last_rate,(unsigned short)((int)st->rate));
  #line 75 
  if (last_rate <= 2) 
                      #line 76 
                      (rate + ((unsigned long)last_rate + (unsigned long)1U))->idx = (signed char)(-1);
  #line 78 
  cur_idx = (int)(rate + (unsigned long)last_rate)->idx + (int)st->retry;
  #line 79 
  i = 0;
  #line 79 
  while (i <= last_rate) {
    {
      #line 81 
      int __UNIQUE_ID___x585;
      #line 81 
      int tmp_1;
      #line 80 
      (rate + (unsigned long)i)->flags = (rate + (unsigned long)last_rate)->flags;
      {
        #line 81 
        __UNIQUE_ID___x585 = 0;
        #line 81 
        int __UNIQUE_ID___y586 = cur_idx - i;
        #line 81 
        if (__UNIQUE_ID___x585 > __UNIQUE_ID___y586) 
                                                     #line 81 
                                                     tmp_1 = __UNIQUE_ID___x585; else 
                                                                    #line 81 
                                                                    tmp_1 = __UNIQUE_ID___y586;
        }
      #line 81 
      (rate + (unsigned long)i)->idx = (signed char)tmp_1;
      #line 82 
      (rate + (unsigned long)i)->count = (unsigned short)1U;
    }
    #line 79 
    i ++;
  }
  #line 85 
  if (last_rate > 0) 
                     #line 86 
                     (rate + ((unsigned long)last_rate + 18446744073709551615U))->count = (unsigned short)((unsigned int)((int)st->retry - (int)((unsigned char)last_rate)) + 1U);
  #line 88 
  info->__anonCompField_ieee80211_tx_info_195.status.ampdu_len = (unsigned char)1U;
  #line 89 
  info->__anonCompField_ieee80211_tx_info_195.status.ampdu_ack_len = (unsigned char)st->success;
  #line 91 
  if ((unsigned int)st->is_probe != 0U) 
                                        #line 92 
                                        info->flags |= 4096U;
  #line 94 
  if ((unsigned int)st->aggr != 0U) 
                                    #line 95 
                                    info->flags |= 1088U;
  #line 98 
  if ((unsigned int)st->ack_req == 0U) 
                                       #line 99 
                                       info->flags |= 4U;
  else 
    #line 100 
    if ((unsigned int)st->success != 0U) 
                                         #line 101 
                                         info->flags |= 512U;
  #line 102 
  return;
}

#line 138 
#line 138 
void __compiletime_assert_138(void);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
u16 mt76_mac_tx_rate_val(struct mt7601u_dev *dev, struct ieee80211_tx_rate *rate, u8 *nss_val)
{
  #line 107 
  u16 rateval;
  #line 108 
  u8 phy;
  #line 108 
  u8 rate_idx;
  #line 109 
  u8 nss = (unsigned char)1U;
  #line 110 
  u8 bw = (unsigned char)0U;
  #line 112 
  if (((int)rate->flags & 8) != 0) {
    #line 113 
    rate_idx = (unsigned char)rate->idx;
    #line 114 
    nss = (unsigned char)((unsigned int)((unsigned char)((int)rate->idx >> 3)) + 1U);
    #line 115 
    phy = (unsigned char)2U;
    #line 116 
    if (((int)rate->flags & 16) != 0) 
                                      #line 117 
                                      phy = (unsigned char)3U;
    #line 118 
    if (((int)rate->flags & 32) != 0) 
                                      #line 119 
                                      bw = (unsigned char)1U;
  }
  else {
    #line 121 
    struct ieee80211_rate *r;
    #line 123 
    u16 val;
    #line 122 
    int band = (int)(dev->chandef.chan)->band;
    #line 125 
    r = (((dev->hw)->wiphy)->bands[band])->bitrates + (unsigned long)rate->idx;
    #line 126 
    if (((int)rate->flags & 4) != 0) 
                                     #line 127 
                                     val = r->hw_value_short; else 
                                                                   #line 129 
                                                                   val = r->hw_value;
    #line 131 
    phy = (unsigned char)((int)val >> 8);
    #line 132 
    rate_idx = (unsigned char)val;
    #line 133 
    bw = (unsigned char)0U;
  }
  #line 136 
  if (0 != 0 && ((unsigned long)rate_idx & 18446744073709551488UL) != 0UL) 
    #line 136 
    __compiletime_assert_136();
  #line 136 
  rateval = (unsigned short)((unsigned long)rate_idx & 127UL);
  #line 137 
  if (0 != 0 && ((unsigned long)phy & 18446744073709551612UL) != 0UL) 
    #line 137 
    __compiletime_assert_137();
  #line 137 
  rateval = (unsigned short)((int)((unsigned short)(((unsigned long)phy << 14) & 65535UL)) | (int)rateval);
  #line 138 
  if (0 != 0 && ((unsigned long)bw & 18446744073709551614UL) != 0UL) 
    #line 138 
    __compiletime_assert_138();
  #line 138 
  rateval = (unsigned short)((int)((unsigned short)(((unsigned long)bw << 7) & 255UL)) | (int)rateval);
  #line 139 
  if (((int)rate->flags & 128) != 0) 
                                     #line 140 
                                     rateval = (unsigned short)((unsigned int)rateval | 256U);
  #line 142 
  *nss_val = nss;
  #line 143 
  return rateval;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt76_mac_wcid_set_rate(struct mt7601u_dev *dev, struct mt76_wcid *wcid, struct ieee80211_tx_rate *rate)
{
  #line 149 
  unsigned long flags;
  #line 151 
  cif___ldv_spin_lock_lock_of_mt7601u_dev(& dev->lock);
  #line 152 
  wcid->tx_rate = mt76_mac_tx_rate_val(dev,rate,& wcid->tx_rate_nss);
  #line 153 
  wcid->tx_rate_set = (_Bool)1;
  #line 154 
  cif_spin_unlock_irqrestore_lock_of_mt7601u_dev(& dev->lock,flags);
  #line 155 
  return;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
struct mt76_tx_status mt7601u_mac_fetch_tx_status(struct mt7601u_dev *dev)
{
  #line 160 
  u32 val;
  #line 159 
  struct mt76_tx_status stat = {.valid = (unsigned char)0, .success = (unsigned char)0, .aggr = (unsigned char)0, .ack_req = (unsigned char)0, .is_probe = (unsigned char)0, .wcid = (unsigned char)0, .pktid = (unsigned char)0, .retry = (unsigned char)0, .rate = (unsigned short)0};
  #line 162 
  val = mt7601u_rr(dev,5912U);
  #line 163 
  stat.valid = (unsigned char)(((unsigned long)val & 1UL) != 0UL);
  #line 164 
  stat.success = (unsigned char)(((unsigned long)val & 32UL) != 0UL);
  #line 165 
  stat.aggr = (unsigned char)(((unsigned long)val & 64UL) != 0UL);
  #line 166 
  stat.ack_req = (unsigned char)(((unsigned long)val & 128UL) != 0UL);
  #line 167 
  ;
  #line 167 
  stat.pktid = (unsigned char)(((unsigned long)val >> 1) & 15UL);
  #line 168 
  ;
  #line 168 
  stat.wcid = (unsigned char)(((unsigned long)val >> 8) & 255UL);
  #line 169 
  ;
  #line 169 
  stat.rate = (unsigned short)((unsigned long)(val >> 16));
  #line 171 
  return stat;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt76_send_tx_status(struct mt7601u_dev *dev, struct mt76_tx_status *stat)
{
  #line 179 
  void *msta;
  #line 176 
  struct ieee80211_tx_info info = {.flags = 0U, .band = (unsigned char)0, .hw_queue = (unsigned char)0, .ack_frame_id = (unsigned short)0, .tx_time_est = (unsigned short)0, .__anonCompField_ieee80211_tx_info_195 = {.control = {.__anonCompField___anonstruct_control_7460_193 = {.__anonCompField___anonunion_7461_192 = {.rates = {{.idx = (signed char)0, .count = (unsigned short)0, .flags = (unsigned short)0}, {.idx = (signed char)0, .count = (unsigned short)0, .flags = (unsigned short)0}, {.idx = (signed char)0, .count = (unsigned short)0, .flags = (unsigned short)0}, {.idx = (signed char)0, .count = (unsigned short)0, .flags = (unsigned short)0}}, .rts_cts_rate_idx = (signed char)0, .use_rts = (unsigned char)0, .use_cts_prot = (unsigned char)0, .short_preamble = (unsigned char)0, .skip_table = (unsigned char)0}}, .vif = (struct ieee80211_vif *)0, .hw_key = (struct ieee80211_key_conf *)0, .flags = 0U, .enqueue_time = 0U}}};
  #line 177 
  struct ieee80211_sta *sta = (struct ieee80211_sta *)0;
  #line 178 
  struct mt76_wcid *wcid = (struct mt76_wcid *)0;
  #line 181 
  rcu_read_lock();
  #line 182 
  if ((int)stat->wcid >= 0) {
    #line 183 
    struct mt76_wcid *________p1;
    {
      #line 184 
      union __anonunion___u_7570 __u;
      #line 183 
      __read_once_size((void *)(& dev->wcid[(int)stat->wcid]),(void *)(& __u.__c),8);
      #line 183 
      ________p1 = (__u.__val);
      {
        #line 183 
        bool __warned;
        #line 183 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 183 
          if (! __warned) {
            #line 183 
            if (rcu_read_lock_held() == 0) {
              #line 183 
              __warned = (_Bool)1;
              #line 183 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c",183,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      }
    #line 183 
    wcid = ________p1;
  }
  #line 185 
  if (wcid != (struct mt76_wcid *)0) {
    #line 186 
    void *__mptr;
    #line 187 
    void *__mptr_0;
    #line 186 
    __mptr = (void *)wcid;
    #line 186 
    msta = (void *)((struct mt76_sta *)__mptr);
    #line 187 
    __mptr_0 = msta;
    #line 187 
    sta = ((struct ieee80211_sta *)(__mptr_0 + 18446744073709551280U));
  }
  #line 191 
  mt76_mac_fill_tx_status(dev,& info,stat);
  #line 193 
  cif_spin_lock_bh_mac_lock_of_mt7601u_dev(& dev->mac_lock);
  #line 194 
  ieee80211_tx_status_noskb(dev->hw,sta,& info);
  #line 195 
  cif_spin_unlock_bh_mac_lock_of_mt7601u_dev(& dev->mac_lock);
  #line 197 
  rcu_read_unlock();
  #line 198 
  return;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_set_protection(struct mt7601u_dev *dev, bool legacy_prot, int ht_mode)
{
  #line 205 
  u32 prot[6U];
  #line 207 
  int i;
  #line 203 
  int mode = ht_mode & 3;
  #line 204 
  bool non_gf = (_Bool)((ht_mode & 4) != 0);
  #line 206 
  bool ht_rts[4U] = {};
  #line 209 
  prot[0] = 133431296U;
  #line 212 
  prot[1] = prot[0];
  #line 213 
  if ((int)legacy_prot != 0) 
                             #line 214 
                             prot[1] |= 131072U;
  #line 216 
  prot[4] = 24379392U;
  #line 216 
  prot[2] = prot[4];
  #line 217 
  prot[5] = 66322432U;
  #line 217 
  prot[3] = prot[5];
  #line 219 
  if ((int)legacy_prot != 0) {
    #line 220 
    prot[2] |= 3U;
    #line 221 
    prot[3] |= 3U;
    #line 222 
    prot[4] |= 3U;
    #line 223 
    prot[5] |= 3U;
  }
  else {
    #line 225 
    prot[2] |= 16388U;
    #line 226 
    prot[3] |= 16516U;
    #line 227 
    prot[4] |= 16388U;
    #line 228 
    prot[5] |= 16516U;
  }
  #line 231 
  switch (mode) {
    #line 232 
    case 0: 
            #line 232 
    ;
    #line 233 
    break;
    #line 235 
    case 1: 
            #line 235 
    ;
    #line 236 
    ht_rts[3] = (_Bool)1;
    #line 236 
    ht_rts[2] = ht_rts[3];
    #line 236 
    ht_rts[1] = ht_rts[2];
    #line 236 
    ht_rts[0] = ht_rts[1];
    #line 237 
    break;
    #line 239 
    case 2: 
            #line 239 
    ;
    #line 240 
    ht_rts[3] = (_Bool)1;
    #line 240 
    ht_rts[1] = ht_rts[3];
    #line 241 
    break;
    #line 243 
    case 3: 
            #line 243 
    ;
    #line 244 
    ht_rts[3] = (_Bool)1;
    #line 244 
    ht_rts[2] = ht_rts[3];
    #line 244 
    ht_rts[1] = ht_rts[2];
    #line 244 
    ht_rts[0] = ht_rts[1];
    #line 245 
    break;
  }
  #line 248 
  if ((int)non_gf != 0) {
    #line 249 
    ht_rts[3] = (_Bool)1;
    #line 249 
    ht_rts[2] = ht_rts[3];
  }
  #line 251 
  i = 0;
  #line 251 
  while (i <= 3) {
    #line 252 
    if ((int)ht_rts[i] != 0) 
                             #line 253 
                             prot[i + 2] |= 65536U;
    #line 251 
    i ++;
  }
  #line 255 
  i = 0;
  #line 255 
  while (i <= 5) {
    #line 256 
    mt7601u_wr(dev,(unsigned int)((i + 1241) * 4),prot[i]);
    #line 255 
    i ++;
  }
  #line 257 
  return;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_set_short_preamble(struct mt7601u_dev *dev, bool short_preamb)
{
  #line 261 
  if ((int)short_preamb != 0) 
                              #line 262 
                              mt76_set(dev,5124U,16U); else 
                                                            #line 264 
                                                            mt76_clear(dev,5124U,16U);
  #line 265 
  return;
}

#line 281 
#line 281 
void __compiletime_assert_281(void);
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_config_tsf(struct mt7601u_dev *dev, bool enable, int interval)
{
  #line 269 
  u32 val = mt7601u_rr(dev,4372U);
  #line 271 
  val &= 4293984255U;
  #line 275 
  if (! enable) {
    #line 276 
    mt7601u_wr(dev,4372U,val);
    #line 277 
    return;
  }
  #line 280 
  val &= 4294901760U;
  #line 281 
  if (0 != 0 && ((unsigned long)(interval << 4) & 18446744073709486080UL) != 0UL) 
    #line 281 
    __compiletime_assert_281();
  #line 284 
  val = (unsigned int)(((unsigned long)(interval << 4) & 65535UL) | 983040UL) | val;
  #line 282 
  return;
}

#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static void mt7601u_check_mac_err(struct mt7601u_dev *dev)
{
  #line 289 
  u32 val = mt7601u_rr(dev,4340U);
  #line 291 
  if (((unsigned long)val & 536870912UL) == 0UL || ((unsigned long)val & 160UL) == 0UL) 
    #line 292 
    return;
  #line 294 
  _dev_err(dev->dev,(char *)"Error: MAC specific condition occurred\n");
  #line 296 
  mt76_set(dev,4100U,1U);
  #line 297 
  __const_udelay(42950UL);
  #line 298 
  mt76_clear(dev,4100U,1U);
  #line 299 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_work(struct work_struct *work)
{
  #line 347 
  u32 __x;
  #line 347 
  u32 __d;
  #line 303 
  void *__mptr;
  #line 317 
  u32 sum;
  #line 317 
  u32 n;
  #line 318 
  int i;
  #line 318 
  int j;
  #line 318 
  int k;
  #line 347 
  int tmp_2;
  #line 303 
  __mptr = (void *)work;
  #line 303 
  struct mt7601u_dev *dev = ((struct mt7601u_dev *)(__mptr + 18446744073709550896U));
  #line 309 
  struct __anonstruct_spans_7573 spans[6U] = {{.addr_base = 5888U, .span = 3U, .stat_base = (u64 *)(& dev->stats.rx_stat)}, {.addr_base = 5900U, .span = 3U, .stat_base = (u64 *)(& dev->stats.tx_stat)}, {.addr_base = 5916U, .span = 1U, .stat_base = (u64 *)(& dev->stats.aggr_stat)}, {.addr_base = 5952U, .span = 1U, .stat_base = (u64 *)(& dev->stats.zero_len_del)}, {.addr_base = 5920U, .span = 8U, .stat_base = & dev->stats.aggr_n[0]}, {.addr_base = 5964U, .span = 8U, .stat_base = & dev->stats.aggr_n[16]}};
  #line 326 
  k = 0;
  #line 327 
  n = 0U;
  #line 328 
  sum = 0U;
  #line 329 
  i = 0;
  #line 329 
  while ((unsigned int)i <= 5U) {
    #line 330 
    j = 0;
    #line 330 
    while (spans[i].span > (unsigned int)j) {
      {
        #line 331 
        u32 val = mt7601u_rr(dev,spans[i].addr_base + (unsigned int)(j * 4));
        #line 333 
        *(spans[i].stat_base + (unsigned long)(j * 2)) += (unsigned long long)val & 65535ULL;
        #line 334 
        *(spans[i].stat_base + ((unsigned long)(j * 2) + (unsigned long)1U)) += (unsigned long long)(val >> 16);
        #line 337 
        if (spans[i].addr_base != 5920U && spans[i].addr_base != 5964U) 
          #line 339 
          goto __Cont;
        #line 341 
        n = ((val >> 16) + (val & 65535U)) + n;
        #line 342 
        sum = ((val & 65535U) * (unsigned int)(k * 2 + 1) + ((val >> 16) * (unsigned int)(k + 1)) * 2U) + sum;
        #line 344 
        k ++;
      }
      #line 330 
      __Cont: 
              #line 330 
      j ++;
    }
    #line 329 
    i ++;
  }
  #line 347 
  if (n != 0U) {
    #line 347 
    __x = sum;
    #line 347 
    __d = n;
    #line 347 
    tmp_2 = (int)((__d / 2U + __x) / __d);
  }
  else 
       #line 347 
       tmp_2 = 1;
  #line 347 
  ;
  #line 347 
  atomic_set(& dev->avg_ampdu_len,tmp_2);
  #line 349 
  mt7601u_check_mac_err(dev);
  #line 351 
  ieee80211_queue_delayed_work(dev->hw,& dev->mac_work,2500UL);
  #line 352 
  return;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_wcid_setup(struct mt7601u_dev *dev, u8 idx, u8 vif_idx, u8 *mac)
{
  #line 358 
  u32 attr;
  #line 357 
  u8 zmac[6U] = {};
  #line 360 
  ;
  #line 361 
  ;
  #line 360 
  attr = (unsigned int)(((unsigned long)vif_idx << 4) & 112UL) | (unsigned int)(((unsigned long)vif_idx << 8) & 2048UL);
  #line 363 
  mt76_wr(dev,(unsigned int)(((int)idx + 10752) * 4),attr);
  #line 365 
  if (mac != (u8 *)0U) 
                       #line 366 
                       memcpy((void *)(& zmac),(void *)mac,6UL);
  #line 368 
  mt7601u_addr_wr(dev,(unsigned int)(((int)idx + 768) * 8),(u8 *)(& zmac));
  #line 369 
  return;
}

#line 393 
#line 393 
void __compiletime_assert_393(void);
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
void mt7601u_mac_set_ampdu_factor(struct mt7601u_dev *dev)
{
  #line 373 
  struct ieee80211_sta *sta;
  #line 374 
  struct mt76_wcid *wcid;
  #line 375 
  void *msta;
  #line 377 
  int i;
  #line 376 
  u8 min_factor = (unsigned char)3U;
  #line 379 
  rcu_read_lock();
  #line 380 
  i = 0;
  #line 380 
  while ((unsigned int)i <= 127U) {
    {
      #line 386 
      void *__mptr_0;
      #line 388 
      u8 __UNIQUE_ID___x587;
      #line 381 
      struct mt76_wcid *________p1;
      #line 388 
      int tmp_5;
      #line 385 
      void *__mptr;
      {
        #line 382 
        union __anonunion___u_7576 __u;
        #line 381 
        __read_once_size((void *)(& dev->wcid[i]),(void *)(& __u.__c),8);
        #line 381 
        ________p1 = (__u.__val);
        {
          #line 381 
          bool __warned;
          #line 381 
          if (debug_lockdep_rcu_enabled() != 0) 
            #line 381 
            if (! __warned) {
              #line 381 
              if (rcu_read_lock_held() == 0) {
                #line 381 
                __warned = (_Bool)1;
                #line 381 
                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c",381,(char *)"suspicious rcu_dereference_check() usage");
              }
            }
        }
        }
      #line 381 
      wcid = ________p1;
      #line 382 
      if (wcid == (struct mt76_wcid *)0) 
                                         #line 383 
                                         goto __Cont;
      #line 385 
      __mptr = (void *)wcid;
      #line 385 
      msta = (void *)((struct mt76_sta *)__mptr);
      #line 386 
      __mptr_0 = msta;
      #line 386 
      sta = ((struct ieee80211_sta *)(__mptr_0 + 18446744073709551280U));
      {
        #line 388 
        __UNIQUE_ID___x587 = min_factor;
        #line 388 
        u8 __UNIQUE_ID___y588 = sta->ht_cap.ampdu_factor;
        #line 388 
        if ((int)__UNIQUE_ID___x587 < (int)__UNIQUE_ID___y588) 
                                                               #line 388 
                                                               tmp_5 = (int)__UNIQUE_ID___x587; else 
                                                                    #line 388 
                                                                    tmp_5 = (int)__UNIQUE_ID___y588;
        }
      #line 388 
      min_factor = (unsigned char)tmp_5;
    }
    #line 380 
    __Cont: 
            #line 380 
    i ++;
  }
  #line 390 
  rcu_read_unlock();
  #line 393 
  if (0 != 0 && ((unsigned long)min_factor & 18446744073709551612UL) != 0UL) 
    #line 393 
    __compiletime_assert_393();
  #line 392 
  ;
  #line 392 
  mt7601u_wr(dev,4120U,(unsigned int)(((unsigned long)min_factor << 12) & 12288UL) | 659455U);
  #line 393 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static void mt76_mac_process_rate(struct ieee80211_rx_status *status, u16 rate)
{
  #line 399 
  u8 idx = (unsigned char)((unsigned long)rate & 127UL);
  #line 401 
  switch ((unsigned long)((int)rate >> 14)) {
    #line 403 
    int __ret_warn_on;
    #line 415 
    int __ret_warn_on_0;
    #line 402 
    case (unsigned long)1: 
                           #line 402 
    ;
    #line 403 
    __ret_warn_on = (unsigned int)idx > 7U;
    #line 403 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 404 
      ldv_inline_asm();
      #line 405 
      ldv_inline_asm();
    }
    #line 403 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 404 
                                                  idx = (unsigned char)0U;
    #line 405 
    idx = (unsigned char)((unsigned int)idx + 4U);
    #line 407 
    status->rate_idx = idx;
    #line 408 
    return;
    #line 409 
    case (unsigned long)0: 
                           #line 409 
    ;
    #line 410 
    if ((unsigned int)idx > 7U) {
      #line 411 
      idx = (unsigned char)((unsigned int)idx + 248U);
      #line 412 
      status->enc_flags = (unsigned char)((unsigned int)status->enc_flags | 1U);
    }
    #line 415 
    __ret_warn_on_0 = (unsigned int)idx > 3U;
    #line 415 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 416 
      ldv_inline_asm();
      #line 417 
      ldv_inline_asm();
    }
    #line 415 
    if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                    #line 416 
                                                    idx = (unsigned char)0U;
    #line 418 
    status->rate_idx = idx;
    #line 419 
    return;
    #line 420 
    case (unsigned long)3: 
                           #line 420 
    ;
    #line 421 
    status->enc_flags = (unsigned char)((unsigned int)status->enc_flags | 8U);
    #line 423 
    case (unsigned long)2: 
                           #line 423 
    ;
    #line 424 
    status->encoding = (unsigned char)1U;
    #line 425 
    status->rate_idx = idx;
    #line 426 
    break;
    #line 427 
    default: 
             #line 427 
    ;
    {
      #line 428 
      int __ret_warn_on_1 = 1;
      #line 428 
      if ((long)(__ret_warn_on_1 != 0) != 0L) {
        #line 429 
        ldv_inline_asm();
        #line 430 
        ldv_inline_asm();
      }
      #line 428 
      long tmp_2 = (long)(__ret_warn_on_1 != 0);
    }
    #line 429 
    return;
  }
  #line 432 
  if (((unsigned long)rate & 256UL) != 0UL) 
                                            #line 433 
                                            status->enc_flags = (unsigned char)((unsigned int)status->enc_flags | 4U);
  #line 435 
  if (((unsigned long)rate & 1536UL) != 0UL) 
                                             #line 436 
                                             status->enc_flags = (unsigned char)((unsigned int)status->enc_flags | 16U);
  #line 438 
  if (((unsigned long)rate & 128UL) != 0UL) 
                                            #line 439 
                                            status->bw = (unsigned char)3U;
  #line 440 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static void mt7601u_rx_monitor_beacon(struct mt7601u_dev *dev, struct mt7601u_rxwi *rxwi, u16 rate, int rssi)
{
  #line 446 
  dev->bcn_freq_off = (signed char)rxwi->freq_off;
  #line 447 
  ;
  #line 447 
  dev->bcn_phy_mode = (unsigned char)((unsigned long)((int)rate >> 14));
  #line 448 
  ewma_rssi_add(& dev->avg_rssi,(unsigned long)(- rssi));
  #line 449 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static int mt7601u_rx_is_our_beacon(struct mt7601u_dev *dev, u8 *data)
{
  #line 456 
  int tmp_1;
  #line 454 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)data;
  #line 456 
  if ((int)ieee80211_is_beacon((unsigned short)((int)hdr->frame_control)) != 0) {
    #line 456 
    if ((int)ether_addr_equal((u8 *)(& hdr->addr2),(u8 *)(& dev->ap_bssid)) != 0) 
      #line 456 
      tmp_1 = 1; else 
                      #line 456 
                      tmp_1 = 0;
  }
  else 
       #line 456 
       tmp_1 = 0;
  #line 456 
  return tmp_1;
}

#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
u32 mt76_mac_process_rx(struct mt7601u_dev *dev, struct sk_buff *skb, u8 *data, void *rxi)
{
  #line 465 
  u32 len;
  #line 467 
  int rssi;
  #line 463 
  struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(skb);
  #line 464 
  struct mt7601u_rxwi *rxwi = (struct mt7601u_rxwi *)rxi;
  #line 465 
  u32 ctl = rxwi->ctl;
  #line 466 
  u16 rate = rxwi->rate;
  #line 469 
  ;
  #line 469 
  len = (unsigned int)(((unsigned long)ctl >> 16) & 4095UL);
  #line 470 
  if (len <= 9U) 
                 #line 471 
                 return 0U;
  #line 473 
  if ((rxwi->rxinfo & 65536U) != 0U) {
    #line 474 
    status->flag |= 2U;
    #line 475 
    status->flag |= 8U;
    #line 476 
    status->flag |= 2097152U;
    #line 477 
    status->flag |= 8388608U;
    #line 478 
    status->flag |= 16U;
  }
  #line 483 
  if ((rxwi->rxinfo & 3670016U) != 0U) 
                                       #line 484 
                                       status->flag &= 4294967279U;
  #line 486 
  status->chains = (unsigned char)1U;
  #line 487 
  rssi = mt7601u_phy_get_rssi(dev,rxwi,(unsigned short)((int)rate));
  #line 488 
  status->signal = ((signed char)rssi);
  #line 488 
  status->chain_signal[0] = ((signed char)rssi);
  #line 489 
  status->freq = (unsigned short)(dev->chandef.chan)->center_freq;
  #line 490 
  status->band = (unsigned char)(dev->chandef.chan)->band;
  #line 492 
  mt76_mac_process_rate(status,(unsigned short)((int)rate));
  #line 494 
  cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev_0(& dev->con_mon_lock);
  #line 495 
  if (mt7601u_rx_is_our_beacon(dev,data) != 0) 
                                               #line 496 
                                               mt7601u_rx_monitor_beacon(dev,rxwi,(unsigned short)((int)rate),rssi);
  else 
    #line 497 
    if ((rxwi->rxinfo & 16U) != 0U) 
                                    #line 498 
                                    ewma_rssi_add(& dev->avg_rssi,(unsigned long)(- rssi));
  #line 499 
  cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev_0(& dev->con_mon_lock);
  #line 501 
  return len;
}

#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
static enum mt76_cipher_type mt76_mac_get_key_info(struct ieee80211_key_conf *key, u8 *key_data)
{
  #line 507 
  memset((void *)key_data,0,32UL);
  #line 508 
  if (key == (struct ieee80211_key_conf *)0) 
                                             #line 509 
                                             return MT_CIPHER_NONE;
  #line 511 
  if ((unsigned int)key->keylen > 32U) 
                                       #line 512 
                                       return MT_CIPHER_NONE;
  #line 514 
  memcpy((void *)key_data,(void *)(& key->key),(unsigned long)key->keylen);
  #line 516 
  switch (key->cipher) {
    #line 517 
    case (u32)1027073: 
                       #line 517 
    ;
    #line 518 
    return MT_CIPHER_WEP40;
    #line 519 
    case (u32)1027077: 
                       #line 519 
    ;
    #line 520 
    return MT_CIPHER_WEP104;
    #line 521 
    case (u32)1027074: 
                       #line 521 
    ;
    #line 522 
    return MT_CIPHER_TKIP;
    #line 523 
    case (u32)1027076: 
                       #line 523 
    ;
    #line 524 
    return MT_CIPHER_AES_CCMP;
    #line 525 
    default: 
             #line 525 
    ;
    #line 526 
    return MT_CIPHER_NONE;
  }
}

#line 562 
#line 562 
void __compiletime_assert_562(void);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
int mt76_mac_wcid_set_key(struct mt7601u_dev *dev, u8 idx, struct ieee80211_key_conf *key)
{
  #line 533 
  enum mt76_cipher_type cipher;
  #line 534 
  u8 key_data[32U];
  #line 535 
  u8 iv_data[8U];
  #line 536 
  u32 val;
  #line 538 
  cipher = mt76_mac_get_key_info(key,(u8 *)(& key_data));
  #line 539 
  if (cipher == (unsigned int)MT_CIPHER_NONE && key != (struct ieee80211_key_conf *)0) 
    #line 540 
    return -22;
  #line 542 
  trace_set_key(dev,(unsigned char)((int)idx));
  #line 544 
  mt7601u_wr_copy(dev,(unsigned int)(((int)idx + 1024) * 32),(void *)(& key_data),32);
  #line 546 
  memset((void *)(& iv_data),0,8UL);
  #line 547 
  if (key != (struct ieee80211_key_conf *)0) {
    #line 548 
    iv_data[3] = (unsigned char)((int)((unsigned char)key->keyidx) << 6U);
    #line 549 
    if (cipher > (unsigned int)MT_CIPHER_WEP104) {
      #line 553 
      iv_data[0] = (unsigned char)((unsigned int)iv_data[0] | 1U);
      #line 554 
      iv_data[3] = (unsigned char)((unsigned int)iv_data[3] | 32U);
    }
  }
  #line 557 
  mt7601u_wr_copy(dev,(unsigned int)(((int)idx + 5120) * 8),(void *)(& iv_data),8);
  #line 559 
  val = mt7601u_rr(dev,(unsigned int)(((int)idx + 10752) * 4));
  #line 560 
  val &= 4294966257U;
  #line 561 
  ;
  #line 562 
  if (0 != 0 && ((unsigned long)((unsigned int)cipher >> 3) & 18446744073709551614UL) != 0UL) 
    #line 562 
    __compiletime_assert_562();
  #line 562 
  val = (unsigned int)((((unsigned long)cipher << 1) & 14UL) | (((unsigned long)((unsigned int)cipher >> 3) << 10) & 1024UL)) | val;
  #line 563 
  val &= 4294967294U;
  #line 564 
  val = (unsigned int)((key != (struct ieee80211_key_conf *)0 && ((int)key->flags & 8) != 0) != 0) | val;
  #line 566 
  mt7601u_wr(dev,(unsigned int)(((int)idx + 10752) * 4),val);
  #line 568 
  return 0;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mac.c"
int mt76_mac_shared_key_setup(struct mt7601u_dev *dev, u8 vif_idx, u8 key_idx, struct ieee80211_key_conf *key)
{
  #line 574 
  enum mt76_cipher_type cipher;
  #line 575 
  u8 key_data[32U];
  #line 576 
  u32 val;
  #line 584 
  int tmp;
  #line 587 
  int tmp_0;
  #line 590 
  int tmp_1;
  #line 578 
  cipher = mt76_mac_get_key_info(key,(u8 *)(& key_data));
  #line 579 
  if (cipher == (unsigned int)MT_CIPHER_NONE && key != (struct ieee80211_key_conf *)0) 
    #line 580 
    return -22;
  #line 582 
  trace_set_shared_key(dev,(unsigned char)((int)vif_idx),(unsigned char)((int)key_idx));
  #line 584 
  if (((int)vif_idx & 8) != 0) 
                               #line 584 
                               tmp = ((((int)vif_idx & 7) * 4 + (int)key_idx) + 1440) * 32; else 
                                                                    #line 584 
                                                                    tmp = (((int)vif_idx * 4 + (int)key_idx) + 1376) * 32;
  #line 584 
  ;
  #line 584 
  mt7601u_wr_copy(dev,(unsigned int)tmp,(void *)(& key_data),32);
  #line 587 
  if (((int)vif_idx & 8) != 0) 
                               #line 587 
                               tmp_0 = (((int)vif_idx & 7) / 2 << 2) + 46064; else 
                                                                    #line 587 
                                                                    tmp_0 = ((int)((unsigned int)vif_idx / 2U) << 2) + 45056;
  #line 587 
  ;
  #line 587 
  val = mt76_rr(dev,(unsigned int)tmp_0);
  #line 588 
  val = ~ ((unsigned int)(15UL << ((int)key_idx + ((int)vif_idx & 1) * 4) * 4)) & val;
  #line 589 
  val = ((unsigned int)cipher << ((int)key_idx + ((int)vif_idx & 1) * 4) * 4) | val;
  #line 590 
  ;
  #line 590 
  if (((int)vif_idx & 8) != 0) 
                               #line 590 
                               tmp_1 = (((int)vif_idx & 7) / 2 << 2) + 46064; else 
                                                                    #line 590 
                                                                    tmp_1 = ((int)((unsigned int)vif_idx / 2U) << 2) + 45056;
  #line 590 
  ;
  #line 590 
  mt76_wr(dev,(unsigned int)tmp_1,val);
  #line 592 
  return 0;
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif___ldv_spin_lock_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 804 
  ldv_spin_model_lock((char *)"lock_of_mt7601u_dev");
  #line 806 
  __ldv_spin_lock(lock);
  #line 807 
  return;
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_mt7601u_dev(spinlock_t *lock, unsigned long flags)
{
  #line 813 
  ldv_spin_model_unlock((char *)"lock_of_mt7601u_dev");
  #line 815 
  spin_unlock_irqrestore(lock,flags);
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_lock_bh_mac_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 822 
  ldv_spin_model_lock((char *)"mac_lock_of_mt7601u_dev");
  #line 824 
  spin_lock_bh_0(lock);
  #line 825 
  return;
}

#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_unlock_bh_mac_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 831 
  ldv_spin_model_unlock((char *)"mac_lock_of_mt7601u_dev");
  #line 833 
  spin_unlock_bh_0(lock);
  #line 834 
  return;
}

#line 837  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_lock_bh_con_mon_lock_of_mt7601u_dev_0(spinlock_t *lock)
{
  #line 840 
  ldv_spin_model_lock((char *)"con_mon_lock_of_mt7601u_dev");
  #line 842 
  spin_lock_bh_0(lock);
  #line 843 
  return;
}

#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/mac.i.aux"
static void cif_spin_unlock_bh_con_mon_lock_of_mt7601u_dev_0(spinlock_t *lock)
{
  #line 849 
  ldv_spin_model_unlock((char *)"con_mon_lock_of_mt7601u_dev");
  #line 851 
  spin_unlock_bh_0(lock);
  #line 852 
  return;
}

#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
#line 126 
struct tracepoint __tracepoint_ee_read;
#line 247 
#line 247 
struct tracepoint __tracepoint_mt_rx;
#line 277 
#line 277 
struct tracepoint __tracepoint_mt_tx;
#line 302 
#line 302 
struct tracepoint __tracepoint_mt_tx_dma_done;
#line 316 
#line 316 
struct tracepoint __tracepoint_mt_tx_status_cleaned;
#line 330 
#line 330 
struct tracepoint __tracepoint_mt_tx_status;
#line 346 
#line 346 
struct tracepoint __tracepoint_mt_rx_dma_aggr;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_reg_read[9U] = {(char)'r', (char)'e', (char)'g', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d'};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_reg_read = {.name = (char *)(& __tpstrtab_reg_read)};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_reg_write[10U] = {(char)'r', (char)'e', (char)'g', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e'};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_reg_write = {.name = (char *)(& __tpstrtab_reg_write)};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_submit_urb[14U] = {(char)'m', (char)'t', (char)'_', (char)'s', (char)'u', (char)'b', (char)'m', (char)'i', (char)'t', (char)'_', (char)'u', (char)'r', (char)'b'};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_submit_urb = {.name = (char *)(& __tpstrtab_mt_submit_urb)};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_mcu_msg_send[16U] = {(char)'m', (char)'t', (char)'_', (char)'m', (char)'c', (char)'u', (char)'_', (char)'m', (char)'s', (char)'g', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d'};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_mcu_msg_send = {.name = (char *)(& __tpstrtab_mt_mcu_msg_send)};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_vend_req[12U] = {(char)'m', (char)'t', (char)'_', (char)'v', (char)'e', (char)'n', (char)'d', (char)'_', (char)'r', (char)'e', (char)'q'};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_vend_req = {.name = (char *)(& __tpstrtab_mt_vend_req)};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_ee_read[8U] = {(char)'e', (char)'e', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d'};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_ee_read = {.name = (char *)(& __tpstrtab_ee_read)};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_rf_read[8U] = {(char)'r', (char)'f', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d'};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_rf_read = {.name = (char *)(& __tpstrtab_rf_read)};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_rf_write[9U] = {(char)'r', (char)'f', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e'};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_rf_write = {.name = (char *)(& __tpstrtab_rf_write)};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_bbp_read[9U] = {(char)'b', (char)'b', (char)'p', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d'};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_bbp_read = {.name = (char *)(& __tpstrtab_bbp_read)};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_bbp_write[10U] = {(char)'b', (char)'b', (char)'p', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e'};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_bbp_write = {.name = (char *)(& __tpstrtab_bbp_write)};
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_temp_mode[10U] = {(char)'t', (char)'e', (char)'m', (char)'p', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e'};
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_temp_mode = {.name = (char *)(& __tpstrtab_temp_mode)};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_read_temp[10U] = {(char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'t', (char)'e', (char)'m', (char)'p'};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_read_temp = {.name = (char *)(& __tpstrtab_read_temp)};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_freq_cal_adjust[16U] = {(char)'f', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'a', (char)'l', (char)'_', (char)'a', (char)'d', (char)'j', (char)'u', (char)'s', (char)'t'};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_freq_cal_adjust = {.name = (char *)(& __tpstrtab_freq_cal_adjust)};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_freq_cal_offset[16U] = {(char)'f', (char)'r', (char)'e', (char)'q', (char)'_', (char)'c', (char)'a', (char)'l', (char)'_', (char)'o', (char)'f', (char)'f', (char)'s', (char)'e', (char)'t'};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_freq_cal_offset = {.name = (char *)(& __tpstrtab_freq_cal_offset)};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_rx[6U] = {(char)'m', (char)'t', (char)'_', (char)'r', (char)'x'};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_rx = {.name = (char *)(& __tpstrtab_mt_rx)};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_tx[6U] = {(char)'m', (char)'t', (char)'_', (char)'t', (char)'x'};
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_tx = {.name = (char *)(& __tpstrtab_mt_tx)};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_tx_dma_done[15U] = {(char)'m', (char)'t', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'d', (char)'o', (char)'n', (char)'e'};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_tx_dma_done = {.name = (char *)(& __tpstrtab_mt_tx_dma_done)};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_tx_status_cleaned[21U] = {(char)'m', (char)'t', (char)'_', (char)'t', (char)'x', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'u', (char)'s', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'e', (char)'d'};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_tx_status_cleaned = {.name = (char *)(& __tpstrtab_mt_tx_status_cleaned)};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_tx_status[13U] = {(char)'m', (char)'t', (char)'_', (char)'t', (char)'x', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'u', (char)'s'};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_tx_status = {.name = (char *)(& __tpstrtab_mt_tx_status)};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_mt_rx_dma_aggr[15U] = {(char)'m', (char)'t', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r'};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_mt_rx_dma_aggr = {.name = (char *)(& __tpstrtab_mt_rx_dma_aggr)};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_set_key[8U] = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'k', (char)'e', (char)'y'};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_set_key = {.name = (char *)(& __tpstrtab_set_key)};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
static char __tpstrtab_set_shared_key[15U] = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'s', (char)'h', (char)'a', (char)'r', (char)'e', (char)'d', (char)'_', (char)'k', (char)'e', (char)'y'};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
struct tracepoint __tracepoint_set_shared_key = {.name = (char *)(& __tpstrtab_set_shared_key)};
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_8802 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 237 
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void atomic_inc(atomic_t *v);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_lock_mac_lock_of_mt7601u_dev(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_unlock_mac_lock_of_mt7601u_dev(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_unlock_irqrestore_rx_lock_of_mt7601u_dev(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev(spinlock_t *lock, unsigned long flags);
#line 35 
#line 819 
static void cif___ldv_spin_lock_rx_lock_of_mt7601u_dev(spinlock_t *lock);
#line 35 
#line 845 
static void cif___ldv_spin_lock_tx_lock_of_mt7601u_dev(spinlock_t *lock);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_8882 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_129_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret___2;
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
#line 76 
int ___ratelimit(struct ratelimit_state *, char *);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 837  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t);
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 683 
void tasklet_kill(struct tasklet_struct *);
#line 687 
#line 878  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data);
#line 1711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static int cif_usb_submit_urb_0(struct urb *urb, gfp_t mem_flags);
#line 1712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/usb.h"
#line 1712 
void usb_poison_urb(struct urb *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read_0(& page->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head *list)
{
  #line 1495 
  return list->next == (struct sk_buff *)list;
}

#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
  #line 1746 
  struct sk_buff *skb = list_->next;
  #line 1748 
  if (skb == (struct sk_buff *)list_) 
                                      #line 1749 
                                      skb = (struct sk_buff *)0;
  #line 1750 
  return skb;
}

#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1829 
  list->next = ((struct sk_buff *)list);
  #line 1829 
  list->prev = ((struct sk_buff *)list);
  #line 1830 
  list->qlen = 0U;
  #line 1831 
  return;
}

#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_insert(struct sk_buff *newsk, struct sk_buff *prev, struct sk_buff *next, struct sk_buff_head *list)
{
  {
    #line 1868 
    union __anonunion___u_9242 __u = {.__val = next};
    #line 1867 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next),(void *)(& __u.__c),8);
    #line 1867 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1869 
    union __anonunion___u_9244 __u_0 = {.__val = prev};
    #line 1868 
    __write_once_size((void *)(& newsk->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev),(void *)(& __u_0.__c),8);
    #line 1868 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1870 
    union __anonunion___u_9246 __u_1 = {.__val = newsk};
    #line 1869 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev),(void *)(& __u_1.__c),8);
    #line 1869 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1871 
    union __anonunion___u_9248 __u_2 = {.__val = newsk};
    #line 1870 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next),(void *)(& __u_2.__c),8);
    #line 1870 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1871 
  (list->qlen) ++;
  #line 1872 
  return;
}

#line 1874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_splice(struct sk_buff_head *list, struct sk_buff *prev, struct sk_buff *next)
{
  #line 1878 
  struct sk_buff *first = list->next;
  #line 1879 
  struct sk_buff *last = list->prev;
  {
    #line 1882 
    union __anonunion___u_9250 __u = {.__val = prev};
    #line 1881 
    __write_once_size((void *)(& first->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev),(void *)(& __u.__c),8);
    #line 1881 
    struct sk_buff *tmp = __u.__val;
  }
  {
    #line 1883 
    union __anonunion___u_9252 __u_0 = {.__val = first};
    #line 1882 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next),(void *)(& __u_0.__c),8);
    #line 1882 
    struct sk_buff *tmp_3 = __u_0.__val;
  }
  {
    #line 1885 
    union __anonunion___u_9254 __u_1 = {.__val = next};
    #line 1884 
    __write_once_size((void *)(& last->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next),(void *)(& __u_1.__c),8);
    #line 1884 
    struct sk_buff *tmp_5 = __u_1.__val;
  }
  {
    #line 1886 
    union __anonunion___u_9256 __u_2 = {.__val = last};
    #line 1885 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev),(void *)(& __u_2.__c),8);
    #line 1885 
    struct sk_buff *tmp_7 = __u_2.__val;
  }
  #line 1887 
  return;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_splice_init(struct sk_buff_head *list, struct sk_buff_head *head)
{
  #line 1912 
  if (skb_queue_empty(list) == 0) {
    #line 1913 
    __skb_queue_splice(list,(struct sk_buff *)head,head->next);
    #line 1914 
    head->qlen += list->qlen;
    #line 1915 
    __skb_queue_head_init(list);
  }
  #line 1917 
  return;
}

#line 1972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_before(struct sk_buff_head *list, struct sk_buff *next, struct sk_buff *newsk)
{
  #line 1976 
  __skb_insert(newsk,next->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev,next,list);
  #line 1977 
  return;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
  #line 2009 
  __skb_queue_before(list,(struct sk_buff *)list,newsk);
  #line 2010 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
  #line 2020 
  struct sk_buff *next;
  #line 2020 
  struct sk_buff *prev;
  #line 2022 
  (list->qlen) --;
  #line 2023 
  next = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next;
  #line 2024 
  prev = skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev;
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev = ((struct sk_buff *)0);
  #line 2025 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next = ((struct sk_buff *)0);
  {
    #line 2027 
    union __anonunion___u_9258 __u = {.__val = prev};
    #line 2026 
    __write_once_size((void *)(& next->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.prev),(void *)(& __u.__c),8);
    #line 2026 
    struct sk_buff *tmp_2 = __u.__val;
  }
  {
    #line 2028 
    union __anonunion___u_9260 __u_0 = {.__val = next};
    #line 2027 
    __write_once_size((void *)(& prev->__anonCompField_sk_buff_87.__anonCompField___anonunion_490_86.next),(void *)(& __u_0.__c),8);
    #line 2027 
    struct sk_buff *tmp_4 = __u_0.__val;
  }
  #line 2029 
  return;
}

#line 2038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
  #line 2040 
  struct sk_buff *skb = skb_peek(list);
  #line 2041 
  if (skb != (struct sk_buff *)0) 
                                  #line 2042 
                                  __skb_unlink(skb,list);
  #line 2043 
  return skb;
}

#line 2142 
#line 2142 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  #line 2859 
  return __dev_alloc_pages(10784U,order);
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 5177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5177 
unsigned int ieee80211_hdrlen(__le16);
#line 2650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 2650 
void ieee80211_free_txskb(struct ieee80211_hw *, struct sk_buff *);
#line 4338 
#line 4338 
void ieee80211_rx_napi(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct napi_struct *);
#line 4361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_rx(struct ieee80211_hw *hw, struct sk_buff *skb)
{
  #line 4363 
  ieee80211_rx_napi(hw,(struct ieee80211_sta *)0,skb,(struct napi_struct *)0);
  #line 4364 
  return;
}

#line 5170 
#line 5170 
void ieee80211_wake_queue(struct ieee80211_hw *, int);
#line 5179 
#line 5179 
void ieee80211_stop_queue(struct ieee80211_hw *, int);
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 372 
void mt7601u_tx_status(struct mt7601u_dev *dev, struct sk_buff *skb);
#line 386 
#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
int mt7601u_dma_init(struct mt7601u_dev *dev);
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
void mt7601u_dma_cleanup(struct mt7601u_dev *dev);
#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
int mt7601u_dma_enqueue_tx(struct mt7601u_dev *dev, struct sk_buff *skb, struct mt76_wcid *wcid, int hw_q);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.h"
#line 83 
void __compiletime_assert_83(void);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.h"
__inline static int mt7601u_dma_skb_wrap_pkt(struct sk_buff *skb, enum mt76_qsel qsel, u32 flags)
{
  #line 83 
  if (0 != 0 && ((unsigned long)qsel & 18446744073709551612UL) != 0UL) 
    #line 83 
    __compiletime_assert_83();
  #line 83 
  flags = (unsigned int)(((unsigned long)qsel << 25) & 100663296UL) | flags;
  #line 84 
  return mt7601u_dma_skb_wrap(skb,(enum mt76_msg_port)WLAN_PORT,
                           (enum mt76_info_type)DMA_PACKET,flags);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_submit_urb_1(struct mt7601u_dev *dev, struct urb *u)
{
  #line 56 
  int pscr_ret___0;
  #line 56 
  if ((int)static_key_false(& __tracepoint_mt_submit_urb.key) != 0) {
    #line 56 
    int pscr_ret__;
    #line 56 
    struct tracepoint_func *________p1;
    #line 56 
    struct tracepoint_func *it_func_ptr;
    #line 56 
    void *it_func;
    #line 56 
    void *__data;
    #line 56 
    int __idx = 0;
    {
      #line 56 
      void *__vpp_verify = (void *)0;
      #line 56 
      void *tmp = __vpp_verify;
    }
    #line 56 
    switch (4UL) {
      #line 56 
      int pfo_ret___1;
      #line 56 
      int pfo_ret___2;
      #line 56 
      int pfo_ret__;
      #line 56 
      int pfo_ret___0;
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret__;
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___0;
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___1;
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 56 
      switch (4UL) {
        #line 56 
        case (unsigned long)1: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)2: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)4: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        case (unsigned long)8: 
                               #line 56 
        ;
        #line 57 
        ldv_inline_asm();
        #line 56 
        break;
        #line 56 
        default: 
                 #line 56 
        ;
        #line 56 
        __bad_percpu_size();
      }
      #line 56 
      pscr_ret__ = pfo_ret___2;
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_size_call_parameter();
      #line 56 
      break;
    }
    #line 56 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 56 
                                                               return;
    {
      #line 56 
      int __ret_warn_on = 0;
      #line 56 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 57 
        ldv_inline_asm();
        #line 58 
        ldv_inline_asm();
      }
      #line 56 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 56 
    __preempt_count_add(1);
    #line 57 
    ldv_inline_asm();
    {
      #line 57 
      union __anonunion___u_9774 __u;
      #line 56 
      __read_once_size((void *)(& __tracepoint_mt_submit_urb.funcs),(void *)(& __u.__c),8);
      #line 56 
      ________p1 = (__u.__val);
      }
    #line 56 
    it_func_ptr = ________p1;
    #line 56 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 56 
      while (1) {
        #line 56 
        it_func = it_func_ptr->func;
        #line 56 
        __data = it_func_ptr->data;
        #line 56 
        (*((void (*)(void *, struct mt7601u_dev *, struct urb *))it_func))(__data,dev,u);
        #line 56 
        it_func_ptr ++;
        #line 57 
        ;
        #line 57 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 56 
                                                break;
      }
    #line 58 
    ldv_inline_asm();
    #line 56 
    __preempt_count_sub(1);
  }
  {
    #line 56 
    void *__vpp_verify_0 = (void *)0;
    #line 56 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 56 
  switch (4UL) {
    #line 56 
    int pfo_ret___3;
    #line 56 
    int pfo_ret___4;
    #line 56 
    int pfo_ret___5;
    #line 56 
    int pfo_ret___6;
    #line 56 
    case (unsigned long)1: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___3;
    #line 56 
    break;
    #line 56 
    case (unsigned long)2: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___4;
    #line 56 
    break;
    #line 56 
    case (unsigned long)4: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___5;
    #line 56 
    break;
    #line 56 
    case (unsigned long)8: 
                           #line 56 
    ;
    #line 56 
    switch (4UL) {
      #line 56 
      case (unsigned long)1: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)2: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)4: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      case (unsigned long)8: 
                             #line 56 
      ;
      #line 57 
      ldv_inline_asm();
      #line 56 
      break;
      #line 56 
      default: 
               #line 56 
      ;
      #line 56 
      __bad_percpu_size();
    }
    #line 56 
    pscr_ret___0 = pfo_ret___6;
    #line 56 
    break;
    #line 56 
    default: 
             #line 56 
    ;
    #line 56 
    __bad_size_call_parameter();
    #line 56 
    break;
  }
  #line 56 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 56 
    rcu_read_lock_sched_notrace();
    {
      #line 57 
      union __anonunion___u_9776 __u_0;
      #line 56 
      __read_once_size((void *)(& __tracepoint_mt_submit_urb.funcs),(void *)(& __u_0.__c),8);
      #line 56 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 56 
        bool __warned;
        #line 56 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 56 
          if (! __warned) {
            #line 56 
            if (rcu_read_lock_sched_held() == 0) {
              #line 56 
              __warned = (_Bool)1;
              #line 56 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",56,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 56 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 56 
    rcu_read_unlock_sched_notrace();
  }
  #line 58 
  return;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_rx(struct mt7601u_dev *dev, struct mt7601u_rxwi *rxwi, u32 f)
{
  #line 247 
  int pscr_ret___0;
  #line 247 
  if ((int)static_key_false(& __tracepoint_mt_rx.key) != 0) {
    #line 247 
    struct tracepoint_func *________p1;
    #line 247 
    int pscr_ret__;
    #line 247 
    struct tracepoint_func *it_func_ptr;
    #line 247 
    void *it_func;
    #line 247 
    void *__data;
    #line 247 
    int __idx = 0;
    {
      #line 247 
      void *__vpp_verify = (void *)0;
      #line 247 
      void *tmp = __vpp_verify;
    }
    #line 247 
    switch (4UL) {
      #line 247 
      int pfo_ret__;
      #line 247 
      int pfo_ret___0;
      #line 247 
      int pfo_ret___1;
      #line 247 
      int pfo_ret___2;
      #line 247 
      case (unsigned long)1: 
                             #line 247 
      ;
      #line 247 
      switch (4UL) {
        #line 247 
        case (unsigned long)1: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)2: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)4: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)8: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        default: 
                 #line 247 
        ;
        #line 247 
        __bad_percpu_size();
      }
      #line 247 
      pscr_ret__ = pfo_ret__;
      #line 247 
      break;
      #line 247 
      case (unsigned long)2: 
                             #line 247 
      ;
      #line 247 
      switch (4UL) {
        #line 247 
        case (unsigned long)1: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)2: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)4: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)8: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        default: 
                 #line 247 
        ;
        #line 247 
        __bad_percpu_size();
      }
      #line 247 
      pscr_ret__ = pfo_ret___0;
      #line 247 
      break;
      #line 247 
      case (unsigned long)4: 
                             #line 247 
      ;
      #line 247 
      switch (4UL) {
        #line 247 
        case (unsigned long)1: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)2: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)4: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)8: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        default: 
                 #line 247 
        ;
        #line 247 
        __bad_percpu_size();
      }
      #line 247 
      pscr_ret__ = pfo_ret___1;
      #line 247 
      break;
      #line 247 
      case (unsigned long)8: 
                             #line 247 
      ;
      #line 247 
      switch (4UL) {
        #line 247 
        case (unsigned long)1: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)2: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)4: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        case (unsigned long)8: 
                               #line 247 
        ;
        #line 248 
        ldv_inline_asm();
        #line 247 
        break;
        #line 247 
        default: 
                 #line 247 
        ;
        #line 247 
        __bad_percpu_size();
      }
      #line 247 
      pscr_ret__ = pfo_ret___2;
      #line 247 
      break;
      #line 247 
      default: 
               #line 247 
      ;
      #line 247 
      __bad_size_call_parameter();
      #line 247 
      break;
    }
    #line 247 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 247 
                                                               return;
    {
      #line 247 
      int __ret_warn_on = 0;
      #line 247 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 248 
        ldv_inline_asm();
        #line 249 
        ldv_inline_asm();
      }
      #line 247 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 247 
    __preempt_count_add(1);
    #line 248 
    ldv_inline_asm();
    {
      #line 248 
      union __anonunion___u_9822 __u;
      #line 247 
      __read_once_size((void *)(& __tracepoint_mt_rx.funcs),(void *)(& __u.__c),8);
      #line 247 
      ________p1 = (__u.__val);
      }
    #line 247 
    it_func_ptr = ________p1;
    #line 247 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 247 
      while (1) {
        #line 247 
        it_func = it_func_ptr->func;
        #line 247 
        __data = it_func_ptr->data;
        #line 247 
        (*((void (*)(void *, struct mt7601u_dev *, struct mt7601u_rxwi *, u32 ))it_func))(__data,dev,rxwi,f);
        #line 247 
        it_func_ptr ++;
        #line 248 
        ;
        #line 248 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 247 
                                                break;
      }
    #line 249 
    ldv_inline_asm();
    #line 247 
    __preempt_count_sub(1);
  }
  {
    #line 247 
    void *__vpp_verify_0 = (void *)0;
    #line 247 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 247 
  switch (4UL) {
    #line 247 
    int pfo_ret___5;
    #line 247 
    int pfo_ret___6;
    #line 247 
    int pfo_ret___3;
    #line 247 
    int pfo_ret___4;
    #line 247 
    case (unsigned long)1: 
                           #line 247 
    ;
    #line 247 
    switch (4UL) {
      #line 247 
      case (unsigned long)1: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)2: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)4: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)8: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      default: 
               #line 247 
      ;
      #line 247 
      __bad_percpu_size();
    }
    #line 247 
    pscr_ret___0 = pfo_ret___3;
    #line 247 
    break;
    #line 247 
    case (unsigned long)2: 
                           #line 247 
    ;
    #line 247 
    switch (4UL) {
      #line 247 
      case (unsigned long)1: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)2: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)4: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)8: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      default: 
               #line 247 
      ;
      #line 247 
      __bad_percpu_size();
    }
    #line 247 
    pscr_ret___0 = pfo_ret___4;
    #line 247 
    break;
    #line 247 
    case (unsigned long)4: 
                           #line 247 
    ;
    #line 247 
    switch (4UL) {
      #line 247 
      case (unsigned long)1: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)2: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)4: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)8: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      default: 
               #line 247 
      ;
      #line 247 
      __bad_percpu_size();
    }
    #line 247 
    pscr_ret___0 = pfo_ret___5;
    #line 247 
    break;
    #line 247 
    case (unsigned long)8: 
                           #line 247 
    ;
    #line 247 
    switch (4UL) {
      #line 247 
      case (unsigned long)1: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)2: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)4: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      case (unsigned long)8: 
                             #line 247 
      ;
      #line 248 
      ldv_inline_asm();
      #line 247 
      break;
      #line 247 
      default: 
               #line 247 
      ;
      #line 247 
      __bad_percpu_size();
    }
    #line 247 
    pscr_ret___0 = pfo_ret___6;
    #line 247 
    break;
    #line 247 
    default: 
             #line 247 
    ;
    #line 247 
    __bad_size_call_parameter();
    #line 247 
    break;
  }
  #line 247 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 247 
    rcu_read_lock_sched_notrace();
    {
      #line 248 
      union __anonunion___u_9824 __u_0;
      #line 247 
      __read_once_size((void *)(& __tracepoint_mt_rx.funcs),(void *)(& __u_0.__c),8);
      #line 247 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 247 
        bool __warned;
        #line 247 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 247 
          if (! __warned) {
            #line 247 
            if (rcu_read_lock_sched_held() == 0) {
              #line 247 
              __warned = (_Bool)1;
              #line 247 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",247,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 247 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 247 
    rcu_read_unlock_sched_notrace();
  }
  #line 249 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_tx_dma_done(struct mt7601u_dev *dev, struct sk_buff *skb)
{
  #line 302 
  int pscr_ret___0;
  #line 302 
  if ((int)static_key_false(& __tracepoint_mt_tx_dma_done.key) != 0) {
    #line 302 
    int pscr_ret__;
    #line 302 
    struct tracepoint_func *________p1;
    #line 302 
    struct tracepoint_func *it_func_ptr;
    #line 302 
    void *it_func;
    #line 302 
    void *__data;
    #line 302 
    int __idx = 0;
    {
      #line 302 
      void *__vpp_verify = (void *)0;
      #line 302 
      void *tmp = __vpp_verify;
    }
    #line 302 
    switch (4UL) {
      #line 302 
      int pfo_ret___2;
      #line 302 
      int pfo_ret__;
      #line 302 
      int pfo_ret___0;
      #line 302 
      int pfo_ret___1;
      #line 302 
      case (unsigned long)1: 
                             #line 302 
      ;
      #line 302 
      switch (4UL) {
        #line 302 
        case (unsigned long)1: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)2: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)4: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)8: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        default: 
                 #line 302 
        ;
        #line 302 
        __bad_percpu_size();
      }
      #line 302 
      pscr_ret__ = pfo_ret__;
      #line 302 
      break;
      #line 302 
      case (unsigned long)2: 
                             #line 302 
      ;
      #line 302 
      switch (4UL) {
        #line 302 
        case (unsigned long)1: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)2: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)4: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)8: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        default: 
                 #line 302 
        ;
        #line 302 
        __bad_percpu_size();
      }
      #line 302 
      pscr_ret__ = pfo_ret___0;
      #line 302 
      break;
      #line 302 
      case (unsigned long)4: 
                             #line 302 
      ;
      #line 302 
      switch (4UL) {
        #line 302 
        case (unsigned long)1: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)2: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)4: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)8: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        default: 
                 #line 302 
        ;
        #line 302 
        __bad_percpu_size();
      }
      #line 302 
      pscr_ret__ = pfo_ret___1;
      #line 302 
      break;
      #line 302 
      case (unsigned long)8: 
                             #line 302 
      ;
      #line 302 
      switch (4UL) {
        #line 302 
        case (unsigned long)1: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)2: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)4: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        case (unsigned long)8: 
                               #line 302 
        ;
        #line 303 
        ldv_inline_asm();
        #line 302 
        break;
        #line 302 
        default: 
                 #line 302 
        ;
        #line 302 
        __bad_percpu_size();
      }
      #line 302 
      pscr_ret__ = pfo_ret___2;
      #line 302 
      break;
      #line 302 
      default: 
               #line 302 
      ;
      #line 302 
      __bad_size_call_parameter();
      #line 302 
      break;
    }
    #line 302 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 302 
                                                               return;
    {
      #line 302 
      int __ret_warn_on = 0;
      #line 302 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 303 
        ldv_inline_asm();
        #line 304 
        ldv_inline_asm();
      }
      #line 302 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 302 
    __preempt_count_add(1);
    #line 303 
    ldv_inline_asm();
    {
      #line 303 
      union __anonunion___u_9830 __u;
      #line 302 
      __read_once_size((void *)(& __tracepoint_mt_tx_dma_done.funcs),(void *)(& __u.__c),8);
      #line 302 
      ________p1 = (__u.__val);
      }
    #line 302 
    it_func_ptr = ________p1;
    #line 302 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 302 
      while (1) {
        #line 302 
        it_func = it_func_ptr->func;
        #line 302 
        __data = it_func_ptr->data;
        #line 302 
        (*((void (*)(void *, struct mt7601u_dev *, struct sk_buff *))it_func))(__data,dev,skb);
        #line 302 
        it_func_ptr ++;
        #line 303 
        ;
        #line 303 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 302 
                                                break;
      }
    #line 304 
    ldv_inline_asm();
    #line 302 
    __preempt_count_sub(1);
  }
  {
    #line 302 
    void *__vpp_verify_0 = (void *)0;
    #line 302 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 302 
  switch (4UL) {
    #line 302 
    int pfo_ret___3;
    #line 302 
    int pfo_ret___4;
    #line 302 
    int pfo_ret___5;
    #line 302 
    int pfo_ret___6;
    #line 302 
    case (unsigned long)1: 
                           #line 302 
    ;
    #line 302 
    switch (4UL) {
      #line 302 
      case (unsigned long)1: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)2: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)4: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)8: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      default: 
               #line 302 
      ;
      #line 302 
      __bad_percpu_size();
    }
    #line 302 
    pscr_ret___0 = pfo_ret___3;
    #line 302 
    break;
    #line 302 
    case (unsigned long)2: 
                           #line 302 
    ;
    #line 302 
    switch (4UL) {
      #line 302 
      case (unsigned long)1: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)2: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)4: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)8: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      default: 
               #line 302 
      ;
      #line 302 
      __bad_percpu_size();
    }
    #line 302 
    pscr_ret___0 = pfo_ret___4;
    #line 302 
    break;
    #line 302 
    case (unsigned long)4: 
                           #line 302 
    ;
    #line 302 
    switch (4UL) {
      #line 302 
      case (unsigned long)1: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)2: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)4: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)8: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      default: 
               #line 302 
      ;
      #line 302 
      __bad_percpu_size();
    }
    #line 302 
    pscr_ret___0 = pfo_ret___5;
    #line 302 
    break;
    #line 302 
    case (unsigned long)8: 
                           #line 302 
    ;
    #line 302 
    switch (4UL) {
      #line 302 
      case (unsigned long)1: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)2: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)4: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      case (unsigned long)8: 
                             #line 302 
      ;
      #line 303 
      ldv_inline_asm();
      #line 302 
      break;
      #line 302 
      default: 
               #line 302 
      ;
      #line 302 
      __bad_percpu_size();
    }
    #line 302 
    pscr_ret___0 = pfo_ret___6;
    #line 302 
    break;
    #line 302 
    default: 
             #line 302 
    ;
    #line 302 
    __bad_size_call_parameter();
    #line 302 
    break;
  }
  #line 302 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 302 
    rcu_read_lock_sched_notrace();
    {
      #line 303 
      union __anonunion___u_9832 __u_0;
      #line 302 
      __read_once_size((void *)(& __tracepoint_mt_tx_dma_done.funcs),(void *)(& __u_0.__c),8);
      #line 302 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 302 
        bool __warned;
        #line 302 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 302 
          if (! __warned) {
            #line 302 
            if (rcu_read_lock_sched_held() == 0) {
              #line 302 
              __warned = (_Bool)1;
              #line 302 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",302,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 302 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 302 
    rcu_read_unlock_sched_notrace();
  }
  #line 304 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_rx_dma_aggr(struct mt7601u_dev *dev, int cnt, bool paged)
{
  #line 346 
  int pscr_ret___0;
  #line 346 
  if ((int)static_key_false(& __tracepoint_mt_rx_dma_aggr.key) != 0) {
    #line 346 
    int pscr_ret__;
    #line 346 
    struct tracepoint_func *________p1;
    #line 346 
    struct tracepoint_func *it_func_ptr;
    #line 346 
    void *it_func;
    #line 346 
    void *__data;
    #line 346 
    int __idx = 0;
    {
      #line 346 
      void *__vpp_verify = (void *)0;
      #line 346 
      void *tmp = __vpp_verify;
    }
    #line 346 
    switch (4UL) {
      #line 346 
      int pfo_ret___0;
      #line 346 
      int pfo_ret___1;
      #line 346 
      int pfo_ret___2;
      #line 346 
      int pfo_ret__;
      #line 346 
      case (unsigned long)1: 
                             #line 346 
      ;
      #line 346 
      switch (4UL) {
        #line 346 
        case (unsigned long)1: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)2: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)4: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)8: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        default: 
                 #line 346 
        ;
        #line 346 
        __bad_percpu_size();
      }
      #line 346 
      pscr_ret__ = pfo_ret__;
      #line 346 
      break;
      #line 346 
      case (unsigned long)2: 
                             #line 346 
      ;
      #line 346 
      switch (4UL) {
        #line 346 
        case (unsigned long)1: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)2: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)4: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)8: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        default: 
                 #line 346 
        ;
        #line 346 
        __bad_percpu_size();
      }
      #line 346 
      pscr_ret__ = pfo_ret___0;
      #line 346 
      break;
      #line 346 
      case (unsigned long)4: 
                             #line 346 
      ;
      #line 346 
      switch (4UL) {
        #line 346 
        case (unsigned long)1: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)2: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)4: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)8: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        default: 
                 #line 346 
        ;
        #line 346 
        __bad_percpu_size();
      }
      #line 346 
      pscr_ret__ = pfo_ret___1;
      #line 346 
      break;
      #line 346 
      case (unsigned long)8: 
                             #line 346 
      ;
      #line 346 
      switch (4UL) {
        #line 346 
        case (unsigned long)1: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)2: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)4: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        case (unsigned long)8: 
                               #line 346 
        ;
        #line 347 
        ldv_inline_asm();
        #line 346 
        break;
        #line 346 
        default: 
                 #line 346 
        ;
        #line 346 
        __bad_percpu_size();
      }
      #line 346 
      pscr_ret__ = pfo_ret___2;
      #line 346 
      break;
      #line 346 
      default: 
               #line 346 
      ;
      #line 346 
      __bad_size_call_parameter();
      #line 346 
      break;
    }
    #line 346 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 346 
                                                               return;
    {
      #line 346 
      int __ret_warn_on = 0;
      #line 346 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 347 
        ldv_inline_asm();
        #line 348 
        ldv_inline_asm();
      }
      #line 346 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 346 
    __preempt_count_add(1);
    #line 347 
    ldv_inline_asm();
    {
      #line 347 
      union __anonunion___u_9842 __u;
      #line 346 
      __read_once_size((void *)(& __tracepoint_mt_rx_dma_aggr.funcs),(void *)(& __u.__c),8);
      #line 346 
      ________p1 = (__u.__val);
      }
    #line 346 
    it_func_ptr = ________p1;
    #line 346 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 346 
      while (1) {
        #line 346 
        it_func = it_func_ptr->func;
        #line 346 
        __data = it_func_ptr->data;
        #line 346 
        (*((void (*)(void *, struct mt7601u_dev *, int , bool ))it_func))(__data,dev,cnt,(_Bool)((bool)((int)paged) != 0));
        #line 346 
        it_func_ptr ++;
        #line 347 
        ;
        #line 347 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 346 
                                                break;
      }
    #line 348 
    ldv_inline_asm();
    #line 346 
    __preempt_count_sub(1);
  }
  {
    #line 346 
    void *__vpp_verify_0 = (void *)0;
    #line 346 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 346 
  switch (4UL) {
    #line 346 
    int pfo_ret___6;
    #line 346 
    int pfo_ret___3;
    #line 346 
    int pfo_ret___4;
    #line 346 
    int pfo_ret___5;
    #line 346 
    case (unsigned long)1: 
                           #line 346 
    ;
    #line 346 
    switch (4UL) {
      #line 346 
      case (unsigned long)1: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)2: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)4: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)8: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      default: 
               #line 346 
      ;
      #line 346 
      __bad_percpu_size();
    }
    #line 346 
    pscr_ret___0 = pfo_ret___3;
    #line 346 
    break;
    #line 346 
    case (unsigned long)2: 
                           #line 346 
    ;
    #line 346 
    switch (4UL) {
      #line 346 
      case (unsigned long)1: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)2: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)4: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)8: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      default: 
               #line 346 
      ;
      #line 346 
      __bad_percpu_size();
    }
    #line 346 
    pscr_ret___0 = pfo_ret___4;
    #line 346 
    break;
    #line 346 
    case (unsigned long)4: 
                           #line 346 
    ;
    #line 346 
    switch (4UL) {
      #line 346 
      case (unsigned long)1: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)2: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)4: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)8: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      default: 
               #line 346 
      ;
      #line 346 
      __bad_percpu_size();
    }
    #line 346 
    pscr_ret___0 = pfo_ret___5;
    #line 346 
    break;
    #line 346 
    case (unsigned long)8: 
                           #line 346 
    ;
    #line 346 
    switch (4UL) {
      #line 346 
      case (unsigned long)1: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)2: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)4: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      case (unsigned long)8: 
                             #line 346 
      ;
      #line 347 
      ldv_inline_asm();
      #line 346 
      break;
      #line 346 
      default: 
               #line 346 
      ;
      #line 346 
      __bad_percpu_size();
    }
    #line 346 
    pscr_ret___0 = pfo_ret___6;
    #line 346 
    break;
    #line 346 
    default: 
             #line 346 
    ;
    #line 346 
    __bad_size_call_parameter();
    #line 346 
    break;
  }
  #line 346 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 346 
    rcu_read_lock_sched_notrace();
    {
      #line 347 
      union __anonunion___u_9844 __u_0;
      #line 346 
      __read_once_size((void *)(& __tracepoint_mt_rx_dma_aggr.funcs),(void *)(& __u_0.__c),8);
      #line 346 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 346 
        bool __warned;
        #line 346 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 346 
          if (! __warned) {
            #line 346 
            if (rcu_read_lock_sched_held() == 0) {
              #line 346 
              __warned = (_Bool)1;
              #line 346 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",346,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 346 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 346 
    rcu_read_unlock_sched_notrace();
  }
  #line 348 
  return;
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
#line 387 
static int mt7601u_submit_rx_buf(struct mt7601u_dev *dev, struct mt7601u_dma_buf_rx *e, gfp_t gfp);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static unsigned int ieee80211_get_hdrlen_from_buf(u8 *data, unsigned int len)
{
  #line 17 
  unsigned int hdrlen;
  #line 16 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)data;
  #line 19 
  if ((long)(len <= 9U) != 0L) 
                               #line 20 
                               return 0U;
  #line 21 
  hdrlen = ieee80211_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 22 
  if ((long)(hdrlen > len) != 0L) 
                                  #line 23 
                                  return 0U;
  #line 24 
  return hdrlen;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static struct sk_buff *mt7601u_rx_skb_from_seg(struct mt7601u_dev *dev, struct mt7601u_rxwi *rxwi, void *data, u32 seg_len, u32 truesize, struct page *p)
{
  #line 31 
  struct sk_buff *skb;
  #line 32 
  u32 true_len;
  #line 32 
  u32 copy;
  #line 32 
  u32 frag;
  #line 34 
  u32 tmp;
  #line 32 
  u32 hdr_len = 0U;
  #line 34 
  if (p == (struct page *)0) 
                             #line 34 
                             tmp = seg_len; else 
                                                 #line 34 
                                                 tmp = 128U;
  #line 34 
  skb = alloc_skb(tmp,2592U);
  #line 35 
  if (skb == (struct sk_buff *)0) 
                                  #line 36 
                                  return (struct sk_buff *)0;
  #line 38 
  true_len = mt76_mac_process_rx(dev,skb,(u8 *)data,(void *)rxwi);
  #line 39 
  if (true_len == 0U || true_len > seg_len) 
                                            #line 40 
                                            goto bad_frame;
  #line 42 
  hdr_len = ieee80211_get_hdrlen_from_buf((u8 *)data,true_len);
  #line 43 
  if (hdr_len == 0U) 
                     #line 44 
                     goto bad_frame;
  #line 46 
  if ((rxwi->rxinfo & 16384U) != 0U) {
    #line 47 
    skb_put_data(skb,data,hdr_len);
    #line 49 
    data += (unsigned long)(hdr_len + 2U);
    #line 50 
    true_len -= hdr_len;
    #line 51 
    hdr_len = 0U;
  }
  #line 55 
  ;
  #line 55 
  if ((unsigned int)skb_tailroom(skb) < true_len) 
                                                  #line 55 
                                                  copy = hdr_len + 8U; else 
                                                                    #line 55 
                                                                    copy = true_len;
  #line 56 
  frag = true_len - copy;
  #line 58 
  skb_put_data(skb,data,copy);
  #line 59 
  data += (unsigned long)copy;
  #line 61 
  if (frag != 0U) {
    #line 62 
    ;
    #line 62 
    ;
    #line 62 
    ;
    #line 62 
    ;
    #line 62 
    ;
    #line 62 
    skb_add_rx_frag(skb,0,p,(int)(data - lowmem_page_address(p)),(int)frag,truesize);
    #line 64 
    get_page(p);
  }
  #line 67 
  return skb;
  #line 69 
  bad_frame: 
             #line 69 
  ;
  {
    #line 70 
    struct ratelimit_state _rs = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL, .flags = 0UL};
    #line 70 
    if (___ratelimit(& _rs,(char *)"mt7601u_rx_skb_from_seg") != 0) 
                                                                    #line 70 
                                                                    _dev_err(dev->dev,(char *)"Error: incorrect frame len:%u hdr:%u\n",true_len,hdr_len);
  }
  #line 72 
  consume_skb(skb);
  #line 73 
  return (struct sk_buff *)0;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_rx_process_seg(struct mt7601u_dev *dev, u8 *data, u32 seg_len, struct page *p)
{
  #line 79 
  struct sk_buff *skb;
  #line 80 
  struct mt7601u_rxwi *rxwi;
  #line 81 
  u32 fce_info;
  #line 81 
  u32 truesize = seg_len;
  #line 86 
  fce_info = get_unaligned_le32((void *)(data + ((unsigned long)seg_len + 18446744073709551612U)));
  #line 87 
  seg_len += 4294967292U;
  #line 89 
  data += 4U;
  #line 90 
  seg_len += 4294967292U;
  #line 92 
  rxwi = (struct mt7601u_rxwi *)data;
  #line 93 
  data += 28UL;
  #line 94 
  seg_len += 4294967268U;
  #line 96 
  if ((((long)((unsigned int)rxwi->zero[0] != 0U) != 0L || (long)((unsigned int)rxwi->zero[1] != 0U) != 0L) != 0) != 0 || (long)((unsigned int)rxwi->zero[2] != 0U) != 0L) {
    #line 97 
    bool __print_once;
    #line 97 
    if (! __print_once) {
      #line 97 
      __print_once = (_Bool)1;
      #line 97 
      _dev_err(dev->dev,(char *)"Error: RXWI zero fields are set\n");
    }
  }
  #line 98 
  if ((long)((unsigned long)(fce_info >> 30) != 0UL) != 0L) {
    #line 99 
    bool __print_once_0;
    #line 99 
    if (! __print_once_0) {
      #line 99 
      __print_once_0 = (_Bool)1;
      #line 99 
      _dev_err(dev->dev,(char *)"Error: RX path seen a non-pkt urb\n");
    }
  }
  #line 101 
  trace_mt_rx(dev,rxwi,fce_info);
  #line 103 
  skb = mt7601u_rx_skb_from_seg(dev,rxwi,(void *)data,seg_len,truesize,p);
  #line 104 
  if (skb == (struct sk_buff *)0) 
                                  #line 105 
                                  return;
  #line 107 
  cif_spin_lock_mac_lock_of_mt7601u_dev(& dev->mac_lock);
  #line 108 
  ieee80211_rx(dev->hw,skb);
  #line 109 
  cif_spin_unlock_mac_lock_of_mt7601u_dev(& dev->mac_lock);
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static u16 mt7601u_rx_next_seg_len(u8 *data, u32 data_len)
{
  #line 114 
  u32 min_seg_len = 40U;
  #line 116 
  u16 dma_len = get_unaligned_le16((void *)data);
  #line 118 
  if (data_len < min_seg_len) 
                              #line 122 
                              return (unsigned short)0U;
  else {
    #line 119 
    int __ret_warn_on;
    #line 119 
    __ret_warn_on = (unsigned int)dma_len == 0U;
    #line 119 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 120 
      ldv_inline_asm();
      #line 121 
      ldv_inline_asm();
    }
    #line 118 
    if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                  #line 122 
                                                  return (unsigned short)0U;
    else {
      #line 120 
      int __ret_warn_on_0;
      #line 120 
      __ret_warn_on_0 = (unsigned int)((int)dma_len + 8) > data_len;
      #line 120 
      if ((long)(__ret_warn_on_0 != 0) != 0L) {
        #line 121 
        ldv_inline_asm();
        #line 122 
        ldv_inline_asm();
      }
      #line 119 
      if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                      #line 122 
                                                      return (unsigned short)0U;
      else {
        #line 121 
        int __ret_warn_on_1;
        #line 121 
        __ret_warn_on_1 = ((int)dma_len & 3) != 0;
        #line 121 
        if ((long)(__ret_warn_on_1 != 0) != 0L) {
          #line 122 
          ldv_inline_asm();
          #line 123 
          ldv_inline_asm();
        }
        #line 120 
        if ((long)((long)(__ret_warn_on_1 != 0)) != 0L) 
                                                        #line 122 
                                                        return (unsigned short)0U;
      }
    }
  }
  #line 124 
  return (unsigned short)((unsigned int)dma_len + 8U);
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_rx_process_entry(struct mt7601u_dev *dev, struct mt7601u_dma_buf_rx *e)
{
  #line 130 
  u32 seg_len;
  #line 130 
  u32 data_len = (e->urb)->actual_length;
  #line 131 
  u8 *data = lowmem_page_address(e->p);
  #line 132 
  struct page *new_p = (struct page *)0;
  #line 133 
  int cnt = 0;
  #line 135 
  if (! test_bit(0L,& dev->state)) 
                                   #line 136 
                                   return;
  #line 139 
  if (data_len > 512U) 
                       #line 140 
                       new_p = dev_alloc_pages(3U);
  #line 142 
  while (1) {
    #line 142 
    seg_len = (unsigned int)mt7601u_rx_next_seg_len(data,data_len);
    #line 142 
    if (! (seg_len != 0U)) 
                           #line 142 
                           break;
    {
      #line 143 
      struct page *tmp_1;
      #line 143 
      if (new_p != (struct page *)0) 
                                     #line 143 
                                     tmp_1 = e->p; else 
                                                        #line 143 
                                                        tmp_1 = (struct page *)0;
      #line 143 
      ;
      #line 143 
      ;
      #line 143 
      ;
      #line 143 
      mt7601u_rx_process_seg(dev,data,seg_len,tmp_1);
      #line 145 
      data_len -= seg_len;
      #line 146 
      data += (unsigned long)seg_len;
      #line 147 
      cnt ++;
    }
  }
  #line 150 
  if (cnt > 1) 
               #line 151 
               trace_mt_rx_dma_aggr(dev,cnt,(_Bool)(new_p != (struct page *)0));
  #line 153 
  if (new_p != (struct page *)0) {
    #line 155 
    __free_pages(e->p,3U);
    #line 157 
    e->p = new_p;
  }
  #line 159 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static struct mt7601u_dma_buf_rx *mt7601u_rx_get_pending_entry(struct mt7601u_dev *dev)
{
  #line 166 
  unsigned long flags;
  #line 164 
  struct mt7601u_rx_queue *q = & dev->rx_q;
  #line 165 
  struct mt7601u_dma_buf_rx *buf = (struct mt7601u_dma_buf_rx *)0;
  #line 168 
  cif___ldv_spin_lock_rx_lock_of_mt7601u_dev(& dev->rx_lock);
  #line 170 
  if (q->pending == 0U) 
                        #line 171 
                        goto out;
  #line 173 
  buf = & q->e[q->start];
  #line 174 
  (q->pending) --;
  #line 175 
  q->start = (q->start + 1U) % q->entries;
  #line 176 
  out: 
       #line 176 
  ;
  #line 177 
  cif_spin_unlock_irqrestore_rx_lock_of_mt7601u_dev(& dev->rx_lock,flags);
  #line 179 
  return buf;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_complete_rx(struct urb *urb)
{
  #line 205 
  int __ret_warn_once;
  #line 186 
  unsigned long flags;
  #line 184 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)urb->context;
  #line 185 
  struct mt7601u_rx_queue *q = & dev->rx_q;
  #line 191 
  switch (urb->status) {
    #line 192 
    case -104: 
               #line 192 
    ;
    #line 193 
    case -108: 
               #line 193 
    ;
    #line 194 
    case -2: 
             #line 194 
    ;
    #line 195 
    return;
    #line 196 
    default: 
             #line 196 
    ;
    {
      #line 197 
      struct ratelimit_state _rs = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL, .flags = 0UL};
      #line 197 
      if (___ratelimit(& _rs,(char *)"mt7601u_complete_rx") != 0) 
                                                                  #line 197 
                                                                  _dev_err(dev->dev,(char *)"rx urb failed: %d\n",urb->status);
    }
    #line 200 
    case 0: 
            #line 200 
    ;
    #line 201 
    break;
  }
  #line 204 
  cif___ldv_spin_lock_rx_lock_of_mt7601u_dev(& dev->rx_lock);
  {
    #line 205 
    bool __warned;
    #line 205 
    __ret_warn_once = q->e[q->end].urb != urb;
    #line 205 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 205 
      __warned = (_Bool)1;
      {
        #line 205 
        int __ret_warn_on = 1;
        #line 205 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 205 
          __warn_printk((char *)"RX urb mismatch");
          #line 206 
          ldv_inline_asm();
          #line 207 
          ldv_inline_asm();
        }
        #line 205 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 205 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 206 
                                                  goto out;
  #line 208 
  q->end = (q->end + 1U) % q->entries;
  #line 209 
  (q->pending) ++;
  #line 210 
  cif_tasklet_schedule(& dev->rx_tasklet);
  #line 211 
  out: 
       #line 211 
  ;
  #line 212 
  cif_spin_unlock_irqrestore_rx_lock_of_mt7601u_dev(& dev->rx_lock,flags);
  #line 213 
  return;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_rx_tasklet(unsigned long data)
{
  #line 218 
  struct mt7601u_dma_buf_rx *e;
  #line 217 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)data;
  #line 220 
  while (1) {
    #line 220 
    e = mt7601u_rx_get_pending_entry(dev);
    #line 220 
    if (! (e != (struct mt7601u_dma_buf_rx *)0)) 
                                                 #line 220 
                                                 break;
    #line 221 
    if ((e->urb)->status != 0) 
                               #line 222 
                               continue;
    #line 224 
    mt7601u_rx_process_entry(dev,e);
    #line 225 
    mt7601u_submit_rx_buf(dev,e,2592U);
  }
  #line 227 
  return;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_complete_tx(struct urb *urb)
{
  #line 250 
  int __ret_warn_once;
  #line 233 
  struct sk_buff *skb;
  #line 234 
  unsigned long flags;
  #line 231 
  struct mt7601u_tx_queue *q = (struct mt7601u_tx_queue *)urb->context;
  #line 232 
  struct mt7601u_dev *dev = q->dev;
  #line 236 
  switch (urb->status) {
    #line 237 
    case -104: 
               #line 237 
    ;
    #line 238 
    case -108: 
               #line 238 
    ;
    #line 239 
    case -2: 
             #line 239 
    ;
    #line 240 
    return;
    #line 241 
    default: 
             #line 241 
    ;
    {
      #line 242 
      struct ratelimit_state _rs = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL, .flags = 0UL};
      #line 242 
      if (___ratelimit(& _rs,(char *)"mt7601u_complete_tx") != 0) 
                                                                  #line 242 
                                                                  _dev_err(dev->dev,(char *)"tx urb failed: %d\n",urb->status);
    }
    #line 245 
    case 0: 
            #line 245 
    ;
    #line 246 
    break;
  }
  #line 249 
  cif___ldv_spin_lock_tx_lock_of_mt7601u_dev(& dev->tx_lock);
  {
    #line 250 
    bool __warned;
    #line 250 
    __ret_warn_once = q->e[q->start].urb != urb;
    #line 250 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 250 
      __warned = (_Bool)1;
      {
        #line 250 
        int __ret_warn_on = 1;
        #line 250 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 250 
          __warn_printk((char *)"TX urb mismatch");
          #line 251 
          ldv_inline_asm();
          #line 252 
          ldv_inline_asm();
        }
        #line 250 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 250 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 251 
                                                  goto out;
  #line 253 
  skb = q->e[q->start].skb;
  #line 254 
  q->e[q->start].skb = (struct sk_buff *)0;
  #line 255 
  trace_mt_tx_dma_done(dev,skb);
  #line 257 
  __skb_queue_tail(& dev->tx_skb_done,skb);
  #line 258 
  cif_tasklet_schedule(& dev->tx_tasklet);
  #line 260 
  if (q->used == q->entries - q->entries / 8U) {
    #line 261 
    ;
    #line 261 
    ieee80211_wake_queue(dev->hw,(int)skb_get_queue_mapping(skb));
  }
  #line 263 
  q->start = (q->start + 1U) % q->entries;
  #line 264 
  (q->used) --;
  #line 265 
  out: 
       #line 265 
  ;
  #line 266 
  cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev(& dev->tx_lock,flags);
  #line 267 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_tx_tasklet(unsigned long data)
{
  #line 272 
  struct sk_buff_head skbs;
  #line 273 
  unsigned long flags;
  #line 271 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)data;
  #line 275 
  __skb_queue_head_init(& skbs);
  #line 277 
  cif___ldv_spin_lock_tx_lock_of_mt7601u_dev(& dev->tx_lock);
  #line 279 
  cif_set_bit_1(6L,& dev->state);
  #line 280 
  if (! test_and_set_bit(5L,& dev->state)) {
    #line 281 
    ;
    #line 281 
    ;
    #line 281 
    cif_queue_delayed_work(dev->stat_wq,& dev->stat_work,msecs_to_jiffies(10U));
  }
  #line 284 
  skb_queue_splice_init(& dev->tx_skb_done,& skbs);
  #line 286 
  cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev(& dev->tx_lock,flags);
  #line 288 
  while (1) {
    #line 288 
    if (! (skb_queue_empty(& skbs) == 0)) 
                                          #line 288 
                                          break;
    {
      #line 289 
      struct sk_buff *skb = __skb_dequeue(& skbs);
      #line 291 
      mt7601u_tx_status(dev,skb);
    }
  }
  #line 293 
  return;
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static int mt7601u_dma_submit_tx(struct mt7601u_dev *dev, struct sk_buff *skb, u8 ep)
{
  #line 307 
  int __ret_warn_on;
  #line 300 
  struct mt7601u_dma_buf_tx *e;
  #line 302 
  unsigned long flags;
  #line 303 
  int ret;
  #line 298 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 299 
  unsigned int snd_pipe = __create_pipe(usb_dev,(unsigned int)dev->out_eps[(int)ep]) | 3221225472U;
  #line 301 
  struct mt7601u_tx_queue *q = dev->tx_q + (unsigned long)ep;
  #line 305 
  cif___ldv_spin_lock_tx_lock_of_mt7601u_dev(& dev->tx_lock);
  #line 307 
  __ret_warn_on = q->entries <= q->used;
  #line 307 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 308 
    ldv_inline_asm();
    #line 309 
    ldv_inline_asm();
  }
  #line 307 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 308 
    ret = -28;
    #line 309 
    goto out;
  }
  #line 312 
  e = & q->e[q->end];
  #line 313 
  e->skb = skb;
  #line 314 
  usb_fill_bulk_urb(e->urb,usb_dev,snd_pipe,(void *)skb->data,(int)skb->len,& mt7601u_complete_tx,(void *)q);
  #line 316 
  ret = cif_usb_submit_urb_0(e->urb,2592U);
  #line 317 
  if (ret != 0) {
    #line 321 
    if (ret == -19) 
                    #line 322 
                    cif_set_bit_1(1L,& dev->state); else 
                                                         #line 324 
                                                         _dev_err(dev->dev,(char *)"Error: TX urb submit failed:%d\n",ret);
    #line 326 
    goto out;
  }
  #line 329 
  q->end = (q->end + 1U) % q->entries;
  #line 330 
  (q->used) ++;
  #line 332 
  if (q->used >= q->entries) {
    #line 333 
    ;
    #line 333 
    ieee80211_stop_queue(dev->hw,(int)skb_get_queue_mapping(skb));
  }
  #line 334 
  out: 
       #line 334 
  ;
  #line 335 
  cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev(& dev->tx_lock,flags);
  #line 337 
  return ret;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static u8 q2ep(u8 qid)
{
  #line 344 
  return (unsigned char)((unsigned int)qid + 1U);
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static enum mt76_qsel ep2dmaq(u8 ep)
{
  #line 350 
  if ((unsigned int)ep == 5U) 
                              #line 351 
                              return MT_QSEL_MGMT;
  #line 352 
  return MT_QSEL_EDCA;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
int mt7601u_dma_enqueue_tx(struct mt7601u_dev *dev, struct sk_buff *skb, struct mt76_wcid *wcid, int hw_q)
{
  #line 359 
  u32 dma_flags;
  #line 360 
  int ret;
  #line 358 
  u8 ep = q2ep((unsigned char)((int)((unsigned char)hw_q)));
  #line 362 
  dma_flags = 524288U;
  #line 363 
  if ((unsigned int)wcid->hw_key_idx == 255U) 
                                              #line 364 
                                              dma_flags |= 16777216U;
  #line 366 
  ;
  #line 366 
  ;
  #line 366 
  ret = mt7601u_dma_skb_wrap_pkt(skb,ep2dmaq((unsigned char)((int)ep)),dma_flags);
  #line 367 
  if (ret != 0) 
                #line 368 
                return ret;
  #line 370 
  ret = mt7601u_dma_submit_tx(dev,skb,(unsigned char)((int)ep));
  #line 371 
  if (ret != 0) {
    #line 372 
    ieee80211_free_txskb(dev->hw,skb);
    #line 373 
    return ret;
  }
  #line 376 
  return 0;
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_kill_rx(struct mt7601u_dev *dev)
{
  #line 381 
  int i;
  #line 383 
  i = 0;
  #line 383 
  while (dev->rx_q.entries > (unsigned int)i) {
    #line 384 
    usb_poison_urb(dev->rx_q.e[i].urb);
    #line 383 
    i ++;
  }
  #line 385 
  return;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static int mt7601u_submit_rx_buf(struct mt7601u_dev *dev, struct mt7601u_dma_buf_rx *e, gfp_t gfp)
{
  #line 392 
  unsigned int pipe;
  #line 393 
  int ret;
  #line 390 
  struct usb_device *usb_dev = mt7601u_to_usb_dev(dev);
  #line 391 
  u8 *buf = lowmem_page_address(e->p);
  #line 395 
  pipe = __create_pipe(usb_dev,(unsigned int)dev->in_eps[0]) | 3221225600U;
  #line 397 
  usb_fill_bulk_urb(e->urb,usb_dev,pipe,(void *)buf,32768,& mt7601u_complete_rx,(void *)dev);
  #line 400 
  trace_mt_submit_urb_1(dev,e->urb);
  #line 401 
  ret = cif_usb_submit_urb_0(e->urb,gfp);
  #line 402 
  if (ret != 0) 
                #line 403 
                _dev_err(dev->dev,(char *)"Error: submit RX URB failed:%d\n",ret);
  #line 405 
  return ret;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static int mt7601u_submit_rx(struct mt7601u_dev *dev)
{
  #line 410 
  int i;
  #line 410 
  int ret;
  #line 412 
  i = 0;
  #line 412 
  while (dev->rx_q.entries > (unsigned int)i) {
    #line 413 
    ret = mt7601u_submit_rx_buf(dev,& dev->rx_q.e[i],3264U);
    #line 414 
    if (ret != 0) 
                  #line 415 
                  return ret;
    #line 412 
    i ++;
  }
  #line 418 
  return 0;
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_free_rx(struct mt7601u_dev *dev)
{
  #line 423 
  int i;
  #line 425 
  i = 0;
  #line 425 
  while (dev->rx_q.entries > (unsigned int)i) {
    #line 426 
    __free_pages(dev->rx_q.e[i].p,3U);
    #line 427 
    usb_free_urb(dev->rx_q.e[i].urb);
    #line 425 
    i ++;
  }
  #line 429 
  return;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static int mt7601u_alloc_rx(struct mt7601u_dev *dev)
{
  #line 433 
  int i;
  #line 435 
  memset((void *)(& dev->rx_q),0,280UL);
  #line 436 
  dev->rx_q.dev = dev;
  #line 437 
  dev->rx_q.entries = 16U;
  #line 439 
  i = 0;
  #line 439 
  while (i <= 15) {
    #line 440 
    dev->rx_q.e[i].urb = usb_alloc_urb(0,3264U);
    #line 441 
    dev->rx_q.e[i].p = dev_alloc_pages(3U);
    #line 443 
    if (dev->rx_q.e[i].urb == (struct urb *)0 || dev->rx_q.e[i].p == (struct page *)0) 
      #line 444 
      return -12;
    #line 439 
    i ++;
  }
  #line 447 
  return 0;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_free_tx_queue(struct mt7601u_tx_queue *q)
{
  #line 452 
  int i;
  #line 454 
  i = 0;
  #line 454 
  while (q->entries > (unsigned int)i) {
    #line 455 
    usb_poison_urb(q->e[i].urb);
    #line 456 
    if (q->e[i].skb != (struct sk_buff *)0) 
                                            #line 457 
                                            mt7601u_tx_status(q->dev,q->e[i].skb);
    #line 458 
    usb_free_urb(q->e[i].urb);
    #line 454 
    i ++;
  }
  #line 460 
  return;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static void mt7601u_free_tx(struct mt7601u_dev *dev)
{
  #line 464 
  int i;
  #line 466 
  if (dev->tx_q == (struct mt7601u_tx_queue *)0) 
                                                 #line 467 
                                                 return;
  #line 469 
  i = 0;
  #line 469 
  while (i <= 5) {
    #line 470 
    mt7601u_free_tx_queue(dev->tx_q + (unsigned long)i);
    #line 469 
    i ++;
  }
  #line 471 
  return;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static int mt7601u_alloc_tx_queue(struct mt7601u_dev *dev, struct mt7601u_tx_queue *q)
{
  #line 476 
  int i;
  #line 478 
  q->dev = dev;
  #line 479 
  q->entries = 64U;
  #line 481 
  i = 0;
  #line 481 
  while (i <= 63) {
    #line 482 
    q->e[i].urb = usb_alloc_urb(0,3264U);
    #line 483 
    if (q->e[i].urb == (struct urb *)0) 
                                        #line 484 
                                        return -12;
    #line 481 
    i ++;
  }
  #line 487 
  return 0;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
static int mt7601u_alloc_tx(struct mt7601u_dev *dev)
{
  #line 492 
  int i;
  #line 494 
  dev->tx_q = (struct mt7601u_tx_queue *)cif_devm_kcalloc(dev->dev,6UL,1056UL,3264U);
  #line 496 
  if (dev->tx_q == (struct mt7601u_tx_queue *)0) 
                                                 #line 497 
                                                 return -12;
  #line 499 
  i = 0;
  #line 499 
  while (i <= 5) {
    #line 500 
    if (mt7601u_alloc_tx_queue(dev,dev->tx_q + (unsigned long)i) != 0) 
      #line 501 
      return -12;
    #line 499 
    i ++;
  }
  #line 503 
  return 0;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
int mt7601u_dma_init(struct mt7601u_dev *dev)
{
  #line 508 
  int ret = -12;
  #line 510 
  cif_tasklet_init(& dev->tx_tasklet,& mt7601u_tx_tasklet,(unsigned long)dev);
  #line 511 
  cif_tasklet_init(& dev->rx_tasklet,& mt7601u_rx_tasklet,(unsigned long)dev);
  #line 513 
  ret = mt7601u_alloc_tx(dev);
  #line 514 
  if (ret != 0) 
                #line 515 
                goto err;
  #line 516 
  ret = mt7601u_alloc_rx(dev);
  #line 517 
  if (ret != 0) 
                #line 518 
                goto err;
  #line 520 
  ret = mt7601u_submit_rx(dev);
  #line 521 
  if (ret != 0) 
                #line 522 
                goto err;
  #line 524 
  return 0;
  #line 525 
  err: 
       #line 525 
  ;
  #line 526 
  mt7601u_dma_cleanup(dev);
  #line 527 
  return ret;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/dma.c"
void mt7601u_dma_cleanup(struct mt7601u_dev *dev)
{
  #line 532 
  mt7601u_kill_rx(dev);
  #line 534 
  tasklet_kill(& dev->rx_tasklet);
  #line 536 
  mt7601u_free_rx(dev);
  #line 537 
  mt7601u_free_tx(dev);
  #line 539 
  tasklet_kill(& dev->tx_tasklet);
  #line 540 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
#line 98 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 99 
#line 99 
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);
#line 100 
#line 100 
void emg_tasklet_schedule(struct tasklet_struct *arg0);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 125 
  ldv_set_bit(nr,addr);
  #line 126 
  return;
}

#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 188 
  ldv_atomic_inc(v);
  #line 189 
  return;
}

#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 310 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_lock_mac_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 804 
  ldv_spin_model_lock((char *)"mac_lock_of_mt7601u_dev");
  #line 806 
  spin_lock(lock);
  #line 807 
  return;
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_unlock_mac_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 813 
  ldv_spin_model_unlock((char *)"mac_lock_of_mt7601u_dev");
  #line 815 
  spin_unlock(lock);
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif___ldv_spin_lock_rx_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 822 
  ldv_spin_model_lock((char *)"rx_lock_of_mt7601u_dev");
  #line 824 
  __ldv_spin_lock(lock);
  #line 825 
  return;
}

#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_unlock_irqrestore_rx_lock_of_mt7601u_dev(spinlock_t *lock, unsigned long flags)
{
  #line 831 
  ldv_spin_model_unlock((char *)"rx_lock_of_mt7601u_dev");
  #line 833 
  spin_unlock_irqrestore_0(lock,flags);
  #line 834 
  return;
}

#line 837  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_tasklet_schedule(struct tasklet_struct *t)
{
  #line 841 
  emg_tasklet_schedule(t);
  #line 842 
  return;
}

#line 845  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif___ldv_spin_lock_tx_lock_of_mt7601u_dev(spinlock_t *lock)
{
  #line 848 
  ldv_spin_model_lock((char *)"tx_lock_of_mt7601u_dev");
  #line 850 
  __ldv_spin_lock(lock);
  #line 851 
  return;
}

#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev(spinlock_t *lock, unsigned long flags)
{
  #line 857 
  ldv_spin_model_unlock((char *)"tx_lock_of_mt7601u_dev");
  #line 859 
  spin_unlock_irqrestore_0(lock,flags);
  #line 860 
  return;
}

#line 863  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static int cif_usb_submit_urb_0(struct urb *urb, gfp_t mem_flags)
{
  #line 867 
  return emg_usb_submit_urb(urb,mem_flags);
}

#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 874 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 878  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/dma.i.aux"
static void cif_tasklet_init(struct tasklet_struct *t, void (*func)(unsigned long ), unsigned long data)
{
  #line 882 
  emg_tasklet_init(t,func,data);
  #line 883 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_9919 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cloned(struct sk_buff *skb)
{
  #line 1600 
  int tmp_1;
  #line 1600 
  if ((unsigned int)skb->cloned != 0U) {
    #line 1600 
    if ((atomic_read_1(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref) & 65535) != 1) 
      #line 1600 
      tmp_1 = 1; else 
                      #line 1600 
                      tmp_1 = 0;
  }
  else 
       #line 1600 
       tmp_1 = 0;
  #line 1600 
  return tmp_1;
}

#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow(struct sk_buff *skb, unsigned int headroom)
{
  #line 3139 
  ;
  #line 3139 
  ;
  #line 3139 
  return __skb_cow(skb,headroom,skb_cloned(skb));
}

#line 5170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
#line 5170 
unsigned int ieee80211_get_hdrlen_from_skb(struct sk_buff *);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/util.c"
void mt76_remove_hdr_pad(struct sk_buff *skb);
#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/util.c"
int mt76_insert_hdr_pad(struct sk_buff *skb);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/util.c"
void mt76_remove_hdr_pad(struct sk_buff *skb)
{
  #line 10 
  int len = (int)ieee80211_get_hdrlen_from_skb(skb);
  #line 12 
  __memmove((void *)(skb->data + 2U),(void *)skb->data,(unsigned long)len);
  #line 13 
  skb_pull(skb,2U);
  #line 14 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/util.c"
int mt76_insert_hdr_pad(struct sk_buff *skb)
{
  #line 19 
  int ret;
  #line 18 
  int len = (int)ieee80211_get_hdrlen_from_skb(skb);
  #line 21 
  if (((unsigned int)len & 3U) == 0U) 
                                      #line 22 
                                      return 0;
  #line 24 
  ret = skb_cow(skb,2U);
  #line 25 
  if (ret != 0) 
                #line 26 
                return ret;
  #line 28 
  skb_push(skb,2U);
  #line 29 
  __memmove((void *)skb->data,(void *)(skb->data + 2U),(unsigned long)len);
  #line 31 
  *(skb->data + (unsigned long)len) = (unsigned char)0U;
  #line 32 
  *(skb->data + ((unsigned long)len + (unsigned long)1U)) = (unsigned char)0U;
  #line 33 
  return 0;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_10950 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_0(v,i);
  #line 46 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
#line 801 
static void cif_mutex_lock_hw_atomic_mutex_of_mt7601u_dev_0(struct mutex *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_mutex_unlock_hw_atomic_mutex_of_mt7601u_dev_0(struct mutex *lock);
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 465 
#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static bool cif_flush_delayed_work(struct delayed_work *dwork);
#line 928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *cif_devm_kmalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags);
#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 956 
void *devm_kmemdup(struct device *, void *, size_t, gfp_t);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1843 
  spinlock_check(& list->lock);
  {
    #line 1843 
    struct lock_class_key __key;
    #line 1843 
    __raw_spin_lock_init(& list->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&list->lock)->rlock",& __key);
  }
  #line 1844 
  __skb_queue_head_init(list);
  #line 1845 
  return;
}

#line 4738  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  #line 4740 
  wiphy->dev.parent = dev;
  #line 4741 
  return;
}

#line 7322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/cfg80211.h"
__inline static void wiphy_ext_feature_set(struct wiphy *wiphy, enum nl80211_ext_feature_index ftidx)
{
  #line 7325 
  u8 *ft_byte;
  #line 7327 
  ft_byte = & wiphy->ext_features[(unsigned int)ftidx / 8U];
  #line 7328 
  *ft_byte = (unsigned char)((int)*ft_byte | (int)((unsigned char)(1UL << ((unsigned int)ftidx & 7U))));
  #line 7329 
  return;
}

#line 2533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void _ieee80211_hw_set(struct ieee80211_hw *hw, enum ieee80211_hw_flags flg)
{
  #line 2536 
  __set_bit((long)flg,(unsigned long *)(& hw->flags));
  #line 2537 
  return;
}

#line 2599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_DEV(struct ieee80211_hw *hw, struct device *dev)
{
  #line 2601 
  set_wiphy_dev(hw->wiphy,dev);
  #line 2602 
  return;
}

#line 2610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void SET_IEEE80211_PERM_ADDR(struct ieee80211_hw *hw, u8 *addr)
{
  #line 2612 
  memcpy((void *)(& (hw->wiphy)->perm_addr),(void *)addr,6UL);
  #line 2613 
  return;
}

#line 4123 
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops);
#line 4135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 4135 
int ieee80211_register_hw(struct ieee80211_hw *);
#line 4301 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_ieee80211_free_hw_0(struct ieee80211_hw *hw);
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
struct ieee80211_ops mt7601u_ops;
#line 338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
int mt7601u_mac_start(struct mt7601u_dev *dev);
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
void mt7601u_mac_stop(struct mt7601u_dev *dev);
#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 373 
void mt7601u_tx_stat(struct work_struct *work);
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals.h"
static struct mt76_reg_pair bbp_common_vals[16U] = {{.reg = 65U, .value = 44U}, {.reg = 66U, .value = 56U}, {.reg = 68U, .value = 11U}, {.reg = 69U, .value = 18U}, {.reg = 70U, .value = 10U}, {.reg = 73U, .value = 16U}, {.reg = 81U, .value = 55U}, {.reg = 82U, .value = 98U}, {.reg = 83U, .value = 106U}, {.reg = 84U, .value = 153U}, {.reg = 86U}, {.reg = 91U, .value = 4U}, {.reg = 92U}, {.reg = 103U}, {.reg = 105U, .value = 5U}, {.reg = 106U, .value = 53U}};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals.h"
static struct mt76_reg_pair bbp_chip_vals[150U] = {{.reg = 1U, .value = 4U}, {.reg = 4U, .value = 64U}, {.reg = 20U, .value = 6U}, {.reg = 31U, .value = 8U}, {.reg = 178U, .value = 255U}, {.reg = 66U, .value = 20U}, {.reg = 68U, .value = 139U}, {.reg = 69U, .value = 18U}, {.reg = 70U, .value = 9U}, {.reg = 73U, .value = 17U}, {.reg = 75U, .value = 96U}, {.reg = 76U, .value = 68U}, {.reg = 84U, .value = 154U}, {.reg = 86U, .value = 56U}, {.reg = 91U, .value = 7U}, {.reg = 92U, .value = 2U}, {.reg = 99U, .value = 80U}, {.reg = 101U}, {.reg = 103U, .value = 192U}, {.reg = 104U, .value = 146U}, {.reg = 105U, .value = 60U}, {.reg = 106U, .value = 3U}, {.reg = 128U, .value = 18U}, {.reg = 142U, .value = 4U}, {.reg = 143U, .value = 55U}, {.reg = 142U, .value = 3U}, {.reg = 143U, .value = 153U}, {.reg = 160U, .value = 235U}, {.reg = 161U, .value = 196U}, {.reg = 162U, .value = 119U}, {.reg = 163U, .value = 249U}, {.reg = 164U, .value = 136U}, {.reg = 165U, .value = 128U}, {.reg = 166U, .value = 255U}, {.reg = 167U, .value = 228U}, {.reg = 195U}, {.reg = 196U}, {.reg = 195U, .value = 1U}, {.reg = 196U, .value = 4U}, {.reg = 195U, .value = 2U}, {.reg = 196U, .value = 32U}, {.reg = 195U, .value = 3U}, {.reg = 196U, .value = 10U}, {.reg = 195U, .value = 6U}, {.reg = 196U, .value = 22U}, {.reg = 195U, .value = 7U}, {.reg = 196U, .value = 5U}, {.reg = 195U, .value = 8U}, {.reg = 196U, .value = 55U}, {.reg = 195U, .value = 10U}, {.reg = 196U, .value = 21U}, {.reg = 195U, .value = 11U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 12U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 13U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 14U}, {.reg = 196U, .value = 5U}, {.reg = 195U, .value = 15U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 16U}, {.reg = 196U, .value = 32U}, {.reg = 195U, .value = 32U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 33U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 34U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 35U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 36U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 37U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 38U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 39U}, {.reg = 196U, .value = 6U}, {.reg = 195U, .value = 40U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 41U}, {.reg = 196U, .value = 5U}, {.reg = 195U, .value = 42U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 128U}, {.reg = 196U, .value = 139U}, {.reg = 195U, .value = 129U}, {.reg = 196U, .value = 18U}, {.reg = 195U, .value = 130U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 131U}, {.reg = 196U, .value = 23U}, {.reg = 195U, .value = 132U}, {.reg = 196U, .value = 17U}, {.reg = 195U, .value = 133U}, {.reg = 196U}, {.reg = 195U, .value = 134U}, {.reg = 196U}, {.reg = 195U, .value = 135U}, {.reg = 196U, .value = 24U}, {.reg = 195U, .value = 136U}, {.reg = 196U, .value = 96U}, {.reg = 195U, .value = 137U}, {.reg = 196U, .value = 68U}, {.reg = 195U, .value = 138U}, {.reg = 196U, .value = 139U}, {.reg = 195U, .value = 139U}, {.reg = 196U, .value = 139U}, {.reg = 195U, .value = 140U}, {.reg = 196U, .value = 139U}, {.reg = 195U, .value = 141U}, {.reg = 196U, .value = 139U}, {.reg = 195U, .value = 142U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 143U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 144U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 145U}, {.reg = 196U, .value = 9U}, {.reg = 195U, .value = 146U}, {.reg = 196U, .value = 17U}, {.reg = 195U, .value = 147U}, {.reg = 196U, .value = 17U}, {.reg = 195U, .value = 148U}, {.reg = 196U, .value = 17U}, {.reg = 195U, .value = 149U}, {.reg = 196U, .value = 17U}, {.reg = 47U, .value = 128U}, {.reg = 60U, .value = 128U}, {.reg = 150U, .value = 210U}, {.reg = 151U, .value = 50U}, {.reg = 152U, .value = 35U}, {.reg = 153U, .value = 65U}, {.reg = 154U}, {.reg = 155U, .value = 79U}, {.reg = 253U, .value = 126U}, {.reg = 195U, .value = 48U}, {.reg = 196U, .value = 50U}, {.reg = 195U, .value = 49U}, {.reg = 196U, .value = 35U}, {.reg = 195U, .value = 50U}, {.reg = 196U, .value = 69U}, {.reg = 195U, .value = 53U}, {.reg = 196U, .value = 74U}, {.reg = 195U, .value = 54U}, {.reg = 196U, .value = 90U}, {.reg = 195U, .value = 55U}, {.reg = 196U, .value = 90U}};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals.h"
static struct mt76_reg_pair mac_common_vals[27U] = {{.reg = 5128U, .value = 319U}, {.reg = 5132U, .value = 32771U}, {.reg = 4100U}, {.reg = 5120U, .value = 98199U}, {.reg = 4356U, .value = 521U}, {.reg = 4912U}, {.reg = 4916U, .value = 525830U}, {.reg = 4944U, .value = 4128U}, {.reg = 4936U, .value = 663696U}, {.reg = 4120U, .value = 16383U}, {.reg = 1032U, .value = 532619039U}, {.reg = 1036U, .value = 159U}, {.reg = 4940U, .value = 1204821775U}, {.reg = 5124U, .value = 19U}, {.reg = 4964U, .value = 91488259U}, {.reg = 4968U, .value = 91488259U}, {.reg = 4976U, .value = 66338948U}, {.reg = 4980U, .value = 24395780U}, {.reg = 4984U, .value = 66338948U}, {.reg = 4972U, .value = 24395780U}, {.reg = 4928U, .value = 22591U}, {.reg = 4932U, .value = 17378080U}, {.reg = 4992U, .value = 2359498U}, {.reg = 5640U, .value = 2U}, {.reg = 4352U, .value = 866390032U}, {.reg = 4612U}, {.reg = 5388U, .value = 1U}};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/initvals.h"
static struct mt76_reg_pair mac_chip_vals[17U] = {{.reg = 592U, .value = 24656U}, {.reg = 1052U, .value = 403703808U}, {.reg = 1056U, .value = 942680096U}, {.reg = 1024U, .value = 527360U}, {.reg = 1028U, .value = 2138192927U}, {.reg = 2048U, .value = 1U}, {.reg = 2616U}, {.reg = 5024U, .value = 3866629U}, {.reg = 5032U, .value = 26880U}, {.reg = 5056U, .value = 1024U}, {.reg = 5064U, .value = 393222U}, {.reg = 4912U, .value = 1026U}, {.reg = 4916U}, {.reg = 4920U}, {.reg = 608U}, {.reg = 2056U, .value = 783U}, {.reg = 2052U, .value = 2453263U}};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_set_wlan_state(struct mt7601u_dev *dev, u32 val, bool enable)
{
  #line 18 
  int i;
  #line 26 
  if ((int)enable != 0) 
                        #line 27 
                        val |= 3U; else 
                                        #line 30 
                                        val &= 4294967294U;
  #line 32 
  mt7601u_wr(dev,128U,val);
  #line 33 
  __const_udelay(85900UL);
  #line 35 
  if ((int)enable != 0) 
                        #line 36 
                        cif_set_bit_2(2L,& dev->state);
  else {
    #line 38 
    cif_clear_bit(2L,& dev->state);
    #line 39 
    return;
  }
  #line 42 
  i = 200;
  #line 42 
  while (i != 0) {
    #line 43 
    val = mt7601u_rr(dev,32U);
    #line 45 
    if (((unsigned long)val & 4194304UL) != 0UL && ((unsigned long)val & 8388608UL) != 0UL) 
      #line 46 
      break;
    #line 48 
    __const_udelay(85900UL);
    #line 42 
    i --;
  }
  #line 55 
  if (i == 0) 
              #line 56 
              _dev_err(dev->dev,(char *)"Error: PLL and XTAL check failed!\n");
  #line 57 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_chip_onoff(struct mt7601u_dev *dev, bool enable, bool reset)
{
  #line 61 
  u32 val;
  #line 63 
  cif_mutex_lock_hw_atomic_mutex_of_mt7601u_dev_0(& dev->hw_atomic_mutex);
  #line 65 
  val = mt7601u_rr(dev,128U);
  #line 67 
  if ((int)reset != 0) {
    #line 68 
    val |= 4278190080U;
    #line 69 
    val &= 4294967263U;
    #line 71 
    if (((unsigned long)val & 1UL) != 0UL) {
      #line 72 
      val |= 12U;
      #line 74 
      mt7601u_wr(dev,128U,val);
      #line 75 
      __const_udelay(85900UL);
      #line 77 
      val &= 4294967283U;
    }
  }
  #line 82 
  mt7601u_wr(dev,128U,val);
  #line 83 
  __const_udelay(85900UL);
  #line 85 
  mt7601u_set_wlan_state(dev,val,(_Bool)((bool)((int)enable) != 0));
  #line 87 
  cif_mutex_unlock_hw_atomic_mutex_of_mt7601u_dev_0(& dev->hw_atomic_mutex);
  #line 88 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_reset_csr_bbp(struct mt7601u_dev *dev)
{
  #line 92 
  mt7601u_wr(dev,4100U,3U);
  #line 94 
  mt7601u_wr(dev,568U,0U);
  #line 95 
  msleep(1U);
  #line 96 
  mt7601u_wr(dev,4100U,0U);
  #line 97 
  return;
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_init_usb_dma(struct mt7601u_dev *dev)
{
  #line 101 
  u32 val;
  #line 103 
  val = ((unsigned int)128UL | (unsigned int)7168UL) | 12582912U;
  #line 108 
  if ((unsigned int)dev->in_max_packet == 512U) 
                                                #line 109 
                                                val |= 2097152U;
  #line 110 
  mt7601u_wr(dev,568U,val);
  #line 112 
  val |= 33554432U;
  #line 113 
  mt7601u_wr(dev,568U,val);
  #line 114 
  val &= 4261412863U;
  #line 115 
  mt7601u_wr(dev,568U,val);
  #line 116 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt7601u_init_bbp(struct mt7601u_dev *dev)
{
  #line 120 
  int ret;
  #line 122 
  ret = mt7601u_wait_bbp_ready(dev);
  #line 123 
  if (ret != 0) 
                #line 124 
                return ret;
  #line 126 
  ret = mt7601u_write_reg_pairs(dev,1073741824U,(struct mt76_reg_pair *)(& bbp_common_vals),16);
  #line 128 
  if (ret != 0) 
                #line 129 
                return ret;
  #line 131 
  return mt7601u_write_reg_pairs(dev,1073741824U,
                              (struct mt76_reg_pair *)(& bbp_chip_vals),150);
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt76_init_beacon_offsets(struct mt7601u_dev *dev)
{
  #line 140 
  int i;
  #line 138 
  u16 base = (unsigned short)49152U;
  #line 139 
  u32 regs[4U] = {};
  #line 142 
  i = 0;
  #line 142 
  while (i <= 15) {
    {
      #line 143 
      u16 addr = *(dev->beacon_offsets + (unsigned long)i);
      #line 145 
      regs[i / 4] |= (unsigned int)(((int)addr - (int)base) / 64 << (i % 4) * 8);
    }
    #line 142 
    i ++;
  }
  #line 148 
  i = 0;
  #line 148 
  while (i <= 3) {
    #line 149 
    mt7601u_wr(dev,(unsigned int)((i << 2) + 1052),regs[i]);
    #line 148 
    i ++;
  }
  #line 150 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt7601u_write_mac_initvals(struct mt7601u_dev *dev)
{
  #line 154 
  int ret;
  #line 156 
  ret = mt7601u_write_reg_pairs(dev,4259840U,(struct mt76_reg_pair *)(& mac_common_vals),27);
  #line 158 
  if (ret != 0) 
                #line 159 
                return ret;
  #line 160 
  ret = mt7601u_write_reg_pairs(dev,4259840U,(struct mt76_reg_pair *)(& mac_chip_vals),17);
  #line 162 
  if (ret != 0) 
                #line 163 
                return ret;
  #line 165 
  mt76_init_beacon_offsets(dev);
  #line 167 
  mt7601u_wr(dev,4620U,0U);
  #line 169 
  return 0;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt7601u_init_wcid_mem(struct mt7601u_dev *dev)
{
  #line 174 
  u32 *vals;
  #line 175 
  int i;
  #line 175 
  int ret;
  #line 177 
  vals = (u32 *)kmalloc_0(1024UL,3264U);
  #line 178 
  if (vals == (u32 *)0U) 
                         #line 179 
                         return -12;
  #line 181 
  i = 0;
  #line 181 
  while (i <= 127) {
    #line 182 
    *(vals + (unsigned long)(i * 2)) = 4294967295U;
    #line 183 
    *(vals + ((unsigned long)(i * 2) + (unsigned long)1U)) = 16777215U;
    #line 181 
    i ++;
  }
  #line 186 
  ret = mt7601u_burst_write_regs(dev,6144U,vals,256);
  #line 188 
  kfree((void *)vals);
  #line 190 
  return ret;
}

#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt7601u_init_key_mem(struct mt7601u_dev *dev)
{
  #line 195 
  u32 vals[4U] = {};
  #line 197 
  return mt7601u_burst_write_regs(dev,45056U,(u32 *)(& vals),4);
}

#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt7601u_init_wcid_attr_mem(struct mt7601u_dev *dev)
{
  #line 203 
  u32 *vals;
  #line 204 
  int i;
  #line 204 
  int ret;
  #line 206 
  vals = (u32 *)kmalloc_0(1024UL,3264U);
  #line 207 
  if (vals == (u32 *)0U) 
                         #line 208 
                         return -12;
  #line 210 
  i = 0;
  #line 210 
  while (i <= 255) {
    #line 211 
    *(vals + (unsigned long)i) = 1U;
    #line 210 
    i ++;
  }
  #line 213 
  ret = mt7601u_burst_write_regs(dev,43008U,vals,256);
  #line 215 
  kfree((void *)vals);
  #line 217 
  return ret;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_reset_counters(struct mt7601u_dev *dev)
{
  #line 222 
  mt7601u_rr(dev,5888U);
  #line 223 
  mt7601u_rr(dev,5892U);
  #line 224 
  mt7601u_rr(dev,5896U);
  #line 225 
  mt7601u_rr(dev,5900U);
  #line 226 
  mt7601u_rr(dev,5904U);
  #line 227 
  mt7601u_rr(dev,5908U);
  #line 228 
  return;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
int mt7601u_mac_start(struct mt7601u_dev *dev)
{
  #line 232 
  mt7601u_wr(dev,4100U,4U);
  #line 234 
  if (! mt76_poll(dev,520U,10U,0U,200000)) 
                                           #line 236 
                                           return -110;
  #line 238 
  dev->rxfilter = 98199U;
  #line 245 
  mt7601u_wr(dev,5120U,dev->rxfilter);
  #line 247 
  mt7601u_wr(dev,4100U,12U);
  #line 250 
  if (! mt76_poll(dev,520U,10U,0U,50)) 
                                       #line 252 
                                       return -110;
  #line 254 
  return 0;
}

#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_mac_stop_hw(struct mt7601u_dev *dev)
{
  #line 259 
  int i;
  #line 259 
  int ok;
  #line 261 
  if ((int)test_bit(1L,& dev->state) != 0) 
                                           #line 262 
                                           return;
  #line 264 
  mt76_clear(dev,4372U,2031616U);
  #line 268 
  if (! mt76_poll(dev,568U,2147483648U,0U,1000)) 
                                                 #line 269 
                                                 _dev_warn(dev->dev,(char *)"Warning: TX DMA did not stop!\n");
  #line 272 
  i = 200;
  #line 273 
  while (1) {
    #line 273 
    int tmp_1;
    #line 273 
    tmp_1 = i;
    #line 273 
    i --;
    #line 273 
    ;
    #line 273 
    if (tmp_1 != 0) {
      #line 273 
      if (! (mt76_rr(dev,1080U) != 0U)) {
        #line 273 
        if (! ((mt76_rr(dev,2608U) & 255U) != 0U)) {
          #line 274 
          if (! ((mt76_rr(dev,2612U) & 16711935U) != 0U)) 
                                                          #line 273 
                                                          break;
        }
      }
    }
    else 
         #line 273 
         break;
    #line 276 
    msleep(10U);
  }
  #line 278 
  if (! mt76_poll(dev,4608U,1U,0U,1000)) 
                                         #line 279 
                                         _dev_warn(dev->dev,(char *)"Warning: MAC TX did not stop!\n");
  #line 281 
  mt76_clear(dev,4100U,12U);
  #line 285 
  ok = 0;
  #line 286 
  i = 200;
  #line 287 
  while (1) {
    #line 287 
    int tmp_10;
    #line 287 
    tmp_10 = i;
    #line 287 
    i --;
    #line 287 
    ;
    #line 287 
    if (! (tmp_10 != 0)) 
                         #line 287 
                         break;
    {
      #line 288 
      if ((mt76_rr(dev,1072U) & 16711680U) == 0U) {
        #line 288 
        if (mt76_rr(dev,2608U) == 0U) {
          #line 289 
          if (mt76_rr(dev,2612U) == 0U) {
            #line 291 
            int tmp_6;
            #line 291 
            tmp_6 = ok;
            #line 291 
            ok ++;
            #line 291 
            ;
            #line 291 
            if (tmp_6 > 5) 
                           #line 292 
                           break;
            #line 293 
            continue;
          }
        }
      }
      #line 295 
      msleep(1U);
    }
  }
  #line 298 
  if (! mt76_poll(dev,4608U,2U,0U,1000)) 
                                         #line 299 
                                         _dev_warn(dev->dev,(char *)"Warning: MAC RX did not stop!\n");
  #line 301 
  if (! mt76_poll(dev,568U,1073741824U,0U,1000)) 
                                                 #line 302 
                                                 _dev_warn(dev->dev,(char *)"Warning: RX DMA did not stop!\n");
  #line 303 
  return;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
void mt7601u_mac_stop(struct mt7601u_dev *dev)
{
  #line 307 
  mt7601u_mac_stop_hw(dev);
  #line 308 
  cif_flush_delayed_work(& dev->stat_work);
  #line 309 
  cancel_delayed_work_sync(& dev->stat_work);
  #line 310 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static void mt7601u_stop_hardware(struct mt7601u_dev *dev)
{
  #line 314 
  mt7601u_chip_onoff(dev,(_Bool)0,(_Bool)0);
  #line 315 
  return;
}

#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
int mt7601u_init_hardware(struct mt7601u_dev *dev)
{
  #line 326 
  int ret;
  #line 319 
  u16 beacon_offsets[16U] = {(unsigned short)49152U, (unsigned short)49664U, (unsigned short)50176U, (unsigned short)50688U, (unsigned short)51200U, (unsigned short)51712U, (unsigned short)52224U, (unsigned short)52736U, (unsigned short)53248U, (unsigned short)53760U, (unsigned short)54272U, (unsigned short)54784U, (unsigned short)55296U, (unsigned short)55808U, (unsigned short)56320U, (unsigned short)56832U};
  #line 328 
  dev->beacon_offsets = (u16 *)(& beacon_offsets);
  #line 330 
  mt7601u_chip_onoff(dev,(_Bool)1,(_Bool)0);
  #line 332 
  ret = mt7601u_wait_asic_ready(dev);
  #line 333 
  if (ret != 0) 
                #line 334 
                goto err;
  #line 335 
  ret = mt7601u_mcu_init(dev);
  #line 336 
  if (ret != 0) 
                #line 337 
                goto err;
  #line 339 
  if (! mt76_poll_msec(dev,520U,10U,0U,100)) {
    #line 342 
    ret = -5;
    #line 343 
    goto err;
  }
  #line 347 
  ret = mt7601u_wait_asic_ready(dev);
  #line 348 
  if (ret != 0) 
                #line 349 
                goto err;
  #line 351 
  mt7601u_reset_csr_bbp(dev);
  #line 352 
  mt7601u_init_usb_dma(dev);
  #line 354 
  ret = mt7601u_mcu_cmd_init(dev);
  #line 355 
  if (ret != 0) 
                #line 356 
                goto err;
  #line 357 
  ret = mt7601u_dma_init(dev);
  #line 358 
  if (ret != 0) 
                #line 359 
                goto err_mcu;
  #line 360 
  ret = mt7601u_write_mac_initvals(dev);
  #line 361 
  if (ret != 0) 
                #line 362 
                goto err_rx;
  #line 364 
  if (! mt76_poll_msec(dev,4608U,3U,0U,100)) {
    #line 366 
    ret = -5;
    #line 367 
    goto err_rx;
  }
  #line 370 
  ret = mt7601u_init_bbp(dev);
  #line 371 
  if (ret != 0) 
                #line 372 
                goto err_rx;
  #line 373 
  ret = mt7601u_init_wcid_mem(dev);
  #line 374 
  if (ret != 0) 
                #line 375 
                goto err_rx;
  #line 376 
  ret = mt7601u_init_key_mem(dev);
  #line 377 
  if (ret != 0) 
                #line 378 
                goto err_rx;
  #line 379 
  ret = mt7601u_init_wcid_attr_mem(dev);
  #line 380 
  if (ret != 0) 
                #line 381 
                goto err_rx;
  #line 383 
  mt76_clear(dev,4372U,2031616U);
  #line 388 
  mt7601u_reset_counters(dev);
  #line 390 
  mt7601u_rmw(dev,676U,255U,30U);
  #line 392 
  ;
  #line 392 
  mt7601u_wr(dev,4928U,(unsigned int)63UL | (unsigned int)22528UL);
  #line 396 
  ret = mt7601u_eeprom_init(dev);
  #line 397 
  if (ret != 0) 
                #line 398 
                goto err_rx;
  #line 400 
  ret = mt7601u_phy_init(dev);
  #line 401 
  if (ret != 0) 
                #line 402 
                goto err_rx;
  #line 404 
  mt7601u_set_rx_path(dev,(unsigned char)0);
  #line 405 
  mt7601u_set_tx_dac(dev,(unsigned char)0);
  #line 407 
  mt7601u_mac_set_ctrlch(dev,(_Bool)0);
  #line 408 
  mt7601u_bbp_set_ctrlch(dev,(_Bool)0);
  #line 409 
  mt7601u_bbp_set_bw(dev,0);
  #line 411 
  return 0;
  #line 413 
  err_rx: 
          #line 413 
  ;
  #line 414 
  mt7601u_dma_cleanup(dev);
  #line 415 
  err_mcu: 
           #line 415 
  ;
  #line 416 
  mt7601u_mcu_cmd_deinit(dev);
  #line 417 
  err: 
       #line 417 
  ;
  #line 418 
  mt7601u_chip_onoff(dev,(_Bool)0,(_Bool)0);
  #line 419 
  return ret;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
void mt7601u_cleanup(struct mt7601u_dev *dev)
{
  #line 424 
  if (! test_and_set_bit(0L,& dev->state)) 
                                           #line 425 
                                           return;
  #line 427 
  mt7601u_stop_hardware(dev);
  #line 428 
  mt7601u_dma_cleanup(dev);
  #line 429 
  mt7601u_mcu_cmd_deinit(dev);
  #line 430 
  return;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
struct mt7601u_dev *mt7601u_alloc_device(struct device *pdev)
{
  #line 434 
  struct ieee80211_hw *hw;
  #line 435 
  struct mt7601u_dev *dev;
  #line 437 
  hw = cif_ieee80211_alloc_hw(4144UL,& mt7601u_ops);
  #line 438 
  if (hw == (struct ieee80211_hw *)0) 
                                      #line 439 
                                      return (struct mt7601u_dev *)0;
  #line 441 
  dev = (struct mt7601u_dev *)hw->priv;
  #line 442 
  dev->dev = pdev;
  #line 443 
  dev->hw = hw;
  {
    #line 444 
    struct lock_class_key __key;
    #line 444 
    __mutex_init(& dev->vendor_req_mutex,(char *)"&dev->vendor_req_mutex",& __key);
  }
  {
    #line 445 
    struct lock_class_key __key_0;
    #line 445 
    __mutex_init(& dev->reg_atomic_mutex,(char *)"&dev->reg_atomic_mutex",& __key_0);
  }
  {
    #line 446 
    struct lock_class_key __key_1;
    #line 446 
    __mutex_init(& dev->hw_atomic_mutex,(char *)"&dev->hw_atomic_mutex",& __key_1);
  }
  {
    #line 447 
    struct lock_class_key __key_2;
    #line 447 
    __mutex_init(& dev->mutex,(char *)"&dev->mutex",& __key_2);
  }
  #line 448 
  spinlock_check(& dev->tx_lock);
  {
    #line 448 
    struct lock_class_key __key_3;
    #line 448 
    __raw_spin_lock_init(& dev->tx_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&dev->tx_lock)->rlock",& __key_3);
  }
  #line 449 
  spinlock_check(& dev->rx_lock);
  {
    #line 449 
    struct lock_class_key __key_4;
    #line 449 
    __raw_spin_lock_init(& dev->rx_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&dev->rx_lock)->rlock",& __key_4);
  }
  #line 450 
  spinlock_check(& dev->lock);
  {
    #line 450 
    struct lock_class_key __key_5;
    #line 450 
    __raw_spin_lock_init(& dev->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&dev->lock)->rlock",& __key_5);
  }
  #line 451 
  spinlock_check(& dev->mac_lock);
  {
    #line 451 
    struct lock_class_key __key_6;
    #line 451 
    __raw_spin_lock_init(& dev->mac_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&dev->mac_lock)->rlock",& __key_6);
  }
  #line 452 
  spinlock_check(& dev->con_mon_lock);
  {
    #line 452 
    struct lock_class_key __key_7;
    #line 452 
    __raw_spin_lock_init(& dev->con_mon_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&dev->con_mon_lock)->rlock",& __key_7);
  }
  #line 453 
  atomic_set_0(& dev->avg_ampdu_len,1);
  #line 454 
  skb_queue_head_init(& dev->tx_skb_done);
  #line 456 
  dev->stat_wq = alloc_workqueue((char *)"mt7601u",2U,0);
  #line 457 
  if (dev->stat_wq == (struct workqueue_struct *)0) {
    #line 458 
    cif_ieee80211_free_hw_0(hw);
    #line 459 
    return (struct mt7601u_dev *)0;
  }
  #line 462 
  return dev;
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static struct ieee80211_channel mt76_channels_2ghz[14U] = {{.center_freq = 2412U, .hw_value = (unsigned short)1U, .max_power = 30}, {.center_freq = 2417U, .hw_value = (unsigned short)2U, .max_power = 30}, {.center_freq = 2422U, .hw_value = (unsigned short)3U, .max_power = 30}, {.center_freq = 2427U, .hw_value = (unsigned short)4U, .max_power = 30}, {.center_freq = 2432U, .hw_value = (unsigned short)5U, .max_power = 30}, {.center_freq = 2437U, .hw_value = (unsigned short)6U, .max_power = 30}, {.center_freq = 2442U, .hw_value = (unsigned short)7U, .max_power = 30}, {.center_freq = 2447U, .hw_value = (unsigned short)8U, .max_power = 30}, {.center_freq = 2452U, .hw_value = (unsigned short)9U, .max_power = 30}, {.center_freq = 2457U, .hw_value = (unsigned short)10U, .max_power = 30}, {.center_freq = 2462U, .hw_value = (unsigned short)11U, .max_power = 30}, {.center_freq = 2467U, .hw_value = (unsigned short)12U, .max_power = 30}, {.center_freq = 2472U, .hw_value = (unsigned short)13U, .max_power = 30}, {.center_freq = 2484U, .hw_value = (unsigned short)14U, .max_power = 30}};
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static struct ieee80211_rate mt76_rates[12U] = {{.flags = 1U, .bitrate = (unsigned short)10U, .hw_value_short = (unsigned short)8U}, {.flags = 1U, .bitrate = (unsigned short)20U, .hw_value = (unsigned short)1U, .hw_value_short = (unsigned short)9U}, {.flags = 1U, .bitrate = (unsigned short)55U, .hw_value = (unsigned short)2U, .hw_value_short = (unsigned short)10U}, {.flags = 1U, .bitrate = (unsigned short)110U, .hw_value = (unsigned short)3U, .hw_value_short = (unsigned short)11U}, {.bitrate = (unsigned short)60U, .hw_value = (unsigned short)256U, .hw_value_short = (unsigned short)256U}, {.bitrate = (unsigned short)90U, .hw_value = (unsigned short)257U, .hw_value_short = (unsigned short)257U}, {.bitrate = (unsigned short)120U, .hw_value = (unsigned short)258U, .hw_value_short = (unsigned short)258U}, {.bitrate = (unsigned short)180U, .hw_value = (unsigned short)259U, .hw_value_short = (unsigned short)259U}, {.bitrate = (unsigned short)240U, .hw_value = (unsigned short)260U, .hw_value_short = (unsigned short)260U}, {.bitrate = (unsigned short)360U, .hw_value = (unsigned short)261U, .hw_value_short = (unsigned short)261U}, {.bitrate = (unsigned short)480U, .hw_value = (unsigned short)262U, .hw_value_short = (unsigned short)262U}, {.bitrate = (unsigned short)540U, .hw_value = (unsigned short)263U, .hw_value_short = (unsigned short)263U}};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt76_init_sband(struct mt7601u_dev *dev, struct ieee80211_supported_band *sband, struct ieee80211_channel *chan, int n_chan, struct ieee80211_rate *rates, int n_rates)
{
  #line 522 
  struct ieee80211_sta_ht_cap *ht_cap;
  #line 523 
  void *chanlist;
  #line 524 
  int size;
  #line 526 
  size = (int)((unsigned long)n_chan * (unsigned long)64U);
  #line 527 
  chanlist = devm_kmemdup(dev->dev,(void *)chan,(unsigned long)size,3264U);
  #line 528 
  if (chanlist == (void *)0) 
                             #line 529 
                             return -12;
  #line 531 
  sband->channels = (struct ieee80211_channel *)chanlist;
  #line 532 
  sband->n_channels = n_chan;
  #line 533 
  sband->bitrates = rates;
  #line 534 
  sband->n_bitrates = n_rates;
  #line 536 
  ht_cap = & sband->ht_cap;
  #line 537 
  ht_cap->ht_supported = (_Bool)1;
  #line 538 
  ht_cap->cap = (unsigned short)370U;
  #line 544 
  ht_cap->mcs.rx_mask[0] = (unsigned char)255U;
  #line 545 
  ht_cap->mcs.rx_mask[4] = (unsigned char)1U;
  #line 546 
  ht_cap->mcs.tx_params = (unsigned char)1U;
  #line 547 
  ht_cap->ampdu_factor = (unsigned char)3U;
  #line 548 
  ht_cap->ampdu_density = (unsigned char)4U;
  #line 550 
  dev->chandef.chan = sband->channels;
  #line 552 
  return 0;
}

#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
static int mt76_init_sband_2g(struct mt7601u_dev *dev)
{
  #line 558 
  dev->sband_2g = (struct ieee80211_supported_band *)cif_devm_kzalloc_0(dev->dev,88UL,3264U);
  #line 560 
  if (dev->sband_2g == (struct ieee80211_supported_band *)0) 
                                                             #line 561 
                                                             return -12;
  #line 563 
  ((dev->hw)->wiphy)->bands[0] = dev->sband_2g;
  {
    #line 565 
    int __ret_warn_on = (unsigned int)(((int)(dev->ee)->reg.start + -1) + (int)(dev->ee)->reg.num) > 14U;
    #line 565 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 566 
      ldv_inline_asm();
      #line 567 
      ldv_inline_asm();
    }
    #line 565 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 568 
  return mt76_init_sband(dev,dev->sband_2g,
                        & mt76_channels_2ghz[(int)(dev->ee)->reg.start + -1],
                        (int)(dev->ee)->reg.num,
                        (struct ieee80211_rate *)(& mt76_rates),12);
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/init.c"
int mt7601u_register_device(struct mt7601u_dev *dev)
{
  #line 578 
  int ret;
  #line 576 
  struct ieee80211_hw *hw = dev->hw;
  #line 577 
  struct wiphy *wiphy = hw->wiphy;
  #line 583 
  dev->wcid_mask[0] |= 1UL;
  #line 586 
  dev->mon_wcid = (struct mt76_wcid *)cif_devm_kmalloc_0(dev->dev,6UL,3264U);
  #line 588 
  if (dev->mon_wcid == (struct mt76_wcid *)0) 
                                              #line 589 
                                              return -12;
  #line 590 
  (dev->mon_wcid)->idx = (unsigned char)255U;
  #line 591 
  (dev->mon_wcid)->hw_key_idx = (unsigned char)255U;
  #line 593 
  SET_IEEE80211_DEV(hw,dev->dev);
  #line 595 
  hw->queues = (unsigned short)4U;
  #line 596 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SIGNAL_DBM);
  #line 597 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_PS_NULLFUNC_STACK);
  #line 598 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_HT_CCK_RATES);
  #line 599 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_AMPDU_AGGREGATION);
  #line 600 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_SUPPORTS_RC_TABLE);
  #line 601 
  _ieee80211_hw_set(hw,(enum ieee80211_hw_flags)IEEE80211_HW_MFP_CAPABLE);
  #line 602 
  hw->max_rates = (unsigned char)1U;
  #line 603 
  hw->max_report_rates = (unsigned char)7U;
  #line 604 
  hw->max_rate_tries = (unsigned char)1U;
  #line 606 
  hw->sta_data_size = 38;
  #line 607 
  hw->vif_data_size = 8;
  #line 609 
  SET_IEEE80211_PERM_ADDR(hw,(u8 *)(& dev->macaddr));
  #line 611 
  wiphy->features |= 131072U;
  #line 612 
  wiphy->interface_modes = (unsigned short)4U;
  #line 614 
  wiphy_ext_feature_set(wiphy,(enum nl80211_ext_feature_index)NL80211_EXT_FEATURE_CQM_RSSI_LIST);
  #line 616 
  ret = mt76_init_sband_2g(dev);
  #line 617 
  if (ret != 0) 
                #line 618 
                return ret;
  {
    #line 620 
    struct lock_class_key __key;
    #line 620 
    __init_work(& dev->mac_work.work,0);
    #line 620 
    atomic_long_t __constr_expr_41 = {.counter = 137438953408LL};
    #line 620 
    dev->mac_work.work.data = __constr_expr_41;
    #line 620 
    lockdep_init_map(& dev->mac_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 620 
    INIT_LIST_HEAD_0(& dev->mac_work.work.entry);
    #line 620 
    dev->mac_work.work.func = & mt7601u_mac_work;
  }
  {
    #line 620 
    struct lock_class_key __key_0;
    #line 620 
    init_timer_key(& dev->mac_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&dev->mac_work)->timer",& __key_0);
  }
  {
    #line 621 
    struct lock_class_key __key_1;
    #line 621 
    __init_work(& dev->stat_work.work,0);
    #line 621 
    atomic_long_t __constr_expr_42 = {.counter = 137438953408LL};
    #line 621 
    dev->stat_work.work.data = __constr_expr_42;
    #line 621 
    lockdep_init_map(& dev->stat_work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 621 
    INIT_LIST_HEAD_0(& dev->stat_work.work.entry);
    #line 621 
    dev->stat_work.work.func = & mt7601u_tx_stat;
  }
  {
    #line 621 
    struct lock_class_key __key_2;
    #line 621 
    init_timer_key(& dev->stat_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&dev->stat_work)->timer",& __key_2);
  }
  #line 623 
  ret = ieee80211_register_hw(hw);
  #line 624 
  if (ret != 0) 
                #line 625 
                return ret;
  #line 627 
  mt7601u_init_debugfs(dev);
  #line 629 
  return 0;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
#line 95 
_Bool emg_flush_delayed_work(struct delayed_work *arg0);
#line 96 
#line 96 
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 125 
  ldv_set_bit(nr,addr);
  #line 126 
  return;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 132 
  ldv_clear_bit(nr,addr);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 139 
  ldv_init_list_head(list);
  #line 140 
  return;
}

#line 386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *cif_devm_kmalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 389 
  return ldv_devm_kmalloc(size,flags);
}

#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 464 
  return ldv_kmalloc(size,flags);
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_mutex_lock_hw_atomic_mutex_of_mt7601u_dev_0(struct mutex *lock)
{
  #line 804 
  ldv_mutex_model_lock(lock,(char *)"hw_atomic_mutex_of_mt7601u_dev");
  #line 805 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_mutex_unlock_hw_atomic_mutex_of_mt7601u_dev_0(struct mutex *lock)
{
  #line 811 
  ldv_mutex_model_unlock(lock,(char *)"hw_atomic_mutex_of_mt7601u_dev");
  #line 812 
  return;
}

#line 815  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static bool cif_flush_delayed_work(struct delayed_work *dwork)
{
  #line 819 
  return emg_flush_delayed_work(dwork);
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static struct ieee80211_hw *cif_ieee80211_alloc_hw(size_t priv_data_len, struct ieee80211_ops *ops)
{
  #line 827 
  return emg_ieee80211_alloc_hw(priv_data_len,ops);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void cif_ieee80211_free_hw_0(struct ieee80211_hw *hw)
{
  #line 835 
  emg_ieee80211_free_hw(hw);
  #line 836 
  return;
}

#line 839  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/init.i.aux"
static void *cif_devm_kzalloc_0(struct device *dev, size_t size, gfp_t flags)
{
  #line 842 
  return ldv_devm_kzalloc(size,flags);
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x)
{
  #line 285 
  int r;
  #line 286 
  ldv_inline_asm();
  #line 310 
  return r + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 26 
#line 883 
static void cif_mutex_lock_mutex_of_mt7601u_dev(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 890  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_mutex_of_mt7601u_dev(struct mutex *lock);
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
#line 176 
void __compiletime_assert_176(void);
#line 5199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
#line 5199 
void ieee80211_stop_queues(struct ieee80211_hw *);
#line 5207 
#line 5207 
void ieee80211_wake_queues(struct ieee80211_hw *);
#line 5438 
#line 5438 
void ieee80211_stop_tx_ba_cb_irqsafe(struct ieee80211_vif *, u8 *, u16);
#line 5853 
#line 5853 
void ieee80211_send_bar(struct ieee80211_vif *, u8 *, u16, u16);
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/mt7601u.h"
#line 368 
void mt7601u_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb);
#line 370 
#line 370 
int mt7601u_conf_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u16 queue, struct ieee80211_tx_queue_params *params);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_start(struct ieee80211_hw *hw)
{
  #line 14 
  int ret;
  #line 13 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 16 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 18 
  ret = mt7601u_mac_start(dev);
  #line 19 
  if (ret != 0) 
                #line 20 
                goto out;
  #line 22 
  ieee80211_queue_delayed_work(dev->hw,& dev->mac_work,1000UL);
  #line 24 
  ieee80211_queue_delayed_work(dev->hw,& dev->cal_work,1000UL);
  #line 26 
  out: 
       #line 26 
  ;
  #line 27 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 28 
  return ret;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt7601u_stop(struct ieee80211_hw *hw)
{
  #line 33 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 35 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 37 
  cancel_delayed_work_sync(& dev->cal_work);
  #line 38 
  cancel_delayed_work_sync(& dev->mac_work);
  #line 39 
  mt7601u_mac_stop(dev);
  #line 41 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 42 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_add_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 47 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 48 
  struct mt76_vif *mvif = (struct mt76_vif *)(& vif->drv_priv);
  #line 49 
  unsigned int idx = 0U;
  #line 50 
  unsigned int wcid = 126U - idx;
  #line 57 
  mvif->idx = (unsigned char)idx;
  #line 59 
  if (! ether_addr_equal((u8 *)(& dev->macaddr),(u8 *)(& vif->addr))) 
    #line 60 
    mt7601u_set_macaddr(dev,(u8 *)(& vif->addr));
  #line 62 
  if (((dev->wcid_mask[wcid / 64U] >> (wcid & 63U)) & 1UL) != 0UL) 
                                                                   #line 63 
                                                                   return -28;
  #line 64 
  dev->wcid_mask[wcid / 64U] |= 1UL << (wcid & 63U);
  #line 65 
  mvif->group_wcid.idx = (unsigned char)wcid;
  #line 66 
  mvif->group_wcid.hw_key_idx = (unsigned char)255U;
  #line 68 
  return 0;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt7601u_remove_interface(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 74 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 75 
  struct mt76_vif *mvif = (struct mt76_vif *)(& vif->drv_priv);
  #line 76 
  unsigned int wcid = (unsigned int)mvif->group_wcid.idx;
  #line 78 
  dev->wcid_mask[wcid / 64U] &= ~ (1UL << (wcid & 63U));
  #line 79 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_config(struct ieee80211_hw *hw, u32 changed)
{
  #line 83 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 84 
  int ret = 0;
  #line 86 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 88 
  if ((changed & 64U) != 0U) {
    #line 89 
    ieee80211_stop_queues(hw);
    #line 90 
    ret = mt7601u_phy_set_channel(dev,& hw->conf.chandef);
    #line 91 
    ieee80211_wake_queues(hw);
  }
  #line 94 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 96 
  return ret;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt76_configure_filter(struct ieee80211_hw *hw, unsigned int changed_flags, unsigned int *total_flags, u64 multicast)
{
  #line 103 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 104 
  u32 flags = 0U;
  #line 112 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 114 
  dev->rxfilter &= 4294967287U;
  {
    #line 116 
    unsigned int tmp;
    #line 116 
    flags = (*total_flags & 64U) | flags;
    #line 116 
    dev->rxfilter &= 4294967291U;
    #line 116 
    if ((flags & 64U) == 0U) 
                             #line 116 
                             tmp = 4U; else 
                                            #line 116 
                                            tmp = 0U;
    #line 116 
    dev->rxfilter |= tmp;
  }
  #line 117 
  flags = (*total_flags & 4U) | flags;
  #line 117 
  dev->rxfilter &= 4294967294U;
  #line 117 
  dev->rxfilter |= (unsigned int)((flags & 4U) == 0U);
  {
    #line 118 
    unsigned int tmp_0;
    #line 118 
    flags = (*total_flags & 8U) | flags;
    #line 118 
    dev->rxfilter &= 4294967293U;
    #line 118 
    if ((flags & 8U) == 0U) 
                            #line 118 
                            tmp_0 = 2U; else 
                                             #line 118 
                                             tmp_0 = 0U;
    #line 118 
    dev->rxfilter |= tmp_0;
  }
  {
    #line 119 
    unsigned int tmp_1;
    #line 119 
    flags = (*total_flags & 32U) | flags;
    #line 119 
    dev->rxfilter &= 4294881535U;
    #line 119 
    if ((flags & 32U) == 0U) 
                             #line 119 
                             tmp_1 = 85760U; else 
                                                  #line 119 
                                                  tmp_1 = 0U;
    #line 119 
    dev->rxfilter |= tmp_1;
  }
  {
    #line 125 
    unsigned int tmp_2;
    #line 125 
    flags = (*total_flags & 128U) | flags;
    #line 125 
    dev->rxfilter &= 4294959103U;
    #line 125 
    if ((flags & 128U) == 0U) 
                              #line 125 
                              tmp_2 = 8192U; else 
                                                  #line 125 
                                                  tmp_2 = 0U;
    #line 125 
    dev->rxfilter |= tmp_2;
  }
  #line 127 
  *total_flags = flags;
  #line 128 
  mt76_wr(dev,5120U,dev->rxfilter);
  #line 130 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 131 
  return;
}

#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt7601u_bss_info_changed(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_bss_conf *info, u32 changed)
{
  #line 137 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 139 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 141 
  if ((changed & 1U) != 0U) 
                            #line 142 
                            mt7601u_phy_con_cal_onoff(dev,info);
  #line 144 
  if ((changed & 128U) != 0U) {
    #line 145 
    mt7601u_addr_wr(dev,4112U,info->bssid);
    #line 151 
    if ((int)is_zero_ether_addr(info->bssid) != 0) 
                                                   #line 152 
                                                   mt7601u_mac_config_tsf(dev,(_Bool)0,0);
  }
  #line 155 
  if ((changed & 32U) != 0U) {
    #line 156 
    mt7601u_wr(dev,5128U,info->basic_rates);
    #line 157 
    mt7601u_wr(dev,4948U,1698898176U);
    #line 158 
    mt7601u_wr(dev,4952U,3989547392U);
    #line 159 
    mt7601u_wr(dev,4956U,3989547400U);
    #line 160 
    mt7601u_wr(dev,4960U,8448U);
  }
  #line 163 
  if ((changed & 64U) != 0U) 
                             #line 164 
                             mt7601u_mac_config_tsf(dev,(_Bool)1,(int)info->beacon_int);
  #line 166 
  if ((changed & 16U) != 0U || (changed & 2U) != 0U) 
                                                     #line 167 
                                                     mt7601u_mac_set_protection(dev,(_Bool)((bool)((int)info->use_cts_prot) != 0),(int)info->ht_operation_mode);
  #line 170 
  if ((changed & 4U) != 0U) 
                            #line 171 
                            mt7601u_mac_set_short_preamble(dev,(_Bool)((bool)((int)info->use_short_preamble) != 0));
  #line 173 
  if ((changed & 8U) != 0U) {
    #line 174 
    int tmp_0;
    #line 174 
    if ((int)info->use_short_slot != 0) 
                                        #line 174 
                                        tmp_0 = 9; else 
                                                        #line 174 
                                                        tmp_0 = 20;
    #line 174 
    int slottime = tmp_0;
    #line 176 
    if (0 != 0 && ((unsigned long)slottime & 18446744073709551360UL) != 0UL) 
      #line 176 
      __compiletime_assert_176();
    #line 176 
    ;
    #line 176 
    mt76_rmw(dev,4356U,255U,(unsigned int)((unsigned long)slottime & 255UL));
  }
  #line 180 
  if ((changed & 1U) != 0U) 
                            #line 181 
                            mt7601u_phy_recalibrate_after_assoc(dev);
  #line 183 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 184 
  return;
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt76_wcid_alloc(struct mt7601u_dev *dev)
{
  #line 189 
  int i;
  #line 189 
  int idx = 0;
  #line 191 
  i = 0;
  #line 191 
  while ((unsigned int)i <= 1U) {
    #line 192 
    idx = ffs(~ ((int)dev->wcid_mask[i]));
    #line 193 
    if (idx == 0) 
                  #line 194 
                  goto __Cont;
    #line 196 
    idx --;
    #line 197 
    dev->wcid_mask[i] |= 1UL << idx;
    #line 198 
    break;
    #line 191 
    __Cont: 
            #line 191 
    i ++;
  }
  #line 201 
  idx = i * 64 + idx;
  #line 202 
  if (idx > 119) 
                 #line 203 
                 return -1;
  #line 205 
  return idx;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_sta_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 212 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 213 
  struct mt76_sta *msta = (struct mt76_sta *)(& sta->drv_priv);
  #line 214 
  struct mt76_vif *mvif = (struct mt76_vif *)(& vif->drv_priv);
  #line 215 
  int ret = 0;
  #line 216 
  int idx = 0;
  #line 218 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 220 
  idx = mt76_wcid_alloc(dev);
  #line 221 
  if (idx < 0) {
    #line 222 
    ret = -28;
    #line 223 
    goto out;
  }
  #line 226 
  msta->wcid.idx = (unsigned char)idx;
  #line 227 
  msta->wcid.hw_key_idx = (unsigned char)255U;
  #line 228 
  mt7601u_mac_wcid_setup(dev,(unsigned char)((int)((unsigned char)idx)),(unsigned char)((int)mvif->idx),(u8 *)(& sta->addr));
  #line 229 
  mt76_clear(dev,(unsigned int)(((idx >> 5) + 1051) * 4),(unsigned int)(1UL << (idx & 31)));
  {
    #line 230 
    uintptr_t _r_a_p__v = (unsigned long)(& msta->wcid);
    #line 232 
    ldv_inline_asm();
    {
      #line 231 
      union __anonunion___u_13039 __u = {.__val = (struct mt76_wcid *)_r_a_p__v};
      #line 230 
      __write_once_size((void *)(& dev->wcid[idx]),(void *)(& __u.__c),8);
      #line 230 
      struct mt76_wcid *tmp_3 = __u.__val;
    }
  }
  #line 231 
  mt7601u_mac_set_ampdu_factor(dev);
  #line 233 
  out: 
       #line 233 
  ;
  #line 234 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 236 
  return ret;
}

#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_sta_remove(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 243 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 244 
  struct mt76_sta *msta = (struct mt76_sta *)(& sta->drv_priv);
  #line 245 
  int idx = (int)msta->wcid.idx;
  #line 247 
  cif_mutex_lock_mutex_of_mt7601u_dev(& dev->mutex);
  {
    #line 248 
    uintptr_t _r_a_p__v = 0UL;
    #line 248 
    if (_r_a_p__v == 0UL) {
      #line 249 
      union __anonunion___u_13041 __u = {.__val = (struct mt76_wcid *)_r_a_p__v};
      #line 248 
      __write_once_size((void *)(& dev->wcid[idx]),(void *)(& __u.__c),8);
      #line 248 
      struct mt76_wcid *tmp = __u.__val;
    }
    else {
      #line 250 
      ldv_inline_asm();
      {
        #line 249 
        union __anonunion___u_13043 __u_0 = {.__val = (struct mt76_wcid *)_r_a_p__v};
        #line 248 
        __write_once_size((void *)(& dev->wcid[idx]),(void *)(& __u_0.__c),8);
        #line 248 
        struct mt76_wcid *tmp_3 = __u_0.__val;
      }
    }
  }
  #line 249 
  mt76_set(dev,(unsigned int)(((idx >> 5) + 1051) * 4),(unsigned int)(1UL << (idx & 31)));
  #line 250 
  dev->wcid_mask[idx / 64] &= ~ (1UL << (idx & 63));
  #line 251 
  mt7601u_mac_wcid_setup(dev,(unsigned char)((int)((unsigned char)idx)),(unsigned char)0,(u8 *)0U);
  #line 252 
  mt7601u_mac_set_ampdu_factor(dev);
  #line 253 
  cif_mutex_unlock_mutex_of_mt7601u_dev(& dev->mutex);
  #line 255 
  return 0;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt7601u_sta_notify(struct ieee80211_hw *hw, struct ieee80211_vif *vif, enum sta_notify_cmd cmd, struct ieee80211_sta *sta)
{
  #line 261 
  return;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt7601u_sw_scan(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u8 *mac_addr)
{
  #line 269 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 271 
  mt7601u_agc_save(dev);
  #line 272 
  cif_set_bit_3(4L,& dev->state);
  #line 273 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt7601u_sw_scan_complete(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
{
  #line 279 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 281 
  mt7601u_agc_restore(dev);
  #line 282 
  cif_clear_bit_0(4L,& dev->state);
  #line 284 
  ieee80211_queue_delayed_work(dev->hw,& dev->cal_work,1000UL);
  #line 286 
  if ((int)dev->freq_cal.enabled != 0) 
                                       #line 287 
                                       ieee80211_queue_delayed_work(dev->hw,& dev->freq_cal.work,7500UL);
  #line 288 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_set_key(struct ieee80211_hw *hw, enum set_key_cmd cmd, struct ieee80211_vif *vif, struct ieee80211_sta *sta, struct ieee80211_key_conf *key)
{
  #line 298 
  struct mt76_sta *tmp;
  #line 299 
  struct mt76_wcid *tmp_0;
  #line 301 
  int ret;
  #line 296 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 297 
  struct mt76_vif *mvif = (struct mt76_vif *)(& vif->drv_priv);
  #line 298 
  if (sta != (struct ieee80211_sta *)0) 
                                        #line 298 
                                        tmp = (struct mt76_sta *)(& sta->drv_priv); else 
                                                                    #line 298 
                                                                    tmp = (struct mt76_sta *)0;
  #line 298 
  struct mt76_sta *msta = tmp;
  #line 299 
  if (msta != (struct mt76_sta *)0) 
                                    #line 299 
                                    tmp_0 = & msta->wcid; else 
                                                               #line 299 
                                                               tmp_0 = & mvif->group_wcid;
  #line 299 
  struct mt76_wcid *wcid = tmp_0;
  #line 300 
  int idx = (int)key->keyidx;
  #line 304 
  switch (key->cipher) {
    #line 305 
    case (u32)1027073: 
                       #line 305 
    ;
    #line 306 
    case (u32)1027077: 
                       #line 306 
    ;
    #line 307 
    case (u32)1027074: 
                       #line 307 
    ;
    #line 308 
    case (u32)1027076: 
                       #line 308 
    ;
    #line 309 
    break;
    #line 310 
    default: 
             #line 310 
    ;
    #line 311 
    return -95;
  }
  #line 314 
  if (cmd == (unsigned int)SET_KEY) {
    #line 315 
    key->hw_key_idx = wcid->idx;
    #line 316 
    wcid->hw_key_idx = (unsigned char)idx;
  }
  else {
    #line 318 
    if ((int)wcid->hw_key_idx == idx) 
                                      #line 319 
                                      wcid->hw_key_idx = (unsigned char)255U;
    #line 321 
    key = (struct ieee80211_key_conf *)0;
  }
  #line 324 
  if (msta == (struct mt76_sta *)0) {
    #line 325 
    if (key != (struct ieee80211_key_conf *)0 || (int)wcid->hw_key_idx == idx) {
      #line 326 
      ret = mt76_mac_wcid_set_key(dev,(unsigned char)((int)wcid->idx),key);
      #line 327 
      if (ret != 0) 
                    #line 328 
                    return ret;
    }
    #line 331 
    return mt76_mac_shared_key_setup(dev,(unsigned char)((int)mvif->idx),
                                  (unsigned char)((int)((unsigned char)idx)),
                                  key);
  }
  #line 334 
  return mt76_mac_wcid_set_key(dev,(unsigned char)((int)msta->wcid.idx),key);
}

#line 341 
#line 341 
void __compiletime_assert_341(void);
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt7601u_set_rts_threshold(struct ieee80211_hw *hw, u32 value)
{
  #line 339 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 341 
  if (0 != 0 && ((unsigned long)value & 18446744073709486080UL) != 0UL) 
    #line 341 
    __compiletime_assert_341();
  #line 341 
  ;
  #line 341 
  mt76_rmw(dev,4932U,16776960U,(unsigned int)(((unsigned long)value << 8) & 16776960UL));
  #line 343 
  return 0;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static int mt76_ampdu_action(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_ampdu_params *params)
{
  #line 350 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 351 
  struct ieee80211_sta *sta = params->sta;
  #line 352 
  enum ieee80211_ampdu_mlme_action action = params->action;
  #line 353 
  u16 tid = params->tid;
  #line 354 
  u16 ssn = params->ssn;
  #line 355 
  struct mt76_sta *msta = (struct mt76_sta *)(& sta->drv_priv);
  {
    #line 357 
    int __ret_warn_on = (unsigned int)msta->wcid.idx > 126U;
    #line 357 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 358 
      ldv_inline_asm();
      #line 359 
      ldv_inline_asm();
    }
    #line 357 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 359 
  switch ((unsigned int)action) {
    #line 360 
    case (unsigned int)0: 
                          #line 360 
    ;
    #line 361 
    mt76_set(dev,(unsigned int)(((int)msta->wcid.idx + 768) * 8 + 4),(unsigned int)(1UL << ((int)tid + 16)));
    #line 362 
    break;
    #line 363 
    case (unsigned int)1: 
                          #line 363 
    ;
    #line 364 
    mt76_clear(dev,(unsigned int)(((int)msta->wcid.idx + 768) * 8 + 4),(unsigned int)(1UL << ((int)tid + 16)));
    #line 366 
    break;
    #line 367 
    case (unsigned int)6: 
                          #line 367 
    ;
    #line 368 
    ieee80211_send_bar(vif,(u8 *)(& sta->addr),(unsigned short)((int)tid),(unsigned short)((int)msta->agg_ssn[(int)tid]));
    #line 369 
    break;
    #line 370 
    case (unsigned int)4: 
                          #line 370 
    ;
    #line 371 
    case (unsigned int)5: 
                          #line 371 
    ;
    #line 372 
    break;
    #line 373 
    case (unsigned int)2: 
                          #line 373 
    ;
    #line 374 
    msta->agg_ssn[(int)tid] = (unsigned short)((int)ssn << 4U);
    #line 375 
    return 1;
    #line 376 
    case (unsigned int)3: 
                          #line 376 
    ;
    #line 377 
    ieee80211_stop_tx_ba_cb_irqsafe(vif,(u8 *)(& sta->addr),(unsigned short)((int)tid));
    #line 378 
    break;
  }
  #line 381 
  return 0;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
static void mt76_sta_rate_tbl_update(struct ieee80211_hw *hw, struct ieee80211_vif *vif, struct ieee80211_sta *sta)
{
  #line 394 
  struct ieee80211_sta_rates *________p1;
  #line 390 
  struct ieee80211_sta_rates *rates;
  #line 388 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 389 
  struct mt76_sta *msta = (struct mt76_sta *)(& sta->drv_priv);
  #line 391 
  struct ieee80211_tx_rate rate = {.idx = (signed char)0, .count = (unsigned short)0, .flags = (unsigned short)0};
  #line 393 
  rcu_read_lock();
  {
    #line 395 
    union __anonunion___u_13045 __u;
    #line 394 
    __read_once_size((void *)(& sta->rates),(void *)(& __u.__c),8);
    #line 394 
    ________p1 = (__u.__val);
    {
      #line 394 
      bool __warned;
      #line 394 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 394 
        if (! __warned) {
          #line 394 
          if (rcu_read_lock_held() == 0) {
            #line 394 
            __warned = (_Bool)1;
            #line 394 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c",394,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 394 
  rates = ________p1;
  #line 396 
  if (rates == (struct ieee80211_sta_rates *)0) 
                                                #line 397 
                                                goto out;
  #line 399 
  rate.idx = rates->rate[0].idx;
  #line 400 
  rate.flags = (unsigned short)rates->rate[0].flags;
  #line 401 
  mt76_mac_wcid_set_rate(dev,& msta->wcid,& rate);
  #line 403 
  out: 
       #line 403 
  ;
  #line 404 
  rcu_read_unlock();
  #line 405 
  return;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/main.c"
struct ieee80211_ops mt7601u_ops = {.tx = & mt7601u_tx, .start = & mt7601u_start, .stop = & mt7601u_stop, .add_interface = & mt7601u_add_interface, .remove_interface = & mt7601u_remove_interface, .config = & mt7601u_config, .bss_info_changed = & mt7601u_bss_info_changed, .configure_filter = & mt76_configure_filter, .set_key = & mt7601u_set_key, .sw_scan_start = & mt7601u_sw_scan, .sw_scan_complete = & mt7601u_sw_scan_complete, .set_rts_threshold = & mt7601u_set_rts_threshold, .sta_add = & mt7601u_sta_add, .sta_remove = & mt7601u_sta_remove, .sta_notify = & mt7601u_sta_notify, .sta_rate_tbl_update = & mt76_sta_rate_tbl_update, .conf_tx = & mt7601u_conf_tx, .ampdu_action = & mt76_ampdu_action};
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_add_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 110 
  return mt7601u_add_interface(arg0,arg1);
}

#line 114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt7601u_bss_info_changed(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_bss_conf *arg2, unsigned int arg3)
{
  #line 115 
  mt7601u_bss_info_changed(arg0,arg1,arg2,arg3);
  #line 116 
  return;
}

#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_config(struct ieee80211_hw *arg0, unsigned int arg1)
{
  #line 120 
  return mt7601u_config(arg0,arg1);
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt7601u_remove_interface(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 125 
  mt7601u_remove_interface(arg0,arg1);
  #line 126 
  return;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_set_key(struct ieee80211_hw *arg0, enum set_key_cmd arg1, struct ieee80211_vif *arg2, struct ieee80211_sta *arg3, struct ieee80211_key_conf *arg4)
{
  #line 130 
  return mt7601u_set_key(arg0,arg1,arg2,arg3,arg4);
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_set_rts_threshold(struct ieee80211_hw *arg0, unsigned int arg1)
{
  #line 135 
  return mt7601u_set_rts_threshold(arg0,arg1);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_sta_add(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_sta *arg2)
{
  #line 140 
  return mt7601u_sta_add(arg0,arg1,arg2);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt7601u_sta_notify(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, enum sta_notify_cmd arg2, struct ieee80211_sta *arg3)
{
  #line 145 
  mt7601u_sta_notify(arg0,arg1,arg2,arg3);
  #line 146 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_sta_remove(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_sta *arg2)
{
  #line 150 
  return mt7601u_sta_remove(arg0,arg1,arg2);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt7601u_start(struct ieee80211_hw *arg0)
{
  #line 155 
  return mt7601u_start(arg0);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt7601u_stop(struct ieee80211_hw *arg0)
{
  #line 160 
  mt7601u_stop(arg0);
  #line 161 
  return;
}

#line 164  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt7601u_sw_scan(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, unsigned char *arg2)
{
  #line 165 
  mt7601u_sw_scan(arg0,arg1,arg2);
  #line 166 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt7601u_sw_scan_complete(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1)
{
  #line 170 
  mt7601u_sw_scan_complete(arg0,arg1);
  #line 171 
  return;
}

#line 174  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
int emg_wrapper_mt76_ampdu_action(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_ampdu_params *arg2)
{
  #line 175 
  return mt76_ampdu_action(arg0,arg1,arg2);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt76_configure_filter(struct ieee80211_hw *arg0, unsigned int arg1, unsigned int *arg2, unsigned long long arg3)
{
  #line 180 
  mt76_configure_filter(arg0,arg1,arg2,arg3);
  #line 181 
  return;
}

#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
void emg_wrapper_mt76_sta_rate_tbl_update(struct ieee80211_hw *arg0, struct ieee80211_vif *arg1, struct ieee80211_sta *arg2)
{
  #line 185 
  mt76_sta_rate_tbl_update(arg0,arg1,arg2);
  #line 186 
  return;
}

#line 204  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_set_bit_3(long nr, unsigned long *addr)
{
  #line 207 
  ldv_set_bit(nr,addr);
  #line 208 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 214 
  ldv_clear_bit(nr,addr);
  #line 215 
  return;
}

#line 883  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_lock_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 886 
  ldv_mutex_model_lock(lock,(char *)"mutex_of_mt7601u_dev");
  #line 887 
  return;
}

#line 890  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/main.i.aux"
static void cif_mutex_unlock_mutex_of_mt7601u_dev(struct mutex *lock)
{
  #line 893 
  ldv_mutex_model_unlock(lock,(char *)"mutex_of_mt7601u_dev");
  #line 894 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_2(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_13112 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_2(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_2(v);
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_lock_bh_mac_lock_of_mt7601u_dev_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_bh_mac_lock_of_mt7601u_dev_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_mt7601u_dev_0(spinlock_t *lock, unsigned long flags);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 819 
static void cif___ldv_spin_lock_lock_of_mt7601u_dev_0(spinlock_t *lock);
#line 35 
#line 837 
static void cif___ldv_spin_lock_tx_lock_of_mt7601u_dev_0(spinlock_t *lock);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
#line 282 
void __compiletime_assert_282(void);
#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cloned_0(struct sk_buff *skb)
{
  #line 1600 
  int tmp_1;
  #line 1600 
  if ((unsigned int)skb->cloned != 0U) {
    #line 1600 
    if ((atomic_read_2(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref) & 65535) != 1) 
      #line 1600 
      tmp_1 = 1; else 
                      #line 1600 
                      tmp_1 = 0;
  }
  else 
       #line 1600 
       tmp_1 = 0;
  #line 1600 
  return tmp_1;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 3137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_0(struct sk_buff *skb, unsigned int headroom)
{
  #line 3139 
  ;
  #line 3139 
  ;
  #line 3139 
  return __skb_cow(skb,headroom,skb_cloned_0(skb));
}

#line 4272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
  #line 4274 
  skb->queue_mapping = queue_mapping;
  #line 4275 
  return;
}

#line 1114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static struct ieee80211_tx_info *IEEE80211_SKB_CB(struct sk_buff *skb)
{
  #line 1116 
  return (struct ieee80211_tx_info *)(& skb->cb);
}

#line 1139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/mac80211.h"
__inline static void ieee80211_tx_info_clear_status(struct ieee80211_tx_info *info)
{
  #line 1141 
  int i;
  #line 1149 
  i = 0;
  #line 1149 
  while (i <= 3) {
    #line 1150 
    info->__anonCompField_ieee80211_tx_info_195.status.rates[i].count = (unsigned short)0U;
    #line 1149 
    i ++;
  }
  #line 1154 
  memset((void *)(& info->__anonCompField_ieee80211_tx_info_195.status.ampdu_ack_len),0,24UL);
  #line 1155 
  return;
}

#line 4527 
#line 4527 
void ieee80211_get_tx_rates(struct ieee80211_vif *, struct ieee80211_sta *, struct sk_buff *, struct ieee80211_tx_rate *, int);
#line 4580 
#line 4580 
void ieee80211_tx_status(struct ieee80211_hw *, struct sk_buff *);
#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_tx(struct mt7601u_dev *dev, struct sk_buff *skb, struct mt76_sta *sta, struct mt76_txwi *h)
{
  #line 277 
  int pscr_ret___0;
  #line 277 
  if ((int)static_key_false(& __tracepoint_mt_tx.key) != 0) {
    #line 277 
    int pscr_ret__;
    #line 277 
    struct tracepoint_func *________p1;
    #line 277 
    struct tracepoint_func *it_func_ptr;
    #line 277 
    void *it_func;
    #line 277 
    void *__data;
    #line 277 
    int __idx = 0;
    {
      #line 277 
      void *__vpp_verify = (void *)0;
      #line 277 
      void *tmp = __vpp_verify;
    }
    #line 277 
    switch (4UL) {
      #line 277 
      int pfo_ret___0;
      #line 277 
      int pfo_ret___1;
      #line 277 
      int pfo_ret___2;
      #line 277 
      int pfo_ret__;
      #line 277 
      case (unsigned long)1: 
                             #line 277 
      ;
      #line 277 
      switch (4UL) {
        #line 277 
        case (unsigned long)1: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)2: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)4: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)8: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        default: 
                 #line 277 
        ;
        #line 277 
        __bad_percpu_size();
      }
      #line 277 
      pscr_ret__ = pfo_ret__;
      #line 277 
      break;
      #line 277 
      case (unsigned long)2: 
                             #line 277 
      ;
      #line 277 
      switch (4UL) {
        #line 277 
        case (unsigned long)1: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)2: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)4: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)8: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        default: 
                 #line 277 
        ;
        #line 277 
        __bad_percpu_size();
      }
      #line 277 
      pscr_ret__ = pfo_ret___0;
      #line 277 
      break;
      #line 277 
      case (unsigned long)4: 
                             #line 277 
      ;
      #line 277 
      switch (4UL) {
        #line 277 
        case (unsigned long)1: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)2: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)4: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)8: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        default: 
                 #line 277 
        ;
        #line 277 
        __bad_percpu_size();
      }
      #line 277 
      pscr_ret__ = pfo_ret___1;
      #line 277 
      break;
      #line 277 
      case (unsigned long)8: 
                             #line 277 
      ;
      #line 277 
      switch (4UL) {
        #line 277 
        case (unsigned long)1: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)2: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)4: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        case (unsigned long)8: 
                               #line 277 
        ;
        #line 278 
        ldv_inline_asm();
        #line 277 
        break;
        #line 277 
        default: 
                 #line 277 
        ;
        #line 277 
        __bad_percpu_size();
      }
      #line 277 
      pscr_ret__ = pfo_ret___2;
      #line 277 
      break;
      #line 277 
      default: 
               #line 277 
      ;
      #line 277 
      __bad_size_call_parameter();
      #line 277 
      break;
    }
    #line 277 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 277 
                                                               return;
    {
      #line 277 
      int __ret_warn_on = 0;
      #line 277 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 278 
        ldv_inline_asm();
        #line 279 
        ldv_inline_asm();
      }
      #line 277 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 277 
    __preempt_count_add(1);
    #line 278 
    ldv_inline_asm();
    {
      #line 278 
      union __anonunion___u_14136 __u;
      #line 277 
      __read_once_size((void *)(& __tracepoint_mt_tx.funcs),(void *)(& __u.__c),8);
      #line 277 
      ________p1 = (__u.__val);
      }
    #line 277 
    it_func_ptr = ________p1;
    #line 277 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 277 
      while (1) {
        #line 277 
        it_func = it_func_ptr->func;
        #line 277 
        __data = it_func_ptr->data;
        #line 277 
        (*((void (*)(void *, struct mt7601u_dev *, struct sk_buff *, struct mt76_sta *, struct mt76_txwi *))it_func))(__data,dev,skb,sta,h);
        #line 277 
        it_func_ptr ++;
        #line 278 
        ;
        #line 278 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 277 
                                                break;
      }
    #line 279 
    ldv_inline_asm();
    #line 277 
    __preempt_count_sub(1);
  }
  {
    #line 277 
    void *__vpp_verify_0 = (void *)0;
    #line 277 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 277 
  switch (4UL) {
    #line 277 
    int pfo_ret___5;
    #line 277 
    int pfo_ret___6;
    #line 277 
    int pfo_ret___3;
    #line 277 
    int pfo_ret___4;
    #line 277 
    case (unsigned long)1: 
                           #line 277 
    ;
    #line 277 
    switch (4UL) {
      #line 277 
      case (unsigned long)1: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)2: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)4: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)8: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      default: 
               #line 277 
      ;
      #line 277 
      __bad_percpu_size();
    }
    #line 277 
    pscr_ret___0 = pfo_ret___3;
    #line 277 
    break;
    #line 277 
    case (unsigned long)2: 
                           #line 277 
    ;
    #line 277 
    switch (4UL) {
      #line 277 
      case (unsigned long)1: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)2: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)4: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)8: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      default: 
               #line 277 
      ;
      #line 277 
      __bad_percpu_size();
    }
    #line 277 
    pscr_ret___0 = pfo_ret___4;
    #line 277 
    break;
    #line 277 
    case (unsigned long)4: 
                           #line 277 
    ;
    #line 277 
    switch (4UL) {
      #line 277 
      case (unsigned long)1: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)2: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)4: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)8: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      default: 
               #line 277 
      ;
      #line 277 
      __bad_percpu_size();
    }
    #line 277 
    pscr_ret___0 = pfo_ret___5;
    #line 277 
    break;
    #line 277 
    case (unsigned long)8: 
                           #line 277 
    ;
    #line 277 
    switch (4UL) {
      #line 277 
      case (unsigned long)1: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)2: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)4: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      case (unsigned long)8: 
                             #line 277 
      ;
      #line 278 
      ldv_inline_asm();
      #line 277 
      break;
      #line 277 
      default: 
               #line 277 
      ;
      #line 277 
      __bad_percpu_size();
    }
    #line 277 
    pscr_ret___0 = pfo_ret___6;
    #line 277 
    break;
    #line 277 
    default: 
             #line 277 
    ;
    #line 277 
    __bad_size_call_parameter();
    #line 277 
    break;
  }
  #line 277 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 277 
    rcu_read_lock_sched_notrace();
    {
      #line 278 
      union __anonunion___u_14138 __u_0;
      #line 277 
      __read_once_size((void *)(& __tracepoint_mt_tx.funcs),(void *)(& __u_0.__c),8);
      #line 277 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 277 
        bool __warned;
        #line 277 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 277 
          if (! __warned) {
            #line 277 
            if (rcu_read_lock_sched_held() == 0) {
              #line 277 
              __warned = (_Bool)1;
              #line 277 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",277,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 277 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 277 
    rcu_read_unlock_sched_notrace();
  }
  #line 279 
  return;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h"
__inline static void trace_mt_tx_status_cleaned(struct mt7601u_dev *dev, int cleaned)
{
  #line 316 
  int pscr_ret___0;
  #line 316 
  if ((int)static_key_false(& __tracepoint_mt_tx_status_cleaned.key) != 0) {
    #line 316 
    int pscr_ret__;
    #line 316 
    struct tracepoint_func *________p1;
    #line 316 
    struct tracepoint_func *it_func_ptr;
    #line 316 
    void *it_func;
    #line 316 
    void *__data;
    #line 316 
    int __idx = 0;
    {
      #line 316 
      void *__vpp_verify = (void *)0;
      #line 316 
      void *tmp = __vpp_verify;
    }
    #line 316 
    switch (4UL) {
      #line 316 
      int pfo_ret___1;
      #line 316 
      int pfo_ret___2;
      #line 316 
      int pfo_ret__;
      #line 316 
      int pfo_ret___0;
      #line 316 
      case (unsigned long)1: 
                             #line 316 
      ;
      #line 316 
      switch (4UL) {
        #line 316 
        case (unsigned long)1: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)2: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)4: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)8: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        default: 
                 #line 316 
        ;
        #line 316 
        __bad_percpu_size();
      }
      #line 316 
      pscr_ret__ = pfo_ret__;
      #line 316 
      break;
      #line 316 
      case (unsigned long)2: 
                             #line 316 
      ;
      #line 316 
      switch (4UL) {
        #line 316 
        case (unsigned long)1: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)2: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)4: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)8: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        default: 
                 #line 316 
        ;
        #line 316 
        __bad_percpu_size();
      }
      #line 316 
      pscr_ret__ = pfo_ret___0;
      #line 316 
      break;
      #line 316 
      case (unsigned long)4: 
                             #line 316 
      ;
      #line 316 
      switch (4UL) {
        #line 316 
        case (unsigned long)1: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)2: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)4: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)8: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        default: 
                 #line 316 
        ;
        #line 316 
        __bad_percpu_size();
      }
      #line 316 
      pscr_ret__ = pfo_ret___1;
      #line 316 
      break;
      #line 316 
      case (unsigned long)8: 
                             #line 316 
      ;
      #line 316 
      switch (4UL) {
        #line 316 
        case (unsigned long)1: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)2: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)4: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        case (unsigned long)8: 
                               #line 316 
        ;
        #line 317 
        ldv_inline_asm();
        #line 316 
        break;
        #line 316 
        default: 
                 #line 316 
        ;
        #line 316 
        __bad_percpu_size();
      }
      #line 316 
      pscr_ret__ = pfo_ret___2;
      #line 316 
      break;
      #line 316 
      default: 
               #line 316 
      ;
      #line 316 
      __bad_size_call_parameter();
      #line 316 
      break;
    }
    #line 316 
    if (cpumask_test_cpu(pscr_ret__,& __cpu_online_mask) == 0) 
                                                               #line 316 
                                                               return;
    {
      #line 316 
      int __ret_warn_on = 0;
      #line 316 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 317 
        ldv_inline_asm();
        #line 318 
        ldv_inline_asm();
      }
      #line 316 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    #line 316 
    __preempt_count_add(1);
    #line 317 
    ldv_inline_asm();
    {
      #line 317 
      union __anonunion___u_14144 __u;
      #line 316 
      __read_once_size((void *)(& __tracepoint_mt_tx_status_cleaned.funcs),(void *)(& __u.__c),8);
      #line 316 
      ________p1 = (__u.__val);
      }
    #line 316 
    it_func_ptr = ________p1;
    #line 316 
    if (it_func_ptr != (struct tracepoint_func *)0) 
      #line 316 
      while (1) {
        #line 316 
        it_func = it_func_ptr->func;
        #line 316 
        __data = it_func_ptr->data;
        #line 316 
        (*((void (*)(void *, struct mt7601u_dev *, int ))it_func))(__data,dev,cleaned);
        #line 316 
        it_func_ptr ++;
        #line 317 
        ;
        #line 317 
        if (! (it_func_ptr->func != (void *)0)) 
                                                #line 316 
                                                break;
      }
    #line 318 
    ldv_inline_asm();
    #line 316 
    __preempt_count_sub(1);
  }
  {
    #line 316 
    void *__vpp_verify_0 = (void *)0;
    #line 316 
    void *tmp_13 = __vpp_verify_0;
  }
  #line 316 
  switch (4UL) {
    #line 316 
    int pfo_ret___3;
    #line 316 
    int pfo_ret___4;
    #line 316 
    int pfo_ret___5;
    #line 316 
    int pfo_ret___6;
    #line 316 
    case (unsigned long)1: 
                           #line 316 
    ;
    #line 316 
    switch (4UL) {
      #line 316 
      case (unsigned long)1: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)2: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)4: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)8: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      default: 
               #line 316 
      ;
      #line 316 
      __bad_percpu_size();
    }
    #line 316 
    pscr_ret___0 = pfo_ret___3;
    #line 316 
    break;
    #line 316 
    case (unsigned long)2: 
                           #line 316 
    ;
    #line 316 
    switch (4UL) {
      #line 316 
      case (unsigned long)1: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)2: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)4: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)8: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      default: 
               #line 316 
      ;
      #line 316 
      __bad_percpu_size();
    }
    #line 316 
    pscr_ret___0 = pfo_ret___4;
    #line 316 
    break;
    #line 316 
    case (unsigned long)4: 
                           #line 316 
    ;
    #line 316 
    switch (4UL) {
      #line 316 
      case (unsigned long)1: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)2: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)4: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)8: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      default: 
               #line 316 
      ;
      #line 316 
      __bad_percpu_size();
    }
    #line 316 
    pscr_ret___0 = pfo_ret___5;
    #line 316 
    break;
    #line 316 
    case (unsigned long)8: 
                           #line 316 
    ;
    #line 316 
    switch (4UL) {
      #line 316 
      case (unsigned long)1: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)2: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)4: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      case (unsigned long)8: 
                             #line 316 
      ;
      #line 317 
      ldv_inline_asm();
      #line 316 
      break;
      #line 316 
      default: 
               #line 316 
      ;
      #line 316 
      __bad_percpu_size();
    }
    #line 316 
    pscr_ret___0 = pfo_ret___6;
    #line 316 
    break;
    #line 316 
    default: 
             #line 316 
    ;
    #line 316 
    __bad_size_call_parameter();
    #line 316 
    break;
  }
  #line 316 
  if (cpumask_test_cpu(pscr_ret___0,& __cpu_online_mask) != 0) {
    #line 316 
    rcu_read_lock_sched_notrace();
    {
      #line 317 
      union __anonunion___u_14146 __u_0;
      #line 316 
      __read_once_size((void *)(& __tracepoint_mt_tx_status_cleaned.funcs),(void *)(& __u_0.__c),8);
      #line 316 
      struct tracepoint_func *________p1_0 = (__u_0.__val);
      {
        #line 316 
        bool __warned;
        #line 316 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 316 
          if (! __warned) {
            #line 316 
            if (rcu_read_lock_sched_held() == 0) {
              #line 316 
              __warned = (_Bool)1;
              #line 316 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/trace.h",316,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      #line 316 
      struct tracepoint_func *tmp_11 = ________p1_0;
    }
    #line 316 
    rcu_read_unlock_sched_notrace();
  }
  #line 318 
  return;
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static u8 q2hwq(u8 q)
{
  #line 23 
  return (unsigned char)((unsigned int)q ^ 3U);
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static u8 skb2q(struct sk_buff *skb)
{
  #line 31 
  int __ret_warn_on;
  #line 29 
  int qid = (int)skb_get_queue_mapping(skb);
  #line 31 
  __ret_warn_on = qid > 3;
  #line 31 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 32 
    ldv_inline_asm();
    #line 33 
    ldv_inline_asm();
  }
  #line 31 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 32 
    qid = 2;
    #line 33 
    skb_set_queue_mapping(skb,(unsigned short)((int)((unsigned short)qid)));
  }
  #line 36 
  return q2hwq((unsigned char)((int)((unsigned char)qid)));
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static u8 mt7601u_tx_pktid_enc(struct mt7601u_dev *dev, u8 rate, bool is_probe)
{
  #line 57 
  u8 encoded = (unsigned char)(((unsigned int)((unsigned char)is_probe) * 8U + (unsigned int)rate) + 1U);
  #line 64 
  if ((int)is_probe != 0 && (unsigned int)rate == 7U) 
                                                      #line 65 
                                                      return (unsigned char)((unsigned int)encoded + 249U);
  #line 67 
  return encoded;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static void mt7601u_tx_pktid_dec(struct mt7601u_dev *dev, struct mt76_tx_status *stat)
{
  #line 73 
  u8 req_rate = stat->pktid;
  #line 74 
  u8 eff_rate = (unsigned char)((unsigned int)((unsigned char)stat->rate) & 7U);
  #line 76 
  req_rate = (unsigned char)((unsigned int)req_rate + 255U);
  #line 78 
  if ((unsigned int)req_rate > 7U) {
    #line 79 
    stat->is_probe = (unsigned char)1U;
    #line 80 
    req_rate = (unsigned char)((unsigned int)req_rate + 248U);
    #line 83 
    if ((unsigned int)req_rate == 0U && (unsigned int)eff_rate != 0U) 
      #line 84 
      req_rate = (unsigned char)7U;
  }
  #line 87 
  stat->retry = (unsigned char)((int)req_rate - (int)eff_rate);
  #line 88 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static void mt7601u_tx_skb_remove_dma_overhead(struct sk_buff *skb, struct ieee80211_tx_info *info)
{
  #line 93 
  int pkt_len = (int)((long)info->__anonCompField_ieee80211_tx_info_195.status.status_driver_data[0]);
  #line 95 
  skb_pull(skb,24U);
  #line 96 
  if ((ieee80211_get_hdrlen_from_skb(skb) & 3U) != 0U) 
                                                       #line 97 
                                                       mt76_remove_hdr_pad(skb);
  #line 99 
  skb_trim(skb,(unsigned int)pkt_len);
  #line 100 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
void mt7601u_tx_status(struct mt7601u_dev *dev, struct sk_buff *skb)
{
  #line 104 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 106 
  mt7601u_tx_skb_remove_dma_overhead(skb,info);
  #line 108 
  ieee80211_tx_info_clear_status(info);
  #line 109 
  info->__anonCompField_ieee80211_tx_info_195.status.rates[0].idx = (signed char)(-1);
  #line 110 
  info->flags |= 512U;
  #line 112 
  cif_spin_lock_bh_mac_lock_of_mt7601u_dev_0(& dev->mac_lock);
  #line 113 
  ieee80211_tx_status(dev->hw,skb);
  #line 114 
  cif_spin_unlock_bh_mac_lock_of_mt7601u_dev_0(& dev->mac_lock);
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static int mt7601u_skb_rooms(struct mt7601u_dev *dev, struct sk_buff *skb)
{
  #line 120 
  u32 need_head;
  #line 119 
  int hdr_len = (int)ieee80211_get_hdrlen_from_skb(skb);
  #line 122 
  need_head = 24U;
  #line 123 
  if (((unsigned int)hdr_len & 3U) != 0U) 
                                          #line 124 
                                          need_head += 2U;
  #line 126 
  return skb_cow_0(skb,need_head);
}

#line 170 
#line 170 
void __compiletime_assert_170(void);
#line 173 
#line 173 
void __compiletime_assert_173(void);
#line 184 
#line 184 
void __compiletime_assert_184(void);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
static struct mt76_txwi *mt7601u_push_txwi(struct mt7601u_dev *dev, struct sk_buff *skb, struct ieee80211_sta *sta, struct mt76_wcid *wcid, int pkt_len)
{
  #line 136 
  struct mt76_txwi *txwi;
  #line 137 
  unsigned long flags;
  #line 138 
  bool is_probe;
  #line 139 
  u32 pkt_id;
  #line 140 
  u16 rate_ctl;
  #line 141 
  u8 nss;
  #line 134 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 135 
  struct ieee80211_tx_rate *rate = & info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_7460_193.__anonCompField___anonunion_7461_192.rates[0];
  #line 143 
  txwi = (struct mt76_txwi *)skb_push(skb,20U);
  #line 144 
  memset((void *)txwi,0,20UL);
  #line 146 
  if (! wcid->tx_rate_set) 
                           #line 147 
                           ieee80211_get_tx_rates(info->__anonCompField_ieee80211_tx_info_195.control.vif,sta,skb,(struct ieee80211_tx_rate *)(& info->__anonCompField_ieee80211_tx_info_195.control.__anonCompField___anonstruct_control_7460_193.__anonCompField___anonunion_7461_192.rates),1);
  #line 150 
  cif___ldv_spin_lock_lock_of_mt7601u_dev_0(& dev->lock);
  #line 151 
  if ((int)rate->idx < 0 || (unsigned int)rate->count == 0U) 
                                                             #line 152 
                                                             rate_ctl = wcid->tx_rate; else 
                                                                    #line 154 
                                                                    rate_ctl = mt76_mac_tx_rate_val(dev,rate,& nss);
  #line 155 
  cif_spin_unlock_irqrestore_lock_of_mt7601u_dev_0(& dev->lock,flags);
  #line 156 
  txwi->rate_ctl = rate_ctl;
  #line 158 
  if ((info->flags & 4U) == 0U) 
                                #line 159 
                                txwi->ack_ctl = (unsigned char)((unsigned int)txwi->ack_ctl | 1U);
  #line 160 
  if ((info->flags & 2U) != 0U) 
                                #line 161 
                                txwi->ack_ctl = (unsigned char)((unsigned int)txwi->ack_ctl | 2U);
  #line 163 
  if ((info->flags & 64U) != 0U && sta != (struct ieee80211_sta *)0) {
    #line 167 
    int __UNIQUE_ID___x583;
    #line 167 
    int tmp_1;
    #line 164 
    u8 ba_size = (unsigned char)8U;
    #line 166 
    ba_size = (unsigned char)((int)ba_size << (int)sta->ht_cap.ampdu_factor);
    {
      #line 167 
      __UNIQUE_ID___x583 = 63;
      #line 167 
      int __UNIQUE_ID___y584 = (int)ba_size;
      #line 167 
      if (__UNIQUE_ID___x583 < __UNIQUE_ID___y584) 
                                                   #line 167 
                                                   tmp_1 = __UNIQUE_ID___x583; else 
                                                                    #line 167 
                                                                    tmp_1 = __UNIQUE_ID___y584;
      }
    #line 167 
    ba_size = (unsigned char)tmp_1;
    #line 168 
    if ((info->flags & 4096U) != 0U) 
                                     #line 169 
                                     ba_size = (unsigned char)0U;
    #line 170 
    if (0 != 0 && ((unsigned long)ba_size & 18446744073709551552UL) != 0UL) 
      #line 170 
      __compiletime_assert_170();
    #line 170 
    txwi->ack_ctl = (unsigned char)((int)txwi->ack_ctl | (int)((unsigned char)(((unsigned long)ba_size << 2) & 255UL)));
    #line 173 
    if (0 != 0 && ((unsigned long)sta->ht_cap.ampdu_density & 18446744073709551608UL) != 0UL) 
      #line 173 
      __compiletime_assert_173();
    #line 172 
    txwi->flags = (unsigned short)((unsigned int)((unsigned short)(((unsigned long)sta->ht_cap.ampdu_density << 5) & 255UL)) | 16U);
    #line 176 
    if ((info->flags & 4096U) != 0U) 
                                     #line 177 
                                     txwi->flags = (unsigned short)0U;
  }
  #line 180 
  txwi->wcid = wcid->idx;
  #line 182 
  is_probe = (_Bool)((info->flags & 4096U) != 0U);
  #line 183 
  pkt_id = (unsigned int)mt7601u_tx_pktid_enc(dev,
                             (unsigned char)((int)((unsigned char)rate_ctl) & 7),
                             (_Bool)((bool)((int)is_probe) != 0));
  #line 184 
  if (0 != 0 && ((unsigned long)pkt_id & 18446744073709551600UL) != 0UL) 
    #line 184 
    __compiletime_assert_184();
  #line 184 
  pkt_len = (int)((((unsigned long)pkt_id << 12) & 65535UL) | (unsigned long)pkt_len);
  #line 185 
  txwi->len_ctl = (unsigned short)pkt_len;
  #line 187 
  return txwi;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
void mt7601u_tx(struct ieee80211_hw *hw, struct ieee80211_tx_control *control, struct sk_buff *skb)
{
  #line 199 
  struct mt76_txwi *txwi;
  #line 193 
  struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
  #line 194 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 195 
  struct ieee80211_vif *vif = info->__anonCompField_ieee80211_tx_info_195.control.vif;
  #line 196 
  struct ieee80211_sta *sta = control->sta;
  #line 197 
  struct mt76_sta *msta = (struct mt76_sta *)0;
  #line 198 
  struct mt76_wcid *wcid = dev->mon_wcid;
  #line 200 
  int pkt_len = (int)skb->len;
  #line 201 
  int hw_q = (int)skb2q(skb);
  #line 204 
  info->__anonCompField_ieee80211_tx_info_195.status.status_driver_data[0] = (void *)((unsigned long)pkt_len);
  #line 206 
  if (mt7601u_skb_rooms(dev,skb) != 0) 
                                       #line 206 
                                       goto _LOR;
  else {
    #line 206 
    if (mt76_insert_hdr_pad(skb) != 0) {
      #line 206 
      _LOR: {
              #line 207 
              ieee80211_free_txskb(dev->hw,skb);
              #line 208 
              return;
            }
    }
  }
  #line 211 
  if (sta != (struct ieee80211_sta *)0) {
    #line 212 
    msta = (struct mt76_sta *)(& sta->drv_priv);
    #line 213 
    wcid = & msta->wcid;
  }
  else 
    #line 214 
    if (vif != (struct ieee80211_vif *)0) {
      #line 215 
      struct mt76_vif *mvif = (struct mt76_vif *)(& vif->drv_priv);
      #line 217 
      wcid = & mvif->group_wcid;
    }
  #line 220 
  txwi = mt7601u_push_txwi(dev,skb,sta,wcid,pkt_len);
  #line 222 
  if (mt7601u_dma_enqueue_tx(dev,skb,wcid,hw_q) != 0) 
                                                      #line 223 
                                                      return;
  #line 225 
  trace_mt_tx(dev,skb,msta,txwi);
  #line 226 
  return;
}

#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
void mt7601u_tx_stat(struct work_struct *work)
{
  #line 230 
  void *__mptr;
  #line 232 
  struct mt76_tx_status stat;
  #line 233 
  unsigned long flags;
  #line 230 
  __mptr = (void *)work;
  #line 230 
  struct mt7601u_dev *dev = ((struct mt7601u_dev *)(__mptr + 18446744073709550704U));
  #line 234 
  int cleaned = 0;
  #line 236 
  while (1) {
    #line 236 
    if (test_bit(1L,& dev->state)) 
                                   #line 236 
                                   break;
    #line 237 
    stat = mt7601u_mac_fetch_tx_status(dev);
    #line 238 
    if ((unsigned int)stat.valid == 0U) 
                                        #line 239 
                                        break;
    #line 241 
    mt7601u_tx_pktid_dec(dev,& stat);
    #line 242 
    mt76_send_tx_status(dev,& stat);
    #line 244 
    cleaned ++;
  }
  #line 246 
  trace_mt_tx_status_cleaned(dev,cleaned);
  #line 248 
  cif___ldv_spin_lock_tx_lock_of_mt7601u_dev_0(& dev->tx_lock);
  #line 249 
  if (cleaned != 0) {
    #line 250 
    ;
    #line 250 
    ;
    #line 250 
    cif_queue_delayed_work_0(dev->stat_wq,& dev->stat_work,msecs_to_jiffies(10U));
  }
  else {
    #line 252 
    if ((int)test_and_set_bit(6L,& dev->state) != 0) {
      #line 253 
      ;
      #line 253 
      ;
      #line 253 
      cif_queue_delayed_work_0(dev->stat_wq,& dev->stat_work,msecs_to_jiffies(20U));
    }
    else 
         #line 256 
         cif_clear_bit_1(5L,& dev->state);
  }
  #line 257 
  cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev_0(& dev->tx_lock,flags);
  #line 258 
  return;
}

#line 283 
#line 283 
void __compiletime_assert_283(void);
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/mediatek/mt7601u/tx.c"
int mt7601u_conf_tx(struct ieee80211_hw *hw, struct ieee80211_vif *vif, u16 queue, struct ieee80211_tx_queue_params *params)
{
  #line 265 
  u32 val;
  #line 263 
  struct mt7601u_dev *dev = (struct mt7601u_dev *)hw->priv;
  #line 264 
  u8 cw_min = (unsigned char)5U;
  #line 264 
  u8 cw_max = (unsigned char)10U;
  #line 264 
  u8 hw_q = q2hwq((unsigned char)((int)((unsigned char)queue)));
  #line 271 
  if ((unsigned int)params->cw_min != 0U) {
    #line 272 
    cw_min = (unsigned char)fls((unsigned int)params->cw_min);
  }
  #line 273 
  if ((unsigned int)params->cw_max != 0U) {
    #line 274 
    cw_max = (unsigned char)fls((unsigned int)params->cw_max);
  }
  {
    #line 276 
    int __ret_warn_on = (unsigned int)params->txop > 255U;
    #line 276 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 277 
      ldv_inline_asm();
      #line 278 
      ldv_inline_asm();
    }
    #line 276 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  {
    #line 277 
    int __ret_warn_on_0 = (unsigned int)params->aifs > 15U;
    #line 277 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 278 
      ldv_inline_asm();
      #line 279 
      ldv_inline_asm();
    }
    #line 277 
    long tmp_4 = (long)(__ret_warn_on_0 != 0);
  }
  {
    #line 278 
    int __ret_warn_on_1 = (unsigned int)cw_min > 15U;
    #line 278 
    if ((long)(__ret_warn_on_1 != 0) != 0L) {
      #line 279 
      ldv_inline_asm();
      #line 280 
      ldv_inline_asm();
    }
    #line 278 
    long tmp_6 = (long)(__ret_warn_on_1 != 0);
  }
  {
    #line 279 
    int __ret_warn_on_2 = (unsigned int)cw_max > 15U;
    #line 279 
    if ((long)(__ret_warn_on_2 != 0) != 0L) {
      #line 280 
      ldv_inline_asm();
      #line 281 
      ldv_inline_asm();
    }
    #line 279 
    long tmp_8 = (long)(__ret_warn_on_2 != 0);
  }
  #line 281 
  if (0 != 0 && ((unsigned long)params->aifs & 18446744073709551600UL) != 0UL) 
    #line 281 
    __compiletime_assert_281();
  #line 282 
  if (0 != 0 && ((unsigned long)cw_min & 18446744073709551600UL) != 0UL) 
    #line 282 
    __compiletime_assert_282();
  #line 283 
  if (0 != 0 && ((unsigned long)cw_max & 18446744073709551600UL) != 0UL) 
    #line 283 
    __compiletime_assert_283();
  #line 281 
  val = ((unsigned int)(((unsigned long)params->aifs << 8) & 3840UL) | (unsigned int)(((unsigned long)cw_min << 12) & 65535UL)) | (unsigned int)(((unsigned long)cw_max << 16) & 983040UL);
  #line 288 
  if ((unsigned int)hw_q == 0U) 
                                #line 289 
                                val |= 96U;
  else {
    #line 291 
    if (0 != 0 && ((unsigned long)params->txop & 18446744073709551360UL) != 0UL) 
      #line 291 
      __compiletime_assert_291();
    #line 291 
    val = (unsigned int)((unsigned long)params->txop & 255UL) | val;
  }
  #line 292 
  mt76_wr(dev,(unsigned int)(((int)hw_q << 2) + 4864),val);
  #line 294 
  val = mt76_rr(dev,(unsigned int)(((int)((unsigned int)hw_q / 2U) << 2) + 544));
  #line 295 
  val = ~ ((unsigned int)(65535UL << ((int)hw_q & 1) * 16)) & val;
  #line 296 
  val = (unsigned int)((int)params->txop << ((int)hw_q & 1) * 16) | val;
  #line 297 
  mt76_wr(dev,(unsigned int)(((int)((unsigned int)hw_q / 2U) << 2) + 544),val);
  #line 299 
  val = mt76_rr(dev,532U);
  #line 300 
  val = ~ ((unsigned int)(15UL << (int)hw_q * 4)) & val;
  #line 301 
  val = (unsigned int)((int)params->aifs << (int)hw_q * 4) | val;
  #line 302 
  mt76_wr(dev,532U,val);
  #line 304 
  val = mt76_rr(dev,536U);
  #line 305 
  val = ~ ((unsigned int)(15UL << (int)hw_q * 4)) & val;
  #line 306 
  val = (unsigned int)((int)cw_min << (int)hw_q * 4) | val;
  #line 307 
  mt76_wr(dev,536U,val);
  #line 309 
  val = mt76_rr(dev,540U);
  #line 310 
  val = ~ ((unsigned int)(15UL << (int)hw_q * 4)) & val;
  #line 311 
  val = (unsigned int)((int)cw_max << (int)hw_q * 4) | val;
  #line 312 
  mt76_wr(dev,540U,val);
  #line 314 
  return 0;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 132 
  ldv_clear_bit(nr,addr);
  #line 133 
  return;
}

#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 310 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 801  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_lock_bh_mac_lock_of_mt7601u_dev_0(spinlock_t *lock)
{
  #line 804 
  ldv_spin_model_lock((char *)"mac_lock_of_mt7601u_dev");
  #line 806 
  spin_lock_bh_1(lock);
  #line 807 
  return;
}

#line 810  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_bh_mac_lock_of_mt7601u_dev_0(spinlock_t *lock)
{
  #line 813 
  ldv_spin_model_unlock((char *)"mac_lock_of_mt7601u_dev");
  #line 815 
  spin_unlock_bh_1(lock);
  #line 816 
  return;
}

#line 819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif___ldv_spin_lock_lock_of_mt7601u_dev_0(spinlock_t *lock)
{
  #line 822 
  ldv_spin_model_lock((char *)"lock_of_mt7601u_dev");
  #line 824 
  __ldv_spin_lock(lock);
  #line 825 
  return;
}

#line 828  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_mt7601u_dev_0(spinlock_t *lock, unsigned long flags)
{
  #line 831 
  ldv_spin_model_unlock((char *)"lock_of_mt7601u_dev");
  #line 833 
  spin_unlock_irqrestore_1(lock,flags);
  #line 834 
  return;
}

#line 837  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif___ldv_spin_lock_tx_lock_of_mt7601u_dev_0(spinlock_t *lock)
{
  #line 840 
  ldv_spin_model_lock((char *)"tx_lock_of_mt7601u_dev");
  #line 842 
  __ldv_spin_lock(lock);
  #line 843 
  return;
}

#line 846  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_spin_unlock_irqrestore_tx_lock_of_mt7601u_dev_0(spinlock_t *lock, unsigned long flags)
{
  #line 849 
  ldv_spin_model_unlock((char *)"tx_lock_of_mt7601u_dev");
  #line 851 
  spin_unlock_irqrestore_1(lock,flags);
  #line 852 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 87 
#line 87 
void ldv_failed_usb_register_driver(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
#line 169 
void emg_dispatch_deregister_10(struct usb_driver *arg0);
#line 84 
#line 160 
void emg_dispatch_deregister_6(struct ieee80211_hw *arg0);
#line 85 
#line 178 
void emg_dispatch_register_12(struct usb_driver *arg0);
#line 86 
#line 116 
void emg_dispatch_register_3(struct file_operations *arg0);
#line 87 
#line 149 
void emg_dispatch_register_5(struct ieee80211_hw *arg0);
#line 88 
#line 1653 
void *emg_entry_point_insmod(void *arg0);
#line 89 
#line 189 
void *emg_file_operations_character_driver_scenario_fops_ampdu_stat(void *arg0);
#line 90 
#line 366 
void *emg_file_operations_character_driver_scenario_fops_eeprom_param(void *arg0);
#line 91 
#line 543 
void *emg_file_operations_character_driver_scenario_fops_regval(void *arg0);
#line 95 
#line 718 
void *emg_ieee80211_ieee80211_scenario_mt7601u_ops(void *arg0);
#line 104 
#line 1148 
void *emg_usb_usb_scenario_mt7601u_driver(void *arg0);
#line 105 
#line 1682 
int main(void);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_3(struct file_operations *arg0)
{
  #line 117 
  int ret;
  #line 118 
  struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *cf_arg_15;
  #line 119 
  struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *cf_arg_16;
  #line 120 
  struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *cf_arg_17;
  #line 121 
  switch (ldv_undef_int()) {
    #line 122 
    case 0: 
            #line 122 
    ;
    #line 123 
    cf_arg_15 = (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)ldv_xmalloc(16UL);
    #line 124 
    cf_arg_15->arg0 = arg0;
    #line 125 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_ampdu_stat,(void *)cf_arg_15);
    #line 126 
    __VERIFIER_assume(ret == 0);
    #line 127 
    break;
    #line 129 
    case 1: 
            #line 129 
    ;
    #line 130 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)ldv_xmalloc(16UL);
    #line 131 
    cf_arg_16->arg0 = arg0;
    #line 132 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_eeprom_param,(void *)cf_arg_16);
    #line 133 
    __VERIFIER_assume(ret == 0);
    #line 134 
    break;
    #line 136 
    case 2: 
            #line 136 
    ;
    #line 137 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)ldv_xmalloc(16UL);
    #line 138 
    cf_arg_17->arg0 = arg0;
    #line 139 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_fops_regval,(void *)cf_arg_17);
    #line 140 
    __VERIFIER_assume(ret == 0);
    #line 141 
    break;
    #line 143 
    default: 
             #line 143 
    ;
    #line 143 
    __VERIFIER_assume(0);
  }
  #line 145 
  return;
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct ieee80211_hw *arg0)
{
  #line 150 
  int ret;
  #line 151 
  struct emg_struct_ieee80211_scenario_mt7601u_ops_18 *cf_arg_18;
  #line 152 
  cf_arg_18 = (struct emg_struct_ieee80211_scenario_mt7601u_ops_18 *)ldv_xmalloc(16UL);
  #line 153 
  cf_arg_18->arg0 = arg0;
  #line 154 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_ieee80211_ieee80211_scenario_mt7601u_ops,(void *)cf_arg_18);
  #line 155 
  __VERIFIER_assume(ret == 0);
  #line 156 
  return;
}

#line 160  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct ieee80211_hw *arg0)
{
  #line 161 
  int ret;
  #line 162 
  struct emg_struct_ieee80211_scenario_mt7601u_ops_18 *cf_arg_18;
  #line 163 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 164 
  __VERIFIER_assume(ret == 0);
  #line 165 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_10(struct usb_driver *arg0)
{
  #line 170 
  int ret;
  #line 171 
  struct emg_struct_usb_scenario_mt7601u_driver_19 *cf_arg_19;
  #line 172 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 173 
  __VERIFIER_assume(ret == 0);
  #line 174 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_12(struct usb_driver *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_usb_scenario_mt7601u_driver_19 *cf_arg_19;
  #line 181 
  cf_arg_19 = (struct emg_struct_usb_scenario_mt7601u_driver_19 *)ldv_xmalloc(16UL);
  #line 182 
  cf_arg_19->arg0 = arg0;
  #line 183 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_usb_usb_scenario_mt7601u_driver,(void *)cf_arg_19);
  #line 184 
  __VERIFIER_assume(ret == 0);
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_ampdu_stat(void *arg0)
{
  #line 192 
  struct file_operations *emg_15_container;
  #line 193 
  long long emg_15_emg_param_1_0;
  #line 194 
  char *emg_15_emg_param_1_2;
  #line 195 
  char *emg_15_emg_param_1_4;
  #line 196 
  int emg_15_emg_param_2_1;
  #line 197 
  long long *emg_15_emg_param_3_3;
  #line 198 
  long long *emg_15_emg_param_3_5;
  #line 199 
  struct file *emg_15_resource_0;
  #line 200 
  struct inode *emg_15_resource_1;
  #line 201 
  int emg_15_ret;
  #line 202 
  unsigned long emg_15_size_cnt;
  #line 203 
  int emg_repeat_cnt_call_15 = 1;
  #line 204 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 205 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 207 
  struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *data = (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)arg0;
  #line 211 
  emg_15_ret = ldv_undef_int();
  #line 212 
  emg_15_container = emg_alias_fops_ampdu_stat;
  #line 213 
  emg_15_ret = ldv_undef_int();
  #line 215 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_ampdu_stat);
  #line 217 
  if (data != (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)0) {
    #line 218 
    emg_15_container = data->arg0;
    #line 219 
    ldv_free((void *)data);
  }
  #line 224 
  emg_15_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 225 
  emg_15_size_cnt = (unsigned long)ldv_undef_int();
  #line 229 
  goto emg_main_15;
  #line 233 
  return (void *)0;
  #line 236 
  emg_call_15: 
               #line 236 
  ;
  #line 237 
  if (ldv_undef_int() != 0) {
    #line 238 
    switch (ldv_undef_int()) {
      #line 239 
      case 0: 
              #line 239 
      ;
      #line 241 
      emg_15_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 241 
      emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
      #line 242 
      emg_15_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 242 
      emg_15_emg_param_3_3 = emg_15_emg_param_3_3;
      #line 246 
      seq_read(emg_15_resource_0,emg_15_emg_param_1_2,emg_15_size_cnt,emg_15_emg_param_3_3);
      #line 250 
      ldv_free((void *)emg_15_emg_param_1_2);
      #line 251 
      ldv_free((void *)emg_15_emg_param_3_3);
      #line 253 
      break;
      #line 255 
      case 1: 
              #line 255 
      ;
      #line 257 
      seq_lseek(emg_15_resource_0,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
      #line 259 
      break;
      #line 261 
      case 2: 
              #line 261 
      ;
      #line 268 
      __VERIFIER_assume(emg_15_size_cnt <= 2147479552UL);
      #line 269 
      emg_15_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 269 
      emg_15_emg_param_1_4 = emg_15_emg_param_1_4;
      #line 270 
      emg_15_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 270 
      emg_15_emg_param_3_5 = emg_15_emg_param_3_5;
      #line 274 
      if (emg_15_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 275 
        (*(emg_15_container->write))(emg_15_resource_0,emg_15_emg_param_1_4,emg_15_size_cnt,emg_15_emg_param_3_5);
      #line 280 
      ldv_free((void *)emg_15_emg_param_1_4);
      #line 281 
      ldv_free((void *)emg_15_emg_param_3_5);
      #line 283 
      break;
      #line 285 
      default: 
               #line 285 
      ;
      #line 285 
      __VERIFIER_assume(0);
    }
    #line 288 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 289 
      emg_repeat_cnt_call_15 --;
      #line 291 
      goto emg_call_15;
    }
    else 
         #line 293 
         __VERIFIER_assume(0);
  }
  else {
    #line 299 
    (*emg_alias_single_release)(emg_15_resource_1,emg_15_resource_0);
    #line 302 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 303 
      emg_repeat_cnt_main_15_0 --;
      #line 305 
      goto emg_main_15;
    }
    else 
         #line 307 
         __VERIFIER_assume(0);
  }
  #line 313 
  return (void *)0;
  #line 316 
  emg_main_15: 
               #line 316 
  ;
  #line 317 
  if (ldv_undef_int() != 0) {
    #line 319 
    emg_15_ret = emg_wrapper_mt7601u_ampdu_stat_open(emg_15_resource_1,emg_15_resource_0);
    #line 324 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 327 
    if (ldv_undef_int() != 0) {
      #line 329 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 333 
      goto emg_call_15;
    }
    else {
      #line 338 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 341 
      if (emg_repeat_cnt_main_15_1 > 0) {
        #line 342 
        emg_repeat_cnt_main_15_1 --;
        #line 344 
        goto emg_main_15;
      }
      else 
           #line 346 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 353 
       ldv_free((void *)emg_15_resource_0);
  #line 361 
  return (void *)0;
}

#line 366  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_eeprom_param(void *arg0)
{
  #line 369 
  struct file_operations *emg_16_container;
  #line 370 
  long long emg_16_emg_param_1_0;
  #line 371 
  char *emg_16_emg_param_1_2;
  #line 372 
  char *emg_16_emg_param_1_4;
  #line 373 
  int emg_16_emg_param_2_1;
  #line 374 
  long long *emg_16_emg_param_3_3;
  #line 375 
  long long *emg_16_emg_param_3_5;
  #line 376 
  struct file *emg_16_resource_0;
  #line 377 
  struct inode *emg_16_resource_1;
  #line 378 
  int emg_16_ret;
  #line 379 
  unsigned long emg_16_size_cnt;
  #line 380 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 381 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 382 
  int emg_repeat_cnt_call_16 = 1;
  #line 384 
  struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *data = (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)arg0;
  #line 388 
  emg_16_ret = ldv_undef_int();
  #line 389 
  emg_16_container = emg_alias_fops_eeprom_param;
  #line 390 
  emg_16_ret = ldv_undef_int();
  #line 392 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_eeprom_param);
  #line 394 
  if (data != (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)0) {
    #line 395 
    emg_16_container = data->arg0;
    #line 396 
    ldv_free((void *)data);
  }
  #line 401 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 402 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 406 
  goto emg_main_16;
  #line 410 
  return (void *)0;
  #line 413 
  emg_call_16: 
               #line 413 
  ;
  #line 414 
  if (ldv_undef_int() != 0) {
    #line 415 
    switch (ldv_undef_int()) {
      #line 416 
      case 0: 
              #line 416 
      ;
      #line 418 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 418 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 419 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 419 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 423 
      seq_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 427 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 428 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 430 
      break;
      #line 432 
      case 1: 
              #line 432 
      ;
      #line 434 
      seq_lseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 436 
      break;
      #line 438 
      case 2: 
              #line 438 
      ;
      #line 445 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 446 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 446 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 447 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 447 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 451 
      if (emg_16_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 452 
        (*(emg_16_container->write))(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 457 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 458 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 460 
      break;
      #line 462 
      default: 
               #line 462 
      ;
      #line 462 
      __VERIFIER_assume(0);
    }
    #line 465 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 466 
      emg_repeat_cnt_call_16 --;
      #line 468 
      goto emg_call_16;
    }
    else 
         #line 470 
         __VERIFIER_assume(0);
  }
  else {
    #line 476 
    (*emg_alias_single_release)(emg_16_resource_1,emg_16_resource_0);
    #line 479 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 480 
      emg_repeat_cnt_main_16_1 --;
      #line 482 
      goto emg_main_16;
    }
    else 
         #line 484 
         __VERIFIER_assume(0);
  }
  #line 490 
  return (void *)0;
  #line 493 
  emg_main_16: 
               #line 493 
  ;
  #line 494 
  if (ldv_undef_int() != 0) {
    #line 496 
    emg_16_ret = emg_wrapper_mt7601u_eeprom_param_open(emg_16_resource_1,emg_16_resource_0);
    #line 501 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 504 
    if (ldv_undef_int() != 0) {
      #line 506 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 510 
      goto emg_call_16;
    }
    else {
      #line 515 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 518 
      if (emg_repeat_cnt_main_16_0 > 0) {
        #line 519 
        emg_repeat_cnt_main_16_0 --;
        #line 521 
        goto emg_main_16;
      }
      else 
           #line 523 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 530 
       ldv_free((void *)emg_16_resource_0);
  #line 538 
  return (void *)0;
}

#line 543  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_fops_regval(void *arg0)
{
  #line 546 
  struct file_operations *emg_17_container;
  #line 547 
  long long emg_17_emg_param_1_0;
  #line 548 
  char *emg_17_emg_param_1_2;
  #line 549 
  char *emg_17_emg_param_1_4;
  #line 550 
  int emg_17_emg_param_2_1;
  #line 551 
  long long *emg_17_emg_param_3_3;
  #line 552 
  long long *emg_17_emg_param_3_5;
  #line 553 
  struct file *emg_17_resource_0;
  #line 554 
  struct inode *emg_17_resource_1;
  #line 555 
  int emg_17_ret;
  #line 556 
  unsigned long emg_17_size_cnt;
  #line 557 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 558 
  int emg_repeat_cnt_call_17 = 1;
  #line 559 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 561 
  struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *data = (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)arg0;
  #line 565 
  emg_17_ret = ldv_undef_int();
  #line 566 
  emg_17_container = emg_alias_fops_regval;
  #line 567 
  emg_17_ret = ldv_undef_int();
  #line 569 
  __VERIFIER_assume(data->arg0 == emg_alias_fops_regval);
  #line 571 
  if (data != (struct emg_struct_character_driver_scenario_fops_ampdu_stat_15 *)0) {
    #line 572 
    emg_17_container = data->arg0;
    #line 573 
    ldv_free((void *)data);
  }
  #line 578 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 579 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 583 
  goto emg_main_17;
  #line 587 
  return (void *)0;
  #line 590 
  emg_call_17: 
               #line 590 
  ;
  #line 591 
  if (ldv_undef_int() != 0) {
    #line 592 
    switch (ldv_undef_int()) {
      #line 593 
      case 0: 
              #line 593 
      ;
      #line 595 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 595 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 596 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 596 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 600 
      debugfs_attr_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 604 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 605 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 607 
      break;
      #line 609 
      case 1: 
              #line 609 
      ;
      #line 611 
      no_llseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 613 
      break;
      #line 615 
      case 2: 
              #line 615 
      ;
      #line 622 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 623 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 623 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 624 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 624 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 628 
      debugfs_attr_write(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 632 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 633 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 635 
      break;
      #line 637 
      default: 
               #line 637 
      ;
      #line 637 
      __VERIFIER_assume(0);
    }
    #line 640 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 641 
      emg_repeat_cnt_call_17 --;
      #line 643 
      goto emg_call_17;
    }
    else 
         #line 645 
         __VERIFIER_assume(0);
  }
  else {
    #line 651 
    (*emg_alias_simple_attr_release)(emg_17_resource_1,emg_17_resource_0);
    #line 654 
    if (emg_repeat_cnt_main_17_0 > 0) {
      #line 655 
      emg_repeat_cnt_main_17_0 --;
      #line 657 
      goto emg_main_17;
    }
    else 
         #line 659 
         __VERIFIER_assume(0);
  }
  #line 665 
  return (void *)0;
  #line 668 
  emg_main_17: 
               #line 668 
  ;
  #line 669 
  if (ldv_undef_int() != 0) {
    #line 671 
    emg_17_ret = emg_wrapper_fops_regval_open(emg_17_resource_1,emg_17_resource_0);
    #line 676 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 679 
    if (ldv_undef_int() != 0) {
      #line 681 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 685 
      goto emg_call_17;
    }
    else {
      #line 690 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 693 
      if (emg_repeat_cnt_main_17_1 > 0) {
        #line 694 
        emg_repeat_cnt_main_17_1 --;
        #line 696 
        goto emg_main_17;
      }
      else 
           #line 698 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 705 
       ldv_free((void *)emg_17_resource_0);
  #line 713 
  return (void *)0;
}

#line 718  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void *emg_ieee80211_ieee80211_scenario_mt7601u_ops(void *arg0)
{
  #line 721 
  struct ieee80211_ops *emg_18_container;
  #line 722 
  struct ieee80211_vif *emg_18_emg_param_1_0;
  #line 723 
  struct ieee80211_vif *emg_18_emg_param_1_1;
  #line 724 
  unsigned int emg_18_emg_param_1_10;
  #line 725 
  struct ieee80211_vif *emg_18_emg_param_1_13;
  #line 726 
  enum set_key_cmd *emg_18_emg_param_1_14;
  #line 727 
  unsigned int emg_18_emg_param_1_18;
  #line 728 
  struct ieee80211_vif *emg_18_emg_param_1_19;
  #line 729 
  struct ieee80211_vif *emg_18_emg_param_1_21;
  #line 730 
  struct ieee80211_vif *emg_18_emg_param_1_24;
  #line 731 
  struct ieee80211_vif *emg_18_emg_param_1_26;
  #line 732 
  struct ieee80211_vif *emg_18_emg_param_1_28;
  #line 733 
  struct ieee80211_vif *emg_18_emg_param_1_29;
  #line 734 
  struct ieee80211_vif *emg_18_emg_param_1_3;
  #line 735 
  struct ieee80211_tx_control *emg_18_emg_param_1_31;
  #line 736 
  struct cfg80211_wowlan *emg_18_emg_param_1_33;
  #line 737 
  struct ieee80211_vif *emg_18_emg_param_1_6;
  #line 738 
  unsigned int emg_18_emg_param_1_9;
  #line 739 
  unsigned int *emg_18_emg_param_2_11;
  #line 740 
  struct ieee80211_vif *emg_18_emg_param_2_15;
  #line 741 
  struct ieee80211_ampdu_params *emg_18_emg_param_2_2;
  #line 742 
  struct ieee80211_sta *emg_18_emg_param_2_20;
  #line 743 
  enum sta_notify_cmd *emg_18_emg_param_2_22;
  #line 744 
  struct ieee80211_sta *emg_18_emg_param_2_25;
  #line 745 
  struct ieee80211_sta *emg_18_emg_param_2_27;
  #line 746 
  unsigned char *emg_18_emg_param_2_30;
  #line 747 
  struct sk_buff *emg_18_emg_param_2_32;
  #line 748 
  struct ieee80211_bss_conf *emg_18_emg_param_2_4;
  #line 749 
  unsigned short emg_18_emg_param_2_7;
  #line 750 
  unsigned long long emg_18_emg_param_3_12;
  #line 751 
  struct ieee80211_sta *emg_18_emg_param_3_16;
  #line 752 
  struct ieee80211_sta *emg_18_emg_param_3_23;
  #line 753 
  unsigned int emg_18_emg_param_3_5;
  #line 754 
  struct ieee80211_tx_queue_params *emg_18_emg_param_3_8;
  #line 755 
  struct ieee80211_key_conf *emg_18_emg_param_4_17;
  #line 756 
  struct ieee80211_hw *emg_18_resource;
  #line 757 
  int emg_18_ret;
  #line 758 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 759 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 760 
  int emg_repeat_cnt_started_18_1 = 1;
  #line 761 
  int emg_repeat_cnt_started_18_0 = 1;
  #line 763 
  struct emg_struct_ieee80211_scenario_mt7601u_ops_18 *data = (struct emg_struct_ieee80211_scenario_mt7601u_ops_18 *)arg0;
  #line 767 
  emg_18_ret = ldv_undef_int();
  #line 768 
  emg_18_container = & mt7601u_ops;
  #line 769 
  emg_18_ret = ldv_undef_int();
  #line 772 
  if (data != (struct emg_struct_ieee80211_scenario_mt7601u_ops_18 *)0) {
    #line 773 
    emg_18_resource = data->arg0;
    #line 774 
    ldv_free((void *)data);
  }
  #line 779 
  goto emg_main_18;
  #line 783 
  return (void *)0;
  #line 786 
  emg_main_18: 
               #line 786 
  ;
  #line 787 
  if (ldv_undef_int() != 0) {
    #line 790 
    rtnl_lock();
    #line 794 
    emg_18_ret = emg_wrapper_mt7601u_start(emg_18_resource);
    #line 799 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 800 
    rtnl_unlock();
    #line 803 
    if (ldv_undef_int() != 0) {
      #line 805 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 809 
      goto emg_started_18;
    }
    else 
         #line 814 
         __VERIFIER_assume(emg_18_ret != 0);
    #line 818 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 819 
      emg_repeat_cnt_main_18_1 --;
      #line 821 
      goto emg_main_18;
    }
    else 
         #line 823 
         __VERIFIER_assume(0);
  }
  #line 833 
  return (void *)0;
  #line 836 
  emg_started_18: 
                  #line 836 
  ;
  #line 837 
  switch (ldv_undef_int()) {
    #line 838 
    case 0: 
            #line 838 
    ;
    #line 840 
    emg_18_emg_param_1_31 = (struct ieee80211_tx_control *)ldv_xmalloc_unknown_size(0UL);
    #line 840 
    emg_18_emg_param_1_31 = emg_18_emg_param_1_31;
    #line 841 
    emg_18_emg_param_2_32 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 841 
    emg_18_emg_param_2_32 = emg_18_emg_param_2_32;
    #line 845 
    mt7601u_tx(emg_18_resource,emg_18_emg_param_1_31,emg_18_emg_param_2_32);
    #line 849 
    ldv_free((void *)emg_18_emg_param_1_31);
    #line 850 
    ldv_free((void *)emg_18_emg_param_2_32);
    #line 852 
    break;
    #line 854 
    case 1: 
            #line 854 
    ;
    #line 856 
    emg_18_emg_param_1_29 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 856 
    emg_18_emg_param_1_29 = emg_18_emg_param_1_29;
    #line 857 
    emg_18_emg_param_2_30 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 857 
    emg_18_emg_param_2_30 = emg_18_emg_param_2_30;
    #line 861 
    emg_wrapper_mt7601u_sw_scan(emg_18_resource,emg_18_emg_param_1_29,emg_18_emg_param_2_30);
    #line 865 
    ldv_free((void *)emg_18_emg_param_1_29);
    #line 866 
    ldv_free((void *)emg_18_emg_param_2_30);
    #line 868 
    break;
    #line 870 
    case 2: 
            #line 870 
    ;
    #line 872 
    emg_18_emg_param_1_28 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 872 
    emg_18_emg_param_1_28 = emg_18_emg_param_1_28;
    #line 876 
    emg_wrapper_mt7601u_sw_scan_complete(emg_18_resource,emg_18_emg_param_1_28);
    #line 880 
    ldv_free((void *)emg_18_emg_param_1_28);
    #line 882 
    break;
    #line 884 
    case 3: 
            #line 884 
    ;
    #line 886 
    emg_18_emg_param_1_26 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 886 
    emg_18_emg_param_1_26 = emg_18_emg_param_1_26;
    #line 887 
    emg_18_emg_param_2_27 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 887 
    emg_18_emg_param_2_27 = emg_18_emg_param_2_27;
    #line 891 
    emg_wrapper_mt7601u_sta_remove(emg_18_resource,emg_18_emg_param_1_26,emg_18_emg_param_2_27);
    #line 895 
    ldv_free((void *)emg_18_emg_param_1_26);
    #line 896 
    ldv_free((void *)emg_18_emg_param_2_27);
    #line 898 
    break;
    #line 900 
    case 4: 
            #line 900 
    ;
    #line 902 
    emg_18_emg_param_1_24 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 902 
    emg_18_emg_param_1_24 = emg_18_emg_param_1_24;
    #line 903 
    emg_18_emg_param_2_25 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 903 
    emg_18_emg_param_2_25 = emg_18_emg_param_2_25;
    #line 907 
    emg_wrapper_mt76_sta_rate_tbl_update(emg_18_resource,emg_18_emg_param_1_24,emg_18_emg_param_2_25);
    #line 911 
    ldv_free((void *)emg_18_emg_param_1_24);
    #line 912 
    ldv_free((void *)emg_18_emg_param_2_25);
    #line 914 
    break;
    #line 916 
    case 5: 
            #line 916 
    ;
    #line 918 
    emg_18_emg_param_1_21 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 918 
    emg_18_emg_param_1_21 = emg_18_emg_param_1_21;
    #line 919 
    emg_18_emg_param_2_22 = (enum sta_notify_cmd *)ldv_xmalloc_unknown_size(0UL);
    #line 919 
    emg_18_emg_param_2_22 = emg_18_emg_param_2_22;
    #line 920 
    emg_18_emg_param_3_23 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 920 
    emg_18_emg_param_3_23 = emg_18_emg_param_3_23;
    #line 924 
    emg_wrapper_mt7601u_sta_notify(emg_18_resource,emg_18_emg_param_1_21,*emg_18_emg_param_2_22,emg_18_emg_param_3_23);
    #line 928 
    ldv_free((void *)emg_18_emg_param_1_21);
    #line 929 
    ldv_free((void *)emg_18_emg_param_2_22);
    #line 930 
    ldv_free((void *)emg_18_emg_param_3_23);
    #line 932 
    break;
    #line 934 
    case 6: 
            #line 934 
    ;
    #line 936 
    emg_18_emg_param_1_19 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 936 
    emg_18_emg_param_1_19 = emg_18_emg_param_1_19;
    #line 937 
    emg_18_emg_param_2_20 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 937 
    emg_18_emg_param_2_20 = emg_18_emg_param_2_20;
    #line 941 
    emg_wrapper_mt7601u_sta_add(emg_18_resource,emg_18_emg_param_1_19,emg_18_emg_param_2_20);
    #line 945 
    ldv_free((void *)emg_18_emg_param_1_19);
    #line 946 
    ldv_free((void *)emg_18_emg_param_2_20);
    #line 948 
    break;
    #line 950 
    case 7: 
            #line 950 
    ;
    #line 952 
    emg_wrapper_mt7601u_set_rts_threshold(emg_18_resource,emg_18_emg_param_1_18);
    #line 954 
    break;
    #line 956 
    case 8: 
            #line 956 
    ;
    #line 958 
    emg_18_emg_param_1_14 = (enum set_key_cmd *)ldv_xmalloc_unknown_size(0UL);
    #line 958 
    emg_18_emg_param_1_14 = emg_18_emg_param_1_14;
    #line 959 
    emg_18_emg_param_2_15 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 959 
    emg_18_emg_param_2_15 = emg_18_emg_param_2_15;
    #line 960 
    emg_18_emg_param_3_16 = (struct ieee80211_sta *)ldv_xmalloc_unknown_size(0UL);
    #line 960 
    emg_18_emg_param_3_16 = emg_18_emg_param_3_16;
    #line 961 
    emg_18_emg_param_4_17 = (struct ieee80211_key_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 961 
    emg_18_emg_param_4_17 = emg_18_emg_param_4_17;
    #line 965 
    emg_wrapper_mt7601u_set_key(emg_18_resource,*emg_18_emg_param_1_14,emg_18_emg_param_2_15,emg_18_emg_param_3_16,emg_18_emg_param_4_17);
    #line 969 
    ldv_free((void *)emg_18_emg_param_1_14);
    #line 970 
    ldv_free((void *)emg_18_emg_param_2_15);
    #line 971 
    ldv_free((void *)emg_18_emg_param_3_16);
    #line 972 
    ldv_free((void *)emg_18_emg_param_4_17);
    #line 974 
    break;
    #line 976 
    case 9: 
            #line 976 
    ;
    #line 978 
    emg_18_emg_param_1_13 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 978 
    emg_18_emg_param_1_13 = emg_18_emg_param_1_13;
    #line 982 
    emg_wrapper_mt7601u_remove_interface(emg_18_resource,emg_18_emg_param_1_13);
    #line 986 
    ldv_free((void *)emg_18_emg_param_1_13);
    #line 988 
    break;
    #line 990 
    case 10: 
             #line 990 
    ;
    #line 992 
    emg_18_emg_param_2_11 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 992 
    emg_18_emg_param_2_11 = emg_18_emg_param_2_11;
    #line 996 
    emg_wrapper_mt76_configure_filter(emg_18_resource,emg_18_emg_param_1_10,emg_18_emg_param_2_11,emg_18_emg_param_3_12);
    #line 1000 
    ldv_free((void *)emg_18_emg_param_2_11);
    #line 1002 
    break;
    #line 1004 
    case 11: 
             #line 1004 
    ;
    #line 1006 
    emg_wrapper_mt7601u_config(emg_18_resource,emg_18_emg_param_1_9);
    #line 1008 
    break;
    #line 1010 
    case 12: 
             #line 1010 
    ;
    #line 1012 
    emg_18_emg_param_1_6 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 1012 
    emg_18_emg_param_1_6 = emg_18_emg_param_1_6;
    #line 1013 
    emg_18_emg_param_3_8 = (struct ieee80211_tx_queue_params *)ldv_xmalloc_unknown_size(0UL);
    #line 1013 
    emg_18_emg_param_3_8 = emg_18_emg_param_3_8;
    #line 1017 
    mt7601u_conf_tx(emg_18_resource,emg_18_emg_param_1_6,(unsigned short)((int)emg_18_emg_param_2_7),emg_18_emg_param_3_8);
    #line 1021 
    ldv_free((void *)emg_18_emg_param_1_6);
    #line 1022 
    ldv_free((void *)emg_18_emg_param_3_8);
    #line 1024 
    break;
    #line 1026 
    case 13: 
             #line 1026 
    ;
    #line 1028 
    emg_18_emg_param_1_3 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 1028 
    emg_18_emg_param_1_3 = emg_18_emg_param_1_3;
    #line 1029 
    emg_18_emg_param_2_4 = (struct ieee80211_bss_conf *)ldv_xmalloc_unknown_size(0UL);
    #line 1029 
    emg_18_emg_param_2_4 = emg_18_emg_param_2_4;
    #line 1033 
    emg_wrapper_mt7601u_bss_info_changed(emg_18_resource,emg_18_emg_param_1_3,emg_18_emg_param_2_4,emg_18_emg_param_3_5);
    #line 1037 
    ldv_free((void *)emg_18_emg_param_1_3);
    #line 1038 
    ldv_free((void *)emg_18_emg_param_2_4);
    #line 1040 
    break;
    #line 1042 
    case 14: 
             #line 1042 
    ;
    #line 1044 
    emg_18_emg_param_1_1 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 1044 
    emg_18_emg_param_1_1 = emg_18_emg_param_1_1;
    #line 1045 
    emg_18_emg_param_2_2 = (struct ieee80211_ampdu_params *)ldv_xmalloc_unknown_size(0UL);
    #line 1045 
    emg_18_emg_param_2_2 = emg_18_emg_param_2_2;
    #line 1049 
    emg_wrapper_mt76_ampdu_action(emg_18_resource,emg_18_emg_param_1_1,emg_18_emg_param_2_2);
    #line 1053 
    ldv_free((void *)emg_18_emg_param_1_1);
    #line 1054 
    ldv_free((void *)emg_18_emg_param_2_2);
    #line 1056 
    break;
    #line 1058 
    case 15: 
             #line 1058 
    ;
    #line 1060 
    emg_18_emg_param_1_33 = (struct cfg80211_wowlan *)ldv_xmalloc_unknown_size(0UL);
    #line 1060 
    emg_18_emg_param_1_33 = emg_18_emg_param_1_33;
    #line 1064 
    if (emg_18_container->suspend != (int (*)(struct ieee80211_hw *, struct cfg80211_wowlan *))0) 
      #line 1065 
      (*(emg_18_container->suspend))(emg_18_resource,emg_18_emg_param_1_33);
    #line 1070 
    ldv_free((void *)emg_18_emg_param_1_33);
    #line 1074 
    if (emg_18_container->resume != (int (*)(struct ieee80211_hw *))0) 
      #line 1075 
      (*(emg_18_container->resume))(emg_18_resource);
    #line 1079 
    if (emg_repeat_cnt_started_18_1 > 0) {
      #line 1080 
      emg_repeat_cnt_started_18_1 --;
      #line 1082 
      goto emg_started_18;
    }
    else 
         #line 1084 
         __VERIFIER_assume(0);
    #line 1088 
    break;
    #line 1090 
    case 16: 
             #line 1090 
    ;
    #line 1092 
    emg_18_emg_param_1_0 = (struct ieee80211_vif *)ldv_xmalloc_unknown_size(0UL);
    #line 1092 
    emg_18_emg_param_1_0 = emg_18_emg_param_1_0;
    #line 1096 
    emg_wrapper_mt7601u_add_interface(emg_18_resource,emg_18_emg_param_1_0);
    #line 1100 
    ldv_free((void *)emg_18_emg_param_1_0);
    #line 1103 
    if (emg_repeat_cnt_started_18_0 > 0) {
      #line 1104 
      emg_repeat_cnt_started_18_0 --;
      #line 1106 
      goto emg_started_18;
    }
    else 
         #line 1108 
         __VERIFIER_assume(0);
    #line 1112 
    break;
    #line 1114 
    case 17: 
             #line 1114 
    ;
    #line 1117 
    rtnl_lock();
    #line 1121 
    emg_wrapper_mt7601u_stop(emg_18_resource);
    #line 1126 
    rtnl_unlock();
    #line 1129 
    if (emg_repeat_cnt_main_18_0 > 0) {
      #line 1130 
      emg_repeat_cnt_main_18_0 --;
      #line 1132 
      goto emg_main_18;
    }
    else 
         #line 1134 
         __VERIFIER_assume(0);
    #line 1138 
    break;
    #line 1140 
    default: 
             #line 1140 
    ;
    #line 1140 
    __VERIFIER_assume(0);
  }
  #line 1143 
  return (void *)0;
}

#line 1148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void *emg_usb_usb_scenario_mt7601u_driver(void *arg0)
{
  #line 1151 
  int emg_19_choice;
  #line 1152 
  struct usb_driver *emg_19_container;
  #line 1153 
  struct usb_device_id *emg_19_device_id;
  #line 1154 
  struct pm_message *emg_19_emg_param_1_0;
  #line 1155 
  int emg_19_probe_retval;
  #line 1156 
  struct usb_interface *emg_19_resource;
  #line 1157 
  struct usb_device *emg_19_usb_device;
  #line 1158 
  int emg_repeat_cnt_manage_interface_19 = 1;
  #line 1160 
  struct emg_struct_usb_scenario_mt7601u_driver_19 *data = (struct emg_struct_usb_scenario_mt7601u_driver_19 *)arg0;
  #line 1164 
  emg_19_choice = 0;
  #line 1165 
  emg_19_probe_retval = ldv_undef_int();
  #line 1166 
  emg_19_choice = 0;
  #line 1167 
  emg_19_container = emg_alias_mt7601u_driver;
  #line 1168 
  emg_19_probe_retval = ldv_undef_int();
  #line 1170 
  __VERIFIER_assume(data->arg0 == emg_alias_mt7601u_driver);
  #line 1172 
  if (data != (struct emg_struct_usb_scenario_mt7601u_driver_19 *)0) {
    #line 1173 
    emg_19_container = data->arg0;
    #line 1174 
    ldv_free((void *)data);
  }
  #line 1179 
  emg_19_resource = (struct usb_interface *)ldv_xmalloc(1704UL);
  #line 1180 
  emg_19_usb_device = (struct usb_device *)ldv_xmalloc(2200UL);
  #line 1181 
  emg_19_resource->dev.parent = & emg_19_usb_device->dev;
  #line 1182 
  emg_19_choice = __ldv_undef_int_range(0,16);
  #line 1183 
  emg_19_device_id = emg_19_container->id_table + (unsigned long)emg_19_choice;
  #line 1187 
  goto emg_manage_interface_19;
  #line 1191 
  return (void *)0;
  #line 1194 
  emg_manage_interface_19: 
                           #line 1194 
  ;
  #line 1195 
  if (ldv_undef_int() != 0) {
    #line 1198 
    ldv_pre_probe();
    #line 1202 
    emg_19_probe_retval = emg_wrapper_mt7601u_probe(emg_19_resource,emg_19_device_id);
    #line 1207 
    emg_19_probe_retval = ldv_post_probe(emg_19_probe_retval);
    #line 1210 
    if (ldv_undef_int() != 0) {
      #line 1212 
      __VERIFIER_assume(emg_19_probe_retval == 0);
      #line 1215 
      switch (ldv_undef_int()) {
        #line 1216 
        case 0: 
                #line 1216 
        ;
        #line 1222 
        if (emg_19_container->pre_reset != (int (*)(struct usb_interface *))0) 
          #line 1223 
          (*(emg_19_container->pre_reset))(emg_19_resource);
        #line 1228 
        if (emg_19_container->post_reset != (int (*)(struct usb_interface *))0) 
          #line 1229 
          (*(emg_19_container->post_reset))(emg_19_resource);
        #line 1232 
        break;
        #line 1234 
        case 1: 
                #line 1234 
        ;
        #line 1236 
        emg_19_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
        #line 1236 
        emg_19_emg_param_1_0 = emg_19_emg_param_1_0;
        #line 1240 
        emg_wrapper_mt7601u_suspend(emg_19_resource,*emg_19_emg_param_1_0);
        #line 1244 
        ldv_free((void *)emg_19_emg_param_1_0);
        #line 1247 
        if (ldv_undef_int() != 0) 
                                  #line 1249 
                                  emg_wrapper_mt7601u_resume(emg_19_resource); else 
                                                                    #line 1253 
                                                                    emg_wrapper_mt7601u_resume(emg_19_resource);
        #line 1256 
        break;
        #line 1258 
        case 2: 
                #line 1258 
        ;
        #line 1262 
        break;
        #line 1264 
        case 3: 
                #line 1264 
        ;
        #line 1267 
        break;
        #line 1269 
        default: 
                 #line 1269 
        ;
        #line 1269 
        __VERIFIER_assume(0);
      }
      #line 1273 
      emg_wrapper_mt7601u_disconnect(emg_19_resource);
    }
    else 
         #line 1277 
         __VERIFIER_assume(emg_19_probe_retval != 0);
    #line 1281 
    if (emg_repeat_cnt_manage_interface_19 > 0) {
      #line 1282 
      emg_repeat_cnt_manage_interface_19 --;
      #line 1284 
      goto emg_manage_interface_19;
    }
    else 
         #line 1286 
         __VERIFIER_assume(0);
  }
  else {
    #line 1292 
    ldv_free((void *)emg_19_resource);
    #line 1293 
    ldv_free((void *)emg_19_usb_device);
  }
  #line 1301 
  return (void *)0;
}

#line 1306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 1309 
  struct dentry *emg_2_dentry;
  #line 1310 
  struct inode *emg_2_inode;
  #line 1312 
  if (ldv_undef_int() != 0) {
    #line 1314 
    emg_2_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1315 
    emg_2_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1316 
    emg_2_inode->i_mode = (unsigned short)16877U;
    #line 1317 
    emg_2_dentry->d_parent = arg1;
    #line 1318 
    emg_2_dentry->d_inode = emg_2_inode;
    #line 1319 
    return emg_2_dentry;
  }
  else {
    #line 1323 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1331  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 1334 
  struct dentry *emg_3_dentry;
  #line 1335 
  struct file_operations *emg_3_file_operations;
  #line 1336 
  struct inode *emg_3_inode;
  #line 1338 
  if (ldv_undef_int() != 0) {
    #line 1340 
    emg_3_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 1341 
    emg_3_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 1342 
    emg_3_inode->i_mode = arg1;
    #line 1343 
    emg_3_dentry->d_parent = arg2;
    #line 1344 
    emg_3_inode->i_private = arg3;
    #line 1345 
    emg_3_file_operations = arg4;
    #line 1346 
    emg_3_dentry->d_inode = emg_3_inode;
    #line 1347 
    ldv_save_allocated_memory_to_list((void *)emg_3_dentry);
    #line 1351 
    emg_dispatch_register_3(emg_3_file_operations);
    #line 1355 
    return emg_3_dentry;
  }
  else {
    #line 1359 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 1367  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_flush_delayed_work(struct delayed_work *arg0)
{
  #line 1370 
  struct delayed_work *emg_4_delayed_work;
  #line 1371 
  struct work_struct *emg_4_emg_param_0_0;
  #line 1373 
  if (ldv_undef_int() != 0) {
    #line 1375 
    emg_4_delayed_work = arg0;
    #line 1379 
    emg_4_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1379 
    emg_4_emg_param_0_0 = emg_4_emg_param_0_0;
    #line 1383 
    if (emg_4_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1384 
      (*(emg_4_delayed_work->work.func))(emg_4_emg_param_0_0);
    #line 1389 
    ldv_free((void *)emg_4_emg_param_0_0);
    #line 1393 
    return (_Bool)1;
  }
  else 
       #line 1397 
       return (_Bool)0;
}

#line 1405  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
struct ieee80211_hw *emg_ieee80211_alloc_hw(unsigned long arg0, struct ieee80211_ops *arg1)
{
  #line 1408 
  struct ieee80211_hw *emg_5_ieee80211_hw;
  #line 1409 
  struct ieee80211_ops *emg_5_ieee80211_ops;
  #line 1411 
  emg_5_ieee80211_ops = & mt7601u_ops;
  #line 1412 
  if (ldv_undef_int() != 0) {
    #line 1414 
    emg_5_ieee80211_ops = arg1;
    #line 1415 
    emg_5_ieee80211_hw = (struct ieee80211_hw *)ldv_xmalloc(184UL);
    #line 1419 
    emg_dispatch_register_5(emg_5_ieee80211_hw);
    #line 1423 
    return emg_5_ieee80211_hw;
  }
  else 
       #line 1427 
       return (struct ieee80211_hw *)0;
}

#line 1435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_ieee80211_free_hw(struct ieee80211_hw *arg0)
{
  #line 1438 
  struct ieee80211_hw *emg_6_ieee80211_hw;
  #line 1441 
  emg_dispatch_deregister_6(emg_6_ieee80211_hw);
  #line 1445 
  ldv_free((void *)emg_6_ieee80211_hw);
  #line 1448 
  return;
}

#line 1453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 1456 
  struct delayed_work *emg_7_delayed_work;
  #line 1457 
  struct work_struct *emg_7_emg_param_0_0;
  #line 1459 
  if (ldv_undef_int() != 0) {
    #line 1461 
    emg_7_delayed_work = arg1;
    #line 1465 
    emg_7_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1465 
    emg_7_emg_param_0_0 = emg_7_emg_param_0_0;
    #line 1469 
    if (emg_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1470 
      (*(emg_7_delayed_work->work.func))(emg_7_emg_param_0_0);
    #line 1475 
    ldv_free((void *)emg_7_emg_param_0_0);
    #line 1479 
    return (_Bool)1;
  }
  else 
       #line 1483 
       return (_Bool)0;
}

#line 1491  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  #line 1496 
  arg0->func = arg1;
  #line 1497 
  arg0->data = arg2;
  #line 1498 
  arg0->count.counter = 0;
  #line 1501 
  return;
}

#line 1506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  #line 1509 
  unsigned long emg_9_emg_param_0_0;
  #line 1510 
  struct tasklet_struct *emg_9_tasklet_struct;
  #line 1513 
  emg_9_tasklet_struct = arg0;
  #line 1517 
  if (emg_9_tasklet_struct->count.counter == 0) 
    #line 1518 
    if (emg_9_tasklet_struct->func != (void (*)(unsigned long ))0) 
                                                                   #line 1519 
                                                                   (*(emg_9_tasklet_struct->func))(emg_9_emg_param_0_0);
  #line 1524 
  return;
}

#line 1529  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_usb_deregister(struct usb_driver *arg0)
{
  #line 1532 
  struct usb_driver *emg_10_usb_driver;
  #line 1534 
  emg_10_usb_driver = emg_alias_mt7601u_driver;
  #line 1536 
  emg_10_usb_driver = arg0;
  #line 1540 
  emg_dispatch_deregister_10(emg_10_usb_driver);
  #line 1543 
  return;
}

#line 1548  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void emg_usb_kill_urb(struct urb *arg0)
{
  #line 1551 
  struct urb *emg_11_urb;
  #line 1554 
  emg_11_urb = arg0;
  #line 1557 
  if (ldv_undef_int() != 0) {
    #line 1559 
    __VERIFIER_assume(emg_11_urb != (struct urb *)0);
    #line 1563 
    if (emg_11_urb->complete != (void (*)(struct urb *))0) 
                                                           #line 1564 
                                                           (*(emg_11_urb->complete))(emg_11_urb);
  }
  else 
       #line 1569 
       __VERIFIER_assume(emg_11_urb == (struct urb *)0);
  #line 1573 
  return;
}

#line 1578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
int emg_usb_register_driver(struct usb_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1581 
  struct usb_driver *emg_12_usb_driver;
  #line 1583 
  emg_12_usb_driver = emg_alias_mt7601u_driver;
  #line 1584 
  if (ldv_undef_int() != 0) {
    #line 1586 
    emg_12_usb_driver = arg0;
    #line 1590 
    emg_dispatch_register_12(emg_12_usb_driver);
    #line 1594 
    return 0;
  }
  else {
    #line 1598 
    ldv_failed_usb_register_driver();
    #line 1599 
    return ldv_undef_int_negative();
  }
}

#line 1607  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
int emg_usb_reset_device(struct usb_device *arg0)
{
  #line 1616 
  return 0;
}

#line 1623  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
int emg_usb_submit_urb(struct urb *arg0, unsigned int arg1)
{
  #line 1626 
  struct urb *emg_14_urb;
  #line 1628 
  if (ldv_undef_int() != 0) {
    #line 1630 
    emg_14_urb = arg0;
    #line 1631 
    ldv_check_alloc_flags(arg1);
    #line 1635 
    if (emg_14_urb->complete != (void (*)(struct urb *))0) 
                                                           #line 1636 
                                                           (*(emg_14_urb->complete))(emg_14_urb);
    #line 1641 
    return (int)((long)ldv_malloc_unknown_size());
  }
  else 
       #line 1645 
       return 0;
}

#line 1653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1656 
  int emg_1_ret;
  #line 1659 
  emg_1_ret = emg_mt7601u_driver_init();
  #line 1660 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1663 
  if (ldv_undef_int() != 0) {
    #line 1665 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1669 
    emg_mt7601u_driver_exit();
  }
  else 
       #line 1673 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1677 
  return (void *)0;
}

#line 1682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1684 
  ldv_initialize();
  #line 1686 
  emg_entry_point_insmod((void *)0);
  #line 1688 
  return 0;
}

